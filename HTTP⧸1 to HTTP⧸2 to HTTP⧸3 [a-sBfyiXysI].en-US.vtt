WEBVTT

-US

00:00:07.920 --> 00:00:10.269
HTTP has been around since the 90s.

00:00:10.269 --> 00:00:12.255
How has it evolved over the years?

00:00:12.255 --> 00:00:14.546
What is the latest development?

00:00:14.546 --> 00:00:15.992
Let’s take a look.

00:00:15.992 --> 00:00:18.821
Here is the progression of the HTTP versions so far,

00:00:18.821 --> 00:00:24.711
from HTTP/1, to 1.1, to 2, and now to HTTP/3.

00:00:24.711 --> 00:00:27.000
Let’s look at each one more closely.

00:00:27.000 --> 00:00:29.971
HTTP/1 came out in 1996.

00:00:29.971 --> 00:00:31.770
It is built on top of TCP.

00:00:32.353 --> 00:00:36.604
Every request to the same server 
requires a separate TCP connection.

00:00:37.319 --> 00:00:40.896
HTT/1.1 soon followed in 1997.

00:00:41.182 --> 00:00:43.848
It introduced&nbsp;a keep-alive mechanism

00:00:43.848 --> 00:00:47.456
so a connection could be reuse
for more than a single request.

00:00:48.000 --> 00:00:51.064
The&nbsp;persistent connections reduce request latency

00:00:51.368 --> 00:00:53.216
because the client does not need to initiate

00:00:53.216 --> 00:00:57.834
expensive TCP three-way handshake for every request.

00:00:58.603 --> 00:01:02.591
It's worthwhile to note that HTTP/1.1 also

00:01:02.591 --> 00:01:04.330
added HTTP pipelining.

00:01:04.754 --> 00:01:08.247
This in theory allows the client to send multiple requests

00:01:08.247 --> 00:01:10.264
before waiting for each response.

00:01:10.569 --> 00:01:13.923
The response must be received 
in the same order as to requests

00:01:14.599 --> 00:01:16.756
It was tricky&nbsp;to implement correctly

00:01:16.756 --> 00:01:21.271
and many proxy servers in between 
did not handle pipelining properly.

00:01:21.841 --> 00:01:25.382
Its support was eventually removed 
from many web browsers.

00:01:26.628 --> 00:01:31.701
HTTP/1.1 with pipelining also suffers&nbsp;
from an issue called head of line blocking.

00:01:32.178 --> 00:01:33.558
Without align blocking,

00:01:33.558 --> 00:01:36.847
subsequent requests on&nbsp;the same connection

00:01:36.847 --> 00:01:39.480
must wait for the previous requests 
to complete.

00:01:39.824 --> 00:01:43.607
If a request is blocked&nbsp;for any reason like packet loss,

00:01:43.607 --> 00:01:47.727
all subsequent requests on the same
connection are also impacted.

00:01:48.602 --> 00:01:51.239
To keep loading performance at an acceptable level,

00:01:51.490 --> 00:01:54.821
browsers normally keep multiple TCP connections

00:01:54.821 --> 00:01:59.379
to the same server and send requests to it 
in parallel

00:01:59.379 --> 00:02:02.923
HTTP/2 was published in 2015.

00:02:02.923 --> 00:02:08.413
HTTP/2&nbsp;introduces HTTP streams, 
where multiple streams of requests

00:02:08.413 --> 00:02:11.876
could be sent to the same server on 
a single TCP connection.

00:02:12.062 --> 00:02:14.697
Unlike HTT/1.1 pipelining,

00:02:14.697 --> 00:02:17.112
each stream is independent of each other

00:02:17.112 --> 00:02:20.313
and it&nbsp;does not need to be sent or received in order.

00:02:21.082 --> 00:02:26.022
HTTP/2 solves the headline blocking issue 
at the&nbsp;application layer

00:02:26.022 --> 00:02:29.027
but the issue still exists in the transport layer with TCP.

00:02:29.650 --> 00:02:34.066
Also note that HTTP/2 introduced a push capability

00:02:34.066 --> 00:02:38.986
to allow servers to send updates to the clients whenever new data is available

00:02:38.986 --> 00:02:42.009
without requiring a client to poll.

00:02:42.160 --> 00:02:45.686
HTTP/3 began as a draft in 2020

00:02:45.686 --> 00:02:48.720
and has&nbsp;recently been published in June 2022.

00:02:49.280 --> 00:02:51.537
It uses a new protocol called QUIC

00:02:51.537 --> 00:02:54.625
instead&nbsp;of TCP as the underlying transport protocol.

00:02:55.200 --> 00:02:57.272
QUIC is based on UDP.

00:02:57.272 --> 00:03:01.760
It introduces streams as&nbsp;the first-class citizen 
at the transport layer.

00:03:02.400 --> 00:03:04.875
QUIC streams share the same quick connection

00:03:04.875 --> 00:03:07.685
so  no additional handshakes are required

00:03:07.685 --> 00:03:08.741
to create new ones.

00:03:09.271 --> 00:03:11.732
QUIC streams are delivered independently.

00:03:11.732 --> 00:03:14.764
In most cases, packet loss affecting one stream

00:03:14.764 --> 00:03:15.979
doesn't affect others.

00:03:16.350 --> 00:03:20.105
This is how QUIC eliminates&nbsp;the head of line blocking 
at the transport layer.

00:03:21.132 --> 00:03:24.213
QUIC is designed for mobile heavy internet usage.

00:03:24.372 --> 00:03:28.098
People carrying smartphones constantly switch from one network to another

00:03:28.098 --> 00:03:30.050
as they move about their day.

00:03:30.050 --> 00:03:32.611
With TCP, the handoff of one connection

00:03:33.092 --> 00:03:35.492
from one network to another is sluggish&nbsp;.

00:03:36.386 --> 00:03:39.294
QUIC implements a concept called connection&nbsp;ID,

00:03:39.559 --> 00:03:41.459
which allows connections to move between

00:03:41.459 --> 00:03:45.500
IP addresses and network interfaces
 quickly&nbsp;and reliably.

00:03:46.481 --> 00:03:49.188
Even though HTTP/3 has just been standardized,

00:03:49.400 --> 00:03:54.861
it is used by 25% of the&nbsp;websites and supported 
by many web browsers.

00:03:55.239 --> 00:03:57.279
if you would like to learn more about system&nbsp;design,

00:03:57.279 --> 00:03:59.437
check out our books and weekly newsletter.

00:04:00.100 --> 00:04:02.151
Please subscribe if you learned something new.

00:04:02.151 --> 00:04:04.427
Thank you so much and we'll see you next time.

