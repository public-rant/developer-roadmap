   #[https://developer.mozilla.org/opensearch.xml]MDN Web Docs
   [https://developer.mozilla.org/fr/docs/Learn/Tools_and_testing/Understa
   nding_client-side_tools/Command_line]Cours express sur la ligne de
   commande
   [https://developer.mozilla.org/ja/docs/Learn/Tools_and_testing/Understa
   nding_client-side_tools/Command_line]コマンドライン短期集中講座
   [https://developer.mozilla.org/zh-CN/docs/Learn/Tools_and_testing/Under
   standing_client-side_tools/Command_line]命令行速成课
   [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Under
   standing_client-side_tools/Command_line]Command line crash course
   [https://developer.mozilla.org/en-US/blog/rss.xml]MDN Blog RSS Feed

     * [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/U
       nderstanding_client-side_tools/Command_line#content]Skip to main
       content
     * [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/U
       nderstanding_client-side_tools/Command_line#top-nav-search-input]Sk
       ip to search
     * [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/U
       nderstanding_client-side_tools/Command_line#languages-switcher-butt
       on]Skip to select language

   [https://developer.mozilla.org/en-US/](BUTTON) Open main menu

     * (BUTTON)
       References[https://developer.mozilla.org/en-US/docs/Web]References
          + [https://developer.mozilla.org/en-US/docs/Web]Overview / Web
            Technology
            Web technology reference for developers
          + [https://developer.mozilla.org/en-US/docs/Web/HTML]HTML
            Structure of content on the web
          + [https://developer.mozilla.org/en-US/docs/Web/CSS]CSS
            Code used to describe document style
          + [https://developer.mozilla.org/en-US/docs/Web/JavaScript]JavaS
            cript
            General-purpose scripting language
          + [https://developer.mozilla.org/en-US/docs/Web/HTTP]HTTP
            Protocol for transmitting web resources
          + [https://developer.mozilla.org/en-US/docs/Web/API]Web APIs
            Interfaces for building web applications
          + [https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebE
            xtensions]Web Extensions
            Developing extensions for web browsers
          + [https://developer.mozilla.org/en-US/docs/Web]Web Technology
            Web technology reference for developers
     * (BUTTON)
       Guides[https://developer.mozilla.org/en-US/docs/Learn]Guides
          + [https://developer.mozilla.org/en-US/docs/Learn]Overview / MDN
            Learning Area
            Learn web development
          + [https://developer.mozilla.org/en-US/docs/Learn]MDN Learning
            Area
            Learn web development
          + [https://developer.mozilla.org/en-US/docs/Learn/HTML]HTML
            Learn to structure web content with HTML
          + [https://developer.mozilla.org/en-US/docs/Learn/CSS]CSS
            Learn to style content using CSS
          + [https://developer.mozilla.org/en-US/docs/Learn/JavaScript]Jav
            aScript
            Learn to run scripts in the browser
          + [https://developer.mozilla.org/en-US/docs/Web/Accessibility]Ac
            cessibility
            Learn to make the web accessible to all
     * (BUTTON) Plus[https://developer.mozilla.org/en-US/plus]Plus
          + [https://developer.mozilla.org/en-US/plus]Overview
            A customized MDN experience
          + [https://developer.mozilla.org/en-US/plus/ai-help]AI Help
            (beta)
            Get real-time assistance and support
          + [https://developer.mozilla.org/en-US/plus/updates]Updates
            All browser compatibility updates at a glance
          + [https://developer.mozilla.org/en-US/plus/docs/features/overvi
            ew]Documentation
            Learn how to use MDN Plus
          + [https://developer.mozilla.org/en-US/plus/docs/faq]FAQ
            Frequently asked questions about MDN Plus
     * [https://developer.mozilla.org/en-US/blog/]Blog
     * [https://developer.mozilla.org/en-US/play]Play ^New
     * [https://developer.mozilla.org/en-US/plus/ai-help/]AI Help ^Beta

   Search MDN ____________________ (BUTTON) Clear search input (BUTTON)
   Search
   (BUTTON) Theme
     * [https://developer.mozilla.org/users/fxa/login/authenticate/?next=%
       2Fen-US%2Fdocs%2FLearn%2FTools_and_testing%2FUnderstanding_client-s
       ide_tools%2FCommand_line]Log in
     * [https://developer.mozilla.org/en-US/plus]Get MDN Plus

   (BUTTON)

    1. [https://developer.mozilla.org/en-US/docs/Learn]Guides

     [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing]Too
   ls and testing

     [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Und
   erstanding_client-side_tools]Understanding client-side web development
   tools

     [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Und
   erstanding_client-side_tools/Command_line]Command line crash course

   (BUTTON) Article Actions
     * (BUTTON) English (US)

   (BUTTON)

   Filter sidebar ____________________ (BUTTON) Clear filter input

In this article

     * [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/U
       nderstanding_client-side_tools/Command_line#welcome_to_the_terminal
       ]Welcome to the terminal
     * [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/U
       nderstanding_client-side_tools/Command_line#basic_built-in_terminal
       _commands]Basic built-in terminal commands
     * [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/U
       nderstanding_client-side_tools/Command_line#terminal_%E2%80%94_cons
       idered_harmful]Terminal — considered harmful?
     * [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/U
       nderstanding_client-side_tools/Command_line#connecting_commands_tog
       ether_with_pipes]Connecting commands together with pipes
     * [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/U
       nderstanding_client-side_tools/Command_line#a_slightly_more_complex
       _example]A slightly more complex example
     * [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/U
       nderstanding_client-side_tools/Command_line#adding_powerups]Adding
       powerups
     * [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/U
       nderstanding_client-side_tools/Command_line#other_tools_to_play_wit
       h]Other tools to play with
     * [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/U
       nderstanding_client-side_tools/Command_line#summary]Summary

    1. [https://developer.mozilla.org/en-US/docs/Learn/Getting_started_wit
       h_the_web]Complete beginners start here!
    2. Getting started with the web
         1. [https://developer.mozilla.org/en-US/docs/Learn/Getting_starte
            d_with_the_web]Getting started with the web
         2. [https://developer.mozilla.org/en-US/docs/Learn/Getting_starte
            d_with_the_web/Installing_basic_software]Installing basic
            software
         3. [https://developer.mozilla.org/en-US/docs/Learn/Getting_starte
            d_with_the_web/What_will_your_website_look_like]What will your
            website look like?
         4. [https://developer.mozilla.org/en-US/docs/Learn/Getting_starte
            d_with_the_web/Dealing_with_files]Dealing with files
         5. [https://developer.mozilla.org/en-US/docs/Learn/Getting_starte
            d_with_the_web/HTML_basics]HTML basics
         6. [https://developer.mozilla.org/en-US/docs/Learn/Getting_starte
            d_with_the_web/CSS_basics]CSS basics
         7. [https://developer.mozilla.org/en-US/docs/Learn/Getting_starte
            d_with_the_web/JavaScript_basics]JavaScript basics
         8. [https://developer.mozilla.org/en-US/docs/Learn/Getting_starte
            d_with_the_web/Publishing_your_website]Publishing your website
         9. [https://developer.mozilla.org/en-US/docs/Learn/Getting_starte
            d_with_the_web/How_the_Web_works]How the web works
    3. [https://developer.mozilla.org/en-US/docs/Learn/HTML]HTML —
       Structuring the web
    4. Introduction to HTML
         1. [https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduct
            ion_to_HTML]Introduction to HTML
         2. [https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduct
            ion_to_HTML/Getting_started]Getting started with HTML
         3. [https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduct
            ion_to_HTML/The_head_metadata_in_HTML]What's in the head?
            Metadata in HTML
         4. [https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduct
            ion_to_HTML/HTML_text_fundamentals]HTML text fundamentals
         5. [https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduct
            ion_to_HTML/Creating_hyperlinks]Creating hyperlinks
         6. [https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduct
            ion_to_HTML/Advanced_text_formatting]Advanced text formatting
         7. [https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduct
            ion_to_HTML/Document_and_website_structure]Document and
            website structure
         8. [https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduct
            ion_to_HTML/Debugging_HTML]Debugging HTML
         9. [https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduct
            ion_to_HTML/Marking_up_a_letter]Marking up a letter
        10. [https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduct
            ion_to_HTML/Structuring_a_page_of_content]Structuring a page
            of content
    5. Multimedia and embedding
         1. [https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedi
            a_and_embedding]Multimedia and embedding
         2. [https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedi
            a_and_embedding/Images_in_HTML]Images in HTML
         3. [https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedi
            a_and_embedding/Video_and_audio_content]Video and audio
            content
         4. [https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedi
            a_and_embedding/Other_embedding_technologies]From object to
            iframe — other embedding technologies
         5. [https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedi
            a_and_embedding/Adding_vector_graphics_to_the_Web]Adding
            vector graphics to the web
         6. [https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedi
            a_and_embedding/Responsive_images]Responsive images
         7. [https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedi
            a_and_embedding/Mozilla_splash_page]Mozilla splash page
    6. HTML tables
         1. [https://developer.mozilla.org/en-US/docs/Learn/HTML/Tables]HT
            ML tables
         2. [https://developer.mozilla.org/en-US/docs/Learn/HTML/Tables/Ba
            sics]HTML table basics
         3. [https://developer.mozilla.org/en-US/docs/Learn/HTML/Tables/Ad
            vanced]HTML table advanced features and accessibility
         4. [https://developer.mozilla.org/en-US/docs/Learn/HTML/Tables/St
            ructuring_planet_data]Structuring planet data
    7. [https://developer.mozilla.org/en-US/docs/Learn/CSS]CSS — Styling
       the web
    8. CSS first steps
         1. [https://developer.mozilla.org/en-US/docs/Learn/CSS/First_step
            s]CSS first steps overview
         2. [https://developer.mozilla.org/en-US/docs/Learn/CSS/First_step
            s/What_is_CSS]What is CSS?
         3. [https://developer.mozilla.org/en-US/docs/Learn/CSS/First_step
            s/Getting_started]Getting started with CSS
         4. [https://developer.mozilla.org/en-US/docs/Learn/CSS/First_step
            s/How_CSS_is_structured]How CSS is structured
         5. [https://developer.mozilla.org/en-US/docs/Learn/CSS/First_step
            s/How_CSS_works]How CSS works
         6. [https://developer.mozilla.org/en-US/docs/Learn/CSS/First_step
            s/Styling_a_biography_page]Styling a biography page
    9. CSS building blocks
         1. [https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_b
            locks]CSS building blocks
         2. [https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_b
            locks/Selectors]CSS selectors
         3. [https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_b
            locks/Selectors/Type_Class_and_ID_Selectors]Type, class, and
            ID selectors
         4. [https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_b
            locks/Selectors/Attribute_selectors]Attribute selectors
         5. [https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_b
            locks/Selectors/Pseudo-classes_and_pseudo-elements]Pseudo-clas
            ses and pseudo-elements
         6. [https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_b
            locks/Selectors/Combinators]Combinators
         7. [https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_b
            locks/Cascade_and_inheritance]Cascade, specificity, and
            inheritance
         8. [https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_b
            locks/Cascade_layers]Cascade layers
         9. [https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_b
            locks/The_box_model]The box model
        10. [https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_b
            locks/Backgrounds_and_borders]Backgrounds and borders
        11. [https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_b
            locks/Handling_different_text_directions]Handling different
            text directions
        12. [https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_b
            locks/Overflowing_content]Overflowing content
        13. [https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_b
            locks/Values_and_units]CSS values and units
        14. [https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_b
            locks/Sizing_items_in_CSS]Sizing items in CSS
        15. [https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_b
            locks/Images_media_form_elements]Images, media, and form
            elements
        16. [https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_b
            locks/Styling_tables]Styling tables
        17. [https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_b
            locks/Debugging_CSS]Debugging CSS
        18. [https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_b
            locks/Organizing]Organizing your CSS
        19. [https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_b
            locks/Fundamental_CSS_comprehension]Fundamental CSS
            comprehension
        20. [https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_b
            locks/Creating_fancy_letterheaded_paper]Creating fancy
            letterheaded paper
        21. [https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_b
            locks/A_cool_looking_box]A cool-looking box
   10. Styling text
         1. [https://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_te
            xt]CSS styling text
         2. [https://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_te
            xt/Fundamentals]Fundamental text and font styling
         3. [https://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_te
            xt/Styling_lists]Styling lists
         4. [https://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_te
            xt/Styling_links]Styling links
         5. [https://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_te
            xt/Web_fonts]Web fonts
         6. [https://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_te
            xt/Typesetting_a_homepage]Typesetting a community school
            homepage
   11. CSS layout
         1. [https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout
            ]CSS layout
         2. [https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout
            /Introduction]Introduction to CSS layout
         3. [https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout
            /Normal_Flow]Normal Flow
         4. [https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout
            /Flexbox]Flexbox
         5. [https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout
            /Grids]Grids
         6. [https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout
            /Floats]Floats
         7. [https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout
            /Positioning]Positioning
         8. [https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout
            /Multiple-column_Layout]Multiple-column layout
         9. [https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout
            /Responsive_Design]Responsive design
        10. [https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout
            /Media_queries]Beginner's guide to media queries
        11. [https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout
            /Legacy_Layout_Methods]Legacy layout methods
        12. [https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout
            /Supporting_Older_Browsers]Supporting older browsers
        13. [https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout
            /Fundamental_Layout_Comprehension]Fundamental layout
            comprehension
   12. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript]JavaScri
       pt — Dynamic client-side scripting
   13. JavaScript first steps
         1. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Fir
            st_steps]JavaScript First Steps
         2. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Fir
            st_steps/What_is_JavaScript]What is JavaScript?
         3. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Fir
            st_steps/A_first_splash]A first splash into JavaScript
         4. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Fir
            st_steps/What_went_wrong]What went wrong? Troubleshooting
            JavaScript
         5. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Fir
            st_steps/Variables]Storing the information you need —
            Variables
         6. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Fir
            st_steps/Math]Basic math in JavaScript — numbers and operators
         7. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Fir
            st_steps/Strings]Handling text — strings in JavaScript
         8. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Fir
            st_steps/Useful_string_methods]Useful string methods
         9. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Fir
            st_steps/Arrays]Arrays
        10. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Fir
            st_steps/Silly_story_generator]Silly story generator
   14. JavaScript building blocks
         1. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Bui
            lding_blocks]JavaScript building blocks
         2. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Bui
            lding_blocks/conditionals]Making decisions in your code —
            conditionals
         3. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Bui
            lding_blocks/Looping_code]Looping code
         4. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Bui
            lding_blocks/Functions]Functions — reusable blocks of code
         5. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Bui
            lding_blocks/Build_your_own_function]Build your own function
         6. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Bui
            lding_blocks/Return_values]Function return values
         7. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Bui
            lding_blocks/Events]Introduction to events
         8. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Bui
            lding_blocks/Image_gallery]Image gallery
   15. Introducing JavaScript objects
         1. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Obj
            ects]Introducing JavaScript objects
         2. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Obj
            ects/Basics]JavaScript object basics
         3. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Obj
            ects/Object_prototypes]Object prototypes
         4. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Obj
            ects/Object-oriented_programming]Object-oriented programming
         5. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Obj
            ects/Classes_in_JavaScript]Classes in JavaScript
         6. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Obj
            ects/JSON]Working with JSON
         7. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Obj
            ects/Object_building_practice]Object building practice
         8. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Obj
            ects/Adding_bouncing_balls_features]Adding features to our
            bouncing balls demo
   16. Asynchronous JavaScript
         1. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asy
            nchronous]Asynchronous JavaScript
         2. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asy
            nchronous/Introducing]Introducing asynchronous JavaScript
         3. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asy
            nchronous/Promises]How to use promises
         4. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asy
            nchronous/Implementing_a_promise-based_API]How to implement a
            promise-based API
         5. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asy
            nchronous/Introducing_workers]Introducing workers
         6. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asy
            nchronous/Sequencing_animations]Sequencing animations
   17. Client-side web APIs
         1. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Cli
            ent-side_web_APIs]Client-side web APIs
         2. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Cli
            ent-side_web_APIs/Introduction]Introduction to web APIs
         3. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Cli
            ent-side_web_APIs/Manipulating_documents]Manipulating
            documents
         4. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Cli
            ent-side_web_APIs/Fetching_data]Fetching data from the server
         5. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Cli
            ent-side_web_APIs/Third_party_APIs]Third-party APIs
         6. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Cli
            ent-side_web_APIs/Drawing_graphics]Drawing graphics
         7. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Cli
            ent-side_web_APIs/Video_and_audio_APIs]Video and Audio APIs
         8. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Cli
            ent-side_web_APIs/Client-side_storage]Client-side storage
   18. [https://developer.mozilla.org/en-US/docs/Learn/Forms]Web forms —
       Working with user data
   19. Core forms learning pathway
         1. [https://developer.mozilla.org/en-US/docs/Learn/Forms]Web
            forms — Working with user data
         2. [https://developer.mozilla.org/en-US/docs/Learn/Forms/Your_fir
            st_form]Your first form
         3. [https://developer.mozilla.org/en-US/docs/Learn/Forms/How_to_s
            tructure_a_web_form]How to structure a web form
         4. [https://developer.mozilla.org/en-US/docs/Learn/Forms/Basic_na
            tive_form_controls]Basic native form controls
         5. [https://developer.mozilla.org/en-US/docs/Learn/Forms/HTML5_in
            put_types]The HTML5 input types
         6. [https://developer.mozilla.org/en-US/docs/Learn/Forms/Other_fo
            rm_controls]Other form controls
         7. [https://developer.mozilla.org/en-US/docs/Learn/Forms/Styling_
            web_forms]Styling web forms
         8. [https://developer.mozilla.org/en-US/docs/Learn/Forms/Advanced
            _form_styling]Advanced form styling
         9. [https://developer.mozilla.org/en-US/docs/Learn/Forms/UI_pseud
            o-classes]UI pseudo-classes
        10. [https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_val
            idation]Client-side form validation
        11. [https://developer.mozilla.org/en-US/docs/Learn/Forms/Sending_
            and_retrieving_form_data]Sending form data
   20. Advanced forms articles
         1. [https://developer.mozilla.org/en-US/docs/Learn/Forms/How_to_b
            uild_custom_form_controls]How to build custom form controls
         2. [https://developer.mozilla.org/en-US/docs/Learn/Forms/Sending_
            forms_through_JavaScript]Sending forms through JavaScript
         3. [https://developer.mozilla.org/en-US/docs/Learn/Forms/Property
            _compatibility_table_for_form_controls]CSS property
            compatibility table for form controls
   21. [https://developer.mozilla.org/en-US/docs/Learn/Accessibility]Acces
       sibility — Make the web usable by everyone
   22. Accessibility guides
         1. [https://developer.mozilla.org/en-US/docs/Learn/Accessibility]
            Accessibility
         2. [https://developer.mozilla.org/en-US/docs/Learn/Accessibility/
            What_is_accessibility]What is accessibility?
         3. [https://developer.mozilla.org/en-US/docs/Learn/Accessibility/
            HTML]HTML: A good basis for accessibility
         4. [https://developer.mozilla.org/en-US/docs/Learn/Accessibility/
            CSS_and_JavaScript]CSS and JavaScript accessibility best
            practices
         5. [https://developer.mozilla.org/en-US/docs/Learn/Accessibility/
            WAI-ARIA_basics]WAI-ARIA basics
         6. [https://developer.mozilla.org/en-US/docs/Learn/Accessibility/
            Multimedia]Accessible multimedia
         7. [https://developer.mozilla.org/en-US/docs/Learn/Accessibility/
            Mobile]Mobile accessibility
         8. [https://developer.mozilla.org/en-US/docs/Learn/Accessibility/
            Accessibility_troubleshooting]Assessment: Accessibility
            troubleshooting
   23. [https://developer.mozilla.org/en-US/docs/Learn/Performance]Perform
       ance — Making websites fast and responsive
   24. Performance guides
         1. [https://developer.mozilla.org/en-US/docs/Learn/Performance]We
            b performance
         2. [https://developer.mozilla.org/en-US/docs/Learn/Performance/wh
            y_web_performance]The "why" of web performance
         3. [https://developer.mozilla.org/en-US/docs/Learn/Performance/Wh
            at_is_web_performance]What is web performance?
         4. [https://developer.mozilla.org/en-US/docs/Learn/Performance/Pe
            rceived_performance]Perceived performance
         5. [https://developer.mozilla.org/en-US/docs/Learn/Performance/Me
            asuring_performance]Measuring performance
         6. [https://developer.mozilla.org/en-US/docs/Learn/Performance/Mu
            ltimedia]Multimedia: Images
         7. [https://developer.mozilla.org/en-US/docs/Learn/Performance/vi
            deo]Multimedia: video
         8. [https://developer.mozilla.org/en-US/docs/Learn/Performance/Ja
            vaScript]JavaScript performance
         9. [https://developer.mozilla.org/en-US/docs/Learn/Performance/HT
            ML]HTML performance features
        10. [https://developer.mozilla.org/en-US/docs/Learn/Performance/CS
            S]CSS performance optimization
        11. [https://developer.mozilla.org/en-US/docs/Learn/Performance/bu
            siness_case_for_performance]The business case for web
            performance
   25. [https://developer.mozilla.org/en-US/docs/Learn/MathML]MathML —
       Writing mathematics with MathML
   26. MathML first steps
         1. [https://developer.mozilla.org/en-US/docs/Learn/MathML/First_s
            teps]MathML first steps overview
         2. [https://developer.mozilla.org/en-US/docs/Learn/MathML/First_s
            teps/Getting_started]Getting started with MathML
         3. [https://developer.mozilla.org/en-US/docs/Learn/MathML/First_s
            teps/Three_famous_mathematical_formulas]Three famous
            mathematical formulas
   27. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing]T
       ools and testing
   28. Client-side web development tools
         1. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Understanding_client-side_tools]Understanding client-side
            web development tools
         2. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Understanding_client-side_tools/Overview]Client-side
            tooling overview
         3. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Understanding_client-side_tools/Command_line]Command line
            crash course
         4. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Understanding_client-side_tools/Package_management]Package
            management basics
         5. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Understanding_client-side_tools/Introducing_complete_toolc
            hain]Introducing a complete toolchain
         6. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Understanding_client-side_tools/Deployment]Deploying our
            app
   29. Introduction to client-side frameworks
         1. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Introduction]Introductio
            n to client-side frameworks
         2. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Main_features]Framework
            main features
   30. React
         1. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/React_getting_started]Ge
            tting started with React
         2. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/React_todo_list_beginnin
            g]Beginning our React todo list
         3. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/React_components]Compone
            ntizing our React app
         4. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/React_interactivity_even
            ts_state]React interactivity: Events and state
         5. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/React_interactivity_filt
            ering_conditional_rendering]React interactivity: Editing,
            filtering, conditional rendering
         6. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/React_accessibility]Acce
            ssibility in React
         7. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/React_resources]React
            resources
   31. Ember
         1. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Ember_getting_started]Ge
            tting started with Ember
         2. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Ember_structure_componen
            tization]Ember app structure and componentization
         3. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Ember_interactivity_even
            ts_state]Ember interactivity: Events, classes and state
         4. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Ember_conditional_footer
            ]Ember Interactivity: Footer functionality, conditional
            rendering
         5. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Ember_routing]Routing in
            Ember
         6. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Ember_resources]Ember
            resources and troubleshooting
   32. Vue
         1. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Vue_getting_started]Gett
            ing started with Vue
         2. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Vue_first_component]Crea
            ting our first Vue component
         3. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Vue_rendering_lists]Rend
            ering a list of Vue components
         4. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Vue_methods_events_model
            s]Adding a new todo form: Vue events, methods, and models
         5. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Vue_styling]Styling Vue
            components with CSS
         6. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Vue_computed_properties]
            Using Vue computed properties
         7. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Vue_conditional_renderin
            g]Vue conditional rendering: editing existing todos
         8. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Vue_refs_focus_managemen
            t]Focus management with Vue refs
         9. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Vue_resources]Vue
            resources
   33. Svelte
         1. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Svelte_getting_started]G
            etting started with Svelte
         2. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Svelte_Todo_list_beginni
            ng]Starting our Svelte to-do list app
         3. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Svelte_variables_props]D
            ynamic behavior in Svelte: working with variables and props
         4. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Svelte_components]Compon
            entizing our Svelte app
         5. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Svelte_reactivity_lifecy
            cle_accessibility]Advanced Svelte: Reactivity, lifecycle,
            accessibility
         6. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Svelte_stores]Working
            with Svelte stores
         7. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Svelte_TypeScript]TypeSc
            ript support in Svelte
         8. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Svelte_deployment_next]D
            eployment and next steps
   34. Angular
         1. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Angular_getting_started]
            Getting started with Angular
         2. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Angular_todo_list_beginn
            ing]Beginning our Angular todo list app
         3. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Angular_styling]Styling
            our Angular app
         4. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Angular_item_component]C
            reating an item component
         5. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Angular_filtering]Filter
            ing our to-do items
         6. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Client-side_JavaScript_frameworks/Angular_building]Buildin
            g Angular applications and further resources
   35. Git and GitHub
         1. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/GitHub]Git and GitHub
   36. Cross browser testing
         1. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Cross_browser_testing]Cross browser testing
         2. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Cross_browser_testing/Introduction]Introduction to
            cross-browser testing
         3. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Cross_browser_testing/Testing_strategies]Strategies for
            carrying out testing
         4. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Cross_browser_testing/HTML_and_CSS]Handling common HTML
            and CSS problems
         5. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Cross_browser_testing/JavaScript]Handling common
            JavaScript problems
         6. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Cross_browser_testing/Accessibility]Handling common
            accessibility problems
         7. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Cross_browser_testing/Feature_detection]Implementing
            feature detection
         8. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Cross_browser_testing/Automated_testing]Introduction to
            automated testing
         9. [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_test
            ing/Cross_browser_testing/Your_own_automation_environment]Sett
            ing up your own test automation environment
   37. [https://developer.mozilla.org/en-US/docs/Learn/Server-side]Server-
       side website programming
   38. First steps
         1. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Fi
            rst_steps]Server-side website programming first steps
         2. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Fi
            rst_steps/Introduction]Introduction to the server side
         3. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Fi
            rst_steps/Client-Server_overview]Client-Server Overview
         4. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Fi
            rst_steps/Web_frameworks]Server-side web frameworks
         5. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Fi
            rst_steps/Website_security]Website security
   39. Django web framework (Python)
         1. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Dj
            ango]Django Web Framework (Python)
         2. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Dj
            ango/Introduction]Django introduction
         3. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Dj
            ango/development_environment]Setting up a Django development
            environment
         4. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Dj
            ango/Tutorial_local_library_website]Django Tutorial: The Local
            Library website
         5. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Dj
            ango/skeleton_website]Django Tutorial Part 2: Creating a
            skeleton website
         6. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Dj
            ango/Models]Django Tutorial Part 3: Using models
         7. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Dj
            ango/Admin_site]Django Tutorial Part 4: Django admin site
         8. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Dj
            ango/Home_page]Django Tutorial Part 5: Creating our home page
         9. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Dj
            ango/Generic_views]Django Tutorial Part 6: Generic list and
            detail views
        10. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Dj
            ango/Sessions]Django Tutorial Part 7: Sessions framework
        11. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Dj
            ango/Authentication]Django Tutorial Part 8: User
            authentication and permissions
        12. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Dj
            ango/Forms]Django Tutorial Part 9: Working with forms
        13. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Dj
            ango/Testing]Django Tutorial Part 10: Testing a Django web
            application
        14. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Dj
            ango/Deployment]Django Tutorial Part 11: Deploying Django to
            production
        15. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Dj
            ango/web_application_security]Django web application security
        16. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Dj
            ango/django_assessment_blog]Assessment: DIY Django mini blog
   40. Express Web Framework (node.js/JavaScript)
         1. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Ex
            press_Nodejs]Express web framework (Node.js/JavaScript)
         2. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Ex
            press_Nodejs/Introduction]Express/Node introduction
         3. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Ex
            press_Nodejs/development_environment]Setting up a Node
            development environment
         4. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Ex
            press_Nodejs/Tutorial_local_library_website]Express Tutorial:
            The Local Library website
         5. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Ex
            press_Nodejs/skeleton_website]Express Tutorial Part 2:
            Creating a skeleton website
         6. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Ex
            press_Nodejs/mongoose]Express Tutorial Part 3: Using a
            Database (with Mongoose)
         7. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Ex
            press_Nodejs/routes]Express Tutorial Part 4: Routes and
            controllers
         8. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Ex
            press_Nodejs/Displaying_data]Express Tutorial Part 5:
            Displaying library data
         9. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Ex
            press_Nodejs/forms]Express Tutorial Part 6: Working with forms
        10. [https://developer.mozilla.org/en-US/docs/Learn/Server-side/Ex
            press_Nodejs/deployment]Express Tutorial Part 7: Deploying to
            production
   41. [https://developer.mozilla.org/en-US/docs/Learn/Common_questions]Fu
       rther resources
   42. Common questions
         1. [https://developer.mozilla.org/en-US/docs/Learn/Common_questio
            ns]Common questions
         2. [https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto]Use
            HTML to solve common problems
         3. [https://developer.mozilla.org/en-US/docs/Learn/CSS/Howto]Use
            CSS to solve common problems
         4. [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/How
            to]Solve common problems in your JavaScript code
         5. [https://developer.mozilla.org/en-US/docs/Learn/Common_questio
            ns/Web_mechanics]Web mechanics
         6. [https://developer.mozilla.org/en-US/docs/Learn/Common_questio
            ns/Tools_and_setup]Tools and setup
         7. [https://developer.mozilla.org/en-US/docs/Learn/Common_questio
            ns/Design_and_accessibility]Design and accessibility

In this article

     * [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/U
       nderstanding_client-side_tools/Command_line#welcome_to_the_terminal
       ]Welcome to the terminal
     * [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/U
       nderstanding_client-side_tools/Command_line#basic_built-in_terminal
       _commands]Basic built-in terminal commands
     * [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/U
       nderstanding_client-side_tools/Command_line#terminal_%E2%80%94_cons
       idered_harmful]Terminal — considered harmful?
     * [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/U
       nderstanding_client-side_tools/Command_line#connecting_commands_tog
       ether_with_pipes]Connecting commands together with pipes
     * [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/U
       nderstanding_client-side_tools/Command_line#a_slightly_more_complex
       _example]A slightly more complex example
     * [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/U
       nderstanding_client-side_tools/Command_line#adding_powerups]Adding
       powerups
     * [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/U
       nderstanding_client-side_tools/Command_line#other_tools_to_play_wit
       h]Other tools to play with
     * [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/U
       nderstanding_client-side_tools/Command_line#summary]Summary

Command line crash course

     * [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/U
       nderstanding_client-side_tools/Overview]Previous
     * [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/U
       nderstanding_client-side_tools]Overview: Understanding client-side
       tools
     * [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/U
       nderstanding_client-side_tools/Package_management]Next

   In your development process, you'll undoubtedly be required to run some
   commands in the terminal (or on the "command line" — these are
   effectively the same thing). This article provides an introduction to
   the terminal, the essential commands you'll need to enter into it, how
   to chain commands together, and how to add your own command line
   interface (CLI) tools.
   Prerequisites: Familiarity with the core
   [https://developer.mozilla.org/en-US/docs/Learn/HTML]HTML,
   [https://developer.mozilla.org/en-US/docs/Learn/CSS]CSS, and
   [https://developer.mozilla.org/en-US/docs/Learn/JavaScript]JavaScript
   languages.
   Objective: To understand what the terminal/command line is, what basic
   commands you should learn, and how to install new command line tools.

[https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understandi
ng_client-side_tools/Command_line#welcome_to_the_terminal]Welcome to the
terminal

   The terminal is a text interface for executing text-based programs. If
   you're running any tooling for web development there's a
   near-guaranteed chance that you'll have to pop open the command line
   and run some commands to use your chosen tools (you'll often see such
   tools referred to as CLI tools — command line interface tools).

   A large number of tools can be used by typing commands into the command
   line; many come pre-installed on your system, and a huge number of
   others are installable from package registries. Package registries are
   like app stores, but (mostly) for command line based tools and
   software. We'll see how to install some tools later on in this chapter,
   and we'll learn more about package registries in the next chapter.

   One of the biggest criticisms of the command line is that it lacks
   hugely in user experience. Viewing the command line for the first time
   can be a daunting experience: a blank screen and a blinking cursor,
   with very little obvious help available on what to do.

   On the surface, they're far from welcoming but there's a lot you can do
   with them, and we promise that, with a bit of guidance and practice,
   using them will get easier! This is why we are providing this chapter —
   to help you get started in this seemingly unfriendly environment.

[https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understandi
ng_client-side_tools/Command_line#where_did_the_terminal_come_from]Where did
the terminal come from?

   The terminal originates from around the 1950s-60s and its original form
   really doesn't resemble what we use today (for that we should be
   thankful). You can read a bit of the history on Wikipedia's entry for
   [https://en.wikipedia.org/wiki/Computer_terminal]Computer Terminal.

   Since then, the terminal has remained a constant feature of all
   operating systems — from desktop machines to servers tucked away in the
   cloud, to microcomputers like the Raspberry PI Zero, and even to mobile
   phones. It provides direct access to the computer's underlying file
   system and low-level features, and is therefore incredibly useful for
   performing complex tasks rapidly, if you know what you are doing.

   It is also useful for automation — for example, to write a command to
   update the titles of hundreds of files instantly, say from
   "ch01-xxxx.png" to "ch02-xxxx.png". If you updated the file names using
   your finder or explorer GUI app, it would take you a long time.

   Anyway, the terminal is not going away anytime soon.

[https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understandi
ng_client-side_tools/Command_line#what_does_the_terminal_look_like]What does
the terminal look like?

   Below you can see some of the different flavors of programs that are
   available that can get you to a terminal.

   The next images show the command prompts available in Windows — there's
   a good range of options from the "cmd" program to "powershell" — which
   can be run from the start menu by typing the program name.

   A vanilla windows cmd line window, and a windows powershell window

   And below, you can see the macOS terminal application.

   A basic vanilla macOS terminal

[https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understandi
ng_client-side_tools/Command_line#how_do_you_access_the_terminal]How do you
access the terminal?

   Many developers today are using Unix-based tools (e.g. the terminal,
   and the tools you can access through it). Many tutorials and tools that
   exist on the web today support (and sadly assume) Unix-based systems,
   but not to worry — they are available on most systems. In this section,
   we'll look at how to get access to the terminal on your chosen system.

Linux/Unix

   As hinted at above, Linux/Unix systems have a terminal available by
   default, listed among your Applications.

macOS

   macOS has a system called Darwin that sits underneath the graphical
   user interface. Darwin is a Unix-like system, which provides the
   terminal, and access to the low-level tools. macOS Darwin mostly has
   parity with Unix, certainly good enough to not cause us any worries as
   we work through this article.

   The terminal is available on macOS at Applications/Utilities/Terminal.

Windows

   As with some other programming tools, using the terminal (or command
   line) on Windows has traditionally not been as simple or easy as on
   other operating systems. But things are getting better.

   Windows has traditionally had its own terminal-like program called cmd
   ("the command prompt") for a long time, but this definitely doesn't
   have parity with Unix commands, and is equivalent to the old-style
   Windows DOS prompt.

   Better programs exist for providing a terminal experience on Windows,
   such as Powershell ([https://github.com/PowerShell/PowerShell]see here
   to find installers), and Gitbash (which comes as part of the
   [https://gitforwindows.org/]git for Windows toolset).

   However, the best option for Windows in the modern day is the Windows
   Subsystem for Linux (WSL) — a compatibility layer for running Linux
   operating systems directly from inside Windows 10, allowing you to run
   a "true terminal" directly on Windows, without needing a virtual
   machine.

   This can be installed directly from the Windows store for free. You can
   find all the documentation you need in the
   [https://docs.microsoft.com/windows/wsl/]Windows Subsystem for Linux
   Documentation.

   a screenshot of the Windows subsystem for Linux documentation

   In terms of what option to choose on Windows, we'd strongly recommend
   trying to install the WSL. You could stick with the default command
   prompt (cmd), and many tools will work OK, but you'll find everything
   easier if you have better parity with Unix tools.

Side note: what's the difference between a command line and a terminal?

   Generally, you'll find these two terms used interchangeably.
   Technically, a terminal is a software that starts and connects to a
   shell. A shell is your session and session environment (where things
   like the prompt and shortcuts might be customized). The command line is
   the literal line where you enter commands and the cursor blinks.

[https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understandi
ng_client-side_tools/Command_line#do_you_have_to_use_the_terminal]Do you have
to use the terminal?

   Although there's a great wealth of tools available from the command
   line, if you're using tools like [https://code.visualstudio.com/]Visual
   Studio Code there's also a mass of extensions that can be used as a
   proxy to use terminal commands without needing to use the terminal
   directly. However, you won't find a code editor extension for
   everything you want to do — you'll have to get some experience with the
   terminal eventually.

[https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understandi
ng_client-side_tools/Command_line#basic_built-in_terminal_commands]Basic
built-in terminal commands

   Enough talk — let's start looking at some terminal commands! Out of the
   box, here are just a few of the things the command line can do, along
   with the names of relevant tools in each case:
     * Navigate your computer's file system along with base-level tasks
       such as create, copy, rename, and delete:
          + Move around your directory structure: cd
          + Create directories: mkdir
          + Create files (and modify their metadata): touch
          + Copy files or directories: cp
          + Move files or directories: mv
          + Delete files or directories: rm
     * Download files found at specific URLs: curl
     * Search for fragments of text inside larger bodies of text: grep
     * View a file's contents page by page: less, cat
     * Manipulate and transform streams of text (for example changing all
       the instances of <div>s in an HTML file to <article>): awk, tr, sed

   Note: There are a number of good tutorials on the web that go much
   deeper into the command line on the web — this is only a brief
   introduction!

   Let's move forward and look at using a few of these tools on the
   command line. Before you go any further, open your terminal program!

[https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understandi
ng_client-side_tools/Command_line#navigation_on_the_command_line]Navigation
on the command line

   When you visit the command line you will inevitably need to navigate to
   a particular directory to "do something". All the operating systems
   (assuming a default setup) will launch their terminal program in your
   "home" directory, and from there you're likely to want to move to a
   different place.

   The cd command lets you Change Directory. Technically, cd isn't a
   program but a built-in. This means your operating system provides it
   out of the box, and also that you can't accidentally delete it — thank
   goodness! You don't need to worry too much about whether a command is
   built-in or not, but bear in mind that built-ins appear on all
   unix-based systems.

   To change the directory, you type cd into your terminal, followed by
   the directory you want to move to. Assuming the directory is inside
   your home directory, you can use cd Desktop (see the screenshots
   below).

   results of the cd Desktop command being run in a variety of windows
   terminals - the terminal location moves into the desktop

   Try typing this into your system's terminal:

   bash
cd Desktop

   If you want to move back up to the previous directory, you can use two
   dots:

   bash
cd ..

   Note: A very useful terminal shortcut is using the tab key to
   autocomplete names that you know are present, rather than having to
   type out the whole thing. For example, after typing the above two
   commands, try typing cd D and pressing tab — it should autocomplete the
   directory name Desktop for you, provided it is present in the current
   directory. Bear this in mind as you move forward.

   If the directory you want to go to is nested deep, you need to know the
   path to get to it. This usually becomes easier as you get more familiar
   with the structure of your file system, but if you are not sure of the
   path you can usually figure it out with a combination of the ls command
   (see below), and by clicking around in your Explorer/Finder window to
   see where a directory is, relative to where you currently are.

   For example, if you wanted to go to a directory called src, located
   inside a directory called project, located on the Desktop, you could
   type these three commands to get there from your home folder:

   bash
cd Desktop
cd project
cd src

   But this a waste of time — instead, you can type one command, with the
   different items in the path separated by forward slashes, just like you
   do when specifying paths to images or other assets in CSS, HTML, or
   JavaScript code:

   bash
cd Desktop/project/src

   Note that including a leading slash on your path makes the path
   absolute, for example /Users/your-user-name/Desktop. Omitting the
   leading slash as we've done above makes the path relative to your
   present working directory. This is exactly the same as you would see
   with URLs in your web browser. A leading slash means "at the root of
   the website", whereas omitting the slash means "the URL is relative to
   my current page".

   Note: On windows, you use backslashes instead of forward slashes, e.g.
   cd Desktop\project\src — this may seem really odd, but if you are
   interested in why, [https://www.youtube.com/watch?v=5T3IJfBfBmI]watch
   this YouTube clip featuring an explanation by one of Microsoft's
   Principal engineers.

[https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understandi
ng_client-side_tools/Command_line#listing_directory_contents]Listing
directory contents

   Another built-in Unix command is ls (short for list), which lists the
   contents of the directory you're currently in. Note that this won't
   work if you're using the default Windows command prompt (cmd) — the
   equivalent there is dir.

   Try running this now in your terminal:

   bash
ls

   This gives you a list of the files and directories in your present
   working directory, but the information is really basic — you only get
   the name of each item present, not whether it is a file or a directory,
   or anything else. Fortunately, a small change to the command usage can
   give you a lot more information.

[https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understandi
ng_client-side_tools/Command_line#introducing_command_options]Introducing
command options

   Most terminal commands have options — these are modifiers that you add
   onto the end of a command, which make it behave in a slightly different
   way. These usually consist of a space after the command name, followed
   by a dash, followed by one or more letters.

   For example, give this a go and see what you get:

   bash
ls -l

   In the case of ls, the -l (dash ell) option gives you a listing with
   one file or directory on each line, and a lot more information shown.
   Directories can be identified by looking for a letter "d" on the very
   left-hand side of the lines. Those are the ones we can cd into.

   Below is a screenshot with a "vanilla" macOS terminal at the top, and a
   customized terminal with some extra icons and colors to keep it looking
   lively — both showing the results of running ls -l:

   A vanilla macOS terminal and a more colorful custom macOS terminal,
   showing a file listing - the result of running the ls -l command

   Note: To find out exactly what options each command has available, you
   can look at its [https://en.wikipedia.org/wiki/Man_page]man page. This
   is done by typing the man command, followed by the name of the command
   you want to look up, for example man ls. This will open up the man page
   in the terminal's default text file viewer (for example,
   [https://en.wikipedia.org/wiki/Less_(Unix)]less in my terminal), and
   you should then be able to scroll through the page using the arrow
   keys, or some similar mechanism. The man page lists all the options in
   great detail, which may be a bit intimidating to begin with, but at
   least you know it's there if you need it. Once you are finished looking
   through the man page, you need to quit out of it using your text
   viewer's quit command ("q" in less; you may have to search on the web
   to find it if it isn't obvious).

   Note: To run a command with multiple options at the same time, you can
   usually put them all in a single string after the dash character, for
   example ls -lah, or ls -ltrh. Try looking at the ls man page to work
   out what these extra options do!

   Now that we've discussed two fundamental commands, have a little poke
   around your directory and see if you can navigate from one place to the
   next.

[https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understandi
ng_client-side_tools/Command_line#creating_copying_moving_removing]Creating,
copying, moving, removing

   There are a number of other basic utility commands that you'll probably
   end up using quite a lot as you work with the terminal. They are pretty
   simple, so we won't explain them all in quite as much detail as the
   previous couple.

   Have a play with them in a test directory you've created somewhere so
   that you don't accidentally delete anything important, using the
   example commands below for guidance:
     * mkdir — this creates a new directory inside the current directory
       you are in, with the name you provide after the command name. For
       example, mkdir my-awesome-website will make a new directory called
       my-awesome-website.
     * rmdir — removes the named directory, but only if it's empty. For
       example, rmdir my-awesome-website will remove the directory we
       created above. If you want to remove a directory that is not empty
       (and also remove everything it contains), then you can use the -r
       option (recursive), but this is dangerous. Make sure there is
       nothing you might need inside the directory later on, as it will be
       gone forever.
     * touch — creates a new empty file, inside the current directory. For
       example, touch mdn-example.md creates a new empty file called
       mdn-example.md.
     * mv — moves a file from the first specified file location to the
       second specified file location, for example mv mdn-example.md
       mdn-example.txt (the locations are written as file paths). This
       command moves a file called mdn-example.md in the current directory
       to a file called mdn-example.txt in the current directory.
       Technically the file is being moved, but from a practical
       perspective, this command is actually renaming the file.
     * cp — similar in usage to mv, cp creates a copy of the file in the
       first location specified, in the second location specified. For
       example, cp mdn-example.txt mdn-example.txt.bak creates a copy of
       mdn-example.txt called mdn-example.txt.bak (you can of course call
       it something else if you wish).
     * rm — removes the specified file. For example, rm mdn-example.txt
       deletes a single file called mdn-example.txt. Note that this delete
       is permanent and can't be undone via the recycle bin that you might
       have on your desktop user interface.

   Note: Many terminal commands allow you to use asterisks as "wild card"
   characters, meaning "any sequence of characters". This allows you to
   run an operation against a potentially large number of files at once,
   all of which match the specified pattern. As an example, rm mdn-* would
   delete all files beginning with mdn-. rm mdn-*.bak would delete all
   files that start with mdn- and end with .bak.

[https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understandi
ng_client-side_tools/Command_line#terminal_%E2%80%94_considered_harmful]Termi
nal — considered harmful?

   We've alluded to this before, but to be clear — you need to be careful
   with the terminal. Simple commands do not carry too much danger, but as
   you start putting together more complex commands, you need to think
   carefully about what the command will do, and try testing them out
   first before you finally run them in the intended directory.

   Let's say you had 1000 text files in a directory, and you wanted to go
   through them all and only delete the ones that have a certain substring
   inside the filename. If you are not careful, then you might end up
   deleting something important, losing you a load of your work in the
   process. One good habit to get into is to write your terminal command
   out inside a text editor, figure out how you think it should look, and
   then make a backup copy of your directory and try running the command
   on that first, to test it.

   Another good tip — if you're not comfortable trying terminal commands
   out on your own machine, a nice safe place to try them is over at
   [https://glitch.com/]Glitch.com. Along with being a great place to try
   out web development code, the projects also give you access to a
   terminal, so you can run all these commands directly in that terminal,
   safe in the knowledge that you won't break your own machine.

   a double screenshot showing the glitch.com home page, and the glitch
   terminal emulator

   A great resource for getting a quick overview of specific terminal
   commands is [https://tldr.sh/]tldr.sh. This is a community-driven
   documentation service, similar to MDN, but specific to terminal
   commands.

   In the next section let's step it up a notch (or several notches in
   fact) and see how we can connect tools together on the command line to
   really see how the terminal can be advantageous over the regular
   desktop user interface.

[https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understandi
ng_client-side_tools/Command_line#connecting_commands_together_with_pipes]Con
necting commands together with pipes

   The terminal really comes into its own when you start to chain commands
   together using the | (pipe) symbol. Let's look at a very quick example
   of what this means.

   We've already looked at ls, which outputs the contents of the current
   directory:

   bash
ls

   But what if we wanted to quickly count the number of files and
   directories inside the current directory? ls can't do that on its own.

   There is another Unix tool available called wc. This counts the number
   of words, lines, characters, or bytes of whatever is inputted into it.
   This can be a text file — the below example outputs the number of lines
   in myfile.txt:

   bash
wc -l myfile.txt

   But it can also count the number of lines of whatever output is piped
   into it. For example, the below command counts the number of lines
   outputted by the ls command (what it would normally print to the
   terminal if run on its own) and outputs that count to the terminal
   instead:

   bash
ls | wc -l

   Since ls prints each file or directory on its own line, that
   effectively gives us a directory and file count.

   So what is going on here? A general philosophy of (unix) command line
   tools is that they print text to the terminal (also referred to
   "printing to standard output" or STDOUT). A good deal of commands can
   also read content from streamed input (known as "standard input" or
   STDIN).

   The pipe operator can connect these inputs and outputs together,
   allowing us to build up increasingly more complex operations to suit
   our needs — the output from one command can become the input to the
   next command. In this case, ls would normally print its output to
   STDOUT, but instead ls's output is being piped into wc, which takes
   that output as an input, counting the number of lines it contains, and
   prints that count to STDOUT instead.

[https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understandi
ng_client-side_tools/Command_line#a_slightly_more_complex_example]A slightly
more complex example

   Let's go through something a bit more complicated.

   We will first try to fetch the contents of MDN's "fetch" page using the
   curl command (which can be used to request content from URLs), from
   https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalSc
   ope/fetch. Try it now:

   bash
curl https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/
fetch

   You won't get an output because the page has been redirected (to
   [https://developer.mozilla.org/en-US/docs/Web/API/fetch]/Web/API/fetch)
   . We need to explicitly tell curl to follow redirects using the -L
   flag.

   Let's also look at the headers that developer.mozilla.org returns using
   curl's -I flag, and print all the location redirects it sends to the
   terminal, by piping the output of curl into grep (we will ask grep to
   return all the lines that contain the word "location").

   Try running the following (you'll see that there is just one redirect
   before we reach the final page):

   bash
curl https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/
fetch -L -I | grep location

   Your output should look something like this (curl will first output
   some download counters and suchlike):

   bash
location: /en-US/docs/Web/API/fetch

   Although contrived, we could take this result a little further and
   transform the location: line contents, adding the base origin to the
   start of each one so that we get complete URLs printed out. For that,
   we'll add awk to the mix (which is a programming language akin to
   JavaScript or Ruby or Python, just a lot older!).

   Try running this:

   bash
curl https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/
fetch -L -I | grep location | awk '{ print "https://developer.mozilla.org" $2 }'

   Your final output should look something like this:

   bash
https://developer.mozilla.org/en-US/docs/Web/API/fetch

   By combining these commands we've customized the output to show the
   full URLs that the Mozilla server is redirecting through when we
   request the /docs/Web/API/WindowOrWorkerGlobalScope/fetch URL. Getting
   to know your system will prove useful in years to come — learn how
   these single serving tools work and how they can become part of your
   toolkit to solve niche problems.

[https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understandi
ng_client-side_tools/Command_line#adding_powerups]Adding powerups

   Now we've had a look at some of the built-in commands your system comes
   equipped with, let's look at how we can install a third-party CLI tool
   and make use of it.

   The vast ecosystem of installable tools for front-end web development
   currently exists mostly inside [https://www.npmjs.com/]npm, a privately
   owned, package hosting service that works closely together with
   Node.js. This is slowly expanding — you can expect to see more package
   providers as time goes on.

   [https://nodejs.org/en/]Installing Node.js also installs the npm
   command line tool (and a supplementary npm-centric tool called npx),
   which offers a gateway to installing additional command line tools.
   Node.js and npm work the same across all systems: macOS, Windows, and
   Linux.

   Install npm on your system now, by going to the URL above and
   downloading and running a Node.js installer appropriate to your
   operating system. If prompted, make sure to include npm as part of the
   installation.

   the Node.js installer on windows, showing the option to include npm

   Although we'll look at a number of different tools in the next article
   onwards, we'll cut our teeth on [https://prettier.io/]Prettier.
   Prettier is an opinionated code formatter that only has a "few
   options". Fewer options tends to mean simpler. Given how tooling can
   sometimes get out of hand in terms of complexity, "few options" can be
   very appealing.

[https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understandi
ng_client-side_tools/Command_line#where_to_install_our_cli_tools]Where to
install our CLI tools?

   Before we dive into installing Prettier, there's a question to answer —
   "where should we install it?"

   With npm we have the choice of installing tools globally — so we can
   access them anywhere — or locally to the current project directory.

   There are pros and cons each way — and the following lists of pros and
   cons for installing globally are far from exhaustive.

   Pros of installing globally:
     * Accessible anywhere in your terminal
     * Only install once
     * Uses less disk space
     * Always the same version
     * Feels like any other unix command

   Cons of installing globally:
     * May not be compatible with your project's codebase
     * Other developers in your team won't have access to these tools, for
       example if you are sharing the codebase over a tool like git.
     * Related to the previous point, it makes project code harder to
       replicate (if you install your tools locally, they can be set up as
       dependencies and installed with npm install).

   Although the cons list is shorter, the negative impact of global
   installing is potentially much larger than the benefits. Here we'll
   install locally, but feel free to install globally once you understand
   the relative risks.

[https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understandi
ng_client-side_tools/Command_line#installing_prettier]Installing Prettier

   Prettier is an opinionated code formatting tool for front-end
   developers, focusing on JavaScript-based languages and adding support
   for HTML, CSS, SCSS, JSON, and more.

   Prettier can:
     * Save the cognitive overhead of getting the style consistent
       manually across all your code files; Prettier can do this for you
       automatically.
     * Help newcomers to web development format their code in
       best-practice fashion.
     * Be installed on any operating system and even as a direct part of
       project tooling, ensuring that colleagues and friends who work on
       your code use the code style you're using.
     * Be configured to run upon save, as you type, or even before
       publishing your code (with additional tooling that we'll see later
       on in the module).

   For this article, we will install Prettier locally, as suggested in the
   [https://prettier.io/docs/en/install.html]Prettier installation guide

   Once you've installed node, open up the terminal and run the following
   command to install Prettier:

   bash
npm install prettier

   You can now run the file locally using the
   [https://nodejs.dev/learn/the-npx-nodejs-package-runner/]npx tool.
   Running the command without any arguments, as with many other commands,
   will offer up usage and help information. Try this now:

   bash
npx prettier

   Your output should look something like this:

   bash
Usage: prettier [options] [file/glob ...]

By default, output is written to stdout.
Stdin is read if it is piped to Prettier and no files are given.

…

   It's always worth at the very least skimming over the usage
   information, even if it is long. It'll help you to understand better
   how the tool is intended to be used.

   Note: If you have not first installed Prettier locally, then running
   npx prettier will download and run the latest version of Prettier all
   in one go just for that command. While that might sound great, new
   versions of Prettier may slightly modify the output. You want to
   install it locally so that you are fixing the version of Prettier that
   you are using for formatting until you are ready to change it.

[https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understandi
ng_client-side_tools/Command_line#playing_with_prettier]Playing with Prettier

   Let's have a quick play with Prettier, so you can see how it works.

   First of all, create a new directory somewhere on your file system that
   is easy to find. Maybe a directory called prettier-test on your
   Desktop.

   Now save the following code in a new file called index.js, inside your
   test directory:

   js
const myObj = {
a:1,b:{c:2}}
function printMe(obj){console.log(obj.b.c)}
printMe(myObj)

   We can run Prettier against a codebase to just check if our code wants
   adjusting. cd into your directory, and try running this command:

   bash
npx prettier --check index.js

   You should get an output along the lines of:

   bash
Checking formatting...
index.js
Code style issues found in the above file(s). Forgot to run Prettier?

   So, there's some code styles that can be fixed. No problem. Adding the
   --write option to the prettier command will fix those up, leaving us to
   focus on actually writing useful code.

   Now try running this version of the command:

   bash
npx prettier --write index.js

   You'll get an output like this

   bash
Checking formatting...
index.js
Code style issues fixed in the above file(s).

   But more importantly, if you look back at your JavaScript file you'll
   find it has been reformatted to something like this:

   js
const myObj = {
  a: 1,
  b: { c: 2 },
};
function printMe(obj) {
  console.log(obj.b.c);
}
printMe(myObj);

   Depending on your workflow (or the workflow that you pick) you can make
   this an automated part of your process. Automation is really where
   tools excel; our personal preference is the kind of automation that
   "just happens" without having to configure anything.

   With Prettier there's a number of ways automation can be achieved and
   though they're beyond the scope of this article, there's some excellent
   resources online to help (some of which have been linked to). You can
   invoke Prettier:
     * Before you commit your code into a git repository using
       [https://github.com/typicode/husky]Husky.
     * Whenever you hit "save" in your code editor, be it
       [https://marketplace.visualstudio.com/items?itemName=esbenp.prettie
       r-vscode]VS Code, or
       [https://packagecontrol.io/packages/JsPrettier]Sublime Text.
     * As part of continuous integration checks using tools like
       [https://github.com/features/actions]GitHub Actions.

   Our personal preference is the second one — while using say VS Code,
   Prettier kicks in and cleans up any formatting it needs to do every
   time we hit save. You can find a lot more information about using
   Prettier in different ways in the
   [https://prettier.io/docs/en/]Prettier docs.

[https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understandi
ng_client-side_tools/Command_line#other_tools_to_play_with]Other tools to
play with

   If you want to play with a few more tools, here's a brief list that are
   fun to try out:
     * [https://github.com/sharkdp/bat]bat — A "nicer" cat (cat is used to
       print the contents of files).
     * [https://denilson.sa.nom.br/prettyping/]prettyping — ping on the
       command line, but visualized (ping is a useful tool to check if a
       server is responding).
     * [https://htop.dev/]htop — A process viewer, useful for when
       something is making your CPU fan behave like a jet engine and you
       want to identify the offending program.
     * [https://tldr.sh/#installation]tldr — mentioned earlier in this
       chapter, but available as a command line tool.

   Note that some of the above suggestions may need installing using npm,
   like we did with Prettier.

[https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Understandi
ng_client-side_tools/Command_line#summary]Summary

   That brings us to the end of our brief tour of the terminal/command
   line. Next up we'll be looking in more detail at package managers, and
   what we can do with them.
     * [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/U
       nderstanding_client-side_tools/Overview]Previous
     * [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/U
       nderstanding_client-side_tools]Overview: Understanding client-side
       tools
     * [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/U
       nderstanding_client-side_tools/Package_management]Next

Found a content problem with this page?

     * [https://github.com/mdn/content/edit/main/files/en-us/learn/tools_a
       nd_testing/understanding_client-side_tools/command_line/index.md]Ed
       it the page on GitHub.
     * [https://github.com/mdn/content/issues/new?template=page-report.yml
       &mdn-url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FLearn
       %2FTools_and_testing%2FUnderstanding_client-side_tools%2FCommand_li
       ne&metadata=%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3
       Cdetails%3E%0A%3Csummary%3EPage+report+details%3C%2Fsummary%3E%0A%0
       A*+Folder%3A+%60en-us%2Flearn%2Ftools_and_testing%2Funderstanding_c
       lient-side_tools%2Fcommand_line%60%0A*+MDN+URL%3A+https%3A%2F%2Fdev
       eloper.mozilla.org%2Fen-US%2Fdocs%2FLearn%2FTools_and_testing%2FUnd
       erstanding_client-side_tools%2FCommand_line%0A*+GitHub+URL%3A+https
       %3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2
       Flearn%2Ftools_and_testing%2Funderstanding_client-side_tools%2Fcomm
       and_line%2Findex.md%0A*+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fm
       dn%2Fcontent%2Fcommit%2Fbb026bcb88b7f45374d602301b7b0db5a49ff303%0A
       *+Document+last+modified%3A+2023-07-03T10%3A12%3A35.000Z%0A%0A%3C%2
       Fdetails%3E]Report the content issue.
     * [https://github.com/mdn/content/blob/main/files/en-us/learn/tools_a
       nd_testing/understanding_client-side_tools/command_line/index.md?pl
       ain=1]View the source on GitHub.

   Want to get more involved?
   [https://github.com/mdn/content/blob/main/CONTRIBUTING.md]Learn how to
   contribute.

   This page was last modified on Jul 3, 2023 by
   [https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Under
   standing_client-side_tools/Command_line/contributors.txt]MDN
   contributors.

   [https://developer.mozilla.org/]

   Your blueprint for a better internet.
     * [https://twitter.com/mozdevnet]MDN on Twitter
     * [https://github.com/mdn/]MDN on GitHub
     * [https://developer.mozilla.org/en-US/blog/rss.xml]MDN Blog RSS Feed

MDN

     * [https://developer.mozilla.org/en-US/about]About
     * [https://developer.mozilla.org/en-US/blog/]Blog
     * [https://www.mozilla.org/en-US/careers/listings/?team=Marketing]Car
       eers
     * [https://developer.mozilla.org/en-US/advertising]Advertise with us

Support

     * [https://support.mozilla.org/products/mdn-plus]Product help
     * [https://developer.mozilla.org/en-US/docs/MDN/Community/Issues]Repo
       rt an issue

Our communities

     * [https://developer.mozilla.org/en-US/community]MDN Community
     * [https://discourse.mozilla.org/c/mdn/236]MDN Forum
     * [https://wiki.mozilla.org/Matrix]MDN Chat

Developers

     * [https://developer.mozilla.org/en-US/docs/Web]Web Technologies
     * [https://developer.mozilla.org/en-US/docs/Learn]Learn Web
       Development
     * [https://developer.mozilla.org/en-US/plus]MDN Plus
     * [https://hacks.mozilla.org/]Hacks Blog

   [https://www.mozilla.org/]
     * [https://www.mozilla.org/privacy/websites/]Website Privacy Notice
     * [https://www.mozilla.org/privacy/websites/#cookies]Cookies
     * [https://www.mozilla.org/about/legal/terms/mozilla]Legal
     * [https://www.mozilla.org/about/governance/policies/participation/]C
       ommunity Participation Guidelines

   Visit [https://www.mozilla.org/]Mozilla Corporation’s not-for-profit
   parent, the [https://foundation.mozilla.org/]Mozilla Foundation.
   Portions of this content are ©1998–2023 by individual mozilla.org
   contributors. Content available under
   [https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Attrib
   _copyright_license]a Creative Commons license.
