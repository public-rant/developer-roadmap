   IFRAME:
   [https://www.googletagmanager.com/ns.html?id=GTM-W8MVQXG]https://www.go
   ogletagmanager.com/ns.html?id=GTM-W8MVQXG

   [https://go.dev/]Go
     * [https://go.dev/doc/]Why Go arrow_drop_down
          + [https://go.dev/solutions/case-studies]Case Studies
            Common problems companies solve with Go
          + [https://go.dev/solutions/use-cases]Use Cases
            Stories about how and why companies use Go
          + [https://go.dev/security/]Security
            How Go can help keep you secure by default
     * [https://go.dev/learn/]Learn
     * [https://go.dev/doc/]Docs arrow_drop_down
          + [https://go.dev/doc/effective_go]Effective Go
            Tips for writing clear, performant, and idiomatic Go code
          + [https://go.dev/doc]Go User Manual
            A complete introduction to building software with Go
          + [https://pkg.go.dev/std]Standard library
            Reference documentation for Go's standard library
          + [https://go.dev/doc/devel/release]Release Notes
            Learn what's new in each Go release
     * [https://pkg.go.dev/]Packages
     * [https://go.dev/doc/]Community arrow_drop_down
          + [https://go.dev/talks/]Recorded Talks
            Videos from prior events
          + [https://www.meetup.com/pro/go]Meetups open_in_new
            Meet other local Go developers
          + [https://github.com/golang/go/wiki/Conferences]Conferences
            open_in_new
            Learn and network with Go developers from around the world
          + [https://go.dev/blog]Go blog
            The Go project's official blog.
          + [https://go.dev/help]Go project
            Get help and stay informed from Go
          + Get connected
            [https://groups.google.com/g/golang-nuts][google-groups.svg]
            [https://github.com/golang][github.svg]
            [https://twitter.com/golang][twitter.svg]
            [https://www.reddit.com/r/golang/][reddit.svg]
            [https://invite.slack.golangbridge.org/][slack.svg]
            [https://stackoverflow.com/tags/go][stack-overflow.svg]

   (BUTTON)

   [https://go.dev/]Go.

     * [https://go.dev/doc/]Why Go navigate_next
       [https://go.dev/doc/]navigate_beforeWhy Go
          + [https://go.dev/solutions/case-studies]Case Studies
          + [https://go.dev/solutions/use-cases]Use Cases
          + [https://go.dev/security/]Security
     * [https://go.dev/learn/]Learn
     * [https://go.dev/doc/]Docs navigate_next
       [https://go.dev/doc/]navigate_beforeDocs
          + [https://go.dev/doc/effective_go]Effective Go
          + [https://go.dev/doc]Go User Manual
          + [https://pkg.go.dev/std]Standard library
          + [https://go.dev/doc/devel/release]Release Notes
     * [https://pkg.go.dev/]Packages
     * [https://go.dev/doc/]Community navigate_next
       [https://go.dev/doc/]navigate_beforeCommunity
          + [https://go.dev/talks/]Recorded Talks
          + [https://www.meetup.com/pro/go]Meetups open_in_new
          + [https://github.com/golang/go/wiki/Conferences]Conferences
            open_in_new
          + [https://go.dev/blog]Go blog
          + [https://go.dev/help]Go project
          + Get connected
            [https://groups.google.com/g/golang-nuts][google-groups.svg]
            [https://github.com/golang][github.svg]
            [https://twitter.com/golang][twitter.svg]
            [https://www.reddit.com/r/golang/][reddit.svg]
            [https://invite.slack.golangbridge.org/][slack.svg]
            [https://stackoverflow.com/tags/go][stack-overflow.svg]

                                 Documentation

   The Go programming language is an open source project to make
   programmers more productive.

   Go is expressive, concise, clean, and efficient. Its concurrency
   mechanisms make it easy to write programs that get the most out of
   multicore and networked machines, while its novel type system enables
   flexible and modular program construction. Go compiles quickly to
   machine code yet has the convenience of garbage collection and the
   power of run-time reflection. It's a fast, statically typed, compiled
   language that feels like a dynamically typed, interpreted language.

Getting Started

[https://go.dev/doc/install]Installing Go

   Instructions for downloading and installing Go.

[https://go.dev/doc/tutorial/getting-started.html]Tutorial: Getting started

   A brief Hello, World tutorial to get started. Learn a bit about Go
   code, tools, packages, and modules.

[https://go.dev/doc/tutorial/create-module.html]Tutorial: Create a module

   A tutorial of short topics introducing functions, error handling,
   arrays, maps, unit testing, and compiling.

[https://go.dev/doc/tutorial/workspaces.html]Tutorial: Getting started with
multi-module workspaces

   Introduces the basics of creating and using multi-module workspaces in
   Go. Multi-module workspaces are useful for making changes across
   multiple modules.

[https://go.dev/doc/tutorial/web-service-gin.html]Tutorial: Developing a
RESTful API with Go and Gin

   Introduces the basics of writing a RESTful web service API with Go and
   the Gin Web Framework.

[https://go.dev/doc/tutorial/generics.html]Tutorial: Getting started with
generics

   With generics, you can declare and use functions or types that are
   written to work with any of a set of types provided by calling code.

[https://go.dev/doc/tutorial/fuzz.html]Tutorial: Getting started with fuzzing

   Fuzzing can generate inputs to your tests that can catch edge cases and
   security issues that you may have missed.

[https://go.dev/doc/articles/wiki/]Writing Web Applications

   Building a simple web application.

[https://go.dev/doc/code.html]How to write Go code

   This doc explains how to develop a simple set of Go packages inside a
   module, and it shows how to use the [https://go.dev/cmd/go/]go command
   to build and test packages.

[https://go.dev/tour/]A Tour of Go

   An interactive introduction to Go in four sections. The first section
   covers basic syntax and data structures; the second discusses methods
   and interfaces; the third is about Generics; and the fourth introduces
   Go's concurrency primitives. Each section concludes with a few
   exercises so you can practice what you've learned. You can
   [https://go.dev/tour/]take the tour online or install it locally with:
        $ go install golang.org/x/website/tour@latest
        (BUTTON)
           [copy-paste.svg]
           [copy-paste-dark.svg]


   This will place the tour binary in your
   [https://go.dev/cmd/go/#hdr-GOPATH_and_Modules]GOPATH's bin directory.

Using and understanding Go

[https://go.dev/doc/effective_go.html]Effective Go

   A document that gives tips for writing clear, idiomatic Go code. A must
   read for any new Go programmer. It augments the tour and the language
   specification, both of which should be read first.

[https://go.dev/doc/faq]Frequently Asked Questions (FAQ)

   Answers to common questions about Go.

[https://go.dev/doc/editors.html]Editor plugins and IDEs

   A document that summarizes commonly used editor plugins and IDEs with
   Go support.

[https://go.dev/doc/diagnostics.html]Diagnostics

   Summarizes tools and methodologies to diagnose problems in Go programs.

[https://go.dev/doc/gc-guide]A Guide to the Go Garbage Collector

   A document that describes how Go manages memory, and how to make the
   most of it.

[https://go.dev/doc/modules/managing-dependencies]Managing dependencies

   When your code uses external packages, those packages (distributed as
   modules) become dependencies.

[https://go.dev/security/fuzz]Fuzzing

   Main documentation page for Go fuzzing.

[https://go.dev/testing/coverage]Coverage for Go applications

   Main documentation page for coverage testing of Go applications.

[https://go.dev/doc/pgo]Profile-guided optimization

   Main documentation page for profile-guided optimization (PGO) of Go
   applications.

References

[https://go.dev/pkg/]Package Documentation

   The documentation for the Go standard library.

[https://go.dev/doc/cmd]Command Documentation

   The documentation for the Go tools.

[https://go.dev/ref/spec]Language Specification

   The official Go Language specification.

[https://go.dev/ref/mod]Go Modules Reference

   A detailed reference manual for Go's dependency management system.

[https://go.dev/doc/modules/gomod-ref]go.mod file reference

   Reference for the directives included in a go.mod file.

[https://go.dev/ref/mem]The Go Memory Model

   A document that specifies the conditions under which reads of a
   variable in one goroutine can be guaranteed to observe values produced
   by writes to the same variable in a different goroutine.

[https://go.dev/doc/contribute]Contribution Guide

   Contributing to Go.

[https://go.dev/doc/devel/release.html]Release History

   A summary of the changes between Go releases.

Accessing databases

[https://go.dev/doc/tutorial/database-access]Tutorial: Accessing a relational
database

   Introduces the basics of accessing a relational database using Go and
   the database/sql package in the standard library.

[https://go.dev/doc/database/index]Accessing relational databases

   An overview of Go's data access features.

[https://go.dev/doc/database/open-handle]Opening a database handle

   You use the Go database handle to execute database operations. Once you
   open a handle with database connection properties, the handle
   represents a connection pool it manages on your behalf.

[https://go.dev/doc/database/change-data]Executing SQL statements that don't
return data

   For SQL operations that might change the database, including SQL
   INSERT, UPDATE, and DELETE, you use Exec methods.

[https://go.dev/doc/database/querying]Querying for data

   For SELECT statements that return data from a query, using the Query or
   QueryRow method.

[https://go.dev/doc/database/prepared-statements]Using prepared statements

   Defining a prepared statement for repeated use can help your code run a
   bit faster by avoiding the overhead of re-creating the statement each
   time your code performs the database operation.

[https://go.dev/doc/database/execute-transactions]Executing transactions

   sql.Tx exports methods representing transaction-specific semantics,
   including Commit and Rollback, as well as methods you use to perform
   common database operations.

[https://go.dev/doc/database/cancel-operations]Canceling in-progress database
operations

   Using [https://pkg.go.dev/context#Context]context.Context, you can have
   your application's function calls and services stop working early and
   return an error when their processing is no longer needed.

[https://go.dev/doc/database/manage-connections]Managing connections

   For some advanced programs, you might need to tune connection pool
   parameters or work with connections explicitly.

[https://go.dev/doc/database/sql-injection]Avoiding SQL injection risk

   You can avoid an SQL injection risk by providing SQL parameter values
   as sql package function arguments

Developing modules

[https://go.dev/doc/modules/developing]Developing and publishing modules

   You can collect related packages into modules, then publish the modules
   for other developers to use. This topic gives an overview of developing
   and publishing modules.

[https://go.dev/doc/modules/release-workflow]Module release and versioning
workflow

   When you develop modules for use by other developers, you can follow a
   workflow that helps ensure a reliable, consistent experience for
   developers using the module. This topic describes the high-level steps
   in that workflow.

[https://go.dev/doc/modules/managing-source]Managing module source

   When you're developing modules to publish for others to use, you can
   help ensure that your modules are easier for other developers to use by
   following the repository conventions described in this topic.

[https://go.dev/doc/modules/major-version]Developing a major version update

   A major version update can be very disruptive to your module's users
   because it includes breaking changes and represents a new module. Learn
   more in this topic.

[https://go.dev/doc/modules/publishing]Publishing a module

   When you want to make a module available for other developers, you
   publish it so that it's visible to Go tools. Once you've published the
   module, developers importing its packages will be able to resolve a
   dependency on the module by running commands such as go get.

[https://go.dev/doc/modules/version-numbers]Module version numbering

   A module's developer uses each part of a module's version number to
   signal the version’s stability and backward compatibility. For each new
   release, a module's release version number specifically reflects the
   nature of the module's changes since the preceding release.

Talks

[https://research.swtch.com/gotour]A Video Tour of Go

   Three things that make Go fast, fun, and productive: interfaces,
   reflection, and concurrency. Builds a toy web crawler to demonstrate
   these.

[https://vimeo.com/53221560]Code that grows with grace

   One of Go's key design goals is code adaptability; that it should be
   easy to take a simple design and build upon it in a clean and natural
   way. In this talk Andrew Gerrand describes a simple "chat roulette"
   server that matches pairs of incoming TCP connections, and then use
   Go's concurrency mechanisms, interfaces, and standard library to extend
   it with a web interface and other features. While the function of the
   program changes dramatically, Go's flexibility preserves the original
   design as it grows.

[https://www.youtube.com/watch?v=f6kdp27TYZs]Go Concurrency Patterns

   Concurrency is the key to designing high performance network services.
   Go's concurrency primitives (goroutines and channels) provide a simple
   and efficient means of expressing concurrent execution. In this talk we
   see how tricky concurrency problems can be solved gracefully with
   simple Go code.

[https://www.youtube.com/watch?v=QDDwwePbDtw]Advanced Go Concurrency Patterns

   This talk expands on the Go Concurrency Patterns talk to dive deeper
   into Go's concurrency primitives.

More

   See the [https://go.dev/talks]Go Talks site and
   [https://go.dev/wiki/GoTalks]wiki page for more Go talks.

Codewalks

   Guided tours of Go programs.
     * [https://go.dev/doc/codewalk/functions]First-Class Functions in Go
     * [https://go.dev/doc/codewalk/markov]Generating arbitrary text: a
       Markov chain algorithm
     * [https://go.dev/doc/codewalk/sharemem]Share Memory by Communicating

Language

     * [https://go.dev/blog/json-rpc-tale-of-interfaces]JSON-RPC: a tale
       of interfaces
     * [https://go.dev/blog/gos-declaration-syntax]Go's Declaration Syntax
     * [https://go.dev/blog/defer-panic-and-recover]Defer, Panic, and
       Recover
     * [https://go.dev/blog/go-concurrency-patterns-timing-out-and]Go
       Concurrency Patterns: Timing out, moving on
     * [https://go.dev/blog/go-slices-usage-and-internals]Go Slices: usage
       and internals
     * [https://go.dev/blog/gif-decoder-exercise-in-go-interfaces]A GIF
       decoder: an exercise in Go interfaces
     * [https://go.dev/blog/error-handling-and-go]Error Handling and Go
     * [https://go.dev/blog/organizing-go-code]Organizing Go code

Packages

     * [https://go.dev/blog/json-and-go]JSON and Go - using the
       [https://go.dev/pkg/encoding/json/]json package.
     * [https://go.dev/blog/gobs-of-data]Gobs of data - the design and use
       of the [https://go.dev/pkg/encoding/gob/]gob package.
     * [https://go.dev/blog/laws-of-reflection]The Laws of Reflection -
       the fundamentals of the [https://go.dev/pkg/reflect/]reflect
       package.
     * [https://go.dev/blog/go-image-package]The Go image package - the
       fundamentals of the [https://go.dev/pkg/image/]image package.
     * [https://go.dev/blog/go-imagedraw-package]The Go image/draw package
       - the fundamentals of the
       [https://go.dev/pkg/image/draw/]image/draw package.

Modules

     * [https://go.dev/blog/using-go-modules]Using Go Modules - an
       introduction to using modules in a simple project.
     * [https://go.dev/blog/migrating-to-go-modules]Migrating to Go
       Modules - converting an existing project to use modules.
     * [https://go.dev/blog/publishing-go-modules]Publishing Go Modules -
       how to make new versions of modules available to others.
     * [https://go.dev/blog/v2-go-modules]Go Modules: v2 and Beyond -
       creating and publishing major versions 2 and higher.
     * [https://go.dev/blog/module-compatibility]Keeping Your Modules
       Compatible - how to keep your modules compatible with prior
       minor/patch versions.

Tools

     * [https://go.dev/doc/articles/go_command.html]About the Go command -
       why we wrote it, what it is, what it's not, and how to use it.
     * [https://go.dev/doc/comment]Go Doc Comments - writing good program
       documentation
     * [https://go.dev/doc/gdb]Debugging Go Code with GDB
     * [https://go.dev/doc/articles/race_detector.html]Data Race Detector
       - a manual for the data race detector.
     * [https://go.dev/doc/asm]A Quick Guide to Go's Assembler - an
       introduction to the assembler used by Go.
     * [https://go.dev/blog/c-go-cgo]C? Go? Cgo! - linking against C code
       with [https://go.dev/cmd/cgo/]cgo.
     * [https://go.dev/blog/profiling-go-programs]Profiling Go Programs
     * [https://go.dev/blog/race-detector]Introducing the Go Race Detector
       - an introduction to the race detector.

Wiki

   The [https://go.dev/wiki]Go Wiki, maintained by the Go community,
   includes articles about the Go language, tools, and other resources.

   See the [https://go.dev/wiki/Learn]Learn page at the
   [https://go.dev/wiki]Wiki for more Go learning resources.

Non-English Documentation

   See the [https://go.dev/wiki/NonEnglish]NonEnglish page at the
   [https://go.dev/wiki]Wiki for localized documentation.

   [https://go.dev/solutions/]Why Go
   [https://go.dev/solutions/use-cases]Use Cases
   [https://go.dev/solutions/case-studies]Case Studies
   [https://go.dev/learn/]Get Started [https://go.dev/play]Playground
   [https://go.dev/tour/]Tour
   [https://stackoverflow.com/questions/tagged/go?tab=Newest]Stack
   Overflow [https://go.dev/help/]Help
   [https://pkg.go.dev/]Packages [https://go.dev/pkg/]Standard Library
   [https://pkg.go.dev/about]About Go Packages
   [https://go.dev/project]About [https://go.dev/dl/]Download
   [https://go.dev/blog/]Blog [https://github.com/golang/go/issues]Issue
   Tracker [https://go.dev/doc/devel/release]Release Notes
   [https://go.dev/brand]Brand Guidelines [https://go.dev/conduct]Code of
   Conduct
   [https://www.twitter.com/golang]Connect
   [https://www.twitter.com/golang]Twitter
   [https://github.com/golang]GitHub
   [https://invite.slack.golangbridge.org/]Slack
   [https://reddit.com/r/golang]r/golang
   [https://www.meetup.com/pro/go]Meetup [https://golangweekly.com/]Golang
   Weekly

   The Go Gopher
     * [https://go.dev/copyright]Copyright
     * [https://go.dev/tos]Terms of Service
     * [http://www.google.com/intl/en/policies/privacy/]Privacy Policy
     * [https://go.dev/s/website-issue]Report an Issue
     * (BUTTON) System theme Dark theme Light theme

   [https://google.com/]Google logo

   go.dev uses cookies from Google to deliver and enhance the quality of
   its services and to analyze traffic.
   [https://policies.google.com/technologies/cookies]Learn more.

   (BUTTON) Okay
