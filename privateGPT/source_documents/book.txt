    1. [https://doc.rust-lang.org/book/title-page.html]The Rust
       Programming Language
    2. [https://doc.rust-lang.org/book/foreword.html]Foreword
    3. [https://doc.rust-lang.org/book/ch00-00-introduction.html]Introduct
       ion
    4. [https://doc.rust-lang.org/book/ch01-00-getting-started.html]1.
       Getting Started
    5.
         1. [https://doc.rust-lang.org/book/ch01-01-installation.html]1.1.
            Installation
         2. [https://doc.rust-lang.org/book/ch01-02-hello-world.html]1.2.
            Hello, World!
         3. [https://doc.rust-lang.org/book/ch01-03-hello-cargo.html]1.3.
            Hello, Cargo!
    6. [https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html
       ]2. Programming a Guessing Game
    7. [https://doc.rust-lang.org/book/ch03-00-common-programming-concepts
       .html]3. Common Programming Concepts
    8.
         1. [https://doc.rust-lang.org/book/ch03-01-variables-and-mutabili
            ty.html]3.1. Variables and Mutability
         2. [https://doc.rust-lang.org/book/ch03-02-data-types.html]3.2.
            Data Types
         3. [https://doc.rust-lang.org/book/ch03-03-how-functions-work.htm
            l]3.3. Functions
         4. [https://doc.rust-lang.org/book/ch03-04-comments.html]3.4.
            Comments
         5. [https://doc.rust-lang.org/book/ch03-05-control-flow.html]3.5.
            Control Flow
    9. [https://doc.rust-lang.org/book/ch04-00-understanding-ownership.htm
       l]4. Understanding Ownership
   10.
         1. [https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html
            ]4.1. What is Ownership?
         2. [https://doc.rust-lang.org/book/ch04-02-references-and-borrowi
            ng.html]4.2. References and Borrowing
         3. [https://doc.rust-lang.org/book/ch04-03-slices.html]4.3. The
            Slice Type
   11. [https://doc.rust-lang.org/book/ch05-00-structs.html]5. Using
       Structs to Structure Related Data
   12.
         1. [https://doc.rust-lang.org/book/ch05-01-defining-structs.html]
            5.1. Defining and Instantiating Structs
         2. [https://doc.rust-lang.org/book/ch05-02-example-structs.html]5
            .2. An Example Program Using Structs
         3. [https://doc.rust-lang.org/book/ch05-03-method-syntax.html]5.3
            . Method Syntax
   13. [https://doc.rust-lang.org/book/ch06-00-enums.html]6. Enums and
       Pattern Matching
   14.
         1. [https://doc.rust-lang.org/book/ch06-01-defining-an-enum.html]
            6.1. Defining an Enum
         2. [https://doc.rust-lang.org/book/ch06-02-match.html]6.2. The
            match Control Flow Construct
         3. [https://doc.rust-lang.org/book/ch06-03-if-let.html]6.3.
            Concise Control Flow with if let
   15. [https://doc.rust-lang.org/book/ch07-00-managing-growing-projects-w
       ith-packages-crates-and-modules.html]7. Managing Growing Projects
       with Packages, Crates, and Modules
   16.
         1. [https://doc.rust-lang.org/book/ch07-01-packages-and-crates.ht
            ml]7.1. Packages and Crates
         2. [https://doc.rust-lang.org/book/ch07-02-defining-modules-to-co
            ntrol-scope-and-privacy.html]7.2. Defining Modules to Control
            Scope and Privacy
         3. [https://doc.rust-lang.org/book/ch07-03-paths-for-referring-to
            -an-item-in-the-module-tree.html]7.3. Paths for Referring to
            an Item in the Module Tree
         4. [https://doc.rust-lang.org/book/ch07-04-bringing-paths-into-sc
            ope-with-the-use-keyword.html]7.4. Bringing Paths Into Scope
            with the use Keyword
         5. [https://doc.rust-lang.org/book/ch07-05-separating-modules-int
            o-different-files.html]7.5. Separating Modules into Different
            Files
   17. [https://doc.rust-lang.org/book/ch08-00-common-collections.html]8.
       Common Collections
   18.
         1. [https://doc.rust-lang.org/book/ch08-01-vectors.html]8.1.
            Storing Lists of Values with Vectors
         2. [https://doc.rust-lang.org/book/ch08-02-strings.html]8.2.
            Storing UTF-8 Encoded Text with Strings
         3. [https://doc.rust-lang.org/book/ch08-03-hash-maps.html]8.3.
            Storing Keys with Associated Values in Hash Maps
   19. [https://doc.rust-lang.org/book/ch09-00-error-handling.html]9.
       Error Handling
   20.
         1. [https://doc.rust-lang.org/book/ch09-01-unrecoverable-errors-w
            ith-panic.html]9.1. Unrecoverable Errors with panic!
         2. [https://doc.rust-lang.org/book/ch09-02-recoverable-errors-wit
            h-result.html]9.2. Recoverable Errors with Result
         3. [https://doc.rust-lang.org/book/ch09-03-to-panic-or-not-to-pan
            ic.html]9.3. To panic! or Not to panic!
   21. [https://doc.rust-lang.org/book/ch10-00-generics.html]10. Generic
       Types, Traits, and Lifetimes
   22.
         1. [https://doc.rust-lang.org/book/ch10-01-syntax.html]10.1.
            Generic Data Types
         2. [https://doc.rust-lang.org/book/ch10-02-traits.html]10.2.
            Traits: Defining Shared Behavior
         3. [https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html]1
            0.3. Validating References with Lifetimes
   23. [https://doc.rust-lang.org/book/ch11-00-testing.html]11. Writing
       Automated Tests
   24.
         1. [https://doc.rust-lang.org/book/ch11-01-writing-tests.html]11.
            1. How to Write Tests
         2. [https://doc.rust-lang.org/book/ch11-02-running-tests.html]11.
            2. Controlling How Tests Are Run
         3. [https://doc.rust-lang.org/book/ch11-03-test-organization.html
            ]11.3. Test Organization
   25. [https://doc.rust-lang.org/book/ch12-00-an-io-project.html]12. An
       I/O Project: Building a Command Line Program
   26.
         1. [https://doc.rust-lang.org/book/ch12-01-accepting-command-line
            -arguments.html]12.1. Accepting Command Line Arguments
         2. [https://doc.rust-lang.org/book/ch12-02-reading-a-file.html]12
            .2. Reading a File
         3. [https://doc.rust-lang.org/book/ch12-03-improving-error-handli
            ng-and-modularity.html]12.3. Refactoring to Improve Modularity
            and Error Handling
         4. [https://doc.rust-lang.org/book/ch12-04-testing-the-librarys-f
            unctionality.html]12.4. Developing the Library’s Functionality
            with Test Driven Development
         5. [https://doc.rust-lang.org/book/ch12-05-working-with-environme
            nt-variables.html]12.5. Working with Environment Variables
         6. [https://doc.rust-lang.org/book/ch12-06-writing-to-stderr-inst
            ead-of-stdout.html]12.6. Writing Error Messages to Standard
            Error Instead of Standard Output
   27. [https://doc.rust-lang.org/book/ch13-00-functional-features.html]13
       . Functional Language Features: Iterators and Closures
   28.
         1. [https://doc.rust-lang.org/book/ch13-01-closures.html]13.1.
            Closures: Anonymous Functions that Capture Their Environment
         2. [https://doc.rust-lang.org/book/ch13-02-iterators.html]13.2.
            Processing a Series of Items with Iterators
         3. [https://doc.rust-lang.org/book/ch13-03-improving-our-io-proje
            ct.html]13.3. Improving Our I/O Project
         4. [https://doc.rust-lang.org/book/ch13-04-performance.html]13.4.
            Comparing Performance: Loops vs. Iterators
   29. [https://doc.rust-lang.org/book/ch14-00-more-about-cargo.html]14.
       More about Cargo and Crates.io
   30.
         1. [https://doc.rust-lang.org/book/ch14-01-release-profiles.html]
            14.1. Customizing Builds with Release Profiles
         2. [https://doc.rust-lang.org/book/ch14-02-publishing-to-crates-i
            o.html]14.2. Publishing a Crate to Crates.io
         3. [https://doc.rust-lang.org/book/ch14-03-cargo-workspaces.html]
            14.3. Cargo Workspaces
         4. [https://doc.rust-lang.org/book/ch14-04-installing-binaries.ht
            ml]14.4. Installing Binaries from Crates.io with cargo install
         5. [https://doc.rust-lang.org/book/ch14-05-extending-cargo.html]1
            4.5. Extending Cargo with Custom Commands
   31. [https://doc.rust-lang.org/book/ch15-00-smart-pointers.html]15.
       Smart Pointers
   32.
         1. [https://doc.rust-lang.org/book/ch15-01-box.html]15.1. Using
            Box<T> to Point to Data on the Heap
         2. [https://doc.rust-lang.org/book/ch15-02-deref.html]15.2.
            Treating Smart Pointers Like Regular References with the Deref
            Trait
         3. [https://doc.rust-lang.org/book/ch15-03-drop.html]15.3.
            Running Code on Cleanup with the Drop Trait
         4. [https://doc.rust-lang.org/book/ch15-04-rc.html]15.4. Rc<T>,
            the Reference Counted Smart Pointer
         5. [https://doc.rust-lang.org/book/ch15-05-interior-mutability.ht
            ml]15.5. RefCell<T> and the Interior Mutability Pattern
         6. [https://doc.rust-lang.org/book/ch15-06-reference-cycles.html]
            15.6. Reference Cycles Can Leak Memory
   33. [https://doc.rust-lang.org/book/ch16-00-concurrency.html]16.
       Fearless Concurrency
   34.
         1. [https://doc.rust-lang.org/book/ch16-01-threads.html]16.1.
            Using Threads to Run Code Simultaneously
         2. [https://doc.rust-lang.org/book/ch16-02-message-passing.html]1
            6.2. Using Message Passing to Transfer Data Between Threads
         3. [https://doc.rust-lang.org/book/ch16-03-shared-state.html]16.3
            . Shared-State Concurrency
         4. [https://doc.rust-lang.org/book/ch16-04-extensible-concurrency
            -sync-and-send.html]16.4. Extensible Concurrency with the Sync
            and Send Traits
   35. [https://doc.rust-lang.org/book/ch17-00-oop.html]17. Object
       Oriented Programming Features of Rust
   36.
         1. [https://doc.rust-lang.org/book/ch17-01-what-is-oo.html]17.1.
            Characteristics of Object-Oriented Languages
         2. [https://doc.rust-lang.org/book/ch17-02-trait-objects.html]17.
            2. Using Trait Objects That Allow for Values of Different
            Types
         3. [https://doc.rust-lang.org/book/ch17-03-oo-design-patterns.htm
            l]17.3. Implementing an Object-Oriented Design Pattern
   37. [https://doc.rust-lang.org/book/ch18-00-patterns.html]18. Patterns
       and Matching
   38.
         1. [https://doc.rust-lang.org/book/ch18-01-all-the-places-for-pat
            terns.html]18.1. All the Places Patterns Can Be Used
         2. [https://doc.rust-lang.org/book/ch18-02-refutability.html]18.2
            . Refutability: Whether a Pattern Might Fail to Match
         3. [https://doc.rust-lang.org/book/ch18-03-pattern-syntax.html]18
            .3. Pattern Syntax
   39. [https://doc.rust-lang.org/book/ch19-00-advanced-features.html]19.
       Advanced Features
   40.
         1. [https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html]19.1.
            Unsafe Rust
         2. [https://doc.rust-lang.org/book/ch19-03-advanced-traits.html]1
            9.2. Advanced Traits
         3. [https://doc.rust-lang.org/book/ch19-04-advanced-types.html]19
            .3. Advanced Types
         4. [https://doc.rust-lang.org/book/ch19-05-advanced-functions-and
            -closures.html]19.4. Advanced Functions and Closures
         5. [https://doc.rust-lang.org/book/ch19-06-macros.html]19.5.
            Macros
   41. [https://doc.rust-lang.org/book/ch20-00-final-project-a-web-server.
       html]20. Final Project: Building a Multithreaded Web Server
   42.
         1. [https://doc.rust-lang.org/book/ch20-01-single-threaded.html]2
            0.1. Building a Single-Threaded Web Server
         2. [https://doc.rust-lang.org/book/ch20-02-multithreaded.html]20.
            2. Turning Our Single-Threaded Server into a Multithreaded
            Server
         3. [https://doc.rust-lang.org/book/ch20-03-graceful-shutdown-and-
            cleanup.html]20.3. Graceful Shutdown and Cleanup
   43. [https://doc.rust-lang.org/book/appendix-00.html]21. Appendix
   44.
         1. [https://doc.rust-lang.org/book/appendix-01-keywords.html]21.1
            . A - Keywords
         2. [https://doc.rust-lang.org/book/appendix-02-operators.html]21.
            2. B - Operators and Symbols
         3. [https://doc.rust-lang.org/book/appendix-03-derivable-traits.h
            tml]21.3. C - Derivable Traits
         4. [https://doc.rust-lang.org/book/appendix-04-useful-development
            -tools.html]21.4. D - Useful Development Tools
         5. [https://doc.rust-lang.org/book/appendix-05-editions.html]21.5
            . E - Editions
         6. [https://doc.rust-lang.org/book/appendix-06-translation.html]2
            1.6. F - Translations of the Book
         7. [https://doc.rust-lang.org/book/appendix-07-nightly-rust.html]
            21.7. G - How Rust is Made and “Nightly Rust”

   (BUTTON) (BUTTON)
     * (BUTTON) Light
     * (BUTTON) Rust
     * (BUTTON) Coal
     * (BUTTON) Navy
     * (BUTTON) Ayu

   (BUTTON)

The Rust Programming Language

   [https://doc.rust-lang.org/book/print.html][https://github.com/rust-lan
   g/book]
   ____________________

[https://doc.rust-lang.org/book/#the-rust-programming-language]The Rust
Programming Language

   by Steve Klabnik and Carol Nichols, with contributions from the Rust
   Community

   This version of the text assumes you’re using Rust 1.67.1 (released
   2023-02-09) or later. See the
   [https://doc.rust-lang.org/book/ch01-01-installation.html]“Installation
   ” section of Chapter 1 to install or update Rust.

   The HTML format is available online at
   [https://doc.rust-lang.org/stable/book/]https://doc.rust-lang.org/stabl
   e/book/ and offline with installations of Rust made with rustup; run
   rustup docs --book to open.

   Several community
   [https://doc.rust-lang.org/book/appendix-06-translation.html]translatio
   ns are also available.

   This text is available in
   [https://nostarch.com/rust-programming-language-2nd-edition]paperback
   and ebook format from No Starch Press.

     🚨 Want a more interactive learning experience? Try out a different
     version of the Rust Book, featuring: quizzes, highlighting,
     visualizations, and more:
     [https://rust-book.cs.brown.edu/]https://rust-book.cs.brown.edu

   [https://doc.rust-lang.org/book/foreword.html][https://doc.rust-lang.or
   g/book/foreword.html]
