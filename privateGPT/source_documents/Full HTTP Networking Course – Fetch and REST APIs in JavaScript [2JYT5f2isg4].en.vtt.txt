Master the HTTP networking protocol in
this Hands On course HTTP is the
backbone of the modern web and this
course is a deep dive into all the
fundamentals you ll need to know to
master web networking Lane Wagner
created this course Lane is a senior
back end engineer and is the creator of
boot dev where he has published many
interactive courses
hey free code campers welcome to my
latest course on web networking and
specifically the HTTP protocol in this
course we ll be doing over 80 coding
exercises and at the end we re going to
build a web crawler in JavaScript from
scratch I believe in learning by doing
so we ll really be doubling down on that
here there are actually two ways you can
follow along with this course the first
option is to write code on your local
machine while you follow along with this
video the second option is to head over
to boot dev where I ve publish the
interactive version of this course in
fact I ll actually be teaching this
video course by doing the interactive
version of the course on camera and
explaining each step in detail there s
also a link in the description below to
all of the raw code samples in a GitHub
repository it s totally up to you how
you want to take this course I have
provided the link to the interactive
version below if that s how you want to
do it just so you know this course is
part of a larger back end career path
over on boot dev which is designed to
take students from xero to hireable as
as a back end developer just so you know
all of the code we re going to write in
this course will be JavaScript and while
I ll be explaining every exercise I will
assume that you have a basic
understanding of JavaScript and es6
syntax if you don t that s okay I ll
provide some beginner level resources
for JavaScript in the description below
I love getting feedback about all my
courses so if you do have feedback one
of the easiest ways to get in touch with
me is on Twitter at wagslane I d love to
know what you think also if you find
that you like the way that I m
explaining these coding Concepts feel
free to subscribe to my YouTube channel
it s at boot dev if you get stuck or
have questions during the course I m
going to recommend three different
places the first is the free code Camp
Forum the second is the free code Camp
Discord and the third is the boot dev
Discord where we have a channel
dedicated to this course again those
links will be in the description below
before we jump right into the first
lesson I want to take just a second to
explain how you can get the most out of
this course I ve designed this course to
be Hands On on and Project based
tutorial hell is a term you might be
familiar with but it s basically the
idea that it s easy to slip into a
passive mode when you re consuming
educational content the way to get the
maximum value out of this course will be
to watch my explanation of the concepts
and coding challenges but then to write
the code yourself on your own machine or
on boot dev if you re never pausing this
video you probably aren t learning very
effectively I d encourage you to pause
this video before every solution I give
so that you have a chance to solve each
challenge yourself once we finish all of
the lessons and challenges we re going
to go build a web crawler in JavaScript
from scratch and we re doing that
because it s really important to use
what you learn so you don t forget it
all do not binge watch this video from
start to finish this course is designed
to take several days or weeks when done
properly it s really hard to learn a
concept after just one explanation so
don t be afraid to rewind the video and
re watch the explanation of a concept
that you might still be be a little
fuzzy on my name is Lane Wagner I m the
author of this course and I ll be your
instructor every step of the way
let s talk about h e t e
hyper text transfer protocol
before we jump into the Nitty Gritty
details of the protocol and how it works
it s important to understand why we
should care
let s talk about image sharing
so you ve got your
camera phone and you take a couple
pictures
okay now it s important to remember that
20 years ago right in the 90s and early
2000s it wasn t easy to share digital
photos with say a friend or family
member it it was easy to take photos
we ve had digital cameras for a long
time right um but it wasn t easy to
share them these days if you use an app
like Instagram right you take your
photos and then I on my phone
and fairly seamlessly download
your photos over the internet
onto my phone
and it s really important to understand
that this is really the secret to
Instagram success they made photo
sharing really really easy and they did
it just using the internet
so you may be wondering what the heck
does this have to do with HTTP well HTTP
is the protocol
it was almost certainly used to download
those images HTTP is the most popular
protocol for communicating online you ve
probably noticed that every time you go
to a website you see that HTTP colon
slash slash section of the URL right
that s because every time you visit a
website online you re using the HTTP
protocol to do it
so I ve used this word uh protocol
protocol
a couple of times and you may be
wondering what the heck is a protocol
sounds like a really complex really
complex thing um it s actually not
Protocols are very simple
um let s jump right into what we mean
when we say protocol
let s imagine that I write a note to you
just on a piece of paper that says raise
raise your
hand
if I write this down on a piece of paper
and I hand it to you and when you get
the piece of paper you read it and you
raise your hand
so the question is upon reading the
piece of paper how did you know that I
wanted you to raise your hand right you
saw these you saw these symbols on the
piece of paper and somehow you re able
to understand the N should be raised
well it s because we have a protocol for
communicating over text right we ve
decided that these symbols that look
like this are a i s e that they form a
word right and that word means to to
lift something up and in hand we ve
decided that these symbols h a n d mean
you know this thing at the end of my arm
and and it s just a set of rules that me
as the person communicating and you as
the person I m communicating to have
agreed upon and now that we ve agreed
upon that set of rules we can
communicate right over this in this case
the medium of a piece of paper
protocol on the internet works in the
same way we decide upon a set of rules
right and then two computers can both
follow those rules and communicate with
each other
in the case of computers instead of
sending plain text right r a i s e we
would send kind of strings of ones and
zeros
but the idea is the same this is just
information that s sent between two
computers over a network and the
protocol right hypertext transfer
protocol the protocol is what tells the
computers how to parse this information
as something useful
because we have this protocol this way
of parsing kind of ones and zeros
as useful information
I am able to send you a photo over the
internet right again it s just a bunch
of ones and zeros that represent
something but because you and I agree on
this this protocol or this language I
can send you the image of for example
your niece s birthday party right and
your phone is able to parse all that
information and display an image
but that s what makes HTTP so powerful
all right let s jump into the first
coding lesson I m here on boot dev I m
in the learn HTTP course this is
exercise number one
so it s important to understand that in
this course we ll be interacting with a
live API we ll be writing JavaScript
code kind of on the front end it makes
requests to the back end server via http
and that server is a fantasy Quest
server fantasy Quest is a made up game
so while this is a real API we ll be
interacting with a server
um for essentially a fake fake video
game give us some context uh to all
these assignments and coding challenges
that will be completed okay so the
assignment says I wrote the get item
data function for you it retrieves items
from fantasy quests servers via http
okay so it looks like we have this get
item data function looks like it s
grabbing some data from this URL we
don t really need to know how the
internals work yet but that s what the
function does and it says I also wrote a
log items function for you so log items
call it with the items variable we re
getting back from the get item data call
as a parameter Okay cool so up here
where we are supposed to do our work
looks like we re getting the items from
the server and then here we just need to
log those items
the console let s go ahead and run that
and see what happens
cool looks like we got we got some items
those look like those look like items to
me go ahead and submit that
awesome so moving along
all right HTTP requests and responses so
at the heart of HTTP is a simple request
response system the requesting computer
also known as the client here we have
our client asks another computer in this
case the server for some information so
when we make an HTTP request right we
acting as the client make a request to a
server server processes that request and
sends some information back to us in a
response that s the the entire HTTP life
cycle
it s all based on request response it s
very synchronous in that way right I
send a request then I have to sit and
wait till a response comes back right
and then those words client and server
it s important to just understand that
when we say client we just mean the
computer sending the request when we say
server we we mean the computer that s
responding to the request
um and that s really all it means
there s not like a special type of
computer
um it s really just who s doing the
sending and who s doing the receiving in
any given communication
so um we ll talk a little more about the
specifics of requests and responses
later for now it s important to think of
it as a simple question and answer
system so we re asking questions to the
server and we re getting answers right
in the last assignment we made a request
to the fantasy Quest server for a list
of the all the items in the game and we
got back a list of items in the game
right so which comes first HD to
response or HTTP request it s going to
be the request
so we ve talked about how HTTP is is
very widely used for internet
communication in fact it Powers websites
right so if we scroll down to this
diagram here the client which can be
your computer could be your phone makes
a requests to a server
server responds with a website right so
this is what happens every time you load
your browser and you type in the name of
a website right boot dev
freecodecamp org youtube com it doesn t
matter when you enter that URL into your
browser you re making an HTTP request to
a server and that server is responding
with the data that makes up their
website right the images the text the
HTML the CSS all of that comes back via
an HTTP response so the question is
website data is requested via which
internet communication protocol and

so looking at this error uh unexpected
token doctype is not valid Json so we re
going to get to Json later but basically
stands for JavaScript object notation
and it s one of the most common ways to
kind of get raw data from a URL right in
this case we re trying to get some item
data from this URL but we re getting
back some HTML that s a problem
um according to the assignment it says
that s because we are not getting a
proper HTTP response after all we aren t
making a request to a valid URL why not
let s see so get data here takes the URL
as inputs
ah okay up here we re not there s no URL
getting passed into the get data
function right it takes one parameter
we re not supplying a URL so fix the
code so that the get data function
requests the item URL okay so let s uh
let s pass that in there

awesome that that looks like item data
to me
Okay so we ve made some HTTP requests to
a couple different URLs now but it s
really important to understand the URLs
are not specific to http
if they were we wouldn t need to prefix
so many URLs with that HTTP colon slash
the purpose of the prefix is to tell the
essentially the computer that s making
the request which protocol to use right
we want to use HTTP to make this request
so that s why we re prefixing the URL
with that HTTP
like I said there s plenty others things
like https mail to psql
there s a lot of them but the question
here is HTTP is the only protocol that
uses URLs that is false let s talk about
clients
clients and servers
I mean the context of HTTP web
applications right and as a general rule
it s important to understand that
generally speaking clients exist on the
front end of an application and servers
exist on the back end back end of an
application
the front end of an application is what
the user sees so it s typically a mobile
app or a website right it s the thing
that the user is directly interacting
with
the back end is essentially everything
else and in order to demonstrate that
let s take a look at the example of
YouTube so when you want to watch a
YouTube video you load up an app on your
phone it s probably written in Swift or
objective c or react native but the
point is it exists locally on your phone
and it contains all of the code that is
required to kind of render that visual
YouTube interface
so that app and your phone we can
consider the front end again because
it s it s that visual interface that
you re interacting with directly as the
user however as you probably know your
phone does not locally store every
YouTube video on the planet and it
doesn t have every comment stored
locally right so when you load a video
your phone actually needs to make an
HTTP request
two YouTubes back end and again remember
just that by definition the back end is
basically everything that s not
on the front end which is just the stuff
on your phone okay so the there is a
computer on YouTube s back end right
probably in sub data center somewhere
that s going to serve or handle that
HTTP request so now that we have this
kind of a computer making a request and
a computer processing the request we
have
um the ability to say who the client is
and who the server is so in this case
at your phone
is the client
because it s the one sending the HTTP
request here right
and the back end uh computer the one in

cool now we re starting to see how the
client makes requests to the server what
gets a little interesting is let s
pretend that this server all it has is
video data
locally
but the client actually asked for videos
and comments so what needs to happen now
is there s probably some other server

and that server has comments on it

locally on this server
so what can happen now is this first
server that s trying to process this
HTTP request right that asked for videos
and comments well I can start the video
but it needs to grab some comments so
it s going to send its own HTTP request
over to this other server hey I need the
comments for this video
right now in this interaction right if
we just look at this interaction over
here on the right
in this case this first computer is
actually now acting as a client
because it s sending an HTTP request and
This Server over here is acting as a
as a server okay so this is an important
example of when a computer is acting as
both a server and a client and that s
totally okay okay so this computer over
here grabs the comments that were asked
for and it sends them back
in an HTTP response
this first server This Server now has
all the data it needs to respond to the
client and it can send
a response
back
to the client
hopefully this is done a little bit to
explain how clients and servers interact
with each other and how really at the
end of the day the word clients and the
word server only matter within the
context of a single HTTP request if a
computer is sending an HTTP request we
consider it the client
if a computer is responding to an HTTP
request we consider it a server and
that s really all that client and server
mean so now we ve got a quiz about
clients and servers it looks like the
question is does the example code run on
a client or a server and here s the
example code written in JavaScript and
it looks like
there s a URL here and a request is
being made to that URL so this has to be
a client right because a server doesn t
need a URL to make a request to Observer
serves the response this is definitely a
client okay another client server
question this one is the computer
responding to requests at the URL https
api but dev is a well if it s responding
to requests it must be server so we re
finally ready to start talking about the
fetch API we ve already used it in a
couple of the other coding challenges
but we haven t really explained what it
is in a nutshell the fetch API is a set
of built in functions and tools that we
can use when we re writing JavaScript
code in order to make HTTP requests so
an HTTP request has a lot going on with
it there s you know the URL that we have
to send the request to there s a body
there s some headers and at the end of
the day it would be a big nightmare if
every time we had to write an HTTP
request we needed to write all of that
logic from scratch so the the browser in
this case provides that functionality
through a built in function called Fetch
and that s what we ll be using to make
our HTTP requests in this course okay
let s look at how we can actually use
the fetch API in code
it all starts with this fetch function
and now this is not a function that
we ve defined in our code it s a
function that s made Available To Us by
the browser it s a built in function the
way it works is it takes two inputs it
takes a URL which is the URL that we
want to make a request to and a settings
object we ll talk more about you know
the different ways we can configure a an
HTTP request in just a minute after that
we actually do have to use this await
keyword in front of the function call in
front of the fetch call and that s
because when we make a fetch call we re
quite literally sending bits of data
sometimes halfway across the world so we
need our code to pause and wait for that
response to come back it s going to take
a while and the await keyword allows us
to do that we ll go way more in depth
about asynchronous programming and and
kind of what s going on under the hood
here but for now just know that when you
make a fetch request you do need to
await it what we get back from all of
that is the response object the respawn
object has a bunch of stuff in it that
again we re going to get to but for now
we just want kind of the the meat of the
response we want the data right so we
know that this server in this case the
fantasy Quest server that we re working
with responds with Json data which
stands for Java JavaScript object
notation it s basically data that looks
like this and these these brackets and
colons and and uh property value right
key value pairs
um it s it is a JavaScript object but in
text form so this dot Json method allows
us to take that response body which
again is just text that looks like a
JavaScript object and parse it into an
actual JavaScript object in our code so
we can work with it
and again that method call that dot Json
method call that needs to be awaited as
well because it s an asynchronous
operation
once we re done with all of that we have
some response data and that is a
JavaScript object again it s just a
JavaScript object with key value pairs
right things like you know armor five
name Lane uh it s it s just very simple
simply structured Json data that comes
back from the server
so let s get to the assignment says to
fix the bug in the code the problem is
that we aren t waiting for the response
to physically come back across the
internet connection before continuing
with our code okay let s take a look
so it looks like down here there s some
there s a git settings function looks
like this is uh setting up the settings
for the fetch request this is the URL
that we re going to be making the fetch
request to uh it looks like there s some
other authentication stuff some logging
but really at the end of the day what we
are interested in is is this part here
so we re looking for a bug we need to
fix
and again according to the assignment
it s because we re not waiting for the
response to physically come back so what
happens if I just run the code right now
Piper response json is not a function
well that makes sense to me because this
response object here is going to be
garbage if we re not waiting for the
fetch request to complete
right so we re trying to call this dot
Json method on essentially a garbage
object
so let s go ahead and await that fetch
request
and there we go we get all of our item
data as we would expect
so we ve already talked a lot about
clients and servers and how clients make
requests to servers well this question
is the front end of a website is a
and the options are client and server
well
the front end of a website
can t really be a server I mean there
are certain scenarios in which we could
consider it a server
um like very specific and rare scenarios
but generally speaking the front end of
a website is going to be a client
because it s going to be making requests
out to the back end okay this question a
mobile phone is often used as an
and then the answers are HTTP server or
HTTP client now again
a phone could be a server like there are
scenarios in which a phone could respond
to an HTTP request right a phone is a
computer we could run some server
software on it but that would be very
very strange most of the time your phone
when you open it up and use an app on it
it s going to be making HTTP requests
out to some back end server so most
often a mobile phone is an HTTP client
so let s talk just a little bit more
about web servers so most applications
that you ve probably written up until
this point
kind of start
do a bunch of stuff and then stop right
terminate when they re done doing what
it is they re supposed to do servers are
interesting in that they don t stop
running generally speaking right you
turn on the server and then it just sits
there on a computer listening for
incoming HTTP requests as they come in
it handles them right it sends responses
but it s just kind of always on
and again this is important to
understand because it s it s very likely
that there s a lot of applications
you ve written up to this point that
don t act that way right you run the
code
the code exits you run the code the code
exits not with servers right with a
server you start up the server and then
in order to test your server code you
would actually need to send HTTP
requests to it right make sure that it
behaves as you would expect given
certain HTTP inputs and then you d
actually need to probably manually stop
your server from running because they re
not designed to shut down automatically
so the question is good web servers are
listening for requests only when a
client is active only during business

another question about servers here so
the question is a server is the blank of
an application
and the options are back end and front
end
well a server isn t interacted with
visually right so it can t be affronted

okay another question about servers this
time it s actually a statement says any
computer can be a server but the best
servers are special made for serving
data
before I answer this question I want to
just explain a little bit about kind of
how the modern internet works so
generally speaking
um new kind of web companies are
spinning up their servers in data
centers data centers owned by companies
like Google Cloud platform Amazon web
services Azure and the computers in
those data centers are hyper optimized
to be servers they re optimized for
server side workloads that said it s
important to understand that
realistically you can run server
software on pretty much any computer
right in fact when we re developing our
back end applications even if we will
eventually deploy them in a data center
we are generally developing them on our
local machines right on just you know
our work laptops so the servers work
perfectly fine on laptops but it is
important to understand that when the
hardware is optimized for Server
workloads you ll get more bang for your
buck
so the answer here is going to be true
any computer can be a server but the
best servers are made for serving data
let s talk about web addresses so I m
over here on my computer and I want to
communicate
with let s say some server over here
right maybe I want to make a request to
that server maybe I want to browse a
website that s hosted there the point is
I want to communicate with it
trouble is the internet is made up of
much more than just my computer and the
server right we have all these other
devices that are connected to the
internet we have tons of other servers
that are connected to the internet so
how right how can I tell kind of the
routing mechanisms of the internet that
I want to communicate directly
correctly
with that server well that s where web
addresses come in and more specifically
what we call I
e addresses or Internet Protocol
addresses so what does an IP address
look like well it looks something like

13 156 7 okay there s four sections
separated by periods
and each section can be between 0 and
255 or numbers each number is one byte
of information this
8 13 156 7 this is just an example right
it is a valid IP address but I don t
know if there s anything connected to
this IP address so just just keep that
in mind there s many many possible valid
IP addresses the Only Rule is that each
section has a number between 0 and 255
so whenever you order a package online
you have a unique address for your home
and that s how the e commerce store say
Amazon knows how to send the package
directly to your door it doesn t get
mixed up anywhere else right IP
addresses work the same way every device
connected to the internet has its own
you know unique IP address so in this
example from before where I m trying to
communicate with the server all I need
to know is its unique IP address and if
I know that I can communicate with it it
is important to understand that this
format here right these four numbers
separated by periods uh this is just one
format of
an IP address it s actually the more
popular format it s called ipv4
but there is a newer format that s being
used called IPv6 or IPv6 and it it looks
similar but there s actually way more
possible
IPv6 addresses than ipv4 address and in
in IPv6 each section is separated by a
colon
colon rather than a period we can tell
them apart right and there s actually
one two three four five six seven eight
sections
in an IPv6 address
and each section actually has more
information in it so the point is
there s way more IPv6 addresses way more
possible IPv6 addresses out there than
ipv4 addresses and that s really
important because we re actually running
out of ipv4 addresses there s there s
really not that many combinations of
numbers here
um and so we re running into a problem
where so many people and so many devices
are online and we re we re running short
on these ipv4 addresses so IPv6 is kind
of
um given us more options uh the the same
principle applies right the addresses
are unique and uniquely identify uh
machines on the internet but uh we just
have more kind of available to us so as
you re looking uh at you know IP
addresses just know that you ll see them
in both formats so it seems like IP
addresses are very useful right just
like how if I were to give you my
physical address you could send me a
package from anywhere in the world if I
were to give you my IP address you could
contact me over the internet from
anywhere in the world but this is where
things start to get problematic right if
I want to contact Amazon s servers right
say I just want to navigate to
amazon com I want their server to give
me a web page it s not very helpful
if I need to know their IP address right
I don t have amazon com s servers IP
address memorized no one does right so
that s where DNS
DNS comes into play DNS stands for
domain name system and one of its main
purposes is to map
human readable right easily read names
like amazon com
to IP addresses
okay so now when I want to go to
amazon com I can type into my computer
amazon com and the domain name system is
responsible for looking up the IP
address that s associated with
amazon com
and giving it back to me so that I can
make that request to the server that I m
looking to get to right so this whole
system of essentially going out using IP
addresses to talk to computers that is
used it s just the Second Step the first
step that our computers kind of do under
the hood automatically for us is to
resolve a domain name to an IP address
and this has the side benefit of if
Amazon wants to change out their IP
address or maybe their IP address kind
of just changes because their internet
service provider swaps it out on them
they can update their uh they can update
this mapping right they can update the
IP address under the hood without
needing to change their domain name so
all the users right can still just
navigate to amazon com but now they re
actually going to maybe a different
server or a different IP address under
the hood so just to recap there s
essentially two steps every time we want
to send an HTTP request to the server on
a given domain name the first step is to

DNS
what that means is we re taking the
domain name right say google com and
resolving it into an IP address so we re
obtaining an IP address
step number two is to use the obtained
IP address to actually make that request
across the internet okay let s talk
about how a domain name relates to a URL
so here we ve got a full URL this is
actually a web page on Wikipedia about
miniature pigs
um and it s interesting the interesting
part is that actually this
en wikipedia org is the only part of the
URL that makes up the domain name or it
is the domain name if the rest of the
URL is important but it s not related to
the domain name and it s not the part
that we need in order to look up the IP
address of the domain name all we need
is the domain name to look up the
associated IP address
cool so in this assignment we re going
to be working with the cloudflare API so
cloudflare is a tech company they have
this uh this public API cloudflare Dash
dns com that we can use to look up the
IP address if we give it a domain so
here you can see we re passing in a
domain as a variable and we ll get to
all of this syntax
um later just know that we re
essentially calling the cloudflare API
giving it a domain name and we re
expecting to get back a response uh with
an IP address in it
so the assignment says on line 9 the
function FIP address is simply logging
the entire object we receive from
cloudflare to the console run the code
to see the structure of the object so
let s go ahead and run that
okay so this is the object that s coming
back from cloudflare again as a as a
JavaScript object
our job is to dig into this object to
get at the IP address which just kind of
looking through this there s the IP
address right it s that those four
numbers with the with the dots in
between
um
and then it says update the code to
return just the IP address and remove
the logging okay so we don t need to log
this

see it s going to be resp object it a
key that we are interested in looks like
it s going to be tell you what let s do
this let s go over to
you ve never used this site before
super useful it s called Json lint
I ll blow it up just a little bit so you
can see
it lends the Json object so we can kind
of see
the structure of the response a little
better okay so if this is our top level
object right resp object then we want
the answer key so we re going to do resp
object dot answer
and then that is an array
so we want the first item in the array

it s going to be zero index is zero
and then we want that IP address it s
going to be the data key
so dot data
and let s just run that and see what
happens
found IP address for domain api boot dev
and that s the IP address okay perfect
so it looks like it s working
um I do want to just really quickly
point out that this is a little
dangerous if we wanted to make our code
a little more robust we could do some
checking here to make sure that these
fields and the length of this array
um
actually exists so we don t get some
sort of runtime error uh
cool let s go ahead and submit this
great so to recap a domain name is just
one part of a URL and it s specifically
the part that we use to look up the IP
address of a server and then of course
we can use that IP address to go contact
that web server maybe to see a web page
that is being hosted by that server for
example so let s run through an example
of how you might deploy your own website
to the internet using IP addresses and
domain names so step number zero which
actually isn t written down here is it s
kind of assumed is that you need a web
server software and you need a website
that you want to serve which is
basically a collection of HTML and CSS
files
um assuming you have that which again is
kind of out of the scope of this course
so I m going to just kind of wave my
hands and say you you should have that
assuming you have that then the next
step is to take that software and deploy
it on a machine typically what you would
do today is deploy it on some Cloud
platform right something like a netlify
or a gcp or an Azure or an AWS and when
you do that
um you will get an IP address of the
machine that you deployed to again these
large kind of cloud providers would give
you the IP address of the machine it s
just say hey here s the IP address where
we just deployed your code okay
once you have that IP address then you
would need to go buy a domain name
again you go find a provider of domain
names they re called registrars uh
something like Amazon Google name cheap
you go by your domain name and then
again using their software you tell them
what your IP address is so
you know say you buy xyz com you go and
you say hey I just bought xyz com here s
the IP address I want it s to point to
and then they go and update the domain
name system form that s just kind of a
high level overview of how you would go
about actually deploying a website to
the internet with all that in mind uh
the question for this quiz is which is a
human readable label that converts to an
IP address
that would be a domain name question
here is why don t we require users to
type in IP addresses directly to browse
the web
I ll pause for a second if you want to
take a look
the tongue in cheek thing here is I
absolutely hate when websites auto play
any sort of audio music videos whatever
it is drives me crazy I think it s a
terrible user experience so I think the
same uh the same thing applies to you
know requiring users to type in the IP
addresses of websites right it would
just be a terrible user experience it s
much easier to remember domain names
like boot dev and amazon com so using IP
addresses directly while possible just
awful awful user experience
okay so we got another assignment here
looks like what we ll be doing is
parsing a URL string into a URL object
so JavaScript has this built in this
built in API the URL API that s really
useful for parsing a URL string like
this https colon slash example com
example path
and breaking it down into a JavaScript
object which will then essentially have
all the parsed sections so we ll be able
to extract things like the domain or the
hostname or the scheme or whatever it
handles all that parsing Logic for us
the assignment is complete the get
domain name from URL functions that s
this one up here
given a full URL
string it should return the domain or
host name okay so let s take a look at a
couple things so let s just log let s
just start by logging out
the URL that s being given to get domain
name from URL just to take a look at
what it looks like
okay so that was uh that s the URL
coming in and then because we didn t
return anything the test Suite is saying
the domain name for the URL is undefined
right because we didn t return anything
so let s
use this syntax and I m just going to
pull up the docs as well
this is the of mdn docs for the built in
JavaScript URL API looks like you can
use this we can use this syntax new URL
and then pass in the URL so let s go
ahead and do that

URL object equals new URL
give it the rust string now we should

now that object
should have let s take a look at the
docs again
some properties on it yeah Okay so we ve
got the hash the host the host name a
link password so these are all kind of
different sections of the URL we care
about the hostname that s what our uh
sort of our assignment said it wants so
we will just need to return
URL object Dot hostname
and looking at this URL that s being
passed in I would expect the hostname
just to be boot dev right that s just
the domain name part let s run that
and we get
the domain name for https boot dev learn
learnpython is boot dev so that that
looks right to me I m going to go ahead
and submit that
we ve talked a little bit about DNS
let s go into just a bit more detail so
DNS or the domain name system is
essentially a giant phone book for the
internet right back in the day if you
used a phone book you could look up your
friends by their name and find their
phone number right with DNS we can look
up a website by its domain name and find
its IP address so very very similar
system question is how does DNS work
under the hood right well there s this
organization called icann
i c a n n and it stands for the internet
Corporation for assigned names and
numbers which as you could probably tell
is a very poignant uh very uh very
accurate name I can manages the domain
name system for the entire internet
and whenever your computer
has a domain name that it wants to find
the IP address of it contacts one of
icann s root name servers and then from
there it s able to resolve the IP
address and if you re wondering how it
knows where to find the root name
servers that s typically built into your
computer s networking configuration so
once your computer contacts I can I can
is able to kind of look up that IP
address from there distributed DNS
system it s very large large system
right if you think of DNS as just a
phone book icann is basically the
publisher of the phone book they control
kind of what goes into the phone book
and in case you re concerned about the
inherent power here it is a
not for profit organization so it s not
your typical tech company
okay the question for this quiz is DNS
is a or an and the options are IP
address programming language system that
converts domain names to IP addresses or
domain name I m going to go with the
system that converts domain names to IP
addresses the next question is what does
I can do the options are keep the DNS
system up and running or control what
you say online
uh they keep the DNS system up and
running
sub domains so if we look at this kind
of root domain here you ll see there s
two parts there s dot Dev which is the
TLD or top level domain so it could be
Dev like we have it could also be dot
com org net right there s quite a few
different options and then boot is the
domain name a sub domain actually
prefixes a domain name so for example
our API is hosted separately so boot dev
hosts our website what we are on right
now the learning platform but
api boot dev actually hosts our API
which is what the website kind of uses
to go fetch data update user records and
passwords all that kind of stuff the
api boot dev is essentially our back end
um we also have a
blog boot dev which is just a separate
website that hosts our blog so
subdomains can be used
um to
basically break up uh the resources
hosted on a domain name without having
to actually go buy you know new domain
names we paid for boot dev and now we
own all of the sub domains that you know
can be prefixed under boot dev so let s
take a look at the assignment
Simon says I ve updated the get item
data function that s this function here
from before now it accepts accepts just
a domain as input
it s more convenient this way because it
means if the API we re using ever
changes its domain we only need to
update one variable Okay so
let s see what the heck we re talking
about here
so we ve got this get item data function
and it s making a request out to this
URL and it looks like what s happened is
we ve made the domain portion of the URL
a variable so it can actually be swapped
out fairly easily and that get item data
function takes the domain as an input
okay so the problem is there s a bug the
API is not hosted on boot dev it s
hosted on the API subdomain fix the bug
okay so when we run the code as it is we
get unexpected token doctype is not
valid Json
this looks to me like what s happening
is
https colon slash slash boot dev is
hosting a website right which starts
with this this HTML tag here
it s not valid Json and what we re
looking for here is a a Json object or
JavaScript object
um to come back from the API
so we need to actually hit the API
instead and when we run that looks like
we re we re properly getting back
our item data so we ve already talked
about URLs
um but we haven t really talked about
Uris you might hear or see Uris and
frankly sometimes it can be confusing
because URI sometimes looks like URL
with a lowercase L but it s actually an
i anyways let s let s get into it so URI
stands for uniform resource identifier
and it s essentially a superset of URLs
so if we come down and look at this uh
this Venn diagram you ve got Uris like
all possible Uris and within Uris a sub
category is URLs okay so URL is just a
type of a URI another common type of URI
is a urn
and you are ends and your eyes they can
refer to other things that aren t
necessarily you know accessible via the
Internet things like ISBN numbers of
books
um so generally speaking when we re
working with the internet we re working
with URLs but um it s just good to be
aware of your eyes you will see them
around
um and sometimes for example you ll be
asked to provide a URI and really you re
just providing a URL again because a URL
is a valid URI okay enough about that so
the question all urls are Uris that is
true
next question is all Uris are URLs that
is not true right if we scroll back down
take a look at this all urls are in fact

so a few exercises back we wrote some
code that extracted the host name from a
URL string and now we re going to look
at kind of all the different sections of
a of a URL so take a look at this giant
URL here
um the reason this URL is so large is
I ve gone ahead and added every possible
section so this is like kind of the most
sections a URL can have because every
section is present typically sections
are optional so you won t always see
kind of all of this information
let s go over each section and talk
about what it means so the first section
is the protocol
it s right here right HTTP colon in this
case could be a different protocol we
might use something like postgres for a
database connection but because this URL
is accessible via an HTTP call uh it s
prefixed with the HTTP protocol
next up we got the username and the
password so test user and then a colon
and then test pass
so the colon is the separator so these
are the two different sections for
username and password again these are
optional you won t always see usernames
and passwords in URLs I find that I use
them a lot again to kind of access
resources in code so to do things like
you know get access to a database or a
piece of infrastructure
you ll very rarely see usernames and
passwords in a URL when you re just
browsing the internet right typically
use usernames and passwords on a website
kind of in the site by a form submission
not in the URL itself that would be
kind of strange user experience right to
type it in up there at the top
so that s what those are
um next we have the hostname we ve
already talked about that this at symbol
you only need the at symbol if you ve
included a username and password so it s
kind of an optional delimiter there that
separates the username and password from
the hostname
the port
this is the port that we ll be using to
access the information on the server now
a port is not necessarily optional in
the sense that we re always using a port
to make an HTTP request however there
are defaults so for the HTTP protocol
80 just 80 not 80 80 like we have here
would be the default so if you don t
specify a port
um the request will by default use port
80 and then https which is what you d
use for a secure HTTP call defaults to
Port 443 so again when you re browsing
the internet in your browser you don t
normally have the port because pretty
much every website online uses the
default ports but if you need to specify
a port this is where you would do it and
it s it s a prefix there with a colon
uh next comes the path so it comes after
a slash uh very often in websites the
path is used to kind of uh you know show
different web pages so depending on the
path in the URL you ll you ll you ll
navigate to a different page
um and then Pages can kind of be nested
right so you can have multiple slashes
in there with multiple
um you know sections of the path in this
case we just have the one the one
section of the path
next is the search which I I don t love
that name here
um you ll also hear it called the kind
of the query parameters but basically
it s it starts with a question mark
and then it s a set of key value pairs
so here we have the key is test search
and the value is test value and then we
could have kind of more
um parameters uh after the question mark
we ll get to that later in the course
just know that this section of the URL
is called the the search or the query
parameters and again we ll talk about
the details later
and then the last section is called the
hash
um or the fragment and very often in
websites the fragment is used to kind of
link to a specific section on a page
um but again it could be used for for
other things outside of the context of
websites
okay so that was a lot of information
you don t need to memorize that
um I just wanted to give you a high
level overview we will be talking about
each section kind of in more detail as
necessary throughout the rest of the
course
so let s get to the assignment we ll be
using the URL API again so if you
remember over here on the mdn docs we re
going to be using this kind of built in
function in JavaScript to split apart a
URL
and we re
tasked with splitting and printing all
the different sections so again using
this example URL we actually want to be
printing this kind of breakdown
let s go ahead and start it looks like
the print URL Parts function was already
partially written for us a URL string is
coming in as a parameter and we re kind
of breaking that down into a URL object
now our task is to actually print print
out these messages
so
it looks like these are what the
properties on the URL objects are so um
let s go ahead and print to console log
URL object dot protocol and see what
happens okay so that gives us HTTP I m
guessing dot username will give me
username dragon slayer yeah great so we
should be able to use this URL object to
print everything we need to
um I m going to go ahead and use some
string literals to do this so on the
first line Looks like we want to be type
printing
wrote a call and then we want this to be
dynamic right so we re going to use a
JavaScript

to interpolate URL object Dot
protocol in there so I ll just run that
yeah and we should get this this first
line right protocol colon and then
the protocol itself which is HTTP colon
well now we can just do this for the
rest of the sections

okay cool
username
password

worked
math name

and run that and see
if it looks reasonable
so
the URL that in actuality we re

and it s looking pretty good I think
we ve got all the sections there I m
gonna go ahead and submit that
let s go into just a little bit more
detail about these eight sections or
eight parts of a URL I m going to scroll
down so you can see this image just a
little bit better
um starting with the protocol the
protocol is required you cannot not have
a protocol the computer needs to know
um how to take your message and transmit
it in code right at the very beginning
of this course we talked about how HTTP
is kind of like a language that
computers use to speak to one another
over a network and so when we you know
go out to fetch a resource using a URL
we need to know what language right what
protocol to use to do that so not
optional usernames and passwords are
absolutely optional uh right if if a
resource doesn t need a username and
password it s simply considered public
uh and doesn t require
credentials to get access to
a domain is required
um which makes sense right there s no
way for us to reach out to another
server and get information unless we can
use that domain name resolve it into an
IP address and then make a request
across a network so I definitely need a
domain uh the default port for protocol
is used if we didn t provide one so
again HTTP its default Port is 80 https
its default Port is 443 every protocol
has default ports and so you ll only
need to specify a port if for some
reason you are deviating from the
defaults this is used a lot in kind of
local like web development when you re
building websites on your own machine
and you want to kind of access the test
version of the site in the browser you
might just use different ports so that
you can access many different test sites
on your own machine right without having
to get domain names for every single one
of them next the path
is no it s optional in that you don t
need to put it but one is always there
the default is just the root kind of
Slash
a query is absolutely optional and a
fragment is completely optional and then
again I just want to stress you don t
need to memorize every section of a URL
this is one of those things where it s
useful to be familiar with all of the
concepts from a high level and you ll
get more familiar with them over time as
you have more and more experience as
developer but it s also something that s
fairly easily googleable right when you
have questions about a specific
URL maybe you re a bit confused it s
something that s fairly easy to look up
so the question is the eight pieces of a
URL are always present and that is false
there are some that are optional the
next question is HTTP colon slash slash
fantasy Quest dot app is a valid URL
that looks valid to me because we ve we
have the protocol we have the domain
those are the only two sections that are
completely required
so I m going to say true next HTTP colon
slash slash username colon password is a
valid URL
um
problem here is that we are missing a
domain all right we ve got a username
and password with no domain so that s

I want to point out just a couple more
interesting things about the protocol
section of a URL or a URI
so first as we ve already talked about
HTTP is not the only scheme so HTTP FTP
mail to https these are all valid
schemes or protocols that can be used
and not all the schemes are kind of
post fixed or end in that slash slash
right so HTTP colon slash slash the
slash section is there because HTTP as a
protocol has an authority component it
has that username colon password section
of the URI
male 2 for example does not and so
that s why the protocol which is male 2
colon does not end in a slash slash with
that in mind let s move on to the
assignment so we re back to working on
fantasy quest in the fantasy quest game
menu we show users the email addresses
of their friends we want the email
addresses to be clickable hyperlinks so
I don t know if you ve ever come into
this or come across this online but you
may see email addresses in your browser
that you re able to click and it will
automatically open your email client and
that s because your computer understands
the mail to URI and knows that that
means to open an email client with a
draft email ready to go kind of to send
to the the email address address in that
URI
so we ve been tasked with completing the
get mail to link for email function it
should return a mail to hyperlink for
the given email okay so this seems like
it should be pretty straightforward
we re going to want to return
and I m going to use a JavaScript
template literal do mail to colon that s
the protocol right and then that just is
followed by the email address so mail to
colon

go ahead and run that see what it looks
like the mail to link for slayer at
fquest app is L2 colon slayer at
fquest app that looks pretty good I m
going to go ahead and submit that
let s talk about ports
so let s say I have my web server
over here

and let s say I m hosting a website so
I ve got some piece of software that s
hosting my website
right here like this
and I ve got some
customers that want to access my website
they ll be over here
and they re sending HTTP requests
to my server so they can get access to
my website
and that works just fine
the trouble is what if I want to
post multiple
pieces of software on the same physical
machine
right so let s say for example that in
addition to my website I also want to
host a database
maybe for my own purposes right and it s
not even public maybe it s just
something that I use personally but I
want to be able to access it say from my
home computer
so this is me I want to be able to get
access to the database the trouble is
now how can my machine my computer know
when a request comes in
to my IP address right to my computer
whether it whether the incoming request
should be handled by my web server or by
my database
that s where ports come in okay so ports
are virtual little hubs managed by the
operating system
allow us to segment incoming requests
and incoming data streams
so now
if I have one host for my database sorry
one port for my database and one port
for my web server then I can direct all
my web traffic at that port for my my
web server let s just say that s port
80
and I can access my database on Port say
5 or
two those are pretty common ports for
those use cases so with ports I can now
actually run many different instances of
different kinds of software and network
with them all at the same time
when I m developing on my own machine
maybe I m building a few different
websites I can actually run all of those
websites connected to different ports at
the same time you can t bind two pieces
of software to the same the same port
again for the reason we talked about at
the beginning right the operating system
wouldn t know which piece of software
should handle which incoming Network
request but we can run many pieces of
software all bound to different ports
and your operating system actually
allows for
over 65 000 different ports at the same
time so there s there s not too much of
a risk of of running out of ports
so there are a ton of different ports
that we can use when we are networking
and when we are navigating the web we
can optionally kind of type in the port
the URL or we cannot and if we don t a
default Port will be used so the
question is if a port is not present in
a URL the default is used based on the
blank the answers are domain username
protocol or domain name service and the
answer here is protocol the default for
the HTTP protocol is Port 80 and the
default for the https protocol is 443
the next question is that a true false
question and it says only ports 80 and
443 can be used for HTTP and https
traffic
that is false right those are the
defaults but other ports could still be

I installed caddy on Mac by just typing
Brew install caddy
um but if you re on a different
operating system head over to
caddyserver com
Google caddy and I m sure you ll find it
and you can find instructions for how to
install it on your own machine
once you have it installed you re going
to need to be on your command line in
the same directory that has all all
these files we just created so I m in
the test directory here on my command
line and I ll run caddy
file Dash server
Now by default the server is going to
binds to Port 80 which is the default
HTTP port and it s going to use
localhost which is just the domain of my
own computer right so I m connecting to
my own computer on Port 80 so when I go
to
localhost Port 80 in my browser which
again is the default so I don t really
need to type Port 80 I should get right
this rendered view of
index html so you might be wondering how
did Caddy know to serve
index html right Why didn t it serve
name txt well traditional file servers
will typically route the path of a
directory which in this case would just
be the root which is Slash
to a file called index html in that
directory just by convention for example
if I wanted to get name txt if I just
want to get that text file I could
actually just go directly to name txt
and I d get that file
Patty is taking the path slash name txt
and mapping it to slash name txt on my
file system
hopefully that makes sense similarly if
I wanted to see this blog page
I could go to slash log and again
because blog is a directory Hattie is
automatically redirecting right that
request from blog to blog index html
right if I were to type
index html I d get the same thing so at
this point you may be thinking well
that s great so a URL path is just the
same thing as a file system path once
you ve hooked up a web server it s not
exactly true by convention many static
file servers just use the a path to the
file on your disk as the path in the URL
but it doesn t have to work that way at
the end of the day the server software
in this case caddy can do whatever it
wants we could completely change how we
parse the path of a URL and what we want
to respond with many Frameworks
um what back end web Frameworks work
this way right if you write a server and
go or in Django there will often be a
lot of custom logic that determines how
different paths in a URL are handled
and what files and data will be
responded with when certain paths are
accessed so while it s common for a URL
path to map directly to a file on a file
system when we re talking about websites
when we re talking about web apis that s
rarely the case okay so in this
assignment what we re doing is getting
some data about locations in the fantasy
Quest video game and up until this point
we ve really only got I think like item
data and user data
so now we need to update our path to get
locations data instead essentially the
API is parsing the path and determining
based on the path what kind of
information we want about the game so
that our our front end code can then you
know maybe render uh the locations on a
map or something like that
cool so this code is making a get
request a fetch request right to this
URL and the problem is right now we re
reaching out to the user s endpoint the
user s path and we re supposed to use
the locations path
so really quickly let s just look take a
look at what this uh this code is
actually doing it looks like after
making the request
spots we re going to log the locations
and the log locations function is really
just iterating over those locations and
logging out a message where it s
expecting a name field and a recommended
level this would be the name of the
location and the level your character
should probably be if you re going to
complete quests in that location for
example
let s go ahead and run it right now
hitting the user s endpoint and see what
happens
it looks like we re getting undefined
for location name and
location recommended level which makes a
lot of sense because we re probably not
even getting location data back right
we re getting user data so let s go
ahead and hit the
locations I believe it was called
locations
endpoint instead
awesome and now we are getting
what looks to be
correct data I m going to go ahead and
submit that
let s talk about query parameters so
while the path of an HTTP request
typically changes something big like the
web page that you re looking at or the
entire resource that you re requesting
from the server right user data versus
location data query parameter typically
changes something very small about the
request maybe some metadata maybe a
filtering option something like that at
the end of the day the server can do
whatever it wants with the path or the
query parameters but kind of by
convention the query parameters tends to
be smaller changes uh to the request
maybe something like the options are
changing right so for example we could
look at how Google uses query parameters
so if you go to google com in fact let s
just go ahead and do that in the browser
we go to google com we are on the search
page
right

we ll get a page
with
many different uh search results right
for the hello world query
and if we look in the URL up here at the
top we can actually see
that that first query parameter is Q
equals hello Plus World so Google is
actually taking our search and using it
in the URL of this results page as the
query parameter
right so we could actually navigate
directly to the hello world query by
copying just just that section of the
URL right with the Q equals hello Plus
World and we d go directly to those
search results so again we re kind of on
the same page we re still on the Google
home page where we can search for things
but they re using the query parameter to
specify
what term is being searched for so let s
break down this URL that we were just
just on right https it s the protocol
www google com the domain
slash search that s the path right and
Google s kind of using slash search
um as the results page and then using
the query parameter which is this
question mark Q equals hello Plus World
to specify which term is being searched
for if you think about it this makes a
lot of sense there s an infinite number
of things we could search for on Google
so using a path might not make a ton of
sense right we don t really have a
separate or new page for every possible
search query right so they have one page
the search page and they just change the
query parameter based on the term that s
being searched for
so uh this syntax the question mark
separates the rest of the URL the rest
of the URL from
the query parameters and then we have
key value pairs so in this case the key
is Q the value is Hello World there
could be there could be more e value
pairs after the Q equals hello world and
they would be separated by ampersands so
an ampersand is the if you look at your
keyboard it s the shift shift version of
seven right hold shift press 70 and
ampersand
so we could do Q equals hello Plus World
Ampersand maybe filter equals seven or
something right we could just do key
value pairs in the rest of the URL
we ll get to that more in detail later
so the question is query parameters are
required in a URL that is false
okay so this next question is in a
website query parameters rarely change
blank answers are which page is served
marketing and analytics information or
the contents of the page so we talked
about how query parameters typically
don t change something big like the
resource that s being requested or the
web page itself they typically change
something smaller like options or
contents right so for the example of
Google uh the page didn t change we were
still on the results page when we
changed the query parameter
but uh the search term that we were
looking for results for did change when
the query parameter changed so it s
definitely not contents of the page
right
um additionally marketing and analytics
information I think we can rule that out
uh query parameters are very often used
to do like affiliate link tracking
commission tracking uh that sort of
thing which page is served though that
rarely changes when the query parameters
changes usually the page is dependent
upon the path component so I m going to

let s talk about synchronous and
asynchronous code to start Let s uh jump
right into synchronous code so these
three console log statements are a great
example of synchronous code right
synchronous code is simple it s what we
usually work with and we do it for good
reason it s it s simple and predictable
right if I were to run this code here
I d be printing first I print first next
I would log I print second and next I
would log iprint third right we call
this synchronous code because it s just
happening in the order
um that each kind of line of code is
called there s there s no fuzzy timings
or anything happening it s very
predictable very straightforward the
other kind of processing we could do is
asynchronous processing asynchronous
processing is a little bit more complex
which is why we only use it when we need
to but in a nutshell asynchronous
processing allows us to do multiple
things at the same time so for example
if we need to render something in the
browser but at the same time we want to
go fetch some data from a remote server
by an HTTP call we can do that
asynchronously so that the browser can
do its work while we re also waiting on
a server to send us back some
information
head over to the JavaScript playground
to see what that looks like okay let s
write some simple code we re going to
use the same example from before in fact
I m going to go ahead and copy paste the
example we had before
right so if we run this we just see I
print first second and I print third
again this is very simple and kind of
what we would expect
now let s do something a little more
interesting we re going to use the set
timeout function this is a built in
JavaScript
What It Takes as the first parameter is
a callback which is just a function so
it takes a function as input
and then the second input is how long it
should wait to execute that function
and it takes it in milliseconds so in
fact let s go ahead and Define that
let s say our wait time constant weight
I m milliseconds let s just wait 100

okay
so we re going to wait 100 milliseconds
to call the Callback function now we
need to Define what the Callback
function actually is so let s go ahead
and do that
you ll do uh advanced
all back
a little Anonymous here
sorry fat Arrow function and inside that
function we ll just log
iprint sec
Okay so
what do we expect to happen here right
well first we expect to log iprint first
then
we expect to wait 100 milliseconds and
log I print second
and then log I print third right
something like that see if that works in
fact I m going to move this up
and this is just a function definition

okay interestingly enough we didn t even
get the iprint second message at all
it didn t even print
the reason for that is this this last
function call the the console log
statement that prints iprint third
when that exits our whole program exits
so there was no time to wait 100
milliseconds
to call iprint second
so let s go ahead and
wait
let s make sure our program doesn t exit
too quickly so this function here
uh I ve just named it sleep
and
we won t get into the details of this
right now we ll get into promises very
shortly but in a nutshell this is going
to allow me to
do this await call here where I can
await sleep and I can
I can sleep for that amount of time plus
a few extra milliseconds so now in
theory this line here will stop our
program from exiting for 105
milliseconds okay so now we can see
what s really happening
Okay cool so it printed first third and
then second right again because this one
was waiting so let s update the logs
let s just say this one prints second
and this one will say I print

that many wait time milliseconds middle
of this
okay now this should be more accurate
cool so we got iprint first I print
second and I print after 100
milliseconds again because we re waiting
right we re telling the JavaScript
runtime hey I m going to do some other
stuff for a minute
in 100 milliseconds can you please
execute this other code
so we re doing that asynchronously we
are simultaneously printing I print
second and telling the JavaScript engine
hey cue up this other operation right
that will happen in the future
let s see what happens if I just
increase this to a full second right one
thousand milliseconds is a full second
we should be able to see
it pop up there okay
hopefully that helps you understand just
a little bit about how
how set timeout works right and how
asynchronous programming works from a
high level so to tie that back into this
diagram the first example that we used
right the I print first second I print
third that s an example of synchronous
programming
if you if you look here in the diagram
you ll see that although we have maybe
two processes only one thing is
happening at a time right only one
console log statement is being printed
at a time they re being printed in an
order it s very simple asynchronous
programming on the other hand is where
we can have one process doing some work
and the other process is doing work at
the same time so how does this tie into
our fantasy Quest server well we have
our code running in the browser in
JavaScript right that s process a
and we have some
some execution logic some program right
running on the server that s process B
and with asynchronous programming we can
ensure that both processes are running
at the same time and we re able to kind
of sync them up as we need to so as far
as the assignment goes for this exercise
what we re told is to help us visualize
how asynchronous code executes let s
practice with an example from the game
keep in mind that we probably wouldn t
use set timeout in this way but I think
it s important for us to practice this
anyways even though it s not really a
realistic example we ll get to more
realistic examples in a minute just so
that we can really get a feel for how
the set timeout function works
so the assignment says
update the waiting durations so that the
text is printed in the following order
so again if you remember set timeout is
a function that takes a function as
input
and weights a certain number of
milliseconds before starting that
function right so set timeout is kind of
called and asynchronously it will go
spawn that function in the future after
some number of milliseconds Okay cool so
we want to print in the following order
first firing up the forge then smelting
iron bars then combining materials then
shaping iron and then iron long sword
complete
and it looks like up here we have some
waiting durations
we are not supposed to change anything
below this line so all we can do is
change these durations so firing up the
forge that should happen first right
because it s the only thing not being
kind of deferred for later
so the next thing we want to print is
smelting iron bars so let s go ahead and
set that to well it looks like down here
we re waiting for 2 5
seconds total so we need to keep this
all within two seconds right let s wait
500 milliseconds for the uh what is it
smelting iron bar so smelting iron bars
weights let s wait 500 milliseconds on
that
and then combining materials so let s

next we ve got shaping iron
so we can wait 1 5 seconds or 1500
milliseconds
and then we ve got iron long sword
complete
so we can do a full two seconds on that
one
cool so just by changing the amount of
time we re waiting for each log
statement we should get them in the

gonna check to make sure we did it right

so as we mentioned before async code we
really should only use it if we need it
but sometimes we really do need it
essentially every time we make an HTTP
request over the network we need to do
that asynchronously because if we didn t
the device that we were making the
request from would need to just freeze
up and wait for that request to come
back right so we have to asynchronously
wait for the request to come back I mean
think about it the server that you re
communicating with is probably in
another state or another country right
so it may take you know whatever the
Ping of your internet connection to that
data center is it s going to take that
amount of time which again can be you
know 200 milliseconds it can be a full
second we can t really be sure so we
need asynchronous code so that we can
keep doing things in the meantime
right okay uh so the question for this
quiz is sync is better than async and oh
that s a tricky one I m gonna go with
false
because

async is better than sync I m just going
to say false again right it depends on
the situation we prefer synchronous code
when possible but sometimes you just
can t get away from it
another quiz async code should blank
answers are always be used only be used
for performance reasons never be used
only be used on Fast computers
generally speaking it should only be
used for performance reasons right if we
need to use asynchronous code to speed
up a process uh that s a great reason to
use asynchronous code
great now we can finally talk about
promises so set timeout is a built in
function to JavaScript that does some
asynchronous stuff behind the scenes but
promises are kind of the most modern way
to write asynchronous code in JavaScript
and the best way to think about a
promise in JavaScript is like a promise
in the real world for example if I were
to promise to you that I m going to
explain how promises work right there s
only two potential outcomes for that
promise either I keep my promise and I
teach you or I don t keep my promise
right those those are the two options
and just just like those two options in
the real world with JavaScript a promise
can either be accepted or rejected so in
JavaScript there s actually an object
called The Promise object I can head
over to the docs on mdn again this is
built into the JavaScript language
and a promise object basically just has
three states right we talked about
fulfilled which means the promise was
essentially kept rejected meaning the
promise was not kept or the operation
failed
or pending right we re still waiting on
the outcome of the promise or on the

so here s the Syntax for how we can
declare a new promise or create a new
promise in JavaScript use the new
keyword to create a new instance of the
promise and then we use the promise
Constructor it takes as input right as
its parameter a function
this function here the function has its
first parameter a resolve function and
the second parameter of reject function
and then basically in the body of the
promise we re going to call resolve
when we re
when we ve successfully finished the
operation we care about or we ll call
reject if for some reason something went
wrong with the operation so in this
example here we ve got a promise
when it starts it will wait 1000
milliseconds
and then randomly it looks like there is
a 50 chance here that the promise will
resolve with the string resolved or
reject with the string rejected
okay so really all this promise says is
in one second from now
I have a 50 chance of resolving a 50
chance of rejecting
all we re really seeing here
okay using the promise so that s how we
declared the promise now we want to
actually use it now that we ve created a
promise how do we use it the promise
object has two callback functions that
you can attach to it
um one is the dot then the other is the
dot catch okay so dot then
the function that is passed into dot
then
runs After the Promise is successfully
completed right once the promise is
fulfilled
so it would run
if this line executes right if this
resolve line execute
the dot catch
function will run if the promise Rejects
right
so in this case
and then here in this example we re
basically just saying okay so wait for
the promise to finish right so again in
the case of our example weight the 1000
milliseconds and then if it was
successful print the promise finally
blank and it s going to use that string
it s going to use that parameter that
was passed into the resolve function so
it would print the promise finally
resolved or in the case of something
going wrong it would print
the promise finally
rejected
right
cool see that down here
okay hopefully that all made sense but
if it didn t that s okay this was just
an explanation it will all make more
sense once we write some code
so the assignment says complete the
apply damage function so that s this
function here that takes two parameters
so it takes damage and current HP or
current hit points as inputs
and it says it should return a promise
after one second because in fantasy
Quest dealing damage with an attack
takes some time
okay if the damage inflicted would
reduce the player s HP to zero or less
the promise will reject with this string
otherwise the promise will resolve with
this string
Okay cool so
we are creating a new promise that part
looks good
we ve got our resolve and reject
callbacks here
we have set timeout called
one second so that looks correct right
we re going to wait 1 000 milliseconds
before doing whatever is in the body of
this set timeout
so we need to do some calculations if
the damage inflicted would reduce the
player s HP to zero or less so if
damage
is greater than
current HP oh zero or less so greater
than or equal to
okay

the promise will reject with the string
that okay so effect

cool reject the player suffers
damage points of damage as
Fallen unconscious okay that looks good
to me
otherwise
we re going to resolve the promise

the player suffers blank points of
damage
and has some out of hit point painting
okay so we actually need to calculate
new HP
new HP const new hpe
equals going to be the current HP minus
the damage right
in fact now we can simplify this and we
can just say if new HP
is less than or equal to zero
okay then over here we can say
new HP that looks good damage points of
damage has to do okay cool

see what happened so applying 27 damage
to a player with 50 HP
apply damage resolved with the player
suffers 27 points damage and has 23 hit
points remaining that math looks good to
me and again you can see how it s it s
going over time right it s it s using
that full second to apply the damage
again this makes sense in the context of
a video game right sometimes when a
character attacks there s like a second
long animation right maybe a fireball
has to fly across this the screen or a
sword has to actually be swung there s
an element of time to these programs
that s where asynchronous or at least
time based programming can be really
useful

so let s talk a little bit more about
why promises are useful in the real
world so promises are the cleanest but
not necessarily the only way to write
asynchronous code in JavaScript
um in fact the fetch function so you if
you re if you remember some of the code
Snippets that I said we d get to later
earlier in the course that effect
function actually returns a promise
and that s how we re able to do all that
asynchronous kind of HTTP programming uh
that we ve been doing earlier and that
we ll do more of
um in a couple chapters from now
so when do we use promises and when do
we use asynchronous code well the most
common time especially in front end
development is whenever we re doing i o
or input output so that s basically
whenever we re making a network request
right whenever we want to interact with
a remote server
another machine we ll be doing
asynchronous programming sometimes IO
isn t even just over a network sometimes
we need to go to the hard disk of a
computer right to the file system and
read a file
very often especially in JavaScript that
is done asynchronously again so the rest
of the program doesn t have to sit
around and wait uh for your for your
program to physically go grab that data
from the hard drive of the machine
so uh yeah common examples of i o
include HTTP requests reading files from
hard drives or interacting with
Bluetooth devices right it s almost like
it s not a Perfect Analogy but when
you re interacting with like the real
physical world and not just within the
software of your own program it s likely
you ll need to do something
asynchronously to keep everything
running smoothly
so the question is promises are the only
way to write async JavaScript and then
the answers are true and false
um promises are not the only way to
write async JavaScript there are
ways
remember promises are just the most
popular way
or the cleanest way I found that it
could be really useful as a developer to
have kind of a ballpark idea of how long
certain kinds of i o operations will
take and as you can imagine that s
really useful when you re working with
HTTP requests for example so let s start
with the most uh basic type of kind of i
o operation in fact it s so basic that
we often don t even think about it as IO
and it s getting data out of RAM
so in your code whenever you create a
variable there s a good chance that the
data inside that variable right
something as simple as name equals Lane
right the string Lane
that string will very likely be stored
in Ram in your computer
and whenever you want to access that
variable your computer your CPU actually
has to go right fetch that data from
your RAM and that usually happens
on the order of nanoseconds it s a very
very fast in fact it s practically
imperceptible uh to humans right it s so
fast and so for all intents and purposes
we can just do it synchronously we can
synchronously you know update variables
uh create variables delete variables all
that kind of stuff without worrying
about doing any of these Opera
operations asynchronously
cool so that s really really fast
next we have disk
so this would be like going to the file
system right and reading in say a text
file maybe doing some analysis on it
right uh for example programs that have
to read in configuration data might have
to fetch some data from disk
fetching data from disk takes on the
order of like one millisecond
one thousandth of a second in fact it s
often much faster than this especially
if you re using a solid state drive
um but it s slow enough that in some
cases it can be problematic to do it
synchronously especially if you re doing
a lot of reading from disk or you re
reading large amounts of data from disk
it can be useful to do it asynchronously
so the rest of your program can continue
kind of functioning as normal
for example imagine you re using vs code
your text editor and you need to load a
very large file from disk well it would
really suck if your entire vs code
completely froze until the file was
loaded right so very often these sorts
of things are done asynchronously so I m
just going to put

not great
cool
and then kind of the last category that
I think is important to have top of mind
is the network
so this would be things like HTTP
requests and obviously it s going to be
much slower if you re making the HTTP
request you know to a computer in
another building even slower if it s a
computer in another state even slower if
it s a computer across the world right
so it s going to change a little bit but
generally speaking if you re working on
the internet
um with a fairly robust back end server
that s maybe in a data center somewhere
near you we re talking about something
like 100 milliseconds
to maybe 2 000 milliseconds which is two
seconds right
and because this is quite slow it s
definitely noticeable by humans right we
typically work over the network
asynchronously
because it s really inefficient to have
our programs pausing for seconds at a
time just waiting for bits to be sent
halfway across the world and to come
back
hopefully this gives you a decent
breakdown an idea how some of these i o
timings will fit into your applications
next question is which would be
considered i o or input output
the JavaScript programming language and
HTTP request a really slow algorithm or
a function that adds two numbers
together well the JavaScript programming
language doesn t even make sense so I m
going to ignore that
um a slow algorithm
not necessarily right like most
algorithms will just run
again in your program right on your CPU
you don t necessarily need to fetch data
in order to make that happen same with a
function that adds two numbers together
that sounds like a pure function that
doesn t need
um to request any data from the outside
world so it s going to be an HTTP

so we ve already interacted with
promises in their most raw form but as
we ve used the dot then and the dot
catch methods to provide callbacks that
are executed once the promise either
resolves or rejects well the await
keyword is actually a kind of a newer
Syntax for interacting with promises uh
that just it looks a little different
and I would argue that in most cases you
should prefer the await keyword over the
dot then syntax just because it s easier
to work with and a little easier to read
so let s take a look at the difference
so here we have a promise right that
um you know at some point in the future
is either going to resolve or reject
with the dot then syntax we are passing
in that callback function which takes as
input the results of the promise
in this case is just a message
with a weight
instead of a callback function we just
use the await keyword and provide it the
promise and then what happens is this
expression does not evaluate until the
promise
resolves so our code is actually going
to block at this point it s going to sit
and wait until the promise resolves at
which point it would you know save the
value the return value right the
resolved value of the promise into that
message variable and we could go ahead
and log it to the screen this doesn t
mean that the entire JavaScript engine
or JavaScript program is going to stop
and wait it just means that this
specific part of your code right this
specific function is going to wait so
this allows us to write asynchronous
code
so that it looks like it s synchronous
which again just makes it so much easier
to work with
so let s jump into the assignment
it says similar to before the apply
damage function takes a damage value and
the player s current HP as inputs and
returns a promise on line one call apply
damage with inputs damage is 25 current
HP is 50 then await the returned
promise and save the resolved value in a
variable called message so it could be
logged to the console okay so that was
that was long let s let s uh take a look
at the code so here we have the apply
damage function it s responsible for
creating the promise so this is really
very similar to that function we wrote
in the last assignment but now we are
going to be interacting with the promise
so what we need to do is call apply
damage
we need to provide
damage as 25
current HP is 50 right I m just getting
this from the assignment description
over here
now because A promise is returned right
return to promise we need to await the
results so we need to await that promise
so this will evaluate to a promise right
just like up here
and then we need to await that promise
and it says the return problems save the
resolved value in a variable called
message okay so const message
cool and then down here that message
should be logged to the console let s

there are 50 hit points suffers 25
points of damage and has 25 hit points
remaining I m just going to test it
really quick what happens if we bump

70 hit points 25 45 that looks great to
me so I m going to change that back to
what the assignment asked for and submit

so if the await keyword replaces the dot
then syntax the async keyword
effectively replaces the new promise
syntax it s a way to create a promise
basically and the way it works is if you
specify that a function is asynchronous
it will automatically return a new
promise and the resolved value will just
be whatever value was returned from the
promise so let s take a look at that in
code
so here we have the traditional way of
doing it with the new promise syntax we
create a function and then we return a
new promise and that you know resolves
some value at some point
well with async all we have to do is put
that async keyword in front of the
function keyword and now this function
get promise for user data will
automatically return a new promise and
the value that that promise resolves to
is just whatever is returned
from the function
Additionally the await keyword can be
used within asynchronous functions in
fact it can only be used within
asynchronous functions so async and
await allow us to do you know tons of
different asynchronous operations
while writing very clean code that
frankly looks synchronous or at least
allows us to think about the code in a
more synchronous way
so let s get down to the assignment it
says as it turns out the await keyword
can only be used within async functions
like we just mentioned it says go ahead
and try to run the code you ll get an
error let me expand this a little bit so
we can see
we ll run the code and we get a syntax
error that says a weight is only valid
in async functions and the top level
bodies of modules so if we look at the
code itself it looks like a way it s
being called here that should be okay
because the top level body of the module
and then a weight is also called here
which is inside a function that is not
asynchronous and that is the problem so
what s going on this function is
supposed to be fetching some data over
the network right making an HTTP call
and then it looks like it s parsing that
response data as a JavaScript object and
both of these operations are
asynchronous
but the function itself is not that s
why we re getting this error so let s go
ahead and Mark that as an async function
which just means it s going to wrap the
entire function in a promise and when
the promise resolves it will resolve
with that response data
cool so that looks like it worked we got
all the item data coming back go ahead
and submit that
so we ve used this word callback
function a few times and all we mean by
that is a function that we hand to
another function to be executed at a
certain point in time right so it might
be for example a function that is called
when a button is clicked it could be a
callback function or if we look here in
the example of set timeout the Callback
function is the function that we give to
set timeout to be executed later
so the promise API in its original form
was more callback based right we have
this dot then syntax or dot catch syntax
that took a function as input to be
executed once the promise successfully
completed
async and await these newer keywords
kind of do away with that callback
syntax and in my opinion and the opinion
of many others it s just much easier to
read this way let s take a look at this
example
so here we have some code using dot then
and here we have some code using await
so here the dot then functions have been
chained one after the other right first
we re going to fetch the user once that
happens we ll fetch the user s location
so that happens we ll fetch the server
right and then we re able to finally log
that data so three nested dot then
callbacks right and then down here we re
using the await keyword this looks a lot
more like kind of traditional
synchronous programming that we re used
to right first we ll fetch the user and
we ll wait for that operation to
complete now we have a user object
then we fetch that user s location wait
for it then fetch the server for the
location wait for it and we re finally
able to log result
again both of these approaches are valid
and there are certainly cases in which
it might make sense to use dot then over
await but generally speaking I I prefer
to use the async and the await syntax so
the question is blank is generally
cleaner syntax basic weight do promise
or it doesn t matter use what you feel
like I would say generally speaking
async and weight is cleaner
now we need to talk about error handling
in JavaScript so this is really really
important when it comes to working with
HTTP or networks in general a lot of
things can go wrong on networks for
example if you re running some
JavaScript code on your computer and all
of a sudden you lose internet connection
there s not necessarily anything wrong
with your code right there s no bug but
there s no way you re going to be able
to fetch data from a remote server you
don t have an internet connection so
error handling allows us to detect that
something s wrong and handle it
gracefully
so let s take a look at this example
here we have a car object and we expect
a speed property to be defined on that
car object but when we run this code if
the car object has not yet been defined
we ll get this reference error right
reference error car is not defined now
for the sake of this example let s
imagine that we don t have control over
this car object maybe it s coming to us
from an external Library well what we
can do is we can wrap it in a try block
now anything within the try block
if it if it produces an error we can
catch that error and handle it
gracefully
in other words as code within the try
block is executing if at any point an
error is thrown
the try block will stop and we ll jump
down to that catch block where we can
handle the error so moving down to the
assignment so we can see this in action
says the code is failing to execute it
is throwing an error that isn t being
handled gracefully as a result the
entire program is crashing
properly handle the error in The Code by
wrapping all of the function calls
within a try catch block the catch block
should log any errors to the console
okay so if I run it in its current state
we re getting an error that says
parameter is not a number so it looks
like we have a print character stats
function that takes a number as input
and if the number
that s passed in or rather I should say
if the data passed in is not a number
which is what this function here does it
says is not a number
then this then this error is thrown
right parameter is not a number
otherwise we ll log to the console your
character is whatever level
so this call right number two
this isn t a number this is a string but
according to the assignment
we re essentially writing a test Suite
here so we want to make sure that our
function is properly catching
not a number values and throwing an
error so rather than just erroring out
we should be handling it
go ahead and write a try block

Edge block with an error
so this error value this is going to be
whatever was thrown so in this case it s
possible that a string is thrown so
we re expecting this to be a string and
our assignment just says the catch block
should log any errors the console so we

okay
so remember the try block will just keep
executing code you know one line after
the other just like normal until
something bad happens when something bad
happens it will jump right down to the
catch block so I would expect because we
were told to wrap all of the function
calls within a single try catch block
that we actually don t want this line to
execute at all right in this test Suite
we re making sure that this bad call to
print character stats properly
essentially stops execution right let s
go and run that
so your character is level four and then
parameter is not a number that looks

let s talk about the difference between

uggs and errors

so
bugs and errors are not the same when I
first started writing code I was kind of
fuzzy on this whole idea and to be
honest I think for a long time I assumed
they were just kind of the same thing
in reality
bugs
are bad
as you probably know the interesting
thing is that errors are not always bad
not always
bad
okay
as we ve defined them bugs are kind of
unexpected things that are happening in
our code so we want our code to do
something right hopefully something
useful and if it s not doing that thing
then we say we have a bug in our code so
bugs are things that are fun
unexpected to give an example let s say
that we had a function that we had a
function in our code that adds two
numbers something like add and it takes
X and Y as inputs and it produces some
result we ll just call it Z
if we called add with two and three
and we got the result of seven
we would say we have a bug
right we expected the add function when
given 2 and 3 to produce a five but we
are getting a 7 instead that s a bug
it s something that s unexpected in our
code
an error on the other hand is very often
expected
expected
and our job as programmers is to handle
that error gracefully
so the way we approach fixing bugs and
errors is quite different right when we
have a bug really the only thing we can
do is go fix the code right we actually
have to go fix our application now to be
fair there are certain circumstances
where fixing a bug might be too
expensive or maybe the bug is there but
it s actually not affecting many of the
users so we can kind of ignore it for
now that s that s more of a business and
cost decision right in a perfect world
with unlimited resources of course we
would always fix all bugs
um but the point that I m trying to get
across is when there s a bug really all
you can do is fix the code
errors on the other hand
um sometimes they re unavoidable you
can t actually fix the code to remove
errors so for example example an error
that you might get in your code is there

no internet connection
so if you re writing a web app that
needs to communicate over the internet
to get its job done and the user s
computer has been disconnected from the
internet there s really nothing in your
code that you can do to fix that right
you can t magically bring back an
internet connection so all you can
really do is handle that error
gracefully right maybe by showing a
message to the user another common error
might be something like the remote
the remote server
server is down
so you re writing some code on one
machine that again maybe reaches out
over a network uh to a server or a
database and while you have internet
connection maybe that server is offline
so that s another common uh type of
error that crops up that again nothing s
wrong with your code but it s something
that you need to be able to handle and
maybe display to the user something like
that
um another common error would be user
input
bad user input
so maybe you re writing an application
that requires users to have passwords
over 12 characters right when a user
puts in a 10 character password we might
consider that an error
again it doesn t mean there s anything
wrong with our code but we need to
handle that error and maybe display some
message to the user
one final note on the distinction
between bugs and errors is that bugs
have to be fixed in code
errors have to be handled in code right
so we expect errors we must handle them
if we don t handle our errors properly
they may result in bugs so like we just
talked about bugs and errors are not the
same right debugging is the process by
which we remove bugs from the code right
and then error handling is how we handle
errors in our code there are two very
different and distinct things
try catch blocks are not a debugging
tool they re not ways to find bugs in
our code right they re a way to handle
errors at runtime things like the
internet connection being down
the whole takeaway from this is do not
try to use try catch for debugging and
do not try to use a debugger to
introduce error handling in your
application understand those are two
very different things
okay so the question that goes along
with this is the presence of which of
the following indicates that the
developer has something to fix bugs
errors
well
errors are always going to be present
unless you have the most simple app
right that doesn t do anything with a
network or anything with user input
there will always be some sort of error
handling so I m going to go with bugs
next question is you should use error
handling techniques to fix bugs no you
should use a debugger or debugging
techniques right log statements print
statements things like that to find bugs
and remove them from your code error
handling is to handle errors at runtime
so that s going to be false
this next question is a debugger is
required to debug a program and the
answers are false and true
this is something I want to talk about
for just a second so
debuggers are optional debuggers are
tools that we can use to help us debug
our code some people like them some
people don t some people use them for
certain things or not for other things
um if you ve ever used a debugger you ll
know what I m talking about but
basically a debugger is something that
allows you to kind of Step through your
code
um one line at a time so instead of
running your entire program at once you
run it in debug mode which allows you to
kind of Step through the program just
one line of execution at a time so you
can see like what s going wrong where a
more primitive form of debugging is to
just add you know console log statements
or print statements so you can see what
data is present in your application at
which points
um how you debug is up to you some
people like debuggers some people don t
to be honest I think it depends a lot on
the kind of code you re working on as to
whether you should use a debugger or not
um but at the end of the day they are
not they re not required so I m going to
go with false on this one
so now that we ve talked a little bit
about error handling we can talk about
how async and a weight that other Syntax
for working with promises makes error
handling a little nicer
so let s take a look at how it works in
the non async await world and just kind
of the raw promise usage world
the way it works is if everything goes
well with a promise then the dot then
Handler resolves the promise right we
get some value in this case a user
object that we can then you know do
something with
if something goes wrong in the promise
so again let s just assume an HTTP call
something goes wrong internet
connection s down server s down then
instead of the dot then Handler firing
the dot catch Handler fires instead okay
and this is the Syntax for that with
async await we can use kind of normal
JavaScript error handling we can use try
catch blocks so the one of the great
things about using async awake is we get
kind of this just more traditional
JavaScript feel right look and feel or
style to our app so the way this works
is when we are awaiting a promise
if that promise rejects right in other
words if something goes wrong in that
promise
then
the error is thrown so we can just catch
it in a catch block
okay so again rejecting promises results
in essentially thrown errors and if we
throw within an async function
that s essentially the same thing as
rejecting the promise so again it kind
of just re maps everything into normal
JavaScript which is why I really really
like the syntax so let s see what that
looks like in action the assignment says
we are trying to fetch the worldwide
leaderboard from the fantasy Quest
server so we re writing the game code
right we re interacting with the fantasy
Quest server unfortunately we re getting
an error the good news is there s
actually nothing wrong with our code the
reason we re getting an error is because
the server is down
so as good software Engineers instead of
just allowing the error to kind of
Bubble Up and explode right which in
essence terminates the program right
unhandled JavaScript errors can just
kill execution
um we need to actually just handle that
error and display a message to our users
uh through the console
so our
task is to wrap this within a try catch
block so we ll do try and again the
reason we can do this is because this
asynchronous function is awaited so any
errors thrown Within
and be caught

the assignment says wrap the network
call within a try catch block within the
catch block log the text okay

our servers are down but we will be up
and running soon
cool
in this case we don t even need the
specific error we re just going to kind
of give our users a canned response
um
on that note this console log in case
this wasn t clear before will not happen
if something goes wrong here right if
something goes wrong on line two we re
going to jump immediately down into the
catch block so we will only log the
leaderboard data
if the server properly responds with the
leader
go ahead and run that
great and this looks good because uh
this is the supposedly the URL of a
server and it is supposedly down so
everything seems to be working as
intended submit it
it s time to work with some HTTP headers
so headers allow clients and servers to
pass additional information about an
HTTP request so up to this point all
we ve really cared about is the actual
body of an HTTP request and the body of
the HTTP request is typically used
to transport the
information itself I I m sorry I don t
know a better way to say it
um we ll get into some examples that ll
really help but metadata which is what
headers are typically used for is like
data about the data
so for example let s say that the body
of an HTTP request maybe contains item
data in a video game right things like
iron sword bronze sword wooden Arrow
whatever the headers might contain
things about that data for example the
type of client the person sending the
request to the server is on so for
example maybe Google Chrome right or the
operating system or the user s preferred
language this is kind of data about the
data right it s not it s not the
information we really care about which
would be included in the body
it s additional information that the
server can use to figure certain things
out again things like location are very
often uh transmitted in headers maybe
you have a website that changes the
currency for the pricing page based on
the location of the user headers would
often be used to communicate that
location let s jump into the assignment
to really see kind of what the heck s
going on so the assignment says complete
the log content type function it takes
response object as input and should log
out the content type header to the
console okay so we re taking a responses
input we re supposed to log something to
the console so a response object right
this is just what comes back from a
fetch call so it is the entire HTTP
response object right as exposed to us
kind of through the fetch API
cool so
um how do we get headers well let s take
a look uh here it says we can access the
headers object through the request dot
headers and response headers property so
in this case we don t care about the
request that s already sent for us down
here we care about the response we re
logging the content type of the response
so
response dot lowercase headers that this
object holds all of the headers right
and then it s telling us we should use
this dot get method so this is
a method again exposed to us through the
headers API which means it s a built in
function right to the browser
um
and this method
method of the headers interface which
turns a byte string of all the values of
a header within a header s object with a
given name the requested header doesn t
exist we ll get null Okay cool so let s
test that let s just do
T get
garbage
editor okay so I don t expect that to
return anything interesting let s just
uh
all this uh
header Val
and let s go ahead and log it out to the

so in theory we ll get a null right
because I don t expect that this this
key in the headers object actually has
an Associated value
okay great so that was null
so if we want to get the content type of
the response now content type oh
content type
is actually a really common header in
HTTP requests and its whole purpose is
to tell kind of the computer on the
other end
what type of data is being sent in the
body we can send Json data right which
is basically a string that looks like a
JavaScript object we can send HTML data
right to be rendered in a browser we can
send CSS we could send plain text all
sorts of kinds of data we could send or
formats of data we can send the content
type header is designed to kind of
communicate that
here s some data and here s the type of
data it is right so if we log the
content type I would expect probably
that this is Json data
yeah so we get the application slash
Json header again very very common
header value when you re just working
with data so I m going to go ahead and

let s talk about browser Dev tools so
I m here in Google Chrome but this will
work in pretty much any popular browser
it just might be a little different
if I right click anywhere on the page
and click inspect my Dev tools will pop
up and I m going to head over to the
network tab that s what s most
interesting to us the network tab
records all network activity that s
being done by the browser here we don t
have any network activity but if I
reload the page
then we should see all these requests
fire off right these are all the
requests that are required basically to
run the boot Dev software
so there s tons of stuff in here we ve
got JavaScript that we re loading we ve
got let s see fetch requests this is
actually the JavaScript that s running
on the boot Dev website in the browser
that s making additional HTTP requests
from the browser back to kind of the
boot Dev server
um so we got some of those we ve got
let s see got an HTML document here and
if we actually click on that request we
can see the response headers and sure
enough the content type header is text
HTML so now that we ve taken a peek
that s what we were that s what we were
supposed to do
I just kind of skipped reading and and
showed you but the question is you can
use the developer tools to view
responses to your clients requests and
that is definitely true
so the next question is about how long
do most of the network requests take
keep in mind this is the time it takes
your browser to reach boot Dev servers
over the Internet okay so we re going to


and if we look at these fetch requests
we can see how long they took in
milliseconds right over here on the
right and it looks like most of them are
taking
uh you know somewhere between
50 and 500 milliseconds it just depends
right some of them are much faster right
50 milliseconds here uh some of them are
taking a little bit longer I think we
had one that uh even maybe took a full
second
there it is one one whole second there
on that one
um but I would say kind of on average
around 100 milliseconds so let s see
what the answers are
5 000 milliseconds that s much longer
than uh than they were taking 100
seconds is way longer none of them were
as fast as two milliseconds so I m gonna
go with about 100 milliseconds
so we ve talked about how headers are
often metadata or data about the data
another very common use case for headers
is authentication right so take the boot
Dev website as an example on boot Dev
yes we you know we write code we submit
assignments but we also keep track of
our our progress right so we have
achievements we ve got gems that we
unlock levels and experience a lot of
that information
is private right you can t necessarily
as a different boot Dev user see how
many gems that I have that information
is kind of private to me
so whenever I make a request to the boot
Dev server
essentially asking how many gems do I
have I need to be able to prove to the
server that I am who I say I am and
that s often done in headers in fact on
the boot Dev website it is done with
headers headers are a convenient
mechanism for this because we don t need
to kind of Muddy up the actual request
body itself with authentication
information right the the request itself
can just be about gems how many gems do
I have I get kind of a number back right
all of the authentication information
that additional metadata can exist
strictly within the headers so let s
jump into the assignment to kind of see
an example of this so because we don t
want any of our users to accidentally
overwrite another user s saved data our
backend team has required that we use
the X API key header which means that X
API key is the key in the header right
and then we would set a value for all
requests to the fantasy Quest servers by
using different values we are telling
the server that we are a different
person okay so there s some headers
being sent to the fantasy Quest server
and what we re reading here is basically
if we change the value in that X API key
header we re telling the server we are
now a different person if we use the
same API key header then the server is
going to treat us as the same person
so some code has been written for us
let s take a look
at what it s doing so here at the top it
looks like a new API key is being
generated so that s what we re going to
include in the header right for
authentication purposes
it looks like
we are getting location data here which
is just a fetch a fetch call to the
servers that s where we re getting kind
of a single locations information and
that matches up with what s being talked
about in the assignment so it says
number one get a location object from
the game server so that s happening
right here right and we re using this
API key to do it
number two log that object to the
console that s happening here
so that we can see the location next
updates the object and sends those
changes back to the server so put
location so that s this
function here which is defined down here
so it looks like this this HTTP method
is going to update the location on the
server
right and then number four
gets the location object again and logs
the to the console to display the
changes okay so it looks like we re
getting a location making a change to it
putting it back
and then getting it again essentially to
make sure that it changed so let s go
ahead and run the code
and see what we get
so got old location heart Finn Marsh
recommended level one
location updated got new location heart
fitted Marsh recommended level one okay
yeah yeah so it s not changing right
that s the problem if we go ahead and
read the assignment it says
run the code in its current state to see
the return values you ll notice that the
two objects that are logged in the
console are the same so because the X
API key we re using is different the
update is not being applied to the same
user account
okay so we need to figure out why that s
happening
so this new location data it looks like
this is what should be being updated on
the server so we should be getting a new
name Bloodstone swamp and a new

so the problem is
new generated API key it looks like
we re using the same API key to get the
data in the first place and put it back
but we just need to use that same API
key

to get it the third time and if we look
at why that s important let s go look at
the get location response we can see
here that the API key variable that s

is being added to the headers as a value
Okay cool so this is now this is looking
good we ve we ve deleted that new API
key and we ll just use that same
original API key all the way through

cool now we have the updated one I m
gonna go ahead and submit that
okay now we ll be practicing with the
network tab just a little bit more and
by the way if you do a lot of work on
the web I recommend just poking around
in the dev tools anyways uh there s so
much useful stuff in here
um again in this course we re really
just going to be focusing on the network
tab but uh the dev tools are just
they re just fantastic
okay so I m gonna go ahead and refresh
the page the assignment said to open
your Dev tools navigate to the network
tab then refresh the page poke around
through the request that you see notice
that you can select a request and see
its request and response headers
okay so we re really just supposed to
kind of poke around and the question so
we re really looking to get out of this
is
the question is header values are always
numbers and is that true or false so

so here s a fetch request let s take a
look at it
um
here s some headers right these are the
headers in the request these are the
headers in the response so again that s
just important to understand we can send
headers as the clients to the server but
the server can also send headers back in
the response and I mean if you look at
this right we ve got status code of 200
we ve got uh Access Control allow
headers star so clearly they are not all
just numbers we ve we ve definitely got
strings in here
um so I m going to go with false on that

all right we ve got another uh another
practice with the
Dev tools wants us to take a look at
some
headers I think I remember the answer to
this one so it says the status code
header on the requests have blank values
let s just uh let s just open it up

so here s the status codes right which
are kind of you can think of status
codes as apart from headers but if you
open them in the devtools you ll see
they re also in the headers
so the status code s 200 so it s
definitely a numeric value one
interesting thing to note
even though the answer here I believe is
is going to be numeric in code when
we re working with headers
we typically parse them as strings
because that s what they are at the end
of the day that s how they re encoded
um that said you can obviously encode a
number as a string I m just pointing
this out because you may need to cast
headers from strings to Numbers if you
want to deal with them as numbers
so anyhow
we go with numeric on that
okay again with the dev tools this time
the question is what is one of the
values you see in the response headers
for the content type key you might have
to look at several requests so we ve
seen the content type key before we know
that it deals with
the kind of data like what kind of data
is being sent in a response so let s
pull up a few examples
okay so here we ve got a fetch request
this one s content type is application
Json

this is an image and its content type is
image jpg jpeg
with one of these okay perfect there s
application Json
get post options put delete this
wouldn t be a content type right those
are HTTP methods which is something
we ll get to soon
921 that looks like it could almost be a
status code but it s actually too high
uh status codes don t go over uh 5 99 or
so
um
so application Json it is
so it s finally time to talk about Json
or JavaScript object notation
so Json is a standard for representing
structured data on the web so in the
last assignment or I should say in the
entire last chapter we were looking at
how different network requests send
different kinds of information in the
request body for example sometimes it s
image data right just literally an image
like as a JPG or PNG sometimes it s an
HTML document right and sometimes it s
kind of more raw data when we ve been
working with the boot Dev API and we ve
been getting item data right things like
names of weapons names of locations
their damage we ve been using Json in
order to transmit that data over the
network
so let s take a look at some actual Json
data
here is a
Json object that represents kind of a
list of movies so at the top level there
is a key called movies and its value is
an array and inside that array we have
some objects so each object it looks
like is intended to represent one single
movie we ve got some information about
each movie right it s ID it s genre it s
title it s director
so Json data can can really be
structured in many different ways right
we could have another key in here maybe
we have movies in one array and we could
have actors in another array under a
different key but the important point is
that it s a very flexible way to kind of
send structured data as plain text so as
developers it s really simple to work
with we can take that plain text and
parse it into our program and work with
that data as just variables right within
our program
so because Json is plain text if we re
to bring that Network response directly
into our code and parse the response
body we would really just be looking at
binary data that represents text that s
not super useful to us in our JavaScript
code right it would be much more useful
to have a JavaScript object right
because then we can use kind of dot
notation and array indexing to actually
get into that response and and you know
get to the the data that we actually
care about
luckily the fetch API makes it really
really easy to do this so whenever we
make a fetch request
we are getting a promise back right so
we have to await it once that promise is
resolved we get a response object that
response object has a DOT Json method
that we can call
that json method is responsible for
parsing kind of the textual Json into an
actual JavaScript object that we can use
and that method is asynchronous so we
also need to await it so again what s
Happening Here is we re making a fetch
request to a server we re getting a
response and then we re parsing that
response well we re parsing that
responses body right into an actual
JavaScript object and now that s just a
JavaScript object right we can we can
treat it like any other variable in code
um and that s really the way we re going
to want to to work with it okay let s
take a look at the assignment so it says
our get locations function is almost
done we just need to parse the response
data as Json and return it so we need to
parse that
Json data into a JavaScript object and
return the JavaScript object
um
let s take a look at this code so get
locations is clearly just a fetch call
it s that s the response right that
we re supposed to parse into Json and
return I m curious what it s being used

get locations returns here supposedly
again this is supposed to be the
JavaScript object we re going to log got
some locations from the server and then
we re going to iterate over the location
so this is interesting actually this
response is not an object at the top
level it s an array at the top level and
then we re going to iterate over that
array and kind of log each location in
turn let me show you what I mean by that
so here
here we have some valid Json data let s
head over to Json Lin this is one of my
favorite websites for parsing Json data
if I validate it
I m getting some ads hold on
if I validate it valid Json right again
this is an object at the top level
here s something that s interesting
instead of having movies as a key in the
object we could also put this array at

validate that it s also valid Json okay
so in this case we have an array at the
top level and then there are objects
Within
both are valid and in this case it looks
like this is the structure that we ll be
working with in the assignment we re
just working with an array at the top
level of and then and then within the
array we have location objects
okay let me show you that uh one more
time so here is the JavaScript object
coming back it s actually an array we
iterate over it and log out each
each location in turn if I run it now
I m guessing it just totally breaks yeah
locations is not iterable that s because
we never actually returned anything so
let s go ahead and fix the code
so we should be doing something similar
to this right we want to take this

all the dot Json method on it so that
should give us a promise if we await the
promise we ll get a JavaScript object
and then we just need to return that

awesome that looks uh that looks good to

so a couple more notes here about Json
so again Json is just a string so when
we parse it into our code that s the
time when we re converting it into kind
of an in memory object and it s
important to note that it s not only
used in JavaScript Json is so ubiquitous
because it s used cross programming
language right every programming
language is comfortable working in Json
for example in JavaScript we parse kind
of Json into either JavaScript objects
or arrays in Python for example we parse
Json into either arrays or they re
called lists in python or dictionaries
right and in go we parse Json data into
slices or Maps or structs it s all kind
of the same idea right key value Pairs
and and arrays
cool so some common use cases of Json
data are obviously HTTP requests and
response bodies but Json at the end of
the day is just a structured text format
so you ll often also see Json files
right that are actually saved on your
file system used as kind of
configuration files that can be read
from disk and parts to that way there
are also some popular nosql databases
that kind of use Json as their API that
you interface with things like mongodb
elasticsearch and firestore
then as a final note I pronounce Json
right Json Json
Leviosa
but some people do pronounce it Jason
and they re wrong I m just kidding
people people pronounce it however they
want but I do I do say Json
okay cool the uh the question here is
Json can only be used by JavaScript
programs that is absolutely false okay
next question is in Json different
fields in an object are separated by a
and we ve got period semicolon comma and
colon
um so here s some here s some valid Json
I hope
oh Json yep
um you ll see it s commas that separate
the fields so make is a field year is a
field and and we re using commas to
separate them
okay next one is Json is a database
programming language format for
communicating and storing data or plug
in for JavaScript
um all of these are false except for the
format format for communicating and
storing data so in the last coding
assignment we parsed Json data right
using that json method but Json is also
very useful for sending data so we can
send data to a server using Json
so there s two kind of uh methods that
are really important to understand
there s json parse and json stringify
these are both built in uh to kind of
the browser API uh or you know pretty
much any JavaScript runtime
and
json stringify is the one that s
particularly useful for sending data
right because we can build a JavaScript
object in our code and then we can call
json stringify to get the string form of
the Json data which is what we want to
actually send in an HTTP request so
let s jump down into the assignment
Simon says we need to keep track of when
players discover new locations however
there s a bug in the update location by
ID function yes that s this function
here it looks like the location s
discovered property is not getting saved
properly by the server okay so location
object
as a discovered property Let s uh let s
expand this and take a look at the code


Okay cool so the Bandit Camp location
which was fetched by the server
looks like this got discovered false ID
some big long ID string a name and
recommended level
okay so it s saying
the discovered property isn t getting
saved properly so
after discovering the Bandit camp we
fetched again from the server and it s
still false okay I m understanding
what s wrong now so if we if we look at
the code we re getting a location we re
updating its discovered property we re
updating the location by sending a fetch
request and then we re getting the
location again and the problem is
that this should now be true once we ve
done run that update location by ID
function okay so location is just a
JavaScript object with a discovered
property that is a Boolean and we re
setting it to True problem is up here
that location object is not
is somehow not making it to the server
properly
so
we need to stringify it right because
the body section of the fetch call takes
a string not a JavaScript object
and the reason for that is
a body of the body of an HTTP request
does not always need to be a JavaScript
object it doesn t need to be a Json
object right it could be something else

we can t rely on the fetch API to
stringify the object for us right
because we could be sending HTML here we
could be sending plain text so we need
to be responsible for stringifying it
let s see if that works
discover true
right there looks good I m gonna go
ahead and submit that
so if json stringify
takes a JavaScript object and converts
it into the stringified Json form
json parse does the opposite it takes as
input a string that is meant to be
structured as a Json object and Returns
the associated JavaScript object so that
you can use it in our code
so
let s take a look at this code example
here we ve got this Json string again
this is just a string that looks like a
JavaScript object right a Json string
and we call it json parse on it and we
get back the object and now we can use
you know the dot operator to access
fields of that object so let s jump down
to the assignment it says it s common
for developers to write local tests
using mock or fake data that looks like
real data so you re working with some
server and you expect it to give you
some you know data response maybe some
JavaScript object and rather than
testing with the server directly you can
kind of just build the string
representation of what you expect to get
back from the server and test with that
and then once everything s working you
can kind of plug in you can kind of plug
in the server to your the rest of your
code but sometimes mocking out the data
makes testing a little bit easier
especially if there s certain conditions
under which the server would return a
certain response and so rather than meet
those conditions while you re testing
you can kind of just mock that data
response and make sure that your code
handles that data in the way that you
expect
so uh moving on to the assignment it
says let s ensure that the Json format
that the bank the back end fantasy Quest
developers provided to us is valid Json
it would be a shame to write a bunch of
code just to find out that the back end
has given us the wrong format right
really suck to just do all the work and
then just have to go back to the
back end developers and tell them they
have a bug and then have to wait on them
again right
so the assignment says complete the
parse location function use a try catch
block to safely call json parse on the
location string provided keep in mind
that json parse throws an error if it is
given a string that isn t valid at Json
so if we give it garbage it s going to
throw an error and we need to capture
that if you could parse the string
successfully use the print location
object function to print the parsed
object if an error was thrown log
invalid Json strings Okay cool so let s
first let s just get that error so that
we know what s going on so let s do Json
dot parse and let s just pass in some
garbage
garbage data just a just a one word
string is not valid Json so let s go
ahead and run that
syntax error unexpected token D data is
not valid Json Okay cool so that s doing
what we d expect so now we throw this
into a try

this in the try section because it s the
dangerous code
and then we re supposed to log invalid
Json string

invalid j string so now I m going to run
that see what happens invalid Json
string invalid Json string okay so we re
always getting invalid Json string
for these two calls to Parts location
and that s okay because we hard coded
this okay so now we need to pass in the

at this location information which is
stringified so something like this or
something like this
and let s save that as a JavaScript

and then we re supposed to if you can
process for string successfully use the
print location object function
print location object
as the location
cool so if this parse goes well we ll
print out the location otherwise we ll
log invalid Json string I m going to go

so it looks like the first the first
call to parse location was invalid Json
the second one parsed properly
if we go down and look
yeah this one s invalid because it s
missing it s missing a closing bracket
there
that makes sense I m gonna go ahead and
submit that
it would be a shame to go into so much
detail about Json without bringing up
any alternative formats so XML is
essentially a Json alternative and
you know my perception of it is that XML
seems to be used a lot more kind of
before Json took over I would argue Json
is is used in more modern applications
you might see more XML used at least for
kind of HTTP requests in more Legacy
code that said there s nothing wrong
with XML you can still use it but at the
end of the day XML and Json when it
comes to sending data in HTTP requests
sort of a very similar purpose they
allow us to structure data in a textual
or kind of text format right so let s
take a look at what the syntax looks
like because at the end of the day it s
really just a difference in syntax right
so this data in XML would look like this
in Json so instead of these kind of root
tags we just have brackets in Json and
then instead of opening and closing tags
for each field
we have
a single key that corresponds to a value
right so
at the end of the day I would argue Json
is more popular these days and that s
why we re going to spend most of this
course working with Json but it is
important to understand that XML is out
there and that you may encounter it one
of the reasons I think that so many
developers prefer Json for again
networking or HTTP work is it s a little
easier to read and write and work with
for example
writing this field all I have to do is
type genre colon action I don t have to
do open tag genre you know right then
write action and then close tag genre
I m not writing genre twice I guess is
my point
cool okay so now that we know a little
bit about XML
the question is XML and blank serve
similar purposes the answer is going to
be Json
the next question is XML is blank
verbose then Json so more verbose or
less verbose verbose just means like
lengthy like how much do you have to
type and read in order to get the same
message across and I mean if we just
look here I would argue that XML is more
verbose right like we brought up before
we have to type each the name of each
field twice so I m going to go with XML
is more verbose
so Json and XML both accomplish very
similar things the question is which
should you use right both Json and XML
are are used to send Network requests
right like HTTP requests transfer data
from one system to another uh they re
also used as configuration files right
maybe you need to configure some
settings in a project repository you re
working on or a dependency management
system that you re using or just a piece
of software that upon startup kind of
reads in some configuration data very
often Json and XML are used
for those use cases sometimes you re
going to be forced to use one or the
other right if you re working with a
server that expects Json congratulations
you re using Json uh if you re working
with a server that expects XML you re
using XML right
um that said if you have the choice
maybe you re helping design an API
before it s built maybe you re the
backend developer or maybe you re
configuring a project and you just have
optionality for how to structure your
configuration files I would argue that
you should generally prefer Json it s
lighter weight right because it s less
verbose so there s actually less less
kind of bytes of data in the file itself
but there s also this kind of
readability component to it so I would
argue Json is just a little easier to
read and write so the question is which
should you prefer to use and I would say
you should prefer Json
the next question is which can be used
to send data from the browser to a web
server Json XML both or neither the
answer is definitely both
every time we send an HTTP request we
have to specify an HTTP method it s not
optional and up until this point in the
course we ve been using a few different
HTTP methods in fact you ve probably
noticed them and maybe even thought like
what the heck is this thing
um we ve I think we ve used get requests
maybe even post and put requests
um but we haven t explained what they do
yet and in this chapter we re really
going to dive into HTTP methods so let s
take a look at some of the most common
methods just really quick
um this is on the mdn documentation uh
we ve got get head post put delete those
five are the most common I would argue
you could kind of exclude head from that
category actually maybe get post put and
delete are the most common and then
there s some other less common ones like
connect options trace and patch
cool in this exercise we re going to be
diving into the get method so the get
method does kind of what it sounds like
it does it gets stuff
um specifically it gets representations
or copies of stuff uh from a server so
for example if you want to get some
information about a user say a user is
logged into your website and they want
to see their profile photo right you
they might do a get request to the
server to get a copy of their profile
photo so they could look at it because
get is all about getting information
getting copies of information so you can
be displayed visually in a browser or in
a mobile app or whatever
um it s considered safe because it
doesn t actually change any of the
information on the server right updating
something or creating something or
deleting something right like I don t
know changing a profile photo swapping
out a password that kind of stuff those
are those are considered a little more
dangerous because data is changing get
methods can be called multiple times and
nothing changes so they re very safe to
use let s talk about how to make get
requests using the fetch API so we ve
already used the fetch API pretty
extensively here s the syntax down here
we have the fetch function that again is
built into the browser it returns a
promise so we re going to have to await
our fetch calls the first parameter is a
URL and the second parameter is an
options object so the URL is just the
URL we are making our request to the
options object however has a few other
interesting things so the first is the
method right we re making a get request
so we have to specify the get string in
the method the mode we re not going to
go into a ton of detail about this
um it is browser specific essentially
cores is a mode that we need to use in
the browser so that the browser doesn t
kill our request for security purposes
that s for cross origin resource sharing
and essentially by setting this mode
we re going to allow the browser to make
our HTTP request
then we have this headers object
um which is just these uh kind of string
to string key value pairs right in this
in this case we are setting uh this
header that specifies that we are on a
Mac OS client
um but again these headers could be any
key value pairs
um and then what we are not including
what we are not including in this fetch
call is the body we have done that in
the past
um when we re sending get requests we
typically do not include a body because
we re saying we want a resource right so
when we want to update something or we
want to create something we re usually
sending data so we need to include a
body but when we re just asking for data
we often don t need to include a body so
that s why we don t have it here so on
to the assignment we need to write a
reusable function that retrieves all of
the fantasy Quest users from the fantasy
Quest server so we ll be completing the
get users function it should number one
call fetch using the URL parameter all
right so let s do we ll need to await a
fetch call right
first parameter is the URL we want
to make the request to
next we ll need an options object so use
the get method so method
get


in this case it s the X API key header
so this is the
this is the header that the server
expects to authenticate us so we can
prove who we are you can think of an API
key as kind of like a special password
and so you could imagine I mean we re
getting all the users on the server
um this is something that would probably
be behind some form of authentication on
a production server
um
typically only admins would be allowed
to get all of the user data for an
entire for an entire server
cool um and then we can just use the API
key provided to function
and then return the resulting Json data
from the response okay so this returns a
response object
so then we ll need to
await
Json method so we re basically saying we
expect this response
to have Json data in the body and we re
going to parse that into a JavaScript
object and return the JavaScript object
okay let s go ahead and run this and see

character name class Warrior level 14
username okay that all looks pretty good
let s take a look at the code just to

so first a new API key was generated we
are hitting this user s endpoint on the
boot Dev server you re getting users and
then we re logging the users and that
log user function is just going to
iterate over all the users that we get
and kind of log out some information so
this this is all looking good to me I m
going to go ahead and submit submit that
code
let s talk about crud
so crud is an acronym uh stands for
Crete read update and delete
create I ll do these let me do these
into colors create



so
when we re dealing with a web server
pretty much every action we take nearly
every action we take when interacting
with a server is one of these actions we
either want to create some new resource
on the server right create a new user
account create a new weapon in a video
game right create a new tweet we want to
read something right read a tweet read a
list of tweets
um see which of our friends are online
we want to update something right maybe
update a password or we want to delete
something right delete an account
Etc
um like I said almost all actions fall
into one of these four buckets right
create read update delete
as it happens
these actions map very simply
to the HTTP methods so create is
post HTTP method
read this is the one we ve already
covered

update
going to be a put
and I I ll just like special mention

but it s I would I would underscore it s

and then delete
is the easiest one because it s
Fleet
HTTP method
okay so when people talk about crud
servers they re talking about a web
server that allows the users of the API
to create read update and delete
resources and then typically
it will use these HTTP methods to do it
now I want to point out this is a
convention
this is a
convention
this mapping right technically there s
no reason a server can t use get
requests to create resources so there s
nothing stopping the server from being
designed that way however
the convention
in HTTP specifically kind of restful
servers which is something we ll get
into later is to
map kind of the create read update and
delete to these specific methods and
it s just so that it makes it easier on
us right we get used to doing things
this way and then when we re working
with apis which every API is different
and complicated because we re using
something familiar it makes it easier to
interact with
so again this is a mapping that you
don t necessarily need to memorize it
now but it s something that you
definitely will get really familiar with
over time as you work with more and more
servers and it will become second nature
okay so now we ve got a question that
goes along with all of that create read
update delete uh kind of mapping to http
method stuff so the question is HTTP
methods map to crud actions by
convention automatically or always
the answer is by convention next
question is to update a user account I
would probably use a blank request
the answer is going to be put
so an HTTP post request sends data to a
server typically to create some new
resource on the server and the way that
differs from a get request we can see
down here well there s actually a couple
things so first of all the method is
post one should be fairly obvious but
additionally we need to send a content
type header not every server is going to
require it but it s definitely best
practice to always inform kind of the
entity on the other side of a fetch or
an HTTP request the kind of data that
we re sending in the body right so they
don t try to parse it the wrong way so
in this case we re going to be sending
Json data so we should specify in the
headers that we are sending Json data
and then finally is the inclusion of a
body so when we were getting data from a
server uh we didn t need to send any
data in the body we could leave it empty
right but now that we are actually
sending some information to the server
so that that information can be saved on
the server
we need to specify that in the body it s
also important to point out that post
requests are not safe in the same way
that get requests are get requests are
very safe inherently right nothing s
changing on the server typically we re
just asking for kind of copies of
information that s stored there
um
post requests are altering the state of
the server in some form of another right
there are strategies that servers can
use to kind of de duplicate say you were
to accidentally send the same post
request twice to create a new user
smarter servers can can kind of
deduplicate that and make sure only one
entity is created but that s not always
the case so it s just important to keep
in mind that because post requests are
kind of mutating data on the server
they re changing something that s stored
there
um you do need to just be a little more
careful with them so let s jump down to
the assignment
where it says we need to save newly
created characters on the fantasy Quest
server so we ll be using the get users
function that we already wrote
and and we ll be using that function to
verify that our create user function is
working so

it looks like we ll be getting all of
the users creating a new user
and then getting all of the users again
so we can see that the one that we
created exists
uh after we create it make sure it works
Okay cool so uh take URL and data as
parameters we got those there we also
have an API key
calling fetch so let s save the results
of fetch in a response and then we need

we ll be making the fetch request to the
URL that we re given and then we need to
specify the options so the first option
is going to be the method which in this
case is a post request because creating
a user
uh next we need to set that course mode
just like we did last time
and then for headers we re actually
going to have two
the first will be this content type
editor server knows we re sending Json
data and then the second will be that


finally we need to actually send the
data itself now here we have this
parameter called Data let s go take a
look
we scroll down to where create user is

the user to create is what s passed in
there
and user to create is just this
JavaScript type
Okay cool so we just need to stringify

body
json string
ify data
okay let s run that

cool so retrieving user data we got all
of these
answers or characters
and then we created uh oh creation
response body undefined
probably not good

spawns oh let s finish reading the

the body field pass the data return the
responses Json body okay so we need to
return
response dot Json and don t forget we
need to await this because the dot Json
returns a promise

okay there s our users creating new
character here s the response body okay
so this is the new character that we
created name is Grendel
we scroll down okay cool Grendel is in
this list but he s not in the first list
that makes sense right we we got all the
users he wasn t there uh we created
Grendel and we got all the uses again he
was there so this is looking like it
works to me I m gonna go ahead and
submit that
let s talk about
status codes
http
status codes
so status codes are are basically one
additional thing that we need to check
to ensure that an HTTP request went the
way that we hope it did right that
everything went well
um the first thing that we typically
check right is if an error was produced
and we ve already talked about errors
status codes are kind of the second
level
um the the second layer that we need to
pass in order to make sure that again
the request kind of went off without a
hitch
let s diagram
the life cycle of a fetch request so
that we can see kind of how status codes
and errors differ and when you might get
one
versus uh versus the other
so over here I m going to draw the
client
and on this side I ll have the server
you re probably super familiar with this
diagram I m going to draw by now
this will be the HTTP request going out


in this area
it will produce most likely produce an
error
okay so for example if we don t give a
valid domain name to the fetch API we
might get an error right or if the
internet connection is down so we re not
able to complete the request then we
would probably get an error from the
fetch API
okay if something goes wrong on the

so this means our request successfully
made it to the server and now the server
is is processing the request if
something goes wrong during the process
of the request
then that results in a status code and
we will still get a valid HTTP response
back right the status code is contained
in in the response okay so if something
goes wrong on the server and the server
detects it it will let us know in the
HTTP response via a status code
so this might be something like hey you
don t have permission to access that
resource that you re requesting right or
oh one of our backend Services is down
we re not able to process that request
those are the kinds of things that
you ll see in status codes so another
one of the big differences between
status codes and errors are that errors
only occur if something goes wrong
whereas every HTTP response has a status
code we just need to check what the
status code is to see if something
actually went wrong
so the codes are broken up into kind of
different error Levels by by number so
status codes are between 100 and 5 99
and basically 100 level codes are
informational responses
um frankly they re very rare you ll you
won t see these very often 200 level
codes are hopefully what you see the
most often and they re success codes so
200 is the famous everything s okay
you ll see 200 quite often
300 are redirection messages so they re
basically telling the client hey the
server moved you need to redirect your
quest somewhere else if you ve ever been
to a link like if you ve ever visited a
link that doesn t actually end up taking
you to the URL in your browser that you
visually saw you likely were redirected
through a 300 level status code
um and then 400 are client errors so
it s basically the server telling the
client hey you re not authenticated you
don t have permissions you formatted
something improperly
and then 500 level errors are server
errors so it s actually this the server
saying hey something messed up on our
end maybe our database is down or
something like that so let s take a look
here at some of the more common status
codes that you ll see so 200 is just
okay right this is by far the most
common code and basically just means
your request worked right you can move
on uh 201 is just a little bit more
specific so it s saying everything went
well but specifically you created
something right so 201 is often the
response to a post request when a
resource is created on the server uh 301
moved permanently so this means hey uh
the server that handled this type of
request used to live here now it lives
somewhere else you should go there
um to deal with it so for example
browser redirects use 301s all the time
if a web page moves to a new domain
typically 301 redirects are set up so
that all the new traffic can move to
that uh all the all the traffic can be
redirected to that new location
400 is just kind of a general bad
request again it s like a catch all it s
just like you did something wrong in
your request
you know figure it out
um and a lot of times when kind of
error status codes like 400 and 500
level status codes are sent back in an
HTTP response it s very often that the
body of that response will contain more
information about what went wrong so we
would typically check the status code
see that it s a four or five hundred and
then maybe read out the
um HTTP response body to see what
specifically happened maybe log that
right to some
to the console or to some logging system
for us to check on check on later uh 403
is one that comes up quite a lot it s
just unauthorized right maybe you forgot
to include an API key maybe using the
wrong API key maybe you don t have you
know a session token something like that
uh 404 you ve probably encountered this
on the web just means not found right
maybe you tried to navigate to a web
page on a domain that doesn t exist you
could get a not found error and then 500
is is by far the most common uh 500
level code it just means internal server
error right uh very often this is like a
bug on the server
um or maybe the the database is down or
something like that
um
I don t think you need to memorize all
the status codes in fact there s a link
here to all the status codes and there s
there s quite a lot of them you don t
need to memorize them
uh what I would recommend is just
knowing the basics which are basically
200 level is good 400 is client error
500 is server error right
um and that s going to be kind of really
all you need to know uh to get going as
a web developer
so question for this exercise is a
successful response returns a blank
status code
and that is going to be a 200 level
status code
okay same topic different question the
purpose of status codes is to blank to
alter the method of the request to
inform the client about whether or not
the request was successful do not need
to send a response body or to speed up
the request
um it s going to be
number two to inform the clients about
whether or not the request was
okay let s take a look at what checking
a status code actually looks like in
code so the dot status property on a
response object gives us the code Okay
so we ve got our response object from
the fetch call
this is the property that has the status
code
user code function to return the status
code of the response okay so we re
making a call to that get user endpoint
and we want this to return a status code
so if I just run this without making any
changes
I m getting ID and valid status code
undefined
ID some ID and then status code
undefined
if we instead return
onstop status

invalid ID status code 404
good ide
a code 200
Okay cool so when we pass in the test
Suite an invalid ID we re getting back a
404 that makes a lot of sense we re not
able to find uh the user with the
invalid ID
and then on the other hand when we pass
a valid ID we get we would get back a
200 so I m gonna go ahead and submit
that
let s talk about HTTP put
right this is the method that is most
commonly associated with updating a
resource it is worth mentioning however
though that it can sometimes be used to
create a new resource that does happen I
would argue it s it s a little less
common
um sometimes you ll see an end point
where you are able to give it data via
put request and the action on the server
is to create it if it doesn t exist or
to update it if it does exist that would
typically be done with a put request so
the main difference between post and put
is that post is almost always just
creating whereas put is like update or
create
or just update
um another big difference is that put is
meant to be indempotent or item potent I
don t know how to pronounce that uh but
basically what it means is you should be
able to send a put request multiple
times without creating multiple
resources effectively the you send the
put request the first time and it makes
an update if you send the identical put
request nothing happens it s a a no op
or a no operation
so put requests should be safer
generally speaking than post requests
and the reason they re able to be
edempotent again generally speaking is
because you ll often be including the ID
of the resource that you re updating
whereas with a post request you ll often
be kind of relying on the server to
generate new IDs right so that makes
sense if you make multiple post requests
you re generating new IDs for new
resources whereas if you re making put
requests you re always using that same
ID so you just be updating Fields you
already updated
let s jump down to the assignment to see
what this actually looks like in code
okay it says you will now use the
knowledge you have gained thus far to
update a fantasy Quest character using a
put request and retrieve that character
using a get request okay so we re going
to update the user and then get the user
by its ID
so if you remember kind of before we
were doing a get users request where we
were kind of getting all the users now
we re going to be getting a specific
user by its ID and and updating it by
its ID as well
okay complete the update user and get
user by ID functions they should update
and retrieve individual user resources
respectively they should also return a
promise that resolves to the Json
response body of their respective fetch
requests okay so we re returning
JavaScript objects that we re able to
parse from some Json
we ve included the full URL creation
Logic for you in both functions we ll be
talking more about URL building in the
next chapter Okay cool so
these are the URLs we ll be making the
requests to
we need to just make the requests so go
ahead and do that const
response equals wait fetch right we ve
done this a couple times now we re going
to use that full URL
and this time our method and the options
object will be put
still need mode
cores
headers in this case we will be sending
a request body so we do need to specify
that
content content type header

and then you need a body
and that s going to be Json Dot
stringify
data okay
so let s take a look at what all this
means so far so we re building a URL
based on kind of the base URL and the ID
of the resource we want to up update so
hopefully that makes sense we have the
um kind of the URL path and essentially
the last section on the path is going to
be the ID of the resource we want to
update and if you look down here in the
get by ID it s the same thing we re
essentially just adding that last
section which is the ID of the resource
and that s how the server knows which
user we want to update
and then in the body of the request
we re just sending the new Fields so
let s go look
I m gonna expand this let s go look at
the code that actually uses this
so here s our base URL right it s kind
of the server URL and we re hitting that
user s endpoint
so again here it s going to be users and

okay so down here base URL user ID
generated key
that s the get where is the update
update has this user data in here
Okay cool so what s happening is first
we get the user and we log it out next
we re going to change some of the user
data so we re changing the character
name we re changing the level the class
whether PVP was enabled Etc and then
we re calling the update user function
and passing in that new data that s now
been modified
and then we ll get the user again just
to make sure that it worked okay so all
that makes sense
um what was I supposed to return again
return a promise results okay so return
rest Dot
all right
cool
the get request I m gonna
do a sin here

very similar let s swap out the things
um that are specific to the get request
so first of all
there is no body in a get request right
we don t need to inform the server of
anything we need to swap that out to a
get

oh we forgot our API key that reminds me
almost forgot so X API oops x dash API


and here we do not need a content type
because we are not sending a body of
data

so user uid character name yeah third
updating user with ID
to f82 so that would be the lithria
and then we got the user and now its
name is lbr
Warrior level seven okay cool
I want to pause here and just make sure
you understand what s happening so we we
got the user with this ID
and we logged their kind of their
metadata right name class level all that
stuff
then we updated the user again that s
happening in code

and then after the update we get that
same user right notice the same ID
but all the fields have changed
cool so that seems to have worked I m
going to go ahead and submit it
so we ve offhandedly mentioned the patch
method a couple of times and I want to
just kind of clear up any confusion
so HTTP put is by far the most common
HTTP method for updating resources
however patch is another one that is
sometimes used and and here s the
difference
the intended difference for these two
HTTP methods was that put would swap out
entire resources or update entire
resources whereas patch would just
update
partial sections of a resource so here s
an example with the users that we just
updated we essentially put an ID in the
URL path to indicate which user we
wanted to update and then we sent an
entire user object right and we said
this is the new user object with all the
properties update the whole thing right
so that s kind of the intended use case
of a put a patch would have looked
something like well we still include
that ID in the URL but now instead of an
entire user object maybe we just have a
name field and we say we just want to
swap out the name or we just want to
update the name right so that would be
what patch was intended for now in
practice you won t see patch used very
often typically servers just use put for
all sorts of updates whether it s
partial or full
um
whether or not that s a good idea
I don t know I don t really have a
strong opinion on it I m okay with you
know back end developers doing it
however they want
um like with everything when you re
making HTTP requests to a server you
really just at the end of the day need
to read the documentation to figure out
whether you should be sending a a put or
a patch right by convention it s
probably going to be one of those and
more likely than not it will be a put
so the question is blank is more popular
than blank and the answer is put is more
popular than patch
okay talking about patch still the
question is put typically updates blank
while patch updates blank and the
answers are you know the swapped forms
of partial resource and entire resource
um the answer is that put typically
updates entire resources while patch is
intended for partial
let s talk about HTTP delete it is the
most obvious of the HTTP methods right
it does what you think it deletes
resources let me expand this so we can
see what the heck is going on here so
here s an example of an HTTP delete
using the fetch API basically in this
case we have the URL of the API
right which technically for us spans all
the way out to here this is the API
that s specific to the learn HTTP course
and the first section of the path is
telling us what resource we are working
with so locations resources and in this
next section is what s the id of the
resource that we re working with so it s
going to be this big long ID here and
then when we make a
fetch request or an HTTP request to that
URL
and use the delete method we re telling
the server hey I want to delete that
exact resource so jumping down to the
assignment it says users need to be able
to delete their player accounts complete
the delete user function send a delete
request to the given full URL you ll
need to set the method mode and headers
like before set the x API key
um cool this all makes sense all of this
so fast resp equals await batch
URL so the again the ID of the
um in this case user that we re deleting

options objects we ll be using the

specifying cores always because we re
working within a browser
and then we re going to need some
headers
because we need to pass that API key
right we need permission

cool and that should be all we need
right nobody on most delete requests
um the thing we are deleting
is in the path so the server already
knows what we are deleting
okay so let s look down at the test
Suite now and see what is expected to
happen
so it looks like first all of the users
will be retrieved and logged out to the
console and then we ll delete one user
and then we ll get them all again cool

okay logging user records so we ve got a
whole ton of user records and then we
deleted the one with
id0194 where is that
Euro 194 okay great convenient that s
the first one uh looks like it s my user
record
Okay cool so after it s deleted it
should no longer be here
and indeed it looks like it is no longer
there now the first one is
the Allen Allen record
awesome I m gonna go ahead and submit
that
so we briefly talked about URL paths
um in the uri s chapter quite a few
chapters ago and now we re going to dive
quite a bit deeper into URL paths and
how they relate to
um kind of modern uh web servers so if
you remember we talked about how
traditional file servers will very often
map the file path on the server to the
URL path that s used to make kind of
HTTP requests into that server so for
example if this were the URL
testdomain com root slash next on a
traditional file server then the path to
that next file would be slash root slash
next from wherever the file server is
running
when we re working with web applications
as opposed to just websites that might
use traditional file servers
paths in our HTTP requests are often
treated very differently or they re used
for very different things
in fact let s break that down
now
so I m going to grab this example

from the fantasy Quest server that we ve
been interacting with so far and let s
just look at this big we have this big
long path here and I just want to kind
of explain how I ve designed the boot
Dev API so you can understand that again
it s not a traditional file server so
it s it s got a little bit more
um it s just got a little bit more to it
so the first section of the URL
obviously is just the server it s our
domain api boot dev
um the first section of the path is the
version of the API uh that s being
interacted with so if I ever made big
breaking changes to this API
um I could just increment this from V1
to V2 right and then everyone that s
using the V1 endpoints would still be
able to use them under the V1 path and
anyone who wants to upgrade to the new
version 2 API could start using the V2
path that s a pretty common convention
um when designing apis
this next section is just
separate kind of the apis for my
students to work with
um
from the apis that kind of power the
website so these this courses rest API
this is the rest apis for my courses
that students interact with directly and
it kind of separates the rest of the API
that I m using internally to power the
website
the next section is you know which
course are we interacting with and
obviously we re in the learn HTTP course
so that s what that section means and
then the final
section is just the resource we re
working with so here we re working with
locations but this might also be users
um or
I don t know weapons or something like
that so let s jump down to the
assignment
our goal is to fix the get resources
function it s supposed to take as input
a path
let me expand this so we can actually

see the whole thing
um it takes his input a path and makes a
get request to kind of the base URL plus
that path and then returns
um the kind of the JavaScript object
that was retrieved from that path so if
we look here basically we re making a
get request to the locations endpoint
and then we ll be logging out all those
locations and then we ll do the same for
the items and users endpoints again the
interesting thing about this function as
to ones that we ve built in the past is
that it s a little more flexible the
user of the function can kind of pass in
a dynamic path we ll be making making
that request
so
it looks like all we need to do really
is append the path to the URL because
this variable full URL is currently
what s being used in the fetch request
so if I just ran it in its current state
yeah we re getting an error because
we re just making a request to the root
domain and that that part of the server
is not designed to return any sort of
Json response so
let s make an update here and let s

and the path to the base URL and that
should work that should be all we need
to do
take a look at the response data
Okay cool so now we get all of this
location data right heart fin Marsh iron
deep Lakewood

healing potion light leather padded
leather and then finally it looks like
we re getting all the user data
rundorf varus
cool it looks like it s all working I m
gonna go ahead and submit that code
so you ve heard me toss around the term
restful so far in this course probably
but I haven t really explained what it
is yet
rest is an acronym stands for
representational State transfer but all
it really is is a set of standards and
conventions for building better apis at
least that s the promise right so again
the whole goal of a restful API is to
adhere to certain rules so that a client
right Us in this case that s interacting
with the API kind of knows what to
expect and has a really good developer
experience working with that API so what
are the rules and conventions that
restful servers adhere to that kind of
separate them from other kinds of
servers other kinds of apis
well the first is that one of the kind
of core tenets of a restful API is that
the two pieces the client and the server
are kind of separate and agnostic right
so the client can be written in any
programming language the server can be
written in a different programming
right uh there s a kind of a minimalist
set of things that the two need to agree
on things like you know what names are
we going to use for resources are we
going to use Json for the encoding
scheme but everything else can be
completely separate and distinct
another key tenet of restful apis is
statelessness so the server will have
its state and the client will have its
state but in a good restful server you
won t have kind of persistent state that
deals with the connection between the
two Let me Give an example so on the
server uh let s just say it s the
fantasy Quest server and we have 100
registered players right in the game
um well then one player deletes their
account now there s 99 so the server is
inherently stateful right it has State
it s keeping track of state and and
that s totally okay there s really no
way to get around that what s
interesting about rest is that the
client and the server shouldn t be
keeping track
um of like past interactions that
they ve had so for example if the client
says give me the first 10 users and it
gets 10 user records and then it makes
the same requests
the same request excuse me the server
shouldn t remember that it already gave
that client 10 users and give them the
next 10 users it shouldn t do that what
should have to happen is the client
specifically asks for the next 10 users
so that s a separate request and
basically what that means is the server
doesn t have to keep track of any state
it doesn t have to remember hey this
client already asked me for some stuff
I m going to change the way I respond so
it s just a very clean way to write an
API that kind of puts some
responsibility on the client to ask for
things in like new and different ways
when it needs new and different
information
another key component of restful servers
that really sets them apart from other
types of servers is that the path is
used to designate the resource that s
being interacted with so whenever you re
working with a restful server you should
be able to hit say the slash locations
endpoint if there is a locations
resource available on the server and be
able to create read update and delete
that resource in a predictable way right
just by by making requests to that path
with the appropriate HTTP method so the
question is a true false statement and
it says restable servers communicate the
state of resources they don t expose
access to arbitrary server commands
so this is true
right
rest is all about State transfer just
transferring the state from the client
to the server from the server to the
client right both are staying in sync
with each other by making requests back
and forth arbitrary commands are not

next question does a back end server
need to adhere to restful standards the
answers are no but it s a common
convention designed to create better
apis yes otherwise the requests will
fail yes if it doesn t it s an insecure
server and no it s generally a bad idea
well the answer is definitely one of the
no answers right rest is just an option
a server or an API doesn t need to use
it
um so that narrows it down to it s
generally a bad idea and it s a common
convention designed to create better
apis well it s not generally a bad idea
rest is very popular and it s popular
for a reason I wouldn t go so far into
say as to say rest is better or rest
should always be used there are other
popular conventions things like graphql
for example if you ve ever heard of that
um completely ignore all of the restful
conventions new things a completely
different way but
um I will say it s this top one it s a
common convention and it is designed to
help create better apis
next question the blank part of a URL
path typically denotes the resource
scroll down to
paths section the answer is our first
last or middle and the answer is going
to be last right
last section of the path typically
denotes the name of the resource
so we already talked about query
parameters a little bit in the chapter
on URLs right you ll recognize this
example
um where Q equals boot dev is a query
parameter right the query parameters in
a URL come after the question mark and
they re key value pairs so here are the
key is q and the value is boot dev
in restful servers query parameters are
very often used in get requests to kind
of change the way that data is sent back
to us from the server essentially we re
asking for the data in a slightly
different format
so let s jump into the assignment to
kind of see what that looks like
does the back end team building fantasy
quests server has added support for
query parameters the server offers a
sort parameter that can be optionally
added by appending this sort equals
field name to the end of the URL where
field name is the property of the
resource we want to sort the kind of
response records by
our goal is to create a leaderboard and
we want to sort user records by their
level so we want everyone on the
leaderboard to be sorted by their level
highest level at the top
update the get users functions full URL
with a query parameter that will sort
the user records by level Okay so we ve
got this get users function and now we
need to add some sorting let s go ahead
and run the code in its current state

okay so we got all these users and it
looks like they re kind of out of order
when you re looking at at their level
right we got 14 then one then six then
eight
and
yeah if we look down here it looks like
get users is just being called and then
we re iterating over all of the users so
we want this user s object to be
sorted right by level
so
if this is the full URL in fact I want
to just
want to log it out really quick to see

this is the full URL here we just need
to add
sort
false
the field name the field name we re

I ll remove my little debugging
statement there let s run that again
cool
now everything looks like this it s
sorted and this is this is important
that the server is doing the Sorting for
us we re just telling the server with
this query parameter hey could you sort
those before you give them back to me
which is really important because
sometimes we can sort on the client but
sometimes we can t right imagine in the
case of of Google right when we ask for
a response to a query and you know how
it sometimes says three million
responses we d never be able to sort
that many responses on our machine so we
rely on the server to do it for us
anyhow this is looking good to me so I m
going to go ahead and submit it
so you may be wondering well how am I
supposed to know what resources are
supported what query parameters are
supported what HTTP methods are
supported by a given server that I m
working with well at the end of the day
there s there is no way to know unless
you have some documentation
so when you go out to work with a
specific API right let s say you re
integrating with the stripe API because
you need to do some payments on a
website right well there s really no way
to know what the stripe API allows for
unless you get access to the
documentation that says here are the URL
paths with the associated resources
here s the HTTP methods you re allowed
to use here s the request and response
bodies that you can expect right all of
that will exist within the documentation
if a server doesn t have support or a
feature that you need right say the
Sorting feature that we just interacted
with on the fantasy Quest server the
only option is to either contact the
maintainers of that server side code
right the back end developers and ask
them to implement it or if you are a
backend or full stack developer yourself
obviously you can go change the code and
update the documentation on your own but
it s important to understand that as a
client
you don t get to make the rules right at
the end of the day the server supports
the functionality that it supports and
you re kind of stuck with that again
unless you re able to Lobby or make
changes yourself so the question is when
working with a backend server you will
need to access blank
the server code the server s API
documentation the server s private keys
so this is assuming when we say working
with a back end server we re writing
client side code that works with a
backend server we don t need the code
right we re just interacting with the
back end through an API we don t need
the server s private keys but we do need
the servers API documentation if we re
going to be able to interact with that
API the next question is what should you
do if the documentation isn t clear
about how to use the API
number one contact the back end
developers and ask for better docs or
clarification number two keep trying
random requests until you find something
that works or three try to hack your way
into the server
well the answer on this one is is
definitely the first right just contact
the back end developers and ask for
clarification
as I ve mentioned earlier it s possible
to have multiple query parameters so
a couple exercises ago we sorted users
by their level with one query parameter
right but we could also add another key
value pair that does something entirely
different and the Syntax for that is the
question mark separates the query
parameters right plural from the rest of
the URL but ampersands
separate individual key value pairs from
one another so to practice with multiple
query parameters let s jump down into
the assignment it says our game designer
wants us to build a treasure chest we
don t want to award players with too
many items though so we ll be adding a
limit equals x query parameter where X
is the number of Records we want to
limit to and then we ll also sort the
items using a sort query parameter so
the assignment is to complete the loot
treasure function it should add two
query parameters to the URL pass to get
items okay so this is the base URL
and we re using the get items function
we just need to alter this URL
to add those query parameters so
sort and limit will be sorting by the
quality property and set the limit based
on the Rarity passed into loot treasure
oh interesting okay so Rarity

and then sort is just just based on that
property okay so let s jump into this
should be something like this let
um limit
let s default to one no let s default to
zero
we default to Let s default to null I
guess that makes sense and we ll do if
Rarity
equals

getting my
parentheses
then limit will be
one

Rarity is rare
then the limit will be free
if the Rarity is legendary

okay
and
just to go above and beyond here what
I m going to say is
if
limits
null

bad Rarity
provided
okay
I ll just prevent uh kind of weirdness
from happening we re expecting the
Rarity to be one of these three
okay so now we ve got our limit it s a
number and the sort is always going to
be based on quality Okay cool so we
should be able to just add these now so
we ll start our query parameters with
quality
equals oh excuse me sort equals quality
and then another query parameter
will be limit
equals
interpolate that limit parameter in

so looting common Treasure Chest
acquired a light leather
the name of the item with quality score
one being a rare treasure chest
three items here they re sorted you ll
notice
legendary treasure chest five items so
this looks right to me right we re
we re getting the right number and they
are sorted so I m going to go ahead and

so you may have been wondering isn t
this an HTTP course why is every request
in the course kind of prefixed with
https instead of HTTP well the reason is
https is essentially the exact same
thing as HTTP with one added component
and that is security the most important
security feature of https is encryption
it keeps the information that we are
sending in our request and the
information coming back in the response
secure and encrypted so that only us is
the sender and the server as the
receiver are able to decrypt and process
that information when we send HTTP
requests over the Internet they don t go
directly from our computer to the server
that we are communicating with there are
intermediaries for example your internet
service provider right or if you re
working on public Wi Fi like within a
coffee shop then whoever owns that Wi Fi
or that router would be able to
intercept your network traffic and
process it so if you re using plain http
the data that you re transmitting is
never safe in the process of being
transmitted anyone in the middle can
look at everything you re sending take
the example of an e commerce website
right if you re entering in a credit
card in your browser and sending it off
to some server through a normal HTTP
request every intermediary now has
access to your credit card information
that s why good e commerce sites use
https and should never use anything less
secure so let s hop down to the
assignment
the assignment says the fantasy Quest
server only allows encrypted requests
right this is very common uh the entire
boot Dev API is all encrypted with https
we don t allow anything over http
the assignment says there s a bug in the
code that s causing the request to be
blocked fix the bug so if we send the
request as it is we get type error
failed to fetch and that s just because
the server is rejecting
this plain HTTP connection
so we have to send our request over

awesome I m going to go ahead and submit
that
let s talk about each
etps

so how it keeps our data safe on the
internet
start with a little diagram one that
you re probably very familiar with
so over here we ll draw the client
and over here
to
server the problem that https solves is
when we send an HTTP request across the
internet there are potentially
intermediaries here in the middle rather

for example maybe this is the public
Wi Fi that you re using
it s the controller of that router
and see your internet traffic another

another one might be the cloud provider
of the server
cloud
okay there s there s potentially
um many different kind of entities that
your internet traffic is passing through
on the way from kind of your computer to
the server so in order to stop these
different entities from being able to
see all the information that we are
communicating privately with the server
we want to encrypt it what that means is
we need to encrypt
we need to encrypt over here on the
client before sending the data and then
we want the server to be able to decrypt
the data once it receives that encrypted
packet of information so how does that
work well we re not going to go into the
math behind the cryptography if you re
curious about that you can check out my
learn cryptography course on boot Dev
but from a very high level there are
essentially two keys

actually I m going to do them in
different colors this blue one is the
public key
oblique
and we ll do the private key
red
a public and private
now the public key
is used for encrypting

the private key
is used for decrypting
decrypting it it s important to
understand that the public key can
encrypt information but it cannot
decrypt it that s solely the
responsibility of the private key the
private key stays on the server while
the public key can actually be given
to the client
now this would be good enough right
using the public key the client can
encrypt some information and send it to
the server unfortunately there s another
direction that we forgot about right
we also need to be able to send private
responses from the server back to the
client right HTTP is a request response
flow so actually instead of using this
public key
to encrypt and send the request
the this kind of asymmetric cryptography
which is what public private key
cryptography is called is actually used
to negotiate a third key

this is a symmetric

what this key does is it allows both
parties using this single key to encrypt
and decrypt messages so once both the
client and the server have this key they
can share messages back and forth and
encrypt and decrypt both of them
this public private key section is only
used so that the client can communicate
to the server privately and figure out
what this key is going to be this key is
effectively generated on a per request
basis let s review the order in which
all of this happens just to make sure
it s Crystal Clear
so the very first thing that happens
is that the server
generates
public
and private key
and this only needs to happen once for
the server it s it s done when the
server is very first configured for
https if the server doesn t have a
public private key pair it s not
um going to be https enabled it s not
ready for https traffic so this only
needs to happen once
per server
then when an individual request is going
to start the client the client

server
right and says hey I want to send you a
secure request
at that point the server
sends
the public key
Hub key
to the client
okay so this this blue public key is
getting sent over to the client
next the client
encrypts
well actually let s let s write it a
slightly different way
let s say the client and the server
negotiate
a symmetric
e
so from a very high level the way that
this works is the client has the public
key right so it s able to send encrypted
messages to the server but remember the
server cannot yet send encrypted
messages back to the client so the
client generates a secret token
sends it to the server and then both
parties using that secret token are able
to generate the same symmetric key so
again public key comes from server to
client
client generates a secret token
the client sends that secret token
encrypted with the public key to the
server the server decrypts it using the
private key and then both parties are
able to generate the same symmetric key
so that they can both use that key for
encryption and decryption
so once that symmetric key has been
negotiated now the client
sends
an encrypted

then the server
is able to decrypt

and the server sends an encrypted

and finally
client is able to decrypt
the response
and that s the whole life cycle so this
exercise talks about all of that https
stuff that we just went over on the
Blackboard I will point out really quick
before we answer this question that SSL
and TLS they re the kind of the security
pieces of https so you could think of
https as SSL or TLS kind of tacked on to
http in order to add the security
features
so the question is https is essentially
the same as HTTP with some additional
security and the answers are true or
false this one s going to be true
basically the same as HTTP we ve just
added some security
I want to cover two more key points when
it comes to https so we ve talked about
how https encrypts what it is that we
are saying when we communicate online
right so that people snooping in on our
internet traffic can t read the content
of our messages and it does that very
well
one thing that it does not do is protect
your identity or the identity of who you
are communicating with so if someone is
snooping in on your network traffic even
though you re using https they will be
able to see the website that you re
browsing on right so if you re on boot
Dev for example and you re using public
Wi Fi whoever controls that public Wi Fi
will still be able to see that you re
browsing boot Dev that being said
https does ensure that you are talking
to who you think you re talking to so if
you re connected to boot Dev over an
https uh connection then you can be sure
that you re actually talking to boot dev
and not some you know malicious hacker
that s just pretending to be boot dev
that s enabled through digital signature
technology which is again something you
can look up it s kind of out of the
scope of the course it s just important
to know that https does give you that a
surety if you re using it so the
question is https ensures that you know
who you are communicating with and as we
just discussed the answer is true
next question is also a true false
statement it says https protects your
identity online and as we just talked
about it does encrypt our messages but
it doesn t really protect who we re
communicating with or who we are so the

congratulations we ve finished all of
the coding exercises and challenges in
the course now we re going to be
building a project from scratch this
project is going to be a command line
application that runs on our local
machines using node js the purpose of
the application is to crawl a website
and produce a report of the internal
linking structure of the website
basically which Pages link to which
other pages on the site this is a tool
that would traditionally be used by kind
of web marketers or SEO search engine
optimization experts so I m here on my
personal GitHub account and I usually
start by just creating a new repository
for whatever project I m starting so
here I m going to go ahead and call it
web crawler
web crawler

project for the learn http
course
I m going to go ahead and make it
private you can keep it public if you
want whatever you want I m going to
automatically initialize it with a
readme md file
and that should be all I need to do go
ahead and create that repo I am working
on Mac OS but everything we do should
work just fine on Linux and windows you
may just need to install things slightly
differently I m also working in vs code
my editor of choice but again whatever
editor you prefer will be totally fine
I m going to go ahead and clone down
that repo that we just created on GitHub
now that we ve cloned the project down
locally I m going to go ahead and
install NVM or the node version man
um if you just Google NVM you should be
able to find the GitHub page where you
can download the or where you can find
the installation script that I m about
to use
um but I ll also include a link below in
the description GitHub page so I m going
to run that install scripts and I
already have it installed so it doesn t
even do anything but just so you know
that s what you would run to install NVM
once it s installed We ll add a DOT
nvmrc file to the root of our repository
and inside we re going to add the
version of node that we want to be using

um you can use a newer node version than
this probably but I I wouldn t I
wouldn t recommend going much older than
18 uh once we have that nvmrc file
created we can do a
NVM install
and that s going to download node
version
18 7 0 if we don t yet have it
and then once we have it installed we
can do NVM use and that will switch the
current version of node that we re using
in our shell
and then just to check we can do node
dash dash version to make sure that
we re on the right version of node next
let s run a little program just to make
sure everything s working properly I m
going to create a main js file and we ll
just have it log hello world so the

and then from the command line we should
be able to just run node main js so this
starts the node interpreter and passes
in main js as the entry point
it logs hello world so we re good to go
running node kind of manually from the
command line like node and then the name
of a file it works just fine but because
we re going to be installing a test
suite and packages we re actually going
to use npm to manage all of that kind of
environment and ecosystem so in order to
get that going we just run npm init
and it s going to take us through kind
of a little interactive setup and I m
just going to press enter a bunch of
times to use all the defaults
and it will create a little package json
file
again with a bunch of kind of default
values the only thing we need to change
at this point is we need to add a new
script and I ll just call it start
that runs node main js for us so now
instead of manually typing node main js
into the command line we will type
npm start and that s just going to call
this little script here again the
purpose of this is now that we re using
a package json file
um when we pull in dependencies and run
our code through npm the dependencies
will be available to our code
similarly we ll be using npm to run our
tests so it s just nice and convenient

cool and it worked right it logs out
current version of node and then runs
the program next let s go ahead and
install jest so we re going to be doing
some test driven development as we build
out this project and in order to do so
we need a test Suite so we re going to
install just a fairly popular testing
runtime and we can do that by typing npm
install dash dash save Dash Dev jest
and that should update our package json
file with a new Dev dependency
as well as install the code in the node
modules folder and create a
packagelock json file which just keeps
track of all the dependencies in our
project so there it is that looks good
like I said the package lock json is an
auto generated thing you can just leave
it same with node modules but we do need
to ignore so let me create a new file
called git dot git ignore
we do need to ignore this node module
folders or this node modules folder
and the reason for that is
the node modules folder contains all of
the dependencies for our project and
it s actually quite a lot just has a lot
of dependencies and so we don t want to
commit that code to our repository we
just want the code that s kind of unique
to our application so we ll keep track
of our dependencies in the package json
which is committed to our source control
but we are not going to commit the node
modules anytime we pull down this
repository fresh it won t have the node
modules so a you know a developer will
just need to type npm install in order
to install all the dependencies kind of
listed here in the package json and then
they ll get their own copy of that node
modules folder so now that we have just
added as a dependency let s add a script
that actually runs it if we were to run
npm let me clear this out if we were to
run npm test right now all we d get is
this error no test specified and that s
because here in the test script all
we re doing is echoing error no test
specified so let s swap this out for

and now if we run npm test
we get something a little different
it says no tests found exiting with code
one okay so we re properly calling just
now we just need to add some tests
before we get to adding some tests let s
go ahead and commit what we have to get
so we don t lose it so I m going to do a
git add dot this adds everything in the
working directory to kind of the git
staging area
ignoring everything that s ignored so
you can see node modules is in Gray
that s because we added it to the git
ignore there then we ll do a commit
where we say added just and then see
and uh created
a main js file

the first function that we write tests
for is going to be called normalize URLs
and I m going to create a file called
crawl js to write that function in so
usually when you re doing test driven
development there s kind of three steps
the first step is to stub out the
function that you want to test the
second step is to write the tests for
the function and then the third step is
to go back and actually Implement kind
of the meat of the function so first
let s step out the functions it could be
function
normalize URL and as input it s going to
take a URL string so string representing
a URL and it s going to return a string
for now I ll just return a URL string
again this is kind of a stub function it
doesn t really do anything interesting
yet but it allows us to see you know
what s going in and what s coming out
next let s go write the test file so
it s going to be
crawl test js and the way jest works is
that it just automatically looks for
files in your package or in your folder
project directory that end in dot
test js so it is important that we name

let s hop back over to the crawl js file
and we ll run
where we ll add a module exports
and this will make the normalize URL
function available to other JavaScript
files that want to import it
so now we can hop back over to
crawl test js and we can import that
function it s going to be const
normalize URL equals require and then
the path to that
file which is crawl js
that Imports that and then we also need
to import two more functions this time
from jest they ll be the test and the
expect functions


I think it s at just
cool
let s write our first test so the way um
testing works with jest is there s kind
of this top level test function and it
takes as its first input the name of the
test so I m going to call it for now
just normalize

that is the name of our function right
I m not crazy okay normalize URL uh the
second input is a function so let s go
ahead and write an empty function
within the function we can use this
expect function to do a test let s start
by
specifying what s the input to the
normal normalized URL function for now
I m going to just pull it input and

uh next I m going to
run the function and get some output so
const output equals
normalize URL and give it the input
okay and actually I m going to change
the name of output to expected
just to be a little bit more clear sorry
not expected I m crazy to actual so this
is the actual output of our normalized
URL function
next I m going to specify the expected
output so expected what do I expect to
come out of the function and again for
now I m just going to use an empty
string
finally we can use the expect function

give it the actual
the actual uh result of the normalized
URL function
and then use the dot to equal
method and give it the expected
so this line basically says
I m expecting the actual output of
normalized URL to equal the expected
output that I ve specified
if they do equal each other just will
log it as a past test right test is good
if they don t equal each other then just
is going to say the test failed so let s
go ahead and run that and see what that
looks like
so again because we have just specified
here as a script I can just run npm test
and the test passed right which actually
makes sense because we specify the input
as an empty string and the expected is
an empty string and right now all our
function is doing is returning the
string that was given so let s see if we
can get it to break really quickly
um

so I m changing the expected value and
running npm test again
and now we get a failed test
which makes sense right we expected the
string something else and we received
the empty string
so now let s talk about what the
normalize URL function is actually
supposed to accomplish
sometimes on the internet there are
different URLs that all point to
effectively the same page let me give
you an example so something like https
colon slash boot dev this this string
it points to the boot Dev homepage
effectively
this URL
also points to the boot Dev homepage
they re really the same page right one
has https specified one has HTTP but
it s really the same web page right
similarly if we capitalize the B again
it s a different string same page so
what we are trying to do with the
normalized URL function is find well
it s it s to take a URL as input and
normalize it so that the output will be
the same
or all other inputs that are the same
page right so basically if all these
strings are put into the normalized URL
function we want the same thing to come
out the other end so for example this
might normalize to
boot dev
this also normalizes to
Dev and this normalizes to boot dev
right we want to normalize different
strings to the same strings if they
represent the same web page so let s
erase all of that
and let s build an actual test Suite so
given the input let s say https colon
slash
blog boot dev I want to do a couple of
things the first thing I want to do is
strip the protocol
okay I don t care about the protocol in
fact let me add a path here let s say
slash
um let s just call it path
flash path
okay
this part of the URL the domain and the
path effectively make up the page right
query parameters protocols all that
other crap we don t really care about
when it comes to what page does this URL
represent so given this input I expect

blog boot dev
flash path
protocol is gone I m going to call this
test normalize URL strip protocol
okay and now if I were to run npm test
I fail right because I have not gone and
fixed my code up to actually do that so
let s go ahead and do that now
tap over to crawl js
the way I m going to implement this
function is to use the built in URL
Constructor we actually used it in the
course so I ll do const URL object
equals new URL
and pass it the URL string
so this will give me a URL object that
has a few properties on it that are
interesting the first is
the host name so let s do
return a new string template template
literal and the first part of the string
will be URL object Dot hostname
and the second part will be
URL object Dot pathname
so we are parsing the URL string into a
URL object and then saying all I care
about is the hostname and the path name
and I m just going to kind of shove them
together and return all that as a string

we re good to go the next thing I want
to make sure that the normalized URL
function handles is trailing slashes
so
let me add a new test Suite here
for a new test to my test suite and what
I m going to do is add a trailing slash
on the URL that slash right there it s
pretty common on the internet to have
URLs that end in slashes as well as URLs
that don t but generally speaking we
expect a a page with or without the
slash to both kind of go to the same
place right go to the same web page so
what we re going to do is just trim
trailing slashes in the normalized URL
function so if we re given a trailing
slash we ll just we ll just take it off
that way again everything comes out to
kind of one string that identifies a
given web page
okay so if we just run our test now with
this new test
um we re failing right because we don t
have any logic that strips that last the
last slash off
so let s go ahead and add that
um the first thing we can do is write a
little test we can say if
URL object
oh excuse me girl object
so let s grab the

and we can say if

is greater than zero so if there s at
least something there

hostpath Dot
lice
so negative one so this this dot slice
method on a JavaScript string this will
return just the last character of
of the string so given that there s at
least one character we re just going to
go grab the last character and check
does it equal a slash
so if
string has a slash then we want to
return
everything up to the slash so we ll do

postpath slice
and this returns a subset of the host
path string from 0 to the last
index so this is
everything except the last character
right slice at negative one is just the
last character slice from zero to
negative one is everything except the
last character
otherwise if it doesn t end in a slash

cool that seems right let s uh let s

cool we got it so now that we re
stripping uh trailing slashes and we are
stripping the protocol let s add just a
couple more tests
um make sure that we re doing a few more
things that are important in terms of
normalizing these URLs uh the first is
capitals
capitals
oh also this is this is bad we should we
should rename this test so this first
test sorry strip protocol is good on
this first one because that s what we re
doing this one we should say
strip trailing slash

blog boot dev path
remove that trailing slash
um this
this should not remain capitalized right
Capitals in a URL don t matter uh they
should be case insensitive so we expect
to normalize it down to lowercase go
ahead and run that make sure it works
it does already work which is awesome I
mean you ll notice that we don t really
have any logic that deals with
lowercasing a string but the URL
Constructor is actually doing it for us
because it knows that URLs are case
insensitive that s great we made sure
that that works let s add one more
um let s just make sure that another
another protocol is also stripped
properly we ll just do the HTTP protocol
and omit the S make sure that that works
as well again I d expect that same
output I m going to remove those
capitals though just so we don t get
confused what this test is about and
change this name to be
strip http
cool
yep still good to go now that we ve got
that function tested and working I m
going to go ahead and commit that to

well normalize urls
normalize URL sorry it s singular and
let s push that up
next we re going to be adding another
function called get URLs from HTML and
in order to write that function we re
going to need a new dependency that
dependency is JS Dom
so the interesting thing about this
dependency npm install Json is that it s
not a Dev dependency so you notice we re
not doing the dash dash save Dev
um when we install it so let me go ahead
and run that
and it should add it to our package json
this time again not as a Dev dependency
but as a normal dependency and the
differentiation here is that Dev
dependencies are just intended to be
used by the developer
whereas dependencies are intended to be
used by the application when it s
running in production so we re actually
going to be using JS Dom in our
production code crawl js rather than
just our test Suite right which is where
jest is used so let s stub out the get
URLs from HTML function we ll just add
it right here above
above normalize URL so get URLs from ml
I m going to take two inputs uh the
first will be an HTML body it s just a
string representing some HTML
and the second input will be the base
URL again another string the base URL
represents the URL of the website that
we are crawling
so HTML body HTML of the page base URL
the URL of the website that we are in
the process of crawling and then it just
returns a string
um excuse me it doesn t return a string
it returns an array of strings
um representing URLs so we ll do URLs
equals empty array and then for now
we ll just return that empty array
again we re just stubbing out the
function so that we can go right
um some tests for it let s not forget to
export the get URLs from HTML function
down in the module that exports and then
over here in crawl test js we can import
it
cool and now let s add some more vests
the first test for this function
let s name it properly
I ll hit get URLs from HTML
let s just stub everything out
so the first input because there s
actually two inputs to this function
right
um is some HTML so let s write some very

I m an opening HTML tag
do an open body tag

we ll have the link just go to the dev

anchor text of the link we can just do

okay A little snippet of HTML again this
is just a string in JavaScript when you
use backticks it allows you to do kind
of a multi line string
um so this will be the first input we ll
just call it input
HTML body
then we need one more input right
because our function takes two arguments
so we ll do const input
um base URL
and in this case the base URL just be
that
um
log dot boot
cool now we need to call the function
we re trying to test which is get URLs
from HTML
and pass it in its inputs so oh
input HTML body and input
acurl
now we need to specify our expected
value so the purpose of the get URLs
from HTML function is to grab all of the
URLs or links embedded within an HTML
page so when we visit a web page and
there s tons of clickable links we want
to grab all of those clickable links out
of the document and kind of return them
in an array of strings
so taking a look at this HTML document
there s one Link in here right and it s
this link to blog boot dev so we want
this link to come back
here in the
in the return array
okay
now if you re not familiar with HTML
that s okay it really isn t too complex
let me explain uh what this is
so HTML is just a markup language that
the browser uses to structure a web page
and this top level HTML tag is just
saying hey this is some HTML so that s
not too interesting the body tag
essentially says hey this is what you re
going to see on the screen
and then a tags are links where anything
within the href property right in this
case log boot dev
um is is what we re going to link to so
when you click the link that s where
you re going to go and then the text
within the a tag is the kind of word you
see that s clickable so this would
render to boot dev blog as you know that
underlined clickable text and if you
click it it would take you to
um the boot Dev blog so now that our
test is written let s go ahead and run
the test
and I would expect it to fail right
yep it s failing because we re just
getting back that empty array and we re
saying we expect an array with this with
this value inside it cool let s go
actually write the code so that we can
pass the test
we ll be using the JS Dom package right
the one that we already installed and so
I ll import it over here which is Dom
um the way I know how to structure the
syntax is because I went and read the JS
Dom docs which again I ll link to in the
description below but that s what I ll
be Consulting on the side over here the
jstom equals and then we ll just require

so the way JS Dom works is it basically
gives us a way in node to access Dom
apis or document object model apis so
what that looks like is we create this
little Dom object
by calling uh
new Js Dom
and passing it some HTML
give it this HTML body so it s taking
that HTML as a string and it s creating
a document object model basically an
in memory object that represents that
HTML Street tree structure
so now we can just use Dom dot window
dot document Dot
yet let s get no no query selector all
that s the one we want
now we pass in the name of the tag that
we re interested in so this will return
sum
link elements elements
okay so this this syntax
window document queryselector all this
is the kind of syntax you would use in
the browser to work with the document
object model or the Dom again this
package js Dom is allowing us to do that
in node so we can write you know a
command line script that interacts with
uh with the Dom and crawls web pages
the reason we re passing in a here is
because what we want is a list of all
the a tags in the HTML
so this gives us a nice little array
so now let s Loop over
uh loop over that array so we can do
const link element of Link elements
and for now let s just log these out to
see what they look like so a link
element is an object
that has a property and the property
we re interested in is the href property
and that corresponds to the link text so
href this should just be a string
let s just log those out and see if
we re on the right track by re running

they failed again which we expected
that s fine up here at the top it does
any console logs
um from the code itself and yeah it
looks like it s logging out that
that link text is exactly what we want
um now that we know that s working let s
just go ahead and append that to URLs so
URLs dot push
that link text
cool so we should be iterating through
all of the links in the HTML and
appending them to that array and
returning them let s see if that fixed

awesome we re all green all passing
let s add another test case as it turns
out we don t just want to pull out
absolute URLs but we also want to pull
out relative URLs so let s rename this
because in this test we are testing
absolute URLs and let s make a new test

hard to work with vs code so zoomed in
and we ll make a new test where we test
relative urls
okay
so a relative URL is a URL that does not
include the protocol and the domain it
just includes a path so in this case
let s just call it path
and just to show you what I mean I ll

it ll look like this
now down here this relative URL is the
same
as this absolute URL up here because the
way the browser works is it looks at
what domain you re on when you are
viewing a page and all of the links in
the page if they are relative which
means they start with a slash it will
assume that they are kind of attached to
the same domain so if this is a relative
URL slash path
and this is the base URL
then the actual URL when you click the
link would be the same it would be
blog boot dev path
we don t want to bring this out
um we don t want to extract it from the
get URLs from HTML function as a
relative URL instead we want to kind of
combine it into a full absolute URL so
we can actually make requests to it
later
so hopefully that makes some amount of
sense basically at the end of the day
what it means is if this relative URL is
in the HTML and this is the base URL we
want to pull it out as a full
as a full URL looks like this
okay

I d expect it to fail
because yep we re pulling it out as a
relative URL and we want it as the full
absolute let s go ahead and write some

so
um the first thing I think we should do
is kind of break down the logic tree
based on whether we re working with
absolute or relative URLs so we can
write a little test by saying if
link element href dot slice
from 0 to 1
slash so if the first character in the

then



now we know our logic works for absolute
URL so we can just throw that in there
for relative URLs we need to do
something just a little bit different
right we re going to want to push
urls push
the base URL
pended to the
um the relative URL so we get an
absolute URL right so we could do
something like this
base URL oops
evaluate that properly

link element href
right so now we re concatenating them
together
all right

we passed next let s add a test that
pulls out
multiple
multiple links so I m just going to copy
this
in fact let s have it do both a relative
and an absolute URL

here and we ll do let s just call them
path one and path two and then we would
expect to get back path one
and

take a look at that make sure I m just
going to say the blog path one and boot

take a look at that yeah that looks
right
and I don t think we ll need to change
our code to pass this test hopefully

yep we re good to go one last test for
this function is that I want to make
sure that if we re given a bad URL
that we don t include it
in the extracted URLs right that come
back from the get URLs from HTML
function so let s write an invalid URL
here let s just say invalid right
invalid URL now this is invalid because
this isn t a relative URL it doesn t
start with a slash and it doesn t start
with a protocol either so it s not an
absolute URL so
um if if this were rendered in a browser
this would just be a broken link right
um invalid
so what do we expect to happen well
given these inputs I expect
our function to not extract to not
extract any any URLs let s go ahead and
run the test and see if it works in its

no we are failing failing that test
looks like we expected an empty array
and we did get back that invalid string

one way we can test for URL validity is
just to use that same URL Constructor
that we used in normalize URL
go ahead and do that
so a const a URL string
this same thing
um actually let s do URL object let s
just parse it directly into

now if the URL Constructor is given an
invalid URL so if this string is is not
a valid URL this will throw an error
okay
so it doesn t throw an error we should
be safe to push the URL objects
href
href property which is
just a stringified link right
um however if it does throw
an error we need to be able to catch
that so let s do try
all this in the try block and then catch
error
and if we get in there we ll just log it

um error with relative URL
gonna be air Dot message and the reason
there s a DOT message property here is
because this is an error object rather
than just a string so that s how we
access
the error message
cool and then we re going to do a
similar thing for the absolute URL
except of course we don t need to parse
it this way

this should work right if the URL
Constructor throws an error we ll catch
it I should probably fix that copy pasta
absolute URL

awesome looks like we passed now
um and if I scroll up yep there s a
console log there saying error with
absolute URL invalid URL now that we ve
got that all working and tested let s go
ahead and commit it
it was the get URLs from HTML function
and tests
and I ll push that up
let s get back to the actual application
so so far we ve been writing these
helper functions right in the uh
in the crawl js file and we ve written
some tests to make sure they re working
but our actual program still just prints
hello world so let s update that a bit
for now what I think we should do is
write a main function so this will be
the entry point to the application
and all it should do at this point is
process command line arguments so at the
end of the day our script is going to
take as input a website and crawl that
website so we need to be able to take
that input from the command line and in
node this is pretty easy there s a
there s an object and if at the global
level called process
and ARG V is a property that we can use
to grab the grab the command line

let s go ahead and check to make sure
that the command line arguments have
been passed in properly so if process
oops
process dot arcv dot length
is less than three


provided
and if everything goes well we ll just
print console log
starting crawl
all right let s test that really quick
just to uh make sure it s doing what we
think it is
so when I run npm
start
what I m expecting to happen by the way
I should probably also like exit here or
something okay cool that same process
object has a process dot exit
and then we can pass it an error code
yep code okay so one is a pretty
standard error code when things go wrong
so if we have not been given
enough command line input
we ll log this in error so let s just
run that let s see yep no website
provided and it aired and then let s see
what happens if I do provide let s just

starting crawl okay perfect
so you might be wondering why are you
checking for length three wouldn t it be
like one or something well let s print
out each entry
uh
so you can see what s actually in that
ARG V so let s say ARG of process re

okay
so
what are the arguments
interestingly enough when I give it one
command line argument
the length of this array process orgv is
actually three
the first argument is The Interpreter
just kind of strange right it makes
sense if you ve done
some more I don t know low level
programming but basically the first
argument to any program is always the
name of the program that s just kind of
how these operating systems work so node
is technically the name of our program
because node is what s running and
interpreting our code because we re
using an interpreted programming
language
right the second argument to our program
is the name of our code or the entry
point file right in our case main js so
this is just that full path
to main js and then the third argument
finally is the one that we are actually
passing in to our program let s fix up
this typo provide did
provided and let s make our checking
just a little bit more robust so if it s
less than three we re going to say no
website provided but I also don t want
people thinking that they can pass in
you know a second website right like Dev
or something like that that s that s not
going to do anything different so we
should probably add another check
and say if it s greater than three so or
more than the standard amounts of
arguments are provided we ll say

too many command line Hogs
and we ll exit
so by now we should know that we have
exactly three command line arguments so
the base URL that we ll be crawling is
going to be process arg V
at index 2
right and now let s update this log

say starting crawl of
base URL
cool

oh yeah I should probably provide a

starting crawl of wagslane dev perfect
let s start actually crawling some web
pages so now we re going to get to the
HTTP part of this uh of this project
let s hop over to the crawl js file and
we re going to create a new function
called crawl page
and as input it ll take a current URL
and to start let s just log that we re
crawling the page so console log


cool
next let s make a fetch request to that
URL right so this is going to be a get
request because we are hoping to get
back some HTML
so const
resp
equals
weight we should probably await the
promise but we re using the fetch API
and then we don t even need to specify
options kind of by default
um fetch does get requests so we can
just fetch that current URL
um you ll see this red squiggly here
that s because this actually needs to be
an async function so it returns a
promise oops

uh what do we do with the resp object
Well for now let s


let s just log out the response body do
rest dot text
so this might be new to you you ll
remember that when we were working with
the JavaScript uh the Json apis right in
the course we were often using dot Json
and that s because we expected the
response body to be formatted as Json
well now we re expecting the response
body to be formatted as HTML so we re
going to just parse it as text again
because we already wrote get URLs from
HTML which takes HTML like as a string
as text as input so we can just kind of
grab it as text
um cool let s run this
um actually we re gonna need to hook it
up right we need to hook it up to main

crawl page equals require


here we can just crawl page
and give it that base URL
okay so let s rerun our application and
see if we make that get request properly
and again this is just my blog
um it s a little website with about 20
pages on it
um it s not huge you can use my blog to
test I don t care
um or you can
use a different website if you are going
to use my site please don t DDOS it
uh that I really appreciate that but uh

crawl page is not a function ah I m a


let s see starting crawl actively

okay
is that what we expect did we log
anything
I ll start log resp text ah yes probably

this dot text method returns a promise
so let s await the promise and log it

awesome okay now we re getting some HTML
right so this is this is all the HTML on
the home page of my blog just a big fat
dump of of HTML data so we have a
problem if a user types in bad inputs so
let s uh do npm start and then HTTP uh
garbage URL right it s an invalid URL
at the moment our code just kind of
panics and dumps out the stack Trace
we don t want that for a couple reasons
the first is this isn t a very good user
experience we probably should give just
a prettier error message and exit
cleanly when there s bad user input but
also as we crawl Pages because we re
going to be crawling multiple pages with
our website or with our uh with our tool
we don t want to encounter one bad link
and have the whole process just kind of
vomit and exit we want to be able to
handle that and and keep moving and keep
crawling uh more pages even if there s
an invalid link somewhere on a website
so let s add some try catch uh handling
here
that will be step number one the this
fetch call can error so let s throw it
within a try block and then we ll catch
the error
and log it out console log

page
all right URL

cool much better we don t get a huge
stack Trace we just we just log out
log out a little message here
so you may have noticed this little
warning here that
historically was only available in the
browser environment and we re running
JavaScript now on the command line using
node
recently node did add support for the
fetch API right for this fetch call as
it built in but it s still considered
experimental they could rip it back out
um I think that s unlikely I think it s
likely here to stay if for whatever
reason they did rip it out we could
always install node fetch which is a
package that does essentially the same
thing
but in order to ignore this warning
because I m aware of the fact it s
experimental and I don t want it telling
me that every time I run my program I m
going to come in here and pass the no
warnings flag into the node interpreter
and so now if we run it
we don t get that warning
so we ve checked for an error in the
fetch call but now I want to check for
some more things because there are some
other things that could go wrong
the first thing is the status code right
we need to check and ensure that the
status code of this fetch request is a
200 level code if it s anything over
um well I guess 2 300 would be okay as
well we re okay with a redirect but we
shouldn t be in the 400s or above right
the 400 level 500 level error codes so
I m going to write a little if statement
here that says if
resp dot status
greater than 399
that would mean again 400 client error
500 server error uh then let s log an

air in Fetch


that current URL
and if that

we ll just stop crawling this page right
if this page is broken we re just done
we can just return from this function

cool let s go ahead and make sure that

if I crawl a valid URL like waxlain dev
we get the HTML so that s that s all
still good now let s try
a URL that doesn t exist so I would
expect this to result in a 404 so I m
just going to type in like a garbage

cool Aaron Fetch with status code 404 on
page
garbage path

one last thing I want to check just to
be really sure that everything in this
function is going off without a hitch is
that we are actually getting HTML back
so when we parse the response body right
does it actually contain text that
represents uh valid HTML and the way I m
going to do that is just by parsing the
headers so we can do this const content
content type equals resp dot headers Dot
yet
and we ll grab that content
type

and then we could say if
content type
got my parentheses


then we ll want to throw a similar log

non html


content type there
content type on page okay cool
how do we test this one
um so we want a value URL it doesn t
have an HTML response my site map let s
use my site map so my sitemap is not
HTML it is XML
so if I do

awesome non html response content type
application XML on page
okay and then let s just make sure that
we didn t break another normal flow of
things
ah text HTML Char set utf 8 okay so what
we should probably do then
is maybe do an includes here so rather
than saying the content type is text
HTML
um because that header can have

the uh the character set of the response
so it is valid HTML but it s also giving
us kind of an encoding type so I m going
to change this to dot includes
X to HTML
now as long as that string is in the


what did I do wrong now content type

oh no it does not include text HTML
making all sorts of embarrassing

cool there we go and just to be super


now that we re grabbing HTML with some
basic kind of error handling let s go

crawl page
um
let s just say crawl single page with
error
and blank
and we can push that up
now it s time to update the crawl page
function so that it can crawl an entire
website rather than rather than just a
single page
so instead of just accepting a current
URL it s going to have three arguments
there s going to be a base oops a base
URL
a current URL and a Pages object
so the base URL is going to be
essentially the starting point right the
home page of the website typically the
current URL will be the page that we are
actively crawling
and then the pages object is going to be
an object that keeps track of all the
pages we ve crawled so far
first we need to make sure that the
current URL is actually on the same
domain as the base URL we don t want to
crawl the entire internet here whenever
we encounter a link that links out to an
external site we basically just want to
ignore it so we can do that by using the
new URL Constructor right so we could

make that a const
equals new
RL base URL

and say if

object Dot hostname


then we can just return turn early
and actually what this function returns
isn t nothing anymore it Returns the
pages object
that s going to be how we keep track as
we call Crawl page multiple times it s
going to be how we keep track of all the
pages that we ve already crawled so we
can return early and just return that
same Pages object that we received as
input because if if again if these uh
host names are different we re going to
skip this page next we need to see if
we ve already crawled this page right so
let s grab a normalized version of the
current URL so const normalized

and we can just use that normalized URL
function we ll let me expand this so we
can see more code
okay so we just call normalize URL and
give it the current URL
so the way we can check if we ve already
crawled this page is if the normalized
current URL exists within the pages
object the pages object is essentially
just a map of URLs normalized URLs right
so we don t get duplicates to the number
of times that we ve seen that URL or
that we ve crawled that URL so we can
say is if
pages
at normalized
current URL
greater than zero
then we can just
increment pages that normalize the
current URL
so plus plus and return pages
so we re basically just saying if I ve
already seen this page I m going to
increment the count right the number of
times I ve seen this page and this is so
that when we actually go generating a
report we can tell the user how many
times a certain page is linked to on the
site
so if we already have an entry we
increment it and return so we ve made it
this far
we do not yet have
an entry for the normalized current URL
so let s create it and we ll initialize
the count to one right this is the first
time we ve seen this URL or that we re
crawling this URL next I m going to move
this log statement down
where the crawling actually
happens if if any of this happens right
if we if if we re seeing an external
link or if we re processing a link that
we ve already processed I don t want to
be logging this this crawling message
over and over and over again I only want
to log it when I m crawling a new page
so after logging uh which page we are
crawling we ll go ahead and fetch the
page just like we were before but
instead of logging out the HTML that s
something we definitely don t want to do
let s save it in a variable honest HTML
body
sponsor a text
and the next step will be to extract all
of the links from the HTML so that we
have more pages to go crawl luckily we
already wrote and tested that function
so we can do next URLs equals get URLs
from HTML and we ll pass in the HTML
body
and the base URL
and let s say that s a const
cool now we can iterate over the next
URL so const
or
onst next URL

now we re going to recursively crawl
these pages so
if you re not familiar with recursive
functions our recursive function is just
a function that calls itself right so we
crawl the root page and then we find all
the links in that page and then we crawl
those pages and those may have links and
we ll continue to crawl all of the pages
on the website until basically these
base cases are completely satisfied
right either we ve we re just hitting
links that are external to the site so
we re not going to crawl those or we re
just hitting links that we ve already
crawled so we should just exhaustively
crawl the entire website
so uh we re getting a new pages object
right because remember now this function
returns a Pages object
so Pages equals a weight
uh crawl page and we need to pass in
the same base URL
right but now rather than passing in the
current URL we ll pass in the next URL
as kind of the next current URL right
and then the current value of the pages
object so we re getting back kind of a
new updated ages object

and then when we re done with that so
once we ve crawled every page
then we can just at the end return the
pages object

that makes sense to me
um let s go update main js so that it
actually works the way we d expect so
now the crawl page function takes three
arguments
um to start it will take the base URL
twice right we ll pass in base URL not
only as the base URL but also as the
current URL because it s our starting
point and we ll start with an empty
object or the pages object
because we haven t crawled anything yet
that object will get filled in as we
recursively crawl more and more pages
and then let s save the results in a
Pages object
and for now let s just log those out so
for

we ll just log out the entire entire
page object
cool let s go ahead and run this and see
where it gets us
so I m going to
again just crawl

and we already screwed up what do we got

pages is not iterable that makes sense
this was a if for some reason in my head
I thought this was an array it is an
object so we need to do
object dot entries
that will allow us to iterate
over the entries in the object okay

cool another issue here so you cannot
read properties of undefined after
hitting this XML page oh you know what
we ve got
a return in here
remember that we always want to return
the pages object so even when there s an
issue we still want to return the
current Pages object we re relying on
that

cool so it looks like it s crawling
um that s good
we crawled a bunch of pages
um we didn t see anything on the other
side here
so when we iterated over this at the end
oh you know what our all page returns a
promise let s not forget to await that
and the main function also needs to be

right

there we go
now we re seeing some some results
okay so we crawled through all the pages
on the site that s great we even handled
the site map and this is what we got out

this giant list of all of the pages and
how many times they are linked to
so that s great this is the data that we
need now to do the last step which is
building a report of all this
information and before I forget let s go
ahead and commit all of this to git
don t lose our work

let s convert this kind of nasty just
dump of JavaScript objects and arrays
into a nice report
to do that create two new files
report js and Report
dot test js there ll be one one function
we write that I think is worth writing
some unit tests for so the function that
we ll be writing a unit test for is
called sort Pages it s a function or or
Pages as input it takes that Pages
object and it s going to return an array
so for now I m just going to stub this
out
have it return an empty array let s hop
over to the test and let s grab let s

give us somewhere to start instead of
testing stuff in crawl js we ll be
testing within report js and the
function we care to test is called
sort pages
okay so sort pages
all right the input is a Pages object so
let s build kind of a manual pages
object so it could be something like
https
slash wagslane
Dev
and remember each URL maps to how many
times that URL shows up as a link on the
website so let s just do three
okay so it s a very simple Pages object
and then we ll call sort pages
and the expected in this case
be an array
and it will be an array of I believe we
want it to be an array of
um essentially tuples which are
basically just an array of arrays where
the first index in the array is
the URL and the second index in Array is
the number so in this case the expected

three and then the whole point of sort
pages that actually sorts the output
array putting the kind of highest count
URLs at the top lowest count to the
bottom or or first and then last so

make this one a smaller count
so that should show up
next in the array right we want highest
to lowest

okay so hopefully that makes sense
taking this object as input we re
converting it to an array and we re
sorting we re sorting the array
first index is the URL second index is
the count
okay
um that looks pretty good
now we haven t actually fixed up our
function yet so I m expecting this test
to pass to fail

cool
one test is failing right this is what
we expected and we got
should have got


or pages is not a function okay so I
forgot to export of course module Dot
exports
page
now we can actually import it and use it

okay now we re failing for the right
reason we have unexpected okay cool now
let s go ahead and write the let s write
the sort Pages function so the first
step is just to convert this into an
array so Pages array equals object dot

now it s important to understand the way
this function works is it will take the
pages object and convert it into that
structure that we re expecting right and
array of arrays where the first index
is the key in the object and the second
index is the value
so this gives us the structure we want
but now we need to sort it so
we can do Pages array dot sort
JavaScript has a built in sorting
function but we need to tell it how we
want to sort
um how we want it to sort all these
entries so A and B
represent
um two individual entries in the pages
array right so two individual arrays and
the kind of value that we want to sort
on so a hits is a at one
and B hits equals B at one remember
because
index one has the count that we want to
sort by right index 0 has the URL
okay and then what this compare function
returns is a number
and because we want to sort from
greatest to largest we ll want to return
B at 1 minus a at 1
essentially the way the sort function
works is whether it s given a kind of
positive or A negative return value is
how it sorts all of the individual
um all the individual entries in the
array
um I d encourage you to go take a look
at the documentation on the sort
function if you re a little fuzzy on how
that s working but if we wanted to sort
the other way we could just Swap this
right A minus B but because we want to
go greatest to least we ll do B minus a
cool and then we just return the pages


awesome
we passed that test
let s go ahead and write another test
um just to be sure that the sort is
working right we were only really
sorting two two pages here so two sort
Pages two pages let s do something a
little bigger
let s do like five pages
and I want them all out of order

to

four
and let s just go

right

that s super out of order right
cool and what do we expect from this

copy pasta some of these

nine hits at the top

five hits
next we would have three hits and then

two hits and finally
okay let s make sure that test passes as

cool we re good to go so now that we
have sort Pages working let s write one
more function
that will format the entire Pages object
as kind of that beautiful report in the
console so this one we re just going to
call Print report
takes Pages as input
and the first thing we re going to do is
kind of separate if you remember our
program as it crawls
um kind of writes some stuff to the
console so I think we really want to
separate all of that text from the
report itself so I m going to go ahead
and log a bunch of equal signs to the



maybe another one of these
okay then I m going to get the sorted

in the pages object
cool then we could iterate over all of
the sorted pages so for honest

and remember each sorted page is an
array so we can get the URL is sorted
page at zero right and balanced it s is
the sorted page at one
so the page URL and how many times it
appeared in the site how many times it
was linked to right
then we can log an entry
and say something like
um
how should we uh


URL
that
and then let s end the report
similar kind of output
cool I think that ll look good
now we can hop back over well let s not

now we can hop back over to main js

and now instead of this this nonsense we

cool after all that let s go ahead and

start it from the root of my blog
right crawling awesome okay so actively
crawling all the different pages that s
great report starts
61 links to the home page 60 links to
tags so it makes sense that these have
lots of links because they re kind of in
the menu of the site so essentially
every page links to those pages and then
these are links that are actually found
kind of within the body text of the
individual posts
if you ve gotten this far great you ve
got a working web crawler I d encourage
you to update and enhance your web
crawler test it on different sites see
if there s any edge cases in the code
that maybe we re not handling
and this will make a great kind of Base
project for you to build on top of and
add to your portfolio of course don t

prints
oops


push it up to
either GitHub or gitlab or wherever you
store your code
um again I d encourage you to extend
this project if you want to make it part
of your portfolio that you re showing
off to employers and that sort of thing
there s plenty of things that could be
improved here right maybe instead of
logging the report to the console maybe
you create an Excel spreadsheet CSV
format but at the end of the day the
more personal you can make it and the
more functionality you add to it the
more impressive it will look on your
portfolio we ve written a lot of code
good job making it through the entire
course and the entire project this
course is actually just one small part
of a larger back end development career
path if you are curious about building
back end applications in Python
JavaScript and go then definitely go
check out the rest of my courses over on
boot dev if you want to stay up to date
with all the content I m publishing then
there are three places I d recommend you
go check out the first is follow me on
Twitter at wagslane the second is go
subscribe to my YouTube channel which is
boot dev and then finally I have a
personal blog over on wagslane dev and
I ll include links to all of those down
