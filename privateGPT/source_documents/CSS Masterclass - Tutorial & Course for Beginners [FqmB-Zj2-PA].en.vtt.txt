css stands for cascading style sheets
it s a coding language you can use to
style your html and make it look pretty
to use css you must have some sort of
html file in place
since html and css are always used in
tandem together
once you have an html file you can
create an open and closing style tag
and begin writing css inside of it
styling your html with css typically
starts with writing what s known as a
class
an identifier prefixed with a dot and
suffixed with an opening and closing
curly bracket
inside these curly brackets css
properties are written to determine
exactly how an html element should look
there are a set number of properties you
can use to style an element
the most basic being probably color
this property decides what color your
text should be
if we were to create a css class called
text red
we can determine the color it ll change
text to by typing
color colon red
semicolon inside of the curly brackets
here color is the css property we ve
selected and red is the value we set it
to
all css properties must be followed with
a colon to help separate the property
name and its actual value
the semicolon at the end of the
statement declares that our property is
complete and that we can add more
properties to this class if we d like to
style it further
so this is what we call a complete css
class it starts with a dot
is followed with an arbitrarily named
identifier with opening and closing
curly brackets
then inside of these curly brackets are
a list of styles we d like to take
effect when this class is applied to an
html element
to apply this class to an html element
all we need to do is
add a class attribute then set it equal
to the name of the class we just created
which in this case would be
text dash red on save and browser
refresh your css should take effect and
the element should be styled accordingly
there s no limit of properties you can
put inside of a css class and no limit
towards how many css classes
you can use on one particular element so
you can mix and match accordingly to get
the exact look you re going for
this course will further your css
knowledge and teach you all the css
properties you need to know to style
your own mobile responsive website
by the end of this you should have the
full ability to create and style your
own web pages
understand the different kinds of css
methodologies available to us today
and launch your own site live on the web
so now that you know the bare basics of
css let s get right on into the project
that we re going to build
so here it is we re going to be
developing the home page for
chriscourses com we re going to start
with just bare bones html meaning no
styles applied
and then gradually as we go about
developing different sections we re
going to learn more and more about css
and how to apply those exact css
properties to different things
to get the exact effects we re looking
for so as you can see we have this nice
little hero section up above a hero
section is basically just
the introduction to your site it kind of
consists of everything we see up here
from the header
down to this little stat section as we
continue going we re going to go to a
popular courses section
we have a feature section down here
testimonials with the slider
and then we have a pricing section
frequently asked questions section and
then
a footer so there are going to be two
versions of this course there s going to
be a free one and also a
premium one for the free one we are
going to learn everything from up here
the header
down to the stats section so mainly the
hero now that might not seem like a lot
relative to the rest of the site but i
promise you everything you need to know
to style your own web pages within css
we are going to learn just within this
hero section we are going to learn how
to correctly position our elements how
to get the right font size
how to make sure that everything scales
responsibly as you begin resizing your
website
all the way down until we get to a
mobile view as you can see right here
we re going to be developing all this
within the free version
but if you d like to take this to the
next level well everything else we re
going to be developing within the
premium version of this course but like
i said everything you need to know to
get started as a web developer with html
and css
we re going to do within this hero
section so don t feel like you re really
missing out with too much
as we go on to the next sections in the
premium version so to start we typically
need
some sort of file to work off of
now since this is already developed on
my website we could work off of the main
website and use this as our prototype as
we go
however when you re in the real world
working with clients and designers this
probably isn t feasible because you re
going to be the one responsible for
developing the actual website
as a result it s most likely that you re
going to be handed off some sort of
design file and
there are a number of options on how
these design files are handed
off one of the most popular options
today is called
figma and as you can see right here this
is what figma looks like and it s
basically a program in which designers
can simply edit text
move things around as they need to get
the exact look that they re going for
we designed things before we actually
developed them because designing takes
less time we don t want to go about
developing something and not be happy
with it so typically it s smart to
prototype your website before actually
going through with development
one of the nice things about having a
design file like this in figma is if we
ever need to see the exact
properties that an element has we can
simply click on that element
and it lists out all the properties on
the right hand side for us we can see
that this text
is a font family of lotto it is bold it
is 60 points large and so forth
so it s a really nice way to make sure
that you re styling your website
correctly as you go from just basic bare
bones html
to an actual full fledged design like
this now you ll see right here we have
two different designs we have a mobile
design and a desktop design
typically when you re working with a
client you ll want both of these because
otherwise your mobile site is just going
to look like complete garbage
and you as the developer are going to be
responsible for making sure that this is
mobile responsive scales down from
desktop
down to mobile if you have a clear idea
of what they should look like on mobile
your life is going to be a lot easier so
if you re developing a client website
make sure you ask for a mobile design
because it s very important to make sure
that your site
also looks good on mobile given how many
more people are using their phones to
visit sites these days
so this is the exact file that we re
going to be working off of
you can get this exact link in the
description of this video basically what
we re going to do
is we re going to click on that link
we re just going to paste it in our
browser we re going to go ahead and
visit it and this is what your screen
will look like if you re not logged in
and you don t have a figma account
don t worry i think my accounts are free
so you should be able to follow along
with me without paying for anything
additional
so you ll see right here we get this
little banner that says welcome to figma
we re going to go ahead and sign up
with google at least that s what i m
going to do you can do either one sign
with email or google i m going to click
google
and then i m going to enter my email
address
so once i m here i ll enter my password
as well and now you ll see we re
prompted a bit further to create an
account to collaborate on
this design so this is my name doesn t
really matter you don t have to put your
name here you can put something
anonymous if you d like
doesn t really matter and you could just
select other for this that doesn t
matter either once you have that in
place just hit create account
and you should be in the exact file that
i m in that we re going to be developing
off of the only difference is you re not
going to be able to move stuff around
like i am since i m the designer of the
file and you don t really want to do
that anyway since multiple people are
going to be working on this but what you
will be able to do
is select different elements on here and
view their exact properties and even get
some of the css written out for you so
we can go about developing this in the
most efficient way possible
making sure that everything is near
exact and looks good close to the design
so once you have a figma account and
you re on this page we can go ahead and
start creating our file structure
so what do we need to actually develop a
page like this
all we need is one file and that is
index html
so to create a file called index html
here s what i m going to do i m going to
go ahead and open up
my text editor of choice which for me is
going to be
sublime text this is all we need to get
started so
here once i have a new file open and if
you don t have a new file open by
default right here when opening your
text editor
you can simply go to file new file it s
going to give you
a new file which we can work out of once
we reach this point all we have to do is
hit command
s or we can go to file and just hit save
and then we can determine where we want
this project to be
so i pretty much keep all my standard
web projects under a folder called web
it doesn t really matter where you put
this wherever s comfortable with you
could be desktop documents whatever it
doesn t really matter i m going to go to
web
i m going to create a new folder called
css
course i think that makes sense and then
i m going to create
this file as index html
i m going to hit save and this is really
all we need to get started is this one
file right here so just to make sure
that this file works we can go ahead and
write
some dummy html just a simple h1 tag
make sure that you save and now to open
this we can go ahead
open up our finder and go to our newly
created project directory for me it was
under web
i called the css course that s going to
be right here this is the file in which
we just saved so now if i double click
this
it s going to open up in chrome because
that is the default browser i have it
set to
and you can see that our text is now
displayed if i go ahead and change this
save and refresh it updates accordingly
so this is really all we need to get
started really simple
so now that we have an index html file
in place what do we need to do now
well all we need to do is start marking
up our site based off of the design that
was given to us
so when we mark up a site with html
based off a design we always go
from the top to the bottom so if we go
ahead and look at this we re going to
start off
with a header all the way from the logo
to the sign up button over here well
that pretty much consists of the header
of the site it s at the top it s near
the head
not the bottom so how should we actually
start marking up
our header well we know if we ve taken
the intro to html course and should
probably have
a little bit of html knowledge here
before proceeding we know that for the
header of a site we can use what s known
as
a header tag so all this right here from
our logo to sign up is going to be
contained
within this tag right here and this just
helps us understand what part of the
code is the header
compared to something else on the site
such as this section right here or the
stats section or something else
it s just a way for us to identify in
the code what a particular section
is so header consists of everything from
the logo to sign up what comes next
well we know we have a grouping over
here these are all grouped together
so when you have just a generic grouping
of elements together it s safe to use a
div tag i don t actually know if it
stands for divider but whenever i see
div
i think of a divider because it divides
all the elements in one group
from another so we have one div tag
that s going to represent all of this
over here
so what do we put inside this one div
tag well we know
we have some sort of logo aloha can be
brought in as an svg element
or an image element we learned a lot
about the image element in the last
course so i think it makes sense
to add an image tag to represent our
logo
after that what comes next well we have
it looks like links to a website now
what element do we use for links it s
always going to be
an anchor tag so what we re going to do
here is we re going to create an anchor
tag
and since this is a text tag we can
begin writing our text inside of it
so this first one is going to be pricing
we can go ahead and copy
this anchor tag directly paste it
beneath
and instead of pricing we know courses
comes up next
do the same thing for blog
do the same thing for form so this is
exactly how i would begin marking up a
site for any client that i m working
with everything that we just wrote over
here
is an html representation of this one
grouping over here
but we re not done just yet as we see we
also have a login and sign up button
within our header
so this is a separate grouping a
separate division divider whatever you
want to call it
so we re going to create another div and
what s inside of this grouping right
here
well looks like we have probably another
anchor tag so we re going to go ahead
and add one of those
this is going to be login and then we
have what looks like a button element so
we re going to use
the button element that html provides
looks something like this just button
and button and we can go ahead and write
sign up inside of that so we can get rid
of this
h1 that we were testing things out with
earlier
and when we save this and refresh our
site in the browser
this is what our site is going to start
off looking like it looks really bad
there s no doubt about it but as we
begin adding css it s going to look
exactly like what we have over here
that s a really cool thing about css
so this markup right here for the header
is really all we need to get started
we ll continue to mark up our site as we
go so things such as the hero things
such as the stats section
all that will be done as we go so you re
learning only the exact
things you need to get started with html
and css and start
developing your own website so one thing
i m going to do is i m going to organize
my windows really quickly just so we can
have our code open
along with our design and our website
all at the same
time so what i m going to do is i m
probably going to leave the design open
as the biggest window i m going to go
ahead and grab
our rendered code i m going to put it in
the bottom right hand corner
i ll put our actual code in top right
hand corner just so we can see
everything as we go
so our goal here right now is to get
this to match up
with this so the first css property i
want to teach you guys about is going to
be background color
because we ve already learned about
color and i think this is the next step
a very easy step to get started with
styling your element
so here even though this is an image in
the background if we look at the rest of
our site
such as this popular courses section
obviously there is some sort of
background color associated with it and
we get that background color by using a
background color
property with css so let s go ahead and
start writing our css you know how to
write style tags
so at the top of our file we re just
going to go ahead and create
some style tags and inside of here we
can begin writing some css classes
so what is the css class that we want to
write so it looks like based off our
design if we want to start with just
this really
dark bluish gray color it makes sense to
create a class called
dot bg for background dash
gray and i m going to add a dash here
and write
900 with opening and close the curly
brackets
now this convention right here for
colors is from tailwind css it s a very
popular css framework
which we ll get into later but since
we re creating our own css as we go i
want to show you exactly how this
works the name for your class it can be
whatever you want this is a legit class
right here that we can put on an element
but we want to create a class name that
actually makes sense when we begin
applying it to different things
so a background gray of 900 is going to
represent the darkest
gray that you can get within a color
palette typically when you re designing
a website you want about
nine different shades of our particular
color i know it seems like you probably
only want five colors for your site
altogether but the truth is
the more shades that you have for one
particular color the better your site
can look because you can contrast things
and make sure that the user s focus is
only on exactly what you want them to
focus on so one of the shades we have
is going to be 900 and if we were to
create all the shades for this
background it would go from 100
to 900 so 100 200 300 400 500
that s besides the point all we need to
know right here is this background grade
of 900 is going to be a very
dark gray so how do we make sure that
when we apply this class to an html
element that it has a dark gray
background
well we need to use the background dash
color property so whenever we have a
property it s always followed with a
colon
and then ends with a semicolon and here
is where we specify
what the actual background color is and
we can choose from a set
list of colors that is given to us
through browsers such as red
green blue the list goes on and on for
these or
we can use hexadecimal values such as
something like that
we can also use rgba values and
hsl values if that s something you re
interested in most of the time when you
receive a website from a designer
and they give it to you in a figma file
or an xd file or something
your colors are going to be in
hexadecimal format but just to start to
make sure this background color is being
applied even if it s not the right color
let s just go ahead and write
red for background color so once you add
red inside of here we can go ahead and
copy this class
and what element do we want to put this
on well if we wanted
the entire background for our header to
take
this background we can go ahead and add
a class to a header tag
let me just go ahead and paste that in
so if we save
and refresh in index html you ll now see
that our header is taking the background
color of red
like i said these class names are
totally arbitrary even though this says
background grade 900 is taking the
background color of red because that s
the property that we set
within our style tags in this class
right here
but we know we don t want our background
color to be red we want it to be this
dark
grayish color right here just to start
so in order to get
this exact color all we have to do is
click within figma
on the background and if you look on the
right hand side in the sidebar we re
going to have a section called
fill phil is just another word for
background color essentially
so here the fill is one two one eight
two
six this is a value in hexadecimal
format
so what we re going to do is we re just
going to simply copy
this code right here and within our
background color property instead of
referencing
red we re going to reference pound sign
whatever you want to call it
we re going to add this six digit
hexadecimal number
and if we save and refresh you re going
to see
now we have the exact same color that s
listed within our design so we re on the
right
path now this hexadecimal format right
here to give you a brief intro to it
each of these digits right here can be
anywhere from
0 to 9 to a
to f it can be any one of these digits
or any one of these characters
a to f and each of these represents the
brightness of a particular value
so the closer i go to zero the darker
this color is going to be
but the closer i go up to f
the lighter the color is going to be
these first two digits right here
represent
the amount of red that should go into
this color so if i want this color to be
only red we know that red should be the
brightest value
within our little coding system right
here and the brightest character we have
within this coding system
is f so for these first two characters
right here i m going to write
f instead of one and two and this is
going to make sure that our color has
the brightest red value associated with
it the second two digits
stand for green r g
b can you guess what the last two stand
for they re going to be blue
so if we want to go ahead and make sure
that we re only displaying red
we have no green and no blue taking
effect for the green
digits right here we can make sure that
they are the darkest value within our
coding system
so we go ahead and write zero zero for
green and then for blue
we also make sure that blue has the
darkest value available to us
if we save this we can go ahead and get
rid of this coding system wrote out
right there
and refresh well now our background is
back to red because we use the correct
characters within our hexadecimal
system we can bounce between red blue
and green
by changing red to the darkest value
available which is zero
changing green to the brightest value
and these can be lowercase two it
doesn t really matter
we save and now our background is green
same thing for blue if we want to make
this completely blue
we just go to our final two characters
right there save refresh
and now this is blue you kind of get the
idea so when we get these values right
here it s just a perfect mixture of red
green and blue values that give us this
nice dark
background this is usually determined
from some sort of design
program in which this fill is chosen
makes our lives a lot
easier so we don t have to guess these
values ourselves
so if we go ahead and save that back to
what it was we now have that nice gray
background we were looking for
so even though we have this dark gray
background one thing we have to note is
that our text
isn t really legible right now because
it doesn t contrast well enough with the
background
a dark purple color by default is not
going to be very legible if it s on a
very dark background
so what property can we use here to make
sure that our text
is being viewed we learned it in the
very first lesson in this course
and that is going to be the color
property so if we want our text
to be white like we have in the design
right here what we can do is we can
create a class
called text white this is going to
change our text
white so i want to challenge you to
create this class on your own before
proceeding
so you can get the right value in here
the right value is going to be
color colon white and now whenever we
apply this class
to an element such as our anchor tags
right here we ll go ahead and add a
class
attribute and then paste in text
white if we go ahead and add this class
in there now you ll see
our text is white so we re getting
closer to what we see over here in the
design
we want to make sure that all of our
anchor tags take this text white
class so we re going to go ahead and
copy this class
onto each of our anchor tags so now when
we refresh
we can see pretty much everything it
looks like we missed login so we ll go
ahead and add that there as well
and now we are looking in pretty good
shape getting closer and closer
now obviously right here things aren t
really laid out correctly
our pricing courses all those links over
there are on the left hand side and then
log and sign up are on the right hand
side
in order to get this effect correct
we re going to have to learn a bit about
display properties
which can be a little tricky but before
we get there i want to fix one quick
thing which can trick a lot of people
this is if you look around our header we
have some sort of margin some sort of
spacing that is pushing our header
from the window of our browser now what
is that well to find out we re going to
learn
how to inspect an element by inspecting
an element what i mean
is within our browser we can see the
exact properties taking effect
within our code to inspect one all we
have to do is go to our browser
and right click the element we want to
inspect
so i m going to inspect our header just
click inside of the dark area
and i m going to click this little
inspect option this is going to open
up a console window and to view this you
probably want to make this full screen
so we ll go ahead and do exactly that
and you can see right here
within this elements tab we can see
exactly how our site is being rendered
so we see our header right here we have
our divs we can double click to go
inside of them
and we have all of our elements as we
wrote within our html you can see them
being highlighted up above as i hover
over them so where is that spacing
coming from well let s go ahead and
highlight
some of the elements that are being
inputted for us automatically such as
our body our head and our html tag
well we don t see any spacing within our
html tags we ll go to head
nothing really there either but when we
hover over body you re going to notice
an
orange border around our website this
orange border within chrome stands for
margin margin is spacing that separates
elements from other elements and by
default browsers give the body tag a
margin
of what we see over here the style is
being applied a margin of 8
pixels we don t want any margin at all
on our body tag we want to get rid of
that dumb browser default styling
so what i m going to do is i m going to
go ahead and reference our style
tags so if our body tag is being
rendered out automatically for us how do
i select it and apply css to it because
we can t really put a class on something
that doesn t exist within our code
well the first thing we could do is we
could go ahead and add the body tag
manually
and wrap our header inside of it like so
that is one way to do things
but since chrome is nice enough to
provide the body tags for us
automatically we might not want to do
that
so what we can do is instead within our
style tag we can select
the body tag directly we don t need a
class which is always started with a dot
to select a tag directly we re just
going to write it out
within our tag so body matches up
with the tag name body and then we re
going to add some opening and closing
curly brackets
and what style do we want to affect here
well we know this is taking a margin of
8 pixels right now that gives it 8
pixels of spacing on the top and left
well we re going to go ahead and
reference margin and say that this
should be equal to zero
instead so on save and refresh
now you can see that margin is gone and
things are looking a lot
better we re going to go over margin and
something called padding later but for
now it s most important to focus on the
display property i mentioned earlier
display properties determine how your
elements are laid out on a browser
by default it s going to be much easier
to show you this by example so let s go
ahead and do that
i m just going to go ahead and write
some default html comment tags
and inside of here i m just going to
list out the most common display
properties that you re going to use
within your development
they are block inline block
inline none
and flex so the flex property right here
is a whole another beast we re going to
cover that later but
right now let s focus on these four and
how they determine how our elements are
displayed within the browser
so to see how these work the very first
thing i m going to do is i m going to
create a class
for each one of them if we want to go
ahead and add a block property to one of
our elements
we can go ahead and create a block class
and this is going to have a property
called
display how is this element displayed on
the screen well it s going to have a
display
of block simple enough let s do the same
thing for inline block
go ahead and make a class called inline
dash
block opening and close the curly
brackets
our display is going to take inline dash
block
and then we re also going to have a
class for inline opening closing
display inline
and then finally we re going to have one
for none
so for this one we can either call this
none might make sense
i m going to actually go ahead and call
this one hidden instead
because this is going to hide whatever
element we have on the screen when
applied
its display though is going to be equal
to none
so let s go ahead and start with block a
block element
takes up the entire width of its parent
container what i mean by that well let s
go ahead and inspect
our header right here this is going to
be our parent container
if we look at the highlighted portion up
here in the light blue
we see that this container extends all
the way from the left hand
to the right hand side of the screen so
if an element were to have a display of
block inside of this
that one element would expand the entire
width
of this header container it s going to
expand the entire width of the screen
because the header expands the entire
width of the screen so right now
just by looking at this most of our tags
do not have a display of block
by default because they re all right
next to each other none of these tags
right here the price and courses blogger
forum tags
actually expand the full width of our
container they only take up the exact
amount of space
that they actually consist of so if we
were to go ahead and add
our block class to our pricing anchor
tag
save and refresh you re going to see
that courses is pushed down beneath it
and pricing
if we go ahead and inspect this we can
click into our header
click into the first div and hover over
our pricing anchor tag you ll see that
it now expands the full width
of its parent container which in this
case is actually the div
but that s an important thing to note
here is a div by default
has a display of block every html
element we can use within
html has some sort of default display
property
in a div its default display is always
going to be blocked unless you change it
to be something else
but since it is block as you can see it
takes up the entire width
and what is our header elements display
well it s also going to be block because
it s also taking up
the entire width so if we look at our
anchor tag right here
it has block takes up the entire width
of the container which is our div which
also takes up
the entire width the next property we re
actually going to go over is
inline instead of inline block we ll get
there in a second so an element with a
display of inline is only going to take
up the exact amount of space
it actually consists of so when we look
at our other anchor tags such as course
blog and forum
as you can see these don t have the
block class applied
by default an anchor tag is going to
have a display of
inline they re only taking up the exact
amount of space of the content inside of
them
which in this case is courses so as you
can see our little container right there
is only taking up the exact space of
courses so if i were to select our
pricing element which remember has this
block
class on side of it we can see its
display is equal to block
we can actually change this directly
within the inspector
what we can do is we can click on this
value right here of block
hit delete you ll see that this goes
back to its normal default attribute
we can go ahead and type in in
line we add this display of inline
manually you ll see that it just goes
ahead
and allows other things to line up next
to it because now
it is only taking up the exact amount of
space that the text pricing takes
up so if you want things next to each
other you can go ahead and use an inline
property
instead of a display block property now
one issue with display inline is it
doesn t allow you to use margin
on the top or the bottom of your element
and margin is that spacing remember
sometimes we want to space out our
elements from different things to make
sure we get the exact look we re going
for
so just to show you exactly what i mean
by this and like i said we ll cover
margin and padding
very soon if i go ahead and add a style
of margin top
to our pricing element right here
and i say that there should be 10 pixels
of margin top on this element
you ll see there definitely isn t 10
pixel and margin top just doesn t do
anything
because that s just the default way a
display inline element interacts with
the browser
now if i want this margin top to take
effect that is where
this inline block class comes into play
so if we were to go ahead and change our
display of inline on this pricing
element
to inline dash block now when i hover
over this you ll see that orange
highlight
at the very top that stands for our
margin so when we use inline block the
element is only taking up the exact
amount of space
of the content inside of it but allows
us to use things
such as margin to make sure that we re
spacing out our elements
inline block is pretty commonly used so
it s block you probably won t use inline
too much honestly but that s going to
bring us to our fourth display element
which is going to be
hidden so i think you can kind of guess
what this does if i were to go ahead and
add this class of hidden
too let s just say our blog element
right here
i were to save and refresh well now our
blog element is just completely gone
it s not even in the equation at all no
other elements are pushed around because
of it it just
disappeared if i go ahead and inspect
and i can reinspect another element by
clicking this little arrow icon
and hovering over the exact element i
want to click on if i inspect forum
because i know forum
is right beneath our blog element you ll
see we re in our html and forms right
here
but blog is nowhere to be found when you
add a display of none to an element
it takes it out of the flow altogether
basically it s used for elements that
you want to show
at a later point in time such as pop ups
drop downs etc
but since we have a display of none on
blog it just doesn t show at all if i
toggle this off
you ll see it shows up again and it
affects the flow
but if i turn it back on well it s no
longer there so before moving on to flex
the most important thing i want you to
take away from this
is all html elements have some sort of
default display associated with them
as we saw our anchor tag by default has
a display of
inline and if you re ever curious what
this default display is
you can go ahead and select your element
right here i have courses selected
and you click on this little computed
tab and if you scroll
down you ll see we have a display of
inline
and is grayed out because this is the
default style being applied as
inline we can do the same thing for a
development if i go ahead and click on
div
we re in our computed tab still you ll
see this display is equal to block and
so forth so it s a good idea to inspect
some of your elements and see what the
default display is
whether or not it takes out the full
width of the parent container or whether
or not it just takes up the width of the
content inside of it
determines whether or not is block
inline or something like inline block so
these for a good intro to display
properties but the most
important one the one you ll probably
use the most to get
the correct style on your website is
going to be a display
of flex so if we were to write a class
for this how would we write it
well i would start off with a class
called flex
and then i m going to set it s display
property equal to
no other than flex so just like the
display properties we just covered
we are creating a new class and setting
its display equals something but in this
case it s going to be something called
flex so what does a display flex do well
you ll see over here we have our
elements
and they have quite a few different
properties applied to them
block and line block inline and so forth
but to really display what flex does
what i m going to do is i m going head
on over to html
our anchor tags are going to be
everything right here i want to make
sure that these are all block
elements so that everything is stacked
on top of each other remember a block
element takes up the entire width
of its parent container which in this
case is a div which by default has
a display of block and if it takes up
the entire width of the containers it s
just going to push all the other
elements underneath them
and if those are pushing elements
underneath them too well we basically
get a bunch of blocks
stacked on top of each other which is
kind of where the block name comes from
so let s go ahead and add our block
class which remember
gives a display of block to all of our
anchor tags just so we can see how flex
really works
i m going to add that on to these four
anchor tags save and then refresh
and now you ll see everything is stacked
on top of each other if we want to make
sure that log and sign up are stacked on
top of each other as well
well we need to make sure that our
anchor tag right here where it says
login
also has a display of block because
anchor tags by default are going to have
a display of inline
so if we go ahead and add on this block
class
well now login is a block element as
well you ll see when i inspect this it
takes up the entire width
of its parent container and it looks
like everything
is a div a block display element
essentially
so what happens when i apply a display
flex
to a specific anchor tag well let s go
ahead and start with that
we re going to start off with this
pricing anchor tag right here where we
have a block
class we re going to remove that and
replace it with a flex
class instead so if i go ahead and add
flex directly onto pricing
you re going to see that nothing
actually changes if i inspect pricing
well it s kind of acting like a block
element as in it takes up the full width
of its parent container
but a very important thing to note is
when using a display of flex
the flex property is supposed to go on
the parent container to affect
all the children within it so if i were
to put flex
on our anchor tags parent container we d
go up
one indent to find the parent which is
going to be this div right here
we can go ahead and add on a class
attribute
to declare we want to add flex here
instead of on the element directly so
i m going to go ahead and change
this pricing anchor tag with a class of
flux
i m going to change that class of flex
back to block and i m also going to make
sure that this class of flex is on the
parent
div now watch what happens if flex is
applied to the parent div
if i save head over here hit refresh
you re going to notice that everything
within the parent div right here is now
laid out
next to each other let s go ahead and
inspect this if i go ahead and click our
inspect button right here
and look at our parent div with a class
of flex
well now this is still taking out the
full width of the parent container but
the elements inside of it
such as our anchor tags are only taking
up the width of the content that s
actually inside of them they re kind of
acting like inline elements
so when a class of flex is applied to a
parent element
all the elements within it are going to
be laid out next to each other by
default it doesn t matter if they re
blocked
it s going to change their display style
so that they re all placed next to each
other instead
now what is the point of using flex on a
parent container like this why can t we
just change all these anchor tags back
to inline so that they re laid out next
to each other just like we see right
here
well when we use display flex we re able
to use what are known as flex
properties to alter how these elements
are laid out
within this parent div let s go ahead
and do this by example to show you
exactly what i mean by this
so if i wanted to make sure that all
these elements right here were spaced
out
evenly within this parent div spaced out
evenly within our website so that
pricing is on the far left hand side
forum is on the far right hand side
and courses in blog are placed perfectly
evenly in between
the parent container how would i do that
well
if i were to do this without flexbox i
would have to use some complex
width percentages probably use something
called a float element which i know we
haven t learned yet
and it s just something that s really
complex but if we were to use
div it makes this whole process way
simpler let me show you
so if you have a parent with a display
of flex you can basically start adding
on
sub flex properties one of these flex
sub
properties is going to be justify dash
content the justify content property
determines how our flex children
are laid out across the horizontal axis
so all the way from our left hand side
to the right hand side of our flux
container
so one of the properties we can set this
equal to is going to be
space dash between
so now that we have our property name
and its value all we need to do is
create a class for it
which in this case we re going to call
justify
between it s basically a combination of
our property name and its actual value
so if we were to apply justify between
to a child flex element such as our
pricing anchor tag
just going to go ahead and paste that in
there save and refresh you re going to
notice that nothing happens
because when you use something like
justify content remember this is a
property that requires
a display of flex to work so which of
our elements actually has a display of
flex well it s going to be this div
right here our pricing anchor tag right
here has a display of block so applying
this justify between to it
just isn t going to do anything at all
we don t need a block class we need a
flex class
so i m going to go ahead and get rid of
justify between and make sure that i m
putting that on the parent
div to say i want all of our children
elements
to be justified evenly with space
between them
so if i go ahead and add justify between
right here while this should indeed work
because we have a class of flex applied
to it already so if i save and refresh
you re going to notice that all of our
elements are laid out across our parent
div with even spacing in between them
now one weird thing is
is why is pricing located over here and
not on the far left
hand side of the screen yet our very
last element within
our container right here forum is on the
far right hand side of the screen
well when we re using flex and a subflex
property like justify between
it takes into account all of the
elements within it
so if we re looking at all the elements
right here we have our four anchor tags
but we also have this
image tag which is supposed to act as a
placeholder for our logo
and even though we don t have a logo set
in place right now it s still taking
this into account when applying this
flex
justify between property and we can see
this if i go ahead and inspect
our parent container and look at our
image tags on the far left hand side of
the screen
its width is equal to zero because
nothing actually exists inside
of it but if we go over to pricing while
it s going to place it in the next
location
so one thing we can do here is if we
want to make sure that justify between
is working properly without this image
tag getting in the way
we can simply comment this out which you
can do by adding this syntax right here
it s going to be a left caret
exclamation point a double dash to start
your comment
and then at the very end of your tag you
can add a dash dash
write carrot that is just going to
comment out the code but we can still
keep it for later
when we re ready to insert our logo so
if i go ahead and comment this out
save and refresh now pricing is lined up
correctly and our flex properties are
taking effect
as expected now one thing to note here
is our children elements inside of this
flex container don t
necessarily need to be blocked they can
actually be any display and this flex
parent is going to
change them into flex children so what
we can do is we can just go ahead and
get rid
of these block classes on the anchor
tags they re going to be switched to
inline by default but since their parent
has a display of flex
it doesn t really matter because these
are going to become flex children so if
we save this refresh
we still get the exact same result but
we clean up our code a little because we
don t need that block
class on all four of these elements so
this justify content property obviously
takes
a value of space between but there are a
few other properties that we can put
for justify content if you need a quick
reference on what these properties are
you can go over to your inspector select
any element and within the element style
you can start typing in
justify content it s going to autofill
it for you if you d like to complete it
quickly you can simply press
tab and then it s going to give you all
the options you can use
for the justify content property now
these are all the options you can use
but it s kind of hard to visualize what
they actually
do so if you want to see visualizations
of how these properties work my
recommendation is to go to
this page within the description of the
video it s going to be a complete guide
to flexbox from csstrix com a great
website to learn flexbox
and if you scroll on down you re going
to see a section for flexbox properties
we re going to scroll further and
further down until we find
justify content and you can see how when
applied to a parent container with a
class of flex
this justify content property takes
effect on all the children elements
within it
so you can see we just use space between
there are three elements inside of the
parent container
and it s going to justify these elements
evenly with space between them
that s exactly what we did over here all
the spaces in between are elements
but there are a few more properties that
are commonly used such as center if we
were to add a value of center instead of
space between what s going to center all
of our elements let s watch this in
action
we can go ahead and create a new class
of justify
dash center set its justify content
property equal to
no other than center and if we were to
add this instead of justify between
to our flex element let s watch what
happens we refresh
now all of our elements are in the
center so flex and justify content are
really nice ways
to make sure that your elements are laid
out in the correct spots on your screen
according to what it is you need if you
need a little bit of extra help to see
what these justify content properties do
just simply check
out this guide right here and you re
going to be in the clear so we just flex
and justify content
i think we can begin making sure that
our site is more one to one with the
figma design
so let s go ahead and minimize this and
bring up
that figma design so to make sure our
site matches up with this
right here how do we begin well we can
do this in a few ways one we can begin
looking at the figma design like we re
doing right now
and then we can hit something like
command
tilde to switch back and forth between
chrome windows to make sure that this
design
matches up with this over here another
thing you can do to make sure that these
are always open at the same time is you
can simply
shrink the figma window and keep this
one open at the same time and you can
kind of get a better idea of
how this looks compared to this we
always want to make sure that this looks
as close as possible to our design
now some people they even have multiple
display monitors i have one of these
right here which i typically use for
development
basically i ll hook up my mac to this
monitor right here and i ll open up
my web browser in which i m working on
on my mac window and i ll put the design
on this monitor right here
so that i can look at both of these at
the same time to make sure that these
are matching as close as possible
i m not going to do that right now for
screen recording purposes and you might
not even have an external monitor it s
kind of annoying so we re just going to
go ahead
and try to line these up as close as
possible i m going to shrink my browser
window
and then i m going to shrink the sigma
design a bit more it shouldn t matter
too much because we can always move
where this
is i m going to move this over here and
then i m going to keep my text editor on
the right hand side
and i think that is a good start so you
can see just by applying this class of
flex our elements are now laid out next
to each other
instead of being stacked on top of each
other like they were with that block
class
but looking at this design you ll see
that we have a logo in place and we
don t have a logo on our website
so how do we get this logo within our
site well it s pretty easy with figma
if your figma designer did things right
they made sure they imported this
logo right here as an svg an svg
is a format that when put on a web
browser it looks crystal clear it s
vectorized it s always going to make
sure that it retains its quality
no matter what size your browser is or
no matter what size your image is within
the browser
so it s very important that when you use
graphics like this
that you make sure that they re saved in
svg format images are a little different
if you have an image you want to make
sure they re saved as a png or jpeg but
for graphics like this it s always safe
to go with svg because they re going to
look crystal clear when you put them on
your website
so within figma what i m going to do is
i m going to select
this logo and i m going to right click
and i can go down
to this copy paste section and i can
simply copy
as an svg so i m going to go ahead and
copy this
and if i were to just paste this within
index html
well it s going to be this huge chunk of
code
you ll see this actually saved as an
image as a png so
guess what i m what you d call a lazy
designer
this should definitely be a pure svg
instead of an image but in this case
it s an image
embedded within svg so this is okay we
can still use a png
svg but nevertheless whenever you have a
graphic like this you pretty much always
want to make sure it s a pure
svg without an image tag inside of it
but
besides the point you ll see that this
pastes in a huge
chunk of code within our file by pasting
this in it kind of just dirties up our
code because we have to scroll
a lot to get to the code that actually
matters which is going to be this header
section right here so we want to make
sure that we keep our code as clean as
possible
and by including this file we definitely
dirtied it up because it introduces
scrolling the more scrolling you have in
your code typically the harder it is to
manage
so i m going to hit control z to go back
to where we were and instead of pasting
this svg code directly within
index html what i m going to do is i m
going to create a new
file for it i m going to go to file new
file
it s going to open up a new tab right
here and now is when i m going to paste
that
code in the svg tag with all the stuff
inside of it
so if i paste this into the new file and
hit command s
it s going to ask me what do i want to
save this as well i definitely don t
want to save it as all the code
i want to call this logo dot
svg and it s totally okay if i just save
this within the root of our project css
cores so what i m going to do is make
sure i have that selected
make sure that this is called logo svg
and then i m going to hit
save it s going to save it as an svg and
now that it s saved within our project
root
we can reference it within this image
tag right
here so what i m going to do is
reference exactly where
our logo svg is relative to index html
and if you ever forget
where this image is where this svg is
relative to your main file
you can always just open up your finder
make sure you go to your project
directory which is going to be css
course right here and you can see this
is just located directly within
the same file the same directory as
index html
so if you ever want to reference
something within the same directory as
another file you can simply hit
dot slash that s going to say we are
looking within the same directory this
file is currently located
in so if we re in the same directory
right here what s the file we want to
reference it s going to be logo svg
so if i go in and save this go back to
our project over here
and refresh you can see now our logo is
in place
but remember although this is saved as
an svg
it is using an image tag inside of it
which is referencing a png
technically this is actually a png
you ll see if i were to blow this
up to something like 500 pixels wide you
can see it just loses clarity it s not
as clear as it was when it was small
if you were to have an svg a pure svg
that doesn t reference an
image like this this would be crystal
clear as well no matter how
big it is so that s just a little thing
to keep in mind
is you always want to save these as pure
svg s not like i did like a dummy
as an svg png but in this case it s
totally fine because we re not going to
make this any bigger
than it actually is so it s going to
look something like this
now let s go back to our figma file
you ll see that we have
our logo right here and we kind of have
some spacing on the left hand side that
looks about
accurate with what we have over here
it s not exactly how we re going to do
things but we ll keep it as is for now
but obviously one thing to note here is
our elements over here aren t vertically
centered
with our logo and they don t have the
correct spacing in between them
we re going to cover spacing in the next
episode but to get these vertically
centered
well that s going to be a flex property
so that is perfect
for this lesson so the flex property we
want to use to get things vertically
centered instead of laying them out
horizontally like we did with justify
content
is actually going to be a property
called align
dash items so when we set this property
it s going to determine
how the items within our flex container
right here
are aligned vertically so if i wanted to
make sure that these were aligned
in the center of our parent container if
we look over a parent container right
here
pricing courses blog and forum are at
the top of our parent container if we
want to make sure that these are
centered vertically within them
we would add and align items property
equal to
no other than center if i were to create
a class for this
i would call it items dash center
save that and now i can apply this to
our flex
element and i can just add this on to
the very end it s okay to use both
justify center and item center together
because these are two different css
properties we have justify content
and align items they re different so
it s okay for you to use these together
so i m going to add item center to this
flex container with justify center
i m going to hit command s to save
refresh
over here and now you ll see our
elements are vertically centered
along with our logo so if you ever want
to vertically center something you re
going to use this item center class
and just like justify content you can
determine what align items can be set
to by typing into your browser s element
style
brackets right here we re just going to
type in align dash items
what can this be equal to well any of
these if you ever need a reference
visually well you can just go back
to the guide to flexbox and what you re
going to do is look for a line
dash items it s going to be down here
and you see
some of the most popular property values
which are going to be flex start
flex end center stretch and so forth how
when you apply these to a parent
container with a display of flex how
they re going to affect
all the children elements within them so
we re using center right now it s
definitely the most used one and the one
you re going to use the most
so really for the sake of this tutorial
just make sure that you remember align
items center now before we go on to
spacing with padding and margin
i want to challenge you to first get
login and sign up placed directly next
to each other
using a flex parent once they are placed
next to each other
i want you to try and make sure that
they are aligned vertically
using align items and then to take it to
the next level i want you to try making
sure that
this container right here that contains
login and sign up
is placed directly next to this
container which contains our logo and
all of our links inside of it
so basically this right here should be
placed over here
we should start getting something that
looks closer to what we have in our
design
take a minute try yourself otherwise
let s continue
so to get login and sign up place
directly next to each other
well we can see right now we already
have them in their own separate div and
that is perfect for adding a display
of flex so if we add a class onto this
div
and add a display of flex which is using
this class right here
if we save this and refresh these
elements by default are going to be
placed
next to each other we don t need this
block element on our anchor tag anymore
because that is messing up our code
you ll see this works exactly the same
but login is sign up technically they
might not
be perfectly aligned vertically so we
want to make sure that no matter what
size our button is
that login and sign up are always going
to be perfectly aligned
vertically so what we can do is we can
add
this item center class which will apply
a line item center
which remember only works when we have
this flex class right here
if i save and refresh you re going to
see login is pushed down this is now
perfectly centered with our button over
here at least by our browser terms and
that takes care of that
challenge but now how do we get this one
div container
next to this div container over here
well let s look
we know this div container relates to
this text over here and this div
container relates to all this up here
what are both of these elements parent
well it s going to be our header tag
and right now if we inspect those two
divs
they are currently placed on top of each
other like a block element
a flex element is basically a block
element but it gives you the ability to
use
flex sub properties so if we want these
two block
flex elements to be placed directly next
to each other
what do we put on their parent div well
it s simply going to be
another flex class you can stack flex
classes on
all the parents you want and it s going
to take effect perfectly
you don t need to do anything crazy
honestly you just need to make sure that
you re laying out your html correctly
so that things go in the correct spots
as you begin adding subflex properties
like justify center and item center so
we go ahead and add flex to our parent
container which is our header element
of both of our divs we refresh now
everything is placed perfectly next to
each other
one more quick challenge for you now
that these are placed next to each other
i want to challenge you to make sure
that login and sign up are on the far
right hand side of the screen
rather than being directly aligned next
to everything else
so pause the video give it a go so to
get login and sign up move to the right
hand side of the screen
well we know header has a display of
flux and what can we use
to make sure that there s space in
between these two
children elements well we can simply use
justify dash between
and that is going to put space directly
in between our children elements if we
save and refresh
you re going to see just by using that
login and sign up are now on the right
hand side of the screen
and all of our other stuff is on the
left hand side of the screen so we re
getting a lot closer to what we see over
here
with just our header and we re only
using a couple flex sub properties to do
this and these are the ones i use the
most within my day to day development so
don t be thinking you need all those
other flex classes typically how i use
these three
and i m good to go so like i said to get
these spaced out correctly and match our
design closer we re going to be using
some properties called padding and
margin
so let s go ahead and use those now so
margin or padding are two css properties
which allow us to add spacing
in between our elements how do they work
and when do we use
one over the other well let s go ahead
and start off with
margin to add some margin to our
elements some spacing to the outside of
them
what i m going to do is i m going to
create a class called
m dash 8 and inside of this i m going to
write
out a property of margin and set it
equal to
8px so when we look at this class this
m is going to stand for margin and this
8 is going to stand for 8 pixels
at least to start in these beginning
portions
so if i go ahead and save this refresh
nothing going to work because we need to
add m 8
to whatever element we want to add the
spacing to
so if i wanted to add 8 pixels of
spacing to the outside of our header
we would apply this m 8 class so let s
go ahead and add
n 8 to our header we save we refresh
and you re going to see on the outside
of our header we now have eight pixels
of space
on the top the left the right hand side
and even
the bottom of the element so by
inspecting this and hovering over the
header you re going to see this orange
overlay that stands for margin
if you see orange in the inspector it
stands for margin if you see green it s
going to stand for padding
margin is the space on the outside of an
element well padding is the space on the
inside of an element
what exactly does that mean well you can
see right here our header
has margin spacing on the outside of it
what if we were to apply padding to our
element instead well let s go ahead and
do that
i m going to go ahead and create another
class of p
8 but rather than reference margin i m
going to reference padding
and set this equal to padding 8
pixels so if i were to replace our m
8 with p 8 instead and refresh
well now our spacing is on the inside of
an element so our background color is
still taking effect
but that spacing is being applied so
that there are eight pixels between
the top of our elements bounding box and
the content inside of it
same with the left right and bottom
sides of the box
so when determining whether or not to
use margin or padding this is a good
rule to have if you have some sort of
background color and you need to make
sure that there is spacing between
the background color element and the
content inside of it
well that is a good indicator that
you re going to want to use
padding but if you want to make sure
that this header has spacing from some
other element
whether it be another header like this
you want to make sure that there s
spacing between our main header and this
new header up here that is a good
indicator that you want to use margin so
if we were to add some spacing between
this
we would add n 8 as well and now we have
more spacing between this header
and this header up here albeit the
spacing is on the top
left right and bottom sides of the
header
so let s start matching up what we have
over here with what we have in our
design
so first thing i m going to do is
actually get rid of these classes we
just applied we can go ahead and keep
them within
our css styles just for the time being
we can also get rid of the header
tag that we just created we save we
refresh and we re back to where we
started wow how cool
so looking at this what can we do to
make sure that we have adequate spacing
on the top
of our header well we could go ahead and
reapply
that p 8 class
we save a refresh we have a good amount
of spacing
although it s not the right amount of
spacing as we have
over here if we want to get closer and
closer to the spacing we have well what
we can do is
we can keep these two open side by side
and we can select the element we want to
add padding to which is going to be
our header element as you can see right
here it has p dash 8 applied to
it and you can see within our styles tab
right here
if you have this full screen it s going
to be on the right hand side of your
screen like this
but since this is shrunk for me it s
going to be right here at the bottom
i can begin changing this within just
the browser
to see how much spacing i really need to
match it up with what we have over here
so if i begin adding more padding onto
this and all i m doing right here is i m
using my finger
on the top arrow key with this selected
to begin adding
pixels on it i m just pressing up
you ll see that the padding is beginning
to increase and we can start
matching this up with the exact look we
have in our design it doesn t have to be
exact honestly just something close so
that we match the idea that we re going
for
so you ll see them all the way up to
around 18
pixels that looks like a good amount of
spacing almost the exact amount that we
have
right here so what i m going to do is
i m going to determine that 18 pixels is
the amount that i want
for our padding and you re going to
notice that this padding is being
applied on the top
left right and bottom sides of our
container
now what if i want more padding on the
top and bottom than i do on the left and
right hand sides
of this container how do i actually
change that
well this padding property actually has
four more properties associated with it
so rather than using just padding we can
check this off for now to make sure that
it s not being applied
within this element style object right
here what we can do is we can reference
a different padding property so if we
only want a padding of 18 pixels on the
top and bottom of this element
i can type in padding dash
top and this is only going to be applied
to the top of our header container
so if i go ahead and type in 18 pixels
right here you ll see that this padding
is only applied to the top
but obviously we want padding on the
bottom too so what i m going to do is
type padding
dash bottom 18 pixels and now that
padding s on the bottom
now how to determine how much padding we
need on the left and the right hand
sides of this container
well this is actually going to be
determined by something in a later
episode
called containers we ll get there
probably in the next one actually but
for now let s go ahead and add a
rudimentary amount that s a little
different from our padding top and
padding bottom
so what i can say is if i want the
padding
on my left to be different i m going to
add a property of padding left
and let s just say we want this to be a
little smaller than what we have on top
and bottom i m going to say that this
should be equal to 12 pixels that looks
pretty good to me
and typically within containers you want
to make sure that the padding is
consistent on the left and right hand
sides
so what we re going to do is we re going
to reference our padding right and just
make sure that this is the exact same as
our padding left which is
12 pixels that s looking like a pretty
good header so far
so remember whenever we type our code
directly into the console within the
browser
it s only going to take effect directly
within the browser if i were to refresh
all the code that we just wrote would
just go out the window we don t want
that so don t refresh
you want to make sure that you copy this
code right here with command
c and then you re going to go back on
over to index html and you can paste it
in
and we can begin writing our code as
necessary to make sure that this is as
clean as possible
so we have a few ways in which we could
apply these padding styles to our
element
one way we could do is is we could begin
creating classes for each of these
individual properties
for instance paddingtop would be p t
dash
18 and then we would say this value is
equal to
18 pixels and then we could add that
onto our header
now that s one way to do it but that s
going to clutter up our css quite a bit
because we need to write four individual
classes just for applying padding
another way we could do this is we could
create a class
that s going to affect the padding on
just the top and bottom of an element
and make sure that it s different
from what s supposed to be applied to
the left and right hand sides of an
element
so a class for this let s say we just
want to affect the top and bottom
padding of our header
i could create a class called p y for
the y
axis of the element we re about to
affect and set this
equal to 18 and inside of it we re going
to reference a padding
of 18 pixels and i just realized let s
go ahead and go back to pt
18 real quick when you re referencing a
padding top of 18
you want to make sure that your property
right here is referencing padding dash
top and if we look within a py of 18
that s supposed to affect the top and
bottom padding
well we want to make sure we re
referencing padding top not only that
but we re also going to apply a padding
bottom so now when we apply py18
to our header and get rid of this p h
we re not going to use that anymore
we save and we refresh well now our
padding top and bottom is there
but we don t have our left and right
hand side we could create a px class to
affect that but even that might be a bit
overkill because it s still cluttering
up our code quite a bit
so something we can do here is we can
just add a style inline
so if i were to select our header tag
and go inside of it
at the very end of our class attribute
with this double quotation i m going to
add on an additional attribute
called style i m going to set this equal
to two double quotations and inside of
this
i can apply a css style directly inside
here
so i can take something like padding top
put it directly within the style tag and
it s going to take
effect let s test this out with padding
dash left
if i save that and refresh you see now
we have padding left applied
to our element but how is this any
cleaner than what we have
up here it s not too much clear but we
can
make it as clean as possible so instead
of referencing padding left padding top
heading right and so forth there is a
shorthand syntax for padding we can use
this is the same syntax that you can use
for margin as well when you re ready to
use that
but the shorthand syntax is going to be
just padding colon and then the value
you want to use
so if we were to apply this right now
obviously there would be 18 pixels on
all sides of our container but remember
we only want 18 pixels on the top and
bottom and then 12 pixels on the left
and the
right so what we can do is we can just
put 18 pixels right here
type space and then 12 pixels following
it up
when i do this save and refresh watch
the left and right hand sides of our
header
you re going to see that they get
smaller but the top and bottom sides of
it remain at 18 pixels
this is padding and margin shorthand
syntax the first value used within your
padding style right here is going to
affect the top
and the bottom sides of your element
while the second value is going to apply
to the left and the right hand sides of
it by default
and you can actually add on two more
values here so if i were to add on 100
pixels for the third value
and then 200 pixels for the fourth value
we save we refresh
everything is just completely out of
whack right now i mean there s really a
little too big for this example but it
doesn t matter
so what s happening here well right now
we are starting off
on the very top hand side of our element
so our padding top right now is equal to
18 pixels
as you can see right here we scroll all
the way to the right
well our elements kind of extending past
what we actually use
let s go ahead change this last value
equal to something smaller like 80 just
so we can see what s happening now when
i refresh on the right hand side of this
you ll see
12 pixels is being applied this is
definitely the smallest amount of
padding that we have and if we keep
going
clockwise here we know 18 is at the top
12 is at the right
100 pixels is being applied to the
bottom and this fourth
value right here is going to be 80 this
is being applied to the left
so this is more shorthand syntax but
this allows you to have four different
padding values without having to type
them in individually like we would right
here
specifying padding top bottom left and
right
but for our case we don t need these
last two values we just need to affect
the top bottom left and right
really quickly we know top and bottom
are going to be the same same with left
and right
so we can specify for our y axis our
padding is going to be 18 pixels
and for our x axis our padding is going
to be 12 pixels
so i m going to add that right in there
and i m going to delete this reference
code we had right here we can leave the
rest of our patent classes just for
reference
we save we refresh and now we have
a padding of 18 pixels on the top and
bottom and a padding of 12 pixels on the
left and the right
so you might come across a few people
who tell you inline styles are bad
it s more so an old school way of
thinking writing a style tag right here
and quickly referencing a padding
property like this
there s no issue with it because now
looking at our header html
just by looking at the html we know
exactly how it s going to look
because we can reference our padding and
say oh well there s going to be 18
pixels of padding on the top and the
bottom 12 pixels on the left and the
right hand side of the screen
we don t have to scroll up anywhere
within our css or go to a separate css
file
just to see how this looks that s really
annoying especially when you have big
css files
so this is more of a new modern way to
do things that kind of puts old school
and very ingrained methodologies such as
separation of concerns within css kind
of on the back burner
so don t let anyone tell you using
inline styles are bad especially if
you re only using one very unique style
for one specific element like we re
doing right here
for header if we were to start reusing
this property right here
then it would probably make sense for us
to create classes like this but in this
case
we know that our header is probably
going to be pretty unique with this
padding so it s okay for us to put an
inline style
as we have right now so let s continue
spacing things out and getting them
matched
up with what we have in our header so
looking at this
it looks like all of our link tags right
here need to be spaced out a little from
our actual logo so let s go ahead and
add some spacing between pricing
and our logo so if you just need some
spacing between elements and there are
no background colors applied it s a good
indicator that you can use margin
instead of padding so let s go ahead and
add some margin onto our image tag
to start let s go ahead and just add an
inline style we ll go ahead and practice
using that
we ll add a style attribute and set this
equal to
margin well what margin do we want to
affect
simply only the right hand margin since
we re only selecting just
one thing we want to affect here it
would make sense to reference just
margin
right rather than using any shorthand
syntax and here we can specify how many
pixels
do we want on the right hand side of
this image tag i m going to start with
20
and we re going to kind of just estimate
as we go
so if i save and refresh now we have 20
pixels of margin
you ll see that there s spacing in
between our logo and pricing still not
enough
as you see there s quite a bit more over
here on our design
so if i need to match this up a bit
better what i can do is i can select
our image tag right here we know it has
a margin right being applied as we can
see
down below and i can start pressing up
on those arrow keys start giving it
some spacing and i m just going to keep
going until i get something that looks
pretty close to what we have over here
in
figma and i think 50 pixels is a good
place to stop it s maybe not exact but
it s pretty darn close i remember
don t need to always be exact forget all
that 99 pixel perfection bs
i pretty much never do that for like any
client i work with
it s it s just totally unrealistic
honestly so we know that a margin right
of 50 looks good
so instead of referencing 20 right here
for image tag i m going to add 50 pixels
of spacing instead
and if i refresh that is now taking
effect which is perfect
and it looks like we re going to need to
start enlarging this to make sure that
we re matching up
with our design correctly so in this
case if we need to enlarge this more it
kind of makes sense to just put this
half screen or even full screen
like we have right now and then we re
just going to switch between our figma
file
using command tilde so if i press these
back and forth
we can see exactly how they look by
presenting one
in front of the other so we need spacing
in between pricing courses blog and
forum
but how do we determine whether or not
to use margin or padding
well let s start with margin and see why
we would use padding instead
so same deal i m just going to start off
with an inline style
and i m going to give our pricing tag
right here
a margin right of 8 pixels
if i add that refresh you re going to
see now we have some spacing in between
pricing and courses
maybe not enough let s just go ahead and
increase this to 16 pixels
and refresh that s probably just a good
amount to start we ll go ahead and tune
this up later
but notice one thing if i try clicking
in between the space right here
i can t actually go to the pricing page
now you technically don t need to be
able to click empty space like this and
go to a certain location
but if you want to make your links as
easy to click as possible
it s a pretty good practice to use
padding instead
because when we change margin right to
padding right instead
save and refresh now that spacing is
going to be clickable so if i click on
the space
i m by default going to go to the
pricing page or whatever this href
attribute
is set to and the benefit is is when a
user is trying to go to a specific page
on your site well it just makes it
easier to click
because i can just accidentally click on
the edge of pricing rather
than directly on it and i m still going
to go to the exact page that i want to
go to
and this will make a little more sense
as we begin adding padding to all of
these
elements so if i want an equal amount of
space in which we can click
on for pricing courses blog and forum
well i wouldn t want to add a padding
right to 16 pixels to courses because
that means if a user clicks on the
spacing on the left hand side of courses
well we re still going to go to the
pricing page
because if we inspect you ll see pricing
is taking up all the space on the right
hand side of it
so as a result what we want to do is we
want to make sure that we re adding
padding to both the left
and the right hand sides of all these
elements that way there s equal spacing
in between them and an equal amount
chance in which a user clicks on the
spacing on the outside but still goes to
the correct url that they want to go to
whether it be courses blog form or
pricing
so if i want to add padding on both the
right and left hand sides of pricing
well instead of using padding right and
padding left together i can use some
shorthand syntax of just padding
this is going to add 16 pixels of
padding to the top left right and bottom
sides of our pricing container you see
if i save this refresh
well now we have a very large area we
can click on which is pretty good for a
user experience honestly but it might be
a little too much padding on the top and
bottom because when we added that it
actually affected the whole size of our
header
so we want to make sure that the top and
bottom padding
is a little smaller than the left and
right hand sides we can still keep some
top and bottom padding on there to make
sure that these links are easier to
click
so if i just want to reference the top
and bottom we re going to reference the
first value within this padding property
we re just going to add
on a smaller value than what we have
right here of 16 pixels
we ll start with 8 pixels for top and
bottom
and then our left and right is going to
be 16 pixels
and full screen it looks like this save
and
refresh you ll see that our header got
smaller it looks like the padding isn t
affecting it too much but
there s still a good amount of spacing
which we can click on this element
so we can click on anywhere where
there s green and also the blue
it ll be redirected to the pricing page
or whatever ahref attribute is set to
now how would we do the same for courses
blog and forum well a couple of ways to
do this
one is we could simply copy the style
tag and paste it on
to the other anchor tags so now you ll
see courses has an adequate amount of
spacing and it makes it easier to click
on
as we hover over the spacing but in this
case we are kind
of repeating ourselves somewhat and it s
okay to repeat yourself i know that is a
big coding philosophy of do not repeat
yourself but sometimes
it is easier and more maintainable to
repeat yourself i refuse to believe that
everything should be abstracted
so it s okay to repeat yourself but in
this case this padding property
is just taking up a lot of space within
our html and you can see when i had it
small screen like this was a little
harder to read
so since we re using the exact same
padding property what we can do is
create a class and that class is going
to take up less space than what we have
right here so let s go ahead and do that
this is a pretty typical way to style
things using what s called an
atomic framework where every class has
only one or two properties inside of it
a very modern way to create and style
things with css
so if i wanted to duplicate this style
right here using css what i would do
is well we know based off this the top
and bottom
of these tags should have a value of 8
pixels
so i m going to create a class of py 8
it s going to stand for the top and
bottom of our padding
element and the top and bottom is going
to be equal to apx
we want to make sure the left and right
are not equal to anything so i m going
to add
0px for the left and right hand sides
using shorthand syntax
just like so and then we need to create
a class for
left and right hand sides which is going
to be 16 pixels so what i m going to do
is create
a class of px the x stands for left and
right
the x axis sets this equal to 16 which
stands for 16 pixels
and our padding for the top and bottom
is going to be zero pixels
you can also just put zero here it
doesn t matter and then the left and
right hand sides are going to be
no other than 16 and just to make sure
it s this style correctly i ll get rid
of that extra space
save fresh well nothing it looks exactly
the same because we actually haven t
applied these classes and we still have
the style attribute being applied to
both pricing and courses so what i m
going to do is i m going to get rid of
the style attribute and look
how large the style attribute is right
now and you ll see how this changes
using a css class
if i were to get rid of this large style
property
and apply py 8 as one class
and px 16 as another
we save and refresh we re going to get
the exact same result
the difference being our code is a
little cleaner because we only have
about eight characters of text right
here
compared to something like 20 like we
have with the style tag
it just makes your code a little clearer
and when you have all these classes set
up for you by default using head
libraries such as tail and css
well it s going to make your life 10
times easier than just writing out style
tags or
writing your own specific css using a
traditional methodology
so instead of using the style tag we re
going to keep referencing
these new classes we created we can
simply copy these two
and paste them in to our other anchor
tags
and we save this refresh now we have an
adequate amount of spacing between all
of our anchor tags
and we can also click on them
individually even if we were to miss the
actual text
and we were to click on some of the text
instead and inspecting this looks like
we have a bit of an issue you ll see the
padding is only being applied
to the left and right hand sides of the
actual container
and you ll see when i select this we
have our px16 taking effect and our
padding top and bottom is equal to 0
while the left and right is 16 but
our py is being overridden whatever
element is
placed furthest down within your css
style tags is what s going to take
precedence over whatever is above it so
since px16 is actually below
py8 you ll see right here px16 is what
is taking effect
we re declaring within px16 the top and
bottom are equal to zero that is not
what we should be doing so instead of
declaring that top and bottom should be
zero
we re specifically going to write out
that our padding left
and that our padding right should be
equal to 16 px
when i save that refresh and inspect
you ll see
now this is allowing our py8 class to
take effect as the top and bottom is no
longer being overridden
right now px16 is overriding the second
value right here within py8
but just to be safe to make sure that
the 0 pixels doesn t override
any left or right padding we can go
ahead and get rid of that and make sure
that our padding y8 is only affecting
the top
and bottom of the actual element we re
applying it to
so i were to add padding top of 8 pixels
here and padding bottom
of 8 pixels there we refresh
well now there s no overriding going on
and these elements are only affecting
exactly what they need to which leads to
clean
css so if i full screen this and i go
back to our design
looking pretty snazzy there might be a
little more padding in between these as
we see in the design but what we have
right here is close enough there s
enough spacing between these to tell
that they are separate elements from one
another and we can click on them
individually without accidentally
clicking on something that we didn t
mean to click on so now that our header
and these tags inside of it have good
spacing
let s go ahead and move on to login and
sign up over here
so i want to challenge you to add the
correct amount of spacing to match what
we have over here in the design
basically a little bit of spacing in
between login and sign up pause the
video and give it a go
so add spacing to login and sign up we
obviously need spacing in between
well just these two elements so how do
we go ahead and do
that well first let s scan what classes
we have for margin and paddy
do we have anything which specifically
affects just the margin right so we can
add some margin on
login well looking at this it does not
look like we have any styles or classes
that affect just solely margin
right so one we can either write our own
class which we can prepare to use later
which is probably the safer method
but it s probably a lot quicker just to
use a library for creating those classes
which we ll get to in later episodes so
for now what we re going to do is we re
just going to apply an inline style
for speed purposes we know this is only
going to be used in one spot
and we re only going to be using margin
right within this inline style it s okay
to use them so what i m going to do is
i m going to copy the inline style we re
already using within our logo
i m going to copy that style attribute
and within our
login anchor tag right here i m going to
paste it in and it s going to give us a
margin right of 50 whenever we save
and refresh that gives us a pretty large
amount of spacing in between
these two elements but probably a little
too much it looks like we need to cut
this
in half so if i were to cut this in half
i ll move this over the left hand side
so we can see this better
all i need to do is go to margin right
divided by two
which would be 25 pixels save refresh
it s cut in half so i can either keep
this as is that s pretty close
or what i can do is i can make sure that
we have padding within
this login button right here so that
it s easier to click you ll see i m
trying to click right here
it doesn t turn into the pointer until
i m actually over the text
it all depends on what you want but if
you want to make the easiest user
experience possible make this
easy to click you probably want to add
some padding so i want to add some
padding it s probably good to stay
consistent with the same amount of
padding we have for all of our other
anchor tags
which is determined by these two classes
right here
so if i go ahead and select these two
classes and apply them to
our anchor tag of login i save and
refresh
well now when i inspect login within our
code
you ll see that it has both margin and
padding applied so this is a good use
case in which you would want to use both
we re adding some margin to the right
hand side to make sure that it s spaced
out enough from our sign up button
we re also using padding to make sure
that the user has a larger amount of
area to click on
making it easier to get to where they
want to go so
now adding the margin and padding
together probably added a little too
much spacing for our liking too much
spacing to make sure this matches up
correctly
so what i m going to do is i m going to
further decrease our margin right
i m just going to half this or at least
get it something close to half such as
12
i refresh and now that is looking pretty
darn good
so we have our margin applied but we
also have the padding applied making
this easier to click
and now layout wise our header is
actually in really good shape let s
continue matching this up with our
design by starting to add some font
families
making sure that the fonts we have right
here match up with what we see
over here okay so how do we get our
fonts looking like the fonts that we
have within the design
well first thing we d want to do if we
were developing this as a real client
site
is we d want to click on the text we
want to know the font of
so right here i m just zooming into our
figma design and i m clicking on pricing
and over here on the right hand side i
can see exactly what
font we re using which in this case it s
going to be
lotto so going back to our own
site what font are we using currently
for pricing
well if we go ahead and inspect it click
on the tag
and then go on over to computed if we
scroll on down
we should be seeing a property called
font family
we re not actually seeing anything right
here because this is set to the bare
default
font in which our computer can read
within the browser
so if we were to set this to a different
font we re going to want to use a
property
called font family so let s go ahead and
test this out
within the element style object right
here we have pricing selected i m going
to go ahead and type in
font dash family this is the css
property we want to use to change the
actual font
we have within our header so what do we
set this equal to well you ll see some
of our options that are provided for us
by default
but these are all going to be the
defaults provided to us by
our computer so if i start scrolling
through some of these using my arrow
keys
you ll see when we go to cursive well
the font changes to
cursive writing now this is the default
cursive font that
my computer provides so this might look
a little different than yours if your
default cursive font
is something than what is being used
currently we go on down
we get something like fantasy this is
actually i believe a papyrus font it s a
pretty tacky font known in the design
industry
that is my default fantasy font and
they re just going to be some defaults
for all these different kinds of fonts
that you may want to use within your
site but like i said these are the
defaults given to you from your computer
we want to make sure that we set this as
something that is consistent
so we re not using a default from
someone else s computer we re actually
going to be using a set
font that we put within our website and
in this case if we look back on our
sigma design
that set font is going to be lotto so
where do we get the font
lotto well this is going to come from a
website called google fonts
if you ever need some sort of custom
font on your website well you re going
to want to use google fonts because they
come
free pretty much the less money your
fonts cost well the better
it is for you and there are tons of
great free fonts on google fonts so that
is what we re going to use for this
project and lucky for us
lotto happens to be there so to access
google fonts what we re going to do is
open up a new tab and type in
google fonts simple enough and we re
going to click the very first result
so on fonts google com you can see all
the fonts that you can access
and put within your website they have a
lot of crazy fonts a lot of professional
fonts
a lot of old timey fonts that you can
put within here
but the one we want to use and one that
is pretty professional
no matter what kind of site you re going
to use is going to be lotto you can see
it right here
if you have trouble finding it you can
simply hit the search bar
and type in lotto and it s going to
filter out that result for you
so once you filter out the results what
we re going to want to do is click
lotto and how do we begin using it
well if you want to use this within
different programs within your computer
such as illustrator
xd uh maybe even after effects what
you d want to do is click
download family and that s going to
download the font to your computer
you can basically open it up run through
the process of installing it and you ll
have it available within all of your
different apps but that s not what we
want to do here to get it live within
our website
to get it live within our website what
we want to do is click the select
style button this is going to open up a
nice little sidebar on the right
and it s going to tell us how to use
this on the web so
if i click remove this style note right
here i clicked
select this specific style and here i am
selecting thin 100 so if we were to
select this one style we d be getting
the thin
version of the font but if we look
within our design
click pricing well this is the regular
version as we can see
right here on the right hand side so we
don t want the thin version we want what
is known as the regular version so we re
going to scroll on down until we see
regular now this is the one we want to
select
so i m going to go ahead and select this
one style
and you can see right here we are
selecting regular 400
how do we use this on the web well
google fonts gives us some tags and
instructions on how to do so
so to embed a font copy the code and
paste it within the head of your html
simple enough so all we re going to do
to be able to use this font is basically
copy
these link tags provided for us after we
select the regular 400 font
and we re going to go on over to our
code and we want to paste this within
our head tag
so if we look within index html well we
don t actually have a head
tag anywhere but if we go back to our
website over here and refresh well
our head tag is definitely there it s
just being inserted automatically for us
because chrome
is really smart and understands that our
style tag should be inserted inside
of a head tag by default so if we need
to make sure that we re putting this
within a head tag
what we can do is we can wrap our
current style tag
inside a tag called head so i m going to
put a beginning head tag at the very top
and then underneath her ending style tag
i m going to close it off with slash
head and you can go ahead and indent
your style tag to make sure that you
know that it s inside
of the head tag just for legibility
purposes and now we should be good to go
with pasting in this new google font so
remember we copied those links
right below our head tag i m going to go
ahead and paste those
in make sure they re indented correctly
and now we can begin
using the font so if i were to refresh
nothing s going to happen by default
because we need to specify
what elements are going to take this
specific font
so going back to google fonts if we go
ahead and scroll down even more
you re going to see that they provide
css rules to specify families this is
what we want to use to specify what font
should go on what
element so i m going to go ahead and
grab this line of code the font family
lotto
go back to sublime text and now we need
to create some sort of class that ll
apply
no other than a font family of lotto
so i m going to go ahead to the bottom
of our style tag
and create a new class i m going to call
this class
font dash lotto so whatever this is
applied to
it s going to take the font of lotto
simple enough and now i can just go
ahead and paste in that font family code
that google fonts provided to us so that
when this is applied we are going to use
the font family of lotto and then if the
lotto font family isn t found for
whatever reason
whether it be a poor connection or
something just doesn t work
we re going to go to the computer s
default sans serif font
so now that we have this font family in
place we can begin using it
on different elements so let s go ahead
and say i want to apply lotto to pricing
if i go ahead and paste
font lotto in there within our class
attribute go back to our page after
saving
refresh you re going to see now it is
taking on the font
of lotto but it can get quite cumbersome
if i were to go ahead and have to copy
and paste this
onto every single element i wanted to
use it on we know by default
we don t want this ugly serif font we
just want to make sure we re using lotto
for everything
so instead of having this font lotto
class
what we can do is we can select our body
element remember
body encapsulates everything that is
going to actually display within our web
page
so if we want to make sure that
everything within our web webpage has a
font of lotto this is actually where
we re going to paste our lotto styling
that was provided to us with
google fonts so i m going to go ahead
and copy this one more time
and i m going to paste it directly
within our body tag
i m going to save and now everything
encapsulated within our body tag which
is everything displayed on our site
should by default have a font family of
lotto
so if i go ahead save and refresh you re
going to see i no longer need to put
font lotto on individual elements
everything just automatically takes that
font family by default so looking
at this we are pretty close to what we
have
in the design but obviously one issue
here is
we have underlines within our website
but they are not in the design
don t really need an underline here
because since these are in the header
the user pretty much always knows that
these are going to be things that you
can click on
if this is text you re going to use
within long bodies of paragraphs so it s
probably better to keep
the underline but in this case we can go
ahead and get rid of it
so to get rid of an underline we need to
reference a property of
text decoration basically this is a
property that says how are we going to
decorate our
text right now we re decorating it with
an underline property by default because
all anchor tags by default unless
specified otherwise are going to have a
text decoration of
underlined but we know we don t want
this underlined for
these specific links at the very top so
we re going to create a
class called no dash
underline we re going to get rid of the
underline for the default elements that
have it
so here we can simply take our text
decoration of underline
paste it within our no underline class
but we know that this is supposed to be
no underline rather than underline
so here i m just going to set text
decoration equal to none
so now that we have this class in place
i can begin using it on the elements i
don t want
an underline on such as pricing courses
blog form and login so let s go ahead
and try this out
with pricing if i go ahead and add on no
underline to this specific tag and
refresh after saving
you re going to see that the underline
is gone perfect now let s go ahead and
do it for
courses blog forum and then don t forget
login that is also an anchor tag so by
default it s going to have the
underlined text decoration
once we add no underline and we refresh
all of the underlines are gone perfect
so
now comparing the two sites the design
on the right and our site on the left
looking a lot better and a lot closer
but one thing you might note if you look
really closely especially on a retina
display
is the text over here just looks a lot
cleaner something about it just looks a
lot more precise than what we have over
here
what we have in our website actually
looks a little pixelated
to some degree so how do we make our
text cleaner why does it look cleaner
over in design but not on our actual
website
well by default browsers don t provide
anti aliasing
which means you smooth out the text to
give it a clean crisp look
why they don t provide the anti aliasing
by default i am not really sure i feel
like they should be default on
any font because it makes it look so
much better but
nevertheless here we are we re going to
add it ourselves so to add anti aliasing
to make sure that our fonts come out
crisp and clean
you re always going to want to go to
your body tag at the start of any
project and you re going to want to
paste in these two
lines of code they re going to be webkit
font smoothing equal to anti aliased and
moz
osx font smoothing is equal to grayscale
just by adding these two lines of code
on save and refresh you re going to
notice that this
actually comes out a lot cleaner than it
was prior so these two lines of code i
always forget them honestly i always
have to look them up
they ll be in the description of this
video in case you ever need to reference
them at a later point in time
but just note whenever you add these two
properties to your body tag you never
really need to do it again for the rest
of your project
this will make sure that all your fonts
come out legible clean and smooth
compared to the more pixelated version
that they would come out as
otherwise so at the beginning of every
project just make sure you add these two
lines of code
to make sure that everything comes out
as clean as possible so if we go ahead
and full screen this
we are in really good shape we are
starting to look a lot more like we have
in the header
and the very last thing we would need to
do to finish the desktop version of this
header
is the sign up button so how do we take
our sign up button right here and get it
equal to this sign up button over here
well let s go ahead and inspect it we re
going to go ahead and click on the
button and see what properties it has
so that we can get our own button
matched up with those same properties
so the most important property we want
to look at here for the button is going
to be this
one fill property this is going to be
the background color of the button
this is what we want to use well for the
background color
so i m going to go ahead and copy this
hexadecimal number
we can go back to our website i ll go
ahead and half screen it so we can see
both the code and the site
at the same time and now i want to go
down
to our sign up button which is right
here for me on line 1
10 so we know this should have a
background of that teal
color so if i want to create a class
that has some sort of specific
branded background color this is what i
like doing i like creating a class
called
dot bg dash brand
to indicate that this is a brand color
and then what color is the actual brand
color well it s going to be teal
i m going to create some opening and
close the curly brackets
and then my background color should be
equal to that hexadecimal number
and make sure that you prefix this with
a pound sign
to indicate that this is hexadecimal and
now when we apply this
bg brand teal to our button down here
it should turn that tealish color so bg
brand teal save refresh
and now it is teal perfect so our sign
up
on text on the design is definitely
white and it s also uppercase let s go
ahead and do that
next do we have a class of text white
available to us
we can go ahead and scroll through this
it looks like we do so lucky for us we
don t actually need to create a new
class for this we can just go ahead and
paste
text white directly into our button
class
save refresh and now our text is white
looking pretty darn good
now to complete our button we re going
to be introduced to a few more css
properties
mainly we re going to be introduced to
the border property and we re also going
to be introduced to
border radius so let s go ahead and
start with border
if i were to go ahead and select our
button directly within
our browser we can go ahead and type in
our element style object
border now the border property
determines what kind of border should an
element have
right now by default our button has some
sort of beveled border associated with
it you ll see it s a little black on the
bottom
and gray on the top that s pretty ugly
for a default border
very old school not something we want
for a more modern site so what we can do
is we can set a border property to this
element
set it equal to simply none and that s
just going to get rid of the border we
don t need a border for a bond
so we re just going to get rid of the
default that s associated with the
button html
element so if we want to go ahead and
create a border none class
we ll go ahead and do that called border
none this is simple enough
our border property is going to be equal
to none
so now we can add this directly on our
button border none
and now when we refresh that takes
effect and we no longer have a border on
our button
now you ll notice our button has the
sign of text overlaid on top of each
other
that is simply because we just don t
have enough screen real estate to get
this laid out where sign and up are
directly next to each other horizontally
typically when we get this small on a
browser
we re going to flip on over to a mobile
design
something that looks a little like this
and i actually don t have the hamburger
menu in here but a hamburger menu if we
go to chriscourses com looks a little
something like this you ll see if i
begin shrinking this
we get these three little bars it
resembles a hamburger the top being the
top bun
middle being the burger bottom being the
bottom bun who came up with that i don t
know but i kind of like it so
typically when you get to a size this
small you re going to revert
to this hamburger icon that ll be part
of a future episode
but for now let s go ahead and extend
this just so by default our sign up text
is directly next to each other rather
than stacked on top so we can see
exactly what this looks like i m going
to move this
to the right hand side of the screen
i ll move my text editor over to the
left so we can see sign up better now
what needs to happen to our sign up
button
to look more like this well we need to
make sure that we re rounding the edges
of our button over here
so to get our button rounded like we
have over here in the design we re going
to want to add in a style of border dash
radius this is going to determine how
curved our border is
now you ll see as i begin adding pixels
onto this value
we re going to get this more and more
curved and let s see if i can zoom in
here so you can see this better
you ll see even with just one px that we
have a little bit of curve on our button
if we go back to zero no curve one px a
little bit of curve
so we ll go ahead and keep increasing
this you ll see the more i increase this
the closer we re getting
to this exact effect we have over here
now if i want to follow around this and
make sure that no matter how much
padding we have on this button
that it s always looking like this over
here on the left what i can do is i can
set our border radius equal to
a very high value such as nine nine nine
nine pixels that s always going to make
sure that we have
this exact effect over here where only
the left and the right hand side of this
are rounded as much as possible so if i
were to create a class for this to make
sure that this is permanent
i would add a class of rounded full
because it kind of makes sense
whenever we apply a class around it full
we want to make sure that this is
actually fully rounded out
and that we don t have any sharp edges
and we re going to apply the same border
radius property
border radius property of 9999
pixels so we save that all we need to do
now is apply it to our signup button to
take effect
so border not border radius this is
called rounded
full if we save this and refresh well
now that is permanently taking effect
and all we really have to do now to make
sure this matches up with our design
is give it some padding so remember
padding is always going to affect the
inside of an element this element has a
background color
so it s a perfect indicator we want to
use padding over
margin so how much padding and margin do
we use well we can kind of just eye it
we can also reuse some of the classes
that we have
right here such as py8 and px16
so for our top and bottom padding we ll
add on
8 pixels and then for our left and right
hand side padding we ll add on 16 pixels
just by doing that if we save and
refresh well now we have a button
it looks pretty darn similar to our
design so what s really different within
the design button
compared to what we have over here while
clicking on this a few things
the first thing is well this is actually
a bold
version of lotto you see over here when
i click on this
we re listing out that this is bold the
font size is actually 14 instead of the
default 16 like it is right now
and it s also uppercase so we can do a
few things to make sure that
this looks more like what we have over
here let s go ahead and start getting
this font bold
so to set a font to bold we re going to
want to use
a property called font weight
you ll see just by typing in font weight
we have a bunch of different options
available to us
typically font weights are expressed in
numbers 100 and 900
100 within the scale is going to be the
lightest version of the font so very
thin
well 900 is going to be the boldest
version of this font so very thick
you typically never have a scale that
goes past this so having the scale of
100 and 900 is a good default to make
sure your fonts differentiate but you
don t have too many variations in the
first place and you ll also see we have
some options of
bold bolder lighter normal and so forth
so if we wanted to go ahead and make
this font bold we could either use
something like 700
600 if we re pulling those in through
google fonts or we could
go ahead and use this bold property so
you ll see when we apply this font way
to bold
our text actually takes that bold effect
and when i toggle this on and off
while we re going between the two
different versions so we want to make
sure we leave this
on but one thing to know is how are we
making this bold
if we never actually pulled in the bold
version of the font to begin with using
google font
well we can always check this by going
to our computed property tab right here
and scrolling down to our font family
well this is interesting
by default our button has a font family
of
aerial not what we want for our buttons
so this is just coming by default from
the browser we never actually set
anything to be equal to aerial
and right now you can see our lotto font
trying to take effect
but this default is actually overriding
our lotto font
so we want to make sure that lotto is
applied for all buttons how do we make
sure that this is taking effect
well we can do so within our css if we
scroll to the top
right underneath our body tag we can
specifically say we want
all button tags to have a font family of
what
well a font family of lotto and then if
that lotto class is not found we re
going to default back to sans serif
so if i go ahead and paste that in and
save and then refresh
you re going to notice now we are
definitely using the lotto font and we
can double check this by scrolling down
on our computed tab
and our font family now is taking lotto
instead of arial which is perfect
but now we don t have that bold version
because like i said even if we were to
change
our font weight right here to bold and
the main reason is well since we
refreshed well we lost our element style
our font weight should be equal to bold
and now this is taking the bold version
of the font but once again
why is this working for me even though i
never downloaded the bold version from
google fonts
well i actually downloaded this full
font set onto my computer
so right now even though i don t have
the font way bold on our website through
google font
i still have this font family on my
computer only my computer so it s still
showing up for me
but if your user doesn t have this font
weight on their computer well it s not
going to show the bold version
it s only going to show the normal
version because that s the only one
we re pulling
in using google fonts so we need to make
sure that we re pulling
in both the regular and bold version of
our google font
so i m going to go back to our lotto
google fonts tab
and here we know we pulled in regular
400 we can see this is all the code we
copied
but i also want to select the bold
version so if someone doesn t have this
font on their computer
it ll still display the bold version
when rendering in the browser
so if i select bold 700 you ll see now
we have two versions of the font in
place
and if we log very closely right here
this last
link tag has been updated to include a
weight of 400 and 700 400 being the
regular version
and 700 being the bold version so if we
want to make sure that this is on our
site we re going to go ahead and copy
this last link tag
and replace our last link tag in our
head with the weight of 400 700 version
1
so if i go ahead and save this now no
matter what even if you don t have the
bold version on your specific computer
this should work for whoever is visiting
your site so we re going to go ahead to
the bottom of our style sheet
and here we re going to create a class
of font
dash bold this is going to take a font
weight of no other than bold and that is
going to set our font way equal to 700
which is the exact weight we just added
using google fonts
so we can go ahead and take this font
bold class add it to sign
up save and refresh and now this is
taking the correct
font bold version looks pretty nice and
we re getting closer and closer to what
we have in the design
so in the design this text was also
uppercase the property we re going to
want to use to make sure your text is
uppercase is going to be
text dash transform what can this be
equal to well
we can either capitalize each word so
that if these are lowercase within our
code capitalize will automatically
capitalize the first character of each
word
but we don t want that we want to make
sure we don t use lowercase we don t
care if everything s
small at the moment but we want to make
sure everything s uppercase to make sure
that this button really stands out
so we re going to use this text
transform uppercase
property like so you can see when adding
that even though our text in the html is
sign up makes it easy to read
our text on the site is all uppercase so
we can draw more attention to the button
because this is really where we want our
users eyes to focus we want to make sure
they re signing up for our site our
business our software service or
whatever it is so if we were to create a
class for this we re just going to
follow the same process as we ve been
doing
i m going to create a class called
uppercase and set its text
dash transform property equal to
uppercase and now i can apply this to
our button just add it on
to the end of our class save and refresh
and now this is taking effect
permanently
so getting closer and closer to the
design once again over here our font
size is 14
not the default which is typically 16
over in the browser
so if we want to go ahead and add a
class to affect our font
size i m going to add a class of text
dash
sm wherever this class is applied to
it s going to make our text smaller
so the property we want to use to affect
the size of our text is going to be font
dash size and we saw within figma
our button should have a font size of 14
pixels by default most text elements
have a font size of 16
such as our links up here we re going to
make sure that our button is a bit
smaller in text by setting it equal to
14 pixels
so i go ahead and add this text small
class to our button down here
paste it in save and refresh well looks
like it actually got a little bigger so
let s go ahead and see what s going on
here
if i go ahead and inspect our button
element
you can see the font size is definitely
14 if i go to computed
our font size is also set to 14 so it
looks like by default the button is
actually smaller
than 14 pixels given by the browser so i
go ahead and get rid of that class again
refresh and inspect our font
size you ll see by default the button is
actually 13 333 pixels
large i m not sure where they got this
number and why they put on the button
specifically but that s what they put it
as
but we want to match the design as
closely as possible so we re going to go
ahead and keep
that tech small class even though it
does make the text a little bigger than
what it just was
i want to make sure we re as accurate as
possible with the design so it s going
to be 14 pixels
so what s up next well if we look
closely with the text right here
you can see that there s a little bit
more spacing in between the individual
characters than what we have within our
own button
this is what s called letter spacing if
i go ahead and click on the text
you ll see right here this little icon
represents letter spacing and it s set
to six percent so how do we add letter
spacing
using css well if we go ahead and select
our element
go to styles and type in
letter dash spacing well that s property
we want to use
how much spacing do we want between each
letter well we can add pixels
onto this property and you re going to
see that it begins
to widen up the text so with one pixel
this is looking pretty wide and i would
actually say it s
pretty close to what we have over here
in the design
i think really what s differentiating
this button over here from what we have
over here
is mainly that we just have more padding
on our button so if we want to add more
padding to our button a quick way to do
this
is select our button over here and go
ahead and scroll on down until we find
our padding left and padding right
and we ll just go ahead and match this
up as close as possible to the design
so i m going to add on pixels to our
padding left until i get something
that s pretty close to
what we have over here let s say 24 is
good to go
padding right we want to make sure that
these are equal on the left and right
hand sides
so if i make that 24 as well that s
going to lengthen that up a bit
and now i can affect the padding top and
padding bottom because it s definitely a
bit larger in the design
if i go ahead and make that 12 that
seems to be pretty close
if i make this 12 for bottom as well
i think that s good for top and bottom i
might even want a little more
on the left go ahead and make that 28
and a little more on the right
and i think that s pretty darn close i m
really liking where that is
at so i want to go ahead and make
classes for padding left padding right
28 pixels and padding top padding bottom
12 pixels
so i know you know how to do this but
really quickly let s go ahead and do it
on our own
i m just going to go ahead and duplicate
these two classes right here because i
know i want to
reuse their naming conventions so
instead of pyh we know the padding on
the top and the bottom is going to be
12 pixels i ll change this to 12 and
then our px16 is actually going to be
px28 this is going to be equal to 28
on the left and the right hand side and
now i can use p
y 12 on the top and bottom p
x 28 and with that
now those classes take effect we can see
that they re here within our inspector
and our button is looking a lot closer
to our actual
design so when we compare the two we are
looking
very very similar now you may be
wondering why
on my screen do my fonts look a lot
bigger than what we have over here on
the design even though they are indeed
the same
size you ll see right here courses is 16
pixels and then when inspecting courses
in our browser and adding a font size of
16
this never actually changes because by
default their anchor tags are going to
be a font size of 16 pixels
why does this not look as small as what
we have within the figma design
it s simply because i m displaying this
web tutorial on a downsized
screen so my resolution right now i
believe is
1280 by 720 and i can check this
by clicking this little app i have right
here so my browser displays 1280x720
but if i were to enlarge my screen to
something that more normal laptop or
desktop has such as 1920x1080
well by default this text will get a lot
smaller it just looks a lot bigger
because for you guys to be able to read
the text i have in this tutorial i need
to make sure that i m zoomed in as much
as possible
and therefore the resolution of my
screen just makes this text look
a little bigger than what we have in the
design but nevertheless as long as
you re matching your text up
with the same font sizes and weights as
you have in the design it s going to
look
exactly like this as the user enters a
bigger screen something that s as large
as 1440 by
920 and so forth so now that we have our
button and pretty much our header
pretty good to go we can go ahead and
start moving on to
our hero section which is everything
beneath the header behind the header
and so forth so we re going to go ahead
and get this background video in place
looks like an image right now but we re
going to be using a video to get this
moving
and then we re going to be adding on
some text on top of it and then we re
going to get into the stats section
to add the next section the hero section
we re going to need to learn
a css property called position there are
going to be two main positions we use
it s mainly going to be position
relative
or position absolute and position
absolute is how we re going to overlay
our header on top of this background
video
but first thing first we need to insert
it into our page
so the first thing i m going to do is so
the first thing i m going to do is teach
you how to get
this background image onto the page in
case you just want an image
and then i m going to teach you how to
get a background video on the page
directly from someone s website in this
case it s going to be
my website chriscourses com i ll show
you how to pick the video off this page
directly so we can use it on our own
site and replicate the same video effect
that we have right here
so first thing first let s go ahead and
start with the image to get this
background image off of figma all we re
going to do is click
on the image and then if we scroll down
on the right hand side over here you re
going to see that there is an export
button
we re going to go ahead and click on
that and you can see we can save our
image as different types
png jpeg svg in this case it makes sense
to save this as a png or jpeg probably a
png because this is mostly flat colors
which means it s going to retain a lot
of quality while not being too
big so we can go ahead and export this
as a png we re just going to click this
button
and you re going to see that it exported
down here and now we can begin using
this within our
site so to use this within our site we
simply need to open
up our finder window here is our project
css course and now we need to make sure
that this
image that we downloaded is within our
project directory
so we go on over to downloads what we
can do is find
the image we just downloaded which is
saved as image7 png
let me just go ahead and drag this on
over into css course our main project
and we want to rename this something
that s a little more
representative of what this image
actually is so this is the hero image
it s what s going to go on the hero
section of our site which remember is
the very first thing a user sees when
they visit
your home page so we re going to go
ahead and rename this hero png
and just start organizing your files a
little better it s typically safe to
create a new directory within your
project
and store files of similar formats such
as your images what i m going to do is
i m going to right
click within css course here and click
new folder
and i m going to call this folder img
for image so all my images are going to
go within this folder here
i m simply going to go ahead and drag
hero png inside of it
and now if i ever have some sort of
other image on the site like we have
down here
i can simply put them within this folder
and keep them separate from our code
keeping things organized
so now that hero png is within this
image directory
we can go ahead and open up our code or
we can reference this hero png
image so how are we going to references
well the first thing we need
to reference an image is some sort of
image tag so this hero section if we
look at it within our browser over here
within figma
we can see it s not really part of the
header the header is mainly just these
links at the very top
but this is going to be its own
individual section so if we have an
individual section
what kind of tag do we want to use for
that well it s pretty safe to use
something like
a section tag so inside of this section
what do we have well we have this large
image in the background
so all we re going to do here is create
a new image tag which by default has a
source and alt
attribute and what is the source
location of the image we want to use
well if we go back to finder
we can see we re in our css course
project index html is the file we re
inside of right now
what do we need a reference to get on
over to hero png
well we re going to start within the
current directory of index html
so dot slash the current directory we re
going to go inside
of the image directory so we re going to
type img we re going inside of there
and then what is the name of the file we
want to reference well it s going to be
hero png
so if we save this go back to our site
and then refresh
you re going to see now this image is in
place
although it is quite large and expanding
past the boundaries of our actual site
if we begin to scroll
to the right hand side of the screen so
the first thing i would do is
fix this scrolling issue because when
you visit a site
you really shouldn t be able to scroll
left and right unless you re on
something really creative or
crazy so in order to fix this we need to
make sure
that this image that we just uploaded is
only taking up the full width
of its parent container so if we look at
our parent container right here the
section tag
we see its width is 1265 but if we go
ahead and look at our image
well the width is 1440 exactly what we
exported it at
within figma so in order to make sure
that this fits within its parent
container
we need to make sure we re adding some
sort of width property onto this image
element
to set its width equal to 100 which
means it s going to take up 100
of its parent container we can see this
in action within element dot style
if we select our image and add a width
property
and set this equal to 100 well now it is
taking up the full width of its parent
container
you ll see that 1440 just changed to
12 65
the exact same width the section tag
encapsulating it
and now i can t scroll to the left or
right like i could
earlier so this width 100 is something
we re going to want to add a class for
so let s go ahead and open up sublime
text and at the bottom of our style tags
we can add a class called w full which
stands for width
full this is going to have a property of
width 100
the exact same property we have over
here so i save
refresh while this once again is
expanding past its parent container
because although we have this class we
need to make sure that we apply it
to this image we just created so i ll go
ahead and add a class attribute to the
image
and then i m going to put in width dash
full
save refresh and now it takes up the
full width of the parent container and
doesn t expand past it annoyingly like
it did before
so we re going to get to the video but
the most important part of this lesson
is going to be the css property position
in order to move this up behind our
header we re going to want to change the
position attribute
of this background image specifically
the whole
section now this image is actually in so
let s go ahead and open up our inspector
we ll right click
click inspect and we re going to want to
focus on the section tag right
here so if we go ahead and add a
position
style and then set this equal to
relative it s going to give us the
ability to move
this section in whatever direction we
need to so there are four properties we
now have access to
a top property a left property a right
property and a bottom property
and we can set these to move this entire
section around
as we need so for instance if i were to
go ahead and add a top property onto
this which is now available to me
because this has a position of relative
i can begin
moving this section around so if i want
to move this up a certain amount of
distance
i can set the top equal to something
like negative
40 pixels and you ll see that it begins
to move
upwards it s currently covering our
header right now that s okay
because we ll change this using some z
indexing but for now let s go ahead and
make sure it covers the whole header
because we know
that eventually when we move this
background behind the header we re not
going to have any white space as a
result
so i m going to start with 40 pixels
negative 40 pixels and i m just going to
keep hitting the down arrow key
until i get something that covers the
full amount of height
and it looks like once i hit negative 77
that this covers the whole thing so this
is the code that i m going to want to
use to move
this section upwards it s position
relative with a top
of negative 77 so position relative
is something that we re going to be
using a lot so it makes sense to create
a class for it
i m going to create a class called
relative and set its position equal to
relative so now that i have this class i
can use it within our section tag
it s going to apply the position
relative style
and then since top negative 77 is
probably something i ll only use on this
one specific
html element i can select the style
attribute
and set its top equal to negative 77
pixels as we have over here i save
refresh
and now those have taken effect
permanently so we need our header to be
above our background
image in order to get this above the
background image well we need to set the
z
index of the header to be a larger
number than the z
index of the actual image so what is the
index z
index is the positioning on the z axis
so if we were to look into our computer
screen
the further we go into the screen the
smaller the number gets but the further
away we are from the screen the larger
the z index number gets
larger the number is the foreground
smaller the number is basically the
background
you ll see what i mean by this very
shortly so if i go ahead and set our z
index to something large
like 10 that s going to mean that it
should pop out in front of us
but even though i just set our header to
10
it s still behind our background image
and that is because
the index is another property that
relies on position relative in order for
it to work
remember when we just use top negative
77 pixels
we need position relative in order for
that top property to work
the z index is the same way so this
isn t going to work until we add a
position of
no other than relative and once we add
that on now as the index of 10 is taking
effect
you can see when i toggle this off it
goes away but once i set z index equal
to 10 it comes closer to us because the
larger the z index number
is the closer the element is going to be
to us rather than deep into the screen
so we know in order to get this header
above our background image this is the
code we want
we can go ahead over to our code
find our header which is right here we
know we created a relative class which
we need in order for z index to work so
we re going to go ahead and add a
relative onto our header
and now we know we need a z index of 10
so we ll go ahead and say
a class of z10 should be available to us
this is going to have a property of z
index 10
so now i can add this on to our header
element
z 10 i save and refresh
and now our header is on top of our
background image
so i know i mentioned position absolute
and i might have jumped the gun on a
little bit we re not going to need it
just yet
so let s go ahead and get our video in
here and then we ll begin adding the
rest of the text that s supposed to go
over this image
and that is actually when we re going to
be using that position absolute
so like i mentioned we need to get some
sort of video to put in here because we
decided we want to use a video not so
much a static image because it s going
to make our site more interesting
and hopefully it gets the user to know
that our product might be better than
another s or we might be a better fit
for a certain position
when we re trying to apply for a job so
in order to get a video directly from
another website this is what we re going
to do this is pretty cool if you want to
just download videos
and skip some sort of paywall so i m
going to go ahead and open up a new tab
and the site i want the video from is
going to be chriscourses com
this is our example site for the most
part you can see in the background
we have all this movement this is just
one singular video
so if i want this video and i want to
make sure i can use it on my site i m
simply going to right click
inspect and i m going to click the
little inspector again and try to select
the largest element in the background
which right now
looks like this one div and it might
take a little bit of sifting around to
find the exact video
so right here i can tell you this
absolute inset 0 is where our video is
placed so i m going to go ahead and open
up this one div
by double clicking on it you can see we
have a video tag so this is video tag i
want to use within
this new site we re creating so if i
want this one video tag i m simply going
to right click it
go over to copy and i m going to copy
the element so now that i have that
copied i can open up sublime text
open up a new tab which i just did with
command n for windows this is going to
be ctrl
n and then i m going to hit command v to
paste in the video html
now if you want the syntax highlighted
within sublime text
you can hit command shift p and this is
going to open up the command
editor and i can type in html to set the
syntax to html
you ll see down here right now we re
reading this file in plain text if i set
this equal to html
this changes the html down here and this
should be highlighted correctly
so if i go ahead and look at this this
video tag
should look a little something like this
so to start really what we can do is we
can just copy and paste this directly
into our html
so i m going to go ahead and copy this
entire video tag
and i m going to put this right above
our image tag
make sure things are indented correctly
and i m also going to comment
out our image tag just so we can slowly
focus on the video and i can show you
exactly what s going on here
so we can exit out of coursecourses com
we re going to refresh our file over
here
and nothing is showing just yet so let s
go ahead and look at our video tag
by default we re sending this to loop
automatically that means no matter how
long our video is once it reaches the
end it s going to continue
start from the beginning we re going to
auto player video the user doesn t need
to click some sort of control button to
start it plays inline means it s going
to play automatically on mobile
you don t actually have to set this to
anything just say plays in line
muted you need to make sure your video
is muted this video doesn t even have
any audio to begin with
but you need to set this muted property
equal to muted because otherwise this
isn t going to play automatically in
certain browsers must be muted for a
video to play automatically
and then i have a few classes in place
which we will cover and i set the
video s minimum height equal to 550
all this means is the video must be at
least 550 pixels tall we ll see what
that looks like in a second
and then we have a source tag which is
set to a source attribute
and a video type so if we want to clean
this code up a little bit what we can do
is we can actually get rid
of the source tag we can take the source
attribute and paste it directly within
our video tag
because we re only going to be using one
video type if you have multiple video
types such as an mp4
or i believe another one is webm that is
when we would use multiple source tags
but since we only have one it s okay to
put the source attribute directly within
the video tag
we don t need to reference the type
because that is going to be assumed
automatically based off this mp4
and then we can go ahead and delete that
spacing in between
the video tags this is a cleaned up
version of the video tag we had earlier
if we save and refresh still nothing but
that s okay
all we need to do is reference the
correct location of
this file right here so if i go ahead
and copy this link
and i try pasting this in our current
site you re going to see we re returned
with a page that says your file could
not be accessed
that is because this video is only
available on chriscourses com you can
see right here we re using a relative
url which means it s relative to
the main domain in this course it s
going to be chriscourses com
so we go to chriscourses com and start
typing in
this relative url we hit enter now you
can see this background video is playing
automatically inside of some sort of
player for us
so what we can do is we can go ahead and
take this full url
paste it within our source attribute
right here hit save
refresh over in index html and now our
video is displaying in the correct spot
which is great but one thing is whenever
we use an absolute url like we re doing
right here from crisscrosses com
what happens if this video is updated on
my end over at chriscourses com
and it changes to something like galaxy
3 rather than just galaxy well that
means you would have to update your own
code
whenever i change my code you might not
know when that is so we don t want to
use an absolute url like we re doing
right here we want to use a relative url
so what we need to do is we need to make
sure that we re downloading this video
and then putting it within our own
project directory
so to download this video we know we are
visiting the video within the browser
right here
all we need to do when visiting the
video is right click
and then we re going to click save video
as within chrome
and now we can save this wherever we d
like so my project is within web
this is the css course i can create a
new folder
called videos and this is where i m
going to store the video let s make this
name a little more legible i m going to
call this galaxy mp4
hit save and that s going to save the
video so now that this video is saved i
can begin using it within our code using
a relative url which means i have
full control over it so we re not
referencing galaxy
b6 c8 we re actually referencing just
galaxy
mp4 we re not referencing this from
chriscourses com but rather if we look
within our finder
we re going to go inside of our videos
directory and then we re going to
reference galaxy mp4
so here we go ahead and delete
everything
before videos i m going to go ahead and
add a dot to be safe to say we re
traversing
from this one directory with index html
and then going inside of videos
we hit save we go back to our site over
here we refresh
and now this is loading a lot quicker
too from our own personal
project and we can double check that
this is working by right clicking
hitting inspect checking out our video
and you ll see this is indeed
referencing no other than videos galaxy
mp4
we check even further that this works
but typing a slash
at the index html right here by getting
rid of the next html
and pasting in this new url that we have
we can get rid of the dot and the slash
you ll see now this is playing in the
player we are referencing this 100
correct so this is looking good on full
screen but as we start to resize this
you re going to notice all this
random spacing on the top and bottom of
our hero we want to make sure we get rid
of this and that we re always filling up
this empty space
so let s go ahead and move this to the
side this looks good over here
and i ll open up sublime text so right
now within our video tag
we have a width full which is with 100
and we also copied a height full
and a class of object cover as well we
actually have not
created these classes just yet so let s
go ahead and do that and see what
happens we re actually going to start
with
object cover so we re going to add a css
property of
object dash fit and you ll see a few
things this can be set equal to
but the main one we re always going to
use for object fit is pretty much
always going to be cover so just by
adding object fit cover right here
we get the exact effect that we re going
for so what does object fit cover
actually do
well let s go ahead and exit out of this
with object fit cover applied
we can start resizing this to see how
this works
so no matter what size i resize this to
it seems that the background video is
always taking up the exact
height and width it needs to while
maintaining its aspect ratio
in the browser so opening up our console
again if i turn off
object cover for our video you re going
to see our video takes up the full width
of the parent container but at the same
time it s not filling up the space we
need
to cover the top and bottom sections
even
when i resize things there s always
going to be a little bit of padding
until i get
to a really large screen size we want to
make sure that this little bit of
padding this little bit of white space
is always filled
up an object fit cover does that by
zooming this image
in and always filling up this space
while maintaining the exact aspect ratio
we have right here
so object fit cover is a smart way to
zoom in on this image no matter what
screen size we re in
while also maintaining the aspect ratio
so really the main thing we want to
focus on is object dash cover right here
so let s go ahead and make a class for
object
dash cover what is this going to be
equal to well object
fit and remember the value we want right
here is going to be cover
now we can add this to our video class
which we already have
we save and refresh and now we re
getting the exact look we are going for
now we also have the hype full class and
we don t actually need this just yet so
we re going to delete it we might need
it later on as we begin to style this
but you can see even with deleting that
we don t even have a hype full class to
begin with
if we save and refresh well it s still
going to look exactly the same
but you ll see as i begin to actually
shrink this we have a little bit of
space up here at the top
and that is simply because our sign up
button begins to break the text is on
top of each other rather than side by
side
and like i said this is an instance in
which you replace pretty much all these
links right here with the hamburger menu
so we re not going to worry about this
little bit of white space up here until
we add in the hamburger menu
we re just going to focus on a little
bit of a larger screen size like so
we re going to be good to go to continue
going off of the figma design
so we have our video in place what it s
going to be next
well based off the thing my design we
need to add in
a little bit of hero banner text and
then also a button and then we re going
to do
the stat section so as we develop this
content overlaid on top of our
background video this is a good chance
to be introduced to
the max with property so the very first
thing we re going to do is just get this
text
onto our screen and style it accordingly
we should be able to do this based off
the knowledge we have so far
on css development with typography so
the first thing we re going to do
is just check out what our site looks
like which is this right here
and as we begin to add this text in by
default it s not going to be overlaid on
top of our video it s actually going to
be pushed down
but that is where position absolute and
position relative are going to come into
play
which we ll be doing next right after
this max with video
so let s go ahead and start writing out
the markup for our text
over here so when i look at this design
i like
to think of what do i need to actually
group together what content here needs
to be grouped together
to separate it from the rest well right
here you can see that we have
turbo charger development career this is
essentially all one headline the only
difference being is that development
career is a different
color so right now it makes sense to
group
this whole headline in one container div
just to separate it from this text
beneath it
and then inside of that separator div
what we can do is we can create an h1
tag
which indicates that this is the largest
text we re going to be using within this
section
can be used to encapsulate turbocharger
development career
and then when we look at development
career to change this text right here we
can just
wrap this text in a span tag because a
span tag is inline by default
it s not going to do anything weird with
the text basically so
that s kind of my thought process on how
we re going to mark this up let s go
ahead and bring up sublime text
and we ll start doing exactly that so if
we scroll
on down we have our section right here
where our video is this is where we re
going to be writing our text
so we have this one grouping of
turbocharger development career let s go
ahead and create a div for that because
divs are basically groupings they re
basically groups
for your html we re going to create this
one div then what do we put inside of
this div well it s going to be
an h1 tag because like i said the h1 tag
represents the largest text within our
document
so here we can just type out the text
turbo
charge but if you re lazy like me thigma
provides a really nice shortcut
here what you can do is you can just
click on the text and then on the far
right hand side bar where you see this
little design tab you re actually going
to go on over to inspect
and here under content you can see the
exact content that s being outputted
you can just click it it s going to copy
your clipboard automatically
you can go back to sublime text and just
paste it in and this way you know that
your text is exact if there s a
misspelling on the project it is the
designer s fault and no longer
yours baller so that s going to take
care
of this first part right here now what
we could do is we could create another
h1 tag and just insert development
career so let s go ahead and do that
this is one possible way to do things or
multiple ways to do things within
development
but is this how i would do this within
my personal development probably not
just because we don t really need an
additional h1 tag right here we can just
go ahead and put this
development career text within the first
h1 tag get rid of the second
cleans up our code maybe just a little
bit so
based off of this let s see what we have
we refresh over here in the browser
and we have turbocharge your development
career okay that is looking good so far
and this is all the markup i want to do
for the h1 tag so far at least
we re going to go ahead and continue
onwards we re going to go on to the
paragraph text right here
what kind of tag do we use for paragraph
text well no other than the paragraph
tag so we can do two things here we can
create an encapsulating div like so to
indicate that this is going to be a new
grouping
we can put the p tag inside of it or
another thing we can do is since we
already have one encapsulating div right
here
we can pretty much just extend the
height of that by putting the p
tag inside of that two so if we were to
put the p
tag inside of this one encapsulating div
which basically extends from here
to here if we were to put the p tag
inside of it well now our encapsulating
div is going to go all the way from up
here
down to here which is totally a valid
way to do things especially because h1
and paragraph tags are going to be
blocked by default
they re always going to be pushing down
against each other nothing s going to be
laid out
next to each other so this is actually
the way i would do things is i would
just go ahead and put the p
tag within the main encapsulating div so
we have our h1
we have our paragraph tag let s go ahead
and put the content inside of that
i m just going to click this make sure
i m in the inspect tab
click content over here in figma and
then i m just going to go ahead
and paste that in with command v
save that we ll go back to our site
refresh and there is our paragraph text
so almost done with the markup all we
really have right now is a button
we re just going to do the exact same
thing we re going to put the button
inside of this encapsulating div
so we re going to go ahead and write out
a button tag this text is get started
short enough for us to just type it
we ll save that
refresh and there is our button so
looking great that s pretty much all we
need to do to start for our markup
within html
so now that we have that markup in place
it s time to start styling this so that
it actually looks like this over here so
how do we begin styling this
well we re going to go ahead and inspect
the h1 so we can see its properties and
we can do this in a few ways
we just go ahead and scroll down under
the inspect tab and look at his
typography
and here you can see that the size is 60
pixels for desktop
so if we need a font size that is 60
pixels there are a few ways to do this
one we can create a class
or we can just do an inline style now
using a framework with tailwind
creating a class for this is very simple
to make sure that is exact
to your actual design but in this case
we don t have tailwind installed and
we re not going to get there until later
we re going to refactor this quite a bit
with tailwind once we re ready for it
so right now it s totally okay just to
use an inline style so that s what we re
going to start off with
so we re going to put an inline style in
place and we re going to
add a font size of 60 pixels so we ll
type in
font size 60
px save that go back to our site
refresh and that is going to be 60
pixels large now if we look at the color
of this turbocharge is white
development career is going to be a teal
so how do we differentiate the colors
when we only have one h1 tag well this
is where adding another tag is going to
come into play
so development career is actually below
turbocharge your
but at the same time you always want to
make sure that your text is next to each
other
so that when you go to mobile responsive
development it breaks down correctly
so with that in mind what we re going to
do here is we re going to wrap
development creator in a span tag
because a span tag
is going to be an inline element meaning
that it s going to be next
to turbocharger development career so if
i do this it s going to look exactly the
same
but now if we inspect development career
you ll see that it has its own little
container of a span tag
and we have our own little container
like a span tag what we can do is we can
add
individual classes to just this specific
text
so let s go ahead and look at some of
our styles up top we ll just scroll up
really quickly do we have a
text brand teal anywhere
it does not look like we do so this is
actually something we are going to
create because we might be changing
other text we have on our site to a teal
as well so what i m going to do is i m
going to create a
class called text brand
teal we know this is going to change the
color of the text
so this is going to use the color
property we can go on back to figma
click on the development creator text to
get its color which is going to be this
right here
go ahead and copy this and then we re
just going to paste it in
as the color and get rid of the 100 we
don t really need that we just need the
color for text brand teal which is this
hexadecimal
code right here so now that this class
is set with a teal color we can go ahead
and take it
and apply it to whatever text we want to
be turned into a teal color
in this case it s going to be
development career so we re going to go
ahead and add a class onto our span tag
which encapsulates development career
and then we re going to reference text
brand dash teal we re going to save
refresh
and now that is going to be teal so
let s go ahead and change turbocharge
your
to white do we need to wrap this in
another span tag
actually no what we can do is we can
just go ahead and add a class of text
white to the h1 so by default all of our
text is going to turn white
but still since we have the span tag
right here wrapped around development
career this is going to take precedence
over that white color
thus this is still going to be teal but
turbocharge yours will still be
white so if we go ahead and add a class
here of text
white that is a class we created
previously in other episodes
go ahead and refresh and now that text
is white we can t really see it right
now because it s on a white background
so just to make sure we can see it let s
go ahead and add a class of
bg gray 900 one of the first classes we
created within this course
that allows us to see our text better
something that s going to overlay on top
of this video
and actually contrast with it when we re
ready so we have our colors
in place but obviously a big issue here
is development career is beneath
turbocharged your
how do we get this effect well there are
a few ways to do it as i mentioned we
could have put development career in its
own h1 tag but don t really
want to do that at least that s not the
way i would typically do it one way to
do this is to add a break tag which
would just be a b
r slash self closing tag if you add the
break tag it s automatically going to
break your text down to the next line
that is one way to do things but
sometimes with the break tags
it creates for a weird breaking down on
your text when you begin resizing this
like so
so i typically stay away from break tags
and what i like doing to make sure that
my text looks like this
even without a break tag is i like
adding a max width
to my container what is a max width well
it s the maximum width a container can
extend too so right now our max width is
a hundred percent
because as you can see the container for
our h1 or even the container for our div
is extending the full width of its
parent container which in this case is a
section element
and obviously the section element takes
up the full width of our browser so
basically the max width over h1 is the
full width of the browser we don t
really want that
we want the max width to be something
that forces this text to break down onto
the next
line we can get this max width by seeing
what element has the largest width right
here within the design
it is going to be development career so
if we were to click on this
we can get its width right up here in
the properties section
which is going to be 538 pixels so if we
were to make our encapsulating container
a max width of 138 this text will break
down correctly you ll see what i mean by
this when we add it
so what i m going to do is i m going to
head back to our code
and for our encapsulating container i m
actually going to make sure that
everything within this encapsulating
container
is no more than 538 pixels and we might
actually go up a little on this max with
value so in order to add a max width
this is something that typically varies
a lot within your design
so you re going to want to add a style
tag rather than create a class because
it s going to be unique
here i m going to create a max width
style
and this is going to be equal to 138
pixels so if i go ahead and add this
refresh you re going to see the max
width of this encapsulating container is
now
538 pixels it s not taking up the full
screen anymore
it s only taking up 538 pixels and as a
result it s forcing
this development career text to break
down underneath turbocharged your
you ll see as i begin increasing this
max width
the container begins to grow because
it s allowed to
eventually when i hit a value that is a
lot higher such as 700
maybe even 800 you ll see that our text
automatically fills in
the available space but if that space is
not available
well it automatically goes to the next
line and this is really nice because
as this container starts getting smaller
on mobile sizes while our text begins to
continue
breaking underneath it creating for a
good readable flow
when needed so that is why we use max
width is to make sure that our text
flows correctly
as we begin to resize our screen like so
so we have a max width for our overall
container which is great
let s go ahead and move on to our
paragraph text down here
obviously this is white can t really see
our paragraph text anymore
because by default it is black so what
we re going to do is we re going to
select our paragraph tag
and change its text to white with a
class of text
white so refreshing now our text is
white
let s go back to our design you ll see
the max width of this paragraph
container is actually smaller
than our text up here so it s okay for
encapsulating container
to have some sort of max width
associated with it to make sure that
this text is breaking down
but it s still too large for this text
to be the correct width as it is within
the design
so let s go ahead and click on this
paragraph text and see what width it is
the width is going to be 449 pixels
so that is going to be the max width we
apply not to the parent container in
this case
since this one element has a max width
associated with it we re just going to
apply it to this element directly so
we ll go ahead and add
in a new style max width and then what
was it it s going to be 449 pixels
like so we can go ahead and save go back
to recite and refresh
and now this paragraph tag can be no
more than 449 pixels wide which is going
to give us a similar look to what we see
in the design
now there are a few discrepancies still
i think the biggest one
is that the size in this design is 20
pixels yet the size within
our paragraph tag right here is going to
be a default of 16
because that is the default font size
for all paragraph tags
without changing anything so let s go
ahead and make sure that the font size
for this text is a little larger
we can just go within our style tag and
say our font size is going to be equal
to
20 pixels like so refresh it s going to
make it a little bigger
and now it s a little closer to what we
see in the design you ll see
professionals is on the top
education is on the bottom looks pretty
darn close to me
now another issue is you can see we have
some spacing in between our h1 and our
paragraph tag and they might be
maybe even a little too much right here
it s pretty close but i think there is a
little too much within
our actual website compared to the
design so where is this spacing coming
from is it some sort of margin well we
can always
inspect our h1 tag right here and see
what s being applied to it
so by inspecting it you can see we have
margin on the top and bottom
even though we never really set any
default margin for h1 tag this is just
some browser default stuff
so one thing we can do is if we want to
get rid of all browser defaults for h1
tag
we can scroll to the top of our style
tag right here
and here where we are doing some resets
and some default styling for all of our
tags such as body button and so forth
we can add in some default styling for
all h1 tags
what default styling do we want to add
in well it s pretty safe to get rid
of all margin all together and just
style your margin accordingly as needed
as you go about developing your site so
we can select our h1
and make sure that its margin is going
to be equal to zero by default
and then that s going to allow us to get
the correct margin spacing between our
h1 and the paragraph text beneath it
so right now when we get rid of that
default h1 margin it s going to look
like this
we can go back to our design see we re
missing a little bit of margin now
the only spacing between it right here
is going to be due to our paragraph text
and this is something else we can do
so we can go ahead and get rid of the
spacing by default for our paragraph
text so we re going to go ahead
and underneath our h1 styling we can say
that our margin
is going to be equal to zero we re going
to get rid of that default paragraph
text styling
it s going to make everything really
tight together but it s going to allow
us to be a lot more precise
with our styling as we can add our own
margin to ensure we get the exact same
look we have over here in the design
so how much margin do we actually need
to get this similar effect
so what i m going to do is i m going to
inspect our paragraph text and i want to
add some margin top to this
so over here within our browser i can
type in margin top
and i think 30 pixels is good to start
and i might even just hit that exact
because that looks pretty close to what
we have in the design
you can just go back and forth by
hitting command tilde to make sure this
is actually close
and i think i m going to go with that
it s going to be a margin top at 30
so now that i know that i want it what i
can do is i can add it inside of our
style tag
margin top 30 pixels like so we can save
and refresh that takes effect
permanently and eventually you re going
to get to the point where if you keep
adding inline styles like this it s
going to get really messy and like i
said
this is where talon css comes in really
handy it s a utility css framework which
has classes
where you can just write in stuff like
mt
20 and t16 it has all those styles
already laid out for you so you don t
have to write them yourself
and they re really useful for creating
things such as margin top right here
without having to type in
a full margin top style directly into a
style attribute
like i said we re going to go ahead and
refactor that later on but this is
totally okay for what we need to do
right now
so we have the margin in place for the
top of our paragraph text
now what we can do is we can add margin
top to our button
to make sure we have this spacing right
here so if we go ahead
and select our button element we re
going to add not a class actually we re
going to start off with a style
attribute
just so we can be exact we re going to
do margin top
let s just go ahead and try 30 like we
did for our paragraph tag
we add that in there we save and we
refresh and now we have a good amount of
margin top on our button
we can go back to our design see what
that looks like it looks pretty even
maybe a little less than what we have
right here
if we want to try to get more exact we
can go down by a couple pixels maybe two
and i think that s looking pretty good
so let s go ahead and style this button
this is going to be very similar to the
button we styled up here in the header
let s see what the main thing we have to
do is well looks like we need to turn
the background white so let s go ahead
and start
by doing that it s very typical to have
some sort of class called bg
white to turn a background white so if
we save this and refresh
nothing happening because we don t have
that class yet but i guarantee you this
is a class you re going to use
later on as you begin developing more
and more of your site so it makes sense
for us to create this class
so i m going to do is at the bottom of
our style tag create a class called bg
dash white and this is going to be a
background
color property set equal to white
like so so once we add this class and
refresh
well now our background color is white
on this button and not
gray so in the design our text for get
started
you can see is teal but over here it is
obviously black
so that is another thing we want to
change for our button we re going to go
ahead and select our text
and this is a brand color and i believe
we created a text brand
teal class for this text up here so we
can just go ahead and reuse that we re
going to go ahead and type in text
brand teal like so save and refresh
and now our text is teal but one thing
is this text is a little hard to read on
the white background
so it s always safe to double check your
design to see that this color right here
is the exact same color we re using up
here if it s not you need to make sure
that you accommodate for that
so right here we have a hexadecimal for
a button text at
five three nine d nine eight we can
click
on development career and you ll see
that this is definitely not the same
thing
so there is a darker variant of this
teal text
now what we can do is one we can copy
this hexadecimal
and we can create an inline style for
the color if this is the only place
we re going to use this text
or we can create a new class along the
lines of something like text
brand teal dash dark if we know we re
going to be using this at a later point
in time which
probably are so i m going to go ahead
and use the class version
calling this text brand teal dark save
that we ll go back to our site
refresh obviously this goes back to
black because we actually haven t
created this class
when i create this class i m going to do
it right beneath our current text brand
teal so this was text
brand teal dark and then the color
is going to be that color from the figma
design so i m just going to select our
text
go to colors click on the color copy it
and then paste it in get rid of the 100
as our main color save and now that this
is already applied
we refresh and now that text is a little
more legible compared to before
so another thing we want to do is we
want to get rid of the borders here on
this button because
in the design there are no borders so we
can just go ahead and type
border none save refresh and remember
this works because this is a class we
already created
and then we need to start adding in some
padding on the left and the padding on
the top
so what are our current available
padding classes we can go ahead and
check out the button we used in the
header which is this
signup button right here and see that we
used py12 and px28 for the button we can
just go ahead and reuse this
because we know it s available to us
we ll go ahead and paste that in right
here
save and refresh and now we have padding
on our button that looks really good
pretty darn close to what we have now
all we need to do really
is round the edges of the bun so
rounding the edges of the bun remember
that is the border radius property
we created a class i believe called
rounded
full which you can see fully rounds the
edges
of this bun so if we were to apply this
rounded full
save and refresh it makes it a
completely rounded bun
but in the design this is not completely
rounded so it really depends on how you
want to do this this is totally valid
you can use a button like this with
everything fully rounded
but if you want to try to get close as
possible to the design you probably have
to create a new
border radius so instead of creating a
completely new class i m just going to
go ahead and add a new inline style
called border radius and i can go ahead
and start typing in a small value
because this is only slightly rounded
within the design
i m going to go ahead and start with 8
pixels so with 8 pixels
rounding on our bun you can see that
might even be a little too much compared
to what we have right
there so i m going to go ahead and half
this into
four pixels save that refresh and i
think that is
pretty darn close to what we have
within the design so i m going to go
ahead and stick with that
okay so to get our text overlaid on top
of background video
we need to start using something called
position absolute using position
absolute
basically takes an element out of the
document flow and allows you to overlap
it on top of
other elements the tricky part is
positioning this in the correct
way using the correct html markup
because
when you use something like position
absolute you also have to use something
called position relative and tandem
together
in order to make sure that this works
correctly so let s go ahead and
illustrate this if i were to go ahead
and apply position absolute
to this one encapsulating div right here
with a background gray of 900 let s
watch what happens
i m going to go ahead and type in
position
absolute and nothing happening just yet
you would expect something to happen
immediately
but like position relative position
absolute requires top
right bottom and left properties in
order for this to actually have some
sort of effect
so if i were to go ahead and change this
position absolute and now that this is
position absolute
i can add in a top property and i set
this equal to
zero well you might think this might
just stay in place because when we use
this with position relative
well a top zero means it would just be
put in this initial spot
but if we were to add top 0 to position
absolute
you re going to see it s no longer here
but if i scroll
up well now it s at the very top of our
actual browser window
so by default an element with position
absolute if you set it to top zero it s
going to be positioned at the top of
your browser window
but if you have a parent of this one
element right here that has position
absolute let s go ahead and find its
parent we go up
one two three up to section we can see
this is tabbed
so this is going to be the parent
element of this div if this parent
element right here has a position of
relative
well this position absolute element is
going to be positioned
relative to this one element with a
class of relative
i can show you exactly what i mean by
this if i were to go ahead and push this
top
down so i m going to go ahead and push
top back
to something like 20 pixels i push the
top
of the section right here down 20 pixels
you see now is 20 pixels down from where
it was originally positioned
its original position is going to be
right here
but if we put top 20 on this now it s
pushed down 20 because when we re using
our relative positioning
with top while it s just pushing it down
from its original position
but the thing is since this has a
position of relative
the element nested inside of it with a
position absolute
is always going to be relative to this
one element so you can see
text right here with background gray of
900 is no longer at the very top of our
screen but it s at the top
of this one section element because it
has a class of relative which in return
gives it a position of relative
so you ll see if i go ahead and turn
this off for this one parent container
with relative
now our position absolute box is going
to the very top of the screen again
because if we look at all of its parents
which right now is just going to be
section
and body none of those have a position
of relative
and since none of those have a position
of relative actually taking effect
since we turned it off well by default
it s just going to go to the very top of
your browser window
so we actually have this laid out
correctly previously when we had
position relative turned
on for this section right here let s go
ahead and refresh to get a fresh
start and now we can go ahead and look
at our elements and determine
how we want to use position absolute so
we could either put position absolute on
this element right here
and overlay it relative to the section
that we had prior
or we can change this background video
to have a position absolute keep it as
is and that means it s no longer going
to be in the document flow
but this right here will be in the
document flow
and anything underneath it is going to
be pushed down according to the height
of the entire encapsulating container so
if i were to make the smaller you ll see
things get pushed down because the text
requires more space in order for it to
fit
so in this case what i m going to do is
i m actually going to make this
background video a position of absolute
and i m going to keep this in the
document flow so
let s go ahead and do that within our
code let s go ahead and find our
background video
which is this right here so if i were to
go ahead and make this
absolute we can go ahead and save and
refresh nothing going to happen you ll
see our text is still overlaid right
here
we want to make sure that this absolute
class takes effect but we never actually
created
a class of absolute so we re going to go
ahead and do that type in a class of
absolute
we re going to use position property and
this is going to take the value of
absolute
so by adding that we refresh and now
that did take effect so this entire
background video is out of the document
flow
but one thing that happened is since
it s out of document flow our text got
moved upwards because that still
is in the document flow is still
affected by the elements around it
but the issue is this position absolute
element is on top of it we need to make
sure that this position absolute element
is behind our actual text
so we can go ahead and find our text
section which is this background gray
element
right here we re going to go ahead and
add a position of relative onto this and
then we re going to add
on our class of z10 to bring it closer
to us remember z10 only works
when you have a position of relative or
absolute but even if this is relative
and the other element is absolute the
z10 will still
take effect so if i go ahead and add
that refresh
now you ll see our text is back which is
great obviously this isn t where we want
our text to be let s go ahead and
inspect things to see what s going on
so if we look within our section right
here we set its top to negative 77 so
the background video actually covers
this top
portion right here so one thing we could
do is we could actually get rid of this
top
negative 77 so this entire section isn t
covering our header at all we want to
make sure that our header
is pushing down the content beneath it
so where we have
a top of negative 77 i m actually going
to go ahead and take this off
of the main section once i do that i
refresh
well now our header is back we can t
really see anything because all of our
content here is white
but it definitely makes sure that our
content right here is being pushed down
and that it s in the document flow
but now we just need to make sure that
we move our background
up 77 pixels because that s how much
space is required to cover up all this
empty white space
so in order to do that well we can take
that style that we just cut out
and paste it within the style tag that
already exists
so just go ahead and make sure that you
get rid of the style attribute right
here
since that would be duplicative we just
go ahead and add top
negative 77 onto the style attribute and
since this is position absolute this top
will still take effect but it s no
longer going to be within the document
flow so by saving this and refreshing
you ll see now our background video is
moved up
negative 77 pixels but this is still
within the document flow because we re
not actually affecting the main section
which had this class of relative so we
can actually go ahead and get rid of
this relative class as well
clean up our html a little bit we ll
delete that save and refresh
so that is looking good let s go ahead
and make sure that this content box
right here is lining up with our logo so
we have
flush text on the left it s going to
create for a very professional look
so let s go ahead and inspect our header
and see what padding is applied it looks
like we just used some sort of inline
style as you can see here it s
within the style tags so what we can do
is we can just go ahead and copy
this inline style of padding 18 pixels
by 12 pixels make sure you copy that
with command
c and then we re going to scroll on down
to our content box which is going to be
right here
which has a background gray of 900 so we
can do
two things to make sure that this is
flush with our logo over here and takes
the correct padding
one we can just go ahead and add the
padding directly onto this element
or two we can create an encapsulating
div
which applies this padding directly and
i think i m going to go ahead and go
with that one just so you can see a
different style being used
so i m going to go ahead and add a style
attribute keep this padding in place
this is going to add 18 pixels of
padding at the top and 12 to the left
and right
kind of only makes sense for us right
now to add the padding to the left and
right because we re just trying to line
this text up with our logo
so we ll go ahead and change the top and
bottom padding to zero
and then since we have this opening and
closing div we re going to go ahead and
take out the closing div
and add it to the very end of this one
encapsulating div for all of our text
over here
so i m going to add it down here what is
line 228 for me
and i save these are all going to be
indented automatically since i have a
plugin that does it for me
i m going to go ahead and save refresh
and now you can see
this container right here is flush with
the end of our logo
it looks a lot cleaner compared to just
having up on the left hand side
so now that we have some sort of dark
background in place we can actually get
rid
of this placeholder background that
we ve been using of background gray 900
we can just go ahead and get rid of that
class save and refresh
and we re looking pretty darn good right
now so now we just need to make sure
that this is spaced correctly from our
header
so we look over here at our header you
can see there s an adequate amount of
spacing
pushing down turbocharge your what do we
want to use for spacing between elements
well we always want to use margin
because no background color and no links
are being taken into effect here
so our content is currently all inside
of this one div right here where we just
added padding to
we can also add a margin top property
and set this equal to something large
like 200 pixels to push it down
from our header now typically you would
expect this to just work you see our
text is pushed down but now our
background video is out of place
so if you re ever confused on what s
happening it s always good to inspect
your elements i m going to go ahead
and find our video and then it s sibling
div which is pushing everything down
by 200 pixels so you ll see we are
indeed being pushed down by 200 pixels
but our video here
has a top of negative 77 relative to the
main section so this section right here
contains our text which is in the
document flow so as a result
even though this is being pushed down
200 pixels the video is only going
negative 77 pixels upwards
based off of the positioning of this
text right here
so as a result something we can do is
instead of using margin top which pushes
everything down from the outside of the
element
we go ahead and change this to padding
top and it s going to give us the same
effect our text is going to be pushed
down
but our video is going to remain in
place and give us that look we re going
for
so instead of using margin top this is
actually a case where we re going to use
padding top
we can refresh and that is looking good
but this is a little
too far down for my liking it s a little
off compared to what we have over here
in the design so instead of referencing
200 pixels for padding top
we can just go ahead changes to
something like 100 until we get a
look that we are happy with and i would
say 100 pixels is pretty darn close
so i m going to go ahead and stick with
that and right now we have a minimum
height of 550 pixels
you see as i begin to shrink this down
this maintains that height of 550 pixels
which is fine but as we start to get
bigger
well it starts growing and that might
not be something you really want so if
you want to make sure that this is a set
value you can just go ahead and change
this to height and if you want to match
the design
we re just going to go ahead and set
this to the value we grabbed within the
design
which is going to be 689 pixels so we
can go ahead and save that refresh
the min height is now 689 pixels and no
matter how
big or how small i get it s always going
to maintain
that height that we listed out within
right
here so how do we tell that this
actually looks like this even though
this is developed for
screens with a width of 1440 pixels so
this is where mobile responsive
development is going to come into play
and whenever i use multi responsive
development this is kind of when i go
into using a framework like tailwind
because it s going to make our lives
so much easier we re still going to go
over things like media queries and how
to make sure you change your styling
based off of which browser size you re
on
but we are definitely going to be coding
this mostly using tailwind so i m going
to show you how to install that
how to use it and how to use media
queries so as we get into mobile
responsive development making sure that
our site looks good across
all screen sizes whether they be really
small
like this on your phone or really large
on something like
a macbook retina display we really have
to start taking into consideration
how our containers are laid out so the
very first thing we re going to do
actually is we re going to test this on
a larger screen and you don t actually
have to buy a larger screen to test this
we can go ahead and use chrome
development tools to see exactly how it
should look
using an emulator so one cool thing
chrome provides is if you right click
go to inspect and then hit this little
icon right here
toggle device toolbar you re going to be
put into an
emulator mode what does this allow us to
do it allows us to see what our site
looks like
on various screen sizes so you can see
right here at the top i have
some dimensions listed out 1440 by 550
right now this resembles a screen that
is 1440 pixels wide
and 550 pixels tall so i can go ahead
and change the sizing one by typing in a
number directly such as a thousand this
is what it looks like now
or i can go ahead and use this bar right
here to see
popular screen sizes so if i want a
large mobile screen this would probably
be something like an iphone
10 plus i believe 425 pixels wide
i can click that and see this is what my
site would look like if someone were
visiting on that iphone device
second thing i can do is go to tablet
size which is 768 pixels wide
like so this is what it would look like
on a tablet and then i can go ahead and
go to 1440 which is actually the exact
same size we have within our figma
design over here
so now that we have this exact same size
open i can go back and forth between my
sigma design and see does this actually
match up
one two one with what we have in the
design and this gives us a lot better
reference than what we had previously
to make sure that we re matching things
up correctly so you can see
we have a few things off mainly is we
have more space on the left and right
hand sides in the design compared to
what we have now
maybe a few small typography things but
the main thing is definitely the spacing
on the left and right hand sides
so we have padding in place but why
doesn t our spacing look like this
well the issue with using just padding
on the left and right hand side of your
elements to make sure that it has
breathing room from left and right hand
side of the screen
is this well let s go ahead and change
our resolution to something that s super
hd retina i m going to go ahead into a
4k
monitor which is 2560 pixels wide i m
going to click this very far end
tab you can see this is what our site
would look like on a very large device
all of our text is all the way on the
far left hand side of the screen
our login button is on the very top
right hand side of the screen we have
all this empty space
in the middle it just makes our site not
looking as good as it would
if we were to use something called a
container so really what we want to do
here is we want to make sure on these
very large screens that we cannot go
past a specific max width we want our
content here to be in the center of our
screen
not all the way to the far left not all
the way to the far right
because that s going to cause the viewer
to have to look left and right
to just see the main content on our
screen we want everything placed evenly
in the middle
because that s going to make it as
readable as possible for the person
visiting our site so what we want to do
is we actually want to wrap
all of our content within a container
element we re just going to make sure
that we re only filling in this space
here
it s not going to be on the far left not
going to be on the far right so we re
going to keep
open this 4k screen just to get this
effect and by getting this effect we re
going to get something that looks more
similar to the spacing we have on the
left and right hand sides over here
within the design so let s go ahead and
open up our code while keeping the 4k
screen open we ll actually go ahead and
start
with our header element so on our header
element we want to go ahead and add some
sort of max
width to this so i m going to go ahead
and add max width into our style
attribute
and a pretty standard max width for a
container i believe is something like
1200 pixels wide so i m going to go
ahead and start with that and just kind
of eye
as i go i m going to go ahead and start
with 1200 pixels wide
if i go ahead and refresh you can see
now our header can be
no more than 1200 pixels wide and that s
actually looking pretty good
the login and sign up button are not too
far from all of the links on the left
so the user s eyes don t have to travel
as far and if we were to even center
this it would look a lot better
so let s go ahead and center this how do
we center an element without wrapping
this in something like a flex box
well a cool way to center block elements
or flex elements is we can set the
margin left
and the margin right of this element to
auto
and instead of sending it to a set pixel
number if we set this to the value auto
it s automatically going to center our
element it s going to put an equal
amount of margin on the left and right
hand sides of the screen
going to center everything so i set
margin left and margin right to auto a
lot so i like creating a class for this
to center elements which are flexor
block
and that also have a max width so what
i m going to do is i m going to create a
class called
mx auto and like i said this sets the
margin left
equal to auto so this isn t a value like
0 or 20 pixels or 30 pixels
this is just a set property value of
auto i m going to do the same thing for
margin right
set that to auto and now i could take
this class
and apply it to our header element
and it s going to give us equal amount
of margin on the left and right hand
sides
of the header which has a max width of
1200 so let s watch what happens when i
save and refresh
now all of our content is centered for
specifically our header
so we re looking a lot better than what
we had prior our header is no longer on
the far
left and our buttons no longer on the
far right it s in a container so it
doesn t take up that much space it s
easy for us to navigate
look at read and consume so now we just
need to do the exact same thing for this
content right here
so remember we need some sort of max
width and it s pretty good
practice to be standardized with
whatever max width you re using and when
you use a framework like tail and css
it gives you that standard out by
default so you never have to worry about
changing it or even setting
these static values like 1200 pixels in
the first place but since we re just
learning all this now and we re doing it
manually all we re going to do is we re
going to take this max with style
we re going to go to our next element
which needs to be centered and has
spacing on the far
left and far right correctly that
element is going to be whatever is the
sibling to the header tag
which here is the section the section
contains all of this content right here
now let s go ahead and watch what
happens as we begin to add a style
of max with 1200 to this section i m
going to save
refresh and you see obviously there s an
issue here we just added a max with 1200
to this entire section which remember
contains
our video tag so since the video tag
cannot expand
past 1200 pixels wide well now we have
all this white space on the right hand
side
not really what we want so we don t want
to put the max width here on the section
parent tag that contains the video
right inside of it what we want to do is
we want to create a
div around this content encapsulation
right here
set the max width of that to 1200 pixels
and then center that and that s going to
give us the exact same effect that we
got for the header
so right now we have it looks like a div
that already encapsulates this main
content div and we re using this for our
padding this is a perfect place in which
we can use
this additional style of max with 1200
so we re no longer going to affect the
max width of the video since this is no
longer a parent
of the video tag this is just a sibling
of the video tag so what i m going to do
is i m going to add in a style of max
with
1200 pixels the same max width we use
for the header
specifically for this content section
right here i can save and refresh
and no changes yet at least not visibly
but if i go ahead and inspect that
element
we just added a max width to you can see
that it no longer takes up the entire
width of the screen
we have all that margin on the far right
hand side and if i were to delete this
you can see
it would be taking up the full width of
the screen so adding this max width in
place is what we need to get started
and now we can add on the mx auto class
which is going to give us even margin
on the left and right hand sides of our
screen so we can go ahead and add
mx auto refresh and now that is going to
be perfectly centered perfectly aligned
with our header up here
so now we re looking pretty good on
these really really large screens that
very very few people have but if we were
to go ahead and look at this
at the size of 1400 pixels you can see
now we have that spacing on the left and
right hand sides of the screen that
we re looking for within our design
this isn t hugging the edge as closely
as it was prior it s only as large
as we need it to be but at the same time
if we were to go ahead and scale this
down we still have that padding in place
to give us breathing room and everything
still scales down because this is only a
max width
it s not a set width when we use a max
width the things inside of it can still
scale down as needed they just can t
grow past a certain size
which is great for large screen sizes
for keeping all of our text and content
legible
for those who actually use that large
size screen so that s going to take care
of containers and how to develop for a
large screen is
pretty much always want to use some sort
of container for your content so the
user s eyes don t have travel left and
right
to get to what it is they want to see
okay so to get our site
friendly on mobile devices like your
phone we re going to open up the
inspector again and we re going to go
right back to the emulator screen like
we have right here
we re going to mainly focus on probably
mobile m because that s going to take
into account
most phone screen sizes 375 pixels wide
is going to account for larger phones
and also smaller phones so we should get
something that looks pretty good across
all devices at least
all the small ones so obviously what we
see right now is not
very good looking our text is off the
screen
and this is going to be very small very
hard to read when looking at an actual
mobile device
so it s pretty typical for designers
when they re designing to provide
a desktop design and also a mobile
design because sometimes what we have on
desktop
when it s squished together like we have
right here on a mobile screen
well it s just not going to look that
good so there s some things that we have
to change as we go about our development
to make sure that this looks okay
and typically we have to rearrange this
in a different format which is why the
designer will provide both a desktop
and a mobile design when they re
designing a website so here i designed
both a mobile and a desktop design which
you do first it pretty much comes down
to preference a lot of people like
developing out this setup first on
mobile
and then kind of rearranging things to
match a desktop design which you do it
doesn t really matter we just did the
desktop first we re going to go into
mobile second
for this section right here with the
stats we re going to go ahead and do
this one mobile first and then go into
the desktop version so you can have
experience with both make sure that
you re ready for whatever site it is
you re about to develop
so when it comes to mobile development
we re not actually going to redevelop
this section we re just going to alter
the code we already have
so that when we resize our screen things
change such as our text is going to get
smaller it s going to be rearranged in a
different format
the container that we have right here
with the max width we re not going to
have that anymore
we re not actually redeveloping
everything we re just making sure that
the styling using css for these elements
is different when we re viewing on
smaller screen
sizes so how do we use css to target
smaller screens well we do so using a
css feature called
a media query so let s go ahead and
start using a media query to target
smaller screen sizes such as a mobile
phone at 375 pixels wide
so we re going to head on over to our
code and we want to focus in
on our style section which is going to
be right here so to write a media query
we re going to start off with an at sign
write media we re going to create some
opening and closing parentheses and then
here we re going to write in
min dash width we ll show our minimum
width b we re going to start off with
600 pixels just to help illustrate this
we re going to add some opening and
closing curly brackets and now
inside of these opening and closing
curly brackets where we specified media
min width 600 pixels this is where we
can begin writing more css classes that
are only going to take effect
after our screen size is past the
minimum width of 600 pixels
everything outside of this media query
will still take effect for small screens
and large screens but everything in here
is going to override those smaller ones
if we declare
a property that s being used on those
smaller screen sizes so
anything inside of this media query is
going to take effect for all browser
sizes above
600 pixels so to illustrate this let s
go ahead and add a class of background
blue and we re going to add background
dash color
sequel to blue now we can go ahead and
use this class
on something like our header we save we
refresh we see our background is equal
to blue
even though we are on 375 pixels and i
just said
this should only take effect if our
screen size is larger than
600 pixels let s get out of the emulator
and see what s going on here
so here we are definitely larger than
600 pixels even on our non emulated
screen but if we go
down you can see the top right hand
corner our pixel width
800 700 600 if we go below 600
watch what happens to the blue
background color i go down beneath
600 and it immediately goes away because
this class is only taking effect
on screen sizes above 600 pixels
so why in the emulator let s go back to
that
when we go down 375 pixels why is this
still showing why isn t it emulating
correctly
well this is because our html markup is
missing a tag that tells the browser how
it should resize elements
this is a tag that you should always
include in all of your projects
here i opened up a new tab in the
background
and this is a w3 tab on setting the
viewport so you can see right here
that they give us this meta tag and this
meta tag gives the browser instructions
on how to control the pages dimensions
and scaling
so this is something you should include
on every site you create
we haven t added this into our project
yet which is why when we use this in the
emulator the dimensions just aren t
being read correctly
so things are looking a little off on
mobile and our background is showing a
blue color even though our dimensions
are 375 pixels
which is obviously less than 600 pixels
as specified in our media query
so we re going to go ahead and copy this
line of code you can also get this in
the description of this video on
chriscourses com
and then we re going to make sure that
we post this at the top
of our file and we can post this the
first thing after our head
tag so i m just going to paste that in
there and once i save it
and i go back to our site over here and
refresh watch what happens to our page
you re going to see things look
completely different but things are
scaled down correctly because we added
in
this meta tag now we just need to make
sure that this is edited in a manner
where this actually looks good you ll
see our header is no longer blue
i start sizing things up to something
that s more like tablet
sizing things resize correctly you ll
see once i hit that 600
pixel break point we just set with the
media query the background color of blue
goes away but there s definitely some
mobile styling we have to do here
to make sure that things look good on a
mobile screen because this is not what
we want to show
to our viewers so now that that meta tag
is added
let s go ahead and do some real world
styling using media queries
so basically everything outside of the
midi query is going to be used for
mobile styling
everything inside of this is only going
to take effect for desktop styling
so a common minimum width to use for
projects for
small screen sizes where everything
above a small screen size is going to be
640 pixels i m going to change our 600
to 640
we can go ahead and get rid of this
background blue we don t need that
anymore because that was just for
illustration purposes
and now let s go ahead and check out our
screen at 425 pixels within the emulator
so not looking too hot obviously and if
we re shooting for this over here
well we got a few things that are off so
the very first thing i would do here
is to make sure that this background
video expands the entire width of our
screen
so i m going to do is i m going to
inspect that element directly to see
what is going on and how i can actually
fix it to make sure that it s matching
up with what we have over here
so as we begin to scan through this
you ll see even though we re hovering
over our section right here it s still
425 pixels wide
and obviously it says up here in our
emulator we re also viewing at 425
pixels wide but something
is definitely off with that now this is
something that can commonly trip you up
and it s just something that chrome
kind of messes up on in the emulator
once you add in
that meta tag that we added in at the
very top for the viewport a refresh on
the page isn t going to fix the emulator
you actually need to exit out of the
emulator and then
re enter it so as long as this is saved
with the meta tag of viewport
you can go ahead and exit out of this by
clicking this little x right here and
then we can right click
hit inspect and now we re going to be
brought back to our page but now it s in
the correct sizing that we want
if we go ahead and inspect that section
again you ll see here it s listed at 425
pixels and same deal for up here
we have 425 pixels so we re in good
shape but like i said now we need to
make sure that this
looks more like that so to make our
lives a little easier we can actually
rearrange
our console so usually when i m
developing on mobile
i like my console being on the right
hand side and it s going to give me a
little more height within this view
because mobile phones
are longer in height than they are with
width so it s going to make sure that
i m
resembling what looks like a mobile
phone to make sure that i can move this
console all i have to do is click these
little three buttons right here
and i can click whether or not i want
the console docked on the right the left
or in a separate window typically i only
go between dock to bottom
and dock to right in this case i m going
to go dock to right that s just going to
move my console over
to the right hand side and make things a
little easier to view as i go about
developing this
so let s go ahead and start by shrinking
our text so that it looks a little more
like this over here
so let s go ahead and inspect this i m
going to go ahead and click on the text
and we can see right here this text has
a size of 36 pixels
while this text over here has a size of
60 pixels so obviously this is a lot
smaller than what we have on desktop
so we want to make sure that we create a
class that only affects mobile sizes
and changes the text to 36 pixels but
once we
reach that 640 pixel break point that is
when we want to change that text
to a class that has a size of 60 pixels
so here s what we re going to do
we re going to make sure we know the
text size for mobile which is going to
be
36 pixels we re going to scroll on down
to our media query
and right above our media query we re
going to create a class called text
dash 36 and we can even be a little
specific with this number by adding n p
x and then i m going to write that our
font size should be equal to no other
than
36 pixels so now i have a class that can
be applied
to our mobile element let s go ahead and
do that so we need to look for the text
turbocharger development career we re
going to go
on scrolling down until we find that h1
turbocharger development career and here
we can add on
that text 36 pixels class so since we re
adding a font size class right here
if we save and go back to our site this
isn t going to take effect immediately
why is that because we have a style
attribute on top of it
which is declaring that the font size
should be 60 pixels
so the style attribute is always going
to override your css classes that you
declare within the class attribute
as a result you want to get rid of the
style tag so we can make sure that we
can use media queries in the first place
so we re going to get rid of that style
tag and now when we refresh
this is going to be a lot smaller and
pretty close to what we have over here
it should be near exact with that font
size
at no other than 36
pixels so that is looking good but since
we just added that class and got rid of
that style tag
i m supposed to find that this should
have been 60 pixels for a font size
you ll see once we get out of the
emulator well now this is just way too
small on desktop so we need to take
that into consideration we just added a
class for the mobile view
by making sure we declare the class
outside of this media query
as a result for desktop classes we want
to make sure that we re declaring them
within the media query so these are only
going to take effect
on screen sizes larger than 640 pixels
wide
so here we re going to create another
class called
text dash 60 px
and here we can set the font size equal
to 60
pixels so now we can go back down to our
h1 tag
which will be this guy right here we can
also add in
that text dash 60 pixel class so now
when i refresh on a large screen like we
see right now
that s going to go to 60 pixels but if i
resize this down
to a mobile view you re going to notice
that that text eventually gets smaller
so that s more visible on a mobile
device so this is a good introduction
on how you get different classes at
different screen sizes
but when reading this within our html
it s hard for us to determine
which of these classes is going to be
displayed on mobile
and which of these is going to be
displayed on desktop
as a result for those displayed on
desktop it s good to add a prefix onto
these class
names the prefix we re going to add on
is going to resemble
a small screen size so anything bigger
than the small screen size
should show this specific class here s
the prefix i like adding on to my
classes it s going to be
s m and then a colon but note
when you add a colon within css directly
it s not going to be red
unless it s something called escaped
this character is parsed by css in a
specific way where it s looking for this
as a key indicator to perform
some specific task but we really just
want to use this as our class
name part of the class name so if we
just want a straight colon
within our class name we need to make
sure that we escape it to tell the css
compiler
this is just part of our class name so
we re going to add a backslash on here
like so
so when we actually call this class name
we re going to write it in
as sm colon text 60px this backslash is
not going to be required
and it s just a way to tell the compiler
we want to use a colon
so by adding in this sm colon we can go
back
to our html and before our text
60 pixels we re going to add in the sm
colon
class we just created and things should
function
exactly the same as before you ll see
when we go past a certain screen size it
gets big
and we go back beneath 640 pixels it
gets small again so this is still
functioning
exactly as before but it s more legible
for us as developers within our html
because now we can say
well the mobile size for this is going
to be 36 pixels large
but once we reach that small screen size
i want this to jump
up to 60 pixels large so it s more
legible for us
as a developer to know what is taking
effect on desktop
and what is taking effect on mobile
screen sizes so if we were to write out
a few more mobile classes for
our design let s go ahead and go back
into the emulator like so
we re already at 425 pixels wide we ll
go back to our design
we ll start making sure that the rest of
our text is laid out correctly let s go
ahead and do a media query
for this paragraph text you see right
here
the font size is 16 pixels on mobile but
if i click on desktop
it goes up to 20 so all we really need
to change here
is the font size for the paragraph text
so we re going to scroll on
up to our style tag and here we know we
need a class
that changes our text to 16 pixels large
we re going to add in a property of font
size
16 pixels that is going to be the mobile
size
and then the desktop size is going to be
we re going to add the sm prefix in
there
just to indicate in our html this is
only going to take effect on desktop our
class name is going to be
text 20 pixels because that
is what was listed out in the sigma
design for desktop thus our font size
should be
20 pixels like so so now we can
basically use both of these classes
one so that this text over here the
paragraph text is 16 pixels on mobile
and then once we reach desktop size
we re going to go up to 20 so let s go
ahead and do that
we ll find the paragraph text it s going
to be this right here
let s go ahead and write in that class
name text 16
pixels to start we save we refresh
nothing taking effect just yet because
remember whenever we have the style
attribute in place whatever styles are
written inside of here are going to
override
the styles we put within the class
attribute so you ll see right here
we still have font size 20 pixels as a
style attribute we can go ahead and get
rid of that now
now if we save and refresh this is small
but we need to take into account once we
reach past
640 pixels this text needs to get larger
it needs to go to 20 pixels you ll see
that it s just not happening right now
so what we re going to do is we re going
to add in the sm class to declare this
is a class that should be used on screen
sizes bigger than 640 pixels and
reference
text 20 px
we refresh we go up past
640 pixels and it s kind of hard to see
with the scaling right now so what i m
going to do is exit out of the emulator
and go ahead and shrink this and you ll
see once we hit that smaller screen size
the text
on the paragraph side of things
definitely shrinks along with the h1
at the top so that s how we re going to
continue developing this section right
here
but it can be quite tedious to keep
having to write out all of your classes
like this
if you just want to go as bare bones as
possible and write all of your classes
manually
this is the way you re going to do
things but it s a lot more efficient
and a lot more standardized if you re to
use a css framework like tail and css
so i think this is the point in time
where we re finally going to insert that
into our project
and make use of it to finish off the
mobile side of our project
okay so now we re about to upgrade what
we re going to do
is we re going to use talon css to write
our classes so we don t have to keep
writing everything manually
now that you have a good grasp on css
and how to write your own classes if
needed
i think we can move on to that section
so what is tailwind css well
basically a css framework which just
means it s a library of classes
similar to what we see right here a
library or grouping of classes
that are provided to us out of the box
so we don t have to write our own css
like this now the classes i ve been
teaching you how to write
such as absolute background white mx
auto these are all provided
by tailwind by default i ve basically
been teaching you how to write css using
the tailwind methodology
which is we create utility classes one
class gets one specific purpose
so that we re not just bunching a bunch
of different css properties together
into one massive class like so because
it gets really hard to edit down the
line if we were to do that we pretty
much begin overriding things
it s not a fun experience for when i ve
developed it which is why i m teaching
how to develop using
the utility method instead so how do we
integrate tail and css in our project
how do we use it what does it do
well let me show you the first thing
we re going to do is go to the tailwind
docs it s going to be tailwindcss com
and here you can see they describe
themselves as a utility first css
framework packed with classes like flex
pt4 techcenter it s pretty much all the
classes i ve been teaching you how to
create on your own
but they re jam packed in their own
library so you don t have to create
those classes yourself
so to get started we re just going to
click this little get started button
and then we re going to click this
purple button which says
start learning so tailwind has a bunch
of different guides on how to get
started but in my opinion for a beginner
they re pretty
darn confusing to do it the way they
want you to so what i like doing is i
like just hitting command
f when i m on this page and i like
searching for c d
n so we re going to pull this project in
using what s called a cdn
it s a content delivery network
basically all it does is we re pulling
in a file
that s hosted on tailwind s website
pretty much never changes so we don t
have to worry about whether or not they
change
it and it s going to allow us to use all
the 101 css classes simply by pasting
this in
as a link tag within our html so here
you can see they really don t want you
to use it they have all these x s why
you shouldn t but to get started it s
totally fine to use it and i would
recommend just doing this
because it s a lot easier than the other
methods that they have on how to install
the package so all we re going to do is
we re going to head to this little
snippet down here this is a link tag
that references tailwind css if i go
ahead and copy this
go back to our project scroll to the top
i can go ahead and paste this right
beneath
our viewport meta tag like so and that s
all i have to do to import tailwind into
our project
so here they re giving us a url within
the href attribute
which reference is tail and css if i
were to go ahead and paste this into a
browser window
like so you ll see this is exactly what
tailwind provides it s a bunch and bunch
of different class names
all minified so they re all tightly
packed together with no white space
for page speed purposes and these are
pretty much all the classes we might use
within our day to day developments
you ll see we have access to all these
classes we don t have to write any of
this ourselves as just provided to us
and then when we need to see what is
available to us we can use the tailwind
docs to search for a certain css
property
let s say margin we click on the first
option here
and then we can see exactly what
property will be applied whenever we use
a specific tailwind class
so these are 10 1 classes available to
us and these are the properties that
will be applied when we use one of the
tailwind classes so
it s a really nice way to create some
sort of css standard
we re only using a specific amount of
classes and all these classes are
written for us automatically so we don t
have to write them
ourselves so with tailwind imported over
here make sure you save
and we ll go ahead and refresh
index html and let s go ahead and make
this full screen to see if anything has
changed in the process so it looks like
a few
issues to start one is we have this
white space up here and it changed
our text right here to not be as bold as
it was
prior so one of the things with tailwind
when we import it is tailwind presents
to us
what is called a browser reset file so
basically the creators of tailwind went
through every single html element they
could find
and reset them so that all their
properties values are equal to zero this
is what s called a browser reset and we
did a little bit of this when we set our
h1 s margin to zero and our paragraph
tags margin to zero as well
those browser defaults are not needed
and they re just there so that if you
want to throw some html on a site
that there s going to be a little bit of
structure when it comes to spacing
between different elements but they re
really not needed especially for going
for a complex design like we re
developing right here
those browser defaults tend to get in
the way so it s smart to do a browser
reset
like tailwind provides so taiwan is
going to provide that browser reset
as you can see it reset our h1 tag so it
no longer takes a bold styling by
default and then it s also going to
provide us all those classes listed out
within their documentation
so first thing first let s go ahead and
fix our text now that this got
reset so do we have a font bold class
anywhere let s go ahead and search our
html within my text editor i m going to
press command
f for a search i m going to look for
font
dash bold it looks like we created this
class ourself that s totally fine where
is this being used though
looks like it s only being used within
our button so if we also want to make
our h1 bold
like it was prior we re going to find
our h1 tag which is this right here
turbocharge your and then on top of this
we can add
the style font dash bold
because the browser reset took this away
h1 tags by default within the browser
are bold
but tailwind said no we don t want that
as a default so we need to make sure
that we add this manually so our h1 tag
is it going to be bold when we add that
class yes it is so that is going to be
back to normal
now one of the classes tailwind provides
is font
bold so you can see we declared the
class up here
this font bold is equal to font weight
of bold well since tailwind already
provides it we can go ahead and get rid
of this class
if i save and refresh well everything
still looks the same for our bold font
now if you re ever wondering whether or
not tailwind has a class especially the
ones we just wrote
we re going to go on over to the
tailwind docs taloncss com
you can just go ahead and hit the search
button up here and search for something
like
font dash bold so that is the class that
we just used we can click on it
you can see the class definitely exists
within tailwind these are the other
options that we can use
but since this exists within tailwind we
can safely delete it from our css over
here
so another thing to fix besides this
white bar at the top
is going to be the spacing between our
text
here you can see if we inspect this that
there s really no margin issues there s
no orange border around
either of these so why are these so far
apart well tailwinds reset
added in what s called a line height
reset so i want to go on over to
tailwind docs
and search for something called line
height this is going to be a new css
property
the first time we ve been introduced to
this in this course from what i
remember so the line height property we
have utilities for controlling the
leading or the line height of an element
the line of an element is basically when
looking at this
what is the height of the element with
the text inside of it you can see here
that the blue highlight is the height of
the element even though the text inside
of it is smaller than the actual height
this is due to the line height property
we can go over here into almond style
and type in line height if i were to
change this line height to the same
size as our text over here i believe
this is 60 pixels
you can see that it shrinks down just a
little bit something closer to what we
had and we might even want to make this
a little smaller
something like 50 pixels so if we go on
over to the tailwind docs we can see
what
line heights they provide for us you can
see looking through these provided line
heights while there s nothing that
actually provides a line height of 50
pixels
they use a property called rem which
we ll get to soon
or they use just a bare value without
any property next to it so we re going
to start off with these bare bone values
with no
suffix at the end of them and i would go
with a letting
none to get the effect we want and i ll
explain what that means once we apply it
so we know letting none is available to
us in the docs which means we can apply
it since we imported tailwind
so we re going to find our h1 again and
make sure we refresh so we can see what
it looks like without this class you can
see it s pretty wide pretty far apart
so we re going to look for the h1 going
to be right here
we re going to paste in letting none so
once we paste that in
save it and refresh you can see now this
text is much
closer together so a line height of one
simply gives us
a line height that is equal to our font
actual
size so you can see right here these are
pretty tight together but
the top of this d and the top of this l
is pretty dang
close to the bottom of this y in the
bottom of this g that means that
it s only taking out the exact amount of
space of the content within it we re
only multiplying it by the exact font
size by one
so we re getting a height that is
consistent with the font size
the other value is right here this means
we ve been multiplying the font size by
1 25 and we keep getting larger and
larger till we reach the tail end
of their letting properties which is
going to be letting loose and it s going
to basically multiply our line height by
two
make each line of our text really far
apart from each other
so letting of one is going to be pretty
good to match us up with our desktop
design over here
you can see that looks pretty close i m
going to keep that and now all we have
to do to fix this tailwind import is
going to be this little white
line at the very top so to fix this i
believe all we have to do is find our
video
and edit out our top class to be a
little more negative than it is right
now because some of those resets
definitely affected the height of
certain things
causing this little white bar to appear
in the first place
so i have my video selected i m in the
style attribute i m just going to hit
down on my arrow key to affect this
value you see
nothing being applied i actually have to
hit enter for this to be applied so hit
enter
and it looks like 80 pixels is where we
want to go i can hit up
to lessen that value and once i go to 79
we see the white bar so we definitely
want to make sure we re changing this to
80 pixels
so we re going to find that negative 77
pixels for our video which is right here
and change it to 80 pixels instead we
save we refresh
and now that takes care of the white bar
at the top we re pretty
back to normal i would say compared to
where we were
so if i go ahead and open up our
emulator over here
and i go to that 4k screen
and i might not be able to do it in this
layout so i m going to move our dev tool
console to the bottom
here i m going to click on the 4k you
can see this looks pretty much
exactly the same to where we had a prior
but now we have tailwind in place we
have the reset and we re able to use the
rest of the tailwind classes
so with tailwind integrated let s go
ahead and finish this off on
mobile so we re looking at this at a 4k
view we re going to go back down to our
425 pixel view
and i m also going to move our devtools
to the right hand side like we did
previously so i have a good view on what
i want to edit
so a big issue here is all of our menu
items in the header
well there s so many of them and the
width is so
large that if i were to scroll to the
right hand side over here well you see
our sign up button is over here creating
this white
space on the right hand side and things
are just totally messed up in our header
it s simply because we have too much
stuff up there which is why within
the mobile design on figma well i guess
not in the mobile design and figma the
hamburger should be there i meant to put
it in there
but what we re going for is this little
hamburger
you can see on the top right hand side
that s why once we get to smaller screen
sizes we display this
and a user can click on it to display
the menu options
rather than just trying to shove
everything into that small view because
we can t fit everything
past a certain point over here so we
need to make sure that
once we hit that smaller view we get
this little hamburger menu
so that s exactly what we re going to do
it s not in the design but i promise
that s what we re going to add in there
so let s go ahead and get rid of all of
our options right now whenever we are on
this mobile view and we re going to do
so
using tail and css classes i want to get
you further and further integrated into
that
because it s the most professional css
framework you can use in my opinion
and many many employers are starting to
transfer over to that compared to your
traditional css so let s go ahead and
find our navigation right here if we
look
within our header tag it s going to be
this div tag right here with four
anchor tags inside of it so we want to
make sure that these four anchor tags
are hidden on a mobile view and that
they only show on the desktop view
so we can do is we can write a class
of hidden to hide an element i m going
to add this to the pricing
anchor tag right here and if i save and
refresh pricing tag disappears gives us
a little more space
so let s go ahead and search for a
hidden class did we write this ourselves
i m going to do a command
f search for dot hidden and indeed we
did
but i m telling you right now this is a
valid tailwind class if i quick search
for hidden
that s actually not the hidden we want
that s for overflow but if i search for
display
hidden you ll see that this class sets
an element s display to none
it s exactly what we have right here so
we can go ahead and get rid of this
because it already exists within
tailwind and this right here what i m
looking at
is the display property so you ll see
right here these are all the display
properties that tail and provides some
of them we already wrote such as block
inline block inline
and flex and they have a lot more just
in case we need to use those for
something down the line
so let s go ahead and see what we re
duplicating right now we already have a
class with block and tailwind we ll get
rid of that
class or inline block we can get rid of
that class for inline get rid of that
class reflects already available to us
within tailwind
and i think we re good to go by getting
rid of those couple of classes so we re
going to keep getting rid of classes as
we need to to make our file as clean as
possible
and we can test that this still works by
going over here refreshing
and you ll see our pricing tag is still
hidden even though we got rid of that
class
so let s go back to pricing within our
code right now this is hidden and it s
always going to be hidden even when we
go to a larger screen size past
640 pixels but if we want this to show
this is where media queries start coming
into play
so if i were to say i want this to show
on screen sizes past 640 pixels i can go
and add
an sm colon and the really cool thing
about tailwind is you can use
any of their utility classes appended on
his sm colon prefix so if we want to
make this an
inline element again like it was
previously without the hidden tag
but only on screen sizes larger than 640
pixels
we would add the sm colon and then
simply write
in line this is a class that tailwind
provides for us automatically
if we were to save this and refresh
you ll see we re past 640 pixels
the pricing tag comes back but once we
go beneath
that 640 it disappears so this is a
media query but it s a tailwind media
query
if we go on over to the tailwind docs
and search for break
points we re going to click this first
result
you can see by default tailwind provides
a couple of break points for us
including screen sizes that are larger
than 640 larger than 768
1024 1280 and 1536
all these screen sizes represent
different things typically if you want
to develop something
on larger phones you d probably use a
screen size of 640
tablets are 768 and then you start
hitting the desktop
range once you get up to 10 24 so these
are all valid breakpoints that we can
use within our css
if we want to affect the style of our
element on an even larger screen size
and you can chain these together which
is a cool thing
so right now we re accessing this one sm
break point at 640
but if we wanted to make sure that this
was hidden again at a larger breakpoint
such as 1024
we can simply add on an lg prefix which
stands for large
and say once it hits large again we want
to go back
to the hidden style which sets its
display to none
so if we save go back to our site over
here
we re going to start at a small screen
beneath 640
so no pricing is showing right now if we
go past
640 pricing appears again but now if we
go past
10 24 let s go ahead and move this to
the bottom so we can do exactly that
once we go past 1024 pricing should be
hidden again
so if i go and go and go we hit
10 24 and then pricing is hidden because
of this awesome break point system that
tailwind provides
for small medium large extra large and
two times extra large classes
like i said you can use this for any
tailwind class which is why in my
opinion tell when it s so awesome
you don t have to write your own media
queries like we did up here which can
get really time consuming
they just provide all this for you out
of the box which in my opinion is why
it s so freaking great so now that you
understand how to use talent breakpoints
we can go ahead and put them to use
in a smart manner at least so we want to
keep this hidden class when we re on
small screen sizes like 425 you ll see
pricing is hidden
we furnish want to hide all this stuff
right here beside our logo
and we want to show a hamburger icon
instead
so let s go ahead and set this up just
for pricing
typically if i want something to show on
desktop
i ll go ahead and set it to the medium
breakpoint with md which means it ll
only take effect on screen sizes past
768 pixels
so it s going to be hidden at first and
then once we pass that 768 pixels it s
going to show again
so if i save and refresh it s not going
to show
and it s not going to show at 640 either
but once we hit
7 68 i believe it was it s going to show
again
which is what we want because we ll have
more real estate on our screen to show
all this extra stuff
but we want to make sure that all this
stuff is hidden not just pricing
so one thing we could do is we could go
ahead and copy these classes and just
paste them on
to every other anchor tag to take the
same effect but it s a little
tedious to do that so as a result what
i m going to do is i m going to cut
this class out of pricing instead make
sure it always shows
and then i m going to wrap these anchor
tags in a nav tag
to indicate this is the navigation to
our site and then i m going to paste
in the hidden class and then once we
reach that medium break point we re
going to show this navigation element
not as
inline but it s standard block display
so make sure that you wrap all these
anchor tags in the opening and closing
nav tag
and go ahead and indent them like so
refresh and let s see how things look
while just by adding
the hidden md block pretty much our
whole nav is hidden now
but once we go past that 768 breakpoint
up here they show once again we can go
ahead and exit out of the emulator and
make sure things are still looking good
with that new
nav html it looks like we re pretty good
to go so this is in good shape
and honestly even for mobile screens we
could keep this as is maybe user just
wants to log in and sign up on mobile
but
pretty much not going to be the case
because they probably still want to
access these other pages too
which is why the hamburger menu will
come into play later so let s go ahead
and do the same thing
for our login and sign up button to give
us some room for the hamburger bun i
want to challenge you to do it yourself
with tailwind and its breakpoints so
pause the video give it a go
so to hide login and sign up we re going
to do the exact same thing we did for
this nav
tag all we need to do is find the div
that encapsulates our login button and
sign up on which is this div right here
it s encapsulating these two and we re
going to add on the class
of hidden to start so whenever we re on
425 pixels we should not see these two
which we don t
but later you ll see we re using a flex
class which means
when we actually want this to show we
want it to have a display of flex
so once we get to a large well not a
large but a medium screen size
we want to go ahead and change this
display to flex
so we can get rid of this initial flex
because initially we should have a
display of none but once we hit the
medium break point that is when we re
going to go over to the flex
class we can save refresh and you ll see
that immediately fixed the issue with
the white spacing on the right hand side
we don t have as much stuff pushing out
to the right
so we got rid of that white spacing all
together which is exactly what we want
so as i begin to make this larger once
we hit 768
everything shows but there s enough
spacing for it to show in the first
place
it enhances the user experience it
doesn t take away from it which is why
we use breakpoints so that we can show
things at certain points time when we
need to and hide them when we don t want
them
now i know it s not in the design but
how do we go ahead and add a hamburger
menu if we wanted one
well this is how i would do it i would
go ahead and open up a new tab
and type in hero icons com
this is an icon library provided by the
creators of tail and css
and they are all completely free so that
you can use them within your project
without
any licensing or deal so here we can
simply search for an icon that we want
such as a hamburger
and you can see right now this icon is
called menu within their library
and if we actually want to use this we
can simply copy the svg
go on over to sublime text and paste it
wherever we want to show it
so for us to show this hamburger menu
only on mobile screens it probably makes
sense for us to put it
right after our div where login and sign
up exist so i m going to do that
so when you copy the svg you re just
copying
this text right here this is an svg
element
and when you paste an svg element like
this into your site
and refresh you ll see it instantly just
puts that icon on your site it s really
cool
and it s going to be vectorized meaning
whenever i increase the width of this
something ridiculous like a width of 300
and then i turn
off the classes that are on it already
these are tailwind classes
you can see it maintains its visual
clarity there s not really any
pixelation going on here
that s the good thing about an svg it
always maintains its clarity
so going back to our mobile view you ll
see that we have our hamburger menu in
place and it s already correctly
positioned because
if we look where we re placing this it s
inside of our header tag
which has a class of flex and justified
between and what elements are we
justifying what elements are actually
displaying on the screen well it s going
to be this div
which contains just our logo at the
moment and it s not going to justify
anything with this div right here
because
it s completely hidden if an element has
a display of none using this hidden
class it s just not going to be taken
into effect at all when using a flex
parent so instead the flex parent is
using the next best thing
which is going to be this svg element
this is the next element in line
thus we re justifying the space in
between our logo and the svg
but we can t really see the hamburger
menu so we want to make sure that we
change the color of it now to change the
color of it
all we have to do is on top of our class
is
add on to our classes text
white this is going to change our
element to white we save and refresh
you ll see now that is white perfect why
is it white even though it s an svg and
we re using a text class while it s
white because we re declaring that the
stroke
for this specific svg should be the
current color and the current color just
references the text color for the
element
and we re affecting the text color using
text white that is why it s turning
white
is because we have its stroke color
equal to its current color
so however when we expand our screen
you ll see that the hamburger menu
remains in place
we don t want it there once we re past a
desktop view because it s no longer
needed we can display all of our
elements
and this kind of loses its whole purpose
as we go to
this desktop view so we want to make
sure that we re hiding this
once we reach a screen size that s past
medium so on our svg
we ll go ahead and add on an md colon
and say we want to hide this on large
screen sizes we can save
refresh and now that element is gone
completely and this looks exactly like
we want it to
when viewing on that larger size but
once we go back down we hide our
elements and we re only going to show
the hamburger menu
instead so let s check out our design to
see where we re at
it looks like we re pretty close to
getting this effect one thing we can fix
is obviously we have a ridiculous amount
of spacing we re going to get there soon
but one thing we can do right now is
just affect the width
of this button you ll see on mobile
we re expanding its width makes it
easier to press with your thumb because
it s expanding the full width of the
screen
so we want to make sure we add that
effect when we re on a mobile view
so let s go ahead and do that now so
we re going to go ahead and find our get
started button which is going to be
within
the section tag somewhere and here it is
so this is where we want to start adding
on some tailwind classes
so i m going to go ahead and move this
over to the side so we can see
everything at the same time
and how do i want this button to look on
mobile well i want it to be the full
width of its parent container
and that s going to expand the full
width of the screen minus the padding
associated with its parent
so what i can do is on this button class
i can go ahead and add on a class of
width
full which is going to give it a width
of 100 i believe that is one we already
created
it s also available within tailwind we
save we refresh and it s as simple as
that now the button is the full with the
screen on mobile
but until we add some sort of breakpoint
that affects the width on desktop sizes
you ll see when i exit out of the
emulator and go to a desktop screen
while this is still taking out the full
width of the container so we want to say
once we get to
a medium sized screen that we no longer
want this width to be
full we want it to be calculated
automatically based off its initial
value
so we re going to add on a class of
width auto if we save and refresh
well nothing happening just yet let s go
ahead and inspect to see what s going on
we ll go ahead and open up the inspector
i m going to get out of the emulator
view to make this a little easier for me
to read
and make this full screen as well so i m
going to inspect this get started button
and see what s going on here so we can
see our element style
these are things that are always going
to override any classes that we have but
none of these are associated with the
width of the bun so we can skip those
you can see right here the width full is
taking effect but we specify that this
should be
with auto you ll see right here the
strikethrough indicates that it s being
overwritten
so why is with full overwriting an empty
class when the md
classes should always override the bare
bone class is like width full
well we can see exactly where this width
full is coming from
by clicking this little source file over
here and if we click it
you ll see this is a class that we
referenced within our css we actually
created this ourself
so we can go into sublime text and look
for width full
this is what we created why is this
taking precedence over our md
class of with auto it s because it s
beneath our tailwind import tailwind is
the first thing we re importing
but any other classes that we import
after it are going to take effect
over those bare bones classes from
tailwind so since
this was after our tail would import it
is taking precedence
and that is why it is still a width of
100
even though we specified it should not
be so we go ahead and delete that
and then refresh you ll see our get
start button goes back to normal
but if we go ahead and resize this down
to a mobile view well now that width
full is taking effect
and filling up the full size of our
screen so next up
i want to go ahead and take care of the
spacing between our header
and our text down here but before we do
that i want to introduce rem
and m units an m unit determines how
large something is relative to its
parent container s font size
for instance by default most html tags
start off with a font size of 16 pixels
using an m unit we can say that one m is
equal to a parent div s default
of 16 pixels so if we were to set a
paragraph tag that is nested within a
parent div
to have a font size of 1 25 m we d be
changing the paragraph tag s font size
from 16
to 20 pixels since the 16 pixels of the
parent div
times 1 25 m is going to be equal to 20
if we were to change the parent dave s
font size to be 20 pixels instead of 16
well then the paragraph tag with a font
size of 1 25
m would be 20 times 1 25 which would be
equal to 25 pixels
m units are used if you want your text
to always be relative to a parent tag
if you have multiple elements inside of
a div where some are smaller than others
yet you want to maintain the ratio of
their font sizes it makes sense to use a
set pixel size on the parent
then use an m unit for sizing the
children however it is very rare that
i ll use
m units since parent divs can have
different sizes
throwing off the overall consistency
with text sizes on the rest of your site
as a result in my opinion it s better to
use what s known as a ram unit
instead a rem unit determines the size
of something based off your site s root
tag which in almost every case is going
to be your html tag
by using a ram unit you can be sure that
your text sizes will be consistent
across your site
since they ll always be multiplied by
whatever your root element s default
font size
is which is 16 pixels unless you change
it manually
by using a rem unit you can determine at
a later point in time whether or not
you d like to make all of your text
larger or smaller since all of the text
tag sizing will be dependent off of that
one root
element run units can also be used for
spacing properties like margin and
padding
since those two will be relative to the
root html element s default font size
this brings tail when css s spacing
system in play
tillman has created its own rem spacing
scale which can be applied to font sizes
margin padding and more
you ll see on the left here we have name
values which we can use for classes so
if we were to use a class of
mt 4 we would be applying a css property
of margin top
1 rem which would equate to 16 pixels
given that a root element has a
font size of 16 pixels the scale here
may seem arbitrary but it increases in
standard increments
enough to visibly tell the difference
between each round value
so it creates a consistent scale we can
use across the board for all of our site
spacing and font sizes
using the scale chart will be helpful to
start but once you start getting the
hang of the tail and spacing system
you ll be able to ignore this chart
altogether
and add spacing classes off the top of

so now that we know how rems work and we
know a little bit about the tailwind
spacing scale let s go ahead and use
this
to space out our site on mobile so that
we have the same spacing that we have
listed out
within our design over here so you ll
see our text is
pretty tight with the logo at the top
over here obviously not the case
well to make sure that that s a little
tighter on mobile we re going to go
ahead and use
these tailwind spacing names and then
their sizes
so let s go ahead and see what we have
over in our code we ll open up
our website and let s go ahead and
inspect our h1 just to see what s going
on here i m actually going to go ahead
dock my console on the right hand side
and make this full screen just so i can
see things a little better
and i can even tighten this up a little
bit to make it more like a mobile view
and this looks pretty good so i m going
to go ahead and inspect our h1 right
here
and you can see there s no margin
applied to this we re just going to want
to keep going up within our inspector
until we see
what is actually being applied to the
margin or as in this case we can see
it s going to be padding
so right now this one div has a padding
top of 100 pixels no matter if it s on
mobile or desktop
and we could tell that this style is
being applied to both mobile and desktop
because
it s listed out within our style tag
these inline styles are going to be
applied to everything
if we need something to just be applied
for mobile and not desktop well we need
to make sure we create a css class but
tailwind does all that for us so
going to be pretty nice for us but let s
go ahead and find this div
with the style of padding top 100 to
find this in our code what i like doing
is i like
copying the styles inside of here
hitting command c
i like going back to sublime text and
then doing a simple command
f command v to search for those results
and you can see this is the one result
which has that exact styling now i know
exactly where i need to change the
styling
so right now we have a padding top of
100 and this was for our desktop view
so i m going to go ahead and get rid of
that we ll make sure we style this
correctly for desktop as we go
so i m going to save refresh now
turbocharger development career is
pretty tight with the logo and that
actually might be
near exact what we have on design so
let s go and check out the design
you see just a little bit of spacing
there i m going to minimize this for now
i think that actually is pretty close we
may not even need any padding
for our mobile view let s go ahead and
leave this as is but let s go ahead and
add the padding back
for our desktop view you ll see ever
since we got rid of that padding top 100
there s no more space for our text and
it s going to look a lot better a lot
easier to read if we were to push this
down quite a bit
so where we just got rid of that padding
top which was
right here instead of using that set
inline style which is applied to both
mobile and desktop
we re going to go ahead and use a
tailwind spacing class
so i m going to go ahead and start off
with something that i think is
a little larger which is going to be pt
dash 32 that s part of the talent
spacing scale this 32 number right here
it s going to take a little bit of time
to remember and do off the top of your
head but eventually you re going to get
used to this
to the point where you can just go ahead
and list out the numbers like i m doing
right now
off the top of my head so i m going to
go ahead and save and refresh
and you ll see right here when i add the
pt32 class
nothing is taking effect and if you re
ever wondering why something isn t
taking effect
the best thing you can do is just check
out your styles right here in the
console
so you ll see right now the padding
being implied is a padding top
bottom of zero and padding left and
right of 12
and our pt 32 class is right here with a
padding top of 8
rem but it s not taking effect because
our inline style padding right here is
overriding it
so all we need to do is make sure that
we get rid
of this inline style right here but
remember this inline style is applying
padding
to the left and to the right of this
text getting it to line up perfectly
with our header up here
so what we could do is we can just say
that our padding left is going to be
equal to 12 pixels and our padding right
is going to be
12 pixels but that s going to create a
lot of inline styles within our html
it s going to muddy things up a bit so
it s probably not what we want to do
as a result we re going to be using more
tailwind padding classes so let s go
ahead and get rid of this and we ll go
ahead and fix our header to make sure
that s aligned perfectly as well
when we re ready to do so but let s go
ahead and get rid of that in line style
we ll save refresh and you ll see now
our padding top is taking effect and
this looks pretty good
this pt32 remember in the console listed
out padding top as being equal to eight
rem well what is hrm equal 2 let s go
ahead and check out
our talon chart over here if we go ahead
and look for the name
32 you ll see that s going to be right
here it produces a result of
hrem which is equal to 128 pixels so
we re pushing down
our text by 128 pixels from the top
right here
but when we go back to mobile you ll see
we re still getting that spacing applied
but this is where tailwind comes in
really handy
since we are using a tailwind class
right here we can specify that we only
want this to be applied on a certain
screen size
so we re going to go with the medium
screen size by typing in md
we can add a colon so when we save with
this
and refresh that s no longer taking
effect on mobile but once we hit that
screen size of 768 pixels wide
you ll see now it is taking effect and
we have that spacing above our text
so let s go ahead and fix the issue
where we got rid of that side by side
padding
and our text is touching the left hand
side of the screen
so instead of using an inline style for
this like we were doing earlier all
we re going to do is we re going to add
a tailwind class of px and let s start
off with something like
six i d say that s pretty standard for
side by side padding of my text
so when we add a class of px6 this means
we are going to be adding padding on the
x axis to the left and right hand sides
of whatever element we re applying it to
so if i were to save this and refresh
now you ll see that our element has
how much padding well let s go ahead and
see how much px6 is equal to
we re applying 1 5 ram of padding to the
padding left
and 1 5 room of padding to the padding
right and then honestly it looks pretty
good it s not too tight with our screen
over here it makes our text easy to read
but the only real issue is is our header
up here is no longer aligned with our
text
why is that well we can always inspect
the element to find out
i ll go ahead and click on our header
and you ll see the header right here our
style tag has a padding of 18 pixels
over top and bottom
totally fine but for the left and right
we have a padding of 12 pixels
so we could fix this in one of two ways
one we could apply
the same class that we have on this div
now for
the left and right padding which is
going to be px6 or we could just change
the padding in line to make sure that it
has the same value as
px6 which is going to be 1 5 rem i think
it makes more sense to apply the class
in this case just in case we need to
alter something later on as we go into
mobile view
so let s go ahead and just take this px6
class that we just applied to this text
right here
we ll go back into our code find our
header it s going to be this element
right here
and you ll see the inline style being
applied we can go ahead and get rid of
that
and paste in the class of px6 so now on
save
and refresh this is now aligned with our
text which is exactly what we want
and even though we got rid of that top
and bottom padding we still have py18 in
here
which i believe is something we created
ourselves we can go in and search for
that with py18
and there it is so we re just setting
our padding top and bottom to 18 pixels
so since that is still there even though
we got rid of the inline style which
specified our top and bottom padding
should be 18 pixels
this class is still applying that same
effect which is why
the top and bottom padding is not
affected when reviewing this
so we ll go ahead and shrink this down
back to mobile just to see how things
are looking
looking pretty good and going back to
the design we re getting pretty close to
what we see over here for the mobile
view
it looks like the main difference is our
video is definitely not this tall and
the mobile view looks like it only goes
down to about here
we have this black overlay in the
background which makes our text easier
to read
so let s go ahead and start off with
fixing the height of our background
video so to fix the height of the
background video the first thing i would
do
is i would just inspect within our
console over here
the background video or at least try to
select it and you ll see the background
video is going to be
this video tag right here we re
specifying that its height should be
equal to
689 pixels and this is an inline style
which means it s going to be applied to
both mobile and desktop we want to make
sure we change this to a different
height whenever we re on mobile
so what we re going to do is we re going
to find that video within our html it s
going to be right here
all we need to do is remember that our
desktop height is 689 pixels
but for now we re going to go ahead and
get rid of this height style we ll save
refresh
and now this obviously looks quite wrong
but how do we add a custom height to
make sure our video is one height on
mobile
and another height on desktop well at
this point tailwind doesn t really have
a class that specifies the height should
be something
really unique or obscure like 689 pixels
so in this case this is a class that
we d want to create ourselves
all the classes within this media query
start taking effect once they get past a
width of 640
this is going to be the small screen
size
so what i m doing right here is i m
creating a comment within my css
and that is just indicated with a
forward slash asterisk
and then i can write whatever my comment
is and end the comment with
an asterisk forward slash so this is
just good for you as a developer to
understand
what your css does if you need to come
back to this at a later point in time so
i m going to write in that this media
query is for the small screen size
now i know inside of here i can write a
class such as small
backslash colon and then i m going to
create a custom height class with
h which stands for height i m going to
add a dash in there
and then what was the height of our
video when we reach a desktop view
something greater than 640 or 768 well
the height was going to be
689 pixels i ll just write that in
directly
and then we need to specify what the
height property should be
it s going to be 689 pixels so we just
created our own custom tailwind css
class like we were doing in the
beginning
taylon does not have this class by
default so we need to write it ourselves
and now that we have it we can scroll on
down and add it
to our video right here so we re going
to specify that this
should be about a height of 689
pixels we save we refresh not going to
see that on mobile view but once
we get past that 640 mark it s going to
go and blow up once again
and these breakpoints are a little off
right now we should probably set that to
take effect once we get past 768 rather
than 640
we ll get there but for now let s go
ahead and continue with what we have
here
let s go ahead and affect the height of
the video on a mobile view so how do we
know what the height of this video
should be
well really we just need to make sure
that it s in the background of our get
started button because that s going to
help everything contrast to the point
where you can actually see what it is
you re supposed to read and click on
so here we can select our video tag we
can add
in a height property and just start
messing around
with certain heights so i m going to go
ahead and set this 400 pixels to start
that looks pretty good maybe
a little less we can always go back to
the design to see exactly what we need
to go by so you ll see we have looks
like around 100 pixels
of spacing underneath our button let s
see what that looks like on our site
right now
that is pretty darn close i would say so
i m actually going to go ahead
make this in an increment of five so i m
going to make our height 385 pixels for
a
mobile view and to do that all i need to
do is go above
our media query right here all these
classes are by default going to be
mobile and above
they re only going to be overwritten by
small classes like we have down here
and i m going to create a class called h
and what is the height that i want to
select
it s going to be 385 pixels i m going to
set this equal to a height
of no other than 385 pixels makes sense
so i ll go ahead and take this class and
now i can apply it to
the same video tag we applied this
height of 689 pixels
so i ll go ahead and paste that in there
save and refresh
and now you ll see that height is taking
effect but as i go
more towards the desktop view the new
height takes effect so now we have our
own custom height classes
that still use the tail and methodology
of using those small
medium break points but as i mentioned
as we go past 640
the height increases but the spacing up
here does not so it just looks a little
weird so what we want to do is we want
to make sure this height difference
only takes effect once we reach the
point in which the space up here above
our text actually takes effect
and that is going to be whenever we pass
the screen size of 768
right here so all we re going to do is
we re going to create a new
media query and this is going to be a
media query for
medium screen size so if i want to
create a new media query all i have to
do is copy this line of code right here
with the media tag i ll go ahead and
paste that beneath our comment
add a closing curly bracket and now our
minimum width for medium screen sizes
should be
768 pixels so this will only take effect
on larger
tablet screen sizes so now all i need to
do is take
this height 689 pixel class i m going to
go ahead and cut it out
of our small media query and paste it
within
our medium query but now since this is a
medium query we want to make sure that
we
are using the correct terminology to
indicate within our html
that this is only applied to medium
screen sizes and above
as a result i m going to get rid of the
sm and replace that with md
scroll on down to our video tag and make
sure that i m also replacing the sm down
here with the md
to make sure that this class takes
effect i ll save and refresh
looking good now when we go below 768
the spacing is taken away and then
things get smaller and go
straight into mobile view because we
still have that 640 pixel break point
so you might want to go ahead and make
sure that your 640 pixel break point
only takes effect on 768 pixels
it s not going to be too big of a deal
because it s still readable even on
these sizes as you begin to scale down
your screen
so for now let s go ahead and leave this
as is but i think that looks pretty good
for our layout at least in regards to
text
and our buttons typography and so forth
for getting this looking like it should
on a mobile screen while still scaling
up to a desktop view that looks good and
accurate to our design over here to get
this black overlay we re going to want
to
create a div specifically for that
we re not going to be adding any text
content any images or anything and this
is a
pretty much the way i would do it all
the time for adding some sort of overlay
like this and you ll probably see it a
lot as you develop websites across your
development career so what we re going
to do is we re going to
go into the section that houses
this background video which is going to
be right here so right above the video
what i m going to do is i m going to
create a
new div and there s not going to be
anything inside of this div
but rather we re just going to go ahead
and make sure that this div is a
specific width and height
we re going to make sure that it covers
up the full height and width of the
video
and then we re just going to set its
background color equal to black
and then we re going to use a new css
property called opacity
to make sure that we fade that black out
a little bit so it s a little more
transparent and we can still
see what s happening behind the black
background
so what i m going to do is i m going to
add a class to this empty div
and i m going to start off with a class
of bg dash
black so we never actually wrote a class
called bg black
if i go back to index html we re not
going to see anything simply because
this div
has no width or height because there s
no content inside of it if there s no
content inside of a tag
while it s simply just going to be a
height of zero zero so that means we
have to set the width and height
manually now where did bg black come
from that came from
tailwind itself so if we were to go to
tailwind css com
and look up background color
we go ahead and visit this page and we
can see some of the classes we can use
to change the color
of our elements to different things
you ll see they provide a huge color
palette which is really nice
but the one we re going to use is bg
black just produces a black
background so that s what we re using
and now we need to go ahead and specify
what the height and width of this
element should be
so if i were to use some random tail and
heights and width let s go ahead and
just make this something like height 12
width 12 i believe this should be around
like 100 pixels
wide and high we go ahead and add that
in and you ll see something happen right
here
this is definitely pushed down but we
don t actually see that black background
in place
if you don t see anything and you re
wondering where it is you can always
just go ahead and use your inspector
tool which we re going to do right now
we know that this black box is within
the section tag we ll open that
and here is where our element is if we
go ahead and inspect it while our
background color is being applied but
why aren t we seeing anything
well probably because we have a position
absolute on this video
and it comes after our div tag so
therefore it is being placed on top of
it if we want to change that and keep
this where it is
we can go ahead and add a position of
relative and the only reason we re
adding a position or relative to this
div
is so that we can use the z index
property to bring it forward
over the video so now we have position
relative
we can go ahead and add z dash index and
set it equal to something like
10 and there is our black box so this is
what it looks like
so let s go ahead and translate this
over to our code just so we can see
exactly what s happening as we continue
developing this
our width is equal to 12 we ll go ahead
and add that relative class on here and
now we want to affect there is the index
set it equal to 10 just so we can see
our black box it s not behind our video
we save and we refresh and now our black
box is there perfect
but we really need this black box
covering the whole video not
just this little section right here and
we don t really want this black box
affecting
our layout in any way you ll see it s
pushing down on our text that shouldn t
happen our text was already set up and
ready to go
within the last lesson so here what
we re going to do is we re actually
going to change
this position relative to position
absolute because if you want something
taken out of the document flow
you don t want other things affected by
the height or width of that one element
you re going to want to change it to
position absolute
so we re going to replace relative with
absolute right here
and now you can see it s taken out of
the document flow this is no longer
affected by that
and now we can begin editing the actual
width and height of this and also
position of it to make sure that it
covers up
this full area right here so to make
sure that it covers up the full area
we re not actually going to use any set
width or height like you see right here
you might be saying like oh
well shouldn t we be changing this to
height 100 percent
or something like width 100 with full
height full
well to get this to actually cover up
the full area we wanted to
we re going to be using a class called
inset dash
0 so let s go ahead and save and see
what this does
we re just going to save and refresh
you ll see that it covers up this full
area right here and where does this
inset zero class come from
it s something that comes from tailwind
what does it actually do all inset zero
does is it sets the top
the right the bottom and the left of
this element
equal to zero so when we specify
that this element s top is equal to zero
what we re saying is it should be at the
very top
of the first parent element that has a
class of relative
which is going to be the section tag
right here so when we specify this div
has a top of zero when using position
absolute
we re effectively placing this div at
the very top
of this one section tag right here if we
specify
its bottom should be equal to zero we re
saying that the bottom of
our div should be at the very bottom of
its parent with the class of relative
so when we set the top and the bottom
equal to zero what we re doing is we re
stretching out this background black div
so it takes up the entire width of its
parent container
and we re doing the exact same thing
with the left and right attributes
we say that this div should be on the
left side of its parent container while
we re going to be all the way over here
but if we re also specifying the right
side of the div should be on the right
side of his parent container we re
stretching out the div
to fill the entire parent container so
when we use inset zero all we re doing
is setting all these to zero
and as a result it fills up the whole
parent container it s just a quick and
easy way to make sure an element with
position absolute fills
up all of something but right now it s
only
filling up the entire contents of this
section tag
even though our video tag expands past
that the reason why our video tag is
expanding past that and our section tag
isn t taking that into account
is because our video tag has a position
of absolute and remember
whenever we use position absolute takes
another document flow
the parent is no longer affected by the
element neither are the surrounding
children elements
that have things like position relative
or position static which is
position s default so what we re going
to do is we re going to go back to our
code
and we want to make sure that this isn t
taking up the entire height of this
section right here but rather the entire
height of the video
because we want to make sure that it s
covering the full thing so in order to
do this i m going to go ahead and create
an opening div tag around our video tag
and then close it off with a closing div
tag
i m going to indent things by hitting
command
bracket right it s going to push that to
the right just make sure my code is nice
and clean
i m going to start off with that div
going to refresh you ll see nothing
happening just yet
let s go ahead and take this div right
here that we created with the black
background
we re also going to put it inside of
this newly created div
so the reason why i m wrapping these two
in a div is because i want to make sure
that these two take up the same
width and height so rather than say that
our video should be this one width and
height i want to make sure that the
surrounding div
is at one width and height and therefore
i can set the div inside of it as well
as the video equal to 100
of the parent divs width and height so
basically what i m going to do
is i m going to take a lot of the
classes from this video tag make sure
it s being applied to the parent div and
that way i can make sure that this newly
created div
is based off of the height and width of
the newly created parent hopefully that
makes a little bit of sense so let s go
ahead and take
this position absolute all the way to
our medium height of 689 pixels we re
going to go ahead and cut that out
of our video tag and let s go ahead and
paste it on
our parent div tag instead so we say if
we refresh this is what it looks like
right now not too good
but immediately you ll see that our
background black is now taking up
more height let s go ahead and continue
this let s go ahead and take this inline
style
we ll put it on the parent div make sure
that this parent div is being bumped
up by 80 pixels you ll see now the
parent div surrounds the whole thing
and we re looking in pretty good shape
honestly this is what it should look
like to start
so right now our background black tag is
covering the whole
video we can t really see what the video
looks like but we will be able to see
shortly
so if we want to be able to see what s
behind this background black tag we need
to use what s known as the opacity
property within css
opacity all it does is it changes how
transparent a certain element is
so if we were to select our background
black element right here
and then add on a property of opacity
opacity ranges from zero to one so when
you set this
you need to make sure you put a zero dot
kind of as a decimal here to make sure
that this is being affected so if we
want to make sure that the background
has a transparency level of fifty
percent we put point
five and now you can see what is behind
this element of background black
so tailwind supplies these classes for
us automatically if we go on over to the
docs and we search for opacity
this is actually background opacity
which is different from normal opacity
so we re not actually going to use that
maybe we will later let s go ahead and
select normal opacity
if we change this element s opacity to
i think 0 5 actually might be fine for
this let s go ahead and do that
0 5 is equal to opacity 50 so we re
going to go ahead and select this class
and place it on top of our background
black div
if we save and refresh now this is going
to have an opacity of 50 but
things still a little messed up you ll
see our background video no longer takes
up
the entire height of our container even
though our background black div
does which is great but we need to make
sure we re taking into account that this
new layout might affect how things work
especially for our video over here
so there are a few things we can do and
i think the easiest one for us to do is
to add
a height full class to this video along
with width full
this is going to make sure that the
video takes up 100 of its parent
container
which is going to be this div right here
which has a height
689 on desktop and 385 on mobile
so when we say that this is going to be
equal to height full we re saying that
it s going to be 100 of this parent
which means it s going to be 385 pixels
high
so if we save and refresh well now
that s taking up the full height of the
container
things are looking pretty darn good
we re almost done with adding that
overlay our text is easier to read
but a few things we still have to do to
make sure this is good to go
one you can see that our header is now
behind this black
overlay we want to make sure that this
header is in front of it because we
can t even click on these elements
behind it
i mean i don t think they re set to
anchor tags anyway so it doesn t really
matter
but they re harder to read because they
are behind the black background we want
them on top
to make them easy to read and contrast
with the background
so in order to do this all we need to do
is go over to our header tag which is
going to be right here
and this is relative and it has a z
index of 10 but what else has a z
index of 10 well it s going to be this
background black opacity so all we need
to do is make sure that this is
something greater than 10
and taylor provides the index classes
that go all the way from z10 to z50
so if we change this to a 101 class of
z20
then refresh you ll see that now this is
a z index that s higher than 10 so it s
closer to us thus being overlaid on top
of the background video
and just so you can see exactly what we
did if i select the header tag right
here
we added on the classes e20 which
applies ac index of 20
it s going to be larger than 10 now we
can see it so cool
almost done let s go ahead and make this
desktop size
you can see this is what it looks like
so you can totally keep this as
is with the background overlay on top of
it it does a few things it makes your
text up here a lot easier to read than
if we re just on the dark purple
background
and two it makes your text here easier
to read so a benefit for all of your
text and legibility
but if you wanted to follow the design
as closely as possible you ll see right
here
that background overlay is not being
applied and that s okay because
these elements really aren t getting in
the way of the text where the text is
still
legible you don t really need that
background overlay in place
so if you wanted to follow the design as
closely as possible
what you could do is go find your
background black overlay which is right
here
and say once you get to that desktop
view with md you want to hide the
element with a hidden class
which changed the properties display
element equal to none
so if we were to add that refresh we can
still see our text is all pretty
readable for the most part on this
larger screen
not having too much issues maybe a
little bit at the top up here with that
little guy coming down
but once we go down to mobile you ll see
we re in pretty good
shape with that background overlay not
having many issues at all
so this brings us to the next css
property we re going to learn which is
going to be creating a background
gradient a gradient essentially a
background color that fades from one
color to another
you ll see them on a lot of sites i know
apple puts a lot of gradients across
their site
and this is something we re going to add
here because you re probably going to
use it a lot
so if you look really closely on the
desktop design you ll see that this text
is pretty legible
and if you look really closely you ll
see it s because we have a background
gradient in place
one that fades from black into a
transparent
nothing you ll see it s a little darker
up at the top
compared to what it is right here at the
bottom we re basically creating a fade
effect
from black and to a transparent nothing
but over here on our site when we re
looking in desktop view we don t have
that darkness up at the top
it kind of makes our text harder to read
when this astronaut comes into
view and overlays behind our text
so we re going to want to make sure that
we add in some sort of background
gradient to make sure that this is
legible
so in order to add a background gradient
i can t recommend using tailwood enough
just because they make it so freaking
easy
compared to how you would do it
otherwise so we re going to go on over
to the tailwind docs
and we re going to search for background
gradient you can go ahead and click on
linear gradients
this is going to give us a little bit of
an example of how to create something
like this a really nice background that
changes color from something like orange
to pink in our case our background color
is going to change from black
to a transparent nothing so if we scroll
up on this page
you ll see we have a couple of classes
that affect a property called background
image and this is how you would create a
gradient
using css you re basically going to be
setting a background image
property equal to a set value of linear
gradient
and then you re going to specify what
direction this gradient should start in
here we re saying that it should start
at the bottom and go upwards towards the
top of whatever element it s applied to
and then we re using something called
css variables to determine what colors
we should actually use within this
gradient
you can use as many colors as you want
but it s pretty typical within a linear
gradient to only use two
and you don t really need to mess around
too much with these tailwind gradient
stops or
doing this manually because they provide
a number of classes that you can use
so you don t have to write this complex
css yourself so let s go ahead and make
this background gradient using
tailwind in order to start with this
background gradient we need some sort of
background div very similar to what we
just did
with this overlay right here so we re
going to do the same thing but we re
only going to do it for our header
element and i want to challenge you to
do this on your own so pause the video
and see
if you can get just a black overlay on
the background of the header
and make sure you change its opacity
down to 50 that s how we ll start by
doing this before we get into the
gradient
so if i were to go ahead and create that
div what i would do is go inside of our
header tag because i know that
encapsulates
everything right here that i need to
effect make sure this is desktop view so
we get that desktop effect
so i m going to go inside of the header
tag and i m going to create a new div
specifically to fill up a certain amount
of space with a specific background
color
what background color do i want to start
with it s going to be bg
black save and now how do i affect the
width and height
of this new div i could do with 100
height 100
but that only works if you have a set
height and width for whatever parent
element we have
we don t really have a set height or
width here so what we re going to do is
we re going to use a position of
absolute to make sure that this expands
the full width and height of the header
element
so i ll put absolute on there that s
going to give us a position of absolute
and then i want to use that inset 0
class which remember it sets the top
right bottom and left of this one
element equal to zero
which one results says it s going to
take up the full width and height
of the parent container which has a
class of relative
so on a save and refresh you ll see it
takes up almost the full width takes up
the whole height of the header
but it s not taking out the full thing
to get a clean effect of just having
this drop shadow
on the top so let s go ahead and start
by changing the opacity to 50 right here
we re going to just finish this up real
quickly and now we want to make sure
that all of our content right here is
overlaid on top
of this div but i m going to show you a
way to make sure that our div reaches
the full left and right hand sides of
the screen
before we actually do that so why isn t
this reaching the full width of the
actual browser well if we look at our
header right here
we ll see the header actually only takes
up that amount of space
margin is not taken into account when
using something like a background color
therefore our background color right
here is just not extending the full
thing
remember when we created a container
with a max width of 1200 pixels
right now our header can only be 1200
pixels
so therefore it s never going to extend
the full width of our screen if it s
larger than 1200 pixels
as a result what we want to do is we
want to wrap our header
inside of a div so we wrap the whole
thing
inside of a div and then we can indent
this for clean code
by selecting the header hitting command
right bracket saving and refreshing
looks exactly the same but now it gives
us the ability to
add this background black inside of this
one div
to expand its full width so instead of
putting
this background black div inside of our
header which does not expand the full
width because it has this max width
property
i m going to put it inside of its parent
div that we just created
so i want to save and refresh we re not
going to see it
probably because this parent div does
not
have a class of relative let s go ahead
and add that to make sure that this
absolute takes effect as necessary
we ll add that in there and then refresh
i m still not seeing it but that s okay
we can just go ahead and inspect
things to find out what is happening so
this is set to relative which is great
now this position absolute class takes
effect because of that relative class
still not seeing it but it does look
like it s taking up the full width and
height
of the header so what we can do is
since this is a position absolute and we
want to bring it forward we can go ahead
and set it z
equal to 10 just to make sure that s
showing and now that looks correct we
just need to make sure that it was
brought on top
of the background video which now it is
so we have that background
black in place its opacity is set to 50
and it definitely makes our text easier
to read especially when the astronaut
comes in but it definitely looks a bit
jarring because we just have this
sharp cutoff at the very end rather than
it fading with some sort of gradient
so what we re going to do is we re going
to use a tailwind
background image background grading
class to get this effect
so to create a gradient with tailwind
we re going to want to specify what
direction do we want this gradient to go
in
so here are our options we want to go
from top
to bottom so here what should we use
let s go ahead and search background
gradient 2
dash b that means it s going to go to
the bottom this is what we ll start off
with
so on this one div we re going to
specify our background gradient should
go towards the bottom
and we can go down to the linear
gradient section to see kind of how this
will work
so let s go ahead and start by copying
the boilerplate code that they have
provided for us we re going to go from
yellow
to red to pink we ll just go ahead and
copy this
paste it in to our class right here and
since we re going to be using a
background gradient and not some sort of
background color we can go ahead and get
rid
of a background black class we re going
to save
and then refresh over here you can see
now that gradient is taking effect it
doesn t look exactly like we have over
here and that s okay
that s only happening because we have
its opacity equal to 50
which we can also get rid of if we want
to see exactly what
these classes are doing so if we save
that refresh
now we can fully see our gradient in
place so like i said
our gradient is starting from the top
and going to the bottom and we can prove
this by saying
we re starting from yellow 400 which is
that yellow at the top
we re going directly into red which you
can see a little bit of red in the
middle
and we re going to pink which is at the
very bottom so these colors right here
are the exact same colors you get with
the tailwind color palette if you need
to reference these
you can go back to the background color
documentation and you ll see
all the different colors that you can
use within this linear gradient property
so we can use things such as gray 800
red 300
we can use pretty much any color we want
to get the effect we re going for
so we know we need to use a background
black to start so we re not going to
start from yellow 400 but rather
from black if we save that now the very
top
of our gradient is going to be equal to
black within our design we don t have
anything in between we re just going to
go to
a pure nothing a pure transparent
nothing so let s go ahead and get rid of
the middle color which is via red 500
and now we re just going solely to pink
starting to look pretty cool honestly
but we don t want to go to pink we want
to go to what
it s going to be transparent so we re
going to go ahead and say we want to go
to not to pink 500 but transparent
we add that and refresh now we re going
into a transparent
color so you ll see we have this nice
little fade effect
and you can kind of alter things as you
need to it does make our text a little
easier to read but the
cutoff might be a little too soon
towards what we want
so if you want to make sure that this
one div is a little taller than it is
right now to get more of a gradient
effect
a few things you can do is you can
change this height manually
or you can just go ahead and change the
bottom value of inside zero to be
something
that is less than zero because if we say
the bottom portion of this div should be
below
its parent element s height well it s
just going to keep expanding the div
downwards to make sure that our gradient
expands more
than we re seeing right now so let s go
ahead and put that into effect if i go
ahead and select our bottom
style right here on top of our
background gradient div
and i start hitting down on my arrow key
it might be a little hard to see
initially but you should be able to see
that our background gradient is getting
darker at the top
and it s fading out a lot farther
downwards and if i go ahead and hover
over this you ll see that our background
div is getting larger
when i decrease the bottom value so if i
were to set this back to zero
we go back to the exact height of our
header but if i m going to go ahead and
decrease this
by a certain amount of pixels it s going
to get larger and larger which means the
amount of space in which our background
gradient takes effect it s going to get
larger as well which is going
to make sure it s darker at the top and
fades out at a later point in time
near the bottom so let s go ahead and
look at this around
negative 36 pixels i think that looks
pretty good it covers enough
of our text up here to the point where
it s very legible and it doesn t really
take away from anything it s pretty hard
to notice this background gradient in
the first place unless
you re really looking for it so what i
want to do is i want to make sure i keep
track of this bottom
attribute since we only did it within
our browser for testing purposes
and now where are we applying this
inside of zero well it s going to be
to our background gradient div right
here so we can go ahead and keep inset
zero on there to make sure that
everything is going to be zero initially
but if we want to override this one
bottom attribute we can simply go ahead
and add an inline style
for this so i m going to go ahead and do
that i m going to set our style equal to
have a bottom of negative 35 pixels
and on save and refresh we should be
able to see this text a lot better than
prior
and it looks like we are indeed good to
go and let s double check that just by
inspecting the element
we have a bottom of 35 on it which is
great
and hovering over it definitely shows
that it s bigger than before
so one quick thing to make sure this is
definitely good to go is we ll resize
down to mobile
you ll see it s definitely a little
darker at the top than it was at the
bottom
even though we have that black overlay
in place so i d probably go ahead and
get rid of this on mobile just because
we really only need it for desktop since
we got rid of the full background
overlay
in the first place on desktop so what
we re going to do is we re going to hide
this new gradient that we just created
on mobile all we have to do is specify
by default this div should be hidden we
save we refresh
no longer available we only have that
black overlay in place
but once we get to desktop can t see it
anymore it s kind of hard to read the
text when an astronaut comes in
so we ll say whenever we reach a medium
size
we re going to change this back to its
default of block and now that goes back
we test this by resizing our screen down
you ll see that overlay is gone
size back up there it is cool so just by
developing this one hero section right
here we ve pretty much built out
a lot of what we need to style a full
website including something like this
next section we re about to do
so we re going to take all the lessons
we just learned to compile them into
this we re just going to make sure we do
it mobile first to give you guys
an idea of how a different methodology
works so let s go ahead and do this like
i were developing a website for a real
world client
so we re going to go ahead and inspect
this mobile
view you can see it s just this
rectangular container with a few
statistics inside of it
easy enough so i m going to go ahead and
make sure i keep this on the side and
we re going to go inside of index html
and see where i should actually put this
section right here
and it pretty much always makes sense to
line up your code with how you see it in
the design so we know the stats section
is beneath the hero up here so we re
just going to go to our hero section
within the code which is this one right
here
and right beneath it i m going to create
a new section
this is going to represent the stat
section so we can reference what we re
actually developing
so what do i need to do here what do i
need to develop well it looks like in
the background we actually have this one
container div and then the stats div is
being pushed upwards using something
like position relative
and a negative top value so when we
start our section div
the stats section is actually inside of
this background section
so this background section is where
we re going to start we re going to go
ahead and add a class of a very dark
gray because you can see this background
right here
is a pretty darn dark gray the darkest
gray we can get within the tail and
color palette is going to be 900 so
that s what i m going to reference
and let s continue writing up our markup
so inside of this background section we
have the stats div
i m going to go ahead and write out a
div for that and then inside of this one
large div
we have three more divs so we ll go
ahead and write out three more
divs inside of this first div we have
something that looks like an h2 it s not
quite an h1 not as big as our main
hero text up here maybe it is h2 is
totally fine to use
doesn t really matter which h1 h2h3 tag
you use so we re going to go ahead and
say
h2 here set it equal to 84 and then we
have some sort of sub headline
usually for sub headlines i just like
using paragraph tags doesn t really
matter which tag you use for this either
but i m going to go ahead and say that
this should be a paragraph tag
and i m just going to go ahead and
duplicate this for the other two such as
hours of content and students
so that s a good start for our html
markup if we go back to our actual site
we ll go ahead and shrink this into a
mobile view and you can see
our section being displayed right here
but we can t really see our text because
by default our text is going to be black
as a result let s go ahead and style our
typography now
so on our design you can see that our
stats our main stats are going to be
this large
purple typography so if we need to
select that within figma
you can see i m trying to select it
right now and i m only selecting the
whole group
this just means that this is nested
inside of the group so we want to double
click and then double click further to
make sure we re selecting this one
individual element
so we scroll down and the inspector over
here you ll see that we can get this
exact color
but if we just want to use the tail and
color system which should be pretty
close to the color we see right here
we just go ahead and reference some sort
of mid range purple
so for h2 i m going to add on a class
and i m going to say that our text color
should be a text of purple
and that s something mid range maybe a
little lighter because this is overlaid
on a dark background
let s go ahead and start off with a text
purple of 300 and see how that looks
so you ll see when we save and refresh
we don t actually see
that color ticking effect so let s go
and inspect see what s going on
you see our actual div is up here behind
our background video
not fun so what needs to happen here to
make sure that we can see this div
well we probably need to deal a little
bit with a new property called overflow
hidden
so if i were to go ahead and add this
property to
our main content div right here our main
content section actually
overflow hidden you see now we can see
our text beneath it which is great but
it creates for the effect of no longer
being able to see the content above it
and we no longer have that padding that
was beneath this section either but
using this overflow hidden property is
how we want to start
so we re going to go to our section up
here add overflow
dash hidden and now what do we need to
do we need to make sure
that this content section expands the
full
height that we wanted to expand the full
height that we want the video of
so we ll also go ahead and take
these two classes right here and we ll
paste them on to our section
div it s going to go ahead and get
things going with the padding down here
i know it looks a little weird right now
but we re going to go ahead and fix this
we re going to go ahead and take the top
negative 80
paste it onto the section tag let s go
ahead and go ahead and make sure that
this whole section is bumped upwards
and therefore we should get the header
look back which is great
but now our text is way at the top which
is obviously a big issue
so we need some sort of padding to make
sure that it s being pushed down
so right now we have a padding top of 32
being applied
to our desktop view but there s nothing
be applied to
our mobile view right now so i m going
to go ahead and apply this to our mobile
view by adding pt 32
it s going to go ahead and push it down
an adequate amount but it might be a
little too much compared to what we had
prior so i m going to go ahead and go
down on the scale system to something
like 24
that looks pretty good for a mobile view
so i m going to go ahead and keep that
and then i want to increase the amount
of space we have down here just by a
little bit so i m going to add some
mobile padding bottom to this as well
padding bottom eight and now that s
going to take care of everything we need
to do this section but we still have
this white space in the background
because
since this is a element with position
relative and we re setting its top eagle
negative 80
well we re taking in account that space
that was up at the top but we re not
taking into account
the space that was newly created in the
background right here so you ll see when
we hover over this section
and we hover over the next section
there s a space in between it because of
this top negative 80 pixels
that space is totally fine but obviously
we need to change the background color
somehow
so what we could do is we could change
the entire body almonds background color
to be
this dark gray of 900 so what i m going
to do is i m going to inspect
this section right here you can see back
on grade 900
produces this hexadecimal value i m
going to go ahead and grab that
and go scroll up to our style tag
and inside of our body right here i m
going to say that i want
our background color to be equal to that
hexadecimal
and when i do that save you ll see that
it covers up all the white space
with this new background gray color so
that s going to fix the issue we were
having with this background element
covering all of our stats right here due
to position overflow
and the complex layout we have going on
with mobile and desktop view
now you may notice on this desktop view
since we pushed everything up on our
section this text right here
also got pushed up and that was with a
class
of md pt 32 so this is all of our
content right here we pushed everything
up we kept the medium padding top the
same
we probably just want to bump this up by
a little bit so the next value on the
tailwind scale i believe is 48
if we increase that this gets pushed
down to where it was prior
and we can still see all of our text
right here which is great
so i m going to go back to a mobile view
like so and now let s continue onwards
with our stats
section so we re going to keep styling
this text right here
we ll go ahead and look at its font wait
it s bold so we have text purple 300
which turns it purple
but we re also going to turn it bold and
change this to font dash
bold what s next our size is going to be
50 pixels
so rather than using a set size i m kind
of just going to eye this using tailwind
font classes
so if i go to tailwind type in font
size you ll see these are all the sizes
i i can choose from
so i think text 2 xl is a good place to
start so let s go ahead and put that on
this 84
text to xl save go back to our site
refresh not quite enough so i ll go
ahead and increase this
to 4xl it s looking a little bit closer
maybe even larger to five
we can keep going as needed i m going to
go ahead and stop at that
5 xl mark so that s looking good let s
go ahead and see what we need next we re
going to go ahead and focus
on this lesson s text so this looks like
it s a light
gray if i don t want to have to create
my own class i can just simply go ahead
and use tailwind s grayscale
which is going to be a text of gray
something a little
light something like 400 let s see how
that looks
let s say it looks pretty close maybe a
little lighter so i ll go to 300 since
the smaller number lighter it is
that looks pretty darn accurate i would
say maybe the text is a little smaller
right here
and double click on lessons to see that
is actually
a size of 18 pixels so size of 18 pixels
and tailwind speak is going to be text
lg for large that is one scale
above the base size which is 16 pixels
this is actually a little bigger in the
design
things just look a little bigger on my
screen because i have everything super
zoomed in on my resolution
now the next step is obviously we want
to center this text
so we can use a class on the parent div
of this typography called text
dash center what does that do well if we
go back
over here we refresh we inspect
everything we go to text center
it adds a property of text align center
it s just going to center our text to
make sure that it looks
just like this and it s not off to the
side like it was prior so i would say
that s pretty good for our typography
that s pretty close with what we have in
design
but now we need to take into account
this layout with this
grayish background and these other
pieces of typography so let s go ahead
and make sure that this background is
this lighter gray
we re just going to go ahead and select
the encapsulating div
set as background gray equal to
something a little bit lighter than this
main background gray we re using
which should be something like seven or
eight hundred we ll start off with 700
just to see how it looks
and i would say it looks pretty close we
can even go ahead and try the 800 it
doesn t really matter too much
and that might even be closer than what
we had before so let s go ahead and use
this
now let s go ahead and style the rest of
our text to style the rest of our text
while we know
all these h2s and these paragraph tags
are exactly the same look wise
so we can just go ahead and simply copy
the class for h2 tag
paste it onto the other ones and then
we re going to do the same thing for our
paragraph tag we ll go ahead and take
this
paste it onto the paragraph tags and now
everything s looking quite
good but text center is only being
applied to this one div right here
let s go ahead and make sure that we re
applying this text center class to all
of the other divs as well
that s going to center those so looking
good but right now our encapsulating div
is taking up the full width
of this entire section over here in the
design it is not
it has some padding or margin on the
left and right hand sides
now we have to take into consideration
how do we want this section to work as
we begin
expanding our screen as we begin to
expand our screen we can either keep
this the exact same width it is that ll
still
look decent i think or we can make sure
that the entire width of this is
expanding along with the screen
let s go ahead to our site to see how we
want to do it so when we expand or
shrink
our browser you ll see that our button
up here is expanding or shrinking
making it easier to click on the button
so if we want to make sure that this
section right here
lines up with this button and expands or
shrinks across
all screen sizes it probably doesn t
make much sense to make sure that this
is a
fixed width at all time because
otherwise it just wouldn t expand with
the button
as a result all we re going to do here
is we re going to add some padding onto
our main
background container which is this gray
area right here we re going to say that
it s px should be equal to the same
amount of pattern we put on the sides
here for our button and our text which i
believe was
six then i refresh and you ll see yep
that is the exact amount
as this padding right here matches up
with the padding over here
so since we re doing it this way now
this section will increase in size as we
begin resizing our browser
matches up really nicely with our button
right here rather than just staying some
fixed width at the bottom
so in our design we have a little bit of
padding at the top and bottom
of this section as well so you might be
thinking can t we just add
padding to the top and bottom of this
lighter background gray div
well we could if we added a py of 8
you ll see there s padding on the top
and bottom but there s no padding in
between
the 84 and lessons text that we have if
we look in the design there s an equal
amount of padding
at the top and bottom of each piece of
typography right here
so we want to make sure that we re not
adding this py8
to the entire container div but rather
to each individual div
that contains some sort of text so i m
going to go ahead and list out
py8 for each of those divs
py 8 go back over here
now we have equal amount of spacing
between each of those but it s still
probably not enough and if it s not
enough
we can just go ahead and simply increase
the scale in which we re increasing the
padding by
for each of these elements and now that
actually might be a little too much
so instead of 16 i m going to go down to
12
i m going to see how that looks probably
wouldn t need much more padding than
that to tell that these are different
sections but we still have the issue
with
there are little borders right here in
between the pieces of content
so in order to get the border down there
it s pretty simple honestly
all we need to do is select the one div
we want a border at the bottom
of which is going to be this first div
right
here it s going to be this guy so we can
select this one div
and on top of the classes we have
already we can say that we
want this bottom border with border dash
b
to be a solid border with border solid
and then we want to change this border
color to a medium gray such as gray
500 so with these three classes
together if we refresh
we now have a border in place which is
looking pretty good
you see this might be a little lighter
than the border we have over here if you
want to darken it all you have to do
is increase this color right here you ll
see this little darker matches up a
little better
so these border classes from tailwind
you ll see if i scroll down what is
being applied
well we are setting its border style
equal to solid if i
change this to something like dashed
you ll see now it turns into a dashed
line you can see what options you have
just by deleting the content right here
and then you can scroll between these
with your arrow keys but typically it s
pretty standard to go
with a solid border for a design you see
border bottom sets our border bottom
width equal to one pixel
gives us a small border which is great
for design as well you don t want
anything too big
but we can always increase this if
needed to enhance
the height of our border and then we
have our border color
which obviously sets the color of the
border so if i were to change this
thread
now we have a red border so all these
talent classes work and tandem together
to make sure you get the exact border
look you want and you need to make sure
that you have all three of these or else
your border won t show so now that we
have the border right there
we want to make sure we add a border for
this div right
here so we can go ahead copy those three
classes
on to this div refresh
and we have a border right there as well
and we get pretty much the exact look
we re going for you can go ahead and
play around with the sizing a little bit
get something that looks exact if you
would like but this is pretty much all
we need
to start with that effect now one thing
you might notice here if you look very
closely
the edges of this are rounded so we re
going to continue styling this using
tailwind
one class you ll be introduced to is
another border rounded class
this is going to be rounded dash large
if i go ahead and round these and then
zoom in you ll see now we have a nice
rounded border
if you ever need to reference the
rounded sizes just go to tail and search
type in rounded you ll see rounded
corners are right here you can see
what options you can use to round all of
your borders
so we just used rounded large we set our
border radius equal to 0 5
run we re just going to give it a decent
amount of rounding on the edges
so almost done with this section on
mobile what i m going to do is full
screen this
i m going to go into our emulator and
set this equal to
probably 375 pixels you really don t
find too many phones
smaller than this but if we want to be
extra extra safe i suppose we could go
to the smallest size
that the chrome emulator provides which
is 320 pixels
so not gonna get a phone smaller than
this so any size smaller than this
you don t really have to worry about but
on 320 pixels you can see we have the
issue with
well some of our stuff just isn t quite
showing because it s breaking down and
if this is the case unfortunately
we have to go back and set our height
correctly for the section
because this is a complex section with
lots of stuff overlaid on top of it
so what i would do is i would inspect
the main section has its height affected
you ll see it s this height 385 pixels
but there s still not enough height to
show the button beneath it so what we
need to do
is we need to make sure that we increase
this height
until we get something that shows the
correct amount of space
that we want so we re going to go up to
450 pixels
and that s what we ll keep so all we
have to do is change this 385 pixels
class to 450 pixels
we ll go over into our code now one cool
little tip with sublime text
is if you want to select multiple pieces
of text with the exact same thing so i
want to select all instances
of h 385 pixels i can select that text
and hit command d and you ll see i just
selected it in multiple places
now that i have it selected in multiple
places if i delete it it s deleted in
both places
and i can paste in that new class or
type in whatever class i d like to type
so i m going to make sure that i select
all instances of this because i know i
want to change it to height 450 pixels
so i m going to hit command d so i can t
hit command d anymore so now i have it
selected in all three places
i m going to go ahead and type in height
450
px and now that that s changed in those
three places i can change its actual
height to be
450px just to verify that that worked
you can actually go ahead and select
this
hit command d again you should see it
right here right here
save and refresh and now you ll see this
looks a lot better
than it did prior so with that fixed now
we need to get this placed higher up on
the screen
on a mobile view so we re going to go
ahead and go back down to our stats
section which is right here with a
background rate of 900
and we want to select this one div right
here this whole encapsulating div with
background rate
so remember in order to move something
upwards while still maintaining its
document flow we want to affect the top
property we can set this equal to
something like 100 pixels but it s never
going to take effect until it has a
position
of relative and there we go now you ll
see
it s taking effect and it s overlaying
on top
of our initial section which is kind of
what we want to achieve the same effect
we have going over here
just makes your site a little more
interesting to view
as a user so that s what we re going to
do is we re going to go ahead and add a
position relative
to this background grade 800 section
using a class of relative and we can set
its top to a custom value by adding in
an
inline style and setting top equal to
negative 100 pixels on save and refresh
we get the same effect but
the background overlay has taken effect
once more and it s overlaying on top for
a stat
section so in order to change this all
we need to do is make sure
that this stat section is a z index
value above whatever
this background overlay section is so
you can just go ahead and try out
a z20 and just by adding a z index to 20
you ll see it s overlaid on top
of that background overlay so in order
to call this section done let s just go
ahead and replace the content that we
have right here and we ll also
get this little forgotten metrics update
real time text as well
so we re going to go ahead and grab the
content all we need to do is select
the text which is 29 we can just go
ahead and press the copy button right
here to copy it to our clipboard we ll
go back
over to our html this is going to be the
second instance of our text so let s get
rid of 84 here
we ll grab the hours of content text go
ahead and select that
paste it into second section of content

get to rid of 84 with 5000 and grab the
student s text as well
copy that paste it in where lessons is
so we save go back to our site over here
refresh
now we have those new pieces of content
we re looking really good we ll go ahead
and almost call this done let s make
sure we add the metrics update a real
time text
all we need to do to add this is jump
outside of this background gray
right here i m going to go ahead and add
a paragraph tag
let s copy the text in figma paste it in
there
now this text is going to be some sort
of medium gray
so we ll set its gray equal to something
like 500
it s going to be what size it s going to
be a size of 12 pixels
now the tailwind equivalent of 12 pixels
is going to be a text of
extra small so we ll go ahead and say
that this is going to be very small text
then we want to make sure that it is
centered so we ll add in a text
center class we go back over here
can t see anything that s because this
is at the very bottom because we use
position relative to style this and
moving upwards
creating this extra space so we want to
make sure that this
is still inside of that position
relative element but if we were to put
it inside of this div right here
well this would have a background gray
of 800 as well as a result we want to
wrap
our background grade div inside of
another one
pretty much wrap everything inside of
this newly created div
and then we want to style this wrapping
div to have that top of negative 100 and
that s going to make sure that this
is right beneath our section right here
but it s still going to push everything
upwards and overlay on top
of our hero so we re going to say top
should be equal to negative 100 for the
wrapping div
and for this to take effect we need this
relative class on there
i probably need to grab that z20 as well
because z20 is only taking effect for
relative or absolute elements
so with the save and refresh now this is
moved up
it s pretty tight with a section and
it s not in the design so all we need to
do is add a little bit of margin to it
so we ll go ahead and select our
paragraph tag and say our empty
top should be equal to four that s about
a little bit of margin
and that s pretty darn close i say i
like how that looks
pretty close with our design over here
so now that this is done
in mobile view we can go on over to our
desktop view
and make sure that this looks like this
over here
and thankfully a lot of what we just did
on mobile already looks pretty darn
close and already looks good you can
pretty much technically edit on this but
if you want to get this looking as good
as possible
for user consumption you probably want
to make sure that it looks like this on
the design
so what do we have to do to style what
we have here to look
like this well the first thing we need
to do is we need to make sure that these
elements are placed
next to each other so going back to the
beginning of this course can you
remember
how do we place block elements next to
each other
well they need a parent that has a class
of flex
so if we look at these content divs
parent content divs are right here
it s going to be this one div so if this
one parent div
has a class of flex to set its display
equal to flex
i ll save and refresh now just with that
these are immediately next to each other
so off to a good start but right now
this main parent div
is really large compared to what we have
over here so if you want to make sure
that this div cannot expand
past this one width you can simply click
the div
see what its width is in the design it s
going to be 878 pixels i m going to go
ahead and copy that value
go over to our code for this one
background grade div
i m going to go ahead and create an
inline style to say that its max width
should be equal to 878 pixels if i save
and refresh
it s definitely going to shrink this
down quite a bit but it s no longer
centered but whenever you have an
element with some sort of max width you
can always center it
with an mx auto class to make sure the
margin left
and the margin right are calculated
automatically centering whatever div we
just applied it to
so next up we need to make sure that
these three pieces of content the divs
that they re inside of
have the exact same width so we re going
to be using percentages for our width
here
if we go ahead and inspect this and i m
going to move our dock down to the
bottom
because we re in desktop view now if we
go ahead and inspect
one of these divs such as the first one
we can go ahead and set its width
manually
if we were to set this to a static value
like 200 pixels it would look like this
but at the same time
its parent div is always going to be
resizing so something might
get out of whack by using a static value
like this
as a result we re going to use a
percentage value such as 33 3333333
percentage doesn t really matter how
many point threes you have at the end
here but we re using
this one specific value to say that this
should be
one third of its parent div because we
have three other elements inside of the
parent div
if we set their width all equal to this
so let s go ahead and select our second
div
set its width equal two three three
point three three three
something percent while they re all
going to be equal width and everything
is going to be centered
perfectly within them which is what we
want so in order to get this value with
tailwind
tillwind provides some nice percentage
classes as well we re going to
select the one div we want to affect the
width of which is this one right here
we re going to set its width equal to
width 1 divided by 3
1 3 and when we add this class save and
refresh
you ll see when we inspect this div the
div with a class of width one third
now has a width of 33 percent which is
one third of the parent container
so we want to do that for every parent
div of content we ll go ahead and copy
that class
paste it on the second div paste it onto
the third div
refresh and now all three of these divs
have the same width which is great
but two of these divs have this border
at the bottom still we want to make sure
that this is not taking effect
for desktop so what we re going to do is
we re going to find the divs which have
the class of border dash b we re going
to make sure that this is not applied on
a desktop view
we re going to select our medium break
point reference our border
bottom class and make sure that the
border bottom is equal to zero
and with that on refresh you can see
it s no longer there we re going to do
the exact same thing
for the second div which has that border
bottom so go ahead and paste on medium
border bottom zero
save and refresh and now that is no
longer there as well but now we need
borders
in between these on the x axis
as you can see right here we have a
level of separation let s go ahead and
add that
in so one quick shortcut way i want to
show you how to add this in with
tailwind is using the divide
class so if we go to the docs and type
in divide
and then click on divide width this
divide
class is really cool you ll see it
provides some css properties which are
quite complex i wouldn t worry about
these too much
i just want to show you what exactly
this does by adding a class of divide
x we re essentially adding dividers in
between whatever elements
are inside of this parent div so you ll
see right here in this example we re
adding in divide x
and in between each of these elements we
have a nice little divider and we can
even style this divider to be a specific
color
you ll notice that these divisions
aren t placed on the left or the right
of these divs
they re only in between them so it s a
really nice and easy way to provide
divisions between your elements so let s
go ahead and try to use this
within our section right here so if we
select the parent div which is this guy
right here has a background grade
800 and we type in divide
x save and refresh you ll see by default
we just automatically have those
divisions in there
so this color is different than this one
because we still have
the border gray style being applied to
these two specific divs but it s not
there for this one div so if you want to
make sure that this color is the same
we can go ahead and change the color of
our divisions by selecting divide
gray and then what s the color of our
other border right here it s going to be
600
we ll go ahead and add that in and then
when we refresh
you ll see that everything is the same
color we pretty much have the same
effect we have over here
now one thing to note is although this
is looking pretty good when i resize it
while we still have those divisions in
place our flex is taking effect when it
shouldn t be
so whenever you re going from mobile to
desktop all these new classes you re
adding you want to make sure that they
only take effect
on desktop so you want to make sure that
they re all prefixed with
md so that you maintain your mobile
classes which were already styled
but once you get to desktop then you can
apply these new classes
so i m just going to go ahead and add
that to divide x divide gray
that makes auto whatever we just added
on there i want to make sure i m adding
on
md colon when i do that things are
looking pretty good we want to make sure
we re also doing this for our width
class
so we only want this width to change
once we hit a desktop screen
so i m going to add md to width one
third for each
of our divs save and refresh now we re
back
to where we were on mobile which looks
great but once we get to the desktop
view
we re going to go back to this look that
we have over here and things are looking
pretty much one to one with what we have
on the design on both mobile
and desktop it looks like so i m going
to go ahead and call that for this
course i know it s a long one but that s
pretty much every single piece of css
content that goes into web development
that i use day to day
within my professional job and that
you ll need to continue building
websites on your own like this
if you d like to further your css
education with me i m going to do a
premium course on chriscourses com
which continues this lesson we re going
to go ahead and build out this popular
courses section using the same
techniques i showed you
introducing a couple more as we go and
then we re going to develop the rest of
the site on chriscourses com
so we re going to be developing this
popular courses section everything you
see beneath it such as this feature
section the video section
we re going to do the slider right here
i m going to develop the pricing section
frequently asked questions section this
little cheat sheet section for
gathering ctas people coming into your
site whatever then we re also going to
add in the footer
and it s all going to be mobile
responsive going to teach you every
single thing you need to know to develop
your own web pages using html and css so
i hope you enjoyed the video guys
make sure you check out the premium
videos if you d like subscribe and i ll
see you in the next episode
