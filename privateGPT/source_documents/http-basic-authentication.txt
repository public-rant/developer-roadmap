   [https://roadmap.sh/]
     * [https://roadmap.sh/roadmaps]Roadmaps
     * [https://roadmap.sh/best-practices]Best Practices
     * [https://roadmap.sh/guides]Guides
     * [https://roadmap.sh/videos]Videos
     * ⌘K

     * [https://roadmap.sh/login]Login
     * (BUTTON) Account
          + [https://roadmap.sh/account]Profile
          + (BUTTON) Logout
       [https://roadmap.sh/signup]Sign Up

   (BUTTON)
   (BUTTON)
     * [https://roadmap.sh/roadmaps]Roadmaps
     * [https://roadmap.sh/best-practices]Best Practices
     * [https://roadmap.sh/guides]Guides
     * [https://roadmap.sh/videos]Videos
     * [https://roadmap.sh/account]Account
     * (BUTTON) Logout
     * [https://roadmap.sh/login]Login
     * [https://roadmap.sh/signup]Sign Up

   [https://twitter.com/kamrify]Kamran Ahmed Kamran Ahmed · textual Guide
   ·
   [https://github.com/kamranahmedse/developer-roadmap/tree/master/src/dat
   a/guides/http-basic-authentication.md]Improve this Guide

HTTP Basic Authentication

   Learn what is HTTP Basic Authentication and how to implement it in
   Node.js

   Our last guide was about the
   [https://roadmap.sh/guides/basics-of-authentication]basics of
   authentication, where we discussed authentication, authorization, types
   of authentication, authentication factors, authentication strategies,
   and so on.

   In this guide today, we will be learning about basic authentication,
   and we will see how we can implement Basic Authentication in Node.js.
   We have a [https://roadmap.sh/guides/basic-authentication]visual guide
   on the basic authentication and an illustrative video, watch the video
   below or continue reading:

   IFRAME:
   [https://www.youtube.com/embed/mwccHwUn7Gc]https://www.youtube.com/embe
   d/mwccHwUn7Gc

What is Basic Authentication?

   Given the name “Basic Authentication”, you should not confuse Basic
   Authentication with the standard username and password authentication.
   Basic authentication is a part of the HTTP specification, and the
   details can be [https://www.rfc-editor.org/rfc/rfc7617.html]found in
   the RFC7617.

   Because it is a part of the HTTP specifications, all the browsers have
   native support for “HTTP Basic Authentication”. Given below is the
   screenshot from the implementation in Google Chrome.

   Chrome Basic Authentication

How does it Work?

   Now that we know what basic authentication is, the question is, how
   does it work? The answer is: it is controlled by the response of the
   server.

Step 1

   When the browser first requests the server, the server tries to check
   the availability of the Authorization header in the request. Because it
   is the first request, no Authorization header is found in the request.
   So the server responds with the 401 Unauthorized response code and also
   sends the WWW-Authenticate header with the value set to Basic, which
   tells the browser that it needs to trigger the basic authentication
   flow.
401 Unauthorized
WWW-Authenticate: Basic realm='user_pages'

   If you notice the response, we have an additional parameter called
   realm, which is just a value assigned to a group of pages that share
   the same credentials.

   The browser might use Realm to cache the credential. In the future,
   when there is an authentication failure browser will check if it has
   the credentials in the cache for the given realm of the domain, and it
   may use the same credentials.

Step 2

   Upon receiving the response from the server, the browser will notice
   the WWW-Authenticate header and will show the authentication popup.

   Chrome Basic Authentication

Step 3

   After the user submits the credentials through this authentication
   popup, the browser will automatically encode the credentials using the
   base64 encoding and send them in the Authorization header of the same
   request.

Step 4

   Upon receiving the request, the server will decode and verify the
   credentials. If the credentials are valid, the server will send the
   response to the client.

   So that is how Basic Authentication works.

Basic Authentication in Node.js

   I have prepared the sample project in Node.js, which can be found on
   GitHub
   [https://github.com/kamranahmedse/node-basic-auth-example]kamranahmedse
   /node-basic-auth-example. If you look at the codebase of the project,
   we have two files index.js with the following content:
// src/index.js

const express = require('express');
const authMiddleware = require('./auth');

const app = express();
const port = 3000;

// This middleware is where we have the
// basic authentication implementation
app.use(authMiddleware);

app.get('/', (req, res) => {
  res.send('Hello World!');
});

app.listen(port, () => {
  console.log(`App running @ http://localhost:${port}`);
});

   As you can see, it’s just a regular express server. authMiddleware
   registration is where we have all the code for “Basic Authentication”.
   Here is the content of the middleware:
// src/auth.js
const base64 = require('base-64');

function decodeCredentials(authHeader) {
  // ...
}

module.exports = function (req, res, next) {
  // Take the header and decode credentials
  const [username, password] = decodeCredentials(
    req.headers.authorization || ''
  );

  // Verify the credentials
  if (username === 'admin' && password === 'admin') {
    return next();
  }

  // Respond with authenticate header on auth failure.
  res.set('WWW-Authenticate', 'Basic realm="user_pages"');
  res.status(401).send('Authentication required.');
};

   And that is how the basic authentication is implemented in Node.js.

Community

   roadmap.sh is the
   [https://github.com/search?o=desc&q=stars%3A%3E100000&s=stars&type=Repo
   sitories]6th most starred project on GitHub and is visited by hundreds
   of thousands of developers every month.
   [https://github.com/kamranahmedse/developer-roadmap]244K GitHub Stars
   [https://discord.gg/cJpEt5Qbwa]Join on Discord

   [https://roadmap.sh/roadmaps]Roadmaps
   [https://roadmap.sh/best-practices]Best Practices
   [https://roadmap.sh/guides]Guides [https://roadmap.sh/videos]Videos
   [https://cottonbureau.com/people/roadmapsh]Store
   [https://youtube.com/theroadmap?sub_confirmation=1]YouTube

   [https://roadmap.sh/]roadmap.sh by
   [https://twitter.com/intent/user?screen_name=kamrify]@kamrify Kamran
   Ahmed

   Community created roadmaps, articles, resources and journeys to help
   you choose your path and grow in your career.

   © roadmap.sh · [https://roadmap.sh/about]FAQs ·
   [https://roadmap.sh/terms]Terms · [https://roadmap.sh/privacy]Privacy
   [https://thenewstack.io/]ThewNewStack

   The leading DevOps resource for Kubernetes, cloud-native computing, and
   the latest in at-scale development, deployment, and management.

   [https://thenewstack.io/category/devops?utm_source=roadmap.sh&utm_mediu
   m=Referral&utm_campaign=Footer]DevOps ·
   [https://thenewstack.io/category/kubernetes?utm_source=roadmap.sh&utm_m
   edium=Referral&utm_campaign=Footer]Kubernetes ·
   [https://thenewstack.io/category/cloud-native?utm_source=roadmap.sh&utm
   _medium=Referral&utm_campaign=Footer]Cloud-Native

   (BUTTON) Close popup

Login to your account

   You must be logged in to perform this action.
   (BUTTON) GitHub Continue with GitHub (BUTTON) Google Continue with
   Google (BUTTON) Google Continue with LinkedIn
   OR
   Email address ____________________Password ____________________

   [https://roadmap.sh/forgot-password]Reset your password?
   (BUTTON) Continue
   Don't have an account? [https://roadmap.sh/signup]Sign up
