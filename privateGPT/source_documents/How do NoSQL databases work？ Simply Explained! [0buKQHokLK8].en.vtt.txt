nosql databases have become very popular
big companies rely on them to store
hundreds of petabytes of data and run
millions of queries per second but what
is a nosql database how does it work and
why does it scale so much better than
traditional relational databases let s
start by quickly explaining the problem
with relational databases like mysql
mariadb sql server and alike
these are built to store relational data
as efficiently as possible you can have
a table for customers orders and
products linking them together logically
customers place orders and orders
contain products
this tight organization is great for
managing your data but it comes at a
cost relational databases have a hard
time scaling they have to maintain these
relationships and that s an intensive
process requiring a lot of memory and
compute power so for a while you can
keep upgrading your database server but
at some point it won t be able to handle
the load
in technical terms we say that
relational databases can scale
vertically but not horizontally whereas
nosql databases can scale both
vertically and horizontally you can
compare this to a building vertical
scaling means adding more floors to an
existing building why horizontal scaling
means adding more buildings
you intuitively understand that vertical
scaling is only possible to a certain
extent while horizontal scaling is much
more powerful
now why do nosql databases scale so well
first of all they do away with these
costly relationships in nosql every item
in the database stands on its own
this simple modification means that they
are essentially key value stores each
item in the database only has two fields
a unique key and a value for instance
when you want to store product
information you can use the product s
barcode as the key and the product name
as the value
this seems restrictive but the value can
be something like a json document
containing more data like the price and
description
this simpler design is why nosql
databases scale better if a single
database server is not enough to store
all your data or handle all the queries
you can split the workload across two or
more servers each server will then be
responsible for only a part of your
database to give an example apple runs a
nosql database that consists out of 75
000 servers
in nosql terms these parts of your
database are called partitions and it
brings up a question if your database is
split across potentially thousands of
partitions how do you know where an item
is stored
that s where the primary key comes in
remember nosql databases are key value
stores and the key determines on what
partition an item will be stored
behind the scenes nosql databases use a
hash function to convert each item s
primary key into a number that falls
into a fixed range say between zero and
100
this hash value and the range is then
used to determine where to store an item
if your database is small enough or
doesn t get many requests you can put
everything on a single server this one
will then be responsible for the entire
range
if that server becomes overloaded you
can add a secondary server which means
that the range will be split in half
server 1 will be responsible for all
items with a hash between 0 and 50 while
server 2 will store everything between
50 and 100
theoretically you ve now doubled your
database capacity both in terms of
storage and in the number of queries you
can execute
this range is also called a key space
it s a simple system that solves two
problems where to store new items and
where to find existing ones
all you have to do is calculate the hash
of an item s key and keep track of which
server is responsible for which part of
the key space
now in this example the range of 0 to
100 is a bit small it would only allow
you to split up your database into 100
pieces at most
so real nosql databases have much bigger
key spaces allowing them to scale almost
without any restrictions
besides great scalability nosql is
schema less which means that items in
the database don t need to have the same
structure
each one can be completely different
in a relational database you have to
define your table structure and then
each item must conform to it
changing the structure isn t
straightforward and could even lead to
data loss
not having a schema can be a big
advantage if your application and data
structure is constantly evolving
now at this point it s clear that nosql
databases have certain advantages over
relational ones but that s not to say
that relational databases are obsolete
far from it nosql is more limited in the
way you can retrieve your data only
allowing you to retrieve items by their
primary key
finding orders by id is no problem but
finding all orders above a certain
amount would be very inefficient
relational databases on the other hand
have no trouble with this
now there are workarounds for this issue
but only if you know how you re going to
access your data and that might not
always be the case
another downside is that nosql databases
are eventually consistent when you write
a new item to the database and try to
read it back straight away it might not
be returned
as i ve explained nosql splits your
database into partitions but each
partition is mirrored across multiple
servers
that way a server can go down without
much impact when you write a new item to
the database one of these mirrors will
store the new item and then copy it to
the others in the background
this process might take a little bit of
time so when you read that item back the
nosql database might try to read it from
a mirror that doesn t have it yet
now this is not a big issue in practice
because data is replicated in just a few
milliseconds and if you want consistency
most nosql databases do have that option
so in summary both nosql and relational
databases will be around for the
foreseeable future each with their own
strengths and weaknesses
so now you know how nosql works let s
look at a few examples cloud providers
heavily promote nosql because they can
scale it more easily aws has dynamodb
google cloud has bigtable and azure has
cosmos db
and to give you another example of their
scalability during amazon prime day in
2019 amazon s nosql database peaked at
45 million requests per second that s
mind boggling
but you can also run nosql databases
yourself with software like cassandra
cilla couchdb mongodb and much more
now before ending this video let s
quickly talk about the name nosql it s a
bit confusing as it can have two
meanings first up nosql can mean not
only sql pointing to the fact that some
nosql databases partially understand the
sql query language on top of their own
query capabilities
and secondly it s often called nosql in
the sense of non relational because it
can t easily store relational data
so that was it for this video please
subscribe if you learned something from
