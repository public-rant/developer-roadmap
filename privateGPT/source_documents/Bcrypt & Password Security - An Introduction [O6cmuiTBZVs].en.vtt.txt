today we re gonna learn about bcrypt how
it protects our users from evil hackers
and also how to use it in our
applications so bcrypt is a hashing
algorithm other hashing algorithms
include nd5 sha 1 and each of these
algorithms are like our own little black
box when you insert a string like Hello
you re sticking to the bcrypt and out
comes a bunch of random letters and
numbers every time you enter in hello
into bcrypt you will get the same hash
no matter how many times you do it it s
a very useful property that s what
hashing algorithms they re the Pointer
hashing algorithms is that you can go
from hello to the hash but it is nearly
impossible to go from the hash back to
hello these other hashing algorithms do
the same thing they re all the same the
differences are these two are pretty
fast but bcrypt is designed to be slow
and that s a good thing it protects our
users from deadly hackers so the reason
we want bcrypt to be slow is because
sometimes our databases get compromised
so let s say we have a couple users we
will call them Alice and Bob and they
sign up for our website Alice is smart
Alice signs up with some random password
that she does not use on every other
website but Bob is not so smart Bob uses
a password that he uses on many many
other websites as well now when these
people sign up for our website we had to
store their passwords in our database so
this is our database our users database
we have user ID we have email and we
also have password so when Alice signs
up we give her a user ID give her an
email and password now if you employ
zero security and you will store the
password in plain text you never
actually want to do this this is what s
gonna happen I change these real quick
so let s pretend mr hacker has found a
flaw in our server and now he hacks it
so that all of this stuff goes to him
because our passwords are in plain text
he can take these passwords and emails
and he can attempt to use them and many
different other websites so he s gonna
take Alice at whatever comm and then
attempt to use this password for other
sensitive websites like banking websites
or email accounts or Facebook or Twitter
or whatever but because Alice is smart
and she used the password just for this
website that doesn t work so Alice is
safe however there are unfortunately a
lot of users who use the same password
for many different websites so because
of that Bob is not safe at all
Bob happens to use the same password for
his email account so now the hacker
writes a program to test all of these
and he discovers that Bob s email
account also uses this password because
it worked so now Bob s
email is compromised even though his
email server did not get hacked so
because of this unfortunate fact that
many people use the same password for
everything we must protect our users and
we protect our users by storing not the
password in plain text but storing a
hash of the password because again it s
very easy to get from here to here but
it s nearly impossible to get from here
back to the original string so if we
store the hash then nobody can really
guess the original password in practice
this hash of the password is called a
password digest assuming this is a
password so let s change this instead of
storing this we use bcrypt
to generate some hash so the much longer
hash is probably gonna be around 30 50
characters and now even though the
hacker has obtained this list of
passwords and emails he doesn t quite
know what this original password is he
can t take this and then try it in this
email account because it s not an actual
password it s just a hash
but even this is not secure enough what
hackers have done is they use what s
called a dictionary attack and what they
do is they take a list of common
passwords and they pre compile their
bcrypt hash so for example ABC 1 2 3 let
me in password they have a very very
very long list of common passwords and
they just they generate all of the
hashes for those passwords these are all
fake hashes by the way and now what the
hacker does is that he takes these
password hashes this is now a password
digest and he compares them with all the
ones he has and if any of them match up
then he knows the original so this is
not completely secure either for those
unfortunate common users so instead of
just hashing this directly what we use
is called a salt password salt and this
salt can be anything we want we will
call it will call it myself it s just a
string and the idea of a salt is that
instead of hashing the password directly
you hash the password plus the salt and
then you store that instead so now this
will change just making this up again
and this will also change even though
we re storing abc123
because we combined it with the salt
before we compute the hash this will no
longer match with this so our users
passwords are safe one thing I forgot to
mention if the hacker compromises our
passwords
he also compromises our salt so the
hacker can take that salt and then
generate another dictionary and then try
to get all these common passwords out of
our database however this is the point
where bcrypt becomes especially
important remember that bcrypt
is designed to be slow because it s slow
creating this dictionary will take a
very very long time if it was instead a
fast hashing algorithm like md5 the
hacker could create this in like an
instant but he can t because we re using
bcrypt
this will take too long to be anything
meaningful so that s the whole reason
bcrypt is
