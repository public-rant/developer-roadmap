WEBVTT



00:00:02.159 --> 00:00:03.830 align:start position:0%
 
in<00:00:02.320><c> this</c><00:00:02.480><c> python</c><00:00:02.879><c> tutorial</c><00:00:03.520><c> you're</c><00:00:03.679><c> going</c><00:00:03.760><c> to</c>

00:00:03.830 --> 00:00:03.840 align:start position:0%
in this python tutorial you're going to
 

00:00:03.840 --> 00:00:05.349 align:start position:0%
in this python tutorial you're going to
learn<00:00:04.319><c> everything</c><00:00:04.640><c> you</c><00:00:04.720><c> need</c><00:00:04.880><c> to</c><00:00:04.960><c> know</c><00:00:05.120><c> to</c>

00:00:05.349 --> 00:00:05.359 align:start position:0%
learn everything you need to know to
 

00:00:05.359 --> 00:00:07.349 align:start position:0%
learn everything you need to know to
start<00:00:05.600><c> programming</c><00:00:06.160><c> in</c><00:00:06.319><c> python</c><00:00:07.040><c> if</c><00:00:07.120><c> you</c><00:00:07.200><c> want</c>

00:00:07.349 --> 00:00:07.359 align:start position:0%
start programming in python if you want
 

00:00:07.359 --> 00:00:08.950 align:start position:0%
start programming in python if you want
to<00:00:07.440><c> learn</c><00:00:07.600><c> python</c><00:00:08.000><c> programming</c><00:00:08.400><c> for</c><00:00:08.639><c> data</c>

00:00:08.950 --> 00:00:08.960 align:start position:0%
to learn python programming for data
 

00:00:08.960 --> 00:00:10.629 align:start position:0%
to learn python programming for data
science<00:00:09.599><c> machine</c><00:00:09.920><c> learning</c><00:00:10.240><c> or</c><00:00:10.400><c> web</c>

00:00:10.629 --> 00:00:10.639 align:start position:0%
science machine learning or web
 

00:00:10.639 --> 00:00:12.870 align:start position:0%
science machine learning or web
development<00:00:11.440><c> this</c><00:00:11.599><c> python</c><00:00:12.000><c> tutorial</c><00:00:12.559><c> is</c><00:00:12.639><c> the</c>

00:00:12.870 --> 00:00:12.880 align:start position:0%
development this python tutorial is the
 

00:00:12.880 --> 00:00:14.709 align:start position:0%
development this python tutorial is the
perfect<00:00:13.200><c> place</c><00:00:13.440><c> to</c><00:00:13.519><c> learn</c><00:00:13.759><c> python</c><00:00:14.400><c> you</c><00:00:14.559><c> don't</c>

00:00:14.709 --> 00:00:14.719 align:start position:0%
perfect place to learn python you don't
 

00:00:14.719 --> 00:00:16.710 align:start position:0%
perfect place to learn python you don't
need<00:00:14.960><c> any</c><00:00:15.120><c> prior</c><00:00:15.440><c> knowledge</c><00:00:15.759><c> in</c><00:00:15.839><c> python</c><00:00:16.240><c> or</c>

00:00:16.710 --> 00:00:16.720 align:start position:0%
need any prior knowledge in python or
 

00:00:16.720 --> 00:00:18.070 align:start position:0%
need any prior knowledge in python or
programming<00:00:17.199><c> in</c><00:00:17.359><c> general</c><00:00:17.760><c> i'm</c><00:00:17.920><c> going</c><00:00:18.000><c> to</c>

00:00:18.070 --> 00:00:18.080 align:start position:0%
programming in general i'm going to
 

00:00:18.080 --> 00:00:19.910 align:start position:0%
programming in general i'm going to
teach<00:00:18.320><c> you</c><00:00:18.560><c> everything</c><00:00:18.960><c> from</c><00:00:19.119><c> scratch</c><00:00:19.760><c> i'm</c>

00:00:19.910 --> 00:00:19.920 align:start position:0%
teach you everything from scratch i'm
 

00:00:19.920 --> 00:00:21.910 align:start position:0%
teach you everything from scratch i'm
mosh<00:00:20.160><c> hamadani</c><00:00:20.960><c> and</c><00:00:21.199><c> i've</c><00:00:21.279><c> taught</c><00:00:21.600><c> millions</c>

00:00:21.910 --> 00:00:21.920 align:start position:0%
mosh hamadani and i've taught millions
 

00:00:21.920 --> 00:00:23.189 align:start position:0%
mosh hamadani and i've taught millions
of<00:00:22.000><c> people</c><00:00:22.240><c> how</c><00:00:22.400><c> to</c><00:00:22.560><c> code</c><00:00:22.800><c> through</c><00:00:23.039><c> this</c>

00:00:23.189 --> 00:00:23.199 align:start position:0%
of people how to code through this
 

00:00:23.199 --> 00:00:25.109 align:start position:0%
of people how to code through this
channel<00:00:23.680><c> if</c><00:00:23.840><c> you're</c><00:00:24.000><c> new</c><00:00:24.240><c> here</c><00:00:24.640><c> make</c><00:00:24.800><c> sure</c><00:00:24.960><c> to</c>

00:00:25.109 --> 00:00:25.119 align:start position:0%
channel if you're new here make sure to
 

00:00:25.119 --> 00:00:27.029 align:start position:0%
channel if you're new here make sure to
subscribe<00:00:25.599><c> as</c><00:00:25.760><c> i</c><00:00:25.920><c> upload</c><00:00:26.240><c> new</c><00:00:26.480><c> videos</c><00:00:26.800><c> every</c>

00:00:27.029 --> 00:00:27.039 align:start position:0%
subscribe as i upload new videos every
 

00:00:27.039 --> 00:00:30.070 align:start position:0%
subscribe as i upload new videos every
week<00:00:27.519><c> now</c><00:00:27.760><c> let's</c><00:00:28.000><c> jump</c><00:00:28.240><c> in</c><00:00:28.320><c> and</c><00:00:28.560><c> get</c><00:00:28.840><c> started</c>

00:00:30.070 --> 00:00:30.080 align:start position:0%
week now let's jump in and get started
 

00:00:30.080 --> 00:00:31.429 align:start position:0%
week now let's jump in and get started
all<00:00:30.160><c> right</c><00:00:30.320><c> before</c><00:00:30.560><c> we</c><00:00:30.640><c> get</c><00:00:30.800><c> started</c><00:00:31.199><c> let</c><00:00:31.359><c> me</c>

00:00:31.429 --> 00:00:31.439 align:start position:0%
all right before we get started let me
 

00:00:31.439 --> 00:00:32.790 align:start position:0%
all right before we get started let me
give<00:00:31.519><c> you</c><00:00:31.599><c> some</c><00:00:31.840><c> ideas</c><00:00:32.160><c> about</c><00:00:32.399><c> what</c><00:00:32.559><c> you</c><00:00:32.640><c> can</c>

00:00:32.790 --> 00:00:32.800 align:start position:0%
give you some ideas about what you can
 

00:00:32.800 --> 00:00:34.630 align:start position:0%
give you some ideas about what you can
do<00:00:32.960><c> with</c><00:00:33.200><c> python</c><00:00:33.680><c> that's</c><00:00:33.920><c> a</c><00:00:34.079><c> very</c><00:00:34.320><c> common</c>

00:00:34.630 --> 00:00:34.640 align:start position:0%
do with python that's a very common
 

00:00:34.640 --> 00:00:36.870 align:start position:0%
do with python that's a very common
question<00:00:35.520><c> python</c><00:00:36.000><c> is</c><00:00:36.079><c> a</c><00:00:36.160><c> multi-purpose</c>

00:00:36.870 --> 00:00:36.880 align:start position:0%
question python is a multi-purpose
 

00:00:36.880 --> 00:00:38.470 align:start position:0%
question python is a multi-purpose
programming<00:00:37.360><c> language</c><00:00:37.840><c> so</c><00:00:38.000><c> you</c><00:00:38.160><c> can</c><00:00:38.239><c> use</c><00:00:38.399><c> it</c>

00:00:38.470 --> 00:00:38.480 align:start position:0%
programming language so you can use it
 

00:00:38.480 --> 00:00:40.630 align:start position:0%
programming language so you can use it
for<00:00:38.640><c> a</c><00:00:38.800><c> variety</c><00:00:39.200><c> of</c><00:00:39.280><c> different</c><00:00:39.680><c> tasks</c><00:00:40.399><c> you</c><00:00:40.480><c> can</c>

00:00:40.630 --> 00:00:40.640 align:start position:0%
for a variety of different tasks you can
 

00:00:40.640 --> 00:00:42.709 align:start position:0%
for a variety of different tasks you can
use<00:00:40.879><c> python</c><00:00:41.200><c> for</c><00:00:41.360><c> machine</c><00:00:41.680><c> learning</c><00:00:42.000><c> and</c><00:00:42.160><c> ai</c>

00:00:42.709 --> 00:00:42.719 align:start position:0%
use python for machine learning and ai
 

00:00:42.719 --> 00:00:44.150 align:start position:0%
use python for machine learning and ai
in<00:00:42.879><c> fact</c><00:00:43.040><c> python</c><00:00:43.440><c> is</c><00:00:43.520><c> the</c><00:00:43.680><c> number</c><00:00:44.000><c> one</c>

00:00:44.150 --> 00:00:44.160 align:start position:0%
in fact python is the number one
 

00:00:44.160 --> 00:00:45.750 align:start position:0%
in fact python is the number one
language<00:00:44.559><c> for</c><00:00:44.719><c> machine</c><00:00:45.039><c> learning</c><00:00:45.360><c> and</c><00:00:45.440><c> data</c>

00:00:45.750 --> 00:00:45.760 align:start position:0%
language for machine learning and data
 

00:00:45.760 --> 00:00:47.670 align:start position:0%
language for machine learning and data
science<00:00:46.079><c> projects</c><00:00:46.719><c> python</c><00:00:47.120><c> is</c><00:00:47.200><c> also</c><00:00:47.440><c> very</c>

00:00:47.670 --> 00:00:47.680 align:start position:0%
science projects python is also very
 

00:00:47.680 --> 00:00:50.310 align:start position:0%
science projects python is also very
popular<00:00:48.160><c> in</c><00:00:48.239><c> web</c><00:00:48.559><c> development</c><00:00:49.520><c> using</c><00:00:49.840><c> python</c>

00:00:50.310 --> 00:00:50.320 align:start position:0%
popular in web development using python
 

00:00:50.320 --> 00:00:51.910 align:start position:0%
popular in web development using python
and<00:00:50.559><c> a</c><00:00:50.640><c> framework</c><00:00:51.039><c> called</c><00:00:51.199><c> django</c><00:00:51.680><c> you</c><00:00:51.760><c> can</c>

00:00:51.910 --> 00:00:51.920 align:start position:0%
and a framework called django you can
 

00:00:51.920 --> 00:00:53.990 align:start position:0%
and a framework called django you can
build<00:00:52.320><c> amazing</c><00:00:52.800><c> websites</c><00:00:53.360><c> here</c><00:00:53.600><c> are</c><00:00:53.760><c> five</c>

00:00:53.990 --> 00:00:54.000 align:start position:0%
build amazing websites here are five
 

00:00:54.000 --> 00:00:56.389 align:start position:0%
build amazing websites here are five
websites<00:00:54.480><c> powered</c><00:00:54.800><c> with</c><00:00:54.960><c> python</c><00:00:55.440><c> and</c><00:00:55.600><c> django</c>

00:00:56.389 --> 00:00:56.399 align:start position:0%
websites powered with python and django
 

00:00:56.399 --> 00:01:00.069 align:start position:0%
websites powered with python and django
youtube<00:00:57.360><c> instagram</c><00:00:58.239><c> spotify</c><00:00:59.199><c> dropbox</c><00:00:59.920><c> and</c>

00:01:00.069 --> 00:01:00.079 align:start position:0%
youtube instagram spotify dropbox and
 

00:01:00.079 --> 00:01:02.150 align:start position:0%
youtube instagram spotify dropbox and
pinterest<00:01:00.879><c> you</c><00:01:00.960><c> can</c><00:01:01.199><c> also</c><00:01:01.359><c> use</c><00:01:01.600><c> python</c><00:01:02.000><c> in</c>

00:01:02.150 --> 00:01:02.160 align:start position:0%
pinterest you can also use python in
 

00:01:02.160 --> 00:01:04.149 align:start position:0%
pinterest you can also use python in
automation<00:01:02.800><c> with</c><00:01:03.039><c> python</c><00:01:03.440><c> you</c><00:01:03.600><c> can</c><00:01:03.760><c> save</c><00:01:04.000><c> your</c>

00:01:04.149 --> 00:01:04.159 align:start position:0%
automation with python you can save your
 

00:01:04.159 --> 00:01:06.550 align:start position:0%
automation with python you can save your
time<00:01:04.479><c> and</c><00:01:04.720><c> increase</c><00:01:05.119><c> your</c><00:01:05.280><c> productivity</c><00:01:06.240><c> by</c>

00:01:06.550 --> 00:01:06.560 align:start position:0%
time and increase your productivity by
 

00:01:06.560 --> 00:01:09.350 align:start position:0%
time and increase your productivity by
automating<00:01:07.200><c> repetitive</c><00:01:07.840><c> tasks</c><00:01:08.560><c> so</c><00:01:09.040><c> why</c><00:01:09.280><c> are</c>

00:01:09.350 --> 00:01:09.360 align:start position:0%
automating repetitive tasks so why are
 

00:01:09.360 --> 00:01:10.710 align:start position:0%
automating repetitive tasks so why are
you<00:01:09.520><c> learning</c><00:01:09.840><c> python</c><00:01:10.240><c> are</c><00:01:10.320><c> you</c><00:01:10.400><c> learning</c><00:01:10.640><c> it</c>

00:01:10.710 --> 00:01:10.720 align:start position:0%
you learning python are you learning it
 

00:01:10.720 --> 00:01:12.789 align:start position:0%
you learning python are you learning it
for<00:01:10.960><c> automation</c><00:01:11.680><c> for</c><00:01:11.920><c> data</c><00:01:12.240><c> science</c><00:01:12.479><c> or</c><00:01:12.640><c> web</c>

00:01:12.789 --> 00:01:12.799 align:start position:0%
for automation for data science or web
 

00:01:12.799 --> 00:01:14.550 align:start position:0%
for automation for data science or web
development<00:01:13.680><c> let</c><00:01:13.840><c> me</c><00:01:13.920><c> know</c><00:01:14.080><c> in</c><00:01:14.159><c> the</c><00:01:14.240><c> comment</c>

00:01:14.550 --> 00:01:14.560 align:start position:0%
development let me know in the comment
 

00:01:14.560 --> 00:01:19.749 align:start position:0%
development let me know in the comment
section<00:01:14.799><c> below</c>

00:01:19.749 --> 00:01:19.759 align:start position:0%
 
 

00:01:19.759 --> 00:01:20.950 align:start position:0%
 
all<00:01:19.840><c> right</c><00:01:20.000><c> the</c><00:01:20.080><c> first</c><00:01:20.240><c> thing</c><00:01:20.400><c> i</c><00:01:20.479><c> want</c><00:01:20.640><c> you</c><00:01:20.799><c> to</c>

00:01:20.950 --> 00:01:20.960 align:start position:0%
all right the first thing i want you to
 

00:01:20.960 --> 00:01:23.830 align:start position:0%
all right the first thing i want you to
do<00:01:21.520><c> is</c><00:01:21.680><c> to</c><00:01:21.759><c> head</c><00:01:22.000><c> over</c><00:01:22.240><c> to</c><00:01:22.400><c> python.org</c><00:01:23.600><c> to</c>

00:01:23.830 --> 00:01:23.840 align:start position:0%
do is to head over to python.org to
 

00:01:23.840 --> 00:01:26.310 align:start position:0%
do is to head over to python.org to
download<00:01:24.240><c> the</c><00:01:24.400><c> latest</c><00:01:24.799><c> version</c><00:01:25.119><c> of</c><00:01:25.200><c> python</c><00:01:26.080><c> so</c>

00:01:26.310 --> 00:01:26.320 align:start position:0%
download the latest version of python so
 

00:01:26.320 --> 00:01:28.390 align:start position:0%
download the latest version of python so
you<00:01:26.400><c> go</c><00:01:26.560><c> to</c><00:01:26.720><c> downloads</c><00:01:27.280><c> and</c><00:01:28.000><c> select</c><00:01:28.320><c> the</c>

00:01:28.390 --> 00:01:28.400 align:start position:0%
you go to downloads and select the
 

00:01:28.400 --> 00:01:33.109 align:start position:0%
you go to downloads and select the
latest<00:01:28.799><c> version</c><00:01:29.119><c> of</c><00:01:29.200><c> python</c>

00:01:33.109 --> 00:01:33.119 align:start position:0%
 
 

00:01:33.119 --> 00:01:34.710 align:start position:0%
 
here<00:01:33.280><c> in</c><00:01:33.439><c> your</c><00:01:33.520><c> downloads</c><00:01:33.920><c> folder</c><00:01:34.400><c> you</c><00:01:34.560><c> should</c>

00:01:34.710 --> 00:01:34.720 align:start position:0%
here in your downloads folder you should
 

00:01:34.720 --> 00:01:37.830 align:start position:0%
here in your downloads folder you should
see<00:01:34.880><c> this</c><00:01:35.119><c> package</c><00:01:35.920><c> simply</c><00:01:36.320><c> double</c><00:01:36.640><c> click</c><00:01:36.880><c> it</c>

00:01:37.830 --> 00:01:37.840 align:start position:0%
see this package simply double click it
 

00:01:37.840 --> 00:01:38.950 align:start position:0%
see this package simply double click it
you're<00:01:38.000><c> going</c><00:01:38.079><c> to</c><00:01:38.159><c> see</c><00:01:38.320><c> this</c><00:01:38.560><c> python</c>

00:01:38.950 --> 00:01:38.960 align:start position:0%
you're going to see this python
 

00:01:38.960 --> 00:01:41.510 align:start position:0%
you're going to see this python
installer<00:01:40.159><c> if</c><00:01:40.320><c> you're</c><00:01:40.479><c> on</c><00:01:40.640><c> windows</c><00:01:41.280><c> you</c><00:01:41.439><c> will</c>

00:01:41.510 --> 00:01:41.520 align:start position:0%
installer if you're on windows you will
 

00:01:41.520 --> 00:01:44.149 align:start position:0%
installer if you're on windows you will
see<00:01:41.680><c> this</c><00:01:41.920><c> checkbox</c><00:01:42.399><c> over</c><00:01:42.640><c> here</c><00:01:43.360><c> add</c><00:01:43.759><c> python</c>

00:01:44.149 --> 00:01:44.159 align:start position:0%
see this checkbox over here add python
 

00:01:44.159 --> 00:01:46.469 align:start position:0%
see this checkbox over here add python
to<00:01:44.399><c> path</c><00:01:45.119><c> make</c><00:01:45.280><c> sure</c><00:01:45.439><c> to</c><00:01:45.680><c> check</c><00:01:45.920><c> it</c><00:01:46.240><c> it's</c>

00:01:46.469 --> 00:01:46.479 align:start position:0%
to path make sure to check it it's
 

00:01:46.479 --> 00:01:48.310 align:start position:0%
to path make sure to check it it's
really<00:01:46.799><c> important</c><00:01:47.520><c> otherwise</c><00:01:48.000><c> you're</c><00:01:48.159><c> not</c>

00:01:48.310 --> 00:01:48.320 align:start position:0%
really important otherwise you're not
 

00:01:48.320 --> 00:01:50.950 align:start position:0%
really important otherwise you're not
going<00:01:48.399><c> to</c><00:01:48.479><c> be</c><00:01:48.640><c> able</c><00:01:48.799><c> to</c><00:01:49.040><c> follow</c><00:01:49.360><c> this</c><00:01:49.520><c> tutorial</c>

00:01:50.950 --> 00:01:50.960 align:start position:0%
going to be able to follow this tutorial
 

00:01:50.960 --> 00:01:52.870 align:start position:0%
going to be able to follow this tutorial
simply<00:01:51.280><c> click</c><00:01:51.520><c> on</c><00:01:51.759><c> continue</c>

00:01:52.870 --> 00:01:52.880 align:start position:0%
simply click on continue
 

00:01:52.880 --> 00:01:53.749 align:start position:0%
simply click on continue
again

00:01:53.749 --> 00:01:53.759 align:start position:0%
again
 

00:01:53.759 --> 00:01:55.109 align:start position:0%
again
one<00:01:53.920><c> more</c><00:01:54.159><c> time</c>

00:01:55.109 --> 00:01:55.119 align:start position:0%
one more time
 

00:01:55.119 --> 00:01:57.109 align:start position:0%
one more time
i<00:01:55.280><c> agree</c><00:01:55.520><c> with</c><00:01:55.600><c> the</c><00:01:55.759><c> terms</c>

00:01:57.109 --> 00:01:57.119 align:start position:0%
i agree with the terms
 

00:01:57.119 --> 00:02:00.230 align:start position:0%
i agree with the terms
and<00:01:57.680><c> install</c><00:01:58.079><c> the</c><00:01:58.240><c> latest</c><00:01:58.640><c> version</c><00:01:58.960><c> of</c><00:01:59.040><c> python</c>

00:02:00.230 --> 00:02:00.240 align:start position:0%
and install the latest version of python
 

00:02:00.240 --> 00:02:01.990 align:start position:0%
and install the latest version of python
now<00:02:00.399><c> here</c><00:02:00.560><c> you</c><00:02:00.640><c> need</c><00:02:00.799><c> to</c><00:02:00.960><c> enter</c><00:02:01.360><c> the</c><00:02:01.439><c> username</c>

00:02:01.990 --> 00:02:02.000 align:start position:0%
now here you need to enter the username
 

00:02:02.000 --> 00:02:03.830 align:start position:0%
now here you need to enter the username
password<00:02:02.560><c> of</c><00:02:02.640><c> your</c><00:02:02.799><c> computer</c>

00:02:03.830 --> 00:02:03.840 align:start position:0%
password of your computer
 

00:02:03.840 --> 00:02:04.870 align:start position:0%
password of your computer
so

00:02:04.870 --> 00:02:04.880 align:start position:0%
so
 

00:02:04.880 --> 00:02:08.869 align:start position:0%
so
let's<00:02:05.119><c> do</c><00:02:05.280><c> that</c><00:02:05.520><c> real</c><00:02:05.759><c> quick</c>

00:02:08.869 --> 00:02:08.879 align:start position:0%
 
 

00:02:08.879 --> 00:02:11.190 align:start position:0%
 
next<00:02:09.119><c> you</c><00:02:09.280><c> need</c><00:02:09.360><c> to</c><00:02:09.520><c> install</c><00:02:10.000><c> a</c><00:02:10.160><c> code</c><00:02:10.479><c> editor</c>

00:02:11.190 --> 00:02:11.200 align:start position:0%
next you need to install a code editor
 

00:02:11.200 --> 00:02:13.030 align:start position:0%
next you need to install a code editor
we<00:02:11.360><c> use</c><00:02:11.520><c> a</c><00:02:11.599><c> code</c><00:02:11.840><c> editor</c><00:02:12.239><c> to</c><00:02:12.400><c> write</c><00:02:12.640><c> our</c><00:02:12.800><c> code</c>

00:02:13.030 --> 00:02:13.040 align:start position:0%
we use a code editor to write our code
 

00:02:13.040 --> 00:02:15.270 align:start position:0%
we use a code editor to write our code
and<00:02:13.280><c> execute</c><00:02:13.760><c> it</c><00:02:14.160><c> the</c><00:02:14.319><c> most</c><00:02:14.640><c> popular</c><00:02:15.040><c> code</c>

00:02:15.270 --> 00:02:15.280 align:start position:0%
and execute it the most popular code
 

00:02:15.280 --> 00:02:17.990 align:start position:0%
and execute it the most popular code
editor<00:02:15.599><c> for</c><00:02:15.760><c> python</c><00:02:16.319><c> is</c><00:02:16.720><c> pycharm</c><00:02:17.599><c> you</c><00:02:17.680><c> can</c><00:02:17.840><c> get</c>

00:02:17.990 --> 00:02:18.000 align:start position:0%
editor for python is pycharm you can get
 

00:02:18.000 --> 00:02:20.070 align:start position:0%
editor for python is pycharm you can get
it<00:02:18.080><c> from</c><00:02:18.520><c> jetbrains.com</c>

00:02:20.070 --> 00:02:20.080 align:start position:0%
it from jetbrains.com
 

00:02:20.080 --> 00:02:21.190 align:start position:0%
it from jetbrains.com
pycharm

00:02:21.190 --> 00:02:21.200 align:start position:0%
pycharm
 

00:02:21.200 --> 00:02:23.270 align:start position:0%
pycharm
so<00:02:21.360><c> on</c><00:02:21.440><c> this</c><00:02:21.599><c> page</c>

00:02:23.270 --> 00:02:23.280 align:start position:0%
so on this page
 

00:02:23.280 --> 00:02:25.910 align:start position:0%
so on this page
click<00:02:23.520><c> on</c><00:02:23.680><c> download</c>

00:02:25.910 --> 00:02:25.920 align:start position:0%
click on download
 

00:02:25.920 --> 00:02:27.270 align:start position:0%
click on download
you<00:02:26.000><c> should</c><00:02:26.160><c> see</c><00:02:26.319><c> two</c><00:02:26.480><c> different</c><00:02:26.800><c> editions</c>

00:02:27.270 --> 00:02:27.280 align:start position:0%
you should see two different editions
 

00:02:27.280 --> 00:02:29.270 align:start position:0%
you should see two different editions
one<00:02:27.520><c> is</c><00:02:27.920><c> the</c><00:02:28.080><c> professional</c><00:02:28.560><c> edition</c><00:02:28.959><c> which</c><00:02:29.200><c> is</c>

00:02:29.270 --> 00:02:29.280 align:start position:0%
one is the professional edition which is
 

00:02:29.280 --> 00:02:31.270 align:start position:0%
one is the professional edition which is
commercial<00:02:30.319><c> and</c><00:02:30.480><c> we</c><00:02:30.640><c> also</c><00:02:30.879><c> have</c><00:02:31.040><c> this</c>

00:02:31.270 --> 00:02:31.280 align:start position:0%
commercial and we also have this
 

00:02:31.280 --> 00:02:33.270 align:start position:0%
commercial and we also have this
community<00:02:31.760><c> edition</c><00:02:32.160><c> which</c><00:02:32.319><c> is</c><00:02:32.480><c> free</c><00:02:32.800><c> and</c><00:02:32.959><c> open</c>

00:02:33.270 --> 00:02:33.280 align:start position:0%
community edition which is free and open
 

00:02:33.280 --> 00:02:35.110 align:start position:0%
community edition which is free and open
source<00:02:34.000><c> so</c><00:02:34.239><c> we're</c><00:02:34.400><c> going</c><00:02:34.480><c> to</c><00:02:34.560><c> download</c><00:02:34.959><c> the</c>

00:02:35.110 --> 00:02:35.120 align:start position:0%
source so we're going to download the
 

00:02:35.120 --> 00:02:39.670 align:start position:0%
source so we're going to download the
community<00:02:35.599><c> edition</c>

00:02:39.670 --> 00:02:39.680 align:start position:0%
 
 

00:02:39.680 --> 00:02:41.350 align:start position:0%
 
now<00:02:40.000><c> in</c><00:02:40.080><c> your</c><00:02:40.239><c> downloads</c><00:02:40.640><c> folder</c><00:02:41.040><c> you</c><00:02:41.200><c> should</c>

00:02:41.350 --> 00:02:41.360 align:start position:0%
now in your downloads folder you should
 

00:02:41.360 --> 00:02:45.430 align:start position:0%
now in your downloads folder you should
have<00:02:41.519><c> this</c><00:02:41.760><c> package</c><00:02:42.400><c> let's</c><00:02:42.640><c> double</c><00:02:42.959><c> click</c><00:02:43.200><c> it</c>

00:02:45.430 --> 00:02:45.440 align:start position:0%
 
 

00:02:45.440 --> 00:02:47.110 align:start position:0%
 
if<00:02:45.519><c> you're</c><00:02:45.680><c> on</c><00:02:45.840><c> windows</c><00:02:46.480><c> you're</c><00:02:46.640><c> going</c><00:02:46.800><c> to</c><00:02:46.879><c> see</c>

00:02:47.110 --> 00:02:47.120 align:start position:0%
if you're on windows you're going to see
 

00:02:47.120 --> 00:02:49.190 align:start position:0%
if you're on windows you're going to see
an<00:02:47.360><c> installation</c><00:02:47.920><c> wizard</c><00:02:48.400><c> so</c><00:02:48.560><c> simply</c><00:02:48.879><c> click</c>

00:02:49.190 --> 00:02:49.200 align:start position:0%
an installation wizard so simply click
 

00:02:49.200 --> 00:02:51.110 align:start position:0%
an installation wizard so simply click
on<00:02:49.280><c> the</c><00:02:49.440><c> next</c><00:02:49.680><c> button</c><00:02:50.239><c> until</c><00:02:50.560><c> you</c><00:02:50.720><c> install</c>

00:02:51.110 --> 00:02:51.120 align:start position:0%
on the next button until you install
 

00:02:51.120 --> 00:02:53.509 align:start position:0%
on the next button until you install
pycharm<00:02:52.080><c> if</c><00:02:52.160><c> you're</c><00:02:52.400><c> on</c><00:02:52.480><c> a</c><00:02:52.560><c> mac</c><00:02:53.040><c> you</c><00:02:53.200><c> need</c><00:02:53.360><c> to</c>

00:02:53.509 --> 00:02:53.519 align:start position:0%
pycharm if you're on a mac you need to
 

00:02:53.519 --> 00:02:55.990 align:start position:0%
pycharm if you're on a mac you need to
drag<00:02:53.840><c> this</c><00:02:54.080><c> pycharm</c><00:02:54.959><c> and</c><00:02:55.120><c> drop</c><00:02:55.440><c> it</c><00:02:55.599><c> onto</c><00:02:55.840><c> the</c>

00:02:55.990 --> 00:02:56.000 align:start position:0%
drag this pycharm and drop it onto the
 

00:02:56.000 --> 00:03:00.149 align:start position:0%
drag this pycharm and drop it onto the
applications<00:02:56.560><c> folder</c>

00:03:00.149 --> 00:03:00.159 align:start position:0%
 
 

00:03:00.159 --> 00:03:01.030 align:start position:0%
 
now

00:03:01.030 --> 00:03:01.040 align:start position:0%
now
 

00:03:01.040 --> 00:03:02.869 align:start position:0%
now
let's<00:03:01.280><c> open</c><00:03:01.599><c> it</c>

00:03:02.869 --> 00:03:02.879 align:start position:0%
let's open it
 

00:03:02.879 --> 00:03:04.710 align:start position:0%
let's open it
the<00:03:03.040><c> first</c><00:03:03.200><c> time</c><00:03:03.440><c> you</c><00:03:03.519><c> open</c><00:03:03.840><c> pycharm</c><00:03:04.480><c> you</c><00:03:04.640><c> have</c>

00:03:04.710 --> 00:03:04.720 align:start position:0%
the first time you open pycharm you have
 

00:03:04.720 --> 00:03:06.630 align:start position:0%
the first time you open pycharm you have
to<00:03:04.879><c> configure</c><00:03:05.440><c> a</c><00:03:05.519><c> few</c><00:03:05.760><c> settings</c><00:03:06.400><c> we</c><00:03:06.560><c> don't</c>

00:03:06.630 --> 00:03:06.640 align:start position:0%
to configure a few settings we don't
 

00:03:06.640 --> 00:03:09.750 align:start position:0%
to configure a few settings we don't
want<00:03:06.800><c> to</c><00:03:06.879><c> spend</c><00:03:07.120><c> time</c><00:03:07.360><c> on</c><00:03:07.519><c> this</c><00:03:08.159><c> so</c><00:03:08.879><c> over</c><00:03:09.120><c> here</c>

00:03:09.750 --> 00:03:09.760 align:start position:0%
want to spend time on this so over here
 

00:03:09.760 --> 00:03:11.350 align:start position:0%
want to spend time on this so over here
we're<00:03:09.920><c> going</c><00:03:10.000><c> to</c><00:03:10.080><c> click</c><00:03:10.319><c> on</c><00:03:10.480><c> skip</c><00:03:10.800><c> remaining</c>

00:03:11.350 --> 00:03:11.360 align:start position:0%
we're going to click on skip remaining
 

00:03:11.360 --> 00:03:14.149 align:start position:0%
we're going to click on skip remaining
and<00:03:11.840><c> set</c><00:03:12.000><c> defaults</c>

00:03:14.149 --> 00:03:14.159 align:start position:0%
and set defaults
 

00:03:14.159 --> 00:03:16.390 align:start position:0%
and set defaults
now<00:03:14.400><c> let's</c><00:03:14.560><c> create</c><00:03:14.800><c> a</c><00:03:14.879><c> new</c><00:03:15.120><c> project</c>

00:03:16.390 --> 00:03:16.400 align:start position:0%
now let's create a new project
 

00:03:16.400 --> 00:03:18.710 align:start position:0%
now let's create a new project
over<00:03:16.640><c> here</c><00:03:16.879><c> we</c><00:03:16.959><c> can</c><00:03:17.120><c> specify</c><00:03:17.599><c> the</c><00:03:17.840><c> location</c>

00:03:18.710 --> 00:03:18.720 align:start position:0%
over here we can specify the location
 

00:03:18.720 --> 00:03:21.990 align:start position:0%
over here we can specify the location
and<00:03:18.800><c> the</c><00:03:18.959><c> name</c><00:03:19.200><c> of</c><00:03:19.360><c> our</c><00:03:19.599><c> python</c><00:03:20.080><c> project</c><00:03:20.959><c> so</c>

00:03:21.990 --> 00:03:22.000 align:start position:0%
and the name of our python project so
 

00:03:22.000 --> 00:03:25.030 align:start position:0%
and the name of our python project so
let's<00:03:22.239><c> append</c><00:03:22.959><c> hello</c><00:03:23.360><c> world</c><00:03:23.920><c> to</c><00:03:24.080><c> this</c><00:03:24.239><c> path</c>

00:03:25.030 --> 00:03:25.040 align:start position:0%
let's append hello world to this path
 

00:03:25.040 --> 00:03:26.949 align:start position:0%
let's append hello world to this path
this<00:03:25.280><c> is</c><00:03:25.440><c> where</c><00:03:25.840><c> our</c><00:03:26.080><c> python</c><00:03:26.480><c> project</c><00:03:26.799><c> is</c>

00:03:26.949 --> 00:03:26.959 align:start position:0%
this is where our python project is
 

00:03:26.959 --> 00:03:29.350 align:start position:0%
this is where our python project is
going<00:03:27.120><c> to</c><00:03:27.200><c> be</c><00:03:27.360><c> saved</c><00:03:28.080><c> so</c><00:03:28.720><c> let's</c><00:03:28.959><c> click</c><00:03:29.200><c> on</c>

00:03:29.350 --> 00:03:29.360 align:start position:0%
going to be saved so let's click on
 

00:03:29.360 --> 00:03:32.390 align:start position:0%
going to be saved so let's click on
create

00:03:32.390 --> 00:03:32.400 align:start position:0%
 
 

00:03:32.400 --> 00:03:33.990 align:start position:0%
 
in<00:03:32.480><c> this</c><00:03:32.640><c> window</c><00:03:32.959><c> you</c><00:03:33.040><c> can</c><00:03:33.200><c> see</c><00:03:33.360><c> the</c><00:03:33.599><c> content</c>

00:03:33.990 --> 00:03:34.000 align:start position:0%
in this window you can see the content
 

00:03:34.000 --> 00:03:36.470 align:start position:0%
in this window you can see the content
of<00:03:34.159><c> our</c><00:03:34.319><c> project</c><00:03:35.200><c> so</c><00:03:35.599><c> here's</c><00:03:35.920><c> our</c><00:03:36.000><c> hello</c><00:03:36.239><c> world</c>

00:03:36.470 --> 00:03:36.480 align:start position:0%
of our project so here's our hello world
 

00:03:36.480 --> 00:03:38.390 align:start position:0%
of our project so here's our hello world
project<00:03:37.200><c> currently</c><00:03:37.599><c> we</c><00:03:37.680><c> have</c><00:03:37.840><c> only</c><00:03:38.159><c> one</c>

00:03:38.390 --> 00:03:38.400 align:start position:0%
project currently we have only one
 

00:03:38.400 --> 00:03:40.789 align:start position:0%
project currently we have only one
folder<00:03:38.799><c> inside</c><00:03:39.040><c> this</c><00:03:39.280><c> project</c><00:03:39.840><c> that</c><00:03:40.080><c> is</c><00:03:40.239><c> vn</c>

00:03:40.789 --> 00:03:40.799 align:start position:0%
folder inside this project that is vn
 

00:03:40.799 --> 00:03:42.869 align:start position:0%
folder inside this project that is vn
which<00:03:41.040><c> is</c><00:03:41.120><c> short</c><00:03:41.360><c> for</c><00:03:41.599><c> virtual</c><00:03:42.000><c> environment</c>

00:03:42.869 --> 00:03:42.879 align:start position:0%
which is short for virtual environment
 

00:03:42.879 --> 00:03:44.390 align:start position:0%
which is short for virtual environment
we'll<00:03:43.120><c> talk</c><00:03:43.280><c> about</c><00:03:43.519><c> virtual</c><00:03:43.840><c> environments</c><00:03:44.319><c> in</c>

00:03:44.390 --> 00:03:44.400 align:start position:0%
we'll talk about virtual environments in
 

00:03:44.400 --> 00:03:46.390 align:start position:0%
we'll talk about virtual environments in
the<00:03:44.560><c> future</c><00:03:45.360><c> so</c><00:03:45.519><c> currently</c><00:03:45.840><c> we</c><00:03:45.920><c> don't</c><00:03:46.159><c> have</c>

00:03:46.390 --> 00:03:46.400 align:start position:0%
the future so currently we don't have
 

00:03:46.400 --> 00:03:49.110 align:start position:0%
the future so currently we don't have
any<00:03:46.640><c> python</c><00:03:47.120><c> files</c><00:03:47.680><c> inside</c><00:03:48.000><c> this</c><00:03:48.239><c> project</c><00:03:48.959><c> a</c>

00:03:49.110 --> 00:03:49.120 align:start position:0%
any python files inside this project a
 

00:03:49.120 --> 00:03:51.750 align:start position:0%
any python files inside this project a
real<00:03:49.360><c> application</c><00:03:49.920><c> can</c><00:03:50.080><c> consist</c><00:03:50.799><c> of</c><00:03:51.040><c> tens</c><00:03:51.360><c> or</c>

00:03:51.750 --> 00:03:51.760 align:start position:0%
real application can consist of tens or
 

00:03:51.760 --> 00:03:53.429 align:start position:0%
real application can consist of tens or
hundreds<00:03:52.080><c> or</c><00:03:52.239><c> even</c><00:03:52.560><c> thousands</c><00:03:52.959><c> of</c><00:03:53.040><c> python</c>

00:03:53.429 --> 00:03:53.439 align:start position:0%
hundreds or even thousands of python
 

00:03:53.439 --> 00:03:55.830 align:start position:0%
hundreds or even thousands of python
files<00:03:54.239><c> so</c><00:03:54.959><c> let's</c><00:03:55.200><c> right</c><00:03:55.439><c> click</c><00:03:55.599><c> on</c><00:03:55.760><c> the</c>

00:03:55.830 --> 00:03:55.840 align:start position:0%
files so let's right click on the
 

00:03:55.840 --> 00:03:57.589 align:start position:0%
files so let's right click on the
project<00:03:56.239><c> name</c>

00:03:57.589 --> 00:03:57.599 align:start position:0%
project name
 

00:03:57.599 --> 00:04:00.550 align:start position:0%
project name
and<00:03:57.840><c> go</c><00:03:58.000><c> to</c><00:03:58.159><c> new</c><00:03:58.879><c> python</c><00:03:59.360><c> file</c><00:04:00.239><c> we're</c><00:04:00.400><c> going</c><00:04:00.480><c> to</c>

00:04:00.550 --> 00:04:00.560 align:start position:0%
and go to new python file we're going to
 

00:04:00.560 --> 00:04:03.990 align:start position:0%
and go to new python file we're going to
call<00:04:00.799><c> this</c><00:04:00.959><c> file</c><00:04:01.760><c> up</c>

00:04:03.990 --> 00:04:04.000 align:start position:0%
 
 

00:04:04.000 --> 00:04:05.670 align:start position:0%
 
now<00:04:04.159><c> we</c><00:04:04.319><c> can</c><00:04:04.480><c> collapse</c><00:04:04.799><c> this</c><00:04:04.959><c> project</c><00:04:05.360><c> window</c>

00:04:05.670 --> 00:04:05.680 align:start position:0%
now we can collapse this project window
 

00:04:05.680 --> 00:04:07.990 align:start position:0%
now we can collapse this project window
by<00:04:05.920><c> clicking</c><00:04:06.239><c> on</c><00:04:06.319><c> this</c><00:04:06.560><c> icon</c><00:04:07.439><c> so</c><00:04:07.599><c> now</c><00:04:07.760><c> we</c><00:04:07.840><c> have</c>

00:04:07.990 --> 00:04:08.000 align:start position:0%
by clicking on this icon so now we have
 

00:04:08.000 --> 00:04:10.390 align:start position:0%
by clicking on this icon so now we have
more<00:04:08.239><c> space</c><00:04:09.040><c> let's</c><00:04:09.280><c> write</c><00:04:09.519><c> our</c><00:04:09.680><c> first</c><00:04:10.000><c> python</c>

00:04:10.390 --> 00:04:10.400 align:start position:0%
more space let's write our first python
 

00:04:10.400 --> 00:04:12.830 align:start position:0%
more space let's write our first python
code<00:04:11.120><c> we're</c><00:04:11.280><c> going</c><00:04:11.360><c> to</c><00:04:11.439><c> write</c><00:04:11.680><c> print</c><00:04:12.319><c> all</c><00:04:12.640><c> in</c>

00:04:12.830 --> 00:04:12.840 align:start position:0%
code we're going to write print all in
 

00:04:12.840 --> 00:04:15.750 align:start position:0%
code we're going to write print all in
lowercase<00:04:14.080><c> then</c><00:04:14.319><c> add</c><00:04:14.560><c> parentheses</c>

00:04:15.750 --> 00:04:15.760 align:start position:0%
lowercase then add parentheses
 

00:04:15.760 --> 00:04:18.789 align:start position:0%
lowercase then add parentheses
then<00:04:16.000><c> add</c><00:04:16.239><c> quotes</c><00:04:16.959><c> either</c><00:04:17.280><c> single</c><00:04:17.600><c> quotes</c><00:04:18.000><c> or</c>

00:04:18.789 --> 00:04:18.799 align:start position:0%
then add quotes either single quotes or
 

00:04:18.799 --> 00:04:20.150 align:start position:0%
then add quotes either single quotes or
double<00:04:19.120><c> quotes</c>

00:04:20.150 --> 00:04:20.160 align:start position:0%
double quotes
 

00:04:20.160 --> 00:04:21.430 align:start position:0%
double quotes
and<00:04:20.400><c> inside</c><00:04:20.720><c> this</c><00:04:20.880><c> code</c><00:04:21.120><c> we're</c><00:04:21.280><c> going</c><00:04:21.359><c> to</c>

00:04:21.430 --> 00:04:21.440 align:start position:0%
and inside this code we're going to
 

00:04:21.440 --> 00:04:23.510 align:start position:0%
and inside this code we're going to
write<00:04:22.000><c> hello</c><00:04:22.560><c> world</c>

00:04:23.510 --> 00:04:23.520 align:start position:0%
write hello world
 

00:04:23.520 --> 00:04:25.909 align:start position:0%
write hello world
so<00:04:23.680><c> this</c><00:04:23.840><c> is</c><00:04:23.919><c> what</c><00:04:24.080><c> we</c><00:04:24.320><c> call</c><00:04:24.800><c> a</c><00:04:25.040><c> string</c><00:04:25.759><c> a</c>

00:04:25.909 --> 00:04:25.919 align:start position:0%
so this is what we call a string a
 

00:04:25.919 --> 00:04:28.310 align:start position:0%
so this is what we call a string a
string<00:04:26.240><c> means</c><00:04:26.560><c> a</c><00:04:26.720><c> string</c><00:04:27.120><c> or</c><00:04:27.600><c> sequence</c><00:04:28.080><c> of</c>

00:04:28.310 --> 00:04:28.320 align:start position:0%
string means a string or sequence of
 

00:04:28.320 --> 00:04:30.629 align:start position:0%
string means a string or sequence of
characters<00:04:29.199><c> in</c><00:04:29.360><c> simple</c><00:04:29.680><c> words</c><00:04:30.080><c> that</c><00:04:30.320><c> means</c>

00:04:30.629 --> 00:04:30.639 align:start position:0%
characters in simple words that means
 

00:04:30.639 --> 00:04:33.590 align:start position:0%
characters in simple words that means
textual<00:04:31.199><c> data</c><00:04:32.000><c> so</c><00:04:32.240><c> in</c><00:04:32.400><c> python</c><00:04:32.880><c> and</c><00:04:33.199><c> in</c><00:04:33.360><c> many</c>

00:04:33.590 --> 00:04:33.600 align:start position:0%
textual data so in python and in many
 

00:04:33.600 --> 00:04:35.510 align:start position:0%
textual data so in python and in many
other<00:04:33.840><c> programming</c><00:04:34.240><c> languages</c><00:04:35.040><c> whenever</c>

00:04:35.510 --> 00:04:35.520 align:start position:0%
other programming languages whenever
 

00:04:35.520 --> 00:04:37.510 align:start position:0%
other programming languages whenever
we're<00:04:35.680><c> dealing</c><00:04:36.000><c> with</c><00:04:36.240><c> textual</c><00:04:36.720><c> data</c><00:04:37.360><c> we</c>

00:04:37.510 --> 00:04:37.520 align:start position:0%
we're dealing with textual data we
 

00:04:37.520 --> 00:04:39.510 align:start position:0%
we're dealing with textual data we
should<00:04:37.759><c> always</c><00:04:38.160><c> surround</c><00:04:38.639><c> our</c><00:04:38.800><c> text</c><00:04:39.280><c> with</c>

00:04:39.510 --> 00:04:39.520 align:start position:0%
should always surround our text with
 

00:04:39.520 --> 00:04:40.710 align:start position:0%
should always surround our text with
quotes

00:04:40.710 --> 00:04:40.720 align:start position:0%
quotes
 

00:04:40.720 --> 00:04:42.870 align:start position:0%
quotes
in<00:04:40.880><c> python</c><00:04:41.280><c> we</c><00:04:41.360><c> can</c><00:04:41.520><c> use</c><00:04:41.680><c> single</c><00:04:42.080><c> or</c><00:04:42.560><c> double</c>

00:04:42.870 --> 00:04:42.880 align:start position:0%
in python we can use single or double
 

00:04:42.880 --> 00:04:43.909 align:start position:0%
in python we can use single or double
quotes

00:04:43.909 --> 00:04:43.919 align:start position:0%
quotes
 

00:04:43.919 --> 00:04:45.670 align:start position:0%
quotes
now<00:04:44.080><c> this</c><00:04:44.320><c> print</c><00:04:44.639><c> you</c><00:04:44.720><c> see</c><00:04:44.880><c> here</c><00:04:45.360><c> is</c><00:04:45.520><c> a</c>

00:04:45.670 --> 00:04:45.680 align:start position:0%
now this print you see here is a
 

00:04:45.680 --> 00:04:48.070 align:start position:0%
now this print you see here is a
function<00:04:46.400><c> built</c><00:04:46.720><c> into</c><00:04:46.960><c> python</c><00:04:47.680><c> and</c><00:04:47.840><c> we</c><00:04:48.000><c> can</c>

00:04:48.070 --> 00:04:48.080 align:start position:0%
function built into python and we can
 

00:04:48.080 --> 00:04:49.749 align:start position:0%
function built into python and we can
use<00:04:48.240><c> it</c><00:04:48.400><c> to</c><00:04:48.560><c> print</c><00:04:48.800><c> a</c><00:04:48.960><c> message</c><00:04:49.440><c> on</c><00:04:49.600><c> our</c>

00:04:49.749 --> 00:04:49.759 align:start position:0%
use it to print a message on our
 

00:04:49.759 --> 00:04:52.070 align:start position:0%
use it to print a message on our
application<00:04:50.240><c> window</c><00:04:51.120><c> so</c><00:04:51.360><c> let</c><00:04:51.520><c> me</c><00:04:51.680><c> show</c><00:04:51.840><c> you</c>

00:04:52.070 --> 00:04:52.080 align:start position:0%
application window so let me show you
 

00:04:52.080 --> 00:04:54.150 align:start position:0%
application window so let me show you
how<00:04:52.240><c> to</c><00:04:52.400><c> run</c><00:04:52.560><c> this</c><00:04:52.720><c> code</c>

00:04:54.150 --> 00:04:54.160 align:start position:0%
how to run this code
 

00:04:54.160 --> 00:04:56.710 align:start position:0%
how to run this code
on<00:04:54.320><c> the</c><00:04:54.400><c> top</c><00:04:55.040><c> we</c><00:04:55.199><c> go</c><00:04:55.360><c> to</c><00:04:55.520><c> the</c><00:04:55.600><c> run</c><00:04:55.840><c> menu</c><00:04:56.639><c> and</c>

00:04:56.710 --> 00:04:56.720 align:start position:0%
on the top we go to the run menu and
 

00:04:56.720 --> 00:04:58.310 align:start position:0%
on the top we go to the run menu and
then<00:04:56.960><c> select</c><00:04:57.520><c> run</c>

00:04:58.310 --> 00:04:58.320 align:start position:0%
then select run
 

00:04:58.320 --> 00:05:00.230 align:start position:0%
then select run
note<00:04:58.560><c> that</c><00:04:58.639><c> there</c><00:04:58.800><c> is</c><00:04:58.960><c> a</c><00:04:59.120><c> shortcut</c><00:04:59.680><c> associated</c>

00:05:00.230 --> 00:05:00.240 align:start position:0%
note that there is a shortcut associated
 

00:05:00.240 --> 00:05:02.469 align:start position:0%
note that there is a shortcut associated
with<00:05:00.400><c> this</c><00:05:00.560><c> command</c><00:05:01.120><c> i</c><00:05:01.280><c> always</c><00:05:01.520><c> use</c><00:05:01.759><c> shortcuts</c>

00:05:02.469 --> 00:05:02.479 align:start position:0%
with this command i always use shortcuts
 

00:05:02.479 --> 00:05:05.749 align:start position:0%
with this command i always use shortcuts
because<00:05:02.720><c> they</c><00:05:02.960><c> increase</c><00:05:03.360><c> my</c><00:05:03.600><c> productivity</c><00:05:04.880><c> so</c>

00:05:05.749 --> 00:05:05.759 align:start position:0%
because they increase my productivity so
 

00:05:05.759 --> 00:05:07.110 align:start position:0%
because they increase my productivity so
let's<00:05:06.000><c> click</c><00:05:06.240><c> on</c><00:05:06.320><c> this</c>

00:05:07.110 --> 00:05:07.120 align:start position:0%
let's click on this
 

00:05:07.120 --> 00:05:09.110 align:start position:0%
let's click on this
now<00:05:07.680><c> select</c><00:05:08.080><c> app</c>

00:05:09.110 --> 00:05:09.120 align:start position:0%
now select app
 

00:05:09.120 --> 00:05:10.469 align:start position:0%
now select app
and<00:05:09.360><c> over</c><00:05:09.520><c> here</c>

00:05:10.469 --> 00:05:10.479 align:start position:0%
and over here
 

00:05:10.479 --> 00:05:12.150 align:start position:0%
and over here
you<00:05:10.560><c> can</c><00:05:10.720><c> see</c><00:05:10.880><c> this</c><00:05:11.039><c> little</c><00:05:11.280><c> window</c><00:05:11.919><c> this</c><00:05:12.080><c> is</c>

00:05:12.150 --> 00:05:12.160 align:start position:0%
you can see this little window this is
 

00:05:12.160 --> 00:05:14.469 align:start position:0%
you can see this little window this is
what<00:05:12.320><c> we</c><00:05:12.479><c> call</c><00:05:12.880><c> the</c><00:05:13.039><c> terminal</c><00:05:13.520><c> window</c><00:05:14.160><c> and</c><00:05:14.320><c> it</c>

00:05:14.469 --> 00:05:14.479 align:start position:0%
what we call the terminal window and it
 

00:05:14.479 --> 00:05:16.710 align:start position:0%
what we call the terminal window and it
shows<00:05:14.800><c> the</c><00:05:15.039><c> output</c><00:05:15.440><c> of</c><00:05:15.520><c> our</c><00:05:15.680><c> program</c>

00:05:16.710 --> 00:05:16.720 align:start position:0%
shows the output of our program
 

00:05:16.720 --> 00:05:18.310 align:start position:0%
shows the output of our program
so<00:05:16.880><c> here's</c><00:05:17.039><c> the</c><00:05:17.120><c> hello</c><00:05:17.360><c> world</c><00:05:17.600><c> message</c>

00:05:18.310 --> 00:05:18.320 align:start position:0%
so here's the hello world message
 

00:05:18.320 --> 00:05:20.390 align:start position:0%
so here's the hello world message
printed<00:05:18.720><c> in</c><00:05:18.800><c> the</c><00:05:18.880><c> terminal</c><00:05:19.360><c> window</c><00:05:20.080><c> now</c><00:05:20.240><c> as</c>

00:05:20.390 --> 00:05:20.400 align:start position:0%
printed in the terminal window now as
 

00:05:20.400 --> 00:05:22.230 align:start position:0%
printed in the terminal window now as
you<00:05:20.479><c> learn</c><00:05:20.720><c> more</c><00:05:20.880><c> python</c><00:05:21.520><c> you</c><00:05:21.680><c> will</c><00:05:21.840><c> learn</c><00:05:22.080><c> how</c>

00:05:22.230 --> 00:05:22.240 align:start position:0%
you learn more python you will learn how
 

00:05:22.240 --> 00:05:23.749 align:start position:0%
you learn more python you will learn how
to<00:05:22.400><c> build</c><00:05:22.720><c> applications</c><00:05:23.280><c> that</c><00:05:23.440><c> have</c><00:05:23.600><c> a</c>

00:05:23.749 --> 00:05:23.759 align:start position:0%
to build applications that have a
 

00:05:23.759 --> 00:05:25.670 align:start position:0%
to build applications that have a
graphical<00:05:24.240><c> user</c><00:05:24.560><c> interface</c><00:05:25.280><c> that's</c><00:05:25.520><c> an</c>

00:05:25.670 --> 00:05:25.680 align:start position:0%
graphical user interface that's an
 

00:05:25.680 --> 00:05:27.510 align:start position:0%
graphical user interface that's an
advanced<00:05:26.000><c> topic</c><00:05:26.479><c> so</c><00:05:26.720><c> for</c><00:05:26.880><c> now</c><00:05:27.120><c> let's</c><00:05:27.360><c> not</c>

00:05:27.510 --> 00:05:27.520 align:start position:0%
advanced topic so for now let's not
 

00:05:27.520 --> 00:05:34.629 align:start position:0%
advanced topic so for now let's not
worry<00:05:27.759><c> about</c><00:05:28.000><c> it</c>

00:05:34.629 --> 00:05:34.639 align:start position:0%
 
 

00:05:34.639 --> 00:05:36.629 align:start position:0%
 
alright<00:05:34.880><c> now</c><00:05:35.039><c> let's</c><00:05:35.199><c> talk</c><00:05:35.440><c> about</c><00:05:35.759><c> variables</c>

00:05:36.629 --> 00:05:36.639 align:start position:0%
alright now let's talk about variables
 

00:05:36.639 --> 00:05:38.950 align:start position:0%
alright now let's talk about variables
we<00:05:36.800><c> use</c><00:05:37.039><c> variables</c><00:05:37.680><c> to</c><00:05:37.919><c> temporarily</c><00:05:38.639><c> store</c>

00:05:38.950 --> 00:05:38.960 align:start position:0%
we use variables to temporarily store
 

00:05:38.960 --> 00:05:41.430 align:start position:0%
we use variables to temporarily store
data<00:05:39.360><c> in</c><00:05:39.520><c> a</c><00:05:39.600><c> computer's</c><00:05:40.160><c> memory</c><00:05:40.960><c> for</c><00:05:41.120><c> example</c>

00:05:41.430 --> 00:05:41.440 align:start position:0%
data in a computer's memory for example
 

00:05:41.440 --> 00:05:43.830 align:start position:0%
data in a computer's memory for example
we<00:05:41.600><c> can</c><00:05:41.759><c> store</c><00:05:42.240><c> the</c><00:05:42.479><c> price</c><00:05:42.800><c> of</c><00:05:42.960><c> a</c><00:05:43.039><c> product</c><00:05:43.680><c> or</c>

00:05:43.830 --> 00:05:43.840 align:start position:0%
we can store the price of a product or
 

00:05:43.840 --> 00:05:46.230 align:start position:0%
we can store the price of a product or
someone's<00:05:44.320><c> name</c><00:05:44.800><c> their</c><00:05:45.120><c> email</c><00:05:45.520><c> their</c><00:05:45.840><c> age</c><00:05:46.080><c> and</c>

00:05:46.230 --> 00:05:46.240 align:start position:0%
someone's name their email their age and
 

00:05:46.240 --> 00:05:48.550 align:start position:0%
someone's name their email their age and
so<00:05:46.400><c> on</c><00:05:46.720><c> let</c><00:05:46.880><c> me</c><00:05:47.039><c> show</c><00:05:47.199><c> you</c><00:05:47.759><c> so</c>

00:05:48.550 --> 00:05:48.560 align:start position:0%
so on let me show you so
 

00:05:48.560 --> 00:05:50.870 align:start position:0%
so on let me show you so
to<00:05:48.720><c> declare</c><00:05:49.120><c> a</c><00:05:49.199><c> variable</c><00:05:49.840><c> we</c><00:05:50.080><c> start</c><00:05:50.240><c> by</c><00:05:50.479><c> typing</c>

00:05:50.870 --> 00:05:50.880 align:start position:0%
to declare a variable we start by typing
 

00:05:50.880 --> 00:05:53.990 align:start position:0%
to declare a variable we start by typing
a<00:05:51.039><c> name</c><00:05:51.280><c> for</c><00:05:51.440><c> that</c><00:05:51.600><c> variable</c><00:05:52.320><c> let's</c><00:05:52.479><c> say</c><00:05:53.120><c> age</c>

00:05:53.990 --> 00:05:54.000 align:start position:0%
a name for that variable let's say age
 

00:05:54.000 --> 00:05:56.309 align:start position:0%
a name for that variable let's say age
then<00:05:54.240><c> we</c><00:05:54.400><c> add</c><00:05:54.880><c> an</c><00:05:55.039><c> equal</c><00:05:55.360><c> sign</c>

00:05:56.309 --> 00:05:56.319 align:start position:0%
then we add an equal sign
 

00:05:56.319 --> 00:05:59.189 align:start position:0%
then we add an equal sign
and<00:05:56.400><c> then</c><00:05:56.639><c> we</c><00:05:56.800><c> type</c><00:05:57.120><c> a</c><00:05:57.280><c> value</c><00:05:57.759><c> let's</c><00:05:58.000><c> say</c><00:05:58.240><c> 20.</c>

00:05:59.189 --> 00:05:59.199 align:start position:0%
and then we type a value let's say 20.
 

00:05:59.199 --> 00:06:01.350 align:start position:0%
and then we type a value let's say 20.
so<00:05:59.360><c> with</c><00:05:59.520><c> this</c><00:05:59.680><c> we're</c><00:05:59.919><c> storing</c><00:06:00.160><c> the</c><00:06:00.319><c> number</c><00:06:00.720><c> 20</c>

00:06:01.350 --> 00:06:01.360 align:start position:0%
so with this we're storing the number 20
 

00:06:01.360 --> 00:06:03.510 align:start position:0%
so with this we're storing the number 20
somewhere<00:06:01.759><c> in</c><00:06:01.919><c> our</c><00:06:02.000><c> computer's</c><00:06:02.560><c> memory</c><00:06:03.360><c> and</c>

00:06:03.510 --> 00:06:03.520 align:start position:0%
somewhere in our computer's memory and
 

00:06:03.520 --> 00:06:05.830 align:start position:0%
somewhere in our computer's memory and
we're<00:06:03.759><c> attaching</c><00:06:04.160><c> this</c><00:06:04.479><c> age</c><00:06:04.880><c> as</c><00:06:05.120><c> a</c><00:06:05.280><c> label</c><00:06:05.680><c> for</c>

00:06:05.830 --> 00:06:05.840 align:start position:0%
we're attaching this age as a label for
 

00:06:05.840 --> 00:06:08.230 align:start position:0%
we're attaching this age as a label for
that<00:06:06.080><c> memory</c><00:06:06.479><c> location</c><00:06:07.360><c> so</c><00:06:07.520><c> now</c><00:06:07.759><c> we</c><00:06:07.840><c> can</c><00:06:08.080><c> read</c>

00:06:08.230 --> 00:06:08.240 align:start position:0%
that memory location so now we can read
 

00:06:08.240 --> 00:06:10.469 align:start position:0%
that memory location so now we can read
the<00:06:08.479><c> value</c><00:06:08.800><c> at</c><00:06:08.880><c> this</c><00:06:09.039><c> memory</c><00:06:09.440><c> location</c><00:06:10.319><c> and</c>

00:06:10.469 --> 00:06:10.479 align:start position:0%
the value at this memory location and
 

00:06:10.479 --> 00:06:13.110 align:start position:0%
the value at this memory location and
print<00:06:10.800><c> it</c><00:06:10.960><c> on</c><00:06:11.039><c> the</c><00:06:11.199><c> terminal</c><00:06:12.160><c> so</c><00:06:12.639><c> instead</c><00:06:13.039><c> of</c>

00:06:13.110 --> 00:06:13.120 align:start position:0%
print it on the terminal so instead of
 

00:06:13.120 --> 00:06:15.029 align:start position:0%
print it on the terminal so instead of
printing<00:06:13.440><c> hello</c><00:06:13.759><c> world</c><00:06:14.319><c> we</c><00:06:14.479><c> want</c><00:06:14.639><c> to</c><00:06:14.720><c> print</c>

00:06:15.029 --> 00:06:15.039 align:start position:0%
printing hello world we want to print
 

00:06:15.039 --> 00:06:17.510 align:start position:0%
printing hello world we want to print
the<00:06:15.280><c> value</c><00:06:15.759><c> of</c><00:06:15.840><c> the</c><00:06:16.160><c> age</c><00:06:16.479><c> variable</c>

00:06:17.510 --> 00:06:17.520 align:start position:0%
the value of the age variable
 

00:06:17.520 --> 00:06:19.670 align:start position:0%
the value of the age variable
so<00:06:17.759><c> i'm</c><00:06:17.919><c> going</c><00:06:18.000><c> to</c><00:06:18.080><c> delete</c><00:06:18.880><c> what</c><00:06:19.039><c> we</c><00:06:19.199><c> have</c>

00:06:19.670 --> 00:06:19.680 align:start position:0%
so i'm going to delete what we have
 

00:06:19.680 --> 00:06:21.830 align:start position:0%
so i'm going to delete what we have
inside<00:06:20.080><c> parenthesis</c>

00:06:21.830 --> 00:06:21.840 align:start position:0%
inside parenthesis
 

00:06:21.840 --> 00:06:25.029 align:start position:0%
inside parenthesis
and<00:06:22.000><c> type</c><00:06:22.560><c> age</c><00:06:23.360><c> note</c><00:06:23.600><c> that</c><00:06:23.759><c> i'm</c><00:06:23.919><c> not</c><00:06:24.240><c> adding</c>

00:06:25.029 --> 00:06:25.039 align:start position:0%
and type age note that i'm not adding
 

00:06:25.039 --> 00:06:27.270 align:start position:0%
and type age note that i'm not adding
quotes<00:06:25.919><c> because</c><00:06:26.160><c> if</c><00:06:26.319><c> i</c><00:06:26.400><c> run</c><00:06:26.639><c> this</c><00:06:26.800><c> program</c>

00:06:27.270 --> 00:06:27.280 align:start position:0%
quotes because if i run this program
 

00:06:27.280 --> 00:06:29.749 align:start position:0%
quotes because if i run this program
we'll<00:06:27.520><c> see</c><00:06:27.680><c> the</c><00:06:27.840><c> text</c><00:06:28.400><c> h</c><00:06:28.720><c> on</c><00:06:28.800><c> the</c><00:06:28.960><c> terminal</c><00:06:29.600><c> we</c>

00:06:29.749 --> 00:06:29.759 align:start position:0%
we'll see the text h on the terminal we
 

00:06:29.759 --> 00:06:31.830 align:start position:0%
we'll see the text h on the terminal we
don't<00:06:29.919><c> want</c><00:06:30.080><c> that</c><00:06:30.639><c> we</c><00:06:30.800><c> want</c><00:06:31.039><c> the</c><00:06:31.199><c> value</c><00:06:31.520><c> of</c><00:06:31.600><c> the</c>

00:06:31.830 --> 00:06:31.840 align:start position:0%
don't want that we want the value of the
 

00:06:31.840 --> 00:06:35.749 align:start position:0%
don't want that we want the value of the
age<00:06:32.080><c> variable</c><00:06:32.880><c> so</c><00:06:34.000><c> let's</c><00:06:34.240><c> remove</c><00:06:34.560><c> the</c><00:06:34.639><c> quote</c>

00:06:35.749 --> 00:06:35.759 align:start position:0%
age variable so let's remove the quote
 

00:06:35.759 --> 00:06:36.629 align:start position:0%
age variable so let's remove the quote
and

00:06:36.629 --> 00:06:36.639 align:start position:0%
and
 

00:06:36.639 --> 00:06:38.710 align:start position:0%
and
print<00:06:36.960><c> the</c><00:06:37.120><c> value</c><00:06:37.360><c> of</c><00:06:37.440><c> the</c><00:06:37.600><c> age</c><00:06:37.759><c> variable</c>

00:06:38.710 --> 00:06:38.720 align:start position:0%
print the value of the age variable
 

00:06:38.720 --> 00:06:41.029 align:start position:0%
print the value of the age variable
now<00:06:38.880><c> here</c><00:06:39.039><c> on</c><00:06:39.120><c> the</c><00:06:39.199><c> toolbar</c><00:06:40.160><c> you</c><00:06:40.240><c> can</c><00:06:40.479><c> click</c><00:06:40.880><c> on</c>

00:06:41.029 --> 00:06:41.039 align:start position:0%
now here on the toolbar you can click on
 

00:06:41.039 --> 00:06:43.430 align:start position:0%
now here on the toolbar you can click on
this<00:06:41.199><c> play</c><00:06:41.520><c> icon</c><00:06:41.919><c> to</c><00:06:42.080><c> run</c><00:06:42.240><c> your</c><00:06:42.479><c> program</c><00:06:43.199><c> or</c>

00:06:43.430 --> 00:06:43.440 align:start position:0%
this play icon to run your program or
 

00:06:43.440 --> 00:06:44.950 align:start position:0%
this play icon to run your program or
you<00:06:43.520><c> can</c><00:06:43.680><c> use</c><00:06:43.840><c> the</c><00:06:44.000><c> shortcut</c><00:06:44.479><c> that</c><00:06:44.639><c> i</c><00:06:44.720><c> showed</c>

00:06:44.950 --> 00:06:44.960 align:start position:0%
you can use the shortcut that i showed
 

00:06:44.960 --> 00:06:47.749 align:start position:0%
you can use the shortcut that i showed
you<00:06:45.120><c> in</c><00:06:45.199><c> the</c><00:06:45.280><c> last</c><00:06:45.600><c> video</c><00:06:46.400><c> so</c><00:06:47.039><c> the</c><00:06:47.199><c> shortcut</c><00:06:47.680><c> is</c>

00:06:47.749 --> 00:06:47.759 align:start position:0%
you in the last video so the shortcut is
 

00:06:47.759 --> 00:06:51.270 align:start position:0%
you in the last video so the shortcut is
over<00:06:48.000><c> here</c><00:06:48.639><c> on</c><00:06:48.800><c> a</c><00:06:48.880><c> mac</c><00:06:49.360><c> that's</c><00:06:49.680><c> ctrl</c><00:06:50.560><c> shift</c><00:06:51.120><c> and</c>

00:06:51.270 --> 00:06:51.280 align:start position:0%
over here on a mac that's ctrl shift and
 

00:06:51.280 --> 00:06:52.150 align:start position:0%
over here on a mac that's ctrl shift and
r

00:06:52.150 --> 00:06:52.160 align:start position:0%
r
 

00:06:52.160 --> 00:06:53.830 align:start position:0%
r
so

00:06:53.830 --> 00:06:53.840 align:start position:0%
so
 

00:06:53.840 --> 00:06:54.950 align:start position:0%
so
there<00:06:54.080><c> you</c><00:06:54.160><c> go</c>

00:06:54.950 --> 00:06:54.960 align:start position:0%
there you go
 

00:06:54.960 --> 00:06:56.790 align:start position:0%
there you go
now<00:06:55.199><c> you</c><00:06:55.280><c> can</c><00:06:55.360><c> see</c><00:06:55.599><c> the</c><00:06:55.840><c> value</c><00:06:56.240><c> of</c><00:06:56.400><c> the</c><00:06:56.560><c> age</c>

00:06:56.790 --> 00:06:56.800 align:start position:0%
now you can see the value of the age
 

00:06:56.800 --> 00:06:58.150 align:start position:0%
now you can see the value of the age
variable

00:06:58.150 --> 00:06:58.160 align:start position:0%
variable
 

00:06:58.160 --> 00:06:59.909 align:start position:0%
variable
now<00:06:58.319><c> we</c><00:06:58.400><c> can</c><00:06:58.639><c> also</c><00:06:58.960><c> change</c><00:06:59.280><c> the</c><00:06:59.440><c> value</c><00:06:59.680><c> of</c><00:06:59.759><c> a</c>

00:06:59.909 --> 00:06:59.919 align:start position:0%
now we can also change the value of a
 

00:06:59.919 --> 00:07:02.790 align:start position:0%
now we can also change the value of a
variable<00:07:00.560><c> for</c><00:07:00.720><c> example</c><00:07:01.440><c> on</c><00:07:01.599><c> line</c><00:07:01.919><c> 2</c>

00:07:02.790 --> 00:07:02.800 align:start position:0%
variable for example on line 2
 

00:07:02.800 --> 00:07:05.350 align:start position:0%
variable for example on line 2
we<00:07:02.960><c> can</c><00:07:03.120><c> set</c><00:07:03.520><c> 8</c><00:07:04.080><c> to</c><00:07:04.319><c> 30.</c>

00:07:05.350 --> 00:07:05.360 align:start position:0%
we can set 8 to 30.
 

00:07:05.360 --> 00:07:07.189 align:start position:0%
we can set 8 to 30.
now<00:07:05.599><c> when</c><00:07:05.759><c> we</c><00:07:05.919><c> run</c><00:07:06.080><c> our</c><00:07:06.240><c> program</c>

00:07:07.189 --> 00:07:07.199 align:start position:0%
now when we run our program
 

00:07:07.199 --> 00:07:10.070 align:start position:0%
now when we run our program
we<00:07:07.360><c> see</c><00:07:07.599><c> 30.</c><00:07:08.400><c> so</c><00:07:08.560><c> as</c><00:07:08.720><c> you</c><00:07:08.800><c> can</c><00:07:08.960><c> see</c><00:07:09.360><c> our</c><00:07:09.680><c> program</c>

00:07:10.070 --> 00:07:10.080 align:start position:0%
we see 30. so as you can see our program
 

00:07:10.080 --> 00:07:12.870 align:start position:0%
we see 30. so as you can see our program
gets<00:07:10.400><c> executed</c><00:07:10.960><c> from</c><00:07:11.280><c> top</c><00:07:11.520><c> to</c><00:07:11.759><c> bottom</c>

00:07:12.870 --> 00:07:12.880 align:start position:0%
gets executed from top to bottom
 

00:07:12.880 --> 00:07:14.950 align:start position:0%
gets executed from top to bottom
so<00:07:13.039><c> this</c><00:07:13.199><c> is</c><00:07:13.360><c> how</c><00:07:13.520><c> we</c><00:07:13.599><c> can</c><00:07:13.759><c> declare</c><00:07:14.319><c> and</c><00:07:14.479><c> use</c><00:07:14.800><c> a</c>

00:07:14.950 --> 00:07:14.960 align:start position:0%
so this is how we can declare and use a
 

00:07:14.960 --> 00:07:16.870 align:start position:0%
so this is how we can declare and use a
variable<00:07:15.759><c> now</c><00:07:16.000><c> let's</c><00:07:16.160><c> look</c><00:07:16.319><c> at</c><00:07:16.400><c> a</c><00:07:16.479><c> few</c><00:07:16.639><c> more</c>

00:07:16.870 --> 00:07:16.880 align:start position:0%
variable now let's look at a few more
 

00:07:16.880 --> 00:07:17.909 align:start position:0%
variable now let's look at a few more
examples

00:07:17.909 --> 00:07:17.919 align:start position:0%
examples
 

00:07:17.919 --> 00:07:19.510 align:start position:0%
examples
so<00:07:18.240><c> i'm</c><00:07:18.400><c> going</c><00:07:18.479><c> to</c><00:07:18.560><c> declare</c>

00:07:19.510 --> 00:07:19.520 align:start position:0%
so i'm going to declare
 

00:07:19.520 --> 00:07:21.589 align:start position:0%
so i'm going to declare
another<00:07:19.840><c> variable</c><00:07:20.319><c> called</c><00:07:20.720><c> price</c>

00:07:21.589 --> 00:07:21.599 align:start position:0%
another variable called price
 

00:07:21.599 --> 00:07:24.950 align:start position:0%
another variable called price
and<00:07:21.759><c> set</c><00:07:21.919><c> it</c><00:07:22.000><c> to</c><00:07:22.240><c> 19.95</c>

00:07:24.950 --> 00:07:24.960 align:start position:0%
and set it to 19.95
 

00:07:24.960 --> 00:07:26.790 align:start position:0%
and set it to 19.95
so<00:07:25.120><c> in</c><00:07:25.280><c> python</c><00:07:25.680><c> we</c><00:07:25.759><c> can</c><00:07:25.919><c> use</c><00:07:26.160><c> numbers</c><00:07:26.560><c> with</c><00:07:26.720><c> a</c>

00:07:26.790 --> 00:07:26.800 align:start position:0%
so in python we can use numbers with a
 

00:07:26.800 --> 00:07:28.629 align:start position:0%
so in python we can use numbers with a
decimal<00:07:27.280><c> point</c><00:07:27.840><c> or</c>

00:07:28.629 --> 00:07:28.639 align:start position:0%
decimal point or
 

00:07:28.639 --> 00:07:31.189 align:start position:0%
decimal point or
whole<00:07:28.880><c> numbers</c><00:07:30.080><c> we</c><00:07:30.160><c> can</c><00:07:30.400><c> also</c><00:07:30.560><c> declare</c><00:07:31.039><c> a</c>

00:07:31.189 --> 00:07:31.199 align:start position:0%
whole numbers we can also declare a
 

00:07:31.199 --> 00:07:35.110 align:start position:0%
whole numbers we can also declare a
variable<00:07:32.160><c> and</c><00:07:32.560><c> assign</c><00:07:32.960><c> it</c><00:07:33.120><c> a</c><00:07:33.280><c> string</c><00:07:33.599><c> value</c><00:07:34.319><c> so</c>

00:07:35.110 --> 00:07:35.120 align:start position:0%
variable and assign it a string value so
 

00:07:35.120 --> 00:07:38.550 align:start position:0%
variable and assign it a string value so
let's<00:07:35.280><c> say</c><00:07:36.000><c> first</c><00:07:36.720><c> underline</c><00:07:37.599><c> name</c><00:07:38.240><c> so</c><00:07:38.400><c> if</c><00:07:38.479><c> you</c>

00:07:38.550 --> 00:07:38.560 align:start position:0%
let's say first underline name so if you
 

00:07:38.560 --> 00:07:40.469 align:start position:0%
let's say first underline name so if you
want<00:07:38.639><c> to</c><00:07:38.720><c> use</c><00:07:39.039><c> multiple</c><00:07:39.520><c> words</c><00:07:40.000><c> in</c><00:07:40.160><c> the</c><00:07:40.319><c> name</c>

00:07:40.469 --> 00:07:40.479 align:start position:0%
want to use multiple words in the name
 

00:07:40.479 --> 00:07:42.629 align:start position:0%
want to use multiple words in the name
of<00:07:40.639><c> a</c><00:07:40.720><c> variable</c><00:07:41.440><c> we</c><00:07:41.599><c> should</c><00:07:41.840><c> separate</c><00:07:42.240><c> them</c>

00:07:42.629 --> 00:07:42.639 align:start position:0%
of a variable we should separate them
 

00:07:42.639 --> 00:07:45.189 align:start position:0%
of a variable we should separate them
using<00:07:42.960><c> an</c><00:07:43.199><c> underscore</c><00:07:44.160><c> this</c><00:07:44.400><c> makes</c><00:07:44.720><c> our</c><00:07:44.879><c> code</c>

00:07:45.189 --> 00:07:45.199 align:start position:0%
using an underscore this makes our code
 

00:07:45.199 --> 00:07:47.749 align:start position:0%
using an underscore this makes our code
more<00:07:45.440><c> readable</c><00:07:46.240><c> see</c><00:07:46.400><c> what</c><00:07:46.560><c> would</c><00:07:46.720><c> happen</c><00:07:47.520><c> if</c><00:07:47.680><c> i</c>

00:07:47.749 --> 00:07:47.759 align:start position:0%
more readable see what would happen if i
 

00:07:47.759 --> 00:07:49.830 align:start position:0%
more readable see what would happen if i
didn't<00:07:48.080><c> use</c><00:07:48.240><c> this</c><00:07:48.479><c> underline</c>

00:07:49.830 --> 00:07:49.840 align:start position:0%
didn't use this underline
 

00:07:49.840 --> 00:07:53.110 align:start position:0%
didn't use this underline
this<00:07:50.080><c> is</c><00:07:50.240><c> not</c><00:07:50.400><c> easily</c><00:07:50.800><c> readable</c><00:07:51.520><c> so</c><00:07:52.000><c> we</c><00:07:52.319><c> always</c>

00:07:53.110 --> 00:07:53.120 align:start position:0%
this is not easily readable so we always
 

00:07:53.120 --> 00:07:56.070 align:start position:0%
this is not easily readable so we always
separate<00:07:53.520><c> multiple</c><00:07:53.919><c> words</c><00:07:54.400><c> by</c><00:07:54.639><c> an</c><00:07:54.800><c> underscore</c>

00:07:56.070 --> 00:07:56.080 align:start position:0%
separate multiple words by an underscore
 

00:07:56.080 --> 00:07:58.390 align:start position:0%
separate multiple words by an underscore
now<00:07:56.240><c> we</c><00:07:56.400><c> set</c><00:07:56.639><c> this</c><00:07:57.039><c> to</c><00:07:57.280><c> a</c><00:07:57.440><c> string</c><00:07:58.000><c> so</c><00:07:58.160><c> we</c><00:07:58.240><c> can</c>

00:07:58.390 --> 00:07:58.400 align:start position:0%
now we set this to a string so we can
 

00:07:58.400 --> 00:08:00.150 align:start position:0%
now we set this to a string so we can
use<00:07:58.560><c> single</c><00:07:58.879><c> quotes</c><00:07:59.199><c> or</c>

00:08:00.150 --> 00:08:00.160 align:start position:0%
use single quotes or
 

00:08:00.160 --> 00:08:02.710 align:start position:0%
use single quotes or
double<00:08:00.479><c> quotes</c><00:08:01.360><c> let's</c><00:08:01.520><c> say</c><00:08:01.759><c> march</c>

00:08:02.710 --> 00:08:02.720 align:start position:0%
double quotes let's say march
 

00:08:02.720 --> 00:08:04.550 align:start position:0%
double quotes let's say march
we<00:08:02.879><c> also</c><00:08:03.120><c> have</c><00:08:03.280><c> a</c><00:08:03.360><c> special</c><00:08:03.759><c> type</c><00:08:04.000><c> of</c><00:08:04.160><c> value</c>

00:08:04.550 --> 00:08:04.560 align:start position:0%
we also have a special type of value
 

00:08:04.560 --> 00:08:07.110 align:start position:0%
we also have a special type of value
called<00:08:05.039><c> a</c><00:08:05.199><c> boolean</c><00:08:05.680><c> value</c><00:08:06.080><c> which</c><00:08:06.240><c> can</c><00:08:06.400><c> be</c><00:08:06.639><c> true</c>

00:08:07.110 --> 00:08:07.120 align:start position:0%
called a boolean value which can be true
 

00:08:07.120 --> 00:08:09.589 align:start position:0%
called a boolean value which can be true
or<00:08:07.360><c> false</c><00:08:08.000><c> that</c><00:08:08.240><c> is</c><00:08:08.319><c> like</c><00:08:08.639><c> yes</c><00:08:08.960><c> or</c><00:08:09.199><c> no</c><00:08:09.440><c> in</c>

00:08:09.589 --> 00:08:09.599 align:start position:0%
or false that is like yes or no in
 

00:08:09.599 --> 00:08:12.550 align:start position:0%
or false that is like yes or no in
english<00:08:10.319><c> let</c><00:08:10.479><c> me</c><00:08:10.639><c> show</c><00:08:10.800><c> you</c><00:08:11.360><c> so</c><00:08:12.240><c> i'm</c><00:08:12.400><c> going</c><00:08:12.479><c> to</c>

00:08:12.550 --> 00:08:12.560 align:start position:0%
english let me show you so i'm going to
 

00:08:12.560 --> 00:08:15.510 align:start position:0%
english let me show you so i'm going to
declare<00:08:13.280><c> another</c><00:08:13.599><c> variable</c><00:08:14.240><c> called</c><00:08:14.720><c> is</c>

00:08:15.510 --> 00:08:15.520 align:start position:0%
declare another variable called is
 

00:08:15.520 --> 00:08:18.469 align:start position:0%
declare another variable called is
online<00:08:16.400><c> and</c><00:08:17.120><c> set</c><00:08:17.280><c> it</c><00:08:17.440><c> to</c><00:08:17.599><c> true</c>

00:08:18.469 --> 00:08:18.479 align:start position:0%
online and set it to true
 

00:08:18.479 --> 00:08:21.029 align:start position:0%
online and set it to true
we<00:08:18.639><c> could</c><00:08:18.879><c> also</c><00:08:19.120><c> set</c><00:08:19.360><c> it</c><00:08:19.440><c> to</c><00:08:20.000><c> false</c><00:08:20.720><c> what</c><00:08:20.960><c> we</c>

00:08:21.029 --> 00:08:21.039 align:start position:0%
we could also set it to false what we
 

00:08:21.039 --> 00:08:23.830 align:start position:0%
we could also set it to false what we
have<00:08:21.280><c> here</c><00:08:21.520><c> is</c><00:08:21.680><c> called</c><00:08:22.160><c> a</c><00:08:22.400><c> boolean</c><00:08:22.879><c> value</c>

00:08:23.830 --> 00:08:23.840 align:start position:0%
have here is called a boolean value
 

00:08:23.840 --> 00:08:25.990 align:start position:0%
have here is called a boolean value
now<00:08:24.080><c> note</c><00:08:24.319><c> that</c><00:08:24.479><c> python</c><00:08:24.960><c> is</c><00:08:25.120><c> a</c><00:08:25.280><c> case</c><00:08:25.520><c> sensitive</c>

00:08:25.990 --> 00:08:26.000 align:start position:0%
now note that python is a case sensitive
 

00:08:26.000 --> 00:08:28.309 align:start position:0%
now note that python is a case sensitive
language<00:08:26.639><c> so</c><00:08:26.800><c> it's</c><00:08:27.039><c> sensitive</c><00:08:27.520><c> to</c><00:08:27.680><c> lowercase</c>

00:08:28.309 --> 00:08:28.319 align:start position:0%
language so it's sensitive to lowercase
 

00:08:28.319 --> 00:08:31.270 align:start position:0%
language so it's sensitive to lowercase
and<00:08:28.639><c> uppercase</c><00:08:29.199><c> letters</c><00:08:30.080><c> in</c><00:08:30.240><c> this</c><00:08:30.400><c> case</c><00:08:30.960><c> if</c><00:08:31.120><c> i</c>

00:08:31.270 --> 00:08:31.280 align:start position:0%
and uppercase letters in this case if i
 

00:08:31.280 --> 00:08:33.990 align:start position:0%
and uppercase letters in this case if i
use<00:08:31.520><c> a</c><00:08:31.680><c> lowercase</c><00:08:32.320><c> f</c>

00:08:33.990 --> 00:08:34.000 align:start position:0%
use a lowercase f
 

00:08:34.000 --> 00:08:35.750 align:start position:0%
use a lowercase f
we<00:08:34.080><c> can</c><00:08:34.240><c> see</c><00:08:34.399><c> an</c><00:08:34.560><c> error</c><00:08:34.719><c> over</c><00:08:34.959><c> here</c><00:08:35.519><c> because</c>

00:08:35.750 --> 00:08:35.760 align:start position:0%
we can see an error over here because
 

00:08:35.760 --> 00:08:38.070 align:start position:0%
we can see an error over here because
this<00:08:36.000><c> is</c><00:08:36.080><c> not</c><00:08:36.320><c> recognized</c><00:08:36.880><c> in</c><00:08:37.039><c> python</c>

00:08:38.070 --> 00:08:38.080 align:start position:0%
this is not recognized in python
 

00:08:38.080 --> 00:08:40.949 align:start position:0%
this is not recognized in python
so<00:08:38.640><c> false</c><00:08:38.959><c> with</c><00:08:39.200><c> a</c><00:08:39.279><c> capital</c><00:08:39.760><c> f</c><00:08:40.240><c> is</c><00:08:40.399><c> a</c><00:08:40.560><c> special</c>

00:08:40.949 --> 00:08:40.959 align:start position:0%
so false with a capital f is a special
 

00:08:40.959 --> 00:08:43.350 align:start position:0%
so false with a capital f is a special
keyword<00:08:41.440><c> in</c><00:08:41.599><c> python</c><00:08:42.240><c> that</c><00:08:42.399><c> represents</c><00:08:43.200><c> the</c>

00:08:43.350 --> 00:08:43.360 align:start position:0%
keyword in python that represents the
 

00:08:43.360 --> 00:08:45.190 align:start position:0%
keyword in python that represents the
boolean<00:08:43.839><c> false</c><00:08:44.159><c> value</c>

00:08:45.190 --> 00:08:45.200 align:start position:0%
boolean false value
 

00:08:45.200 --> 00:08:47.030 align:start position:0%
boolean false value
so<00:08:45.360><c> this</c><00:08:45.519><c> is</c><00:08:45.680><c> how</c><00:08:45.839><c> we</c><00:08:45.920><c> can</c><00:08:46.080><c> declare</c><00:08:46.560><c> and</c><00:08:46.800><c> use</c>

00:08:47.030 --> 00:08:47.040 align:start position:0%
so this is how we can declare and use
 

00:08:47.040 --> 00:08:48.790 align:start position:0%
so this is how we can declare and use
variables<00:08:47.519><c> in</c><00:08:47.680><c> python</c>

00:08:48.790 --> 00:08:48.800 align:start position:0%
variables in python
 

00:08:48.800 --> 00:08:50.310 align:start position:0%
variables in python
all<00:08:48.959><c> right</c><00:08:49.040><c> now</c><00:08:49.200><c> here's</c><00:08:49.440><c> a</c><00:08:49.519><c> little</c><00:08:49.839><c> exercise</c>

00:08:50.310 --> 00:08:50.320 align:start position:0%
all right now here's a little exercise
 

00:08:50.320 --> 00:08:51.110 align:start position:0%
all right now here's a little exercise
for<00:08:50.399><c> you</c>

00:08:51.110 --> 00:08:51.120 align:start position:0%
for you
 

00:08:51.120 --> 00:08:52.870 align:start position:0%
for you
imagine<00:08:51.519><c> we</c><00:08:51.680><c> want</c><00:08:51.760><c> to</c><00:08:51.839><c> write</c><00:08:52.080><c> a</c><00:08:52.240><c> program</c><00:08:52.640><c> for</c><00:08:52.800><c> a</c>

00:08:52.870 --> 00:08:52.880 align:start position:0%
imagine we want to write a program for a
 

00:08:52.880 --> 00:08:54.630 align:start position:0%
imagine we want to write a program for a
hospital<00:08:53.600><c> so</c><00:08:53.760><c> we're</c><00:08:53.920><c> going</c><00:08:54.000><c> to</c><00:08:54.080><c> check</c><00:08:54.320><c> in</c><00:08:54.480><c> a</c>

00:08:54.630 --> 00:08:54.640 align:start position:0%
hospital so we're going to check in a
 

00:08:54.640 --> 00:08:57.509 align:start position:0%
hospital so we're going to check in a
patient<00:08:55.200><c> named</c><00:08:55.600><c> john</c><00:08:55.920><c> smith</c><00:08:56.640><c> he's</c><00:08:56.959><c> 20</c><00:08:57.200><c> years</c>

00:08:57.509 --> 00:08:57.519 align:start position:0%
patient named john smith he's 20 years
 

00:08:57.519 --> 00:08:59.829 align:start position:0%
patient named john smith he's 20 years
old<00:08:57.839><c> and</c><00:08:58.000><c> is</c><00:08:58.160><c> a</c><00:08:58.240><c> new</c><00:08:58.480><c> patient</c><00:08:59.360><c> i</c><00:08:59.440><c> want</c><00:08:59.600><c> you</c><00:08:59.760><c> to</c>

00:08:59.829 --> 00:08:59.839 align:start position:0%
old and is a new patient i want you to
 

00:08:59.839 --> 00:09:02.070 align:start position:0%
old and is a new patient i want you to
declare<00:09:00.320><c> a</c><00:09:00.399><c> few</c><00:09:00.640><c> variables</c><00:09:01.360><c> to</c><00:09:01.600><c> store</c><00:09:01.839><c> these</c>

00:09:02.070 --> 00:09:02.080 align:start position:0%
declare a few variables to store these
 

00:09:02.080 --> 00:09:04.389 align:start position:0%
declare a few variables to store these
values<00:09:02.880><c> use</c><00:09:03.120><c> the</c><00:09:03.200><c> comment</c><00:09:03.600><c> box</c><00:09:03.839><c> below</c><00:09:04.240><c> to</c>

00:09:04.389 --> 00:09:04.399 align:start position:0%
values use the comment box below to
 

00:09:04.399 --> 00:09:12.470 align:start position:0%
values use the comment box below to
share<00:09:04.640><c> your</c><00:09:04.880><c> code</c><00:09:05.120><c> with</c><00:09:05.360><c> others</c>

00:09:12.470 --> 00:09:12.480 align:start position:0%
 
 

00:09:12.480 --> 00:09:13.829 align:start position:0%
 
in<00:09:12.560><c> this</c><00:09:12.720><c> tutorial</c><00:09:13.200><c> i'm</c><00:09:13.360><c> going</c><00:09:13.440><c> to</c><00:09:13.519><c> show</c><00:09:13.680><c> you</c>

00:09:13.829 --> 00:09:13.839 align:start position:0%
in this tutorial i'm going to show you
 

00:09:13.839 --> 00:09:16.389 align:start position:0%
in this tutorial i'm going to show you
how<00:09:14.080><c> to</c><00:09:14.160><c> receive</c><00:09:14.640><c> input</c><00:09:14.959><c> from</c><00:09:15.120><c> the</c><00:09:15.279><c> user</c><00:09:16.080><c> so</c><00:09:16.320><c> in</c>

00:09:16.389 --> 00:09:16.399 align:start position:0%
how to receive input from the user so in
 

00:09:16.399 --> 00:09:18.710 align:start position:0%
how to receive input from the user so in
python<00:09:16.800><c> we</c><00:09:16.959><c> have</c><00:09:17.440><c> another</c><00:09:17.920><c> built-in</c><00:09:18.320><c> function</c>

00:09:18.710 --> 00:09:18.720 align:start position:0%
python we have another built-in function
 

00:09:18.720 --> 00:09:21.590 align:start position:0%
python we have another built-in function
called<00:09:19.360><c> input</c><00:09:20.160><c> we</c><00:09:20.320><c> use</c><00:09:20.480><c> this</c><00:09:20.640><c> to</c><00:09:20.800><c> read</c><00:09:21.040><c> a</c><00:09:21.279><c> value</c>

00:09:21.590 --> 00:09:21.600 align:start position:0%
called input we use this to read a value
 

00:09:21.600 --> 00:09:23.750 align:start position:0%
called input we use this to read a value
from<00:09:21.760><c> the</c><00:09:21.920><c> terminal</c><00:09:22.320><c> window</c><00:09:22.720><c> let</c><00:09:22.880><c> me</c><00:09:22.959><c> show</c><00:09:23.120><c> you</c>

00:09:23.750 --> 00:09:23.760 align:start position:0%
from the terminal window let me show you
 

00:09:23.760 --> 00:09:26.070 align:start position:0%
from the terminal window let me show you
so<00:09:24.480><c> we</c><00:09:24.640><c> add</c><00:09:24.880><c> parenthesis</c>

00:09:26.070 --> 00:09:26.080 align:start position:0%
so we add parenthesis
 

00:09:26.080 --> 00:09:27.910 align:start position:0%
so we add parenthesis
then<00:09:26.240><c> we</c><00:09:26.399><c> type</c><00:09:26.640><c> in</c><00:09:26.720><c> a</c><00:09:26.800><c> string</c><00:09:27.519><c> here</c><00:09:27.760><c> we</c><00:09:27.839><c> can</c>

00:09:27.910 --> 00:09:27.920 align:start position:0%
then we type in a string here we can
 

00:09:27.920 --> 00:09:31.670 align:start position:0%
then we type in a string here we can
type<00:09:28.160><c> a</c><00:09:28.240><c> message</c><00:09:28.800><c> like</c><00:09:29.279><c> what</c><00:09:29.600><c> is</c><00:09:30.160><c> your</c><00:09:30.880><c> name</c><00:09:31.519><c> we</c>

00:09:31.670 --> 00:09:31.680 align:start position:0%
type a message like what is your name we
 

00:09:31.680 --> 00:09:34.150 align:start position:0%
type a message like what is your name we
had<00:09:31.839><c> a</c><00:09:31.920><c> question</c><00:09:32.320><c> mark</c><00:09:32.880><c> followed</c><00:09:33.200><c> by</c><00:09:33.360><c> a</c><00:09:33.440><c> space</c>

00:09:34.150 --> 00:09:34.160 align:start position:0%
had a question mark followed by a space
 

00:09:34.160 --> 00:09:35.750 align:start position:0%
had a question mark followed by a space
you<00:09:34.320><c> will</c><00:09:34.399><c> see</c><00:09:34.640><c> why</c><00:09:34.800><c> we</c><00:09:34.959><c> need</c><00:09:35.120><c> this</c><00:09:35.279><c> space</c><00:09:35.519><c> in</c><00:09:35.600><c> a</c>

00:09:35.750 --> 00:09:35.760 align:start position:0%
you will see why we need this space in a
 

00:09:35.760 --> 00:09:39.190 align:start position:0%
you will see why we need this space in a
second<00:09:36.560><c> so</c><00:09:37.200><c> let's</c><00:09:37.360><c> run</c><00:09:37.600><c> this</c><00:09:37.760><c> program</c>

00:09:39.190 --> 00:09:39.200 align:start position:0%
second so let's run this program
 

00:09:39.200 --> 00:09:41.350 align:start position:0%
second so let's run this program
we<00:09:39.360><c> get</c><00:09:39.519><c> this</c><00:09:39.680><c> message</c><00:09:40.399><c> now</c><00:09:40.720><c> we</c><00:09:40.800><c> have</c><00:09:40.959><c> to</c><00:09:41.120><c> enter</c>

00:09:41.350 --> 00:09:41.360 align:start position:0%
we get this message now we have to enter
 

00:09:41.360 --> 00:09:44.150 align:start position:0%
we get this message now we have to enter
a<00:09:41.519><c> value</c><00:09:42.240><c> so</c><00:09:42.640><c> we</c><00:09:42.800><c> click</c><00:09:43.040><c> over</c><00:09:43.279><c> here</c>

00:09:44.150 --> 00:09:44.160 align:start position:0%
a value so we click over here
 

00:09:44.160 --> 00:09:45.590 align:start position:0%
a value so we click over here
now<00:09:44.320><c> you</c><00:09:44.399><c> can</c><00:09:44.480><c> see</c><00:09:44.640><c> that</c><00:09:44.800><c> the</c><00:09:44.959><c> carrot</c><00:09:45.440><c> is</c>

00:09:45.590 --> 00:09:45.600 align:start position:0%
now you can see that the carrot is
 

00:09:45.600 --> 00:09:47.670 align:start position:0%
now you can see that the carrot is
separated<00:09:46.080><c> from</c><00:09:46.240><c> the</c><00:09:46.399><c> question</c><00:09:46.800><c> mark</c><00:09:47.279><c> this</c><00:09:47.519><c> is</c>

00:09:47.670 --> 00:09:47.680 align:start position:0%
separated from the question mark this is
 

00:09:47.680 --> 00:09:49.750 align:start position:0%
separated from the question mark this is
because<00:09:47.920><c> of</c><00:09:48.080><c> the</c><00:09:48.240><c> white</c><00:09:48.560><c> space</c><00:09:49.120><c> that</c><00:09:49.360><c> we</c><00:09:49.519><c> added</c>

00:09:49.750 --> 00:09:49.760 align:start position:0%
because of the white space that we added
 

00:09:49.760 --> 00:09:50.870 align:start position:0%
because of the white space that we added
over<00:09:50.000><c> here</c>

00:09:50.870 --> 00:09:50.880 align:start position:0%
over here
 

00:09:50.880 --> 00:09:53.190 align:start position:0%
over here
so<00:09:51.040><c> now</c><00:09:51.360><c> we</c><00:09:51.519><c> have</c><00:09:51.600><c> to</c><00:09:51.760><c> type</c><00:09:52.240><c> a</c><00:09:52.399><c> value</c><00:09:52.800><c> let's</c><00:09:52.959><c> say</c>

00:09:53.190 --> 00:09:53.200 align:start position:0%
so now we have to type a value let's say
 

00:09:53.200 --> 00:09:56.550 align:start position:0%
so now we have to type a value let's say
john<00:09:53.920><c> when</c><00:09:54.080><c> we</c><00:09:54.240><c> press</c><00:09:54.640><c> enter</c>

00:09:56.550 --> 00:09:56.560 align:start position:0%
john when we press enter
 

00:09:56.560 --> 00:09:58.790 align:start position:0%
john when we press enter
this<00:09:56.880><c> function</c><00:09:57.440><c> will</c><00:09:57.680><c> return</c><00:09:58.080><c> the</c><00:09:58.320><c> value</c><00:09:58.640><c> that</c>

00:09:58.790 --> 00:09:58.800 align:start position:0%
this function will return the value that
 

00:09:58.800 --> 00:10:01.110 align:start position:0%
this function will return the value that
we<00:09:59.040><c> entered</c><00:09:59.440><c> in</c><00:09:59.519><c> the</c><00:09:59.680><c> terminal</c><00:10:00.080><c> window</c><00:10:00.800><c> so</c><00:10:00.959><c> we</c>

00:10:01.110 --> 00:10:01.120 align:start position:0%
we entered in the terminal window so we
 

00:10:01.120 --> 00:10:02.870 align:start position:0%
we entered in the terminal window so we
can<00:10:01.200><c> get</c><00:10:01.360><c> that</c><00:10:01.600><c> value</c><00:10:02.160><c> and</c><00:10:02.320><c> store</c><00:10:02.560><c> it</c><00:10:02.720><c> in</c><00:10:02.800><c> a</c>

00:10:02.870 --> 00:10:02.880 align:start position:0%
can get that value and store it in a
 

00:10:02.880 --> 00:10:05.509 align:start position:0%
can get that value and store it in a
variable<00:10:04.000><c> so</c><00:10:04.560><c> let's</c><00:10:04.720><c> declare</c><00:10:05.040><c> a</c><00:10:05.120><c> variable</c>

00:10:05.509 --> 00:10:05.519 align:start position:0%
variable so let's declare a variable
 

00:10:05.519 --> 00:10:08.389 align:start position:0%
variable so let's declare a variable
called<00:10:05.920><c> name</c><00:10:06.640><c> and</c><00:10:07.279><c> set</c><00:10:07.519><c> it</c><00:10:07.600><c> to</c><00:10:07.760><c> the</c><00:10:07.839><c> return</c>

00:10:08.389 --> 00:10:08.399 align:start position:0%
called name and set it to the return
 

00:10:08.399 --> 00:10:10.630 align:start position:0%
called name and set it to the return
value<00:10:08.800><c> of</c><00:10:08.880><c> the</c><00:10:09.200><c> input</c><00:10:09.519><c> function</c>

00:10:10.630 --> 00:10:10.640 align:start position:0%
value of the input function
 

00:10:10.640 --> 00:10:12.470 align:start position:0%
value of the input function
now<00:10:10.880><c> we</c><00:10:10.959><c> can</c><00:10:11.120><c> print</c><00:10:11.519><c> a</c><00:10:11.600><c> greeting</c><00:10:12.000><c> message</c><00:10:12.320><c> for</c>

00:10:12.470 --> 00:10:12.480 align:start position:0%
now we can print a greeting message for
 

00:10:12.480 --> 00:10:16.550 align:start position:0%
now we can print a greeting message for
this<00:10:12.640><c> user</c><00:10:13.360><c> so</c><00:10:14.079><c> we</c><00:10:14.240><c> use</c><00:10:14.399><c> the</c><00:10:14.560><c> print</c><00:10:14.800><c> function</c>

00:10:16.550 --> 00:10:16.560 align:start position:0%
this user so we use the print function
 

00:10:16.560 --> 00:10:18.470 align:start position:0%
this user so we use the print function
we<00:10:16.720><c> say</c><00:10:17.279><c> hello</c>

00:10:18.470 --> 00:10:18.480 align:start position:0%
we say hello
 

00:10:18.480 --> 00:10:19.910 align:start position:0%
we say hello
we<00:10:18.720><c> had</c><00:10:18.800><c> a</c><00:10:18.959><c> space</c>

00:10:19.910 --> 00:10:19.920 align:start position:0%
we had a space
 

00:10:19.920 --> 00:10:22.389 align:start position:0%
we had a space
now<00:10:20.240><c> after</c><00:10:20.560><c> the</c><00:10:20.720><c> string</c><00:10:21.519><c> we</c><00:10:21.680><c> want</c><00:10:21.839><c> to</c><00:10:21.920><c> add</c><00:10:22.240><c> the</c>

00:10:22.389 --> 00:10:22.399 align:start position:0%
now after the string we want to add the
 

00:10:22.399 --> 00:10:25.110 align:start position:0%
now after the string we want to add the
value<00:10:22.720><c> of</c><00:10:22.880><c> the</c><00:10:22.959><c> name</c><00:10:23.200><c> variable</c><00:10:24.000><c> so</c><00:10:24.640><c> we</c><00:10:24.800><c> use</c><00:10:24.959><c> a</c>

00:10:25.110 --> 00:10:25.120 align:start position:0%
value of the name variable so we use a
 

00:10:25.120 --> 00:10:26.230 align:start position:0%
value of the name variable so we use a
plus<00:10:25.440><c> sign</c>

00:10:26.230 --> 00:10:26.240 align:start position:0%
plus sign
 

00:10:26.240 --> 00:10:27.750 align:start position:0%
plus sign
and<00:10:26.399><c> then</c><00:10:26.640><c> type</c><00:10:26.959><c> name</c>

00:10:27.750 --> 00:10:27.760 align:start position:0%
and then type name
 

00:10:27.760 --> 00:10:30.069 align:start position:0%
and then type name
what<00:10:27.920><c> we</c><00:10:28.079><c> are</c><00:10:28.160><c> doing</c><00:10:28.320><c> here</c><00:10:28.640><c> is</c><00:10:28.800><c> called</c><00:10:29.360><c> string</c>

00:10:30.069 --> 00:10:30.079 align:start position:0%
what we are doing here is called string
 

00:10:30.079 --> 00:10:32.389 align:start position:0%
what we are doing here is called string
concatenation<00:10:31.279><c> so</c><00:10:31.440><c> we're</c><00:10:31.760><c> combining</c><00:10:32.240><c> this</c>

00:10:32.389 --> 00:10:32.399 align:start position:0%
concatenation so we're combining this
 

00:10:32.399 --> 00:10:35.269 align:start position:0%
concatenation so we're combining this
string<00:10:32.959><c> with</c><00:10:33.760><c> another</c><00:10:34.160><c> string</c>

00:10:35.269 --> 00:10:35.279 align:start position:0%
string with another string
 

00:10:35.279 --> 00:10:36.710 align:start position:0%
string with another string
now<00:10:35.519><c> let's</c><00:10:35.680><c> run</c><00:10:35.920><c> our</c><00:10:36.000><c> program</c><00:10:36.320><c> and</c><00:10:36.399><c> see</c><00:10:36.560><c> what</c>

00:10:36.710 --> 00:10:36.720 align:start position:0%
now let's run our program and see what
 

00:10:36.720 --> 00:10:39.030 align:start position:0%
now let's run our program and see what
happens<00:10:37.440><c> so</c><00:10:37.760><c> what</c><00:10:38.000><c> is</c><00:10:38.079><c> your</c><00:10:38.240><c> name</c>

00:10:39.030 --> 00:10:39.040 align:start position:0%
happens so what is your name
 

00:10:39.040 --> 00:10:40.069 align:start position:0%
happens so what is your name
mosh

00:10:40.069 --> 00:10:40.079 align:start position:0%
mosh
 

00:10:40.079 --> 00:10:41.030 align:start position:0%
mosh
now

00:10:41.030 --> 00:10:41.040 align:start position:0%
now
 

00:10:41.040 --> 00:10:43.030 align:start position:0%
now
we<00:10:41.200><c> get</c><00:10:41.360><c> this</c><00:10:41.519><c> message</c><00:10:41.839><c> hello</c><00:10:42.160><c> mosh</c>

00:10:43.030 --> 00:10:43.040 align:start position:0%
we get this message hello mosh
 

00:10:43.040 --> 00:10:44.710 align:start position:0%
we get this message hello mosh
so<00:10:43.279><c> this</c><00:10:43.440><c> is</c><00:10:43.519><c> how</c><00:10:43.680><c> we</c><00:10:43.839><c> can</c><00:10:44.000><c> use</c><00:10:44.160><c> the</c><00:10:44.399><c> input</c>

00:10:44.710 --> 00:10:44.720 align:start position:0%
so this is how we can use the input
 

00:10:44.720 --> 00:10:52.069 align:start position:0%
so this is how we can use the input
function<00:10:45.200><c> in</c><00:10:45.360><c> python</c>

00:10:52.069 --> 00:10:52.079 align:start position:0%
 
 

00:10:52.079 --> 00:10:53.590 align:start position:0%
 
you'll<00:10:52.320><c> learn</c><00:10:52.560><c> about</c><00:10:52.720><c> the</c><00:10:52.959><c> three</c><00:10:53.200><c> types</c><00:10:53.440><c> of</c>

00:10:53.590 --> 00:10:53.600 align:start position:0%
you'll learn about the three types of
 

00:10:53.600 --> 00:10:56.389 align:start position:0%
you'll learn about the three types of
data<00:10:54.000><c> in</c><00:10:54.160><c> python</c><00:10:54.959><c> we</c><00:10:55.200><c> have</c><00:10:55.279><c> numbers</c>

00:10:56.389 --> 00:10:56.399 align:start position:0%
data in python we have numbers
 

00:10:56.399 --> 00:10:59.509 align:start position:0%
data in python we have numbers
strings<00:10:57.120><c> and</c><00:10:57.839><c> booleans</c><00:10:58.880><c> now</c><00:10:59.040><c> there</c><00:10:59.200><c> are</c><00:10:59.279><c> times</c>

00:10:59.509 --> 00:10:59.519 align:start position:0%
strings and booleans now there are times
 

00:10:59.519 --> 00:11:01.190 align:start position:0%
strings and booleans now there are times
you<00:10:59.600><c> want</c><00:10:59.760><c> to</c><00:10:59.839><c> convert</c><00:11:00.480><c> the</c><00:11:00.640><c> value</c><00:11:00.959><c> of</c><00:11:01.120><c> a</c>

00:11:01.190 --> 00:11:01.200 align:start position:0%
you want to convert the value of a
 

00:11:01.200 --> 00:11:03.509 align:start position:0%
you want to convert the value of a
variable<00:11:01.680><c> from</c><00:11:01.920><c> one</c><00:11:02.160><c> type</c><00:11:02.480><c> to</c><00:11:02.640><c> another</c><00:11:03.200><c> let</c><00:11:03.360><c> me</c>

00:11:03.509 --> 00:11:03.519 align:start position:0%
variable from one type to another let me
 

00:11:03.519 --> 00:11:05.910 align:start position:0%
variable from one type to another let me
show<00:11:03.680><c> you</c><00:11:04.240><c> so</c><00:11:04.800><c> we're</c><00:11:04.959><c> going</c><00:11:05.040><c> to</c><00:11:05.120><c> use</c><00:11:05.360><c> our</c><00:11:05.600><c> input</c>

00:11:05.910 --> 00:11:05.920 align:start position:0%
show you so we're going to use our input
 

00:11:05.920 --> 00:11:06.870 align:start position:0%
show you so we're going to use our input
function

00:11:06.870 --> 00:11:06.880 align:start position:0%
function
 

00:11:06.880 --> 00:11:10.949 align:start position:0%
function
to<00:11:07.040><c> read</c><00:11:07.760><c> the</c><00:11:08.000><c> user's</c><00:11:08.720><c> birth</c><00:11:09.040><c> year</c><00:11:09.600><c> so</c><00:11:10.240><c> enter</c>

00:11:10.949 --> 00:11:10.959 align:start position:0%
to read the user's birth year so enter
 

00:11:10.959 --> 00:11:13.590 align:start position:0%
to read the user's birth year so enter
your<00:11:11.200><c> birth</c><00:11:11.920><c> here</c>

00:11:13.590 --> 00:11:13.600 align:start position:0%
your birth here
 

00:11:13.600 --> 00:11:15.030 align:start position:0%
your birth here
now<00:11:13.760><c> this</c><00:11:14.000><c> input</c><00:11:14.320><c> function</c><00:11:14.720><c> is</c><00:11:14.800><c> going</c><00:11:14.880><c> to</c>

00:11:15.030 --> 00:11:15.040 align:start position:0%
now this input function is going to
 

00:11:15.040 --> 00:11:17.509 align:start position:0%
now this input function is going to
return<00:11:15.600><c> a</c><00:11:15.839><c> value</c><00:11:16.480><c> so</c><00:11:16.640><c> we</c><00:11:16.800><c> can</c><00:11:16.959><c> store</c><00:11:17.200><c> it</c><00:11:17.279><c> in</c><00:11:17.440><c> a</c>

00:11:17.509 --> 00:11:17.519 align:start position:0%
return a value so we can store it in a
 

00:11:17.519 --> 00:11:19.030 align:start position:0%
return a value so we can store it in a
variable<00:11:17.920><c> called</c>

00:11:19.030 --> 00:11:19.040 align:start position:0%
variable called
 

00:11:19.040 --> 00:11:21.750 align:start position:0%
variable called
birth<00:11:19.839><c> underline</c><00:11:20.640><c> year</c>

00:11:21.750 --> 00:11:21.760 align:start position:0%
birth underline year
 

00:11:21.760 --> 00:11:22.790 align:start position:0%
birth underline year
okay

00:11:22.790 --> 00:11:22.800 align:start position:0%
okay
 

00:11:22.800 --> 00:11:24.470 align:start position:0%
okay
now<00:11:22.959><c> let's</c><00:11:23.120><c> write</c><00:11:23.360><c> code</c><00:11:23.600><c> to</c><00:11:23.839><c> calculate</c><00:11:24.320><c> the</c>

00:11:24.470 --> 00:11:24.480 align:start position:0%
now let's write code to calculate the
 

00:11:24.480 --> 00:11:26.790 align:start position:0%
now let's write code to calculate the
age<00:11:24.720><c> of</c><00:11:24.800><c> this</c><00:11:24.959><c> user</c><00:11:25.839><c> so</c><00:11:26.320><c> we</c><00:11:26.480><c> write</c><00:11:26.720><c> an</c>

00:11:26.790 --> 00:11:26.800 align:start position:0%
age of this user so we write an
 

00:11:26.800 --> 00:11:28.710 align:start position:0%
age of this user so we write an
expression<00:11:27.279><c> like</c><00:11:27.440><c> this</c><00:11:28.079><c> currently</c><00:11:28.480><c> we</c><00:11:28.560><c> are</c><00:11:28.640><c> in</c>

00:11:28.710 --> 00:11:28.720 align:start position:0%
expression like this currently we are in
 

00:11:28.720 --> 00:11:32.790 align:start position:0%
expression like this currently we are in
the<00:11:28.880><c> year</c><00:11:29.360><c> 2020</c><00:11:30.320><c> so</c><00:11:30.560><c> 2020</c><00:11:31.760><c> minus</c>

00:11:32.790 --> 00:11:32.800 align:start position:0%
the year 2020 so 2020 minus
 

00:11:32.800 --> 00:11:33.990 align:start position:0%
the year 2020 so 2020 minus
birth<00:11:33.120><c> year</c>

00:11:33.990 --> 00:11:34.000 align:start position:0%
birth year
 

00:11:34.000 --> 00:11:35.670 align:start position:0%
birth year
this<00:11:34.320><c> expression</c><00:11:34.800><c> or</c><00:11:34.959><c> piece</c><00:11:35.200><c> of</c><00:11:35.360><c> code</c><00:11:35.600><c> is</c>

00:11:35.670 --> 00:11:35.680 align:start position:0%
this expression or piece of code is
 

00:11:35.680 --> 00:11:37.829 align:start position:0%
this expression or piece of code is
going<00:11:35.839><c> to</c><00:11:35.920><c> produce</c><00:11:36.320><c> a</c><00:11:36.480><c> value</c><00:11:37.200><c> so</c><00:11:37.360><c> once</c><00:11:37.600><c> again</c>

00:11:37.829 --> 00:11:37.839 align:start position:0%
going to produce a value so once again
 

00:11:37.839 --> 00:11:39.990 align:start position:0%
going to produce a value so once again
we<00:11:37.920><c> can</c><00:11:38.160><c> store</c><00:11:38.399><c> that</c><00:11:38.640><c> value</c><00:11:39.040><c> in</c><00:11:39.120><c> a</c><00:11:39.200><c> variable</c>

00:11:39.990 --> 00:11:40.000 align:start position:0%
we can store that value in a variable
 

00:11:40.000 --> 00:11:43.110 align:start position:0%
we can store that value in a variable
let's<00:11:40.240><c> call</c><00:11:40.480><c> that</c><00:11:40.640><c> variable</c><00:11:41.360><c> age</c>

00:11:43.110 --> 00:11:43.120 align:start position:0%
let's call that variable age
 

00:11:43.120 --> 00:11:44.870 align:start position:0%
let's call that variable age
now<00:11:43.279><c> let's</c><00:11:43.519><c> print</c><00:11:43.839><c> age</c>

00:11:44.870 --> 00:11:44.880 align:start position:0%
now let's print age
 

00:11:44.880 --> 00:11:46.550 align:start position:0%
now let's print age
on<00:11:44.959><c> the</c><00:11:45.120><c> terminal</c>

00:11:46.550 --> 00:11:46.560 align:start position:0%
on the terminal
 

00:11:46.560 --> 00:11:47.750 align:start position:0%
on the terminal
let's<00:11:46.720><c> run</c><00:11:46.959><c> our</c><00:11:47.040><c> program</c><00:11:47.360><c> and</c><00:11:47.519><c> see</c><00:11:47.680><c> what</c>

00:11:47.750 --> 00:11:47.760 align:start position:0%
let's run our program and see what
 

00:11:47.760 --> 00:11:49.430 align:start position:0%
let's run our program and see what
happens

00:11:49.430 --> 00:11:49.440 align:start position:0%
happens
 

00:11:49.440 --> 00:11:50.150 align:start position:0%
happens
so

00:11:50.150 --> 00:11:50.160 align:start position:0%
so
 

00:11:50.160 --> 00:11:52.710 align:start position:0%
so
my<00:11:50.399><c> birth</c><00:11:50.639><c> year</c><00:11:50.880><c> is</c><00:11:51.279><c> 1982.</c>

00:11:52.710 --> 00:11:52.720 align:start position:0%
my birth year is 1982.
 

00:11:52.720 --> 00:11:55.590 align:start position:0%
my birth year is 1982.
enter<00:11:53.440><c> oops</c><00:11:54.000><c> our</c><00:11:54.240><c> program</c><00:11:54.560><c> crashed</c><00:11:55.440><c> so</c>

00:11:55.590 --> 00:11:55.600 align:start position:0%
enter oops our program crashed so
 

00:11:55.600 --> 00:11:57.509 align:start position:0%
enter oops our program crashed so
whenever<00:11:55.920><c> you</c><00:11:56.079><c> see</c><00:11:56.240><c> this</c><00:11:56.399><c> red</c><00:11:56.639><c> message</c><00:11:57.200><c> that</c>

00:11:57.509 --> 00:11:57.519 align:start position:0%
whenever you see this red message that
 

00:11:57.519 --> 00:11:59.590 align:start position:0%
whenever you see this red message that
indicates<00:11:57.920><c> an</c><00:11:58.160><c> error</c><00:11:58.880><c> so</c><00:11:59.040><c> this</c><00:11:59.279><c> error</c>

00:11:59.590 --> 00:11:59.600 align:start position:0%
indicates an error so this error
 

00:11:59.600 --> 00:12:01.829 align:start position:0%
indicates an error so this error
occurred<00:12:00.399><c> in</c><00:12:00.480><c> this</c><00:12:00.720><c> file</c>

00:12:01.829 --> 00:12:01.839 align:start position:0%
occurred in this file
 

00:12:01.839 --> 00:12:05.350 align:start position:0%
occurred in this file
that<00:12:02.079><c> is</c><00:12:02.240><c> our</c><00:12:02.480><c> app.pi</c><00:12:03.680><c> on</c><00:12:03.920><c> line</c><00:12:04.240><c> two</c>

00:12:05.350 --> 00:12:05.360 align:start position:0%
that is our app.pi on line two
 

00:12:05.360 --> 00:12:07.190 align:start position:0%
that is our app.pi on line two
right<00:12:05.600><c> below</c><00:12:05.839><c> that</c><00:12:06.000><c> you</c><00:12:06.160><c> can</c><00:12:06.240><c> see</c><00:12:06.800><c> the</c><00:12:06.959><c> piece</c>

00:12:07.190 --> 00:12:07.200 align:start position:0%
right below that you can see the piece
 

00:12:07.200 --> 00:12:09.750 align:start position:0%
right below that you can see the piece
of<00:12:07.360><c> code</c><00:12:07.920><c> that</c><00:12:08.240><c> generated</c><00:12:08.720><c> this</c><00:12:08.959><c> error</c>

00:12:09.750 --> 00:12:09.760 align:start position:0%
of code that generated this error
 

00:12:09.760 --> 00:12:12.310 align:start position:0%
of code that generated this error
so<00:12:09.920><c> that</c><00:12:10.079><c> is</c><00:12:10.240><c> this</c><00:12:10.399><c> expression</c><00:12:10.959><c> 2020</c><00:12:11.920><c> minus</c>

00:12:12.310 --> 00:12:12.320 align:start position:0%
so that is this expression 2020 minus
 

00:12:12.320 --> 00:12:14.790 align:start position:0%
so that is this expression 2020 minus
birth<00:12:12.560><c> year</c><00:12:13.200><c> now</c><00:12:13.440><c> below</c><00:12:13.760><c> that</c><00:12:13.920><c> you</c><00:12:14.000><c> can</c><00:12:14.240><c> see</c>

00:12:14.790 --> 00:12:14.800 align:start position:0%
birth year now below that you can see
 

00:12:14.800 --> 00:12:17.030 align:start position:0%
birth year now below that you can see
the<00:12:15.040><c> type</c><00:12:15.279><c> of</c><00:12:15.360><c> error</c><00:12:15.839><c> so</c><00:12:16.000><c> here</c><00:12:16.240><c> we</c><00:12:16.399><c> have</c>

00:12:17.030 --> 00:12:17.040 align:start position:0%
the type of error so here we have
 

00:12:17.040 --> 00:12:21.430 align:start position:0%
the type of error so here we have
unsupported<00:12:17.839><c> types</c><00:12:18.720><c> for</c><00:12:19.360><c> subtraction</c>

00:12:21.430 --> 00:12:21.440 align:start position:0%
unsupported types for subtraction
 

00:12:21.440 --> 00:12:22.790 align:start position:0%
unsupported types for subtraction
we<00:12:21.600><c> have</c><00:12:22.000><c> int</c>

00:12:22.790 --> 00:12:22.800 align:start position:0%
we have int
 

00:12:22.800 --> 00:12:26.150 align:start position:0%
we have int
and<00:12:23.360><c> stir</c><00:12:24.240><c> what</c><00:12:24.480><c> are</c><00:12:24.639><c> these</c><00:12:25.200><c> well</c><00:12:25.360><c> this</c><00:12:25.680><c> end</c><00:12:26.000><c> is</c>

00:12:26.150 --> 00:12:26.160 align:start position:0%
and stir what are these well this end is
 

00:12:26.160 --> 00:12:28.550 align:start position:0%
and stir what are these well this end is
short<00:12:26.399><c> for</c><00:12:26.639><c> integer</c><00:12:27.360><c> and</c><00:12:27.440><c> that</c><00:12:27.680><c> represents</c><00:12:28.320><c> a</c>

00:12:28.550 --> 00:12:28.560 align:start position:0%
short for integer and that represents a
 

00:12:28.560 --> 00:12:31.829 align:start position:0%
short for integer and that represents a
whole<00:12:28.800><c> number</c><00:12:29.200><c> in</c><00:12:29.360><c> programming</c><00:12:30.320><c> so</c>

00:12:31.829 --> 00:12:31.839 align:start position:0%
whole number in programming so
 

00:12:31.839 --> 00:12:34.629 align:start position:0%
whole number in programming so
2020<00:12:32.720><c> is</c><00:12:32.880><c> an</c><00:12:33.040><c> example</c><00:12:33.360><c> of</c><00:12:33.440><c> an</c><00:12:33.680><c> integer</c>

00:12:34.629 --> 00:12:34.639 align:start position:0%
2020 is an example of an integer
 

00:12:34.639 --> 00:12:37.590 align:start position:0%
2020 is an example of an integer
now<00:12:34.959><c> birth</c><00:12:35.279><c> year</c><00:12:36.000><c> is</c><00:12:36.160><c> an</c><00:12:36.320><c> example</c><00:12:36.639><c> of</c><00:12:36.800><c> a</c><00:12:36.959><c> string</c>

00:12:37.590 --> 00:12:37.600 align:start position:0%
now birth year is an example of a string
 

00:12:37.600 --> 00:12:39.750 align:start position:0%
now birth year is an example of a string
because<00:12:38.000><c> whenever</c><00:12:38.399><c> we</c><00:12:38.639><c> call</c><00:12:39.120><c> the</c><00:12:39.440><c> input</c>

00:12:39.750 --> 00:12:39.760 align:start position:0%
because whenever we call the input
 

00:12:39.760 --> 00:12:41.910 align:start position:0%
because whenever we call the input
function<00:12:40.560><c> this</c><00:12:40.800><c> function</c><00:12:41.120><c> would</c><00:12:41.279><c> return</c><00:12:41.680><c> a</c>

00:12:41.910 --> 00:12:41.920 align:start position:0%
function this function would return a
 

00:12:41.920 --> 00:12:44.310 align:start position:0%
function this function would return a
value<00:12:42.240><c> as</c><00:12:42.480><c> a</c><00:12:42.639><c> string</c><00:12:43.200><c> even</c><00:12:43.440><c> if</c><00:12:43.600><c> we</c><00:12:43.839><c> enter</c><00:12:44.160><c> a</c>

00:12:44.310 --> 00:12:44.320 align:start position:0%
value as a string even if we enter a
 

00:12:44.320 --> 00:12:46.870 align:start position:0%
value as a string even if we enter a
number<00:12:44.959><c> in</c><00:12:45.120><c> other</c><00:12:45.279><c> words</c><00:12:45.920><c> when</c><00:12:46.160><c> i</c><00:12:46.320><c> entered</c>

00:12:46.870 --> 00:12:46.880 align:start position:0%
number in other words when i entered
 

00:12:46.880 --> 00:12:49.990 align:start position:0%
number in other words when i entered
1982<00:12:48.079><c> this</c><00:12:48.320><c> input</c><00:12:48.639><c> function</c><00:12:48.959><c> returned</c><00:12:49.680><c> a</c>

00:12:49.990 --> 00:12:50.000 align:start position:0%
1982 this input function returned a
 

00:12:50.000 --> 00:12:53.269 align:start position:0%
1982 this input function returned a
string<00:12:50.560><c> with</c><00:12:50.720><c> these</c><00:12:50.959><c> characters</c><00:12:52.000><c> 1982</c><00:12:53.120><c> so</c>

00:12:53.269 --> 00:12:53.279 align:start position:0%
string with these characters 1982 so
 

00:12:53.279 --> 00:12:56.150 align:start position:0%
string with these characters 1982 so
this<00:12:53.440><c> string</c><00:12:53.839><c> is</c><00:12:54.079><c> different</c><00:12:54.560><c> from</c><00:12:55.279><c> the</c><00:12:55.440><c> number</c>

00:12:56.150 --> 00:12:56.160 align:start position:0%
this string is different from the number
 

00:12:56.160 --> 00:12:59.190 align:start position:0%
this string is different from the number
1982<00:12:57.279><c> they're</c><00:12:57.519><c> completely</c><00:12:58.000><c> different</c><00:12:58.320><c> types</c>

00:12:59.190 --> 00:12:59.200 align:start position:0%
1982 they're completely different types
 

00:12:59.200 --> 00:13:00.550 align:start position:0%
1982 they're completely different types
so<00:12:59.440><c> in</c><00:12:59.519><c> this</c><00:12:59.680><c> case</c>

00:13:00.550 --> 00:13:00.560 align:start position:0%
so in this case
 

00:13:00.560 --> 00:13:02.629 align:start position:0%
so in this case
let<00:13:00.720><c> me</c><00:13:00.880><c> delete</c><00:13:01.120><c> these</c><00:13:01.360><c> lines</c>

00:13:02.629 --> 00:13:02.639 align:start position:0%
let me delete these lines
 

00:13:02.639 --> 00:13:04.629 align:start position:0%
let me delete these lines
the<00:13:02.800><c> reason</c><00:13:03.120><c> we</c><00:13:03.279><c> got</c><00:13:03.440><c> this</c><00:13:03.600><c> error</c><00:13:04.240><c> is</c><00:13:04.320><c> that</c><00:13:04.480><c> we</c>

00:13:04.629 --> 00:13:04.639 align:start position:0%
the reason we got this error is that we
 

00:13:04.639 --> 00:13:07.910 align:start position:0%
the reason we got this error is that we
try<00:13:04.880><c> to</c><00:13:05.120><c> subtract</c><00:13:05.760><c> a</c><00:13:05.920><c> string</c><00:13:06.720><c> from</c><00:13:06.959><c> an</c><00:13:07.200><c> integer</c>

00:13:07.910 --> 00:13:07.920 align:start position:0%
try to subtract a string from an integer
 

00:13:07.920 --> 00:13:10.470 align:start position:0%
try to subtract a string from an integer
so<00:13:08.079><c> our</c><00:13:08.320><c> code</c><00:13:08.880><c> looks</c><00:13:09.120><c> like</c><00:13:09.279><c> this</c>

00:13:10.470 --> 00:13:10.480 align:start position:0%
so our code looks like this
 

00:13:10.480 --> 00:13:12.069 align:start position:0%
so our code looks like this
1982

00:13:12.069 --> 00:13:12.079 align:start position:0%
1982
 

00:13:12.079 --> 00:13:14.230 align:start position:0%
1982
now<00:13:12.399><c> python</c><00:13:12.800><c> doesn't</c><00:13:13.120><c> know</c><00:13:13.440><c> how</c><00:13:13.600><c> to</c><00:13:13.760><c> subtract</c>

00:13:14.230 --> 00:13:14.240 align:start position:0%
now python doesn't know how to subtract
 

00:13:14.240 --> 00:13:16.230 align:start position:0%
now python doesn't know how to subtract
a<00:13:14.480><c> string</c><00:13:14.800><c> from</c><00:13:15.040><c> an</c><00:13:15.200><c> integer</c>

00:13:16.230 --> 00:13:16.240 align:start position:0%
a string from an integer
 

00:13:16.240 --> 00:13:18.389 align:start position:0%
a string from an integer
so<00:13:16.480><c> to</c><00:13:16.639><c> solve</c><00:13:16.880><c> this</c><00:13:17.120><c> problem</c><00:13:18.000><c> we</c><00:13:18.160><c> need</c><00:13:18.320><c> to</c>

00:13:18.389 --> 00:13:18.399 align:start position:0%
so to solve this problem we need to
 

00:13:18.399 --> 00:13:20.949 align:start position:0%
so to solve this problem we need to
convert<00:13:18.800><c> this</c><00:13:18.959><c> string</c><00:13:19.519><c> to</c><00:13:19.680><c> an</c><00:13:19.920><c> integer</c>

00:13:20.949 --> 00:13:20.959 align:start position:0%
convert this string to an integer
 

00:13:20.959 --> 00:13:22.550 align:start position:0%
convert this string to an integer
now<00:13:21.120><c> in</c><00:13:21.279><c> python</c><00:13:21.600><c> we</c><00:13:21.760><c> have</c><00:13:22.079><c> a</c><00:13:22.160><c> bunch</c><00:13:22.399><c> of</c>

00:13:22.550 --> 00:13:22.560 align:start position:0%
now in python we have a bunch of
 

00:13:22.560 --> 00:13:24.230 align:start position:0%
now in python we have a bunch of
built-in<00:13:22.959><c> functions</c><00:13:23.360><c> for</c><00:13:23.600><c> converting</c><00:13:24.079><c> the</c>

00:13:24.230 --> 00:13:24.240 align:start position:0%
built-in functions for converting the
 

00:13:24.240 --> 00:13:26.550 align:start position:0%
built-in functions for converting the
types<00:13:24.560><c> of</c><00:13:24.639><c> our</c><00:13:24.800><c> variables</c><00:13:25.839><c> so</c>

00:13:26.550 --> 00:13:26.560 align:start position:0%
types of our variables so
 

00:13:26.560 --> 00:13:29.030 align:start position:0%
types of our variables so
we<00:13:26.720><c> have</c><00:13:27.200><c> this</c><00:13:27.519><c> end</c><00:13:27.760><c> function</c>

00:13:29.030 --> 00:13:29.040 align:start position:0%
we have this end function
 

00:13:29.040 --> 00:13:31.670 align:start position:0%
we have this end function
we<00:13:29.200><c> can</c><00:13:29.440><c> pass</c><00:13:29.760><c> our</c><00:13:29.920><c> burst</c><00:13:30.160><c> here</c><00:13:30.320><c> to</c><00:13:30.480><c> it</c>

00:13:31.670 --> 00:13:31.680 align:start position:0%
we can pass our burst here to it
 

00:13:31.680 --> 00:13:33.269 align:start position:0%
we can pass our burst here to it
and<00:13:31.760><c> this</c><00:13:31.920><c> will</c><00:13:32.079><c> return</c><00:13:32.720><c> the</c><00:13:32.880><c> new</c><00:13:32.880><c> numeric</c>

00:13:33.269 --> 00:13:33.279 align:start position:0%
and this will return the new numeric
 

00:13:33.279 --> 00:13:35.590 align:start position:0%
and this will return the new numeric
representation<00:13:34.240><c> of</c><00:13:34.320><c> the</c><00:13:34.480><c> birth</c><00:13:34.800><c> year</c>

00:13:35.590 --> 00:13:35.600 align:start position:0%
representation of the birth year
 

00:13:35.600 --> 00:13:38.389 align:start position:0%
representation of the birth year
so<00:13:36.000><c> to</c><00:13:36.240><c> solve</c><00:13:36.480><c> this</c><00:13:36.639><c> problem</c>

00:13:38.389 --> 00:13:38.399 align:start position:0%
so to solve this problem
 

00:13:38.399 --> 00:13:39.910 align:start position:0%
so to solve this problem
we<00:13:38.480><c> need</c><00:13:38.639><c> to</c><00:13:38.800><c> replace</c>

00:13:39.910 --> 00:13:39.920 align:start position:0%
we need to replace
 

00:13:39.920 --> 00:13:42.069 align:start position:0%
we need to replace
the<00:13:40.079><c> string</c>

00:13:42.069 --> 00:13:42.079 align:start position:0%
the string
 

00:13:42.079 --> 00:13:43.670 align:start position:0%
the string
with<00:13:42.240><c> the</c><00:13:42.399><c> end</c><00:13:42.560><c> function</c>

00:13:43.670 --> 00:13:43.680 align:start position:0%
with the end function
 

00:13:43.680 --> 00:13:45.670 align:start position:0%
with the end function
so<00:13:43.920><c> let's</c><00:13:44.000><c> see</c><00:13:44.240><c> what's</c><00:13:44.399><c> going</c><00:13:44.560><c> on</c><00:13:44.720><c> here</c><00:13:45.440><c> on</c><00:13:45.600><c> the</c>

00:13:45.670 --> 00:13:45.680 align:start position:0%
so let's see what's going on here on the
 

00:13:45.680 --> 00:13:47.910 align:start position:0%
so let's see what's going on here on the
first<00:13:45.920><c> line</c><00:13:46.399><c> we</c><00:13:46.639><c> call</c><00:13:46.800><c> the</c><00:13:46.959><c> input</c><00:13:47.279><c> function</c>

00:13:47.910 --> 00:13:47.920 align:start position:0%
first line we call the input function
 

00:13:47.920 --> 00:13:49.670 align:start position:0%
first line we call the input function
this<00:13:48.160><c> returns</c><00:13:48.560><c> a</c><00:13:48.800><c> string</c>

00:13:49.670 --> 00:13:49.680 align:start position:0%
this returns a string
 

00:13:49.680 --> 00:13:52.310 align:start position:0%
this returns a string
on<00:13:49.760><c> the</c><00:13:49.920><c> second</c><00:13:50.240><c> line</c><00:13:50.720><c> we</c><00:13:50.959><c> pass</c><00:13:51.199><c> the</c><00:13:51.360><c> string</c><00:13:52.160><c> to</c>

00:13:52.310 --> 00:13:52.320 align:start position:0%
on the second line we pass the string to
 

00:13:52.320 --> 00:13:54.550 align:start position:0%
on the second line we pass the string to
our<00:13:52.560><c> end</c><00:13:52.720><c> function</c><00:13:53.600><c> the</c><00:13:53.839><c> in</c><00:13:54.079><c> function</c><00:13:54.399><c> will</c>

00:13:54.550 --> 00:13:54.560 align:start position:0%
our end function the in function will
 

00:13:54.560 --> 00:13:56.870 align:start position:0%
our end function the in function will
return<00:13:55.120><c> the</c><00:13:55.279><c> numeric</c><00:13:55.760><c> representation</c><00:13:56.639><c> of</c><00:13:56.720><c> the</c>

00:13:56.870 --> 00:13:56.880 align:start position:0%
return the numeric representation of the
 

00:13:56.880 --> 00:13:57.990 align:start position:0%
return the numeric representation of the
burst<00:13:57.199><c> year</c>

00:13:57.990 --> 00:13:58.000 align:start position:0%
burst year
 

00:13:58.000 --> 00:13:59.030 align:start position:0%
burst year
then

00:13:59.030 --> 00:13:59.040 align:start position:0%
then
 

00:13:59.040 --> 00:14:01.990 align:start position:0%
then
we<00:13:59.279><c> subtract</c><00:13:59.760><c> it</c><00:13:59.839><c> from</c><00:14:00.079><c> 2020</c><00:14:00.959><c> we</c><00:14:01.199><c> get</c><00:14:01.360><c> the</c><00:14:01.519><c> age</c>

00:14:01.990 --> 00:14:02.000 align:start position:0%
we subtract it from 2020 we get the age
 

00:14:02.000 --> 00:14:04.069 align:start position:0%
we subtract it from 2020 we get the age
and<00:14:02.160><c> store</c><00:14:02.399><c> it</c><00:14:02.560><c> in</c><00:14:02.639><c> the</c><00:14:02.800><c> age</c><00:14:03.040><c> variable</c><00:14:03.920><c> now</c>

00:14:04.069 --> 00:14:04.079 align:start position:0%
and store it in the age variable now
 

00:14:04.079 --> 00:14:06.470 align:start position:0%
and store it in the age variable now
let's<00:14:04.320><c> run</c><00:14:04.480><c> our</c><00:14:04.639><c> program</c>

00:14:06.470 --> 00:14:06.480 align:start position:0%
let's run our program
 

00:14:06.480 --> 00:14:07.269 align:start position:0%
let's run our program
so

00:14:07.269 --> 00:14:07.279 align:start position:0%
so
 

00:14:07.279 --> 00:14:08.790 align:start position:0%
so
1982

00:14:08.790 --> 00:14:08.800 align:start position:0%
1982
 

00:14:08.800 --> 00:14:11.430 align:start position:0%
1982
and<00:14:09.120><c> there</c><00:14:09.279><c> you</c><00:14:09.440><c> go</c><00:14:09.760><c> i'm</c><00:14:09.920><c> 38</c><00:14:10.320><c> years</c><00:14:10.639><c> old</c>

00:14:11.430 --> 00:14:11.440 align:start position:0%
and there you go i'm 38 years old
 

00:14:11.440 --> 00:14:14.310 align:start position:0%
and there you go i'm 38 years old
so<00:14:11.600><c> this</c><00:14:11.839><c> is</c><00:14:11.920><c> how</c><00:14:12.560><c> the</c><00:14:12.880><c> in</c><00:14:13.040><c> function</c><00:14:13.440><c> works</c><00:14:14.160><c> now</c>

00:14:14.310 --> 00:14:14.320 align:start position:0%
so this is how the in function works now
 

00:14:14.320 --> 00:14:16.629 align:start position:0%
so this is how the in function works now
we<00:14:14.560><c> also</c><00:14:14.800><c> have</c><00:14:15.440><c> another</c><00:14:15.839><c> built-in</c><00:14:16.240><c> function</c>

00:14:16.629 --> 00:14:16.639 align:start position:0%
we also have another built-in function
 

00:14:16.639 --> 00:14:19.110 align:start position:0%
we also have another built-in function
called<00:14:17.199><c> float</c><00:14:17.920><c> that</c><00:14:18.160><c> is</c><00:14:18.240><c> for</c><00:14:18.480><c> converting</c><00:14:18.959><c> a</c>

00:14:19.110 --> 00:14:19.120 align:start position:0%
called float that is for converting a
 

00:14:19.120 --> 00:14:21.509 align:start position:0%
called float that is for converting a
value<00:14:19.519><c> to</c><00:14:19.680><c> a</c><00:14:19.760><c> floating</c><00:14:20.240><c> point</c><00:14:20.480><c> number</c><00:14:21.279><c> a</c>

00:14:21.509 --> 00:14:21.519 align:start position:0%
value to a floating point number a
 

00:14:21.519 --> 00:14:23.670 align:start position:0%
value to a floating point number a
floating<00:14:21.920><c> point</c><00:14:22.079><c> number</c><00:14:22.480><c> in</c><00:14:22.720><c> python</c><00:14:23.279><c> and</c>

00:14:23.670 --> 00:14:23.680 align:start position:0%
floating point number in python and
 

00:14:23.680 --> 00:14:25.829 align:start position:0%
floating point number in python and
other<00:14:23.920><c> programming</c><00:14:24.320><c> languages</c><00:14:25.120><c> is</c><00:14:25.279><c> a</c><00:14:25.440><c> number</c>

00:14:25.829 --> 00:14:25.839 align:start position:0%
other programming languages is a number
 

00:14:25.839 --> 00:14:28.069 align:start position:0%
other programming languages is a number
with<00:14:26.000><c> a</c><00:14:26.079><c> decimal</c><00:14:26.560><c> point</c><00:14:27.199><c> so</c>

00:14:28.069 --> 00:14:28.079 align:start position:0%
with a decimal point so
 

00:14:28.079 --> 00:14:31.910 align:start position:0%
with a decimal point so
10<00:14:28.720><c> is</c><00:14:28.880><c> an</c><00:14:29.040><c> integer</c><00:14:29.680><c> and</c><00:14:29.839><c> 10.1</c><00:14:30.639><c> is</c><00:14:30.800><c> a</c><00:14:30.880><c> float</c>

00:14:31.910 --> 00:14:31.920 align:start position:0%
10 is an integer and 10.1 is a float
 

00:14:31.920 --> 00:14:35.430 align:start position:0%
10 is an integer and 10.1 is a float
so<00:14:32.639><c> we</c><00:14:32.800><c> have</c><00:14:33.199><c> int</c><00:14:33.839><c> we</c><00:14:34.000><c> have</c><00:14:34.160><c> float</c><00:14:34.639><c> and</c><00:14:35.040><c> we</c><00:14:35.199><c> also</c>

00:14:35.430 --> 00:14:35.440 align:start position:0%
so we have int we have float and we also
 

00:14:35.440 --> 00:14:38.230 align:start position:0%
so we have int we have float and we also
have<00:14:36.000><c> bool</c><00:14:36.800><c> for</c><00:14:37.040><c> converting</c><00:14:37.519><c> a</c><00:14:37.680><c> value</c><00:14:38.000><c> to</c><00:14:38.160><c> a</c>

00:14:38.230 --> 00:14:38.240 align:start position:0%
have bool for converting a value to a
 

00:14:38.240 --> 00:14:39.269 align:start position:0%
have bool for converting a value to a
boolean

00:14:39.269 --> 00:14:39.279 align:start position:0%
boolean
 

00:14:39.279 --> 00:14:41.990 align:start position:0%
boolean
and<00:14:39.519><c> finally</c><00:14:39.920><c> we</c><00:14:40.000><c> have</c><00:14:40.399><c> stir</c><00:14:41.279><c> for</c><00:14:41.519><c> converting</c>

00:14:41.990 --> 00:14:42.000 align:start position:0%
and finally we have stir for converting
 

00:14:42.000 --> 00:14:44.790 align:start position:0%
and finally we have stir for converting
a<00:14:42.160><c> value</c><00:14:42.560><c> to</c><00:14:42.720><c> a</c><00:14:42.880><c> string</c><00:14:43.920><c> so</c><00:14:44.160><c> these</c><00:14:44.399><c> are</c><00:14:44.639><c> the</c>

00:14:44.790 --> 00:14:44.800 align:start position:0%
a value to a string so these are the
 

00:14:44.800 --> 00:14:46.790 align:start position:0%
a value to a string so these are the
built-in<00:14:45.199><c> functions</c><00:14:45.839><c> for</c><00:14:46.079><c> converting</c><00:14:46.639><c> the</c>

00:14:46.790 --> 00:14:46.800 align:start position:0%
built-in functions for converting the
 

00:14:46.800 --> 00:14:48.790 align:start position:0%
built-in functions for converting the
type<00:14:47.040><c> of</c><00:14:47.199><c> our</c><00:14:47.360><c> variables</c>

00:14:48.790 --> 00:14:48.800 align:start position:0%
type of our variables
 

00:14:48.800 --> 00:14:50.629 align:start position:0%
type of our variables
now<00:14:48.959><c> here's</c><00:14:49.199><c> a</c><00:14:49.279><c> little</c><00:14:49.440><c> exercise</c><00:14:49.920><c> for</c><00:14:50.079><c> you</c><00:14:50.560><c> i</c>

00:14:50.629 --> 00:14:50.639 align:start position:0%
now here's a little exercise for you i
 

00:14:50.639 --> 00:14:52.710 align:start position:0%
now here's a little exercise for you i
want<00:14:50.800><c> you</c><00:14:50.959><c> to</c><00:14:51.120><c> write</c><00:14:51.360><c> a</c><00:14:51.600><c> basic</c><00:14:52.000><c> calculator</c>

00:14:52.710 --> 00:14:52.720 align:start position:0%
want you to write a basic calculator
 

00:14:52.720 --> 00:14:54.790 align:start position:0%
want you to write a basic calculator
program<00:14:53.600><c> so</c><00:14:53.760><c> here</c><00:14:53.920><c> we</c><00:14:54.079><c> have</c><00:14:54.160><c> to</c><00:14:54.320><c> enter</c><00:14:54.639><c> two</c>

00:14:54.790 --> 00:14:54.800 align:start position:0%
program so here we have to enter two
 

00:14:54.800 --> 00:14:57.189 align:start position:0%
program so here we have to enter two
numbers<00:14:55.680><c> we</c><00:14:55.839><c> can</c><00:14:56.000><c> type</c><00:14:56.240><c> a</c><00:14:56.320><c> whole</c><00:14:56.560><c> number</c><00:14:56.959><c> or</c><00:14:57.120><c> a</c>

00:14:57.189 --> 00:14:57.199 align:start position:0%
numbers we can type a whole number or a
 

00:14:57.199 --> 00:15:00.069 align:start position:0%
numbers we can type a whole number or a
number<00:14:57.440><c> with</c><00:14:57.600><c> a</c><00:14:57.680><c> decimal</c><00:14:58.160><c> point</c>

00:15:00.069 --> 00:15:00.079 align:start position:0%
number with a decimal point
 

00:15:00.079 --> 00:15:02.069 align:start position:0%
number with a decimal point
and<00:15:00.160><c> then</c><00:15:00.399><c> our</c><00:15:00.560><c> program</c><00:15:00.880><c> will</c><00:15:01.120><c> print</c><00:15:01.680><c> the</c><00:15:01.920><c> sum</c>

00:15:02.069 --> 00:15:02.079 align:start position:0%
and then our program will print the sum
 

00:15:02.079 --> 00:15:03.590 align:start position:0%
and then our program will print the sum
of<00:15:02.240><c> these</c><00:15:02.399><c> two</c><00:15:02.639><c> numbers</c>

00:15:03.590 --> 00:15:03.600 align:start position:0%
of these two numbers
 

00:15:03.600 --> 00:15:05.509 align:start position:0%
of these two numbers
so<00:15:03.760><c> pause</c><00:15:04.079><c> the</c><00:15:04.160><c> video</c><00:15:04.639><c> spend</c><00:15:04.959><c> two</c><00:15:05.120><c> minutes</c><00:15:05.360><c> on</c>

00:15:05.509 --> 00:15:05.519 align:start position:0%
so pause the video spend two minutes on
 

00:15:05.519 --> 00:15:10.949 align:start position:0%
so pause the video spend two minutes on
this<00:15:05.680><c> exercise</c><00:15:06.320><c> and</c><00:15:06.480><c> then</c><00:15:06.639><c> see</c><00:15:06.880><c> my</c><00:15:07.120><c> solution</c>

00:15:10.949 --> 00:15:10.959 align:start position:0%
 
 

00:15:10.959 --> 00:15:12.389 align:start position:0%
 
all<00:15:11.120><c> right</c><00:15:11.199><c> first</c><00:15:11.440><c> we're</c><00:15:11.600><c> going</c><00:15:11.680><c> to</c><00:15:11.760><c> call</c><00:15:12.240><c> our</c>

00:15:12.389 --> 00:15:12.399 align:start position:0%
all right first we're going to call our
 

00:15:12.399 --> 00:15:14.949 align:start position:0%
all right first we're going to call our
input<00:15:12.720><c> function</c><00:15:13.360><c> to</c><00:15:13.519><c> read</c><00:15:13.680><c> the</c><00:15:13.839><c> first</c><00:15:14.079><c> number</c>

00:15:14.949 --> 00:15:14.959 align:start position:0%
input function to read the first number
 

00:15:14.959 --> 00:15:16.710 align:start position:0%
input function to read the first number
we<00:15:15.120><c> get</c><00:15:15.279><c> the</c><00:15:15.440><c> result</c><00:15:15.760><c> and</c><00:15:15.920><c> store</c><00:15:16.240><c> it</c><00:15:16.480><c> in</c><00:15:16.639><c> a</c>

00:15:16.710 --> 00:15:16.720 align:start position:0%
we get the result and store it in a
 

00:15:16.720 --> 00:15:18.949 align:start position:0%
we get the result and store it in a
variable<00:15:17.120><c> called</c><00:15:17.680><c> first</c>

00:15:18.949 --> 00:15:18.959 align:start position:0%
variable called first
 

00:15:18.959 --> 00:15:21.030 align:start position:0%
variable called first
now<00:15:19.680><c> let's</c><00:15:19.839><c> declare</c>

00:15:21.030 --> 00:15:21.040 align:start position:0%
now let's declare
 

00:15:21.040 --> 00:15:24.230 align:start position:0%
now let's declare
another<00:15:21.360><c> variable</c><00:15:21.760><c> called</c><00:15:22.079><c> second</c><00:15:22.800><c> and</c><00:15:23.440><c> read</c>

00:15:24.230 --> 00:15:24.240 align:start position:0%
another variable called second and read
 

00:15:24.240 --> 00:15:26.389 align:start position:0%
another variable called second and read
the<00:15:24.399><c> second</c><00:15:24.800><c> number</c>

00:15:26.389 --> 00:15:26.399 align:start position:0%
the second number
 

00:15:26.399 --> 00:15:27.509 align:start position:0%
the second number
now

00:15:27.509 --> 00:15:27.519 align:start position:0%
now
 

00:15:27.519 --> 00:15:29.110 align:start position:0%
now
we<00:15:27.760><c> calculate</c><00:15:28.160><c> the</c><00:15:28.320><c> sum</c>

00:15:29.110 --> 00:15:29.120 align:start position:0%
we calculate the sum
 

00:15:29.120 --> 00:15:32.230 align:start position:0%
we calculate the sum
so<00:15:29.279><c> that</c><00:15:29.440><c> is</c><00:15:29.600><c> first</c><00:15:30.320><c> plus</c><00:15:30.959><c> second</c>

00:15:32.230 --> 00:15:32.240 align:start position:0%
so that is first plus second
 

00:15:32.240 --> 00:15:34.230 align:start position:0%
so that is first plus second
now<00:15:32.399><c> let's</c><00:15:32.560><c> see</c><00:15:32.720><c> what</c><00:15:32.880><c> happens</c><00:15:33.199><c> when</c><00:15:33.360><c> we</c><00:15:33.519><c> print</c>

00:15:34.230 --> 00:15:34.240 align:start position:0%
now let's see what happens when we print
 

00:15:34.240 --> 00:15:36.710 align:start position:0%
now let's see what happens when we print
sum<00:15:34.639><c> on</c><00:15:34.800><c> the</c><00:15:34.959><c> terminal</c>

00:15:36.710 --> 00:15:36.720 align:start position:0%
sum on the terminal
 

00:15:36.720 --> 00:15:39.430 align:start position:0%
sum on the terminal
so<00:15:36.959><c> i</c><00:15:37.120><c> enter</c><00:15:37.519><c> 10</c><00:15:38.079><c> and</c><00:15:38.240><c> 20</c>

00:15:39.430 --> 00:15:39.440 align:start position:0%
so i enter 10 and 20
 

00:15:39.440 --> 00:15:42.230 align:start position:0%
so i enter 10 and 20
but<00:15:39.600><c> instead</c><00:15:39.920><c> of</c><00:15:40.000><c> 30</c><00:15:40.320><c> we</c><00:15:40.480><c> get</c><00:15:40.880><c> 10</c><00:15:41.199><c> 20.</c><00:15:41.920><c> this</c><00:15:42.160><c> is</c>

00:15:42.230 --> 00:15:42.240 align:start position:0%
but instead of 30 we get 10 20. this is
 

00:15:42.240 --> 00:15:44.870 align:start position:0%
but instead of 30 we get 10 20. this is
because<00:15:42.560><c> we're</c><00:15:42.800><c> combining</c><00:15:43.360><c> or</c><00:15:43.600><c> concatenating</c>

00:15:44.870 --> 00:15:44.880 align:start position:0%
because we're combining or concatenating
 

00:15:44.880 --> 00:15:47.430 align:start position:0%
because we're combining or concatenating
two<00:15:45.120><c> strings</c><00:15:46.000><c> so</c>

00:15:47.430 --> 00:15:47.440 align:start position:0%
two strings so
 

00:15:47.440 --> 00:15:49.509 align:start position:0%
two strings so
as<00:15:47.680><c> i</c><00:15:47.759><c> told</c><00:15:47.920><c> you</c><00:15:48.079><c> before</c><00:15:48.639><c> the</c><00:15:48.880><c> input</c><00:15:49.199><c> function</c>

00:15:49.509 --> 00:15:49.519 align:start position:0%
as i told you before the input function
 

00:15:49.519 --> 00:15:52.230 align:start position:0%
as i told you before the input function
returns<00:15:50.160><c> a</c><00:15:50.320><c> string</c><00:15:51.120><c> so</c>

00:15:52.230 --> 00:15:52.240 align:start position:0%
returns a string so
 

00:15:52.240 --> 00:15:55.030 align:start position:0%
returns a string so
this<00:15:52.560><c> line</c><00:15:53.040><c> will</c><00:15:53.279><c> be</c><00:15:53.360><c> equivalent</c><00:15:54.000><c> to</c><00:15:54.480><c> first</c>

00:15:55.030 --> 00:15:55.040 align:start position:0%
this line will be equivalent to first
 

00:15:55.040 --> 00:15:57.910 align:start position:0%
this line will be equivalent to first
equals<00:15:55.839><c> 10.</c><00:15:56.560><c> we're</c><00:15:56.720><c> dealing</c><00:15:57.040><c> with</c><00:15:57.279><c> a</c><00:15:57.360><c> string</c>

00:15:57.910 --> 00:15:57.920 align:start position:0%
equals 10. we're dealing with a string
 

00:15:57.920 --> 00:15:59.509 align:start position:0%
equals 10. we're dealing with a string
not<00:15:58.240><c> an</c><00:15:58.480><c> integer</c>

00:15:59.509 --> 00:15:59.519 align:start position:0%
not an integer
 

00:15:59.519 --> 00:16:00.870 align:start position:0%
not an integer
similarly

00:16:00.870 --> 00:16:00.880 align:start position:0%
similarly
 

00:16:00.880 --> 00:16:02.470 align:start position:0%
similarly
second<00:16:01.279><c> is</c><00:16:01.360><c> going</c><00:16:01.440><c> to</c><00:16:01.519><c> be</c>

00:16:02.470 --> 00:16:02.480 align:start position:0%
second is going to be
 

00:16:02.480 --> 00:16:05.430 align:start position:0%
second is going to be
20<00:16:02.959><c> as</c><00:16:03.120><c> a</c><00:16:03.279><c> string</c><00:16:03.920><c> so</c><00:16:04.079><c> when</c><00:16:04.240><c> we</c><00:16:04.399><c> combine</c><00:16:05.199><c> two</c>

00:16:05.430 --> 00:16:05.440 align:start position:0%
20 as a string so when we combine two
 

00:16:05.440 --> 00:16:09.269 align:start position:0%
20 as a string so when we combine two
strings<00:16:06.240><c> 10</c><00:16:06.800><c> plus</c><00:16:07.120><c> 20</c><00:16:08.079><c> will</c><00:16:08.320><c> get</c>

00:16:09.269 --> 00:16:09.279 align:start position:0%
strings 10 plus 20 will get
 

00:16:09.279 --> 00:16:11.910 align:start position:0%
strings 10 plus 20 will get
10<00:16:09.759><c> 20</c><00:16:10.560><c> because</c><00:16:10.800><c> we're</c><00:16:10.959><c> dealing</c><00:16:11.279><c> with</c><00:16:11.440><c> textual</c>

00:16:11.910 --> 00:16:11.920 align:start position:0%
10 20 because we're dealing with textual
 

00:16:11.920 --> 00:16:15.990 align:start position:0%
10 20 because we're dealing with textual
data<00:16:12.399><c> okay</c><00:16:13.120><c> so</c><00:16:13.279><c> to</c><00:16:13.440><c> solve</c><00:16:13.680><c> this</c><00:16:13.839><c> problem</c>

00:16:15.990 --> 00:16:16.000 align:start position:0%
data okay so to solve this problem
 

00:16:16.000 --> 00:16:17.990 align:start position:0%
data okay so to solve this problem
we<00:16:16.160><c> need</c><00:16:16.320><c> to</c><00:16:16.399><c> convert</c><00:16:16.800><c> the</c><00:16:16.959><c> values</c><00:16:17.360><c> we</c><00:16:17.519><c> read</c><00:16:17.839><c> to</c>

00:16:17.990 --> 00:16:18.000 align:start position:0%
we need to convert the values we read to
 

00:16:18.000 --> 00:16:20.870 align:start position:0%
we need to convert the values we read to
their<00:16:18.240><c> numeric</c><00:16:18.639><c> representation</c><00:16:19.920><c> so</c><00:16:20.639><c> over</c>

00:16:20.870 --> 00:16:20.880 align:start position:0%
their numeric representation so over
 

00:16:20.880 --> 00:16:22.870 align:start position:0%
their numeric representation so over
here

00:16:22.870 --> 00:16:22.880 align:start position:0%
here
 

00:16:22.880 --> 00:16:24.150 align:start position:0%
here
we're<00:16:23.040><c> going</c><00:16:23.199><c> to</c><00:16:23.279><c> pass</c>

00:16:24.150 --> 00:16:24.160 align:start position:0%
we're going to pass
 

00:16:24.160 --> 00:16:26.870 align:start position:0%
we're going to pass
first<00:16:24.480><c> to</c><00:16:24.639><c> our</c><00:16:24.800><c> int</c><00:16:25.040><c> function</c>

00:16:26.870 --> 00:16:26.880 align:start position:0%
first to our int function
 

00:16:26.880 --> 00:16:28.470 align:start position:0%
first to our int function
and<00:16:27.040><c> here</c><00:16:27.279><c> as</c><00:16:27.440><c> well</c>

00:16:28.470 --> 00:16:28.480 align:start position:0%
and here as well
 

00:16:28.480 --> 00:16:30.310 align:start position:0%
and here as well
now<00:16:28.639><c> let's</c><00:16:28.880><c> run</c><00:16:29.040><c> our</c><00:16:29.199><c> program</c>

00:16:30.310 --> 00:16:30.320 align:start position:0%
now let's run our program
 

00:16:30.320 --> 00:16:34.389 align:start position:0%
now let's run our program
so<00:16:30.560><c> we</c><00:16:30.720><c> enter</c><00:16:31.360><c> 10</c><00:16:31.920><c> and</c><00:16:32.160><c> 20</c><00:16:32.800><c> we</c><00:16:32.959><c> get</c><00:16:33.199><c> 30.</c><00:16:34.079><c> what</c><00:16:34.240><c> if</c>

00:16:34.389 --> 00:16:34.399 align:start position:0%
so we enter 10 and 20 we get 30. what if
 

00:16:34.399 --> 00:16:37.990 align:start position:0%
so we enter 10 and 20 we get 30. what if
we<00:16:34.560><c> enter</c><00:16:34.959><c> a</c><00:16:35.040><c> floating</c><00:16:35.440><c> point</c><00:16:35.680><c> number</c><00:16:36.320><c> so</c><00:16:36.639><c> 10.1</c>

00:16:37.990 --> 00:16:38.000 align:start position:0%
we enter a floating point number so 10.1
 

00:16:38.000 --> 00:16:40.310 align:start position:0%
we enter a floating point number so 10.1
and<00:16:38.639><c> 20.</c>

00:16:40.310 --> 00:16:40.320 align:start position:0%
and 20.
 

00:16:40.320 --> 00:16:41.829 align:start position:0%
and 20.
we<00:16:40.480><c> got</c><00:16:40.720><c> an</c><00:16:40.880><c> error</c>

00:16:41.829 --> 00:16:41.839 align:start position:0%
we got an error
 

00:16:41.839 --> 00:16:44.470 align:start position:0%
we got an error
so<00:16:42.480><c> to</c><00:16:42.639><c> solve</c><00:16:42.880><c> this</c><00:16:43.120><c> problem</c>

00:16:44.470 --> 00:16:44.480 align:start position:0%
so to solve this problem
 

00:16:44.480 --> 00:16:46.790 align:start position:0%
so to solve this problem
we<00:16:44.639><c> need</c><00:16:44.800><c> to</c><00:16:44.959><c> treat</c><00:16:45.600><c> both</c><00:16:45.839><c> these</c><00:16:46.079><c> values</c><00:16:46.560><c> as</c>

00:16:46.790 --> 00:16:46.800 align:start position:0%
we need to treat both these values as
 

00:16:46.800 --> 00:16:49.269 align:start position:0%
we need to treat both these values as
floats<00:16:47.680><c> so</c><00:16:48.000><c> instead</c><00:16:48.320><c> of</c><00:16:48.399><c> the</c><00:16:48.639><c> in</c><00:16:48.800><c> function</c>

00:16:49.269 --> 00:16:49.279 align:start position:0%
floats so instead of the in function
 

00:16:49.279 --> 00:16:52.710 align:start position:0%
floats so instead of the in function
we're<00:16:49.440><c> going</c><00:16:49.519><c> to</c><00:16:49.600><c> use</c><00:16:50.079><c> the</c><00:16:50.240><c> float</c><00:16:50.560><c> function</c>

00:16:52.710 --> 00:16:52.720 align:start position:0%
we're going to use the float function
 

00:16:52.720 --> 00:16:55.350 align:start position:0%
we're going to use the float function
now<00:16:53.440><c> let's</c><00:16:53.680><c> run</c><00:16:53.920><c> our</c><00:16:54.000><c> program</c><00:16:54.320><c> one</c><00:16:54.480><c> more</c><00:16:54.639><c> time</c>

00:16:55.350 --> 00:16:55.360 align:start position:0%
now let's run our program one more time
 

00:16:55.360 --> 00:16:58.069 align:start position:0%
now let's run our program one more time
we<00:16:55.600><c> enter</c><00:16:56.240><c> a</c><00:16:56.399><c> whole</c><00:16:56.639><c> number</c><00:16:57.279><c> and</c><00:16:57.600><c> a</c><00:16:57.680><c> floating</c>

00:16:58.069 --> 00:16:58.079 align:start position:0%
we enter a whole number and a floating
 

00:16:58.079 --> 00:17:00.949 align:start position:0%
we enter a whole number and a floating
point<00:16:58.320><c> number</c><00:16:59.040><c> so</c><00:16:59.279><c> the</c><00:16:59.440><c> result</c><00:16:59.759><c> is</c><00:16:59.920><c> correct</c>

00:17:00.949 --> 00:17:00.959 align:start position:0%
point number so the result is correct
 

00:17:00.959 --> 00:17:05.510 align:start position:0%
point number so the result is correct
now<00:17:01.680><c> let's</c><00:17:02.000><c> add</c><00:17:02.399><c> a</c><00:17:02.560><c> label</c><00:17:02.880><c> over</c><00:17:03.120><c> here</c><00:17:04.000><c> so</c><00:17:04.319><c> sum</c>

00:17:05.510 --> 00:17:05.520 align:start position:0%
now let's add a label over here so sum
 

00:17:05.520 --> 00:17:06.870 align:start position:0%
now let's add a label over here so sum
is

00:17:06.870 --> 00:17:06.880 align:start position:0%
is
 

00:17:06.880 --> 00:17:08.309 align:start position:0%
is
plus<00:17:07.120><c> sum</c>

00:17:08.309 --> 00:17:08.319 align:start position:0%
plus sum
 

00:17:08.319 --> 00:17:09.909 align:start position:0%
plus sum
let's<00:17:08.559><c> run</c><00:17:08.720><c> our</c><00:17:08.880><c> program</c>

00:17:09.909 --> 00:17:09.919 align:start position:0%
let's run our program
 

00:17:09.919 --> 00:17:12.230 align:start position:0%
let's run our program
one<00:17:10.079><c> more</c><00:17:10.240><c> time</c><00:17:10.720><c> 10</c><00:17:11.120><c> and</c><00:17:11.360><c> 20.</c>

00:17:12.230 --> 00:17:12.240 align:start position:0%
one more time 10 and 20.
 

00:17:12.240 --> 00:17:14.470 align:start position:0%
one more time 10 and 20.
once<00:17:12.480><c> again</c><00:17:12.799><c> we</c><00:17:12.959><c> got</c><00:17:13.199><c> an</c><00:17:13.360><c> error</c><00:17:13.919><c> the</c><00:17:14.079><c> error</c><00:17:14.319><c> is</c>

00:17:14.470 --> 00:17:14.480 align:start position:0%
once again we got an error the error is
 

00:17:14.480 --> 00:17:17.350 align:start position:0%
once again we got an error the error is
saying<00:17:14.880><c> that</c><00:17:15.199><c> python</c><00:17:15.600><c> can</c><00:17:15.919><c> only</c><00:17:16.240><c> concatenate</c>

00:17:17.350 --> 00:17:17.360 align:start position:0%
saying that python can only concatenate
 

00:17:17.360 --> 00:17:21.029 align:start position:0%
saying that python can only concatenate
strings<00:17:18.079><c> not</c><00:17:18.319><c> floats</c><00:17:18.720><c> to</c><00:17:18.959><c> strings</c>

00:17:21.029 --> 00:17:21.039 align:start position:0%
strings not floats to strings
 

00:17:21.039 --> 00:17:23.909 align:start position:0%
strings not floats to strings
so<00:17:21.280><c> on</c><00:17:21.439><c> line</c><00:17:21.760><c> four</c><00:17:22.480><c> we</c><00:17:22.640><c> have</c><00:17:22.799><c> a</c><00:17:22.880><c> string</c><00:17:23.600><c> we're</c>

00:17:23.909 --> 00:17:23.919 align:start position:0%
so on line four we have a string we're
 

00:17:23.919 --> 00:17:26.470 align:start position:0%
so on line four we have a string we're
concatenating<00:17:24.720><c> this</c><00:17:25.199><c> with</c><00:17:25.439><c> a</c><00:17:25.520><c> float</c><00:17:26.240><c> because</c>

00:17:26.470 --> 00:17:26.480 align:start position:0%
concatenating this with a float because
 

00:17:26.480 --> 00:17:28.549 align:start position:0%
concatenating this with a float because
the<00:17:26.720><c> result</c><00:17:27.120><c> of</c><00:17:27.199><c> this</c><00:17:27.439><c> expression</c><00:17:28.319><c> is</c><00:17:28.480><c> a</c>

00:17:28.549 --> 00:17:28.559 align:start position:0%
the result of this expression is a
 

00:17:28.559 --> 00:17:30.549 align:start position:0%
the result of this expression is a
floating<00:17:28.960><c> point</c><00:17:29.200><c> number</c><00:17:29.679><c> we're</c><00:17:30.000><c> adding</c><00:17:30.320><c> two</c>

00:17:30.549 --> 00:17:30.559 align:start position:0%
floating point number we're adding two
 

00:17:30.559 --> 00:17:33.430 align:start position:0%
floating point number we're adding two
floats<00:17:31.120><c> so</c><00:17:31.360><c> the</c><00:17:31.520><c> result</c><00:17:31.919><c> is</c><00:17:32.080><c> a</c><00:17:32.160><c> float</c><00:17:32.640><c> as</c><00:17:32.720><c> well</c>

00:17:33.430 --> 00:17:33.440 align:start position:0%
floats so the result is a float as well
 

00:17:33.440 --> 00:17:36.310 align:start position:0%
floats so the result is a float as well
so<00:17:33.760><c> python</c><00:17:34.160><c> doesn't</c><00:17:34.480><c> know</c><00:17:35.200><c> how</c><00:17:35.360><c> to</c><00:17:35.600><c> evaluate</c>

00:17:36.310 --> 00:17:36.320 align:start position:0%
so python doesn't know how to evaluate
 

00:17:36.320 --> 00:17:38.470 align:start position:0%
so python doesn't know how to evaluate
code<00:17:36.640><c> like</c><00:17:36.880><c> this</c>

00:17:38.470 --> 00:17:38.480 align:start position:0%
code like this
 

00:17:38.480 --> 00:17:40.950 align:start position:0%
code like this
it<00:17:38.640><c> doesn't</c><00:17:38.960><c> know</c><00:17:39.520><c> how</c><00:17:39.679><c> to</c><00:17:39.840><c> concatenate</c><00:17:40.799><c> a</c>

00:17:40.950 --> 00:17:40.960 align:start position:0%
it doesn't know how to concatenate a
 

00:17:40.960 --> 00:17:42.390 align:start position:0%
it doesn't know how to concatenate a
float

00:17:42.390 --> 00:17:42.400 align:start position:0%
float
 

00:17:42.400 --> 00:17:45.190 align:start position:0%
float
to<00:17:42.559><c> a</c><00:17:42.720><c> string</c><00:17:43.360><c> to</c><00:17:43.600><c> solve</c><00:17:43.840><c> this</c><00:17:44.000><c> problem</c>

00:17:45.190 --> 00:17:45.200 align:start position:0%
to a string to solve this problem
 

00:17:45.200 --> 00:17:47.510 align:start position:0%
to a string to solve this problem
we<00:17:45.360><c> need</c><00:17:45.440><c> to</c><00:17:45.600><c> convert</c><00:17:46.080><c> sum</c><00:17:46.400><c> to</c><00:17:46.559><c> your</c><00:17:46.720><c> string</c><00:17:47.360><c> so</c>

00:17:47.510 --> 00:17:47.520 align:start position:0%
we need to convert sum to your string so
 

00:17:47.520 --> 00:17:48.630 align:start position:0%
we need to convert sum to your string so
this<00:17:47.679><c> is</c><00:17:47.840><c> where</c>

00:17:48.630 --> 00:17:48.640 align:start position:0%
this is where
 

00:17:48.640 --> 00:17:51.029 align:start position:0%
this is where
we<00:17:48.799><c> use</c><00:17:48.960><c> the</c><00:17:49.120><c> stir</c><00:17:49.360><c> function</c>

00:17:51.029 --> 00:17:51.039 align:start position:0%
we use the stir function
 

00:17:51.039 --> 00:17:54.150 align:start position:0%
we use the stir function
now<00:17:51.679><c> let's</c><00:17:51.840><c> run</c><00:17:52.000><c> the</c><00:17:52.160><c> program</c><00:17:52.480><c> again</c><00:17:53.280><c> so</c>

00:17:54.150 --> 00:17:54.160 align:start position:0%
now let's run the program again so
 

00:17:54.160 --> 00:17:58.070 align:start position:0%
now let's run the program again so
10<00:17:54.720><c> plus</c><00:17:55.039><c> 20.1</c><00:17:56.080><c> and</c><00:17:56.480><c> here's</c><00:17:56.720><c> the</c><00:17:56.880><c> result</c>

00:17:58.070 --> 00:17:58.080 align:start position:0%
10 plus 20.1 and here's the result
 

00:17:58.080 --> 00:17:59.510 align:start position:0%
10 plus 20.1 and here's the result
and<00:17:58.240><c> one</c><00:17:58.480><c> last</c><00:17:58.720><c> thing</c>

00:17:59.510 --> 00:17:59.520 align:start position:0%
and one last thing
 

00:17:59.520 --> 00:18:01.750 align:start position:0%
and one last thing
in<00:17:59.679><c> this</c><00:17:59.919><c> example</c><00:18:00.720><c> i'm</c><00:18:00.960><c> calling</c><00:18:01.280><c> the</c><00:18:01.440><c> float</c>

00:18:01.750 --> 00:18:01.760 align:start position:0%
in this example i'm calling the float
 

00:18:01.760 --> 00:18:03.270 align:start position:0%
in this example i'm calling the float
function<00:18:02.400><c> at</c><00:18:02.559><c> the</c><00:18:02.640><c> time</c><00:18:02.880><c> we</c><00:18:03.039><c> want</c><00:18:03.120><c> to</c>

00:18:03.270 --> 00:18:03.280 align:start position:0%
function at the time we want to
 

00:18:03.280 --> 00:18:05.350 align:start position:0%
function at the time we want to
calculate<00:18:03.840><c> the</c><00:18:04.000><c> sum</c><00:18:04.240><c> of</c><00:18:04.320><c> these</c><00:18:04.480><c> two</c><00:18:04.640><c> numbers</c>

00:18:05.350 --> 00:18:05.360 align:start position:0%
calculate the sum of these two numbers
 

00:18:05.360 --> 00:18:07.270 align:start position:0%
calculate the sum of these two numbers
but<00:18:05.520><c> this</c><00:18:05.760><c> is</c><00:18:05.840><c> not</c><00:18:06.000><c> a</c><00:18:06.160><c> requirement</c><00:18:06.960><c> we</c><00:18:07.120><c> can</c>

00:18:07.270 --> 00:18:07.280 align:start position:0%
but this is not a requirement we can
 

00:18:07.280 --> 00:18:09.110 align:start position:0%
but this is not a requirement we can
call<00:18:07.520><c> the</c><00:18:07.600><c> float</c><00:18:07.919><c> function</c>

00:18:09.110 --> 00:18:09.120 align:start position:0%
call the float function
 

00:18:09.120 --> 00:18:12.310 align:start position:0%
call the float function
over<00:18:09.360><c> here</c><00:18:10.160><c> so</c><00:18:10.799><c> this</c><00:18:11.200><c> input</c><00:18:11.440><c> function</c><00:18:11.760><c> returns</c>

00:18:12.310 --> 00:18:12.320 align:start position:0%
over here so this input function returns
 

00:18:12.320 --> 00:18:14.950 align:start position:0%
over here so this input function returns
a<00:18:12.480><c> string</c><00:18:13.200><c> we</c><00:18:13.360><c> can</c><00:18:13.600><c> pass</c><00:18:13.919><c> that</c><00:18:14.160><c> string</c><00:18:14.640><c> to</c><00:18:14.799><c> our</c>

00:18:14.950 --> 00:18:14.960 align:start position:0%
a string we can pass that string to our
 

00:18:14.960 --> 00:18:17.669 align:start position:0%
a string we can pass that string to our
float<00:18:15.280><c> function</c><00:18:16.000><c> take</c><00:18:16.240><c> a</c><00:18:16.320><c> look</c><00:18:16.640><c> so</c><00:18:16.880><c> float</c>

00:18:17.669 --> 00:18:17.679 align:start position:0%
float function take a look so float
 

00:18:17.679 --> 00:18:19.990 align:start position:0%
float function take a look so float
parenthesis<00:18:18.799><c> like</c><00:18:19.039><c> this</c>

00:18:19.990 --> 00:18:20.000 align:start position:0%
parenthesis like this
 

00:18:20.000 --> 00:18:22.230 align:start position:0%
parenthesis like this
so<00:18:20.720><c> the</c><00:18:20.960><c> value</c><00:18:21.280><c> that</c><00:18:21.440><c> we're</c><00:18:21.679><c> passing</c><00:18:22.000><c> to</c><00:18:22.160><c> the</c>

00:18:22.230 --> 00:18:22.240 align:start position:0%
so the value that we're passing to the
 

00:18:22.240 --> 00:18:24.230 align:start position:0%
so the value that we're passing to the
float<00:18:22.480><c> function</c><00:18:23.280><c> is</c><00:18:23.440><c> the</c><00:18:23.600><c> value</c><00:18:23.919><c> that</c><00:18:24.160><c> is</c>

00:18:24.230 --> 00:18:24.240 align:start position:0%
float function is the value that is
 

00:18:24.240 --> 00:18:26.950 align:start position:0%
float function is the value that is
returned<00:18:24.960><c> from</c><00:18:25.120><c> the</c><00:18:25.360><c> input</c><00:18:25.679><c> function</c>

00:18:26.950 --> 00:18:26.960 align:start position:0%
returned from the input function
 

00:18:26.960 --> 00:18:29.190 align:start position:0%
returned from the input function
similarly

00:18:29.190 --> 00:18:29.200 align:start position:0%
similarly
 

00:18:29.200 --> 00:18:32.070 align:start position:0%
similarly
we<00:18:29.360><c> call</c><00:18:29.520><c> the</c><00:18:29.679><c> float</c><00:18:29.919><c> function</c><00:18:30.240><c> over</c><00:18:30.400><c> here</c>

00:18:32.070 --> 00:18:32.080 align:start position:0%
we call the float function over here
 

00:18:32.080 --> 00:18:33.430 align:start position:0%
we call the float function over here
now

00:18:33.430 --> 00:18:33.440 align:start position:0%
now
 

00:18:33.440 --> 00:18:35.750 align:start position:0%
now
we<00:18:33.600><c> can</c><00:18:33.840><c> change</c><00:18:34.080><c> this</c><00:18:34.240><c> expression</c><00:18:34.799><c> to</c><00:18:35.039><c> first</c>

00:18:35.750 --> 00:18:35.760 align:start position:0%
we can change this expression to first
 

00:18:35.760 --> 00:18:38.630 align:start position:0%
we can change this expression to first
plus<00:18:36.480><c> second</c><00:18:37.360><c> that</c><00:18:37.600><c> is</c><00:18:37.760><c> another</c><00:18:38.080><c> way</c><00:18:38.240><c> to</c><00:18:38.400><c> write</c>

00:18:38.630 --> 00:18:38.640 align:start position:0%
plus second that is another way to write
 

00:18:38.640 --> 00:18:40.150 align:start position:0%
plus second that is another way to write
this<00:18:38.799><c> piece</c><00:18:39.039><c> of</c><00:18:39.200><c> code</c>

00:18:40.150 --> 00:18:40.160 align:start position:0%
this piece of code
 

00:18:40.160 --> 00:18:41.750 align:start position:0%
this piece of code
so<00:18:40.320><c> type</c><00:18:40.559><c> conversion</c><00:18:41.120><c> is</c><00:18:41.280><c> important</c><00:18:41.600><c> in</c>

00:18:41.750 --> 00:18:41.760 align:start position:0%
so type conversion is important in
 

00:18:41.760 --> 00:18:44.070 align:start position:0%
so type conversion is important in
python<00:18:42.240><c> and</c><00:18:42.640><c> other</c><00:18:42.880><c> programming</c><00:18:43.360><c> languages</c>

00:18:44.070 --> 00:18:44.080 align:start position:0%
python and other programming languages
 

00:18:44.080 --> 00:18:45.590 align:start position:0%
python and other programming languages
there<00:18:44.240><c> are</c><00:18:44.320><c> times</c><00:18:44.640><c> you</c><00:18:44.799><c> need</c><00:18:44.960><c> to</c><00:18:45.039><c> convert</c><00:18:45.440><c> the</c>

00:18:45.590 --> 00:18:45.600 align:start position:0%
there are times you need to convert the
 

00:18:45.600 --> 00:18:53.830 align:start position:0%
there are times you need to convert the
type<00:18:45.840><c> of</c><00:18:46.080><c> variable</c><00:18:46.640><c> to</c><00:18:46.880><c> a</c><00:18:46.960><c> different</c><00:18:47.280><c> type</c>

00:18:53.830 --> 00:18:53.840 align:start position:0%
 
 

00:18:53.840 --> 00:18:55.190 align:start position:0%
 
in<00:18:54.000><c> this</c><00:18:54.160><c> tutorial</c><00:18:54.640><c> i'm</c><00:18:54.720><c> going</c><00:18:54.799><c> to</c><00:18:54.880><c> show</c><00:18:55.039><c> you</c><00:18:55.120><c> a</c>

00:18:55.190 --> 00:18:55.200 align:start position:0%
in this tutorial i'm going to show you a
 

00:18:55.200 --> 00:18:56.710 align:start position:0%
in this tutorial i'm going to show you a
bunch<00:18:55.440><c> of</c><00:18:55.600><c> cool</c><00:18:55.840><c> things</c><00:18:56.080><c> you</c><00:18:56.160><c> can</c><00:18:56.320><c> do</c><00:18:56.480><c> with</c>

00:18:56.710 --> 00:18:56.720 align:start position:0%
bunch of cool things you can do with
 

00:18:56.720 --> 00:18:59.430 align:start position:0%
bunch of cool things you can do with
strings<00:18:57.120><c> in</c><00:18:57.360><c> python</c><00:18:58.400><c> so</c><00:18:58.559><c> let's</c><00:18:58.799><c> start</c><00:18:59.200><c> by</c>

00:18:59.430 --> 00:18:59.440 align:start position:0%
strings in python so let's start by
 

00:18:59.440 --> 00:19:01.750 align:start position:0%
strings in python so let's start by
declaring<00:18:59.840><c> a</c><00:18:59.919><c> variable</c><00:19:00.400><c> called</c><00:19:00.720><c> course</c>

00:19:01.750 --> 00:19:01.760 align:start position:0%
declaring a variable called course
 

00:19:01.760 --> 00:19:04.390 align:start position:0%
declaring a variable called course
and<00:19:02.000><c> set</c><00:19:02.160><c> it</c><00:19:02.240><c> to</c><00:19:02.480><c> python</c><00:19:03.360><c> for</c>

00:19:04.390 --> 00:19:04.400 align:start position:0%
and set it to python for
 

00:19:04.400 --> 00:19:05.990 align:start position:0%
and set it to python for
beginners

00:19:05.990 --> 00:19:06.000 align:start position:0%
beginners
 

00:19:06.000 --> 00:19:07.750 align:start position:0%
beginners
now<00:19:06.160><c> this</c><00:19:06.400><c> string</c><00:19:06.640><c> that</c><00:19:06.799><c> we</c><00:19:06.880><c> have</c><00:19:07.039><c> over</c><00:19:07.200><c> here</c>

00:19:07.750 --> 00:19:07.760 align:start position:0%
now this string that we have over here
 

00:19:07.760 --> 00:19:10.470 align:start position:0%
now this string that we have over here
is<00:19:08.000><c> technically</c><00:19:08.480><c> an</c><00:19:08.799><c> object</c><00:19:09.679><c> an</c><00:19:10.000><c> object</c><00:19:10.320><c> in</c>

00:19:10.470 --> 00:19:10.480 align:start position:0%
is technically an object an object in
 

00:19:10.480 --> 00:19:12.230 align:start position:0%
is technically an object an object in
python<00:19:10.960><c> is</c><00:19:11.039><c> like</c><00:19:11.200><c> an</c><00:19:11.440><c> object</c><00:19:11.760><c> in</c><00:19:11.840><c> the</c><00:19:12.000><c> real</c>

00:19:12.230 --> 00:19:12.240 align:start position:0%
python is like an object in the real
 

00:19:12.240 --> 00:19:14.470 align:start position:0%
python is like an object in the real
world<00:19:12.880><c> as</c><00:19:13.039><c> a</c><00:19:13.120><c> metaphor</c><00:19:13.679><c> think</c><00:19:13.919><c> of</c><00:19:14.000><c> the</c><00:19:14.080><c> remote</c>

00:19:14.470 --> 00:19:14.480 align:start position:0%
world as a metaphor think of the remote
 

00:19:14.480 --> 00:19:16.789 align:start position:0%
world as a metaphor think of the remote
control<00:19:14.799><c> of</c><00:19:14.960><c> your</c><00:19:15.120><c> tv</c><00:19:15.919><c> this</c><00:19:16.080><c> remote</c><00:19:16.400><c> control</c>

00:19:16.789 --> 00:19:16.799 align:start position:0%
control of your tv this remote control
 

00:19:16.799 --> 00:19:18.470 align:start position:0%
control of your tv this remote control
is<00:19:16.960><c> an</c><00:19:17.120><c> object</c><00:19:17.679><c> and</c><00:19:17.840><c> it</c><00:19:17.919><c> has</c><00:19:18.080><c> a</c><00:19:18.160><c> bunch</c><00:19:18.400><c> of</c>

00:19:18.470 --> 00:19:18.480 align:start position:0%
is an object and it has a bunch of
 

00:19:18.480 --> 00:19:20.549 align:start position:0%
is an object and it has a bunch of
capabilities<00:19:19.440><c> it</c><00:19:19.600><c> has</c><00:19:19.679><c> a</c><00:19:19.760><c> bunch</c><00:19:20.000><c> of</c><00:19:20.160><c> buttons</c>

00:19:20.549 --> 00:19:20.559 align:start position:0%
capabilities it has a bunch of buttons
 

00:19:20.559 --> 00:19:23.110 align:start position:0%
capabilities it has a bunch of buttons
for<00:19:20.960><c> turning</c><00:19:21.280><c> your</c><00:19:21.440><c> tv</c><00:19:21.760><c> on</c><00:19:22.160><c> turning</c><00:19:22.480><c> it</c><00:19:22.640><c> off</c>

00:19:23.110 --> 00:19:23.120 align:start position:0%
for turning your tv on turning it off
 

00:19:23.120 --> 00:19:25.110 align:start position:0%
for turning your tv on turning it off
changing<00:19:23.440><c> the</c><00:19:23.600><c> volume</c><00:19:24.000><c> and</c><00:19:24.080><c> so</c><00:19:24.240><c> on</c><00:19:24.799><c> now</c><00:19:24.960><c> in</c>

00:19:25.110 --> 00:19:25.120 align:start position:0%
changing the volume and so on now in
 

00:19:25.120 --> 00:19:27.029 align:start position:0%
changing the volume and so on now in
this<00:19:25.280><c> program</c><00:19:25.840><c> this</c><00:19:26.080><c> course</c><00:19:26.400><c> variable</c><00:19:26.880><c> is</c>

00:19:27.029 --> 00:19:27.039 align:start position:0%
this program this course variable is
 

00:19:27.039 --> 00:19:29.510 align:start position:0%
this program this course variable is
storing<00:19:27.440><c> a</c><00:19:27.600><c> string</c><00:19:28.160><c> object</c><00:19:28.960><c> this</c><00:19:29.200><c> string</c>

00:19:29.510 --> 00:19:29.520 align:start position:0%
storing a string object this string
 

00:19:29.520 --> 00:19:31.830 align:start position:0%
storing a string object this string
object<00:19:29.760><c> has</c><00:19:29.919><c> a</c><00:19:30.000><c> bunch</c><00:19:30.240><c> of</c><00:19:30.400><c> capabilities</c><00:19:31.520><c> so</c><00:19:31.760><c> if</c>

00:19:31.830 --> 00:19:31.840 align:start position:0%
object has a bunch of capabilities so if
 

00:19:31.840 --> 00:19:32.870 align:start position:0%
object has a bunch of capabilities so if
we<00:19:32.000><c> type</c>

00:19:32.870 --> 00:19:32.880 align:start position:0%
we type
 

00:19:32.880 --> 00:19:35.350 align:start position:0%
we type
course<00:19:33.679><c> dot</c><00:19:34.480><c> you</c><00:19:34.559><c> can</c><00:19:34.720><c> see</c><00:19:35.039><c> all</c><00:19:35.200><c> the</c>

00:19:35.350 --> 00:19:35.360 align:start position:0%
course dot you can see all the
 

00:19:35.360 --> 00:19:37.350 align:start position:0%
course dot you can see all the
capabilities<00:19:36.080><c> available</c><00:19:36.720><c> in</c><00:19:36.880><c> a</c><00:19:36.960><c> string</c>

00:19:37.350 --> 00:19:37.360 align:start position:0%
capabilities available in a string
 

00:19:37.360 --> 00:19:39.270 align:start position:0%
capabilities available in a string
object<00:19:38.000><c> these</c><00:19:38.240><c> are</c><00:19:38.400><c> basically</c><00:19:38.799><c> functions</c>

00:19:39.270 --> 00:19:39.280 align:start position:0%
object these are basically functions
 

00:19:39.280 --> 00:19:41.430 align:start position:0%
object these are basically functions
that<00:19:39.360><c> you</c><00:19:39.440><c> can</c><00:19:39.679><c> call</c><00:19:40.080><c> just</c><00:19:40.320><c> like</c><00:19:40.480><c> the</c><00:19:40.640><c> print</c><00:19:41.120><c> or</c>

00:19:41.430 --> 00:19:41.440 align:start position:0%
that you can call just like the print or
 

00:19:41.440 --> 00:19:43.430 align:start position:0%
that you can call just like the print or
input<00:19:41.760><c> functions</c><00:19:42.559><c> the</c><00:19:42.720><c> difference</c><00:19:43.120><c> is</c><00:19:43.280><c> that</c>

00:19:43.430 --> 00:19:43.440 align:start position:0%
input functions the difference is that
 

00:19:43.440 --> 00:19:45.590 align:start position:0%
input functions the difference is that
the<00:19:43.679><c> print</c><00:19:44.160><c> and</c><00:19:44.480><c> input</c><00:19:44.799><c> functions</c><00:19:45.280><c> are</c>

00:19:45.590 --> 00:19:45.600 align:start position:0%
the print and input functions are
 

00:19:45.600 --> 00:19:47.430 align:start position:0%
the print and input functions are
general<00:19:46.000><c> purpose</c><00:19:46.400><c> functions</c><00:19:47.120><c> they</c><00:19:47.280><c> don't</c>

00:19:47.430 --> 00:19:47.440 align:start position:0%
general purpose functions they don't
 

00:19:47.440 --> 00:19:49.590 align:start position:0%
general purpose functions they don't
belong<00:19:47.760><c> to</c><00:19:47.919><c> a</c><00:19:48.000><c> particular</c><00:19:48.559><c> object</c><00:19:49.280><c> but</c><00:19:49.440><c> the</c>

00:19:49.590 --> 00:19:49.600 align:start position:0%
belong to a particular object but the
 

00:19:49.600 --> 00:19:51.590 align:start position:0%
belong to a particular object but the
functions<00:19:49.919><c> you</c><00:19:50.080><c> see</c><00:19:50.240><c> over</c><00:19:50.400><c> here</c><00:19:50.880><c> are</c><00:19:51.120><c> specific</c>

00:19:51.590 --> 00:19:51.600 align:start position:0%
functions you see over here are specific
 

00:19:51.600 --> 00:19:54.470 align:start position:0%
functions you see over here are specific
to<00:19:51.840><c> strings</c><00:19:52.640><c> now</c><00:19:52.880><c> more</c><00:19:53.120><c> accurately</c><00:19:54.000><c> we</c><00:19:54.160><c> refer</c>

00:19:54.470 --> 00:19:54.480 align:start position:0%
to strings now more accurately we refer
 

00:19:54.480 --> 00:19:56.950 align:start position:0%
to strings now more accurately we refer
to<00:19:54.640><c> these</c><00:19:54.880><c> as</c><00:19:55.200><c> methods</c><00:19:56.080><c> so</c><00:19:56.320><c> when</c><00:19:56.480><c> a</c><00:19:56.559><c> function</c>

00:19:56.950 --> 00:19:56.960 align:start position:0%
to these as methods so when a function
 

00:19:56.960 --> 00:19:59.029 align:start position:0%
to these as methods so when a function
is<00:19:57.120><c> part</c><00:19:57.360><c> of</c><00:19:57.440><c> an</c><00:19:57.679><c> object</c><00:19:58.320><c> we</c><00:19:58.480><c> refer</c><00:19:58.720><c> to</c><00:19:58.880><c> that</c>

00:19:59.029 --> 00:19:59.039 align:start position:0%
is part of an object we refer to that
 

00:19:59.039 --> 00:20:00.870 align:start position:0%
is part of an object we refer to that
function<00:19:59.600><c> as</c><00:19:59.760><c> a</c><00:19:59.919><c> method</c>

00:20:00.870 --> 00:20:00.880 align:start position:0%
function as a method
 

00:20:00.880 --> 00:20:03.350 align:start position:0%
function as a method
so<00:20:01.600><c> let's</c><00:20:01.760><c> look</c><00:20:02.000><c> at</c><00:20:02.080><c> a</c><00:20:02.159><c> few</c><00:20:02.320><c> examples</c><00:20:03.039><c> here</c><00:20:03.280><c> we</c>

00:20:03.350 --> 00:20:03.360 align:start position:0%
so let's look at a few examples here we
 

00:20:03.360 --> 00:20:05.990 align:start position:0%
so let's look at a few examples here we
have<00:20:03.440><c> a</c><00:20:03.520><c> function</c><00:20:04.000><c> or</c><00:20:04.400><c> a</c><00:20:04.559><c> method</c><00:20:04.960><c> called</c><00:20:05.280><c> upper</c>

00:20:05.990 --> 00:20:06.000 align:start position:0%
have a function or a method called upper
 

00:20:06.000 --> 00:20:07.830 align:start position:0%
have a function or a method called upper
and<00:20:06.159><c> we</c><00:20:06.320><c> use</c><00:20:06.480><c> that</c><00:20:06.640><c> to</c><00:20:06.799><c> convert</c><00:20:07.200><c> a</c><00:20:07.360><c> string</c><00:20:07.679><c> to</c>

00:20:07.830 --> 00:20:07.840 align:start position:0%
and we use that to convert a string to
 

00:20:07.840 --> 00:20:10.630 align:start position:0%
and we use that to convert a string to
uppercase<00:20:08.960><c> so</c><00:20:09.120><c> if</c><00:20:09.200><c> we</c><00:20:09.440><c> print</c>

00:20:10.630 --> 00:20:10.640 align:start position:0%
uppercase so if we print
 

00:20:10.640 --> 00:20:12.390 align:start position:0%
uppercase so if we print
course.upper

00:20:12.390 --> 00:20:12.400 align:start position:0%
course.upper
 

00:20:12.400 --> 00:20:14.390 align:start position:0%
course.upper
and<00:20:12.559><c> run</c><00:20:12.799><c> this</c><00:20:12.960><c> program</c><00:20:13.760><c> they</c><00:20:13.919><c> can</c><00:20:14.080><c> see</c><00:20:14.240><c> our</c>

00:20:14.390 --> 00:20:14.400 align:start position:0%
and run this program they can see our
 

00:20:14.400 --> 00:20:16.310 align:start position:0%
and run this program they can see our
course<00:20:15.039><c> in</c><00:20:15.200><c> uppercase</c>

00:20:16.310 --> 00:20:16.320 align:start position:0%
course in uppercase
 

00:20:16.320 --> 00:20:17.510 align:start position:0%
course in uppercase
pretty<00:20:16.559><c> useful</c>

00:20:17.510 --> 00:20:17.520 align:start position:0%
pretty useful
 

00:20:17.520 --> 00:20:19.350 align:start position:0%
pretty useful
now<00:20:17.760><c> what</c><00:20:17.919><c> you</c><00:20:18.000><c> need</c><00:20:18.159><c> to</c><00:20:18.240><c> understand</c><00:20:18.720><c> here</c><00:20:19.280><c> is</c>

00:20:19.350 --> 00:20:19.360 align:start position:0%
now what you need to understand here is
 

00:20:19.360 --> 00:20:21.590 align:start position:0%
now what you need to understand here is
that<00:20:19.520><c> this</c><00:20:19.840><c> upper</c><00:20:20.080><c> method</c><00:20:20.559><c> does</c><00:20:20.799><c> not</c><00:20:21.120><c> change</c>

00:20:21.590 --> 00:20:21.600 align:start position:0%
that this upper method does not change
 

00:20:21.600 --> 00:20:24.230 align:start position:0%
that this upper method does not change
our<00:20:21.919><c> original</c><00:20:22.480><c> string</c><00:20:23.120><c> it</c><00:20:23.280><c> will</c><00:20:23.440><c> return</c><00:20:23.840><c> a</c><00:20:23.919><c> new</c>

00:20:24.230 --> 00:20:24.240 align:start position:0%
our original string it will return a new
 

00:20:24.240 --> 00:20:27.510 align:start position:0%
our original string it will return a new
string<00:20:25.039><c> so</c><00:20:25.280><c> right</c><00:20:25.520><c> after</c><00:20:25.840><c> this</c><00:20:26.159><c> if</c><00:20:26.320><c> we</c><00:20:26.559><c> print</c>

00:20:27.510 --> 00:20:27.520 align:start position:0%
string so right after this if we print
 

00:20:27.520 --> 00:20:29.590 align:start position:0%
string so right after this if we print
course

00:20:29.590 --> 00:20:29.600 align:start position:0%
course
 

00:20:29.600 --> 00:20:31.510 align:start position:0%
course
you<00:20:29.679><c> can</c><00:20:29.840><c> see</c><00:20:30.000><c> that</c><00:20:30.159><c> our</c><00:20:30.400><c> course</c><00:20:30.640><c> variable</c><00:20:31.280><c> is</c>

00:20:31.510 --> 00:20:31.520 align:start position:0%
you can see that our course variable is
 

00:20:31.520 --> 00:20:34.390 align:start position:0%
you can see that our course variable is
not<00:20:31.760><c> affected</c><00:20:32.559><c> so</c><00:20:32.720><c> the</c><00:20:32.880><c> upper</c><00:20:33.200><c> method</c><00:20:33.600><c> returns</c>

00:20:34.390 --> 00:20:34.400 align:start position:0%
not affected so the upper method returns
 

00:20:34.400 --> 00:20:35.990 align:start position:0%
not affected so the upper method returns
a<00:20:34.480><c> new</c><00:20:34.799><c> string</c>

00:20:35.990 --> 00:20:36.000 align:start position:0%
a new string
 

00:20:36.000 --> 00:20:38.149 align:start position:0%
a new string
now<00:20:36.240><c> similarly</c><00:20:36.720><c> we</c><00:20:36.880><c> have</c><00:20:37.520><c> another</c><00:20:37.840><c> method</c>

00:20:38.149 --> 00:20:38.159 align:start position:0%
now similarly we have another method
 

00:20:38.159 --> 00:20:40.710 align:start position:0%
now similarly we have another method
called<00:20:38.720><c> lower</c><00:20:39.520><c> for</c><00:20:39.760><c> converting</c><00:20:40.240><c> a</c><00:20:40.320><c> string</c><00:20:40.559><c> to</c>

00:20:40.710 --> 00:20:40.720 align:start position:0%
called lower for converting a string to
 

00:20:40.720 --> 00:20:43.669 align:start position:0%
called lower for converting a string to
lowercase<00:20:41.760><c> we</c><00:20:41.919><c> have</c><00:20:42.000><c> a</c><00:20:42.080><c> method</c><00:20:42.400><c> called</c><00:20:42.960><c> find</c>

00:20:43.669 --> 00:20:43.679 align:start position:0%
lowercase we have a method called find
 

00:20:43.679 --> 00:20:45.270 align:start position:0%
lowercase we have a method called find
to<00:20:43.840><c> see</c><00:20:43.919><c> if</c><00:20:44.080><c> our</c><00:20:44.240><c> string</c><00:20:44.559><c> contains</c><00:20:45.039><c> a</c>

00:20:45.270 --> 00:20:45.280 align:start position:0%
to see if our string contains a
 

00:20:45.280 --> 00:20:47.590 align:start position:0%
to see if our string contains a
character<00:20:45.760><c> or</c><00:20:45.919><c> a</c><00:20:46.000><c> sequence</c><00:20:46.400><c> of</c><00:20:46.559><c> characters</c>

00:20:47.590 --> 00:20:47.600 align:start position:0%
character or a sequence of characters
 

00:20:47.600 --> 00:20:50.149 align:start position:0%
character or a sequence of characters
for<00:20:47.840><c> example</c><00:20:48.559><c> here</c><00:20:48.799><c> we</c><00:20:48.960><c> can</c><00:20:49.120><c> pass</c>

00:20:50.149 --> 00:20:50.159 align:start position:0%
for example here we can pass
 

00:20:50.159 --> 00:20:50.950 align:start position:0%
for example here we can pass
y

00:20:50.950 --> 00:20:50.960 align:start position:0%
y
 

00:20:50.960 --> 00:20:53.350 align:start position:0%
y
and<00:20:51.120><c> this</c><00:20:51.280><c> will</c><00:20:51.440><c> return</c><00:20:52.080><c> the</c><00:20:52.480><c> index</c><00:20:52.960><c> of</c><00:20:53.120><c> the</c>

00:20:53.350 --> 00:20:53.360 align:start position:0%
and this will return the index of the
 

00:20:53.360 --> 00:20:57.270 align:start position:0%
and this will return the index of the
first<00:20:53.760><c> occurrence</c><00:20:54.240><c> of</c><00:20:54.480><c> y</c><00:20:54.799><c> in</c><00:20:54.880><c> our</c><00:20:55.039><c> string</c><00:20:55.919><c> so</c>

00:20:57.270 --> 00:20:57.280 align:start position:0%
first occurrence of y in our string so
 

00:20:57.280 --> 00:20:59.510 align:start position:0%
first occurrence of y in our string so
in<00:20:57.440><c> python</c><00:20:58.320><c> the</c><00:20:58.559><c> index</c><00:20:58.960><c> of</c><00:20:59.039><c> the</c><00:20:59.200><c> first</c>

00:20:59.510 --> 00:20:59.520 align:start position:0%
in python the index of the first
 

00:20:59.520 --> 00:21:01.510 align:start position:0%
in python the index of the first
character<00:20:59.840><c> in</c><00:21:00.000><c> a</c><00:21:00.080><c> string</c><00:21:00.400><c> is</c><00:21:00.559><c> 0.</c><00:21:01.120><c> so</c><00:21:01.280><c> here</c><00:21:01.440><c> we</c>

00:21:01.510 --> 00:21:01.520 align:start position:0%
character in a string is 0. so here we
 

00:21:01.520 --> 00:21:04.390 align:start position:0%
character in a string is 0. so here we
have<00:21:01.679><c> 0</c><00:21:02.000><c> 1</c><00:21:02.240><c> 2</c><00:21:02.400><c> 3</c><00:21:02.640><c> 4</c><00:21:02.880><c> and</c><00:21:02.960><c> so</c><00:21:03.120><c> on</c><00:21:03.760><c> so</c><00:21:03.919><c> when</c><00:21:04.159><c> we</c><00:21:04.240><c> run</c>

00:21:04.390 --> 00:21:04.400 align:start position:0%
have 0 1 2 3 4 and so on so when we run
 

00:21:04.400 --> 00:21:06.470 align:start position:0%
have 0 1 2 3 4 and so on so when we run
this<00:21:04.559><c> program</c><00:21:05.280><c> you're</c><00:21:05.520><c> going</c><00:21:05.679><c> to</c><00:21:05.840><c> see</c><00:21:06.159><c> one</c><00:21:06.400><c> on</c>

00:21:06.470 --> 00:21:06.480 align:start position:0%
this program you're going to see one on
 

00:21:06.480 --> 00:21:09.510 align:start position:0%
this program you're going to see one on
the<00:21:06.559><c> terminal</c><00:21:07.440><c> because</c><00:21:07.679><c> the</c><00:21:07.919><c> index</c><00:21:08.320><c> of</c><00:21:08.559><c> y</c><00:21:09.280><c> is</c>

00:21:09.510 --> 00:21:09.520 align:start position:0%
the terminal because the index of y is
 

00:21:09.520 --> 00:21:11.669 align:start position:0%
the terminal because the index of y is
1.<00:21:09.919><c> take</c><00:21:10.159><c> a</c><00:21:10.240><c> look</c><00:21:10.880><c> first</c><00:21:11.200><c> i'm</c><00:21:11.280><c> going</c><00:21:11.360><c> to</c><00:21:11.440><c> delete</c>

00:21:11.669 --> 00:21:11.679 align:start position:0%
1. take a look first i'm going to delete
 

00:21:11.679 --> 00:21:14.470 align:start position:0%
1. take a look first i'm going to delete
this<00:21:11.919><c> line</c><00:21:12.480><c> we</c><00:21:12.640><c> don't</c><00:21:12.799><c> need</c><00:21:12.960><c> it</c><00:21:13.039><c> anymore</c><00:21:13.840><c> also</c>

00:21:14.470 --> 00:21:14.480 align:start position:0%
this line we don't need it anymore also
 

00:21:14.480 --> 00:21:17.510 align:start position:0%
this line we don't need it anymore also
let's<00:21:14.640><c> do</c><00:21:14.880><c> this</c><00:21:15.120><c> line</c><00:21:16.320><c> let's</c><00:21:16.480><c> run</c><00:21:16.720><c> the</c><00:21:16.799><c> program</c>

00:21:17.510 --> 00:21:17.520 align:start position:0%
let's do this line let's run the program
 

00:21:17.520 --> 00:21:20.070 align:start position:0%
let's do this line let's run the program
there<00:21:17.760><c> you</c><00:21:17.840><c> go</c>

00:21:20.070 --> 00:21:20.080 align:start position:0%
 
 

00:21:20.080 --> 00:21:21.830 align:start position:0%
 
now<00:21:20.320><c> as</c><00:21:20.400><c> i</c><00:21:20.480><c> told</c><00:21:20.640><c> you</c><00:21:20.799><c> before</c><00:21:21.200><c> python</c><00:21:21.679><c> is</c>

00:21:21.830 --> 00:21:21.840 align:start position:0%
now as i told you before python is
 

00:21:21.840 --> 00:21:23.990 align:start position:0%
now as i told you before python is
sensitive<00:21:22.240><c> to</c><00:21:22.400><c> lowercase</c><00:21:23.120><c> and</c><00:21:23.440><c> uppercase</c>

00:21:23.990 --> 00:21:24.000 align:start position:0%
sensitive to lowercase and uppercase
 

00:21:24.000 --> 00:21:28.710 align:start position:0%
sensitive to lowercase and uppercase
letters<00:21:24.720><c> so</c><00:21:24.960><c> if</c><00:21:25.120><c> i</c><00:21:25.280><c> pass</c><00:21:25.919><c> an</c><00:21:26.159><c> uppercase</c><00:21:26.799><c> y</c><00:21:27.039><c> here</c>

00:21:28.710 --> 00:21:28.720 align:start position:0%
letters so if i pass an uppercase y here
 

00:21:28.720 --> 00:21:31.029 align:start position:0%
letters so if i pass an uppercase y here
this<00:21:28.960><c> find</c><00:21:29.200><c> method</c><00:21:29.520><c> returns</c><00:21:30.080><c> negative</c><00:21:30.559><c> 1</c>

00:21:31.029 --> 00:21:31.039 align:start position:0%
this find method returns negative 1
 

00:21:31.039 --> 00:21:32.870 align:start position:0%
this find method returns negative 1
because<00:21:31.280><c> we</c><00:21:31.440><c> don't</c><00:21:31.600><c> have</c><00:21:31.760><c> an</c><00:21:32.000><c> uppercase</c><00:21:32.480><c> y</c><00:21:32.799><c> in</c>

00:21:32.870 --> 00:21:32.880 align:start position:0%
because we don't have an uppercase y in
 

00:21:32.880 --> 00:21:35.430 align:start position:0%
because we don't have an uppercase y in
this<00:21:33.120><c> string</c><00:21:33.919><c> we</c><00:21:34.080><c> can</c><00:21:34.240><c> also</c><00:21:34.480><c> pass</c><00:21:34.799><c> a</c><00:21:35.039><c> sequence</c>

00:21:35.430 --> 00:21:35.440 align:start position:0%
this string we can also pass a sequence
 

00:21:35.440 --> 00:21:38.149 align:start position:0%
this string we can also pass a sequence
of<00:21:35.600><c> characters</c><00:21:36.240><c> for</c><00:21:36.400><c> example</c><00:21:36.960><c> 4.</c><00:21:37.840><c> so</c><00:21:38.000><c> this</c>

00:21:38.149 --> 00:21:38.159 align:start position:0%
of characters for example 4. so this
 

00:21:38.159 --> 00:21:41.190 align:start position:0%
of characters for example 4. so this
will<00:21:38.320><c> return</c><00:21:39.039><c> the</c><00:21:39.280><c> index</c><00:21:39.679><c> of</c><00:21:39.840><c> the</c><00:21:40.000><c> word</c><00:21:40.640><c> 4.</c>

00:21:41.190 --> 00:21:41.200 align:start position:0%
will return the index of the word 4.
 

00:21:41.200 --> 00:21:43.110 align:start position:0%
will return the index of the word 4.
take<00:21:41.360><c> a</c><00:21:41.440><c> look</c>

00:21:43.110 --> 00:21:43.120 align:start position:0%
take a look
 

00:21:43.120 --> 00:21:44.870 align:start position:0%
take a look
so<00:21:43.360><c> it's</c><00:21:43.520><c> 7.</c>

00:21:44.870 --> 00:21:44.880 align:start position:0%
so it's 7.
 

00:21:44.880 --> 00:21:46.230 align:start position:0%
so it's 7.
now<00:21:45.039><c> there</c><00:21:45.200><c> are</c><00:21:45.280><c> times</c><00:21:45.520><c> we</c><00:21:45.600><c> want</c><00:21:45.760><c> to</c><00:21:45.840><c> replace</c>

00:21:46.230 --> 00:21:46.240 align:start position:0%
now there are times we want to replace
 

00:21:46.240 --> 00:21:47.750 align:start position:0%
now there are times we want to replace
something<00:21:46.559><c> in</c><00:21:46.720><c> a</c><00:21:46.799><c> string</c><00:21:47.200><c> with</c><00:21:47.360><c> something</c>

00:21:47.750 --> 00:21:47.760 align:start position:0%
something in a string with something
 

00:21:47.760 --> 00:21:48.470 align:start position:0%
something in a string with something
else

00:21:48.470 --> 00:21:48.480 align:start position:0%
else
 

00:21:48.480 --> 00:21:51.350 align:start position:0%
else
to<00:21:48.640><c> do</c><00:21:48.799><c> that</c><00:21:48.960><c> we</c><00:21:49.120><c> use</c><00:21:49.600><c> the</c><00:21:49.840><c> replace</c><00:21:50.400><c> method</c>

00:21:51.350 --> 00:21:51.360 align:start position:0%
to do that we use the replace method
 

00:21:51.360 --> 00:21:52.789 align:start position:0%
to do that we use the replace method
replace

00:21:52.789 --> 00:21:52.799 align:start position:0%
replace
 

00:21:52.799 --> 00:21:54.710 align:start position:0%
replace
so<00:21:52.960><c> we</c><00:21:53.039><c> can</c><00:21:53.200><c> replace</c><00:21:53.679><c> 4</c>

00:21:54.710 --> 00:21:54.720 align:start position:0%
so we can replace 4
 

00:21:54.720 --> 00:21:55.669 align:start position:0%
so we can replace 4
with

00:21:55.669 --> 00:21:55.679 align:start position:0%
with
 

00:21:55.679 --> 00:21:58.070 align:start position:0%
with
a<00:21:55.919><c> string</c><00:21:56.320><c> containing</c><00:21:56.720><c> the</c><00:21:56.880><c> number</c><00:21:57.280><c> 4.</c><00:21:57.760><c> take</c><00:21:58.000><c> a</c>

00:21:58.070 --> 00:21:58.080 align:start position:0%
a string containing the number 4. take a
 

00:21:58.080 --> 00:21:59.669 align:start position:0%
a string containing the number 4. take a
look

00:21:59.669 --> 00:21:59.679 align:start position:0%
look
 

00:21:59.679 --> 00:22:02.149 align:start position:0%
look
so<00:21:59.919><c> python</c><00:22:00.640><c> for</c><00:22:00.799><c> beginners</c>

00:22:02.149 --> 00:22:02.159 align:start position:0%
so python for beginners
 

00:22:02.159 --> 00:22:03.430 align:start position:0%
so python for beginners
obviously

00:22:03.430 --> 00:22:03.440 align:start position:0%
obviously
 

00:22:03.440 --> 00:22:04.789 align:start position:0%
obviously
if<00:22:03.600><c> you</c><00:22:03.679><c> look</c><00:22:03.840><c> for</c><00:22:04.000><c> a</c><00:22:04.080><c> character</c><00:22:04.480><c> or</c><00:22:04.640><c> a</c>

00:22:04.789 --> 00:22:04.799 align:start position:0%
if you look for a character or a
 

00:22:04.799 --> 00:22:06.710 align:start position:0%
if you look for a character or a
sequence<00:22:05.200><c> of</c><00:22:05.360><c> characters</c><00:22:05.840><c> that</c><00:22:06.080><c> don't</c><00:22:06.400><c> exist</c>

00:22:06.710 --> 00:22:06.720 align:start position:0%
sequence of characters that don't exist
 

00:22:06.720 --> 00:22:08.789 align:start position:0%
sequence of characters that don't exist
in<00:22:06.799><c> our</c><00:22:06.960><c> string</c><00:22:07.520><c> nothing</c><00:22:07.919><c> is</c><00:22:08.000><c> going</c><00:22:08.080><c> to</c><00:22:08.159><c> happen</c>

00:22:08.789 --> 00:22:08.799 align:start position:0%
in our string nothing is going to happen
 

00:22:08.799 --> 00:22:11.350 align:start position:0%
in our string nothing is going to happen
for<00:22:08.960><c> example</c><00:22:09.440><c> if</c><00:22:09.520><c> we</c><00:22:09.679><c> try</c><00:22:09.840><c> to</c><00:22:10.000><c> replace</c><00:22:10.880><c> x</c><00:22:11.120><c> with</c>

00:22:11.350 --> 00:22:11.360 align:start position:0%
for example if we try to replace x with
 

00:22:11.360 --> 00:22:14.710 align:start position:0%
for example if we try to replace x with
4<00:22:12.000><c> obviously</c><00:22:12.720><c> we</c><00:22:12.880><c> don't</c><00:22:13.039><c> have</c><00:22:13.280><c> x</c><00:22:13.520><c> here</c><00:22:14.080><c> so</c>

00:22:14.710 --> 00:22:14.720 align:start position:0%
4 obviously we don't have x here so
 

00:22:14.720 --> 00:22:16.549 align:start position:0%
4 obviously we don't have x here so
nothing<00:22:15.039><c> is</c><00:22:15.120><c> going</c><00:22:15.200><c> to</c><00:22:15.360><c> happen</c>

00:22:16.549 --> 00:22:16.559 align:start position:0%
nothing is going to happen
 

00:22:16.559 --> 00:22:18.950 align:start position:0%
nothing is going to happen
also<00:22:17.280><c> just</c><00:22:17.440><c> like</c><00:22:17.679><c> the</c><00:22:17.840><c> upper</c><00:22:18.159><c> method</c><00:22:18.799><c> the</c>

00:22:18.950 --> 00:22:18.960 align:start position:0%
also just like the upper method the
 

00:22:18.960 --> 00:22:21.190 align:start position:0%
also just like the upper method the
replace<00:22:19.440><c> method</c><00:22:19.840><c> is</c><00:22:20.000><c> not</c><00:22:20.240><c> going</c><00:22:20.480><c> to</c><00:22:20.720><c> modify</c>

00:22:21.190 --> 00:22:21.200 align:start position:0%
replace method is not going to modify
 

00:22:21.200 --> 00:22:22.950 align:start position:0%
replace method is not going to modify
our<00:22:21.360><c> original</c><00:22:21.840><c> string</c><00:22:22.480><c> so</c><00:22:22.640><c> it's</c><00:22:22.720><c> going</c><00:22:22.880><c> to</c>

00:22:22.950 --> 00:22:22.960 align:start position:0%
our original string so it's going to
 

00:22:22.960 --> 00:22:25.110 align:start position:0%
our original string so it's going to
return<00:22:23.440><c> a</c><00:22:23.600><c> new</c><00:22:23.840><c> string</c><00:22:24.559><c> this</c><00:22:24.799><c> is</c><00:22:24.880><c> because</c>

00:22:25.110 --> 00:22:25.120 align:start position:0%
return a new string this is because
 

00:22:25.120 --> 00:22:27.350 align:start position:0%
return a new string this is because
strings<00:22:25.600><c> in</c><00:22:25.840><c> python</c><00:22:26.400><c> and</c><00:22:26.880><c> many</c><00:22:27.120><c> other</c>

00:22:27.350 --> 00:22:27.360 align:start position:0%
strings in python and many other
 

00:22:27.360 --> 00:22:29.750 align:start position:0%
strings in python and many other
programming<00:22:27.760><c> languages</c><00:22:28.320><c> are</c><00:22:28.799><c> immutable</c><00:22:29.600><c> we</c>

00:22:29.750 --> 00:22:29.760 align:start position:0%
programming languages are immutable we
 

00:22:29.760 --> 00:22:31.909 align:start position:0%
programming languages are immutable we
cannot<00:22:30.159><c> change</c><00:22:30.400><c> them</c><00:22:30.559><c> once</c><00:22:30.799><c> we</c><00:22:30.960><c> create</c><00:22:31.280><c> them</c>

00:22:31.909 --> 00:22:31.919 align:start position:0%
cannot change them once we create them
 

00:22:31.919 --> 00:22:33.510 align:start position:0%
cannot change them once we create them
whenever<00:22:32.240><c> we</c><00:22:32.400><c> want</c><00:22:32.480><c> to</c><00:22:32.640><c> change</c><00:22:32.880><c> your</c><00:22:33.039><c> string</c>

00:22:33.510 --> 00:22:33.520 align:start position:0%
whenever we want to change your string
 

00:22:33.520 --> 00:22:35.430 align:start position:0%
whenever we want to change your string
we'll<00:22:33.760><c> end</c><00:22:33.919><c> up</c><00:22:34.000><c> with</c><00:22:34.159><c> a</c><00:22:34.240><c> new</c><00:22:34.480><c> string</c><00:22:34.880><c> object</c><00:22:35.280><c> in</c>

00:22:35.430 --> 00:22:35.440 align:start position:0%
we'll end up with a new string object in
 

00:22:35.440 --> 00:22:36.390 align:start position:0%
we'll end up with a new string object in
memory

00:22:36.390 --> 00:22:36.400 align:start position:0%
memory
 

00:22:36.400 --> 00:22:37.669 align:start position:0%
memory
now<00:22:36.640><c> one</c><00:22:36.799><c> last</c><00:22:36.960><c> thing</c><00:22:37.120><c> i</c><00:22:37.200><c> want</c><00:22:37.280><c> to</c><00:22:37.360><c> cover</c><00:22:37.600><c> in</c>

00:22:37.669 --> 00:22:37.679 align:start position:0%
now one last thing i want to cover in
 

00:22:37.679 --> 00:22:39.430 align:start position:0%
now one last thing i want to cover in
this<00:22:37.840><c> tutorial</c><00:22:38.720><c> there</c><00:22:38.880><c> are</c><00:22:38.960><c> times</c><00:22:39.200><c> you</c><00:22:39.280><c> want</c>

00:22:39.430 --> 00:22:39.440 align:start position:0%
this tutorial there are times you want
 

00:22:39.440 --> 00:22:41.430 align:start position:0%
this tutorial there are times you want
to<00:22:39.520><c> see</c><00:22:39.919><c> if</c><00:22:40.000><c> your</c><00:22:40.240><c> string</c><00:22:40.559><c> contains</c><00:22:41.280><c> a</c>

00:22:41.430 --> 00:22:41.440 align:start position:0%
to see if your string contains a
 

00:22:41.440 --> 00:22:43.750 align:start position:0%
to see if your string contains a
character<00:22:41.919><c> or</c><00:22:42.000><c> a</c><00:22:42.080><c> sequence</c><00:22:42.480><c> of</c><00:22:42.640><c> characters</c>

00:22:43.750 --> 00:22:43.760 align:start position:0%
character or a sequence of characters
 

00:22:43.760 --> 00:22:45.830 align:start position:0%
character or a sequence of characters
one<00:22:43.919><c> way</c><00:22:44.159><c> to</c><00:22:44.240><c> do</c><00:22:44.400><c> that</c><00:22:45.120><c> is</c><00:22:45.200><c> using</c><00:22:45.440><c> the</c><00:22:45.600><c> find</c>

00:22:45.830 --> 00:22:45.840 align:start position:0%
one way to do that is using the find
 

00:22:45.840 --> 00:22:48.789 align:start position:0%
one way to do that is using the find
method<00:22:46.159><c> that</c><00:22:46.320><c> we</c><00:22:46.480><c> talked</c><00:22:46.720><c> about</c><00:22:47.440><c> so</c><00:22:48.000><c> let's</c><00:22:48.240><c> see</c>

00:22:48.789 --> 00:22:48.799 align:start position:0%
method that we talked about so let's see
 

00:22:48.799 --> 00:22:50.070 align:start position:0%
method that we talked about so let's see
if<00:22:49.039><c> our</c><00:22:49.200><c> string</c>

00:22:50.070 --> 00:22:50.080 align:start position:0%
if our string
 

00:22:50.080 --> 00:22:52.310 align:start position:0%
if our string
contains<00:22:51.200><c> python</c>

00:22:52.310 --> 00:22:52.320 align:start position:0%
contains python
 

00:22:52.320 --> 00:22:54.549 align:start position:0%
contains python
now<00:22:52.480><c> when</c><00:22:52.720><c> we</c><00:22:52.880><c> run</c><00:22:53.039><c> this</c><00:22:53.200><c> program</c>

00:22:54.549 --> 00:22:54.559 align:start position:0%
now when we run this program
 

00:22:54.559 --> 00:22:56.390 align:start position:0%
now when we run this program
that<00:22:54.799><c> is</c><00:22:54.880><c> the</c><00:22:55.120><c> index</c><00:22:55.760><c> of</c><00:22:55.919><c> the</c><00:22:56.080><c> first</c>

00:22:56.390 --> 00:22:56.400 align:start position:0%
that is the index of the first
 

00:22:56.400 --> 00:22:58.549 align:start position:0%
that is the index of the first
occurrence<00:22:56.960><c> of</c><00:22:57.039><c> the</c><00:22:57.200><c> word</c><00:22:57.760><c> python</c><00:22:58.320><c> in</c><00:22:58.480><c> our</c>

00:22:58.549 --> 00:22:58.559 align:start position:0%
occurrence of the word python in our
 

00:22:58.559 --> 00:23:01.270 align:start position:0%
occurrence of the word python in our
string<00:22:59.440><c> now</c><00:22:59.600><c> in</c><00:22:59.760><c> python</c><00:23:00.080><c> we</c><00:23:00.240><c> can</c><00:23:00.400><c> also</c><00:23:00.640><c> use</c><00:23:01.039><c> the</c>

00:23:01.270 --> 00:23:01.280 align:start position:0%
string now in python we can also use the
 

00:23:01.280 --> 00:23:03.350 align:start position:0%
string now in python we can also use the
in<00:23:01.600><c> operator</c><00:23:02.559><c> so</c><00:23:02.720><c> we</c><00:23:02.880><c> can</c><00:23:02.960><c> write</c><00:23:03.200><c> an</c>

00:23:03.350 --> 00:23:03.360 align:start position:0%
in operator so we can write an
 

00:23:03.360 --> 00:23:05.510 align:start position:0%
in operator so we can write an
expression<00:23:03.840><c> like</c><00:23:04.000><c> this</c>

00:23:05.510 --> 00:23:05.520 align:start position:0%
expression like this
 

00:23:05.520 --> 00:23:07.110 align:start position:0%
expression like this
we<00:23:05.679><c> type</c><00:23:05.919><c> a</c><00:23:06.000><c> string</c>

00:23:07.110 --> 00:23:07.120 align:start position:0%
we type a string
 

00:23:07.120 --> 00:23:10.870 align:start position:0%
we type a string
python<00:23:08.159><c> then</c><00:23:08.720><c> we</c><00:23:08.880><c> type</c><00:23:09.360><c> in</c><00:23:09.919><c> this</c><00:23:10.159><c> is</c><00:23:10.240><c> a</c><00:23:10.400><c> special</c>

00:23:10.870 --> 00:23:10.880 align:start position:0%
python then we type in this is a special
 

00:23:10.880 --> 00:23:13.270 align:start position:0%
python then we type in this is a special
keyword<00:23:11.360><c> in</c><00:23:11.520><c> python</c><00:23:12.320><c> this</c><00:23:12.480><c> is</c><00:23:12.559><c> what</c><00:23:12.720><c> we</c><00:23:12.880><c> call</c>

00:23:13.270 --> 00:23:13.280 align:start position:0%
keyword in python this is what we call
 

00:23:13.280 --> 00:23:15.029 align:start position:0%
keyword in python this is what we call
the<00:23:13.600><c> in</c><00:23:13.919><c> operator</c>

00:23:15.029 --> 00:23:15.039 align:start position:0%
the in operator
 

00:23:15.039 --> 00:23:17.510 align:start position:0%
the in operator
so<00:23:15.360><c> after</c><00:23:15.760><c> that</c><00:23:16.480><c> we</c><00:23:16.640><c> type</c><00:23:16.880><c> the</c><00:23:17.039><c> name</c><00:23:17.200><c> of</c><00:23:17.360><c> our</c>

00:23:17.510 --> 00:23:17.520 align:start position:0%
so after that we type the name of our
 

00:23:17.520 --> 00:23:18.630 align:start position:0%
so after that we type the name of our
variable

00:23:18.630 --> 00:23:18.640 align:start position:0%
variable
 

00:23:18.640 --> 00:23:20.789 align:start position:0%
variable
so<00:23:18.880><c> with</c><00:23:19.039><c> this</c><00:23:19.200><c> expression</c><00:23:20.240><c> we're</c><00:23:20.480><c> checking</c>

00:23:20.789 --> 00:23:20.799 align:start position:0%
so with this expression we're checking
 

00:23:20.799 --> 00:23:23.750 align:start position:0%
so with this expression we're checking
to<00:23:20.960><c> see</c><00:23:21.200><c> if</c><00:23:21.280><c> we</c><00:23:21.440><c> have</c><00:23:21.679><c> python</c><00:23:22.480><c> in</c><00:23:22.960><c> course</c><00:23:23.600><c> as</c>

00:23:23.750 --> 00:23:23.760 align:start position:0%
to see if we have python in course as
 

00:23:23.760 --> 00:23:25.909 align:start position:0%
to see if we have python in course as
you<00:23:23.840><c> can</c><00:23:24.000><c> see</c><00:23:24.320><c> python</c><00:23:24.640><c> code</c><00:23:24.960><c> is</c><00:23:25.200><c> very</c><00:23:25.440><c> readable</c>

00:23:25.909 --> 00:23:25.919 align:start position:0%
you can see python code is very readable
 

00:23:25.919 --> 00:23:28.230 align:start position:0%
you can see python code is very readable
it's<00:23:26.080><c> like</c><00:23:26.400><c> plain</c><00:23:26.799><c> english</c><00:23:27.600><c> so</c><00:23:27.760><c> when</c><00:23:27.919><c> we</c><00:23:28.080><c> run</c>

00:23:28.230 --> 00:23:28.240 align:start position:0%
it's like plain english so when we run
 

00:23:28.240 --> 00:23:29.669 align:start position:0%
it's like plain english so when we run
this<00:23:28.480><c> program</c>

00:23:29.669 --> 00:23:29.679 align:start position:0%
this program
 

00:23:29.679 --> 00:23:31.750 align:start position:0%
this program
instead<00:23:30.000><c> of</c><00:23:30.080><c> seeing</c><00:23:30.320><c> the</c><00:23:30.640><c> index</c><00:23:31.039><c> of</c><00:23:31.200><c> the</c><00:23:31.360><c> first</c>

00:23:31.750 --> 00:23:31.760 align:start position:0%
instead of seeing the index of the first
 

00:23:31.760 --> 00:23:34.070 align:start position:0%
instead of seeing the index of the first
occurrence<00:23:32.240><c> of</c><00:23:32.400><c> python</c><00:23:33.120><c> we</c><00:23:33.280><c> see</c><00:23:33.440><c> a</c><00:23:33.600><c> boolean</c>

00:23:34.070 --> 00:23:34.080 align:start position:0%
occurrence of python we see a boolean
 

00:23:34.080 --> 00:23:36.230 align:start position:0%
occurrence of python we see a boolean
value<00:23:34.559><c> this</c><00:23:34.799><c> is</c><00:23:34.880><c> more</c><00:23:35.120><c> desirable</c><00:23:35.679><c> in</c><00:23:35.840><c> a</c><00:23:35.919><c> lot</c><00:23:36.080><c> of</c>

00:23:36.230 --> 00:23:36.240 align:start position:0%
value this is more desirable in a lot of
 

00:23:36.240 --> 00:23:37.270 align:start position:0%
value this is more desirable in a lot of
cases

00:23:37.270 --> 00:23:37.280 align:start position:0%
cases
 

00:23:37.280 --> 00:23:38.870 align:start position:0%
cases
next<00:23:37.520><c> we're</c><00:23:37.679><c> going</c><00:23:37.760><c> to</c><00:23:37.840><c> look</c><00:23:37.919><c> at</c><00:23:38.159><c> arithmetic</c>

00:23:38.870 --> 00:23:38.880 align:start position:0%
next we're going to look at arithmetic
 

00:23:38.880 --> 00:23:45.909 align:start position:0%
next we're going to look at arithmetic
operations

00:23:45.909 --> 00:23:45.919 align:start position:0%
 
 

00:23:45.919 --> 00:23:47.190 align:start position:0%
 
in<00:23:46.000><c> this</c><00:23:46.159><c> tutorial</c><00:23:46.640><c> i'm</c><00:23:46.720><c> going</c><00:23:46.799><c> to</c><00:23:46.880><c> show</c><00:23:47.039><c> you</c>

00:23:47.190 --> 00:23:47.200 align:start position:0%
in this tutorial i'm going to show you
 

00:23:47.200 --> 00:23:49.190 align:start position:0%
in this tutorial i'm going to show you
the<00:23:47.279><c> arithmetic</c><00:23:48.080><c> operators</c><00:23:48.480><c> that</c><00:23:48.640><c> we</c><00:23:48.799><c> have</c><00:23:49.039><c> in</c>

00:23:49.190 --> 00:23:49.200 align:start position:0%
the arithmetic operators that we have in
 

00:23:49.200 --> 00:23:51.430 align:start position:0%
the arithmetic operators that we have in
python<00:23:50.000><c> these</c><00:23:50.159><c> are</c><00:23:50.320><c> the</c><00:23:50.480><c> same</c><00:23:50.720><c> arithmetic</c>

00:23:51.430 --> 00:23:51.440 align:start position:0%
python these are the same arithmetic
 

00:23:51.440 --> 00:23:53.190 align:start position:0%
python these are the same arithmetic
operators<00:23:51.840><c> that</c><00:23:52.000><c> we</c><00:23:52.159><c> have</c><00:23:52.320><c> in</c><00:23:52.480><c> math</c><00:23:53.039><c> for</c>

00:23:53.190 --> 00:23:53.200 align:start position:0%
operators that we have in math for
 

00:23:53.200 --> 00:23:55.029 align:start position:0%
operators that we have in math for
example<00:23:53.600><c> we</c><00:23:53.760><c> can</c><00:23:53.919><c> add</c><00:23:54.159><c> numbers</c><00:23:54.720><c> we</c><00:23:54.880><c> can</c>

00:23:55.029 --> 00:23:55.039 align:start position:0%
example we can add numbers we can
 

00:23:55.039 --> 00:23:57.669 align:start position:0%
example we can add numbers we can
subtract<00:23:55.520><c> them</c><00:23:55.840><c> multiply</c><00:23:56.320><c> them</c><00:23:56.559><c> and</c><00:23:56.640><c> so</c><00:23:56.799><c> on</c><00:23:57.440><c> so</c>

00:23:57.669 --> 00:23:57.679 align:start position:0%
subtract them multiply them and so on so
 

00:23:57.679 --> 00:23:58.789 align:start position:0%
subtract them multiply them and so on so
let's<00:23:57.919><c> print</c>

00:23:58.789 --> 00:23:58.799 align:start position:0%
let's print
 

00:23:58.799 --> 00:24:02.149 align:start position:0%
let's print
10<00:23:59.520><c> plus</c><00:24:00.080><c> 3.</c><00:24:00.799><c> let</c><00:24:00.960><c> me</c><00:24:01.120><c> run</c><00:24:01.279><c> this</c><00:24:01.440><c> program</c><00:24:01.919><c> we</c>

00:24:02.149 --> 00:24:02.159 align:start position:0%
10 plus 3. let me run this program we
 

00:24:02.159 --> 00:24:03.350 align:start position:0%
10 plus 3. let me run this program we
have<00:24:02.320><c> 13.</c>

00:24:03.350 --> 00:24:03.360 align:start position:0%
have 13.
 

00:24:03.360 --> 00:24:06.149 align:start position:0%
have 13.
so<00:24:03.600><c> this</c><00:24:03.760><c> is</c><00:24:03.840><c> the</c><00:24:04.080><c> addition</c><00:24:04.880><c> operator</c><00:24:05.760><c> we</c><00:24:05.919><c> also</c>

00:24:06.149 --> 00:24:06.159 align:start position:0%
so this is the addition operator we also
 

00:24:06.159 --> 00:24:07.590 align:start position:0%
so this is the addition operator we also
have<00:24:06.400><c> subtraction</c>

00:24:07.590 --> 00:24:07.600 align:start position:0%
have subtraction
 

00:24:07.600 --> 00:24:09.510 align:start position:0%
have subtraction
we<00:24:07.760><c> have</c><00:24:08.000><c> multiplication</c>

00:24:09.510 --> 00:24:09.520 align:start position:0%
we have multiplication
 

00:24:09.520 --> 00:24:12.310 align:start position:0%
we have multiplication
and<00:24:10.080><c> division</c><00:24:10.960><c> now</c><00:24:11.120><c> technically</c><00:24:11.520><c> we</c><00:24:11.679><c> have</c><00:24:12.080><c> two</c>

00:24:12.310 --> 00:24:12.320 align:start position:0%
and division now technically we have two
 

00:24:12.320 --> 00:24:14.470 align:start position:0%
and division now technically we have two
different<00:24:12.559><c> types</c><00:24:12.799><c> of</c><00:24:12.960><c> division</c><00:24:13.520><c> operators</c><00:24:14.320><c> we</c>

00:24:14.470 --> 00:24:14.480 align:start position:0%
different types of division operators we
 

00:24:14.480 --> 00:24:16.630 align:start position:0%
different types of division operators we
have<00:24:14.559><c> a</c><00:24:14.720><c> division</c><00:24:15.200><c> with</c><00:24:15.440><c> one</c><00:24:15.679><c> slash</c><00:24:16.080><c> and</c>

00:24:16.630 --> 00:24:16.640 align:start position:0%
have a division with one slash and
 

00:24:16.640 --> 00:24:18.950 align:start position:0%
have a division with one slash and
another<00:24:17.279><c> with</c><00:24:17.440><c> two</c><00:24:17.679><c> slashes</c><00:24:18.480><c> let's</c><00:24:18.640><c> look</c><00:24:18.880><c> at</c>

00:24:18.950 --> 00:24:18.960 align:start position:0%
another with two slashes let's look at
 

00:24:18.960 --> 00:24:20.789 align:start position:0%
another with two slashes let's look at
the<00:24:19.039><c> differences</c><00:24:20.000><c> if</c><00:24:20.159><c> you</c><00:24:20.240><c> use</c><00:24:20.400><c> a</c><00:24:20.480><c> single</c>

00:24:20.789 --> 00:24:20.799 align:start position:0%
the differences if you use a single
 

00:24:20.799 --> 00:24:22.390 align:start position:0%
the differences if you use a single
slash

00:24:22.390 --> 00:24:22.400 align:start position:0%
slash
 

00:24:22.400 --> 00:24:24.630 align:start position:0%
slash
we<00:24:22.559><c> get</c><00:24:22.799><c> a</c><00:24:22.960><c> floating</c><00:24:23.360><c> point</c><00:24:23.600><c> number</c><00:24:24.240><c> that</c><00:24:24.400><c> is</c><00:24:24.559><c> a</c>

00:24:24.630 --> 00:24:24.640 align:start position:0%
we get a floating point number that is a
 

00:24:24.640 --> 00:24:26.789 align:start position:0%
we get a floating point number that is a
number<00:24:24.960><c> with</c><00:24:25.120><c> a</c><00:24:25.200><c> decimal</c><00:24:25.679><c> point</c><00:24:26.400><c> but</c><00:24:26.559><c> if</c><00:24:26.720><c> we</c>

00:24:26.789 --> 00:24:26.799 align:start position:0%
number with a decimal point but if we
 

00:24:26.799 --> 00:24:28.470 align:start position:0%
number with a decimal point but if we
use<00:24:27.039><c> double</c><00:24:27.360><c> slashes</c>

00:24:28.470 --> 00:24:28.480 align:start position:0%
use double slashes
 

00:24:28.480 --> 00:24:29.590 align:start position:0%
use double slashes
we<00:24:28.720><c> get</c>

00:24:29.590 --> 00:24:29.600 align:start position:0%
we get
 

00:24:29.600 --> 00:24:33.269 align:start position:0%
we get
an<00:24:29.840><c> integer</c><00:24:30.400><c> a</c><00:24:30.559><c> whole</c><00:24:30.840><c> number</c><00:24:32.240><c> we</c><00:24:32.400><c> also</c><00:24:32.640><c> have</c>

00:24:33.269 --> 00:24:33.279 align:start position:0%
an integer a whole number we also have
 

00:24:33.279 --> 00:24:35.430 align:start position:0%
an integer a whole number we also have
the<00:24:33.520><c> modulus</c><00:24:34.080><c> operator</c><00:24:34.559><c> that</c><00:24:34.799><c> is</c><00:24:34.960><c> indicated</c>

00:24:35.430 --> 00:24:35.440 align:start position:0%
the modulus operator that is indicated
 

00:24:35.440 --> 00:24:38.070 align:start position:0%
the modulus operator that is indicated
by<00:24:35.600><c> a</c><00:24:35.679><c> percent</c><00:24:36.080><c> sign</c><00:24:36.720><c> and</c><00:24:36.880><c> this</c><00:24:37.120><c> returns</c><00:24:37.840><c> the</c>

00:24:38.070 --> 00:24:38.080 align:start position:0%
by a percent sign and this returns the
 

00:24:38.080 --> 00:24:40.149 align:start position:0%
by a percent sign and this returns the
remainder<00:24:38.559><c> of</c><00:24:38.640><c> the</c><00:24:38.799><c> division</c><00:24:39.360><c> of</c><00:24:39.600><c> ten</c><00:24:39.919><c> by</c>

00:24:40.149 --> 00:24:40.159 align:start position:0%
remainder of the division of ten by
 

00:24:40.159 --> 00:24:41.750 align:start position:0%
remainder of the division of ten by
three<00:24:40.880><c> so</c>

00:24:41.750 --> 00:24:41.760 align:start position:0%
three so
 

00:24:41.760 --> 00:24:44.149 align:start position:0%
three so
that<00:24:42.000><c> is</c><00:24:42.159><c> one</c><00:24:42.880><c> and</c><00:24:43.120><c> finally</c><00:24:43.520><c> we</c><00:24:43.679><c> have</c><00:24:44.000><c> the</c>

00:24:44.149 --> 00:24:44.159 align:start position:0%
that is one and finally we have the
 

00:24:44.159 --> 00:24:46.630 align:start position:0%
that is one and finally we have the
exponent<00:24:44.799><c> operator</c><00:24:45.279><c> that</c><00:24:45.520><c> is</c><00:24:45.679><c> indicated</c><00:24:46.320><c> by</c>

00:24:46.630 --> 00:24:46.640 align:start position:0%
exponent operator that is indicated by
 

00:24:46.640 --> 00:24:49.909 align:start position:0%
exponent operator that is indicated by
two<00:24:46.960><c> asterisks</c><00:24:47.919><c> so</c><00:24:48.080><c> this</c><00:24:48.320><c> is</c><00:24:48.559><c> 10</c><00:24:49.039><c> to</c><00:24:49.200><c> the</c><00:24:49.440><c> power</c>

00:24:49.909 --> 00:24:49.919 align:start position:0%
two asterisks so this is 10 to the power
 

00:24:49.919 --> 00:24:52.549 align:start position:0%
two asterisks so this is 10 to the power
of<00:24:50.159><c> three</c><00:24:50.720><c> so</c><00:24:50.880><c> when</c><00:24:51.039><c> we</c><00:24:51.200><c> run</c><00:24:51.360><c> this</c><00:24:51.600><c> we</c><00:24:51.760><c> get</c><00:24:52.400><c> a</c>

00:24:52.549 --> 00:24:52.559 align:start position:0%
of three so when we run this we get a
 

00:24:52.559 --> 00:24:53.990 align:start position:0%
of three so when we run this we get a
thousand

00:24:53.990 --> 00:24:54.000 align:start position:0%
thousand
 

00:24:54.000 --> 00:24:56.470 align:start position:0%
thousand
now<00:24:54.720><c> for</c><00:24:55.039><c> all</c><00:24:55.200><c> these</c><00:24:55.440><c> operators</c><00:24:55.919><c> that</c><00:24:56.080><c> you</c><00:24:56.159><c> saw</c>

00:24:56.470 --> 00:24:56.480 align:start position:0%
now for all these operators that you saw
 

00:24:56.480 --> 00:24:59.029 align:start position:0%
now for all these operators that you saw
we<00:24:56.640><c> have</c><00:24:56.880><c> an</c><00:24:57.120><c> augmented</c><00:24:57.760><c> assignment</c><00:24:58.400><c> operator</c>

00:24:59.029 --> 00:24:59.039 align:start position:0%
we have an augmented assignment operator
 

00:24:59.039 --> 00:25:01.350 align:start position:0%
we have an augmented assignment operator
let<00:24:59.200><c> me</c><00:24:59.360><c> explain</c><00:24:59.679><c> what</c><00:24:59.919><c> it</c><00:25:00.000><c> means</c><00:25:00.640><c> so</c><00:25:01.200><c> let's</c>

00:25:01.350 --> 00:25:01.360 align:start position:0%
let me explain what it means so let's
 

00:25:01.360 --> 00:25:03.669 align:start position:0%
let me explain what it means so let's
say<00:25:01.600><c> we</c><00:25:01.679><c> have</c><00:25:01.840><c> a</c><00:25:01.919><c> variable</c><00:25:02.400><c> called</c><00:25:02.799><c> x</c>

00:25:03.669 --> 00:25:03.679 align:start position:0%
say we have a variable called x
 

00:25:03.679 --> 00:25:05.510 align:start position:0%
say we have a variable called x
and<00:25:03.919><c> we</c><00:25:04.080><c> set</c><00:25:04.320><c> it</c><00:25:04.400><c> to</c><00:25:04.559><c> 10.</c>

00:25:05.510 --> 00:25:05.520 align:start position:0%
and we set it to 10.
 

00:25:05.520 --> 00:25:07.510 align:start position:0%
and we set it to 10.
now<00:25:05.679><c> we</c><00:25:05.840><c> want</c><00:25:05.919><c> to</c><00:25:06.080><c> increment</c><00:25:06.559><c> the</c><00:25:06.720><c> value</c><00:25:07.039><c> of</c><00:25:07.200><c> x</c>

00:25:07.510 --> 00:25:07.520 align:start position:0%
now we want to increment the value of x
 

00:25:07.520 --> 00:25:10.070 align:start position:0%
now we want to increment the value of x
by<00:25:07.760><c> 3.</c><00:25:08.400><c> so</c><00:25:08.559><c> we</c><00:25:08.720><c> have</c><00:25:08.799><c> to</c><00:25:08.880><c> write</c><00:25:09.120><c> code</c><00:25:09.360><c> like</c><00:25:09.520><c> this</c>

00:25:10.070 --> 00:25:10.080 align:start position:0%
by 3. so we have to write code like this
 

00:25:10.080 --> 00:25:10.950 align:start position:0%
by 3. so we have to write code like this
x

00:25:10.950 --> 00:25:10.960 align:start position:0%
x
 

00:25:10.960 --> 00:25:14.070 align:start position:0%
x
equals<00:25:11.440><c> x</c><00:25:11.919><c> plus</c><00:25:12.240><c> 3.</c><00:25:12.960><c> when</c><00:25:13.200><c> python</c><00:25:13.679><c> executes</c>

00:25:14.070 --> 00:25:14.080 align:start position:0%
equals x plus 3. when python executes
 

00:25:14.080 --> 00:25:16.070 align:start position:0%
equals x plus 3. when python executes
this<00:25:14.240><c> code</c><00:25:14.799><c> it's</c><00:25:14.960><c> going</c><00:25:15.120><c> to</c><00:25:15.360><c> evaluate</c><00:25:15.919><c> this</c>

00:25:16.070 --> 00:25:16.080 align:start position:0%
this code it's going to evaluate this
 

00:25:16.080 --> 00:25:18.230 align:start position:0%
this code it's going to evaluate this
expression<00:25:16.640><c> or</c><00:25:16.799><c> this</c><00:25:16.960><c> piece</c><00:25:17.200><c> of</c><00:25:17.360><c> code</c><00:25:18.000><c> the</c>

00:25:18.230 --> 00:25:18.240 align:start position:0%
expression or this piece of code the
 

00:25:18.240 --> 00:25:20.310 align:start position:0%
expression or this piece of code the
result<00:25:18.640><c> of</c><00:25:18.720><c> this</c><00:25:18.880><c> expression</c><00:25:19.360><c> is</c><00:25:19.520><c> 10</c><00:25:19.760><c> plus</c><00:25:20.080><c> 3</c>

00:25:20.310 --> 00:25:20.320 align:start position:0%
result of this expression is 10 plus 3
 

00:25:20.320 --> 00:25:23.669 align:start position:0%
result of this expression is 10 plus 3
which<00:25:20.480><c> is</c><00:25:20.640><c> 13.</c><00:25:21.520><c> then</c><00:25:21.760><c> it</c><00:25:21.840><c> will</c><00:25:22.080><c> store</c><00:25:22.640><c> 13</c><00:25:23.520><c> in</c>

00:25:23.669 --> 00:25:23.679 align:start position:0%
which is 13. then it will store 13 in
 

00:25:23.679 --> 00:25:24.789 align:start position:0%
which is 13. then it will store 13 in
the<00:25:23.840><c> x</c>

00:25:24.789 --> 00:25:24.799 align:start position:0%
the x
 

00:25:24.799 --> 00:25:26.549 align:start position:0%
the x
now<00:25:25.039><c> there</c><00:25:25.200><c> is</c><00:25:25.440><c> another</c><00:25:25.760><c> way</c><00:25:25.919><c> to</c><00:25:26.080><c> achieve</c><00:25:26.400><c> the</c>

00:25:26.549 --> 00:25:26.559 align:start position:0%
now there is another way to achieve the
 

00:25:26.559 --> 00:25:29.430 align:start position:0%
now there is another way to achieve the
same<00:25:26.799><c> result</c><00:25:27.279><c> using</c><00:25:27.600><c> less</c><00:25:27.840><c> code</c><00:25:28.640><c> we</c><00:25:28.799><c> can</c><00:25:28.960><c> type</c>

00:25:29.430 --> 00:25:29.440 align:start position:0%
same result using less code we can type
 

00:25:29.440 --> 00:25:32.390 align:start position:0%
same result using less code we can type
x<00:25:30.159><c> plus</c><00:25:30.799><c> equal</c><00:25:31.600><c> three</c>

00:25:32.390 --> 00:25:32.400 align:start position:0%
x plus equal three
 

00:25:32.400 --> 00:25:34.310 align:start position:0%
x plus equal three
what<00:25:32.559><c> we</c><00:25:32.720><c> have</c><00:25:32.880><c> on</c><00:25:32.960><c> line</c><00:25:33.200><c> three</c><00:25:33.520><c> is</c><00:25:33.760><c> exactly</c>

00:25:34.310 --> 00:25:34.320 align:start position:0%
what we have on line three is exactly
 

00:25:34.320 --> 00:25:36.950 align:start position:0%
what we have on line three is exactly
identical<00:25:35.120><c> to</c><00:25:35.279><c> what</c><00:25:35.520><c> we</c><00:25:35.600><c> have</c><00:25:35.760><c> on</c><00:25:35.919><c> line</c><00:25:36.159><c> two</c><00:25:36.799><c> so</c>

00:25:36.950 --> 00:25:36.960 align:start position:0%
identical to what we have on line two so
 

00:25:36.960 --> 00:25:38.630 align:start position:0%
identical to what we have on line two so
what<00:25:37.120><c> we</c><00:25:37.279><c> have</c><00:25:37.440><c> here</c><00:25:37.679><c> is</c><00:25:37.840><c> called</c><00:25:38.400><c> the</c>

00:25:38.630 --> 00:25:38.640 align:start position:0%
what we have here is called the
 

00:25:38.640 --> 00:25:41.669 align:start position:0%
what we have here is called the
augmented<00:25:39.679><c> assignment</c><00:25:40.559><c> operator</c><00:25:41.279><c> so</c><00:25:41.440><c> we</c><00:25:41.600><c> have</c>

00:25:41.669 --> 00:25:41.679 align:start position:0%
augmented assignment operator so we have
 

00:25:41.679 --> 00:25:43.669 align:start position:0%
augmented assignment operator so we have
this<00:25:41.919><c> assignment</c><00:25:42.480><c> operator</c><00:25:43.120><c> but</c><00:25:43.279><c> we</c><00:25:43.440><c> have</c>

00:25:43.669 --> 00:25:43.679 align:start position:0%
this assignment operator but we have
 

00:25:43.679 --> 00:25:46.230 align:start position:0%
this assignment operator but we have
augmented<00:25:44.480><c> or</c><00:25:45.039><c> enhanced</c><00:25:45.520><c> it</c>

00:25:46.230 --> 00:25:46.240 align:start position:0%
augmented or enhanced it
 

00:25:46.240 --> 00:25:48.230 align:start position:0%
augmented or enhanced it
now<00:25:46.400><c> here</c><00:25:46.559><c> we</c><00:25:46.640><c> can</c><00:25:46.799><c> also</c><00:25:47.039><c> use</c>

00:25:48.230 --> 00:25:48.240 align:start position:0%
now here we can also use
 

00:25:48.240 --> 00:25:50.710 align:start position:0%
now here we can also use
subtraction<00:25:49.279><c> to</c><00:25:49.440><c> decrease</c><00:25:49.840><c> the</c><00:25:50.080><c> value</c><00:25:50.320><c> of</c><00:25:50.480><c> x</c>

00:25:50.710 --> 00:25:50.720 align:start position:0%
subtraction to decrease the value of x
 

00:25:50.720 --> 00:25:54.230 align:start position:0%
subtraction to decrease the value of x
by<00:25:50.960><c> 3</c><00:25:51.520><c> we</c><00:25:51.679><c> can</c><00:25:51.840><c> use</c><00:25:52.320><c> multiplication</c><00:25:53.039><c> and</c><00:25:53.200><c> so</c><00:25:53.360><c> on</c>

00:25:54.230 --> 00:25:54.240 align:start position:0%
by 3 we can use multiplication and so on
 

00:25:54.240 --> 00:25:56.310 align:start position:0%
by 3 we can use multiplication and so on
so<00:25:54.400><c> these</c><00:25:54.559><c> are</c><00:25:54.640><c> the</c><00:25:54.799><c> arithmetic</c><00:25:55.440><c> operators</c><00:25:56.080><c> in</c>

00:25:56.310 --> 00:25:56.320 align:start position:0%
so these are the arithmetic operators in
 

00:25:56.320 --> 00:26:03.190 align:start position:0%
so these are the arithmetic operators in
python

00:26:03.190 --> 00:26:03.200 align:start position:0%
 
 

00:26:03.200 --> 00:26:04.950 align:start position:0%
 
all<00:26:03.360><c> right</c><00:26:03.440><c> let</c><00:26:03.600><c> me</c><00:26:03.679><c> ask</c><00:26:03.840><c> you</c><00:26:03.919><c> a</c><00:26:04.080><c> question</c><00:26:04.799><c> i'm</c>

00:26:04.950 --> 00:26:04.960 align:start position:0%
all right let me ask you a question i'm
 

00:26:04.960 --> 00:26:07.029 align:start position:0%
all right let me ask you a question i'm
going<00:26:05.120><c> to</c><00:26:05.200><c> declare</c><00:26:05.440><c> a</c><00:26:05.520><c> variable</c><00:26:05.919><c> called</c><00:26:06.240><c> x</c><00:26:06.880><c> and</c>

00:26:07.029 --> 00:26:07.039 align:start position:0%
going to declare a variable called x and
 

00:26:07.039 --> 00:26:10.470 align:start position:0%
going to declare a variable called x and
set<00:26:07.279><c> it</c><00:26:07.360><c> to</c><00:26:07.520><c> 10</c><00:26:08.080><c> plus</c><00:26:08.400><c> 3</c><00:26:08.960><c> times</c><00:26:09.360><c> 2.</c><00:26:10.159><c> what</c><00:26:10.320><c> do</c><00:26:10.400><c> you</c>

00:26:10.470 --> 00:26:10.480 align:start position:0%
set it to 10 plus 3 times 2. what do you
 

00:26:10.480 --> 00:26:12.470 align:start position:0%
set it to 10 plus 3 times 2. what do you
think<00:26:10.640><c> is</c><00:26:10.799><c> the</c><00:26:10.960><c> result</c><00:26:11.360><c> of</c><00:26:11.440><c> this</c><00:26:11.600><c> expression</c>

00:26:12.470 --> 00:26:12.480 align:start position:0%
think is the result of this expression
 

00:26:12.480 --> 00:26:14.230 align:start position:0%
think is the result of this expression
this<00:26:12.720><c> is</c><00:26:12.799><c> a</c><00:26:12.880><c> basic</c><00:26:13.200><c> math</c><00:26:13.600><c> question</c><00:26:14.000><c> that</c>

00:26:14.230 --> 00:26:14.240 align:start position:0%
this is a basic math question that
 

00:26:14.240 --> 00:26:16.310 align:start position:0%
this is a basic math question that
unfortunately<00:26:15.120><c> a</c><00:26:15.200><c> lot</c><00:26:15.440><c> of</c><00:26:15.520><c> people</c><00:26:15.840><c> fail</c><00:26:16.159><c> to</c>

00:26:16.310 --> 00:26:16.320 align:start position:0%
unfortunately a lot of people fail to
 

00:26:16.320 --> 00:26:17.190 align:start position:0%
unfortunately a lot of people fail to
answer

00:26:17.190 --> 00:26:17.200 align:start position:0%
answer
 

00:26:17.200 --> 00:26:20.470 align:start position:0%
answer
the<00:26:17.360><c> answer</c><00:26:17.760><c> is</c><00:26:18.240><c> 16.</c><00:26:19.120><c> here's</c><00:26:19.440><c> the</c><00:26:19.520><c> reason</c><00:26:20.320><c> in</c>

00:26:20.470 --> 00:26:20.480 align:start position:0%
the answer is 16. here's the reason in
 

00:26:20.480 --> 00:26:22.149 align:start position:0%
the answer is 16. here's the reason in
math<00:26:20.720><c> we</c><00:26:20.880><c> have</c><00:26:20.960><c> this</c><00:26:21.200><c> concept</c><00:26:21.600><c> called</c>

00:26:22.149 --> 00:26:22.159 align:start position:0%
math we have this concept called
 

00:26:22.159 --> 00:26:24.710 align:start position:0%
math we have this concept called
operator<00:26:22.799><c> precedence</c><00:26:23.679><c> and</c><00:26:23.840><c> that</c><00:26:24.080><c> determines</c>

00:26:24.710 --> 00:26:24.720 align:start position:0%
operator precedence and that determines
 

00:26:24.720 --> 00:26:26.870 align:start position:0%
operator precedence and that determines
the<00:26:24.880><c> order</c><00:26:25.279><c> in</c><00:26:25.440><c> which</c><00:26:25.919><c> these</c><00:26:26.240><c> operators</c><00:26:26.720><c> are</c>

00:26:26.870 --> 00:26:26.880 align:start position:0%
the order in which these operators are
 

00:26:26.880 --> 00:26:30.070 align:start position:0%
the order in which these operators are
applied<00:26:27.760><c> so</c><00:26:28.320><c> multiplication</c><00:26:29.200><c> and</c><00:26:29.600><c> division</c>

00:26:30.070 --> 00:26:30.080 align:start position:0%
applied so multiplication and division
 

00:26:30.080 --> 00:26:32.149 align:start position:0%
applied so multiplication and division
have<00:26:30.320><c> a</c><00:26:30.400><c> higher</c><00:26:30.720><c> order</c><00:26:31.360><c> so</c><00:26:31.520><c> this</c><00:26:31.760><c> part</c><00:26:32.000><c> of</c><00:26:32.080><c> the</c>

00:26:32.149 --> 00:26:32.159 align:start position:0%
have a higher order so this part of the
 

00:26:32.159 --> 00:26:34.630 align:start position:0%
have a higher order so this part of the
expression<00:26:32.640><c> gets</c><00:26:32.960><c> evaluated</c><00:26:33.600><c> first</c><00:26:34.240><c> so</c><00:26:34.480><c> 2</c>

00:26:34.630 --> 00:26:34.640 align:start position:0%
expression gets evaluated first so 2
 

00:26:34.640 --> 00:26:36.230 align:start position:0%
expression gets evaluated first so 2
times<00:26:34.880><c> 3</c><00:26:35.279><c> is</c><00:26:35.440><c> 6</c>

00:26:36.230 --> 00:26:36.240 align:start position:0%
times 3 is 6
 

00:26:36.240 --> 00:26:39.110 align:start position:0%
times 3 is 6
and<00:26:36.480><c> then</c><00:26:36.720><c> the</c><00:26:36.880><c> result</c><00:26:37.520><c> is</c><00:26:37.760><c> added</c><00:26:38.080><c> to</c><00:26:38.320><c> 10.</c><00:26:38.880><c> that</c>

00:26:39.110 --> 00:26:39.120 align:start position:0%
and then the result is added to 10. that
 

00:26:39.120 --> 00:26:40.950 align:start position:0%
and then the result is added to 10. that
is<00:26:39.279><c> why</c><00:26:39.600><c> the</c><00:26:39.760><c> result</c><00:26:40.080><c> of</c><00:26:40.159><c> this</c><00:26:40.400><c> expression</c><00:26:40.799><c> is</c>

00:26:40.950 --> 00:26:40.960 align:start position:0%
is why the result of this expression is
 

00:26:40.960 --> 00:26:44.230 align:start position:0%
is why the result of this expression is
16.<00:26:41.840><c> now</c><00:26:42.080><c> in</c><00:26:42.240><c> python</c><00:26:42.960><c> operator</c><00:26:43.520><c> precedence</c><00:26:44.080><c> is</c>

00:26:44.230 --> 00:26:44.240 align:start position:0%
16. now in python operator precedence is
 

00:26:44.240 --> 00:26:46.149 align:start position:0%
16. now in python operator precedence is
exactly<00:26:44.640><c> like</c><00:26:44.880><c> math</c><00:26:45.360><c> but</c><00:26:45.520><c> we</c><00:26:45.679><c> can</c><00:26:45.840><c> always</c>

00:26:46.149 --> 00:26:46.159 align:start position:0%
exactly like math but we can always
 

00:26:46.159 --> 00:26:48.710 align:start position:0%
exactly like math but we can always
change<00:26:46.480><c> it</c><00:26:46.640><c> using</c><00:26:46.880><c> parenthesis</c><00:26:47.919><c> for</c><00:26:48.080><c> example</c>

00:26:48.710 --> 00:26:48.720 align:start position:0%
change it using parenthesis for example
 

00:26:48.720 --> 00:26:51.110 align:start position:0%
change it using parenthesis for example
in<00:26:48.799><c> this</c><00:26:49.039><c> expression</c><00:26:49.840><c> if</c><00:26:50.000><c> you</c><00:26:50.080><c> want</c><00:26:50.400><c> 10</c><00:26:50.640><c> plus</c><00:26:50.880><c> 3</c>

00:26:51.110 --> 00:26:51.120 align:start position:0%
in this expression if you want 10 plus 3
 

00:26:51.120 --> 00:26:53.669 align:start position:0%
in this expression if you want 10 plus 3
to<00:26:51.279><c> be</c><00:26:51.360><c> evaluated</c><00:26:52.080><c> first</c><00:26:52.640><c> we</c><00:26:52.799><c> can</c><00:26:53.120><c> wrap</c><00:26:53.360><c> it</c><00:26:53.520><c> in</c>

00:26:53.669 --> 00:26:53.679 align:start position:0%
to be evaluated first we can wrap it in
 

00:26:53.679 --> 00:26:55.029 align:start position:0%
to be evaluated first we can wrap it in
parenthesis

00:26:55.029 --> 00:26:55.039 align:start position:0%
parenthesis
 

00:26:55.039 --> 00:26:56.789 align:start position:0%
parenthesis
so

00:26:56.789 --> 00:26:56.799 align:start position:0%
so
 

00:26:56.799 --> 00:26:59.190 align:start position:0%
so
like<00:26:57.039><c> this</c><00:26:57.760><c> now</c><00:26:57.919><c> when</c><00:26:58.080><c> we</c><00:26:58.240><c> execute</c><00:26:58.640><c> this</c><00:26:58.799><c> code</c>

00:26:59.190 --> 00:26:59.200 align:start position:0%
like this now when we execute this code
 

00:26:59.200 --> 00:27:02.149 align:start position:0%
like this now when we execute this code
we're<00:26:59.440><c> going</c><00:26:59.600><c> to</c><00:26:59.679><c> see</c><00:26:59.919><c> 26</c><00:27:00.799><c> because</c><00:27:01.120><c> 10</c><00:27:01.360><c> plus</c><00:27:01.600><c> 3</c>

00:27:02.149 --> 00:27:02.159 align:start position:0%
we're going to see 26 because 10 plus 3
 

00:27:02.159 --> 00:27:05.350 align:start position:0%
we're going to see 26 because 10 plus 3
is<00:27:02.400><c> 13</c><00:27:03.200><c> and</c><00:27:03.360><c> that</c><00:27:03.520><c> divided</c><00:27:03.919><c> by</c><00:27:04.080><c> 2</c><00:27:04.320><c> is</c><00:27:04.480><c> 26.</c><00:27:05.120><c> let's</c>

00:27:05.350 --> 00:27:05.360 align:start position:0%
is 13 and that divided by 2 is 26. let's
 

00:27:05.360 --> 00:27:08.149 align:start position:0%
is 13 and that divided by 2 is 26. let's
verify<00:27:05.760><c> this</c><00:27:06.080><c> so</c><00:27:06.320><c> print</c><00:27:06.880><c> x</c>

00:27:08.149 --> 00:27:08.159 align:start position:0%
verify this so print x
 

00:27:08.159 --> 00:27:15.590 align:start position:0%
verify this so print x
and<00:27:08.400><c> we</c><00:27:08.559><c> get</c><00:27:08.720><c> 26.</c>

00:27:15.590 --> 00:27:15.600 align:start position:0%
 
 

00:27:15.600 --> 00:27:17.029 align:start position:0%
 
so<00:27:15.760><c> you</c><00:27:15.840><c> learn</c><00:27:16.080><c> about</c><00:27:16.240><c> the</c><00:27:16.320><c> arithmetic</c>

00:27:17.029 --> 00:27:17.039 align:start position:0%
so you learn about the arithmetic
 

00:27:17.039 --> 00:27:19.430 align:start position:0%
so you learn about the arithmetic
operators<00:27:17.600><c> in</c><00:27:17.760><c> python</c><00:27:18.559><c> now</c><00:27:18.799><c> in</c><00:27:18.880><c> python</c><00:27:19.279><c> we</c>

00:27:19.430 --> 00:27:19.440 align:start position:0%
operators in python now in python we
 

00:27:19.440 --> 00:27:21.750 align:start position:0%
operators in python now in python we
have<00:27:19.919><c> another</c><00:27:20.320><c> set</c><00:27:20.559><c> of</c><00:27:20.720><c> operators</c><00:27:21.279><c> called</c>

00:27:21.750 --> 00:27:21.760 align:start position:0%
have another set of operators called
 

00:27:21.760 --> 00:27:23.990 align:start position:0%
have another set of operators called
comparison<00:27:22.480><c> operators</c><00:27:23.360><c> we</c><00:27:23.520><c> use</c><00:27:23.760><c> these</c>

00:27:23.990 --> 00:27:24.000 align:start position:0%
comparison operators we use these
 

00:27:24.000 --> 00:27:26.230 align:start position:0%
comparison operators we use these
operators<00:27:24.559><c> to</c><00:27:24.720><c> compare</c><00:27:25.200><c> values</c><00:27:25.760><c> let</c><00:27:25.919><c> me</c><00:27:26.080><c> show</c>

00:27:26.230 --> 00:27:26.240 align:start position:0%
operators to compare values let me show
 

00:27:26.240 --> 00:27:28.070 align:start position:0%
operators to compare values let me show
you<00:27:26.799><c> so</c><00:27:27.120><c> i'm</c><00:27:27.279><c> going</c><00:27:27.360><c> to</c><00:27:27.440><c> declare</c><00:27:27.679><c> a</c><00:27:27.760><c> variable</c>

00:27:28.070 --> 00:27:28.080 align:start position:0%
you so i'm going to declare a variable
 

00:27:28.080 --> 00:27:29.269 align:start position:0%
you so i'm going to declare a variable
called<00:27:28.399><c> x</c>

00:27:29.269 --> 00:27:29.279 align:start position:0%
called x
 

00:27:29.279 --> 00:27:32.310 align:start position:0%
called x
and<00:27:29.440><c> set</c><00:27:29.600><c> it</c><00:27:29.679><c> to</c><00:27:29.840><c> an</c><00:27:29.919><c> expression</c><00:27:30.399><c> like</c><00:27:30.559><c> this</c><00:27:31.120><c> 3</c>

00:27:32.310 --> 00:27:32.320 align:start position:0%
and set it to an expression like this 3
 

00:27:32.320 --> 00:27:35.190 align:start position:0%
and set it to an expression like this 3
is<00:27:32.559><c> greater</c><00:27:32.960><c> than</c><00:27:33.600><c> 2.</c><00:27:34.320><c> so</c><00:27:34.480><c> what</c><00:27:34.640><c> we</c><00:27:34.799><c> have</c><00:27:34.960><c> here</c>

00:27:35.190 --> 00:27:35.200 align:start position:0%
is greater than 2. so what we have here
 

00:27:35.200 --> 00:27:37.590 align:start position:0%
is greater than 2. so what we have here
this<00:27:35.360><c> piece</c><00:27:35.600><c> of</c><00:27:35.760><c> code</c><00:27:36.080><c> this</c><00:27:36.399><c> expression</c><00:27:37.360><c> is</c>

00:27:37.590 --> 00:27:37.600 align:start position:0%
this piece of code this expression is
 

00:27:37.600 --> 00:27:39.669 align:start position:0%
this piece of code this expression is
called<00:27:38.000><c> a</c><00:27:38.240><c> boolean</c><00:27:38.720><c> expression</c><00:27:39.279><c> because</c><00:27:39.520><c> it</c>

00:27:39.669 --> 00:27:39.679 align:start position:0%
called a boolean expression because it
 

00:27:39.679 --> 00:27:42.549 align:start position:0%
called a boolean expression because it
produces<00:27:40.240><c> a</c><00:27:40.320><c> boolean</c><00:27:40.799><c> value</c><00:27:41.679><c> so</c><00:27:41.840><c> in</c><00:27:41.919><c> this</c><00:27:42.080><c> case</c>

00:27:42.549 --> 00:27:42.559 align:start position:0%
produces a boolean value so in this case
 

00:27:42.559 --> 00:27:44.950 align:start position:0%
produces a boolean value so in this case
because<00:27:42.880><c> 3</c><00:27:43.200><c> is</c><00:27:43.360><c> greater</c><00:27:43.679><c> than</c><00:27:43.919><c> 2</c><00:27:44.399><c> the</c><00:27:44.640><c> result</c>

00:27:44.950 --> 00:27:44.960 align:start position:0%
because 3 is greater than 2 the result
 

00:27:44.960 --> 00:27:47.350 align:start position:0%
because 3 is greater than 2 the result
of<00:27:45.039><c> this</c><00:27:45.279><c> expression</c><00:27:45.840><c> is</c><00:27:46.000><c> the</c><00:27:46.159><c> boolean</c><00:27:46.640><c> true</c>

00:27:47.350 --> 00:27:47.360 align:start position:0%
of this expression is the boolean true
 

00:27:47.360 --> 00:27:51.029 align:start position:0%
of this expression is the boolean true
so<00:27:48.000><c> if</c><00:27:48.159><c> we</c><00:27:48.320><c> print</c><00:27:49.039><c> x</c>

00:27:51.029 --> 00:27:51.039 align:start position:0%
so if we print x
 

00:27:51.039 --> 00:27:53.110 align:start position:0%
so if we print x
we<00:27:51.200><c> get</c><00:27:51.360><c> true</c><00:27:51.600><c> on</c><00:27:51.679><c> the</c><00:27:51.840><c> terminal</c>

00:27:53.110 --> 00:27:53.120 align:start position:0%
we get true on the terminal
 

00:27:53.120 --> 00:27:55.350 align:start position:0%
we get true on the terminal
so<00:27:53.279><c> here</c><00:27:53.520><c> is</c><00:27:53.600><c> the</c><00:27:53.679><c> greater</c><00:27:54.080><c> than</c><00:27:54.320><c> operator</c><00:27:55.120><c> we</c>

00:27:55.350 --> 00:27:55.360 align:start position:0%
so here is the greater than operator we
 

00:27:55.360 --> 00:27:58.630 align:start position:0%
so here is the greater than operator we
also<00:27:55.600><c> have</c><00:27:56.240><c> greater</c><00:27:56.640><c> than</c><00:27:57.120><c> or</c><00:27:57.440><c> equal</c><00:27:57.760><c> to</c><00:27:58.399><c> we</c>

00:27:58.630 --> 00:27:58.640 align:start position:0%
also have greater than or equal to we
 

00:27:58.640 --> 00:28:01.269 align:start position:0%
also have greater than or equal to we
have<00:27:59.200><c> less</c><00:27:59.440><c> than</c><00:28:00.080><c> we</c><00:28:00.240><c> have</c><00:28:00.399><c> less</c><00:28:00.720><c> than</c><00:28:01.039><c> or</c>

00:28:01.269 --> 00:28:01.279 align:start position:0%
have less than we have less than or
 

00:28:01.279 --> 00:28:02.389 align:start position:0%
have less than we have less than or
equal<00:28:01.600><c> to</c>

00:28:02.389 --> 00:28:02.399 align:start position:0%
equal to
 

00:28:02.399 --> 00:28:04.310 align:start position:0%
equal to
here<00:28:02.640><c> is</c><00:28:02.720><c> the</c><00:28:02.880><c> equality</c><00:28:03.600><c> operator</c><00:28:04.000><c> which</c><00:28:04.159><c> is</c>

00:28:04.310 --> 00:28:04.320 align:start position:0%
here is the equality operator which is
 

00:28:04.320 --> 00:28:06.950 align:start position:0%
here is the equality operator which is
indicated<00:28:04.880><c> by</c><00:28:05.200><c> two</c><00:28:05.520><c> equal</c><00:28:05.840><c> signs</c><00:28:06.559><c> do</c><00:28:06.720><c> not</c>

00:28:06.950 --> 00:28:06.960 align:start position:0%
indicated by two equal signs do not
 

00:28:06.960 --> 00:28:08.950 align:start position:0%
indicated by two equal signs do not
confuse<00:28:07.440><c> this</c><00:28:08.159><c> with</c><00:28:08.320><c> the</c><00:28:08.399><c> assignment</c>

00:28:08.950 --> 00:28:08.960 align:start position:0%
confuse this with the assignment
 

00:28:08.960 --> 00:28:11.190 align:start position:0%
confuse this with the assignment
operator<00:28:09.840><c> so</c><00:28:10.000><c> here</c><00:28:10.159><c> we're</c><00:28:10.399><c> comparing</c><00:28:10.880><c> three</c>

00:28:11.190 --> 00:28:11.200 align:start position:0%
operator so here we're comparing three
 

00:28:11.200 --> 00:28:13.430 align:start position:0%
operator so here we're comparing three
and<00:28:11.360><c> two</c><00:28:11.600><c> for</c><00:28:11.760><c> equality</c><00:28:12.720><c> so</c><00:28:12.880><c> if</c><00:28:13.039><c> we</c><00:28:13.120><c> run</c><00:28:13.279><c> our</c>

00:28:13.430 --> 00:28:13.440 align:start position:0%
and two for equality so if we run our
 

00:28:13.440 --> 00:28:15.110 align:start position:0%
and two for equality so if we run our
program

00:28:15.110 --> 00:28:15.120 align:start position:0%
program
 

00:28:15.120 --> 00:28:17.269 align:start position:0%
program
we<00:28:15.279><c> see</c><00:28:15.520><c> false</c><00:28:16.159><c> because</c><00:28:16.480><c> 3</c>

00:28:17.269 --> 00:28:17.279 align:start position:0%
we see false because 3
 

00:28:17.279 --> 00:28:19.110 align:start position:0%
we see false because 3
does<00:28:17.520><c> not</c><00:28:17.760><c> equal</c><00:28:18.080><c> to</c><00:28:18.320><c> 2.</c>

00:28:19.110 --> 00:28:19.120 align:start position:0%
does not equal to 2.
 

00:28:19.120 --> 00:28:21.190 align:start position:0%
does not equal to 2.
so<00:28:19.360><c> here's</c><00:28:19.600><c> the</c><00:28:19.760><c> equality</c><00:28:20.240><c> operator</c><00:28:20.720><c> we</c><00:28:20.960><c> also</c>

00:28:21.190 --> 00:28:21.200 align:start position:0%
so here's the equality operator we also
 

00:28:21.200 --> 00:28:22.310 align:start position:0%
so here's the equality operator we also
have

00:28:22.310 --> 00:28:22.320 align:start position:0%
have
 

00:28:22.320 --> 00:28:24.470 align:start position:0%
have
the<00:28:22.559><c> not</c><00:28:22.880><c> equality</c><00:28:23.440><c> operator</c><00:28:24.080><c> that</c><00:28:24.240><c> is</c>

00:28:24.470 --> 00:28:24.480 align:start position:0%
the not equality operator that is
 

00:28:24.480 --> 00:28:26.710 align:start position:0%
the not equality operator that is
indicated<00:28:25.039><c> by</c><00:28:25.200><c> an</c><00:28:25.360><c> exclamation</c><00:28:26.000><c> mark</c>

00:28:26.710 --> 00:28:26.720 align:start position:0%
indicated by an exclamation mark
 

00:28:26.720 --> 00:28:28.870 align:start position:0%
indicated by an exclamation mark
followed<00:28:27.279><c> by</c><00:28:27.520><c> an</c><00:28:27.679><c> equal</c><00:28:28.000><c> sign</c>

00:28:28.870 --> 00:28:28.880 align:start position:0%
followed by an equal sign
 

00:28:28.880 --> 00:28:30.870 align:start position:0%
followed by an equal sign
so<00:28:29.200><c> let's</c><00:28:29.440><c> quickly</c><00:28:29.760><c> recap</c>

00:28:30.870 --> 00:28:30.880 align:start position:0%
so let's quickly recap
 

00:28:30.880 --> 00:28:32.549 align:start position:0%
so let's quickly recap
here<00:28:31.120><c> are</c><00:28:31.200><c> the</c><00:28:31.360><c> comparison</c><00:28:32.000><c> operators</c><00:28:32.480><c> we</c>

00:28:32.549 --> 00:28:32.559 align:start position:0%
here are the comparison operators we
 

00:28:32.559 --> 00:28:35.590 align:start position:0%
here are the comparison operators we
have<00:28:32.799><c> in</c><00:28:32.960><c> python</c><00:28:33.840><c> greater</c><00:28:34.320><c> than</c><00:28:35.039><c> greater</c><00:28:35.360><c> than</c>

00:28:35.590 --> 00:28:35.600 align:start position:0%
have in python greater than greater than
 

00:28:35.600 --> 00:28:38.230 align:start position:0%
have in python greater than greater than
or<00:28:35.760><c> equal</c><00:28:36.000><c> to</c><00:28:36.559><c> less</c><00:28:36.799><c> than</c><00:28:37.440><c> less</c><00:28:37.600><c> than</c><00:28:37.840><c> or</c><00:28:38.000><c> equal</c>

00:28:38.230 --> 00:28:38.240 align:start position:0%
or equal to less than less than or equal
 

00:28:38.240 --> 00:28:39.110 align:start position:0%
or equal to less than less than or equal
to

00:28:39.110 --> 00:28:39.120 align:start position:0%
to
 

00:28:39.120 --> 00:28:41.510 align:start position:0%
to
equal<00:28:39.600><c> and</c><00:28:40.320><c> not</c><00:28:40.559><c> equal</c>

00:28:41.510 --> 00:28:41.520 align:start position:0%
equal and not equal
 

00:28:41.520 --> 00:28:43.269 align:start position:0%
equal and not equal
these<00:28:41.760><c> operators</c><00:28:42.240><c> are</c><00:28:42.320><c> extremely</c><00:28:42.799><c> important</c>

00:28:43.269 --> 00:28:43.279 align:start position:0%
these operators are extremely important
 

00:28:43.279 --> 00:28:45.510 align:start position:0%
these operators are extremely important
in<00:28:43.440><c> real</c><00:28:43.760><c> python</c><00:28:44.240><c> programs</c><00:28:44.960><c> because</c><00:28:45.279><c> quite</c>

00:28:45.510 --> 00:28:45.520 align:start position:0%
in real python programs because quite
 

00:28:45.520 --> 00:28:47.350 align:start position:0%
in real python programs because quite
often<00:28:45.840><c> we</c><00:28:45.919><c> have</c><00:28:46.080><c> to</c><00:28:46.159><c> compare</c><00:28:46.640><c> values</c><00:28:47.200><c> to</c>

00:28:47.350 --> 00:28:47.360 align:start position:0%
often we have to compare values to
 

00:28:47.360 --> 00:28:49.190 align:start position:0%
often we have to compare values to
evaluate<00:28:47.919><c> certain</c><00:28:48.320><c> conditions</c><00:28:48.960><c> you're</c><00:28:49.120><c> going</c>

00:28:49.190 --> 00:28:49.200 align:start position:0%
evaluate certain conditions you're going
 

00:28:49.200 --> 00:28:56.230 align:start position:0%
evaluate certain conditions you're going
to<00:28:49.279><c> see</c><00:28:49.440><c> that</c><00:28:49.679><c> soon</c>

00:28:56.230 --> 00:28:56.240 align:start position:0%
 
 

00:28:56.240 --> 00:28:57.990 align:start position:0%
 
in<00:28:56.399><c> python</c><00:28:56.799><c> we</c><00:28:56.880><c> have</c><00:28:57.279><c> another</c><00:28:57.600><c> set</c><00:28:57.760><c> of</c>

00:28:57.990 --> 00:28:58.000 align:start position:0%
in python we have another set of
 

00:28:58.000 --> 00:29:00.950 align:start position:0%
in python we have another set of
operators<00:28:58.559><c> called</c><00:28:59.200><c> logical</c><00:28:59.679><c> operators</c><00:29:00.720><c> we</c>

00:29:00.950 --> 00:29:00.960 align:start position:0%
operators called logical operators we
 

00:29:00.960 --> 00:29:02.870 align:start position:0%
operators called logical operators we
use<00:29:01.120><c> these</c><00:29:01.360><c> operators</c><00:29:01.840><c> to</c><00:29:02.000><c> build</c><00:29:02.399><c> complex</c>

00:29:02.870 --> 00:29:02.880 align:start position:0%
use these operators to build complex
 

00:29:02.880 --> 00:29:05.190 align:start position:0%
use these operators to build complex
rules<00:29:03.279><c> and</c><00:29:03.360><c> conditions</c><00:29:04.000><c> let</c><00:29:04.159><c> me</c><00:29:04.320><c> show</c><00:29:04.480><c> you</c><00:29:05.039><c> so</c>

00:29:05.190 --> 00:29:05.200 align:start position:0%
rules and conditions let me show you so
 

00:29:05.200 --> 00:29:06.630 align:start position:0%
rules and conditions let me show you so
i'm<00:29:05.360><c> going</c><00:29:05.440><c> to</c><00:29:05.520><c> declare</c><00:29:05.840><c> a</c><00:29:05.919><c> variable</c><00:29:06.320><c> called</c>

00:29:06.630 --> 00:29:06.640 align:start position:0%
i'm going to declare a variable called
 

00:29:06.640 --> 00:29:09.269 align:start position:0%
i'm going to declare a variable called
price<00:29:07.440><c> and</c><00:29:07.600><c> set</c><00:29:07.760><c> it</c><00:29:07.840><c> to</c><00:29:08.000><c> 25.</c>

00:29:09.269 --> 00:29:09.279 align:start position:0%
price and set it to 25.
 

00:29:09.279 --> 00:29:10.710 align:start position:0%
price and set it to 25.
now<00:29:09.440><c> let's</c><00:29:09.679><c> print</c>

00:29:10.710 --> 00:29:10.720 align:start position:0%
now let's print
 

00:29:10.720 --> 00:29:12.630 align:start position:0%
now let's print
a<00:29:10.880><c> boolean</c><00:29:11.200><c> expression</c><00:29:11.679><c> like</c><00:29:11.919><c> this</c>

00:29:12.630 --> 00:29:12.640 align:start position:0%
a boolean expression like this
 

00:29:12.640 --> 00:29:15.669 align:start position:0%
a boolean expression like this
price<00:29:13.279><c> is</c><00:29:13.520><c> greater</c><00:29:14.000><c> than</c><00:29:14.480><c> 10.</c>

00:29:15.669 --> 00:29:15.679 align:start position:0%
price is greater than 10.
 

00:29:15.679 --> 00:29:17.029 align:start position:0%
price is greater than 10.
now<00:29:15.840><c> let's</c><00:29:16.000><c> say</c><00:29:16.159><c> we</c><00:29:16.320><c> want</c><00:29:16.399><c> to</c><00:29:16.480><c> check</c><00:29:16.640><c> to</c><00:29:16.720><c> see</c><00:29:16.960><c> if</c>

00:29:17.029 --> 00:29:17.039 align:start position:0%
now let's say we want to check to see if
 

00:29:17.039 --> 00:29:20.470 align:start position:0%
now let's say we want to check to see if
the<00:29:17.200><c> price</c><00:29:17.760><c> is</c><00:29:18.000><c> between</c><00:29:18.480><c> 10</c><00:29:18.960><c> and</c><00:29:19.279><c> 30.</c><00:29:20.159><c> this</c><00:29:20.399><c> is</c>

00:29:20.470 --> 00:29:20.480 align:start position:0%
the price is between 10 and 30. this is
 

00:29:20.480 --> 00:29:23.669 align:start position:0%
the price is between 10 and 30. this is
where<00:29:20.799><c> we</c><00:29:20.960><c> use</c><00:29:21.120><c> the</c><00:29:21.360><c> logical</c><00:29:22.240><c> and</c><00:29:22.640><c> operator</c><00:29:23.520><c> so</c>

00:29:23.669 --> 00:29:23.679 align:start position:0%
where we use the logical and operator so
 

00:29:23.679 --> 00:29:26.549 align:start position:0%
where we use the logical and operator so
we<00:29:23.840><c> type</c><00:29:24.159><c> and</c><00:29:24.880><c> and</c><00:29:25.039><c> right</c><00:29:25.279><c> after</c><00:29:25.600><c> that</c><00:29:25.760><c> we</c><00:29:26.000><c> type</c>

00:29:26.549 --> 00:29:26.559 align:start position:0%
we type and and right after that we type
 

00:29:26.559 --> 00:29:29.590 align:start position:0%
we type and and right after that we type
another<00:29:26.960><c> boolean</c><00:29:27.360><c> expression</c><00:29:28.320><c> surprise</c><00:29:29.279><c> less</c>

00:29:29.590 --> 00:29:29.600 align:start position:0%
another boolean expression surprise less
 

00:29:29.600 --> 00:29:33.190 align:start position:0%
another boolean expression surprise less
than<00:29:30.080><c> 30.</c><00:29:31.039><c> so</c><00:29:31.200><c> with</c><00:29:31.360><c> this</c><00:29:31.600><c> and</c><00:29:31.919><c> operator</c><00:29:32.799><c> if</c>

00:29:33.190 --> 00:29:33.200 align:start position:0%
than 30. so with this and operator if
 

00:29:33.200 --> 00:29:35.190 align:start position:0%
than 30. so with this and operator if
both<00:29:33.520><c> these</c><00:29:33.760><c> boolean</c><00:29:34.159><c> expressions</c><00:29:34.799><c> return</c>

00:29:35.190 --> 00:29:35.200 align:start position:0%
both these boolean expressions return
 

00:29:35.200 --> 00:29:37.110 align:start position:0%
both these boolean expressions return
true<00:29:35.760><c> the</c><00:29:35.919><c> result</c><00:29:36.320><c> of</c><00:29:36.399><c> this</c><00:29:36.720><c> entire</c>

00:29:37.110 --> 00:29:37.120 align:start position:0%
true the result of this entire
 

00:29:37.120 --> 00:29:41.110 align:start position:0%
true the result of this entire
expression<00:29:37.520><c> will</c><00:29:37.679><c> be</c><00:29:37.919><c> true</c><00:29:38.320><c> take</c><00:29:38.559><c> a</c><00:29:38.640><c> look</c><00:29:39.360><c> so</c>

00:29:41.110 --> 00:29:41.120 align:start position:0%
expression will be true take a look so
 

00:29:41.120 --> 00:29:43.029 align:start position:0%
expression will be true take a look so
in<00:29:41.200><c> this</c><00:29:41.360><c> case</c><00:29:41.600><c> we</c><00:29:41.679><c> get</c><00:29:41.919><c> true</c>

00:29:43.029 --> 00:29:43.039 align:start position:0%
in this case we get true
 

00:29:43.039 --> 00:29:45.590 align:start position:0%
in this case we get true
because<00:29:43.360><c> the</c><00:29:43.520><c> price</c><00:29:44.000><c> is</c><00:29:44.159><c> between</c><00:29:44.640><c> 10</c><00:29:45.039><c> and</c><00:29:45.279><c> 30</c>

00:29:45.590 --> 00:29:45.600 align:start position:0%
because the price is between 10 and 30
 

00:29:45.600 --> 00:29:46.630 align:start position:0%
because the price is between 10 and 30
dollars

00:29:46.630 --> 00:29:46.640 align:start position:0%
dollars
 

00:29:46.640 --> 00:29:47.990 align:start position:0%
dollars
we<00:29:46.799><c> also</c><00:29:47.120><c> have</c>

00:29:47.990 --> 00:29:48.000 align:start position:0%
we also have
 

00:29:48.000 --> 00:29:49.669 align:start position:0%
we also have
the<00:29:48.320><c> or</c><00:29:48.640><c> operator</c>

00:29:49.669 --> 00:29:49.679 align:start position:0%
the or operator
 

00:29:49.679 --> 00:29:52.149 align:start position:0%
the or operator
with<00:29:49.840><c> the</c><00:29:50.000><c> or</c><00:29:50.320><c> operator</c><00:29:51.200><c> if</c><00:29:51.440><c> at</c><00:29:51.600><c> least</c><00:29:51.919><c> one</c><00:29:52.080><c> of</c>

00:29:52.149 --> 00:29:52.159 align:start position:0%
with the or operator if at least one of
 

00:29:52.159 --> 00:29:54.549 align:start position:0%
with the or operator if at least one of
these<00:29:52.399><c> boolean</c><00:29:52.799><c> expressions</c><00:29:53.360><c> returns</c><00:29:53.840><c> true</c>

00:29:54.549 --> 00:29:54.559 align:start position:0%
these boolean expressions returns true
 

00:29:54.559 --> 00:29:56.149 align:start position:0%
these boolean expressions returns true
then<00:29:54.799><c> the</c><00:29:54.960><c> result</c><00:29:55.360><c> of</c><00:29:55.440><c> this</c><00:29:55.760><c> entire</c>

00:29:56.149 --> 00:29:56.159 align:start position:0%
then the result of this entire
 

00:29:56.159 --> 00:29:57.669 align:start position:0%
then the result of this entire
expression<00:29:56.559><c> will</c><00:29:56.720><c> be</c><00:29:56.880><c> true</c>

00:29:57.669 --> 00:29:57.679 align:start position:0%
expression will be true
 

00:29:57.679 --> 00:29:59.830 align:start position:0%
expression will be true
to<00:29:57.840><c> demonstrate</c><00:29:58.399><c> this</c><00:29:59.120><c> i'm</c><00:29:59.279><c> going</c><00:29:59.360><c> to</c><00:29:59.520><c> change</c>

00:29:59.830 --> 00:29:59.840 align:start position:0%
to demonstrate this i'm going to change
 

00:29:59.840 --> 00:30:02.710 align:start position:0%
to demonstrate this i'm going to change
price<00:30:00.720><c> to</c><00:30:00.960><c> 5.</c><00:30:01.679><c> let's</c><00:30:01.840><c> see</c><00:30:02.080><c> how</c><00:30:02.240><c> python</c><00:30:02.640><c> is</c>

00:30:02.710 --> 00:30:02.720 align:start position:0%
price to 5. let's see how python is
 

00:30:02.720 --> 00:30:04.630 align:start position:0%
price to 5. let's see how python is
going<00:30:02.799><c> to</c><00:30:02.880><c> execute</c><00:30:03.279><c> this</c><00:30:03.440><c> code</c><00:30:04.080><c> so</c><00:30:04.320><c> first</c><00:30:04.559><c> it's</c>

00:30:04.630 --> 00:30:04.640 align:start position:0%
going to execute this code so first it's
 

00:30:04.640 --> 00:30:06.710 align:start position:0%
going to execute this code so first it's
going<00:30:04.799><c> to</c><00:30:04.960><c> look</c><00:30:05.120><c> at</c><00:30:05.200><c> this</c><00:30:05.360><c> boolean</c><00:30:05.760><c> expression</c>

00:30:06.710 --> 00:30:06.720 align:start position:0%
going to look at this boolean expression
 

00:30:06.720 --> 00:30:09.990 align:start position:0%
going to look at this boolean expression
is<00:30:07.039><c> price</c><00:30:07.600><c> greater</c><00:30:08.000><c> than</c><00:30:08.159><c> 10</c><00:30:08.799><c> no</c><00:30:09.039><c> it's</c><00:30:09.200><c> not</c><00:30:09.840><c> so</c>

00:30:09.990 --> 00:30:10.000 align:start position:0%
is price greater than 10 no it's not so
 

00:30:10.000 --> 00:30:11.590 align:start position:0%
is price greater than 10 no it's not so
it<00:30:10.159><c> will</c><00:30:10.240><c> keep</c><00:30:10.480><c> going</c>

00:30:11.590 --> 00:30:11.600 align:start position:0%
it will keep going
 

00:30:11.600 --> 00:30:13.430 align:start position:0%
it will keep going
then<00:30:11.840><c> it</c><00:30:12.000><c> will</c><00:30:12.159><c> look</c><00:30:12.320><c> at</c><00:30:12.399><c> the</c><00:30:12.640><c> second</c><00:30:13.039><c> boolean</c>

00:30:13.430 --> 00:30:13.440 align:start position:0%
then it will look at the second boolean
 

00:30:13.440 --> 00:30:16.630 align:start position:0%
then it will look at the second boolean
expression<00:30:14.399><c> is</c><00:30:14.640><c> price</c><00:30:14.960><c> less</c><00:30:15.120><c> than</c><00:30:15.360><c> 30</c><00:30:16.080><c> it</c><00:30:16.320><c> sure</c>

00:30:16.630 --> 00:30:16.640 align:start position:0%
expression is price less than 30 it sure
 

00:30:16.640 --> 00:30:18.310 align:start position:0%
expression is price less than 30 it sure
is<00:30:17.039><c> so</c><00:30:17.200><c> the</c><00:30:17.360><c> result</c><00:30:17.679><c> of</c><00:30:17.760><c> this</c><00:30:18.000><c> entire</c>

00:30:18.310 --> 00:30:18.320 align:start position:0%
is so the result of this entire
 

00:30:18.320 --> 00:30:22.070 align:start position:0%
is so the result of this entire
expression<00:30:18.880><c> will</c><00:30:19.039><c> be</c><00:30:19.200><c> true</c><00:30:19.520><c> take</c><00:30:19.760><c> a</c><00:30:19.840><c> look</c>

00:30:22.070 --> 00:30:22.080 align:start position:0%
expression will be true take a look
 

00:30:22.080 --> 00:30:23.190 align:start position:0%
expression will be true take a look
there<00:30:22.320><c> you</c><00:30:22.399><c> go</c>

00:30:23.190 --> 00:30:23.200 align:start position:0%
there you go
 

00:30:23.200 --> 00:30:25.430 align:start position:0%
there you go
we<00:30:23.440><c> also</c><00:30:23.679><c> have</c><00:30:24.080><c> the</c><00:30:24.320><c> not</c><00:30:24.720><c> operator</c><00:30:25.200><c> which</c>

00:30:25.430 --> 00:30:25.440 align:start position:0%
we also have the not operator which
 

00:30:25.440 --> 00:30:27.430 align:start position:0%
we also have the not operator which
basically<00:30:25.919><c> inverses</c><00:30:26.559><c> any</c><00:30:26.880><c> values</c><00:30:27.200><c> that</c><00:30:27.360><c> you</c>

00:30:27.430 --> 00:30:27.440 align:start position:0%
basically inverses any values that you
 

00:30:27.440 --> 00:30:30.710 align:start position:0%
basically inverses any values that you
give<00:30:27.679><c> it</c><00:30:28.080><c> let</c><00:30:28.240><c> me</c><00:30:28.399><c> show</c><00:30:28.559><c> you</c><00:30:28.720><c> so</c>

00:30:30.710 --> 00:30:30.720 align:start position:0%
give it let me show you so
 

00:30:30.720 --> 00:30:32.149 align:start position:0%
give it let me show you so
we're<00:30:30.880><c> going</c><00:30:31.039><c> to</c><00:30:31.120><c> have</c><00:30:31.600><c> one</c><00:30:31.760><c> boolean</c>

00:30:32.149 --> 00:30:32.159 align:start position:0%
we're going to have one boolean
 

00:30:32.159 --> 00:30:34.950 align:start position:0%
we're going to have one boolean
expression<00:30:32.960><c> price</c><00:30:33.520><c> greater</c><00:30:33.919><c> than</c><00:30:34.080><c> 10.</c><00:30:34.799><c> the</c>

00:30:34.950 --> 00:30:34.960 align:start position:0%
expression price greater than 10. the
 

00:30:34.960 --> 00:30:37.190 align:start position:0%
expression price greater than 10. the
result<00:30:35.279><c> of</c><00:30:35.360><c> this</c><00:30:35.520><c> expression</c><00:30:36.080><c> is</c><00:30:36.320><c> false</c>

00:30:37.190 --> 00:30:37.200 align:start position:0%
result of this expression is false
 

00:30:37.200 --> 00:30:39.990 align:start position:0%
result of this expression is false
now<00:30:37.360><c> if</c><00:30:37.520><c> you</c><00:30:37.679><c> apply</c><00:30:38.320><c> the</c><00:30:38.559><c> not</c><00:30:38.960><c> operator</c>

00:30:39.990 --> 00:30:40.000 align:start position:0%
now if you apply the not operator
 

00:30:40.000 --> 00:30:43.269 align:start position:0%
now if you apply the not operator
this<00:30:40.159><c> will</c><00:30:40.480><c> inverse</c><00:30:40.960><c> false</c><00:30:41.520><c> to</c><00:30:41.760><c> true</c><00:30:42.480><c> so</c><00:30:43.120><c> when</c>

00:30:43.269 --> 00:30:43.279 align:start position:0%
this will inverse false to true so when
 

00:30:43.279 --> 00:30:46.070 align:start position:0%
this will inverse false to true so when
we<00:30:43.440><c> run</c><00:30:43.600><c> the</c><00:30:43.760><c> program</c><00:30:44.080><c> we</c><00:30:44.240><c> get</c><00:30:44.640><c> true</c>

00:30:46.070 --> 00:30:46.080 align:start position:0%
we run the program we get true
 

00:30:46.080 --> 00:30:48.549 align:start position:0%
we run the program we get true
so<00:30:46.240><c> let's</c><00:30:46.399><c> quickly</c><00:30:46.640><c> recap</c><00:30:47.440><c> in</c><00:30:47.600><c> python</c><00:30:47.919><c> we</c><00:30:48.080><c> have</c>

00:30:48.549 --> 00:30:48.559 align:start position:0%
so let's quickly recap in python we have
 

00:30:48.559 --> 00:30:51.029 align:start position:0%
so let's quickly recap in python we have
three<00:30:48.880><c> logical</c><00:30:49.360><c> operators</c><00:30:50.240><c> we</c><00:30:50.399><c> have</c><00:30:50.559><c> logical</c>

00:30:51.029 --> 00:30:51.039 align:start position:0%
three logical operators we have logical
 

00:30:51.039 --> 00:30:53.110 align:start position:0%
three logical operators we have logical
and<00:30:51.279><c> which</c><00:30:51.440><c> returns</c><00:30:51.840><c> true</c><00:30:52.480><c> if</c><00:30:52.799><c> both</c>

00:30:53.110 --> 00:30:53.120 align:start position:0%
and which returns true if both
 

00:30:53.120 --> 00:30:55.029 align:start position:0%
and which returns true if both
expressions<00:30:53.840><c> return</c><00:30:54.240><c> true</c>

00:30:55.029 --> 00:30:55.039 align:start position:0%
expressions return true
 

00:30:55.039 --> 00:30:57.909 align:start position:0%
expressions return true
we<00:30:55.200><c> have</c><00:30:55.360><c> logical</c><00:30:55.919><c> or</c><00:30:56.480><c> which</c><00:30:56.640><c> returns</c><00:30:57.120><c> true</c><00:30:57.679><c> if</c>

00:30:57.909 --> 00:30:57.919 align:start position:0%
we have logical or which returns true if
 

00:30:57.919 --> 00:31:00.789 align:start position:0%
we have logical or which returns true if
at<00:30:58.080><c> least</c><00:30:58.799><c> one</c><00:30:59.039><c> expression</c><00:30:59.519><c> returns</c><00:30:59.919><c> true</c><00:31:00.640><c> and</c>

00:31:00.789 --> 00:31:00.799 align:start position:0%
at least one expression returns true and
 

00:31:00.799 --> 00:31:03.269 align:start position:0%
at least one expression returns true and
we<00:31:00.960><c> have</c><00:31:01.279><c> not</c><00:31:01.760><c> which</c><00:31:02.080><c> inverses</c><00:31:02.720><c> any</c><00:31:02.960><c> value</c>

00:31:03.269 --> 00:31:03.279 align:start position:0%
we have not which inverses any value
 

00:31:03.279 --> 00:31:10.070 align:start position:0%
we have not which inverses any value
that<00:31:03.440><c> we</c><00:31:03.519><c> give</c><00:31:03.760><c> it</c>

00:31:10.070 --> 00:31:10.080 align:start position:0%
 
 

00:31:10.080 --> 00:31:11.350 align:start position:0%
 
in<00:31:10.159><c> this</c><00:31:10.320><c> tutorial</c><00:31:10.799><c> we're</c><00:31:10.960><c> going</c><00:31:11.039><c> to</c><00:31:11.120><c> talk</c>

00:31:11.350 --> 00:31:11.360 align:start position:0%
in this tutorial we're going to talk
 

00:31:11.360 --> 00:31:14.149 align:start position:0%
in this tutorial we're going to talk
about<00:31:11.600><c> if</c><00:31:11.840><c> statements</c><00:31:12.399><c> in</c><00:31:12.640><c> python</c><00:31:13.600><c> we</c><00:31:13.760><c> use</c><00:31:14.000><c> if</c>

00:31:14.149 --> 00:31:14.159 align:start position:0%
about if statements in python we use if
 

00:31:14.159 --> 00:31:15.830 align:start position:0%
about if statements in python we use if
statements<00:31:14.640><c> to</c><00:31:14.720><c> make</c><00:31:14.960><c> decisions</c><00:31:15.600><c> in</c><00:31:15.760><c> our</c>

00:31:15.830 --> 00:31:15.840 align:start position:0%
statements to make decisions in our
 

00:31:15.840 --> 00:31:18.070 align:start position:0%
statements to make decisions in our
programs<00:31:16.720><c> for</c><00:31:16.880><c> example</c><00:31:17.279><c> we</c><00:31:17.440><c> can</c><00:31:17.519><c> declare</c><00:31:18.000><c> a</c>

00:31:18.070 --> 00:31:18.080 align:start position:0%
programs for example we can declare a
 

00:31:18.080 --> 00:31:19.909 align:start position:0%
programs for example we can declare a
variable<00:31:18.559><c> called</c><00:31:18.799><c> temperature</c><00:31:19.679><c> and</c>

00:31:19.909 --> 00:31:19.919 align:start position:0%
variable called temperature and
 

00:31:19.919 --> 00:31:21.669 align:start position:0%
variable called temperature and
depending<00:31:20.480><c> on</c><00:31:20.559><c> the</c><00:31:20.720><c> value</c><00:31:20.960><c> of</c><00:31:21.120><c> this</c><00:31:21.279><c> variable</c>

00:31:21.669 --> 00:31:21.679 align:start position:0%
depending on the value of this variable
 

00:31:21.679 --> 00:31:23.509 align:start position:0%
depending on the value of this variable
we<00:31:21.840><c> can</c><00:31:22.080><c> print</c><00:31:22.399><c> different</c><00:31:22.720><c> messages</c><00:31:23.279><c> on</c><00:31:23.360><c> the</c>

00:31:23.509 --> 00:31:23.519 align:start position:0%
we can print different messages on the
 

00:31:23.519 --> 00:31:25.190 align:start position:0%
we can print different messages on the
terminal<00:31:24.000><c> let</c><00:31:24.159><c> me</c><00:31:24.320><c> show</c><00:31:24.480><c> you</c>

00:31:25.190 --> 00:31:25.200 align:start position:0%
terminal let me show you
 

00:31:25.200 --> 00:31:27.590 align:start position:0%
terminal let me show you
so<00:31:25.679><c> here's</c><00:31:26.000><c> our</c><00:31:26.080><c> temperature</c><00:31:26.640><c> variable</c>

00:31:27.590 --> 00:31:27.600 align:start position:0%
so here's our temperature variable
 

00:31:27.600 --> 00:31:29.750 align:start position:0%
so here's our temperature variable
we<00:31:27.840><c> set</c><00:31:28.000><c> it</c><00:31:28.080><c> to</c><00:31:28.240><c> 35.</c>

00:31:29.750 --> 00:31:29.760 align:start position:0%
we set it to 35.
 

00:31:29.760 --> 00:31:31.990 align:start position:0%
we set it to 35.
now<00:31:29.919><c> let's</c><00:31:30.080><c> say</c><00:31:30.320><c> if</c><00:31:30.559><c> temperature</c><00:31:31.279><c> is</c><00:31:31.600><c> greater</c>

00:31:31.990 --> 00:31:32.000 align:start position:0%
now let's say if temperature is greater
 

00:31:32.000 --> 00:31:34.149 align:start position:0%
now let's say if temperature is greater
than<00:31:32.320><c> 30</c><00:31:32.960><c> we</c><00:31:33.120><c> want</c><00:31:33.279><c> to</c><00:31:33.360><c> print</c><00:31:33.679><c> a</c><00:31:33.760><c> message</c>

00:31:34.149 --> 00:31:34.159 align:start position:0%
than 30 we want to print a message
 

00:31:34.159 --> 00:31:37.509 align:start position:0%
than 30 we want to print a message
saying<00:31:34.559><c> it's</c><00:31:34.720><c> a</c><00:31:34.880><c> hot</c><00:31:35.120><c> day</c><00:31:35.840><c> so</c><00:31:36.000><c> we</c><00:31:36.159><c> type</c><00:31:36.480><c> if</c>

00:31:37.509 --> 00:31:37.519 align:start position:0%
saying it's a hot day so we type if
 

00:31:37.519 --> 00:31:39.750 align:start position:0%
saying it's a hot day so we type if
then<00:31:37.760><c> we</c><00:31:37.919><c> type</c><00:31:38.240><c> a</c><00:31:38.480><c> condition</c><00:31:39.360><c> and</c><00:31:39.519><c> this</c><00:31:39.679><c> is</c>

00:31:39.750 --> 00:31:39.760 align:start position:0%
then we type a condition and this is
 

00:31:39.760 --> 00:31:42.230 align:start position:0%
then we type a condition and this is
where<00:31:40.000><c> we</c><00:31:40.080><c> use</c><00:31:40.320><c> our</c><00:31:40.480><c> comparison</c><00:31:41.120><c> operators</c><00:31:42.080><c> so</c>

00:31:42.230 --> 00:31:42.240 align:start position:0%
where we use our comparison operators so
 

00:31:42.240 --> 00:31:44.070 align:start position:0%
where we use our comparison operators so
we<00:31:42.399><c> type</c><00:31:43.039><c> temperature</c>

00:31:44.070 --> 00:31:44.080 align:start position:0%
we type temperature
 

00:31:44.080 --> 00:31:46.470 align:start position:0%
we type temperature
greater<00:31:44.480><c> than</c><00:31:45.039><c> 30.</c>

00:31:46.470 --> 00:31:46.480 align:start position:0%
greater than 30.
 

00:31:46.480 --> 00:31:48.950 align:start position:0%
greater than 30.
then<00:31:47.120><c> so</c><00:31:47.279><c> we</c><00:31:47.360><c> add</c><00:31:47.519><c> a</c><00:31:47.600><c> colon</c><00:31:48.480><c> and</c><00:31:48.640><c> see</c><00:31:48.799><c> what</c>

00:31:48.950 --> 00:31:48.960 align:start position:0%
then so we add a colon and see what
 

00:31:48.960 --> 00:31:51.509 align:start position:0%
then so we add a colon and see what
happens<00:31:49.279><c> when</c><00:31:49.440><c> i</c><00:31:49.600><c> press</c><00:31:49.919><c> enter</c><00:31:50.240><c> now</c>

00:31:51.509 --> 00:31:51.519 align:start position:0%
happens when i press enter now
 

00:31:51.519 --> 00:31:53.350 align:start position:0%
happens when i press enter now
the<00:31:51.760><c> character</c><00:31:52.080><c> is</c><00:31:52.240><c> indented</c><00:31:53.039><c> and</c><00:31:53.120><c> this</c>

00:31:53.350 --> 00:31:53.360 align:start position:0%
the character is indented and this
 

00:31:53.360 --> 00:31:56.070 align:start position:0%
the character is indented and this
represents<00:31:54.159><c> a</c><00:31:54.320><c> block</c><00:31:54.640><c> of</c><00:31:54.799><c> code</c><00:31:55.519><c> so</c><00:31:55.679><c> the</c><00:31:55.840><c> code</c>

00:31:56.070 --> 00:31:56.080 align:start position:0%
represents a block of code so the code
 

00:31:56.080 --> 00:31:58.389 align:start position:0%
represents a block of code so the code
that<00:31:56.240><c> we</c><00:31:56.399><c> write</c><00:31:56.559><c> over</c><00:31:56.799><c> here</c><00:31:57.200><c> will</c><00:31:57.360><c> be</c><00:31:57.600><c> executed</c>

00:31:58.389 --> 00:31:58.399 align:start position:0%
that we write over here will be executed
 

00:31:58.399 --> 00:32:00.710 align:start position:0%
that we write over here will be executed
if<00:31:58.559><c> this</c><00:31:58.799><c> condition</c><00:31:59.279><c> is</c><00:31:59.440><c> true</c><00:32:00.000><c> otherwise</c><00:32:00.480><c> it's</c>

00:32:00.710 --> 00:32:00.720 align:start position:0%
if this condition is true otherwise it's
 

00:32:00.720 --> 00:32:03.029 align:start position:0%
if this condition is true otherwise it's
not<00:32:00.880><c> going</c><00:32:01.120><c> to</c><00:32:01.200><c> be</c><00:32:01.360><c> executed</c><00:32:02.000><c> let</c><00:32:02.159><c> me</c><00:32:02.320><c> show</c><00:32:02.480><c> you</c>

00:32:03.029 --> 00:32:03.039 align:start position:0%
not going to be executed let me show you
 

00:32:03.039 --> 00:32:04.070 align:start position:0%
not going to be executed let me show you
so

00:32:04.070 --> 00:32:04.080 align:start position:0%
so
 

00:32:04.080 --> 00:32:06.630 align:start position:0%
so
we're<00:32:04.240><c> going</c><00:32:04.320><c> to</c><00:32:04.480><c> print</c>

00:32:06.630 --> 00:32:06.640 align:start position:0%
we're going to print
 

00:32:06.640 --> 00:32:08.549 align:start position:0%
we're going to print
it's<00:32:06.799><c> a</c><00:32:06.960><c> hot</c><00:32:07.200><c> day</c>

00:32:08.549 --> 00:32:08.559 align:start position:0%
it's a hot day
 

00:32:08.559 --> 00:32:09.909 align:start position:0%
it's a hot day
and<00:32:08.720><c> by</c><00:32:08.880><c> the</c><00:32:08.960><c> way</c><00:32:09.120><c> note</c><00:32:09.360><c> that</c><00:32:09.519><c> here</c><00:32:09.679><c> i've</c>

00:32:09.909 --> 00:32:09.919 align:start position:0%
and by the way note that here i've
 

00:32:09.919 --> 00:32:12.549 align:start position:0%
and by the way note that here i've
surrounded<00:32:10.399><c> the</c><00:32:10.559><c> string</c><00:32:11.360><c> with</c><00:32:11.600><c> double</c><00:32:11.919><c> quotes</c>

00:32:12.549 --> 00:32:12.559 align:start position:0%
surrounded the string with double quotes
 

00:32:12.559 --> 00:32:15.190 align:start position:0%
surrounded the string with double quotes
because<00:32:12.880><c> here</c><00:32:13.039><c> we</c><00:32:13.200><c> have</c><00:32:14.000><c> a</c><00:32:14.159><c> single</c><00:32:14.559><c> quote</c><00:32:15.039><c> as</c>

00:32:15.190 --> 00:32:15.200 align:start position:0%
because here we have a single quote as
 

00:32:15.200 --> 00:32:17.430 align:start position:0%
because here we have a single quote as
an<00:32:15.360><c> apostrophe</c><00:32:16.399><c> so</c><00:32:16.559><c> i</c><00:32:16.640><c> couldn't</c><00:32:16.960><c> declare</c><00:32:17.279><c> a</c>

00:32:17.430 --> 00:32:17.440 align:start position:0%
an apostrophe so i couldn't declare a
 

00:32:17.440 --> 00:32:20.230 align:start position:0%
an apostrophe so i couldn't declare a
string<00:32:17.840><c> like</c><00:32:18.000><c> this</c><00:32:18.720><c> with</c><00:32:18.960><c> single</c><00:32:19.279><c> quotes</c><00:32:19.919><c> if</c><00:32:20.080><c> i</c>

00:32:20.230 --> 00:32:20.240 align:start position:0%
string like this with single quotes if i
 

00:32:20.240 --> 00:32:22.789 align:start position:0%
string like this with single quotes if i
typed<00:32:20.799><c> it's</c><00:32:21.120><c> a</c><00:32:21.600><c> hot</c><00:32:21.919><c> day</c>

00:32:22.789 --> 00:32:22.799 align:start position:0%
typed it's a hot day
 

00:32:22.799 --> 00:32:25.350 align:start position:0%
typed it's a hot day
look<00:32:23.360><c> python</c><00:32:23.679><c> gets</c><00:32:23.919><c> confused</c><00:32:24.880><c> because</c><00:32:25.200><c> it</c>

00:32:25.350 --> 00:32:25.360 align:start position:0%
look python gets confused because it
 

00:32:25.360 --> 00:32:27.750 align:start position:0%
look python gets confused because it
thinks<00:32:26.000><c> this</c><00:32:26.240><c> single</c><00:32:26.559><c> code</c><00:32:27.039><c> represents</c><00:32:27.600><c> the</c>

00:32:27.750 --> 00:32:27.760 align:start position:0%
thinks this single code represents the
 

00:32:27.760 --> 00:32:29.190 align:start position:0%
thinks this single code represents the
end<00:32:27.919><c> of</c><00:32:28.080><c> our</c><00:32:28.240><c> string</c><00:32:28.559><c> so</c><00:32:28.720><c> it</c><00:32:28.880><c> doesn't</c>

00:32:29.190 --> 00:32:29.200 align:start position:0%
end of our string so it doesn't
 

00:32:29.200 --> 00:32:32.310 align:start position:0%
end of our string so it doesn't
recognize<00:32:30.080><c> the</c><00:32:30.240><c> subsequent</c><00:32:30.880><c> characters</c><00:32:31.679><c> okay</c>

00:32:32.310 --> 00:32:32.320 align:start position:0%
recognize the subsequent characters okay
 

00:32:32.320 --> 00:32:34.470 align:start position:0%
recognize the subsequent characters okay
so<00:32:32.480><c> that's</c><00:32:32.799><c> why</c><00:32:33.039><c> we</c><00:32:33.200><c> use</c>

00:32:34.470 --> 00:32:34.480 align:start position:0%
so that's why we use
 

00:32:34.480 --> 00:32:36.470 align:start position:0%
so that's why we use
double<00:32:34.720><c> quotes</c><00:32:35.039><c> here</c>

00:32:36.470 --> 00:32:36.480 align:start position:0%
double quotes here
 

00:32:36.480 --> 00:32:38.149 align:start position:0%
double quotes here
so<00:32:36.720><c> we</c><00:32:36.799><c> can</c><00:32:36.960><c> have</c><00:32:37.120><c> an</c><00:32:37.279><c> apostrophe</c><00:32:37.919><c> in</c><00:32:38.000><c> our</c>

00:32:38.149 --> 00:32:38.159 align:start position:0%
so we can have an apostrophe in our
 

00:32:38.159 --> 00:32:39.029 align:start position:0%
so we can have an apostrophe in our
string

00:32:39.029 --> 00:32:39.039 align:start position:0%
string
 

00:32:39.039 --> 00:32:41.350 align:start position:0%
string
so<00:32:39.279><c> it's</c><00:32:39.440><c> a</c><00:32:39.519><c> hot</c><00:32:39.760><c> day</c>

00:32:41.350 --> 00:32:41.360 align:start position:0%
so it's a hot day
 

00:32:41.360 --> 00:32:43.509 align:start position:0%
so it's a hot day
now<00:32:41.519><c> if</c><00:32:41.679><c> i</c><00:32:41.840><c> press</c><00:32:42.080><c> enter</c><00:32:42.399><c> again</c>

00:32:43.509 --> 00:32:43.519 align:start position:0%
now if i press enter again
 

00:32:43.519 --> 00:32:46.149 align:start position:0%
now if i press enter again
the<00:32:43.679><c> carrot</c><00:32:44.000><c> is</c><00:32:44.159><c> indented</c><00:32:45.039><c> so</c><00:32:45.360><c> the</c><00:32:45.600><c> code</c><00:32:45.840><c> that</c>

00:32:46.149 --> 00:32:46.159 align:start position:0%
the carrot is indented so the code that
 

00:32:46.159 --> 00:32:48.630 align:start position:0%
the carrot is indented so the code that
right<00:32:46.399><c> here</c><00:32:46.880><c> will</c><00:32:47.039><c> be</c><00:32:47.200><c> part</c><00:32:47.440><c> of</c><00:32:47.600><c> our</c><00:32:47.760><c> if</c><00:32:48.000><c> block</c>

00:32:48.630 --> 00:32:48.640 align:start position:0%
right here will be part of our if block
 

00:32:48.640 --> 00:32:50.310 align:start position:0%
right here will be part of our if block
and<00:32:48.799><c> it</c><00:32:48.960><c> will</c><00:32:49.120><c> get</c><00:32:49.360><c> executed</c><00:32:50.000><c> if</c><00:32:50.080><c> this</c>

00:32:50.310 --> 00:32:50.320 align:start position:0%
and it will get executed if this
 

00:32:50.320 --> 00:32:53.350 align:start position:0%
and it will get executed if this
condition<00:32:50.799><c> is</c><00:32:50.880><c> true</c><00:32:51.600><c> so</c><00:32:51.840><c> here</c><00:32:52.000><c> we</c><00:32:52.080><c> can</c><00:32:52.320><c> print</c>

00:32:53.350 --> 00:32:53.360 align:start position:0%
condition is true so here we can print
 

00:32:53.360 --> 00:32:57.590 align:start position:0%
condition is true so here we can print
a<00:32:53.519><c> second</c><00:32:53.840><c> message</c><00:32:54.640><c> drink</c><00:32:55.440><c> plenty</c><00:32:55.760><c> of</c><00:32:56.000><c> water</c>

00:32:57.590 --> 00:32:57.600 align:start position:0%
a second message drink plenty of water
 

00:32:57.600 --> 00:32:59.669 align:start position:0%
a second message drink plenty of water
now<00:32:57.840><c> to</c><00:32:58.000><c> terminate</c><00:32:58.399><c> this</c><00:32:58.559><c> block</c><00:32:59.200><c> we</c><00:32:59.360><c> press</c>

00:32:59.669 --> 00:32:59.679 align:start position:0%
now to terminate this block we press
 

00:32:59.679 --> 00:33:02.870 align:start position:0%
now to terminate this block we press
enter<00:33:00.320><c> and</c><00:33:00.399><c> then</c><00:33:00.640><c> press</c><00:33:01.200><c> shift</c><00:33:01.760><c> and</c><00:33:02.000><c> tab</c>

00:33:02.870 --> 00:33:02.880 align:start position:0%
enter and then press shift and tab
 

00:33:02.880 --> 00:33:05.430 align:start position:0%
enter and then press shift and tab
the<00:33:03.039><c> carrot</c><00:33:03.519><c> is</c><00:33:03.600><c> no</c><00:33:03.840><c> longer</c><00:33:04.159><c> indented</c><00:33:04.960><c> so</c><00:33:05.200><c> the</c>

00:33:05.430 --> 00:33:05.440 align:start position:0%
the carrot is no longer indented so the
 

00:33:05.440 --> 00:33:07.590 align:start position:0%
the carrot is no longer indented so the
code<00:33:05.679><c> that</c><00:33:05.840><c> we</c><00:33:06.000><c> write</c><00:33:06.240><c> here</c><00:33:06.640><c> will</c><00:33:06.960><c> always</c><00:33:07.360><c> get</c>

00:33:07.590 --> 00:33:07.600 align:start position:0%
code that we write here will always get
 

00:33:07.600 --> 00:33:09.750 align:start position:0%
code that we write here will always get
executed<00:33:08.320><c> no</c><00:33:08.480><c> matter</c><00:33:08.799><c> what</c><00:33:09.279><c> whether</c><00:33:09.600><c> this</c>

00:33:09.750 --> 00:33:09.760 align:start position:0%
executed no matter what whether this
 

00:33:09.760 --> 00:33:11.750 align:start position:0%
executed no matter what whether this
condition<00:33:10.240><c> is</c><00:33:10.399><c> true</c><00:33:10.640><c> or</c><00:33:10.880><c> not</c>

00:33:11.750 --> 00:33:11.760 align:start position:0%
condition is true or not
 

00:33:11.760 --> 00:33:13.750 align:start position:0%
condition is true or not
now<00:33:12.080><c> in</c><00:33:12.240><c> c</c><00:33:12.480><c> based</c><00:33:12.799><c> programming</c><00:33:13.200><c> languages</c>

00:33:13.750 --> 00:33:13.760 align:start position:0%
now in c based programming languages
 

00:33:13.760 --> 00:33:17.350 align:start position:0%
now in c based programming languages
like<00:33:14.080><c> c</c><00:33:14.640><c> plus</c><00:33:15.120><c> c</c><00:33:15.360><c> sharp</c><00:33:15.840><c> java</c><00:33:16.240><c> and</c><00:33:16.399><c> javascript</c>

00:33:17.350 --> 00:33:17.360 align:start position:0%
like c plus c sharp java and javascript
 

00:33:17.360 --> 00:33:19.430 align:start position:0%
like c plus c sharp java and javascript
we<00:33:17.600><c> present</c><00:33:18.000><c> a</c><00:33:18.159><c> block</c><00:33:18.480><c> of</c><00:33:18.559><c> code</c><00:33:18.880><c> using</c><00:33:19.120><c> curly</c>

00:33:19.430 --> 00:33:19.440 align:start position:0%
we present a block of code using curly
 

00:33:19.440 --> 00:33:21.750 align:start position:0%
we present a block of code using curly
braces<00:33:20.320><c> so</c>

00:33:21.750 --> 00:33:21.760 align:start position:0%
braces so
 

00:33:21.760 --> 00:33:23.669 align:start position:0%
braces so
you<00:33:21.919><c> start</c><00:33:22.240><c> a</c><00:33:22.399><c> block</c><00:33:22.640><c> of</c><00:33:22.799><c> code</c><00:33:23.200><c> using</c><00:33:23.440><c> a</c><00:33:23.519><c> left</c>

00:33:23.669 --> 00:33:23.679 align:start position:0%
you start a block of code using a left
 

00:33:23.679 --> 00:33:24.549 align:start position:0%
you start a block of code using a left
brace

00:33:24.549 --> 00:33:24.559 align:start position:0%
brace
 

00:33:24.559 --> 00:33:27.269 align:start position:0%
brace
and<00:33:24.640><c> then</c><00:33:24.960><c> end</c><00:33:25.200><c> it</c><00:33:25.760><c> using</c><00:33:26.000><c> a</c><00:33:26.159><c> right</c><00:33:26.320><c> brace</c><00:33:27.120><c> in</c>

00:33:27.269 --> 00:33:27.279 align:start position:0%
and then end it using a right brace in
 

00:33:27.279 --> 00:33:29.509 align:start position:0%
and then end it using a right brace in
python<00:33:27.679><c> we</c><00:33:27.760><c> don't</c><00:33:27.919><c> have</c><00:33:28.080><c> curly</c><00:33:28.399><c> braces</c><00:33:29.200><c> so</c><00:33:29.440><c> we</c>

00:33:29.509 --> 00:33:29.519 align:start position:0%
python we don't have curly braces so we
 

00:33:29.519 --> 00:33:31.830 align:start position:0%
python we don't have curly braces so we
use<00:33:29.840><c> indentation</c><00:33:30.559><c> to</c><00:33:30.640><c> represent</c><00:33:31.200><c> a</c><00:33:31.360><c> block</c><00:33:31.679><c> of</c>

00:33:31.830 --> 00:33:31.840 align:start position:0%
use indentation to represent a block of
 

00:33:31.840 --> 00:33:33.669 align:start position:0%
use indentation to represent a block of
code<00:33:32.480><c> okay</c>

00:33:33.669 --> 00:33:33.679 align:start position:0%
code okay
 

00:33:33.679 --> 00:33:34.470 align:start position:0%
code okay
so

00:33:34.470 --> 00:33:34.480 align:start position:0%
so
 

00:33:34.480 --> 00:33:35.669 align:start position:0%
so
in<00:33:34.640><c> this</c><00:33:34.799><c> case</c>

00:33:35.669 --> 00:33:35.679 align:start position:0%
in this case
 

00:33:35.679 --> 00:33:37.430 align:start position:0%
in this case
these<00:33:35.919><c> two</c><00:33:36.080><c> lines</c><00:33:36.320><c> are</c><00:33:36.480><c> indented</c><00:33:37.120><c> and</c><00:33:37.200><c> that</c>

00:33:37.430 --> 00:33:37.440 align:start position:0%
these two lines are indented and that
 

00:33:37.440 --> 00:33:40.070 align:start position:0%
these two lines are indented and that
means<00:33:38.080><c> they</c><00:33:38.399><c> are</c><00:33:39.039><c> part</c><00:33:39.279><c> of</c><00:33:39.360><c> this</c><00:33:39.600><c> block</c><00:33:39.919><c> of</c>

00:33:40.070 --> 00:33:40.080 align:start position:0%
means they are part of this block of
 

00:33:40.080 --> 00:33:40.950 align:start position:0%
means they are part of this block of
code

00:33:40.950 --> 00:33:40.960 align:start position:0%
code
 

00:33:40.960 --> 00:33:42.710 align:start position:0%
code
now<00:33:41.519><c> let's</c><00:33:41.679><c> run</c><00:33:41.919><c> the</c><00:33:42.000><c> program</c><00:33:42.320><c> and</c><00:33:42.399><c> see</c><00:33:42.559><c> what</c>

00:33:42.710 --> 00:33:42.720 align:start position:0%
now let's run the program and see what
 

00:33:42.720 --> 00:33:44.310 align:start position:0%
now let's run the program and see what
happens

00:33:44.310 --> 00:33:44.320 align:start position:0%
happens
 

00:33:44.320 --> 00:33:46.149 align:start position:0%
happens
so<00:33:44.480><c> we</c><00:33:44.640><c> see</c><00:33:44.799><c> these</c><00:33:44.960><c> two</c><00:33:45.120><c> messages</c><00:33:45.679><c> because</c><00:33:46.000><c> the</c>

00:33:46.149 --> 00:33:46.159 align:start position:0%
so we see these two messages because the
 

00:33:46.159 --> 00:33:48.630 align:start position:0%
so we see these two messages because the
temperature<00:33:46.720><c> is</c><00:33:46.880><c> greater</c><00:33:47.279><c> than</c><00:33:47.519><c> 30.</c>

00:33:48.630 --> 00:33:48.640 align:start position:0%
temperature is greater than 30.
 

00:33:48.640 --> 00:33:49.590 align:start position:0%
temperature is greater than 30.
now

00:33:49.590 --> 00:33:49.600 align:start position:0%
now
 

00:33:49.600 --> 00:33:52.549 align:start position:0%
now
if<00:33:49.760><c> i</c><00:33:49.919><c> change</c><00:33:50.159><c> the</c><00:33:50.240><c> temperature</c><00:33:51.120><c> to</c><00:33:51.360><c> 25</c>

00:33:52.549 --> 00:33:52.559 align:start position:0%
if i change the temperature to 25
 

00:33:52.559 --> 00:33:54.789 align:start position:0%
if i change the temperature to 25
and<00:33:52.799><c> run</c><00:33:52.960><c> the</c><00:33:53.120><c> program</c><00:33:53.519><c> again</c><00:33:54.320><c> we</c><00:33:54.480><c> don't</c><00:33:54.640><c> see</c>

00:33:54.789 --> 00:33:54.799 align:start position:0%
and run the program again we don't see
 

00:33:54.799 --> 00:33:57.029 align:start position:0%
and run the program again we don't see
anything<00:33:55.360><c> okay</c>

00:33:57.029 --> 00:33:57.039 align:start position:0%
anything okay
 

00:33:57.039 --> 00:33:57.830 align:start position:0%
anything okay
now

00:33:57.830 --> 00:33:57.840 align:start position:0%
now
 

00:33:57.840 --> 00:34:00.470 align:start position:0%
now
after<00:33:58.080><c> this</c><00:33:58.320><c> block</c><00:33:58.960><c> let's</c><00:33:59.279><c> print</c>

00:34:00.470 --> 00:34:00.480 align:start position:0%
after this block let's print
 

00:34:00.480 --> 00:34:01.350 align:start position:0%
after this block let's print
done

00:34:01.350 --> 00:34:01.360 align:start position:0%
done
 

00:34:01.360 --> 00:34:03.350 align:start position:0%
done
because<00:34:01.679><c> this</c><00:34:01.840><c> code</c><00:34:02.159><c> is</c><00:34:02.320><c> not</c><00:34:02.559><c> indented</c><00:34:03.279><c> it</c>

00:34:03.350 --> 00:34:03.360 align:start position:0%
because this code is not indented it
 

00:34:03.360 --> 00:34:05.669 align:start position:0%
because this code is not indented it
will<00:34:03.679><c> always</c><00:34:03.919><c> get</c><00:34:04.159><c> executed</c><00:34:05.039><c> it's</c><00:34:05.200><c> not</c><00:34:05.440><c> part</c>

00:34:05.669 --> 00:34:05.679 align:start position:0%
will always get executed it's not part
 

00:34:05.679 --> 00:34:09.270 align:start position:0%
will always get executed it's not part
of<00:34:05.840><c> our</c><00:34:06.000><c> if</c><00:34:06.159><c> block</c><00:34:06.559><c> okay</c><00:34:07.200><c> so</c><00:34:07.519><c> take</c><00:34:07.679><c> a</c><00:34:07.760><c> look</c>

00:34:09.270 --> 00:34:09.280 align:start position:0%
of our if block okay so take a look
 

00:34:09.280 --> 00:34:11.030 align:start position:0%
of our if block okay so take a look
here's<00:34:09.520><c> the</c><00:34:09.599><c> down</c><00:34:09.839><c> message</c>

00:34:11.030 --> 00:34:11.040 align:start position:0%
here's the down message
 

00:34:11.040 --> 00:34:11.750 align:start position:0%
here's the down message
now

00:34:11.750 --> 00:34:11.760 align:start position:0%
now
 

00:34:11.760 --> 00:34:14.310 align:start position:0%
now
let's<00:34:12.000><c> add</c><00:34:12.480><c> a</c><00:34:12.639><c> second</c><00:34:12.960><c> condition</c><00:34:14.000><c> so</c><00:34:14.159><c> if</c>

00:34:14.310 --> 00:34:14.320 align:start position:0%
let's add a second condition so if
 

00:34:14.320 --> 00:34:17.109 align:start position:0%
let's add a second condition so if
temperature<00:34:14.960><c> is</c><00:34:15.200><c> not</c><00:34:15.440><c> greater</c><00:34:15.760><c> than</c><00:34:16.079><c> 30</c><00:34:16.879><c> that</c>

00:34:17.109 --> 00:34:17.119 align:start position:0%
temperature is not greater than 30 that
 

00:34:17.119 --> 00:34:20.950 align:start position:0%
temperature is not greater than 30 that
means<00:34:17.359><c> it's</c><00:34:17.599><c> less</c><00:34:17.839><c> than</c><00:34:18.240><c> or</c><00:34:18.560><c> equal</c><00:34:18.879><c> to</c><00:34:19.119><c> 30.</c><00:34:20.240><c> so</c>

00:34:20.950 --> 00:34:20.960 align:start position:0%
means it's less than or equal to 30. so
 

00:34:20.960 --> 00:34:23.510 align:start position:0%
means it's less than or equal to 30. so
i'm<00:34:21.119><c> gonna</c><00:34:21.359><c> add</c><00:34:21.839><c> a</c><00:34:22.000><c> second</c><00:34:22.320><c> condition</c><00:34:23.280><c> so</c><00:34:23.440><c> if</c>

00:34:23.510 --> 00:34:23.520 align:start position:0%
i'm gonna add a second condition so if
 

00:34:23.520 --> 00:34:25.909 align:start position:0%
i'm gonna add a second condition so if
the<00:34:23.679><c> temperature</c><00:34:24.159><c> is</c><00:34:24.320><c> between</c><00:34:24.800><c> 20</c><00:34:25.119><c> and</c><00:34:25.359><c> 30</c><00:34:25.839><c> i</c>

00:34:25.909 --> 00:34:25.919 align:start position:0%
the temperature is between 20 and 30 i
 

00:34:25.919 --> 00:34:28.470 align:start position:0%
the temperature is between 20 and 30 i
want<00:34:26.079><c> to</c><00:34:26.159><c> print</c><00:34:26.720><c> it's</c><00:34:26.960><c> a</c><00:34:27.040><c> nice</c><00:34:27.280><c> day</c>

00:34:28.470 --> 00:34:28.480 align:start position:0%
want to print it's a nice day
 

00:34:28.480 --> 00:34:30.950 align:start position:0%
want to print it's a nice day
so<00:34:28.639><c> here</c><00:34:28.800><c> we</c><00:34:29.040><c> type</c><00:34:29.520><c> l</c><00:34:30.240><c> if</c>

00:34:30.950 --> 00:34:30.960 align:start position:0%
so here we type l if
 

00:34:30.960 --> 00:34:32.950 align:start position:0%
so here we type l if
that<00:34:31.119><c> is</c><00:34:31.280><c> short</c><00:34:31.520><c> for</c><00:34:31.760><c> else</c><00:34:32.159><c> if</c>

00:34:32.950 --> 00:34:32.960 align:start position:0%
that is short for else if
 

00:34:32.960 --> 00:34:35.510 align:start position:0%
that is short for else if
and<00:34:33.119><c> here</c><00:34:33.280><c> we</c><00:34:33.440><c> type</c><00:34:33.760><c> a</c><00:34:33.839><c> second</c><00:34:34.159><c> condition</c>

00:34:35.510 --> 00:34:35.520 align:start position:0%
and here we type a second condition
 

00:34:35.520 --> 00:34:39.430 align:start position:0%
and here we type a second condition
so<00:34:35.760><c> temperature</c><00:34:36.800><c> greater</c><00:34:37.280><c> than</c><00:34:37.839><c> 20.</c>

00:34:39.430 --> 00:34:39.440 align:start position:0%
so temperature greater than 20.
 

00:34:39.440 --> 00:34:42.230 align:start position:0%
so temperature greater than 20.
we<00:34:39.599><c> add</c><00:34:39.760><c> a</c><00:34:39.839><c> colon</c><00:34:40.639><c> press</c><00:34:40.960><c> enter</c><00:34:41.679><c> now</c><00:34:41.839><c> we</c><00:34:41.919><c> have</c><00:34:42.159><c> a</c>

00:34:42.230 --> 00:34:42.240 align:start position:0%
we add a colon press enter now we have a
 

00:34:42.240 --> 00:34:43.510 align:start position:0%
we add a colon press enter now we have a
new<00:34:42.399><c> block</c>

00:34:43.510 --> 00:34:43.520 align:start position:0%
new block
 

00:34:43.520 --> 00:34:45.669 align:start position:0%
new block
so<00:34:43.760><c> here</c><00:34:43.919><c> we</c><00:34:44.000><c> can</c><00:34:44.159><c> print</c>

00:34:45.669 --> 00:34:45.679 align:start position:0%
so here we can print
 

00:34:45.679 --> 00:34:48.149 align:start position:0%
so here we can print
it's<00:34:45.919><c> a</c><00:34:46.000><c> nice</c><00:34:46.320><c> day</c>

00:34:48.149 --> 00:34:48.159 align:start position:0%
it's a nice day
 

00:34:48.159 --> 00:34:50.470 align:start position:0%
it's a nice day
so<00:34:48.320><c> if</c><00:34:48.399><c> this</c><00:34:48.639><c> condition</c><00:34:49.119><c> is</c><00:34:49.280><c> true</c><00:34:49.919><c> that</c><00:34:50.159><c> means</c>

00:34:50.470 --> 00:34:50.480 align:start position:0%
so if this condition is true that means
 

00:34:50.480 --> 00:34:52.230 align:start position:0%
so if this condition is true that means
the<00:34:50.639><c> temperature</c>

00:34:52.230 --> 00:34:52.240 align:start position:0%
the temperature
 

00:34:52.240 --> 00:34:54.790 align:start position:0%
the temperature
is<00:34:52.480><c> greater</c><00:34:52.879><c> than</c><00:34:53.119><c> 20</c><00:34:54.000><c> and</c><00:34:54.159><c> less</c><00:34:54.399><c> than</c><00:34:54.560><c> or</c>

00:34:54.790 --> 00:34:54.800 align:start position:0%
is greater than 20 and less than or
 

00:34:54.800 --> 00:34:57.190 align:start position:0%
is greater than 20 and less than or
equal<00:34:55.040><c> to</c><00:34:55.280><c> 30.</c><00:34:56.159><c> now</c><00:34:56.399><c> what</c><00:34:56.560><c> we</c><00:34:56.639><c> have</c><00:34:56.800><c> here</c><00:34:57.040><c> is</c>

00:34:57.190 --> 00:34:57.200 align:start position:0%
equal to 30. now what we have here is
 

00:34:57.200 --> 00:34:59.829 align:start position:0%
equal to 30. now what we have here is
called<00:34:57.680><c> a</c><00:34:57.839><c> comment</c><00:34:58.640><c> that</c><00:34:58.800><c> is</c><00:34:58.960><c> why</c><00:34:59.280><c> it's</c><00:34:59.440><c> grayed</c>

00:34:59.829 --> 00:34:59.839 align:start position:0%
called a comment that is why it's grayed
 

00:34:59.839 --> 00:35:01.829 align:start position:0%
called a comment that is why it's grayed
out<00:35:00.160><c> it's</c><00:35:00.400><c> not</c><00:35:00.560><c> real</c><00:35:00.800><c> code</c><00:35:01.040><c> it's</c><00:35:01.119><c> just</c><00:35:01.520><c> some</c>

00:35:01.829 --> 00:35:01.839 align:start position:0%
out it's not real code it's just some
 

00:35:01.839 --> 00:35:03.910 align:start position:0%
out it's not real code it's just some
note<00:35:02.079><c> that</c><00:35:02.160><c> we</c><00:35:02.320><c> add</c><00:35:02.480><c> to</c><00:35:02.640><c> our</c><00:35:02.800><c> program</c><00:35:03.520><c> python</c>

00:35:03.910 --> 00:35:03.920 align:start position:0%
note that we add to our program python
 

00:35:03.920 --> 00:35:06.069 align:start position:0%
note that we add to our program python
is<00:35:04.000><c> not</c><00:35:04.160><c> going</c><00:35:04.240><c> to</c><00:35:04.400><c> execute</c><00:35:04.880><c> this</c><00:35:05.599><c> so</c><00:35:05.760><c> whenever</c>

00:35:06.069 --> 00:35:06.079 align:start position:0%
is not going to execute this so whenever
 

00:35:06.079 --> 00:35:08.790 align:start position:0%
is not going to execute this so whenever
we<00:35:06.240><c> type</c><00:35:06.480><c> a</c><00:35:06.640><c> pound</c><00:35:06.960><c> sign</c><00:35:07.599><c> what</c><00:35:07.839><c> we</c><00:35:07.920><c> have</c><00:35:08.240><c> after</c>

00:35:08.790 --> 00:35:08.800 align:start position:0%
we type a pound sign what we have after
 

00:35:08.800 --> 00:35:11.349 align:start position:0%
we type a pound sign what we have after
is<00:35:08.960><c> treated</c><00:35:09.520><c> as</c><00:35:09.680><c> a</c><00:35:09.760><c> comment</c><00:35:10.320><c> okay</c>

00:35:11.349 --> 00:35:11.359 align:start position:0%
is treated as a comment okay
 

00:35:11.359 --> 00:35:12.069 align:start position:0%
is treated as a comment okay
so

00:35:12.069 --> 00:35:12.079 align:start position:0%
so
 

00:35:12.079 --> 00:35:13.990 align:start position:0%
so
if<00:35:12.160><c> this</c><00:35:12.320><c> condition</c><00:35:12.720><c> is</c><00:35:12.880><c> true</c><00:35:13.599><c> then</c><00:35:13.839><c> we're</c>

00:35:13.990 --> 00:35:14.000 align:start position:0%
if this condition is true then we're
 

00:35:14.000 --> 00:35:15.349 align:start position:0%
if this condition is true then we're
going<00:35:14.160><c> to</c><00:35:14.240><c> see</c><00:35:14.640><c> this</c><00:35:14.880><c> message</c><00:35:15.200><c> on</c><00:35:15.280><c> the</c>

00:35:15.349 --> 00:35:15.359 align:start position:0%
going to see this message on the
 

00:35:15.359 --> 00:35:17.270 align:start position:0%
going to see this message on the
terminal<00:35:16.160><c> let's</c><00:35:16.400><c> run</c><00:35:16.640><c> our</c><00:35:16.720><c> program</c><00:35:17.119><c> and</c>

00:35:17.270 --> 00:35:17.280 align:start position:0%
terminal let's run our program and
 

00:35:17.280 --> 00:35:19.430 align:start position:0%
terminal let's run our program and
verify<00:35:17.760><c> this</c>

00:35:19.430 --> 00:35:19.440 align:start position:0%
verify this
 

00:35:19.440 --> 00:35:21.670 align:start position:0%
verify this
there<00:35:19.680><c> you</c><00:35:19.760><c> go</c><00:35:20.079><c> the</c><00:35:20.240><c> temperature</c><00:35:20.640><c> is</c><00:35:20.800><c> 25</c>

00:35:21.670 --> 00:35:21.680 align:start position:0%
there you go the temperature is 25
 

00:35:21.680 --> 00:35:23.670 align:start position:0%
there you go the temperature is 25
that's<00:35:21.920><c> why</c><00:35:22.160><c> we</c><00:35:22.320><c> see</c><00:35:22.480><c> this</c><00:35:22.640><c> message</c>

00:35:23.670 --> 00:35:23.680 align:start position:0%
that's why we see this message
 

00:35:23.680 --> 00:35:25.589 align:start position:0%
that's why we see this message
now<00:35:23.839><c> we</c><00:35:24.000><c> can</c><00:35:24.079><c> have</c><00:35:24.400><c> as</c><00:35:24.560><c> many</c><00:35:24.800><c> conditions</c><00:35:25.359><c> as</c><00:35:25.440><c> we</c>

00:35:25.589 --> 00:35:25.599 align:start position:0%
now we can have as many conditions as we
 

00:35:25.599 --> 00:35:28.630 align:start position:0%
now we can have as many conditions as we
want<00:35:26.000><c> there</c><00:35:26.160><c> are</c><00:35:26.320><c> no</c><00:35:26.480><c> limitations</c><00:35:27.280><c> okay</c>

00:35:28.630 --> 00:35:28.640 align:start position:0%
want there are no limitations okay
 

00:35:28.640 --> 00:35:30.870 align:start position:0%
want there are no limitations okay
so<00:35:28.800><c> let's</c><00:35:29.040><c> add</c><00:35:29.359><c> another</c><00:35:29.760><c> condition</c>

00:35:30.870 --> 00:35:30.880 align:start position:0%
so let's add another condition
 

00:35:30.880 --> 00:35:31.910 align:start position:0%
so let's add another condition
l<00:35:31.119><c> if</c>

00:35:31.910 --> 00:35:31.920 align:start position:0%
l if
 

00:35:31.920 --> 00:35:34.550 align:start position:0%
l if
temperature<00:35:32.800><c> is</c><00:35:33.040><c> greater</c><00:35:33.440><c> than</c><00:35:33.680><c> 10</c>

00:35:34.550 --> 00:35:34.560 align:start position:0%
temperature is greater than 10
 

00:35:34.560 --> 00:35:35.670 align:start position:0%
temperature is greater than 10
then

00:35:35.670 --> 00:35:35.680 align:start position:0%
then
 

00:35:35.680 --> 00:35:37.270 align:start position:0%
then
we're<00:35:35.839><c> going</c><00:35:36.000><c> to</c><00:35:36.079><c> print</c>

00:35:37.270 --> 00:35:37.280 align:start position:0%
we're going to print
 

00:35:37.280 --> 00:35:39.349 align:start position:0%
we're going to print
it's<00:35:37.520><c> a</c><00:35:37.599><c> bit</c><00:35:37.839><c> cold</c>

00:35:39.349 --> 00:35:39.359 align:start position:0%
it's a bit cold
 

00:35:39.359 --> 00:35:41.349 align:start position:0%
it's a bit cold
now<00:35:39.599><c> in</c><00:35:39.680><c> this</c><00:35:39.839><c> case</c><00:35:40.400><c> if</c><00:35:40.560><c> this</c><00:35:40.720><c> condition</c><00:35:41.200><c> is</c>

00:35:41.349 --> 00:35:41.359 align:start position:0%
now in this case if this condition is
 

00:35:41.359 --> 00:35:43.990 align:start position:0%
now in this case if this condition is
true<00:35:42.079><c> that</c><00:35:42.400><c> means</c><00:35:43.119><c> the</c><00:35:43.280><c> temperature</c><00:35:43.760><c> is</c>

00:35:43.990 --> 00:35:44.000 align:start position:0%
true that means the temperature is
 

00:35:44.000 --> 00:35:45.670 align:start position:0%
true that means the temperature is
greater<00:35:44.400><c> than</c><00:35:44.640><c> 10</c>

00:35:45.670 --> 00:35:45.680 align:start position:0%
greater than 10
 

00:35:45.680 --> 00:35:47.990 align:start position:0%
greater than 10
and<00:35:45.839><c> less</c><00:35:46.079><c> than</c><00:35:46.240><c> or</c><00:35:46.480><c> equal</c><00:35:46.720><c> to</c><00:35:46.880><c> 20.</c>

00:35:47.990 --> 00:35:48.000 align:start position:0%
and less than or equal to 20.
 

00:35:48.000 --> 00:35:49.750 align:start position:0%
and less than or equal to 20.
now<00:35:48.240><c> finally</c><00:35:48.640><c> if</c><00:35:48.720><c> the</c><00:35:48.880><c> temperature</c><00:35:49.359><c> is</c><00:35:49.520><c> less</c>

00:35:49.750 --> 00:35:49.760 align:start position:0%
now finally if the temperature is less
 

00:35:49.760 --> 00:35:51.750 align:start position:0%
now finally if the temperature is less
than<00:35:50.000><c> 10</c><00:35:50.560><c> let's</c><00:35:50.800><c> print</c><00:35:51.040><c> a</c><00:35:51.119><c> message</c><00:35:51.520><c> saying</c>

00:35:51.750 --> 00:35:51.760 align:start position:0%
than 10 let's print a message saying
 

00:35:51.760 --> 00:35:53.190 align:start position:0%
than 10 let's print a message saying
it's<00:35:52.000><c> a</c><00:35:52.079><c> cold</c><00:35:52.400><c> day</c>

00:35:53.190 --> 00:35:53.200 align:start position:0%
it's a cold day
 

00:35:53.200 --> 00:35:54.310 align:start position:0%
it's a cold day
so

00:35:54.310 --> 00:35:54.320 align:start position:0%
so
 

00:35:54.320 --> 00:35:57.349 align:start position:0%
so
here<00:35:54.480><c> we</c><00:35:54.640><c> type</c><00:35:55.119><c> else</c><00:35:56.000><c> then</c><00:35:56.160><c> we</c><00:35:56.320><c> add</c><00:35:56.400><c> a</c><00:35:56.480><c> colon</c>

00:35:57.349 --> 00:35:57.359 align:start position:0%
here we type else then we add a colon
 

00:35:57.359 --> 00:35:59.109 align:start position:0%
here we type else then we add a colon
and<00:35:57.440><c> now</c><00:35:57.680><c> we</c><00:35:57.760><c> have</c><00:35:57.920><c> a</c><00:35:58.000><c> new</c><00:35:58.240><c> block</c>

00:35:59.109 --> 00:35:59.119 align:start position:0%
and now we have a new block
 

00:35:59.119 --> 00:36:02.230 align:start position:0%
and now we have a new block
so<00:35:59.760><c> this</c><00:36:00.000><c> code</c><00:36:00.320><c> will</c><00:36:00.480><c> get</c><00:36:00.720><c> executed</c><00:36:01.760><c> if</c><00:36:02.000><c> none</c>

00:36:02.230 --> 00:36:02.240 align:start position:0%
so this code will get executed if none
 

00:36:02.240 --> 00:36:04.390 align:start position:0%
so this code will get executed if none
of<00:36:02.320><c> the</c><00:36:02.480><c> above</c><00:36:02.800><c> conditions</c><00:36:03.359><c> are</c><00:36:03.520><c> true</c>

00:36:04.390 --> 00:36:04.400 align:start position:0%
of the above conditions are true
 

00:36:04.400 --> 00:36:07.910 align:start position:0%
of the above conditions are true
so<00:36:04.800><c> here</c><00:36:04.960><c> we</c><00:36:05.119><c> can</c><00:36:05.280><c> print</c>

00:36:07.910 --> 00:36:07.920 align:start position:0%
 
 

00:36:07.920 --> 00:36:10.150 align:start position:0%
 
it's<00:36:08.160><c> called</c>

00:36:10.150 --> 00:36:10.160 align:start position:0%
it's called
 

00:36:10.160 --> 00:36:11.990 align:start position:0%
it's called
so<00:36:10.480><c> this</c><00:36:10.640><c> is</c><00:36:10.720><c> how</c><00:36:10.880><c> we</c><00:36:11.040><c> use</c><00:36:11.200><c> if</c><00:36:11.440><c> statements</c><00:36:11.920><c> to</c>

00:36:11.990 --> 00:36:12.000 align:start position:0%
so this is how we use if statements to
 

00:36:12.000 --> 00:36:19.990 align:start position:0%
so this is how we use if statements to
make<00:36:12.240><c> decisions</c><00:36:12.720><c> in</c><00:36:12.880><c> our</c><00:36:13.040><c> programs</c>

00:36:19.990 --> 00:36:20.000 align:start position:0%
 
 

00:36:20.000 --> 00:36:21.670 align:start position:0%
 
here's<00:36:20.320><c> a</c><00:36:20.400><c> great</c><00:36:20.720><c> exercise</c><00:36:21.200><c> for</c><00:36:21.359><c> you</c><00:36:21.520><c> to</c>

00:36:21.670 --> 00:36:21.680 align:start position:0%
here's a great exercise for you to
 

00:36:21.680 --> 00:36:23.750 align:start position:0%
here's a great exercise for you to
practice<00:36:22.160><c> what</c><00:36:22.320><c> you</c><00:36:22.480><c> have</c><00:36:22.560><c> learned</c><00:36:22.800><c> so</c><00:36:23.040><c> far</c><00:36:23.680><c> i</c>

00:36:23.750 --> 00:36:23.760 align:start position:0%
practice what you have learned so far i
 

00:36:23.760 --> 00:36:25.589 align:start position:0%
practice what you have learned so far i
want<00:36:23.920><c> you</c><00:36:24.079><c> to</c><00:36:24.240><c> write</c><00:36:24.640><c> a</c><00:36:24.800><c> weight</c><00:36:25.119><c> converter</c>

00:36:25.589 --> 00:36:25.599 align:start position:0%
want you to write a weight converter
 

00:36:25.599 --> 00:36:27.030 align:start position:0%
want you to write a weight converter
program<00:36:26.000><c> like</c><00:36:26.160><c> this</c>

00:36:27.030 --> 00:36:27.040 align:start position:0%
program like this
 

00:36:27.040 --> 00:36:29.510 align:start position:0%
program like this
so<00:36:27.200><c> this</c><00:36:27.359><c> program</c><00:36:27.760><c> is</c><00:36:27.920><c> asking</c><00:36:28.160><c> me</c><00:36:28.400><c> my</c><00:36:28.560><c> weight</c><00:36:29.280><c> i</c>

00:36:29.510 --> 00:36:29.520 align:start position:0%
so this program is asking me my weight i
 

00:36:29.520 --> 00:36:31.829 align:start position:0%
so this program is asking me my weight i
enter<00:36:29.839><c> 170.</c>

00:36:31.829 --> 00:36:31.839 align:start position:0%
enter 170.
 

00:36:31.839 --> 00:36:33.990 align:start position:0%
enter 170.
next<00:36:32.160><c> it's</c><00:36:32.480><c> asking</c><00:36:32.720><c> me</c><00:36:32.880><c> if</c><00:36:33.040><c> the</c><00:36:33.200><c> weight</c><00:36:33.760><c> is</c><00:36:33.920><c> in</c>

00:36:33.990 --> 00:36:34.000 align:start position:0%
next it's asking me if the weight is in
 

00:36:34.000 --> 00:36:37.030 align:start position:0%
next it's asking me if the weight is in
kilograms<00:36:34.880><c> or</c><00:36:35.119><c> pounds</c><00:36:35.839><c> so</c><00:36:36.000><c> i</c><00:36:36.079><c> can</c><00:36:36.240><c> type</c><00:36:36.480><c> k</c><00:36:36.800><c> for</c>

00:36:37.030 --> 00:36:37.040 align:start position:0%
kilograms or pounds so i can type k for
 

00:36:37.040 --> 00:36:40.230 align:start position:0%
kilograms or pounds so i can type k for
kilograms<00:36:37.839><c> or</c><00:36:38.160><c> l</c><00:36:38.480><c> for</c><00:36:38.720><c> pounds</c><00:36:39.520><c> i</c><00:36:39.599><c> can</c><00:36:39.760><c> type</c><00:36:40.079><c> a</c>

00:36:40.230 --> 00:36:40.240 align:start position:0%
kilograms or l for pounds i can type a
 

00:36:40.240 --> 00:36:42.870 align:start position:0%
kilograms or l for pounds i can type a
lowercase<00:36:40.800><c> l</c><00:36:41.359><c> or</c><00:36:41.520><c> an</c><00:36:41.680><c> uppercase</c><00:36:42.240><c> l</c><00:36:42.480><c> it</c><00:36:42.560><c> doesn't</c>

00:36:42.870 --> 00:36:42.880 align:start position:0%
lowercase l or an uppercase l it doesn't
 

00:36:42.880 --> 00:36:46.630 align:start position:0%
lowercase l or an uppercase l it doesn't
matter<00:36:43.680><c> so</c><00:36:44.000><c> let's</c><00:36:44.160><c> go</c><00:36:44.320><c> with</c><00:36:44.480><c> a</c><00:36:44.640><c> lowercase</c><00:36:45.200><c> l</c>

00:36:46.630 --> 00:36:46.640 align:start position:0%
matter so let's go with a lowercase l
 

00:36:46.640 --> 00:36:49.270 align:start position:0%
matter so let's go with a lowercase l
now<00:36:46.880><c> it</c><00:36:46.960><c> tells</c><00:36:47.280><c> me</c><00:36:47.839><c> weight</c><00:36:48.160><c> in</c><00:36:48.320><c> kilogram</c><00:36:48.880><c> is</c>

00:36:49.270 --> 00:36:49.280 align:start position:0%
now it tells me weight in kilogram is
 

00:36:49.280 --> 00:36:51.190 align:start position:0%
now it tells me weight in kilogram is
76.5

00:36:51.190 --> 00:36:51.200 align:start position:0%
76.5
 

00:36:51.200 --> 00:36:52.950 align:start position:0%
76.5
so<00:36:51.359><c> go</c><00:36:51.520><c> ahead</c><00:36:51.760><c> and</c><00:36:51.839><c> spend</c><00:36:52.160><c> 5</c><00:36:52.400><c> minutes</c><00:36:52.720><c> on</c><00:36:52.800><c> this</c>

00:36:52.950 --> 00:36:52.960 align:start position:0%
so go ahead and spend 5 minutes on this
 

00:36:52.960 --> 00:36:54.870 align:start position:0%
so go ahead and spend 5 minutes on this
exercise<00:36:53.680><c> you</c><00:36:53.839><c> can</c><00:36:53.920><c> use</c><00:36:54.160><c> the</c><00:36:54.320><c> comment</c><00:36:54.640><c> box</c>

00:36:54.870 --> 00:36:54.880 align:start position:0%
exercise you can use the comment box
 

00:36:54.880 --> 00:36:57.030 align:start position:0%
exercise you can use the comment box
below<00:36:55.200><c> to</c><00:36:55.359><c> share</c><00:36:55.599><c> your</c><00:36:55.760><c> code</c><00:36:56.000><c> with</c><00:36:56.240><c> others</c><00:36:56.960><c> and</c>

00:36:57.030 --> 00:36:57.040 align:start position:0%
below to share your code with others and
 

00:36:57.040 --> 00:36:58.470 align:start position:0%
below to share your code with others and
then<00:36:57.200><c> when</c><00:36:57.359><c> you're</c><00:36:57.520><c> done</c><00:36:57.680><c> come</c><00:36:57.839><c> back</c><00:36:58.079><c> see</c><00:36:58.320><c> my</c>

00:36:58.470 --> 00:36:58.480 align:start position:0%
then when you're done come back see my
 

00:36:58.480 --> 00:37:02.870 align:start position:0%
then when you're done come back see my
solution

00:37:02.870 --> 00:37:02.880 align:start position:0%
 
 

00:37:02.880 --> 00:37:05.270 align:start position:0%
 
so<00:37:03.040><c> first</c><00:37:03.280><c> we</c><00:37:03.440><c> call</c><00:37:03.680><c> our</c><00:37:03.839><c> input</c><00:37:04.160><c> function</c><00:37:04.960><c> to</c>

00:37:05.270 --> 00:37:05.280 align:start position:0%
so first we call our input function to
 

00:37:05.280 --> 00:37:06.950 align:start position:0%
so first we call our input function to
ask<00:37:05.520><c> the</c><00:37:05.680><c> first</c><00:37:06.000><c> question</c>

00:37:06.950 --> 00:37:06.960 align:start position:0%
ask the first question
 

00:37:06.960 --> 00:37:09.670 align:start position:0%
ask the first question
wait<00:37:07.920><c> we</c><00:37:08.079><c> get</c><00:37:08.240><c> the</c><00:37:08.400><c> result</c><00:37:08.800><c> and</c><00:37:09.040><c> store</c><00:37:09.280><c> it</c><00:37:09.440><c> in</c><00:37:09.599><c> a</c>

00:37:09.670 --> 00:37:09.680 align:start position:0%
wait we get the result and store it in a
 

00:37:09.680 --> 00:37:12.150 align:start position:0%
wait we get the result and store it in a
variable<00:37:10.160><c> called</c><00:37:10.800><c> weight</c>

00:37:12.150 --> 00:37:12.160 align:start position:0%
variable called weight
 

00:37:12.160 --> 00:37:13.990 align:start position:0%
variable called weight
next<00:37:12.400><c> we</c><00:37:12.560><c> call</c><00:37:12.720><c> the</c><00:37:12.880><c> input</c><00:37:13.200><c> function</c><00:37:13.680><c> one</c><00:37:13.839><c> more</c>

00:37:13.990 --> 00:37:14.000 align:start position:0%
next we call the input function one more
 

00:37:14.000 --> 00:37:16.310 align:start position:0%
next we call the input function one more
time<00:37:14.240><c> to</c><00:37:14.480><c> ask</c><00:37:14.720><c> the</c><00:37:14.880><c> second</c><00:37:15.200><c> question</c>

00:37:16.310 --> 00:37:16.320 align:start position:0%
time to ask the second question
 

00:37:16.320 --> 00:37:18.230 align:start position:0%
time to ask the second question
is<00:37:16.560><c> this</c><00:37:16.720><c> in</c><00:37:16.800><c> kilogram</c>

00:37:18.230 --> 00:37:18.240 align:start position:0%
is this in kilogram
 

00:37:18.240 --> 00:37:20.829 align:start position:0%
is this in kilogram
or

00:37:20.829 --> 00:37:20.839 align:start position:0%
 
 

00:37:20.839 --> 00:37:23.910 align:start position:0%
 
pounds<00:37:22.240><c> we</c><00:37:22.400><c> get</c><00:37:22.560><c> the</c><00:37:22.720><c> result</c><00:37:23.040><c> and</c><00:37:23.200><c> store</c><00:37:23.440><c> it</c><00:37:23.760><c> in</c>

00:37:23.910 --> 00:37:23.920 align:start position:0%
pounds we get the result and store it in
 

00:37:23.920 --> 00:37:25.829 align:start position:0%
pounds we get the result and store it in
a<00:37:24.079><c> variable</c><00:37:24.480><c> called</c><00:37:24.720><c> unit</c>

00:37:25.829 --> 00:37:25.839 align:start position:0%
a variable called unit
 

00:37:25.839 --> 00:37:27.270 align:start position:0%
a variable called unit
this<00:37:26.079><c> is</c><00:37:26.160><c> where</c><00:37:26.320><c> we're</c><00:37:26.480><c> going</c><00:37:26.640><c> to</c><00:37:26.720><c> use</c><00:37:26.960><c> an</c><00:37:27.119><c> if</c>

00:37:27.270 --> 00:37:27.280 align:start position:0%
this is where we're going to use an if
 

00:37:27.280 --> 00:37:28.470 align:start position:0%
this is where we're going to use an if
statement

00:37:28.470 --> 00:37:28.480 align:start position:0%
statement
 

00:37:28.480 --> 00:37:29.270 align:start position:0%
statement
so

00:37:29.270 --> 00:37:29.280 align:start position:0%
so
 

00:37:29.280 --> 00:37:31.270 align:start position:0%
so
we<00:37:29.440><c> want</c><00:37:29.520><c> to</c><00:37:29.599><c> check</c><00:37:29.760><c> to</c><00:37:29.920><c> see</c><00:37:30.160><c> if</c><00:37:30.400><c> unit</c>

00:37:31.270 --> 00:37:31.280 align:start position:0%
we want to check to see if unit
 

00:37:31.280 --> 00:37:32.550 align:start position:0%
we want to check to see if unit
equals

00:37:32.550 --> 00:37:32.560 align:start position:0%
equals
 

00:37:32.560 --> 00:37:34.230 align:start position:0%
equals
k

00:37:34.230 --> 00:37:34.240 align:start position:0%
k
 

00:37:34.240 --> 00:37:36.230 align:start position:0%
k
then<00:37:34.960><c> we</c><00:37:35.119><c> should</c><00:37:35.280><c> convert</c><00:37:35.680><c> the</c><00:37:35.760><c> weight</c><00:37:36.000><c> to</c>

00:37:36.230 --> 00:37:36.240 align:start position:0%
then we should convert the weight to
 

00:37:36.240 --> 00:37:37.990 align:start position:0%
then we should convert the weight to
pounds<00:37:36.560><c> and</c><00:37:36.720><c> print</c><00:37:36.960><c> it</c><00:37:37.119><c> on</c><00:37:37.200><c> a</c><00:37:37.280><c> terminal</c>

00:37:37.990 --> 00:37:38.000 align:start position:0%
pounds and print it on a terminal
 

00:37:38.000 --> 00:37:39.030 align:start position:0%
pounds and print it on a terminal
however

00:37:39.030 --> 00:37:39.040 align:start position:0%
however
 

00:37:39.040 --> 00:37:41.750 align:start position:0%
however
with<00:37:39.280><c> this</c><00:37:39.440><c> code</c><00:37:39.920><c> if</c><00:37:40.079><c> i</c><00:37:40.160><c> type</c><00:37:40.560><c> a</c><00:37:40.720><c> lowercase</c><00:37:41.280><c> k</c>

00:37:41.750 --> 00:37:41.760 align:start position:0%
with this code if i type a lowercase k
 

00:37:41.760 --> 00:37:43.750 align:start position:0%
with this code if i type a lowercase k
this<00:37:41.920><c> condition</c><00:37:42.480><c> is</c><00:37:42.640><c> not</c><00:37:42.800><c> going</c><00:37:42.960><c> to</c><00:37:43.040><c> be</c><00:37:43.280><c> true</c>

00:37:43.750 --> 00:37:43.760 align:start position:0%
this condition is not going to be true
 

00:37:43.760 --> 00:37:45.589 align:start position:0%
this condition is not going to be true
because<00:37:44.079><c> earlier</c><00:37:44.400><c> i</c><00:37:44.480><c> told</c><00:37:44.640><c> you</c><00:37:44.880><c> that</c><00:37:45.119><c> python</c>

00:37:45.589 --> 00:37:45.599 align:start position:0%
because earlier i told you that python
 

00:37:45.599 --> 00:37:47.670 align:start position:0%
because earlier i told you that python
is<00:37:45.760><c> a</c><00:37:45.920><c> case</c><00:37:46.160><c> sensitive</c><00:37:46.640><c> language</c>

00:37:47.670 --> 00:37:47.680 align:start position:0%
is a case sensitive language
 

00:37:47.680 --> 00:37:48.470 align:start position:0%
is a case sensitive language
so

00:37:48.470 --> 00:37:48.480 align:start position:0%
so
 

00:37:48.480 --> 00:37:50.150 align:start position:0%
so
we<00:37:48.640><c> need</c><00:37:48.800><c> to</c><00:37:48.880><c> convert</c><00:37:49.280><c> this</c><00:37:49.359><c> string</c><00:37:50.000><c> to</c>

00:37:50.150 --> 00:37:50.160 align:start position:0%
we need to convert this string to
 

00:37:50.160 --> 00:37:52.710 align:start position:0%
we need to convert this string to
uppercase<00:37:51.200><c> earlier</c><00:37:51.599><c> we</c><00:37:51.680><c> talked</c><00:37:51.920><c> about</c><00:37:52.400><c> string</c>

00:37:52.710 --> 00:37:52.720 align:start position:0%
uppercase earlier we talked about string
 

00:37:52.720 --> 00:37:55.430 align:start position:0%
uppercase earlier we talked about string
methods<00:37:53.520><c> so</c><00:37:53.680><c> if</c><00:37:53.839><c> we</c><00:37:53.920><c> type</c><00:37:54.240><c> dot</c><00:37:54.640><c> we</c><00:37:54.800><c> can</c><00:37:54.960><c> see</c><00:37:55.280><c> all</c>

00:37:55.430 --> 00:37:55.440 align:start position:0%
methods so if we type dot we can see all
 

00:37:55.440 --> 00:37:57.829 align:start position:0%
methods so if we type dot we can see all
the<00:37:55.599><c> functions</c><00:37:56.079><c> or</c><00:37:56.480><c> methods</c><00:37:56.960><c> available</c><00:37:57.520><c> in</c><00:37:57.680><c> a</c>

00:37:57.829 --> 00:37:57.839 align:start position:0%
the functions or methods available in a
 

00:37:57.839 --> 00:38:01.109 align:start position:0%
the functions or methods available in a
string<00:37:58.160><c> object</c><00:37:58.960><c> so</c><00:37:59.119><c> we</c><00:37:59.280><c> use</c><00:37:59.599><c> the</c><00:37:59.760><c> upper</c><00:38:00.079><c> method</c>

00:38:01.109 --> 00:38:01.119 align:start position:0%
string object so we use the upper method
 

00:38:01.119 --> 00:38:04.150 align:start position:0%
string object so we use the upper method
and<00:38:01.200><c> this</c><00:38:01.440><c> returns</c><00:38:01.839><c> a</c><00:38:01.920><c> new</c><00:38:02.160><c> string</c><00:38:02.640><c> in</c><00:38:03.119><c> case</c>

00:38:04.150 --> 00:38:04.160 align:start position:0%
and this returns a new string in case
 

00:38:04.160 --> 00:38:06.630 align:start position:0%
and this returns a new string in case
now<00:38:04.720><c> if</c><00:38:04.880><c> this</c><00:38:05.040><c> condition</c><00:38:05.440><c> is</c><00:38:05.599><c> true</c><00:38:06.320><c> first</c><00:38:06.560><c> we</c>

00:38:06.630 --> 00:38:06.640 align:start position:0%
now if this condition is true first we
 

00:38:06.640 --> 00:38:08.870 align:start position:0%
now if this condition is true first we
need<00:38:06.800><c> to</c><00:38:06.880><c> convert</c><00:38:07.280><c> the</c><00:38:07.440><c> weight</c><00:38:07.680><c> to</c><00:38:07.920><c> pounds</c><00:38:08.720><c> so</c>

00:38:08.870 --> 00:38:08.880 align:start position:0%
need to convert the weight to pounds so
 

00:38:08.880 --> 00:38:10.550 align:start position:0%
need to convert the weight to pounds so
we<00:38:09.040><c> declare</c><00:38:09.359><c> a</c><00:38:09.440><c> new</c><00:38:09.599><c> variable</c><00:38:10.000><c> called</c>

00:38:10.550 --> 00:38:10.560 align:start position:0%
we declare a new variable called
 

00:38:10.560 --> 00:38:12.069 align:start position:0%
we declare a new variable called
converted

00:38:12.069 --> 00:38:12.079 align:start position:0%
converted
 

00:38:12.079 --> 00:38:17.430 align:start position:0%
converted
get<00:38:12.240><c> the</c><00:38:12.400><c> weight</c><00:38:13.200><c> and</c><00:38:13.680><c> divide</c><00:38:14.079><c> it</c><00:38:14.240><c> by</c><00:38:14.800><c> 0.45</c>

00:38:17.430 --> 00:38:17.440 align:start position:0%
get the weight and divide it by 0.45
 

00:38:17.440 --> 00:38:19.670 align:start position:0%
get the weight and divide it by 0.45
and<00:38:17.520><c> then</c><00:38:17.680><c> we</c><00:38:17.839><c> can</c><00:38:18.000><c> print</c><00:38:18.320><c> this</c><00:38:18.560><c> on</c><00:38:18.720><c> a</c><00:38:18.800><c> terminal</c>

00:38:19.670 --> 00:38:19.680 align:start position:0%
and then we can print this on a terminal
 

00:38:19.680 --> 00:38:21.190 align:start position:0%
and then we can print this on a terminal
so

00:38:21.190 --> 00:38:21.200 align:start position:0%
so
 

00:38:21.200 --> 00:38:22.630 align:start position:0%
so
we<00:38:21.359><c> say</c><00:38:21.599><c> weight</c>

00:38:22.630 --> 00:38:22.640 align:start position:0%
we say weight
 

00:38:22.640 --> 00:38:24.710 align:start position:0%
we say weight
in<00:38:22.880><c> pounds</c><00:38:23.680><c> is</c>

00:38:24.710 --> 00:38:24.720 align:start position:0%
in pounds is
 

00:38:24.720 --> 00:38:27.750 align:start position:0%
in pounds is
then<00:38:24.960><c> we</c><00:38:25.119><c> append</c><00:38:25.839><c> converted</c>

00:38:27.750 --> 00:38:27.760 align:start position:0%
then we append converted
 

00:38:27.760 --> 00:38:29.829 align:start position:0%
then we append converted
now<00:38:28.079><c> to</c><00:38:28.240><c> terminate</c><00:38:28.720><c> this</c><00:38:28.880><c> block</c><00:38:29.200><c> we</c><00:38:29.359><c> press</c>

00:38:29.829 --> 00:38:29.839 align:start position:0%
now to terminate this block we press
 

00:38:29.839 --> 00:38:31.510 align:start position:0%
now to terminate this block we press
shift<00:38:30.160><c> and</c><00:38:30.320><c> tab</c>

00:38:31.510 --> 00:38:31.520 align:start position:0%
shift and tab
 

00:38:31.520 --> 00:38:33.270 align:start position:0%
shift and tab
else<00:38:32.160><c> colon</c>

00:38:33.270 --> 00:38:33.280 align:start position:0%
else colon
 

00:38:33.280 --> 00:38:35.510 align:start position:0%
else colon
so<00:38:33.440><c> if</c><00:38:33.599><c> this</c><00:38:33.760><c> condition</c><00:38:34.240><c> is</c><00:38:34.400><c> not</c><00:38:34.640><c> true</c><00:38:35.280><c> that</c>

00:38:35.510 --> 00:38:35.520 align:start position:0%
so if this condition is not true that
 

00:38:35.520 --> 00:38:37.589 align:start position:0%
so if this condition is not true that
means<00:38:35.760><c> the</c><00:38:35.920><c> weight</c><00:38:36.160><c> was</c><00:38:36.400><c> entered</c><00:38:36.800><c> in</c><00:38:36.960><c> pounds</c>

00:38:37.589 --> 00:38:37.599 align:start position:0%
means the weight was entered in pounds
 

00:38:37.599 --> 00:38:39.670 align:start position:0%
means the weight was entered in pounds
so<00:38:37.760><c> we</c><00:38:37.920><c> need</c><00:38:38.000><c> to</c><00:38:38.160><c> convert</c><00:38:38.480><c> it</c><00:38:38.560><c> to</c><00:38:38.720><c> kilograms</c>

00:38:39.670 --> 00:38:39.680 align:start position:0%
so we need to convert it to kilograms
 

00:38:39.680 --> 00:38:41.670 align:start position:0%
so we need to convert it to kilograms
once<00:38:39.920><c> again</c><00:38:40.160><c> we</c><00:38:40.320><c> declare</c><00:38:40.720><c> a</c><00:38:40.800><c> variable</c>

00:38:41.670 --> 00:38:41.680 align:start position:0%
once again we declare a variable
 

00:38:41.680 --> 00:38:45.030 align:start position:0%
once again we declare a variable
converted<00:38:42.800><c> and</c><00:38:42.960><c> set</c><00:38:43.200><c> it</c><00:38:43.280><c> to</c><00:38:43.440><c> weight</c><00:38:44.240><c> times</c>

00:38:45.030 --> 00:38:45.040 align:start position:0%
converted and set it to weight times
 

00:38:45.040 --> 00:38:47.750 align:start position:0%
converted and set it to weight times
0.45

00:38:47.750 --> 00:38:47.760 align:start position:0%
0.45
 

00:38:47.760 --> 00:38:49.190 align:start position:0%
0.45
and<00:38:47.839><c> then</c><00:38:48.000><c> we</c><00:38:48.160><c> print</c>

00:38:49.190 --> 00:38:49.200 align:start position:0%
and then we print
 

00:38:49.200 --> 00:38:52.230 align:start position:0%
and then we print
weight<00:38:49.920><c> in</c><00:38:50.079><c> kilograms</c>

00:38:52.230 --> 00:38:52.240 align:start position:0%
weight in kilograms
 

00:38:52.240 --> 00:38:54.710 align:start position:0%
weight in kilograms
and<00:38:52.400><c> here</c><00:38:52.560><c> we</c><00:38:52.720><c> concatenate</c>

00:38:54.710 --> 00:38:54.720 align:start position:0%
and here we concatenate
 

00:38:54.720 --> 00:38:57.349 align:start position:0%
and here we concatenate
this<00:38:54.880><c> string</c><00:38:55.280><c> with</c><00:38:55.760><c> converter</c><00:38:56.880><c> all</c><00:38:57.040><c> right</c><00:38:57.200><c> now</c>

00:38:57.349 --> 00:38:57.359 align:start position:0%
this string with converter all right now
 

00:38:57.359 --> 00:38:59.030 align:start position:0%
this string with converter all right now
we<00:38:57.520><c> need</c><00:38:57.599><c> to</c><00:38:57.760><c> terminate</c><00:38:58.079><c> this</c><00:38:58.240><c> block</c><00:38:58.800><c> so</c><00:38:58.960><c> we</c>

00:38:59.030 --> 00:38:59.040 align:start position:0%
we need to terminate this block so we
 

00:38:59.040 --> 00:39:02.630 align:start position:0%
we need to terminate this block so we
press<00:38:59.359><c> enter</c><00:39:00.160><c> then</c><00:39:00.640><c> shift</c><00:39:00.960><c> and</c><00:39:01.119><c> tab</c><00:39:01.680><c> good</c>

00:39:02.630 --> 00:39:02.640 align:start position:0%
press enter then shift and tab good
 

00:39:02.640 --> 00:39:04.069 align:start position:0%
press enter then shift and tab good
now<00:39:02.800><c> if</c><00:39:02.880><c> we</c><00:39:02.960><c> run</c><00:39:03.119><c> this</c><00:39:03.359><c> program</c><00:39:03.760><c> we're</c><00:39:03.920><c> going</c>

00:39:04.069 --> 00:39:04.079 align:start position:0%
now if we run this program we're going
 

00:39:04.079 --> 00:39:06.470 align:start position:0%
now if we run this program we're going
to<00:39:04.160><c> see</c><00:39:04.320><c> an</c><00:39:04.480><c> error</c><00:39:04.720><c> let</c><00:39:04.800><c> me</c><00:39:04.960><c> show</c><00:39:05.119><c> you</c><00:39:05.680><c> so</c><00:39:06.240><c> let's</c>

00:39:06.470 --> 00:39:06.480 align:start position:0%
to see an error let me show you so let's
 

00:39:06.480 --> 00:39:07.510 align:start position:0%
to see an error let me show you so let's
run<00:39:06.720><c> it</c>

00:39:07.510 --> 00:39:07.520 align:start position:0%
run it
 

00:39:07.520 --> 00:39:10.470 align:start position:0%
run it
here<00:39:07.680><c> i'm</c><00:39:07.760><c> going</c><00:39:07.839><c> to</c><00:39:08.000><c> enter</c><00:39:08.640><c> 170</c>

00:39:10.470 --> 00:39:10.480 align:start position:0%
here i'm going to enter 170
 

00:39:10.480 --> 00:39:13.030 align:start position:0%
here i'm going to enter 170
then<00:39:10.640><c> i</c><00:39:10.800><c> type</c><00:39:11.520><c> a</c><00:39:11.680><c> lowercase</c><00:39:12.240><c> l</c>

00:39:13.030 --> 00:39:13.040 align:start position:0%
then i type a lowercase l
 

00:39:13.040 --> 00:39:15.030 align:start position:0%
then i type a lowercase l
okay<00:39:13.760><c> here's</c><00:39:14.079><c> an</c><00:39:14.240><c> error</c>

00:39:15.030 --> 00:39:15.040 align:start position:0%
okay here's an error
 

00:39:15.040 --> 00:39:17.829 align:start position:0%
okay here's an error
can't<00:39:15.359><c> multiply</c><00:39:15.920><c> sequence</c><00:39:16.800><c> by</c><00:39:17.119><c> non-end</c><00:39:17.680><c> of</c>

00:39:17.829 --> 00:39:17.839 align:start position:0%
can't multiply sequence by non-end of
 

00:39:17.839 --> 00:39:21.030 align:start position:0%
can't multiply sequence by non-end of
type<00:39:18.400><c> float</c><00:39:19.200><c> so</c><00:39:19.359><c> this</c><00:39:19.599><c> is</c><00:39:19.680><c> where</c><00:39:20.480><c> we</c><00:39:20.640><c> got</c><00:39:20.800><c> this</c>

00:39:21.030 --> 00:39:21.040 align:start position:0%
type float so this is where we got this
 

00:39:21.040 --> 00:39:23.910 align:start position:0%
type float so this is where we got this
error<00:39:21.839><c> when</c><00:39:22.000><c> we</c><00:39:22.160><c> try</c><00:39:22.320><c> to</c><00:39:22.480><c> multiply</c><00:39:23.040><c> the</c><00:39:23.280><c> weight</c>

00:39:23.910 --> 00:39:23.920 align:start position:0%
error when we try to multiply the weight
 

00:39:23.920 --> 00:39:25.990 align:start position:0%
error when we try to multiply the weight
by<00:39:24.160><c> 0.45</c>

00:39:25.990 --> 00:39:26.000 align:start position:0%
by 0.45
 

00:39:26.000 --> 00:39:27.270 align:start position:0%
by 0.45
so

00:39:27.270 --> 00:39:27.280 align:start position:0%
so
 

00:39:27.280 --> 00:39:29.589 align:start position:0%
so
that<00:39:27.520><c> is</c><00:39:27.599><c> line</c><00:39:27.920><c> seven</c><00:39:28.240><c> in</c><00:39:28.400><c> our</c><00:39:28.480><c> code</c><00:39:29.280><c> now</c><00:39:29.520><c> the</c>

00:39:29.589 --> 00:39:29.599 align:start position:0%
that is line seven in our code now the
 

00:39:29.599 --> 00:39:31.670 align:start position:0%
that is line seven in our code now the
reason<00:39:29.920><c> this</c><00:39:30.079><c> is</c><00:39:30.240><c> happening</c><00:39:31.040><c> is</c><00:39:31.200><c> because</c><00:39:31.520><c> the</c>

00:39:31.670 --> 00:39:31.680 align:start position:0%
reason this is happening is because the
 

00:39:31.680 --> 00:39:34.710 align:start position:0%
reason this is happening is because the
wait<00:39:31.920><c> variable</c><00:39:32.640><c> is</c><00:39:32.800><c> storing</c><00:39:33.280><c> a</c><00:39:33.440><c> string</c><00:39:33.839><c> object</c>

00:39:34.710 --> 00:39:34.720 align:start position:0%
wait variable is storing a string object
 

00:39:34.720 --> 00:39:36.550 align:start position:0%
wait variable is storing a string object
because<00:39:35.040><c> earlier</c><00:39:35.280><c> i</c><00:39:35.440><c> told</c><00:39:35.599><c> you</c><00:39:36.000><c> the</c><00:39:36.240><c> input</c>

00:39:36.550 --> 00:39:36.560 align:start position:0%
because earlier i told you the input
 

00:39:36.560 --> 00:39:39.270 align:start position:0%
because earlier i told you the input
function<00:39:37.200><c> always</c><00:39:37.520><c> returns</c><00:39:38.000><c> a</c><00:39:38.240><c> string</c><00:39:38.960><c> so</c><00:39:39.119><c> here</c>

00:39:39.270 --> 00:39:39.280 align:start position:0%
function always returns a string so here
 

00:39:39.280 --> 00:39:41.589 align:start position:0%
function always returns a string so here
we<00:39:39.440><c> need</c><00:39:39.520><c> to</c><00:39:39.599><c> convert</c><00:39:40.000><c> the</c><00:39:40.160><c> weight</c>

00:39:41.589 --> 00:39:41.599 align:start position:0%
we need to convert the weight
 

00:39:41.599 --> 00:39:44.790 align:start position:0%
we need to convert the weight
to<00:39:41.760><c> a</c><00:39:41.839><c> number</c><00:39:42.640><c> we</c><00:39:42.800><c> can</c><00:39:42.960><c> either</c><00:39:43.280><c> use</c><00:39:43.839><c> the</c><00:39:44.160><c> end</c><00:39:44.640><c> or</c>

00:39:44.790 --> 00:39:44.800 align:start position:0%
to a number we can either use the end or
 

00:39:44.800 --> 00:39:46.230 align:start position:0%
to a number we can either use the end or
the<00:39:44.960><c> float</c><00:39:45.200><c> function</c>

00:39:46.230 --> 00:39:46.240 align:start position:0%
the float function
 

00:39:46.240 --> 00:39:48.550 align:start position:0%
the float function
let's<00:39:46.480><c> run</c><00:39:46.640><c> the</c><00:39:46.800><c> program</c><00:39:47.119><c> one</c><00:39:47.280><c> more</c><00:39:47.520><c> time</c>

00:39:48.550 --> 00:39:48.560 align:start position:0%
let's run the program one more time
 

00:39:48.560 --> 00:39:49.589 align:start position:0%
let's run the program one more time
so

00:39:49.589 --> 00:39:49.599 align:start position:0%
so
 

00:39:49.599 --> 00:39:51.990 align:start position:0%
so
170

00:39:51.990 --> 00:39:52.000 align:start position:0%
170
 

00:39:52.000 --> 00:39:53.510 align:start position:0%
170
in<00:39:52.240><c> pounds</c>

00:39:53.510 --> 00:39:53.520 align:start position:0%
in pounds
 

00:39:53.520 --> 00:39:55.430 align:start position:0%
in pounds
here's<00:39:53.839><c> the</c><00:39:53.920><c> second</c><00:39:54.240><c> error</c><00:39:54.880><c> can</c><00:39:55.200><c> only</c>

00:39:55.430 --> 00:39:55.440 align:start position:0%
here's the second error can only
 

00:39:55.440 --> 00:39:59.030 align:start position:0%
here's the second error can only
concatenate<00:39:56.240><c> string</c><00:39:57.040><c> not</c><00:39:57.280><c> float</c><00:39:57.839><c> to</c><00:39:58.079><c> string</c>

00:39:59.030 --> 00:39:59.040 align:start position:0%
concatenate string not float to string
 

00:39:59.040 --> 00:40:01.190 align:start position:0%
concatenate string not float to string
and<00:39:59.200><c> that</c><00:39:59.440><c> error</c><00:39:59.760><c> occurred</c>

00:40:01.190 --> 00:40:01.200 align:start position:0%
and that error occurred
 

00:40:01.200 --> 00:40:02.470 align:start position:0%
and that error occurred
over<00:40:01.440><c> here</c>

00:40:02.470 --> 00:40:02.480 align:start position:0%
over here
 

00:40:02.480 --> 00:40:04.230 align:start position:0%
over here
when<00:40:02.640><c> we</c><00:40:02.800><c> try</c><00:40:02.960><c> to</c><00:40:03.119><c> print</c><00:40:03.440><c> the</c><00:40:03.599><c> weight</c><00:40:04.079><c> in</c>

00:40:04.230 --> 00:40:04.240 align:start position:0%
when we try to print the weight in
 

00:40:04.240 --> 00:40:06.470 align:start position:0%
when we try to print the weight in
kilograms<00:40:05.359><c> so</c>

00:40:06.470 --> 00:40:06.480 align:start position:0%
kilograms so
 

00:40:06.480 --> 00:40:07.910 align:start position:0%
kilograms so
look<00:40:06.720><c> at</c><00:40:06.800><c> line</c><00:40:07.040><c> seven</c>

00:40:07.910 --> 00:40:07.920 align:start position:0%
look at line seven
 

00:40:07.920 --> 00:40:10.390 align:start position:0%
look at line seven
in<00:40:08.000><c> this</c><00:40:08.240><c> case</c><00:40:08.800><c> weight</c><00:40:09.040><c> as</c><00:40:09.200><c> an</c><00:40:09.359><c> integer</c><00:40:10.160><c> we</c><00:40:10.319><c> are</c>

00:40:10.390 --> 00:40:10.400 align:start position:0%
in this case weight as an integer we are
 

00:40:10.400 --> 00:40:12.790 align:start position:0%
in this case weight as an integer we are
multiplying<00:40:11.119><c> an</c><00:40:11.280><c> integer</c><00:40:11.680><c> by</c><00:40:11.839><c> a</c><00:40:11.920><c> float</c><00:40:12.560><c> and</c>

00:40:12.790 --> 00:40:12.800 align:start position:0%
multiplying an integer by a float and
 

00:40:12.800 --> 00:40:14.470 align:start position:0%
multiplying an integer by a float and
the<00:40:12.960><c> result</c><00:40:13.280><c> of</c><00:40:13.359><c> this</c><00:40:13.599><c> operation</c><00:40:14.079><c> is</c><00:40:14.240><c> going</c><00:40:14.400><c> to</c>

00:40:14.470 --> 00:40:14.480 align:start position:0%
the result of this operation is going to
 

00:40:14.480 --> 00:40:16.550 align:start position:0%
the result of this operation is going to
be<00:40:14.880><c> a</c><00:40:14.960><c> float</c>

00:40:16.550 --> 00:40:16.560 align:start position:0%
be a float
 

00:40:16.560 --> 00:40:18.150 align:start position:0%
be a float
now<00:40:16.800><c> on</c><00:40:16.960><c> line</c><00:40:17.200><c> eight</c><00:40:17.520><c> we</c><00:40:17.599><c> are</c><00:40:17.760><c> trying</c><00:40:18.000><c> to</c>

00:40:18.150 --> 00:40:18.160 align:start position:0%
now on line eight we are trying to
 

00:40:18.160 --> 00:40:21.109 align:start position:0%
now on line eight we are trying to
concatenate<00:40:18.960><c> or</c><00:40:19.119><c> combine</c><00:40:19.920><c> a</c><00:40:20.160><c> string</c><00:40:20.880><c> with</c><00:40:21.040><c> a</c>

00:40:21.109 --> 00:40:21.119 align:start position:0%
concatenate or combine a string with a
 

00:40:21.119 --> 00:40:23.190 align:start position:0%
concatenate or combine a string with a
float<00:40:21.680><c> and</c><00:40:21.920><c> python</c><00:40:22.400><c> doesn't</c><00:40:22.640><c> know</c><00:40:22.800><c> how</c><00:40:22.960><c> to</c>

00:40:23.190 --> 00:40:23.200 align:start position:0%
float and python doesn't know how to
 

00:40:23.200 --> 00:40:24.470 align:start position:0%
float and python doesn't know how to
execute<00:40:23.599><c> this</c><00:40:23.760><c> code</c>

00:40:24.470 --> 00:40:24.480 align:start position:0%
execute this code
 

00:40:24.480 --> 00:40:26.470 align:start position:0%
execute this code
to<00:40:24.640><c> solve</c><00:40:24.880><c> this</c><00:40:25.040><c> problem</c><00:40:25.680><c> we</c><00:40:25.839><c> need</c><00:40:26.000><c> to</c><00:40:26.079><c> convert</c>

00:40:26.470 --> 00:40:26.480 align:start position:0%
to solve this problem we need to convert
 

00:40:26.480 --> 00:40:29.750 align:start position:0%
to solve this problem we need to convert
this<00:40:26.560><c> flow</c><00:40:26.880><c> to</c><00:40:27.040><c> a</c><00:40:27.200><c> string</c><00:40:28.000><c> so</c><00:40:28.560><c> here</c><00:40:28.720><c> we</c><00:40:28.880><c> use</c><00:40:29.599><c> the</c>

00:40:29.750 --> 00:40:29.760 align:start position:0%
this flow to a string so here we use the
 

00:40:29.760 --> 00:40:32.390 align:start position:0%
this flow to a string so here we use the
built-in<00:40:30.640><c> stir</c><00:40:31.280><c> function</c>

00:40:32.390 --> 00:40:32.400 align:start position:0%
built-in stir function
 

00:40:32.400 --> 00:40:33.750 align:start position:0%
built-in stir function
let's<00:40:32.640><c> run</c><00:40:32.800><c> the</c><00:40:32.960><c> program</c><00:40:33.359><c> and</c><00:40:33.440><c> see</c><00:40:33.599><c> what</c>

00:40:33.750 --> 00:40:33.760 align:start position:0%
let's run the program and see what
 

00:40:33.760 --> 00:40:34.790 align:start position:0%
let's run the program and see what
happens

00:40:34.790 --> 00:40:34.800 align:start position:0%
happens
 

00:40:34.800 --> 00:40:36.829 align:start position:0%
happens
so

00:40:36.829 --> 00:40:36.839 align:start position:0%
so
 

00:40:36.839 --> 00:40:39.990 align:start position:0%
so
170<00:40:37.839><c> in</c><00:40:38.079><c> pounds</c><00:40:38.960><c> and</c><00:40:39.200><c> here's</c><00:40:39.440><c> my</c><00:40:39.680><c> weight</c><00:40:39.920><c> in</c>

00:40:39.990 --> 00:40:40.000 align:start position:0%
170 in pounds and here's my weight in
 

00:40:40.000 --> 00:40:42.150 align:start position:0%
170 in pounds and here's my weight in
kilograms<00:40:41.040><c> now</c><00:40:41.200><c> let's</c><00:40:41.440><c> try</c><00:40:41.680><c> entering</c><00:40:42.079><c> a</c>

00:40:42.150 --> 00:40:42.160 align:start position:0%
kilograms now let's try entering a
 

00:40:42.160 --> 00:40:44.710 align:start position:0%
kilograms now let's try entering a
weight<00:40:42.400><c> in</c><00:40:42.480><c> kilograms</c><00:40:43.520><c> so</c><00:40:44.079><c> run</c><00:40:44.240><c> it</c><00:40:44.319><c> one</c><00:40:44.480><c> more</c>

00:40:44.710 --> 00:40:44.720 align:start position:0%
weight in kilograms so run it one more
 

00:40:44.720 --> 00:40:45.670 align:start position:0%
weight in kilograms so run it one more
time

00:40:45.670 --> 00:40:45.680 align:start position:0%
time
 

00:40:45.680 --> 00:40:47.829 align:start position:0%
time
let's<00:40:45.920><c> say</c><00:40:46.240><c> 76</c>

00:40:47.829 --> 00:40:47.839 align:start position:0%
let's say 76
 

00:40:47.839 --> 00:40:49.750 align:start position:0%
let's say 76
kilos

00:40:49.750 --> 00:40:49.760 align:start position:0%
kilos
 

00:40:49.760 --> 00:40:51.990 align:start position:0%
kilos
here<00:40:50.000><c> we</c><00:40:50.079><c> get</c><00:40:50.319><c> a</c><00:40:50.400><c> familiar</c><00:40:50.960><c> error</c><00:40:51.440><c> can</c><00:40:51.760><c> only</c>

00:40:51.990 --> 00:40:52.000 align:start position:0%
here we get a familiar error can only
 

00:40:52.000 --> 00:40:55.030 align:start position:0%
here we get a familiar error can only
concatenate<00:40:52.800><c> string</c><00:40:53.280><c> to</c><00:40:53.520><c> string</c><00:40:53.920><c> not</c><00:40:54.160><c> float</c>

00:40:55.030 --> 00:40:55.040 align:start position:0%
concatenate string to string not float
 

00:40:55.040 --> 00:40:57.829 align:start position:0%
concatenate string to string not float
so<00:40:55.280><c> this</c><00:40:55.440><c> error</c><00:40:55.760><c> occurred</c><00:40:56.640><c> on</c><00:40:56.800><c> line</c><00:40:57.119><c> five</c>

00:40:57.829 --> 00:40:57.839 align:start position:0%
so this error occurred on line five
 

00:40:57.839 --> 00:41:01.430 align:start position:0%
so this error occurred on line five
where<00:40:58.400><c> we</c><00:40:58.560><c> try</c><00:40:58.800><c> to</c><00:40:58.880><c> concatenate</c><00:40:59.599><c> a</c><00:40:59.760><c> string</c>

00:41:01.430 --> 00:41:01.440 align:start position:0%
where we try to concatenate a string
 

00:41:01.440 --> 00:41:03.430 align:start position:0%
where we try to concatenate a string
to<00:41:01.599><c> a</c><00:41:01.680><c> float</c><00:41:02.400><c> so</c><00:41:02.560><c> once</c><00:41:02.800><c> again</c><00:41:03.040><c> we</c><00:41:03.200><c> need</c><00:41:03.280><c> to</c>

00:41:03.430 --> 00:41:03.440 align:start position:0%
to a float so once again we need to
 

00:41:03.440 --> 00:41:06.870 align:start position:0%
to a float so once again we need to
convert<00:41:03.839><c> this</c><00:41:04.480><c> to</c><00:41:04.640><c> a</c><00:41:04.800><c> string</c><00:41:05.200><c> object</c><00:41:06.319><c> now</c>

00:41:06.870 --> 00:41:06.880 align:start position:0%
convert this to a string object now
 

00:41:06.880 --> 00:41:09.349 align:start position:0%
convert this to a string object now
let's<00:41:07.119><c> run</c><00:41:07.280><c> the</c><00:41:07.359><c> program</c><00:41:07.680><c> one</c><00:41:07.839><c> more</c><00:41:08.000><c> time</c>

00:41:09.349 --> 00:41:09.359 align:start position:0%
let's run the program one more time
 

00:41:09.359 --> 00:41:10.790 align:start position:0%
let's run the program one more time
76

00:41:10.790 --> 00:41:10.800 align:start position:0%
76
 

00:41:10.800 --> 00:41:11.829 align:start position:0%
76
kilos

00:41:11.829 --> 00:41:11.839 align:start position:0%
kilos
 

00:41:11.839 --> 00:41:15.990 align:start position:0%
kilos
is<00:41:12.079><c> equal</c><00:41:12.319><c> to</c><00:41:12.680><c> 168</c><00:41:13.680><c> pounds</c>

00:41:15.990 --> 00:41:16.000 align:start position:0%
is equal to 168 pounds
 

00:41:16.000 --> 00:41:17.510 align:start position:0%
is equal to 168 pounds
hey<00:41:16.240><c> guys</c><00:41:16.560><c> i</c><00:41:16.640><c> just</c><00:41:16.800><c> wanted</c><00:41:16.960><c> to</c><00:41:17.040><c> let</c><00:41:17.200><c> you</c><00:41:17.280><c> know</c>

00:41:17.510 --> 00:41:17.520 align:start position:0%
hey guys i just wanted to let you know
 

00:41:17.520 --> 00:41:19.470 align:start position:0%
hey guys i just wanted to let you know
that<00:41:17.680><c> i</c><00:41:17.760><c> have</c><00:41:17.920><c> an</c><00:41:18.160><c> online</c><00:41:18.480><c> coding</c><00:41:18.880><c> school</c><00:41:19.200><c> at</c>

00:41:19.470 --> 00:41:19.480 align:start position:0%
that i have an online coding school at
 

00:41:19.480 --> 00:41:21.190 align:start position:0%
that i have an online coding school at
codewoodmosh.com<00:41:20.560><c> where</c><00:41:20.720><c> you</c><00:41:20.800><c> can</c><00:41:20.960><c> find</c>

00:41:21.190 --> 00:41:21.200 align:start position:0%
codewoodmosh.com where you can find
 

00:41:21.200 --> 00:41:22.950 align:start position:0%
codewoodmosh.com where you can find
plenty<00:41:21.520><c> of</c><00:41:21.599><c> courses</c><00:41:22.000><c> on</c><00:41:22.160><c> web</c><00:41:22.480><c> and</c><00:41:22.560><c> mobile</c>

00:41:22.950 --> 00:41:22.960 align:start position:0%
plenty of courses on web and mobile
 

00:41:22.960 --> 00:41:24.390 align:start position:0%
plenty of courses on web and mobile
development<00:41:23.680><c> in</c><00:41:23.839><c> fact</c><00:41:24.079><c> i</c><00:41:24.160><c> have</c><00:41:24.319><c> a</c>

00:41:24.390 --> 00:41:24.400 align:start position:0%
development in fact i have a
 

00:41:24.400 --> 00:41:26.550 align:start position:0%
development in fact i have a
comprehensive<00:41:25.119><c> python</c><00:41:25.440><c> course</c><00:41:26.000><c> that</c><00:41:26.240><c> teaches</c>

00:41:26.550 --> 00:41:26.560 align:start position:0%
comprehensive python course that teaches
 

00:41:26.560 --> 00:41:28.150 align:start position:0%
comprehensive python course that teaches
you<00:41:26.800><c> everything</c><00:41:27.200><c> about</c><00:41:27.359><c> python</c><00:41:27.760><c> from</c><00:41:28.000><c> the</c>

00:41:28.150 --> 00:41:28.160 align:start position:0%
you everything about python from the
 

00:41:28.160 --> 00:41:30.309 align:start position:0%
you everything about python from the
basics<00:41:28.560><c> to</c><00:41:28.720><c> more</c><00:41:28.960><c> advanced</c><00:41:29.440><c> concepts</c><00:41:30.079><c> so</c>

00:41:30.309 --> 00:41:30.319 align:start position:0%
basics to more advanced concepts so
 

00:41:30.319 --> 00:41:31.990 align:start position:0%
basics to more advanced concepts so
after<00:41:30.640><c> you</c><00:41:30.720><c> watch</c><00:41:30.960><c> this</c><00:41:31.119><c> tutorial</c><00:41:31.760><c> if</c><00:41:31.920><c> you</c>

00:41:31.990 --> 00:41:32.000 align:start position:0%
after you watch this tutorial if you
 

00:41:32.000 --> 00:41:33.430 align:start position:0%
after you watch this tutorial if you
want<00:41:32.079><c> to</c><00:41:32.160><c> learn</c><00:41:32.400><c> more</c><00:41:32.800><c> you</c><00:41:32.960><c> may</c><00:41:33.119><c> want</c><00:41:33.200><c> to</c><00:41:33.280><c> look</c>

00:41:33.430 --> 00:41:33.440 align:start position:0%
want to learn more you may want to look
 

00:41:33.440 --> 00:41:35.349 align:start position:0%
want to learn more you may want to look
at<00:41:33.520><c> my</c><00:41:33.680><c> python</c><00:41:34.079><c> course</c><00:41:34.480><c> it</c><00:41:34.640><c> comes</c><00:41:34.880><c> with</c><00:41:35.040><c> a</c><00:41:35.119><c> 30</c>

00:41:35.349 --> 00:41:35.359 align:start position:0%
at my python course it comes with a 30
 

00:41:35.359 --> 00:41:36.790 align:start position:0%
at my python course it comes with a 30
day<00:41:35.520><c> money</c><00:41:35.760><c> back</c><00:41:35.920><c> guarantee</c><00:41:36.560><c> and</c><00:41:36.720><c> a</c>

00:41:36.790 --> 00:41:36.800 align:start position:0%
day money back guarantee and a
 

00:41:36.800 --> 00:41:38.470 align:start position:0%
day money back guarantee and a
certificate<00:41:37.359><c> of</c><00:41:37.440><c> completion</c><00:41:38.000><c> you</c><00:41:38.079><c> can</c><00:41:38.160><c> add</c><00:41:38.400><c> to</c>

00:41:38.470 --> 00:41:38.480 align:start position:0%
certificate of completion you can add to
 

00:41:38.480 --> 00:41:40.390 align:start position:0%
certificate of completion you can add to
your<00:41:38.640><c> resume</c><00:41:39.280><c> in</c><00:41:39.440><c> case</c><00:41:39.599><c> you're</c><00:41:39.839><c> interested</c>

00:41:40.390 --> 00:41:40.400 align:start position:0%
your resume in case you're interested
 

00:41:40.400 --> 00:41:46.470 align:start position:0%
your resume in case you're interested
the<00:41:40.560><c> link</c><00:41:40.800><c> is</c><00:41:40.960><c> below</c><00:41:41.200><c> this</c><00:41:41.359><c> video</c>

00:41:46.470 --> 00:41:46.480 align:start position:0%
 
 

00:41:46.480 --> 00:41:47.670 align:start position:0%
 
in<00:41:46.560><c> this</c><00:41:46.800><c> tutorial</c><00:41:47.200><c> we're</c><00:41:47.280><c> going</c><00:41:47.440><c> to</c><00:41:47.520><c> talk</c>

00:41:47.670 --> 00:41:47.680 align:start position:0%
in this tutorial we're going to talk
 

00:41:47.680 --> 00:41:50.309 align:start position:0%
in this tutorial we're going to talk
about<00:41:48.000><c> while</c><00:41:48.240><c> loops</c><00:41:48.640><c> in</c><00:41:48.800><c> python</c><00:41:49.599><c> we</c><00:41:49.760><c> use</c><00:41:50.000><c> while</c>

00:41:50.309 --> 00:41:50.319 align:start position:0%
about while loops in python we use while
 

00:41:50.319 --> 00:41:52.630 align:start position:0%
about while loops in python we use while
loops<00:41:50.720><c> to</c><00:41:50.880><c> repeat</c><00:41:51.359><c> a</c><00:41:51.520><c> block</c><00:41:51.839><c> of</c><00:41:51.920><c> code</c><00:41:52.240><c> multiple</c>

00:41:52.630 --> 00:41:52.640 align:start position:0%
loops to repeat a block of code multiple
 

00:41:52.640 --> 00:41:54.390 align:start position:0%
loops to repeat a block of code multiple
times<00:41:53.280><c> for</c><00:41:53.440><c> example</c><00:41:53.760><c> let's</c><00:41:53.920><c> say</c><00:41:54.079><c> we</c><00:41:54.160><c> want</c><00:41:54.319><c> to</c>

00:41:54.390 --> 00:41:54.400 align:start position:0%
times for example let's say we want to
 

00:41:54.400 --> 00:41:57.109 align:start position:0%
times for example let's say we want to
print<00:41:54.800><c> the</c><00:41:54.960><c> numbers</c><00:41:55.359><c> one</c><00:41:55.599><c> to</c><00:41:55.760><c> five</c><00:41:56.480><c> a</c><00:41:56.720><c> poor</c><00:41:56.960><c> way</c>

00:41:57.109 --> 00:41:57.119 align:start position:0%
print the numbers one to five a poor way
 

00:41:57.119 --> 00:41:59.510 align:start position:0%
print the numbers one to five a poor way
of<00:41:57.200><c> doing</c><00:41:57.440><c> this</c><00:41:58.240><c> is</c><00:41:58.400><c> writing</c><00:41:58.720><c> code</c><00:41:58.960><c> like</c><00:41:59.119><c> this</c>

00:41:59.510 --> 00:41:59.520 align:start position:0%
of doing this is writing code like this
 

00:41:59.520 --> 00:42:02.630 align:start position:0%
of doing this is writing code like this
print<00:41:59.839><c> one</c><00:42:00.319><c> then</c><00:42:00.560><c> print</c><00:42:00.880><c> two</c><00:42:01.280><c> print</c><00:42:01.599><c> 3</c>

00:42:02.630 --> 00:42:02.640 align:start position:0%
print one then print two print 3
 

00:42:02.640 --> 00:42:05.190 align:start position:0%
print one then print two print 3
print<00:42:02.880><c> 4</c><00:42:03.599><c> and</c><00:42:03.839><c> print</c><00:42:04.160><c> 5.</c>

00:42:05.190 --> 00:42:05.200 align:start position:0%
print 4 and print 5.
 

00:42:05.200 --> 00:42:07.510 align:start position:0%
print 4 and print 5.
now<00:42:05.440><c> why</c><00:42:05.599><c> is</c><00:42:05.760><c> this</c><00:42:05.920><c> a</c><00:42:06.000><c> bad</c><00:42:06.240><c> approach</c><00:42:06.720><c> well</c><00:42:07.359><c> what</c>

00:42:07.510 --> 00:42:07.520 align:start position:0%
now why is this a bad approach well what
 

00:42:07.520 --> 00:42:09.829 align:start position:0%
now why is this a bad approach well what
if<00:42:07.680><c> we</c><00:42:07.760><c> wanted</c><00:42:07.920><c> to</c><00:42:08.079><c> print</c><00:42:08.319><c> the</c><00:42:08.480><c> numbers</c><00:42:09.119><c> 1</c><00:42:09.440><c> to</c><00:42:09.680><c> 1</c>

00:42:09.829 --> 00:42:09.839 align:start position:0%
if we wanted to print the numbers 1 to 1
 

00:42:09.839 --> 00:42:12.069 align:start position:0%
if we wanted to print the numbers 1 to 1
million<00:42:10.480><c> we</c><00:42:10.640><c> don't</c><00:42:10.800><c> want</c><00:42:10.960><c> to</c><00:42:11.040><c> write</c><00:42:11.520><c> 1</c><00:42:11.760><c> million</c>

00:42:12.069 --> 00:42:12.079 align:start position:0%
million we don't want to write 1 million
 

00:42:12.079 --> 00:42:13.990 align:start position:0%
million we don't want to write 1 million
lines<00:42:12.319><c> of</c><00:42:12.480><c> code</c><00:42:12.960><c> each</c><00:42:13.280><c> line</c><00:42:13.520><c> printing</c><00:42:13.920><c> a</c>

00:42:13.990 --> 00:42:14.000 align:start position:0%
lines of code each line printing a
 

00:42:14.000 --> 00:42:16.710 align:start position:0%
lines of code each line printing a
number<00:42:14.720><c> this</c><00:42:14.960><c> is</c><00:42:15.119><c> where</c><00:42:15.440><c> we</c><00:42:15.440><c> use</c><00:42:15.760><c> while</c><00:42:16.000><c> loops</c>

00:42:16.710 --> 00:42:16.720 align:start position:0%
number this is where we use while loops
 

00:42:16.720 --> 00:42:17.589 align:start position:0%
number this is where we use while loops
so

00:42:17.589 --> 00:42:17.599 align:start position:0%
so
 

00:42:17.599 --> 00:42:19.270 align:start position:0%
so
we'll<00:42:17.839><c> start</c><00:42:18.079><c> off</c><00:42:18.160><c> by</c><00:42:18.240><c> declaring</c><00:42:18.640><c> a</c><00:42:18.720><c> variable</c>

00:42:19.270 --> 00:42:19.280 align:start position:0%
we'll start off by declaring a variable
 

00:42:19.280 --> 00:42:21.829 align:start position:0%
we'll start off by declaring a variable
like<00:42:19.520><c> i</c><00:42:20.160><c> and</c><00:42:20.400><c> set</c><00:42:20.560><c> it</c><00:42:20.640><c> to</c><00:42:20.800><c> our</c><00:42:20.960><c> initial</c><00:42:21.359><c> number</c>

00:42:21.829 --> 00:42:21.839 align:start position:0%
like i and set it to our initial number
 

00:42:21.839 --> 00:42:23.030 align:start position:0%
like i and set it to our initial number
let's<00:42:22.000><c> say</c><00:42:22.240><c> one</c>

00:42:23.030 --> 00:42:23.040 align:start position:0%
let's say one
 

00:42:23.040 --> 00:42:25.589 align:start position:0%
let's say one
then<00:42:23.280><c> we</c><00:42:23.440><c> type</c><00:42:24.000><c> while</c><00:42:24.800><c> and</c><00:42:24.960><c> here</c><00:42:25.119><c> we</c><00:42:25.280><c> type</c><00:42:25.520><c> a</c>

00:42:25.589 --> 00:42:25.599 align:start position:0%
then we type while and here we type a
 

00:42:25.599 --> 00:42:27.510 align:start position:0%
then we type while and here we type a
condition<00:42:26.319><c> so</c><00:42:26.480><c> once</c><00:42:26.720><c> again</c><00:42:26.880><c> we</c><00:42:27.040><c> can</c><00:42:27.119><c> use</c><00:42:27.359><c> our</c>

00:42:27.510 --> 00:42:27.520 align:start position:0%
condition so once again we can use our
 

00:42:27.520 --> 00:42:29.349 align:start position:0%
condition so once again we can use our
comparison<00:42:28.160><c> operators</c>

00:42:29.349 --> 00:42:29.359 align:start position:0%
comparison operators
 

00:42:29.359 --> 00:42:32.710 align:start position:0%
comparison operators
let's<00:42:29.599><c> say</c><00:42:30.240><c> i</c><00:42:30.800><c> less</c><00:42:31.040><c> than</c><00:42:31.599><c> 5</c><00:42:32.079><c> less</c><00:42:32.319><c> than</c><00:42:32.480><c> or</c>

00:42:32.710 --> 00:42:32.720 align:start position:0%
let's say i less than 5 less than or
 

00:42:32.720 --> 00:42:33.990 align:start position:0%
let's say i less than 5 less than or
equal<00:42:32.960><c> to</c><00:42:33.200><c> 5.</c>

00:42:33.990 --> 00:42:34.000 align:start position:0%
equal to 5.
 

00:42:34.000 --> 00:42:36.309 align:start position:0%
equal to 5.
as<00:42:34.160><c> long</c><00:42:34.319><c> as</c><00:42:34.400><c> this</c><00:42:34.560><c> condition</c><00:42:34.960><c> is</c><00:42:35.200><c> true</c><00:42:35.839><c> then</c>

00:42:36.309 --> 00:42:36.319 align:start position:0%
as long as this condition is true then
 

00:42:36.319 --> 00:42:38.069 align:start position:0%
as long as this condition is true then
the<00:42:36.480><c> code</c><00:42:36.720><c> that</c><00:42:36.880><c> we</c><00:42:37.040><c> write</c><00:42:37.440><c> inside</c><00:42:37.760><c> of</c><00:42:37.920><c> the</c>

00:42:38.069 --> 00:42:38.079 align:start position:0%
the code that we write inside of the
 

00:42:38.079 --> 00:42:40.630 align:start position:0%
the code that we write inside of the
while<00:42:38.319><c> block</c><00:42:38.720><c> will</c><00:42:38.880><c> get</c><00:42:39.119><c> executed</c><00:42:40.079><c> so</c><00:42:40.240><c> here</c><00:42:40.480><c> we</c>

00:42:40.630 --> 00:42:40.640 align:start position:0%
while block will get executed so here we
 

00:42:40.640 --> 00:42:43.670 align:start position:0%
while block will get executed so here we
type<00:42:41.119><c> a</c><00:42:41.359><c> colon</c><00:42:42.079><c> then</c><00:42:42.319><c> press</c><00:42:42.640><c> enter</c><00:42:43.359><c> now</c><00:42:43.599><c> we</c>

00:42:43.670 --> 00:42:43.680 align:start position:0%
type a colon then press enter now we
 

00:42:43.680 --> 00:42:45.270 align:start position:0%
type a colon then press enter now we
have<00:42:43.920><c> a</c><00:42:44.000><c> block</c><00:42:44.319><c> of</c><00:42:44.480><c> code</c>

00:42:45.270 --> 00:42:45.280 align:start position:0%
have a block of code
 

00:42:45.280 --> 00:42:48.069 align:start position:0%
have a block of code
in<00:42:45.359><c> this</c><00:42:45.599><c> block</c><00:42:45.839><c> we</c><00:42:46.000><c> can</c><00:42:46.160><c> print</c><00:42:46.800><c> i</c>

00:42:48.069 --> 00:42:48.079 align:start position:0%
in this block we can print i
 

00:42:48.079 --> 00:42:50.710 align:start position:0%
in this block we can print i
and<00:42:48.160><c> then</c><00:42:48.319><c> we</c><00:42:48.480><c> need</c><00:42:48.640><c> to</c><00:42:48.800><c> increment</c><00:42:49.280><c> i</c><00:42:49.520><c> y</c><00:42:49.839><c> one</c><00:42:50.480><c> so</c>

00:42:50.710 --> 00:42:50.720 align:start position:0%
and then we need to increment i y one so
 

00:42:50.720 --> 00:42:53.750 align:start position:0%
and then we need to increment i y one so
we<00:42:50.880><c> set</c><00:42:51.119><c> i</c><00:42:51.520><c> to</c><00:42:51.760><c> i</c><00:42:52.079><c> plus</c><00:42:52.319><c> one</c><00:42:53.040><c> if</c><00:42:53.200><c> you</c><00:42:53.359><c> don't</c><00:42:53.599><c> do</c>

00:42:53.750 --> 00:42:53.760 align:start position:0%
we set i to i plus one if you don't do
 

00:42:53.760 --> 00:42:56.390 align:start position:0%
we set i to i plus one if you don't do
this<00:42:54.079><c> i</c><00:42:54.319><c> will</c><00:42:54.560><c> always</c><00:42:54.880><c> be</c><00:42:55.119><c> one</c><00:42:55.680><c> and</c><00:42:55.839><c> this</c><00:42:56.079><c> block</c>

00:42:56.390 --> 00:42:56.400 align:start position:0%
this i will always be one and this block
 

00:42:56.400 --> 00:42:57.510 align:start position:0%
this i will always be one and this block
of<00:42:56.560><c> code</c>

00:42:57.510 --> 00:42:57.520 align:start position:0%
of code
 

00:42:57.520 --> 00:43:00.069 align:start position:0%
of code
will<00:42:57.680><c> get</c><00:42:58.000><c> executed</c><00:42:58.800><c> indefinitely</c><00:42:59.760><c> it</c><00:42:59.920><c> will</c>

00:43:00.069 --> 00:43:00.079 align:start position:0%
will get executed indefinitely it will
 

00:43:00.079 --> 00:43:01.990 align:start position:0%
will get executed indefinitely it will
never<00:43:00.319><c> terminate</c><00:43:01.200><c> basically</c><00:43:01.599><c> our</c><00:43:01.760><c> program</c>

00:43:01.990 --> 00:43:02.000 align:start position:0%
never terminate basically our program
 

00:43:02.000 --> 00:43:04.230 align:start position:0%
never terminate basically our program
will<00:43:02.160><c> continue</c><00:43:02.640><c> running</c><00:43:03.280><c> until</c><00:43:03.599><c> it</c><00:43:03.760><c> runs</c><00:43:04.079><c> out</c>

00:43:04.230 --> 00:43:04.240 align:start position:0%
will continue running until it runs out
 

00:43:04.240 --> 00:43:05.430 align:start position:0%
will continue running until it runs out
of<00:43:04.400><c> memory</c>

00:43:05.430 --> 00:43:05.440 align:start position:0%
of memory
 

00:43:05.440 --> 00:43:06.150 align:start position:0%
of memory
so

00:43:06.150 --> 00:43:06.160 align:start position:0%
so
 

00:43:06.160 --> 00:43:08.950 align:start position:0%
so
in<00:43:06.319><c> the</c><00:43:06.400><c> first</c><00:43:06.640><c> iteration</c><00:43:07.520><c> i</c><00:43:07.760><c> is</c><00:43:08.000><c> 1</c><00:43:08.640><c> is</c><00:43:08.800><c> less</c>

00:43:08.950 --> 00:43:08.960 align:start position:0%
in the first iteration i is 1 is less
 

00:43:08.960 --> 00:43:11.349 align:start position:0%
in the first iteration i is 1 is less
than<00:43:09.200><c> 5</c><00:43:09.680><c> so</c><00:43:09.920><c> python</c><00:43:10.319><c> is</c><00:43:10.400><c> going</c><00:43:10.480><c> to</c><00:43:10.640><c> execute</c>

00:43:11.349 --> 00:43:11.359 align:start position:0%
than 5 so python is going to execute
 

00:43:11.359 --> 00:43:13.589 align:start position:0%
than 5 so python is going to execute
this<00:43:11.520><c> block</c><00:43:11.839><c> of</c><00:43:12.000><c> code</c><00:43:12.640><c> it</c><00:43:12.800><c> will</c><00:43:12.960><c> print</c><00:43:13.280><c> 1</c><00:43:13.520><c> on</c>

00:43:13.589 --> 00:43:13.599 align:start position:0%
this block of code it will print 1 on
 

00:43:13.599 --> 00:43:16.470 align:start position:0%
this block of code it will print 1 on
the<00:43:13.680><c> terminal</c><00:43:14.480><c> and</c><00:43:14.640><c> then</c><00:43:14.880><c> i</c><00:43:15.119><c> becomes</c><00:43:15.520><c> 2.</c>

00:43:16.470 --> 00:43:16.480 align:start position:0%
the terminal and then i becomes 2.
 

00:43:16.480 --> 00:43:18.870 align:start position:0%
the terminal and then i becomes 2.
then<00:43:16.720><c> the</c><00:43:16.880><c> control</c><00:43:17.280><c> moves</c><00:43:17.520><c> back</c><00:43:17.680><c> over</c><00:43:17.920><c> here</c><00:43:18.640><c> so</c>

00:43:18.870 --> 00:43:18.880 align:start position:0%
then the control moves back over here so
 

00:43:18.880 --> 00:43:21.030 align:start position:0%
then the control moves back over here so
python<00:43:19.359><c> evaluates</c><00:43:19.839><c> this</c><00:43:20.000><c> condition</c>

00:43:21.030 --> 00:43:21.040 align:start position:0%
python evaluates this condition
 

00:43:21.040 --> 00:43:23.750 align:start position:0%
python evaluates this condition
2<00:43:21.280><c> is</c><00:43:21.440><c> less</c><00:43:21.760><c> than</c><00:43:22.000><c> or</c><00:43:22.319><c> equal</c><00:43:22.640><c> to</c><00:43:22.800><c> 5</c><00:43:23.440><c> so</c><00:43:23.599><c> the</c>

00:43:23.750 --> 00:43:23.760 align:start position:0%
2 is less than or equal to 5 so the
 

00:43:23.760 --> 00:43:26.230 align:start position:0%
2 is less than or equal to 5 so the
condition<00:43:24.160><c> is</c><00:43:24.319><c> true</c><00:43:24.880><c> and</c><00:43:25.359><c> once</c><00:43:25.599><c> again</c><00:43:25.839><c> python</c>

00:43:26.230 --> 00:43:26.240 align:start position:0%
condition is true and once again python
 

00:43:26.240 --> 00:43:27.750 align:start position:0%
condition is true and once again python
is<00:43:26.319><c> going</c><00:43:26.400><c> to</c><00:43:26.560><c> execute</c><00:43:26.960><c> this</c><00:43:27.119><c> block</c><00:43:27.440><c> one</c><00:43:27.599><c> more</c>

00:43:27.750 --> 00:43:27.760 align:start position:0%
is going to execute this block one more
 

00:43:27.760 --> 00:43:30.069 align:start position:0%
is going to execute this block one more
time<00:43:28.480><c> in</c><00:43:28.560><c> the</c><00:43:28.720><c> second</c><00:43:29.040><c> iteration</c><00:43:29.760><c> we're</c><00:43:29.920><c> going</c>

00:43:30.069 --> 00:43:30.079 align:start position:0%
time in the second iteration we're going
 

00:43:30.079 --> 00:43:32.230 align:start position:0%
time in the second iteration we're going
to<00:43:30.160><c> see</c><00:43:30.560><c> two</c><00:43:30.800><c> on</c><00:43:30.880><c> the</c><00:43:31.040><c> terminal</c><00:43:31.680><c> and</c><00:43:31.760><c> then</c><00:43:32.079><c> i</c>

00:43:32.230 --> 00:43:32.240 align:start position:0%
to see two on the terminal and then i
 

00:43:32.240 --> 00:43:34.950 align:start position:0%
to see two on the terminal and then i
will<00:43:32.400><c> become</c><00:43:32.880><c> three</c><00:43:33.599><c> so</c><00:43:33.760><c> this</c><00:43:33.920><c> will</c><00:43:34.160><c> continue</c>

00:43:34.950 --> 00:43:34.960 align:start position:0%
will become three so this will continue
 

00:43:34.960 --> 00:43:37.109 align:start position:0%
will become three so this will continue
until<00:43:35.280><c> this</c><00:43:35.440><c> condition</c><00:43:35.920><c> is</c><00:43:36.160><c> no</c><00:43:36.319><c> longer</c><00:43:36.720><c> true</c>

00:43:37.109 --> 00:43:37.119 align:start position:0%
until this condition is no longer true
 

00:43:37.119 --> 00:43:39.030 align:start position:0%
until this condition is no longer true
let<00:43:37.280><c> me</c><00:43:37.440><c> show</c><00:43:37.599><c> you</c><00:43:38.240><c> so</c>

00:43:39.030 --> 00:43:39.040 align:start position:0%
let me show you so
 

00:43:39.040 --> 00:43:40.950 align:start position:0%
let me show you so
let's<00:43:39.280><c> run</c><00:43:39.440><c> this</c><00:43:39.599><c> program</c>

00:43:40.950 --> 00:43:40.960 align:start position:0%
let's run this program
 

00:43:40.960 --> 00:43:43.349 align:start position:0%
let's run this program
now<00:43:41.200><c> we</c><00:43:41.280><c> see</c><00:43:41.440><c> the</c><00:43:41.599><c> numbers</c><00:43:42.000><c> one</c><00:43:42.240><c> to</c><00:43:42.400><c> five</c><00:43:43.200><c> so</c>

00:43:43.349 --> 00:43:43.359 align:start position:0%
now we see the numbers one to five so
 

00:43:43.359 --> 00:43:45.589 align:start position:0%
now we see the numbers one to five so
this<00:43:43.520><c> is</c><00:43:43.599><c> the</c><00:43:43.760><c> beauty</c><00:43:44.160><c> of</c><00:43:44.319><c> while</c><00:43:44.560><c> loops</c>

00:43:45.589 --> 00:43:45.599 align:start position:0%
this is the beauty of while loops
 

00:43:45.599 --> 00:43:47.910 align:start position:0%
this is the beauty of while loops
i<00:43:45.760><c> can</c><00:43:46.000><c> easily</c><00:43:46.400><c> change</c><00:43:46.720><c> five</c>

00:43:47.910 --> 00:43:47.920 align:start position:0%
i can easily change five
 

00:43:47.920 --> 00:43:49.349 align:start position:0%
i can easily change five
to<00:43:48.240><c> one</c>

00:43:49.349 --> 00:43:49.359 align:start position:0%
to one
 

00:43:49.359 --> 00:43:51.430 align:start position:0%
to one
thousand<00:43:50.000><c> and</c><00:43:50.240><c> by</c><00:43:50.400><c> the</c><00:43:50.480><c> way</c><00:43:50.640><c> i'm</c><00:43:50.880><c> separating</c>

00:43:51.430 --> 00:43:51.440 align:start position:0%
thousand and by the way i'm separating
 

00:43:51.440 --> 00:43:53.589 align:start position:0%
thousand and by the way i'm separating
these<00:43:51.680><c> three</c><00:43:51.920><c> digits</c><00:43:52.319><c> using</c><00:43:52.640><c> an</c><00:43:52.800><c> underscore</c>

00:43:53.589 --> 00:43:53.599 align:start position:0%
these three digits using an underscore
 

00:43:53.599 --> 00:43:55.349 align:start position:0%
these three digits using an underscore
this<00:43:53.839><c> makes</c><00:43:54.079><c> my</c><00:43:54.240><c> number</c><00:43:54.560><c> more</c><00:43:54.720><c> readable</c><00:43:55.200><c> we</c>

00:43:55.349 --> 00:43:55.359 align:start position:0%
this makes my number more readable we
 

00:43:55.359 --> 00:43:56.870 align:start position:0%
this makes my number more readable we
don't<00:43:55.520><c> have</c><00:43:55.680><c> to</c><00:43:55.839><c> add</c><00:43:56.000><c> this</c><00:43:56.240><c> but</c><00:43:56.400><c> it</c><00:43:56.480><c> just</c><00:43:56.640><c> makes</c>

00:43:56.870 --> 00:43:56.880 align:start position:0%
don't have to add this but it just makes
 

00:43:56.880 --> 00:43:58.710 align:start position:0%
don't have to add this but it just makes
our<00:43:57.040><c> code</c><00:43:57.440><c> more</c><00:43:57.599><c> readable</c>

00:43:58.710 --> 00:43:58.720 align:start position:0%
our code more readable
 

00:43:58.720 --> 00:44:00.870 align:start position:0%
our code more readable
so<00:43:59.040><c> let's</c><00:43:59.280><c> run</c><00:43:59.440><c> the</c><00:43:59.599><c> program</c>

00:44:00.870 --> 00:44:00.880 align:start position:0%
so let's run the program
 

00:44:00.880 --> 00:44:03.750 align:start position:0%
so let's run the program
now<00:44:01.119><c> we</c><00:44:01.200><c> see</c><00:44:01.359><c> the</c><00:44:01.520><c> numbers</c><00:44:02.160><c> 1</c><00:44:02.560><c> to</c><00:44:02.720><c> 1000.</c><00:44:03.520><c> it's</c>

00:44:03.750 --> 00:44:03.760 align:start position:0%
now we see the numbers 1 to 1000. it's
 

00:44:03.760 --> 00:44:06.550 align:start position:0%
now we see the numbers 1 to 1000. it's
much<00:44:04.000><c> easier</c><00:44:04.400><c> than</c><00:44:04.720><c> 1000</c><00:44:05.359><c> lines</c><00:44:05.680><c> of</c><00:44:05.760><c> code</c><00:44:06.240><c> each</c>

00:44:06.550 --> 00:44:06.560 align:start position:0%
much easier than 1000 lines of code each
 

00:44:06.560 --> 00:44:08.790 align:start position:0%
much easier than 1000 lines of code each
printing<00:44:06.960><c> a</c><00:44:07.040><c> number</c><00:44:07.520><c> okay</c><00:44:08.319><c> now</c><00:44:08.480><c> let</c><00:44:08.640><c> me</c><00:44:08.720><c> show</c>

00:44:08.790 --> 00:44:08.800 align:start position:0%
printing a number okay now let me show
 

00:44:08.800 --> 00:44:10.710 align:start position:0%
printing a number okay now let me show
you<00:44:08.960><c> something</c><00:44:09.200><c> really</c><00:44:09.440><c> cool</c>

00:44:10.710 --> 00:44:10.720 align:start position:0%
you something really cool
 

00:44:10.720 --> 00:44:12.870 align:start position:0%
you something really cool
so<00:44:10.880><c> i'm</c><00:44:11.040><c> going</c><00:44:11.119><c> to</c><00:44:11.200><c> change</c><00:44:11.440><c> this</c>

00:44:12.870 --> 00:44:12.880 align:start position:0%
so i'm going to change this
 

00:44:12.880 --> 00:44:14.790 align:start position:0%
so i'm going to change this
to<00:44:13.119><c> 10.</c>

00:44:14.790 --> 00:44:14.800 align:start position:0%
to 10.
 

00:44:14.800 --> 00:44:17.190 align:start position:0%
to 10.
now<00:44:15.359><c> instead</c><00:44:15.680><c> of</c><00:44:15.760><c> printing</c><00:44:16.240><c> i</c><00:44:16.880><c> i</c><00:44:17.040><c> want</c><00:44:17.119><c> to</c>

00:44:17.190 --> 00:44:17.200 align:start position:0%
now instead of printing i i want to
 

00:44:17.200 --> 00:44:19.030 align:start position:0%
now instead of printing i i want to
print<00:44:17.520><c> an</c><00:44:17.680><c> expression</c><00:44:18.560><c> so</c><00:44:18.720><c> i'm</c><00:44:18.800><c> going</c><00:44:18.960><c> to</c>

00:44:19.030 --> 00:44:19.040 align:start position:0%
print an expression so i'm going to
 

00:44:19.040 --> 00:44:20.790 align:start position:0%
print an expression so i'm going to
multiply<00:44:19.680><c> i</c>

00:44:20.790 --> 00:44:20.800 align:start position:0%
multiply i
 

00:44:20.800 --> 00:44:23.589 align:start position:0%
multiply i
by<00:44:21.040><c> a</c><00:44:21.200><c> string</c><00:44:22.240><c> an</c><00:44:22.480><c> asterisk</c>

00:44:23.589 --> 00:44:23.599 align:start position:0%
by a string an asterisk
 

00:44:23.599 --> 00:44:25.510 align:start position:0%
by a string an asterisk
now<00:44:23.839><c> you</c><00:44:23.920><c> might</c><00:44:24.079><c> be</c><00:44:24.240><c> confused</c><00:44:24.640><c> here</c><00:44:25.119><c> because</c>

00:44:25.510 --> 00:44:25.520 align:start position:0%
now you might be confused here because
 

00:44:25.520 --> 00:44:27.430 align:start position:0%
now you might be confused here because
earlier<00:44:25.839><c> i</c><00:44:26.000><c> told</c><00:44:26.160><c> you</c><00:44:26.319><c> that</c><00:44:26.480><c> in</c><00:44:26.640><c> python</c><00:44:27.280><c> we</c>

00:44:27.430 --> 00:44:27.440 align:start position:0%
earlier i told you that in python we
 

00:44:27.440 --> 00:44:30.470 align:start position:0%
earlier i told you that in python we
cannot<00:44:27.839><c> concatenate</c><00:44:28.800><c> a</c><00:44:28.960><c> number</c><00:44:29.440><c> to</c><00:44:29.680><c> a</c><00:44:29.839><c> string</c>

00:44:30.470 --> 00:44:30.480 align:start position:0%
cannot concatenate a number to a string
 

00:44:30.480 --> 00:44:32.470 align:start position:0%
cannot concatenate a number to a string
but<00:44:30.640><c> here</c><00:44:30.880><c> i'm</c><00:44:31.040><c> using</c><00:44:31.520><c> the</c><00:44:31.680><c> multiplication</c>

00:44:32.470 --> 00:44:32.480 align:start position:0%
but here i'm using the multiplication
 

00:44:32.480 --> 00:44:34.950 align:start position:0%
but here i'm using the multiplication
operator<00:44:33.200><c> well</c><00:44:33.599><c> this</c><00:44:33.839><c> is</c><00:44:33.920><c> different</c><00:44:34.640><c> we</c><00:44:34.800><c> can</c>

00:44:34.950 --> 00:44:34.960 align:start position:0%
operator well this is different we can
 

00:44:34.960 --> 00:44:37.349 align:start position:0%
operator well this is different we can
multiply<00:44:35.520><c> a</c><00:44:35.680><c> number</c><00:44:36.079><c> by</c><00:44:36.240><c> a</c><00:44:36.319><c> string</c><00:44:37.040><c> and</c><00:44:37.200><c> this</c>

00:44:37.349 --> 00:44:37.359 align:start position:0%
multiply a number by a string and this
 

00:44:37.359 --> 00:44:39.589 align:start position:0%
multiply a number by a string and this
will<00:44:37.599><c> repeat</c><00:44:38.079><c> that</c><00:44:38.240><c> string</c><00:44:38.960><c> based</c><00:44:39.280><c> on</c><00:44:39.440><c> the</c>

00:44:39.589 --> 00:44:39.599 align:start position:0%
will repeat that string based on the
 

00:44:39.599 --> 00:44:42.710 align:start position:0%
will repeat that string based on the
value<00:44:39.920><c> of</c><00:44:40.000><c> that</c><00:44:40.160><c> number</c><00:44:41.040><c> so</c><00:44:41.200><c> if</c><00:44:41.440><c> i</c><00:44:41.760><c> is</c><00:44:42.000><c> one</c>

00:44:42.710 --> 00:44:42.720 align:start position:0%
value of that number so if i is one
 

00:44:42.720 --> 00:44:45.349 align:start position:0%
value of that number so if i is one
we're<00:44:42.880><c> gonna</c><00:44:43.119><c> see</c><00:44:43.599><c> one</c><00:44:43.839><c> asterisk</c><00:44:44.720><c> if</c><00:44:44.960><c> i</c><00:44:45.119><c> is</c>

00:44:45.349 --> 00:44:45.359 align:start position:0%
we're gonna see one asterisk if i is
 

00:44:45.359 --> 00:44:47.430 align:start position:0%
we're gonna see one asterisk if i is
five<00:44:45.680><c> we're</c><00:44:45.839><c> going</c><00:44:45.920><c> to</c><00:44:46.000><c> see</c><00:44:46.400><c> five</c><00:44:46.720><c> asterisks</c>

00:44:47.430 --> 00:44:47.440 align:start position:0%
five we're going to see five asterisks
 

00:44:47.440 --> 00:44:49.589 align:start position:0%
five we're going to see five asterisks
let<00:44:47.599><c> me</c><00:44:47.760><c> show</c><00:44:47.920><c> you</c><00:44:48.560><c> so</c><00:44:48.960><c> when</c><00:44:49.200><c> we</c><00:44:49.280><c> run</c><00:44:49.440><c> this</c>

00:44:49.589 --> 00:44:49.599 align:start position:0%
let me show you so when we run this
 

00:44:49.599 --> 00:44:51.430 align:start position:0%
let me show you so when we run this
program

00:44:51.430 --> 00:44:51.440 align:start position:0%
program
 

00:44:51.440 --> 00:44:53.589 align:start position:0%
program
we<00:44:51.599><c> see</c><00:44:51.839><c> this</c><00:44:52.000><c> triangle</c><00:44:52.560><c> shape</c><00:44:53.200><c> because</c><00:44:53.520><c> in</c>

00:44:53.589 --> 00:44:53.599 align:start position:0%
we see this triangle shape because in
 

00:44:53.599 --> 00:44:56.710 align:start position:0%
we see this triangle shape because in
the<00:44:53.680><c> first</c><00:44:53.920><c> iteration</c><00:44:54.800><c> i</c><00:44:55.040><c> is</c><00:44:55.280><c> one</c><00:44:55.920><c> so</c><00:44:56.160><c> we</c><00:44:56.319><c> see</c>

00:44:56.710 --> 00:44:56.720 align:start position:0%
the first iteration i is one so we see
 

00:44:56.720 --> 00:44:59.589 align:start position:0%
the first iteration i is one so we see
one<00:44:56.960><c> asterisk</c><00:44:58.000><c> in</c><00:44:58.160><c> every</c><00:44:58.480><c> iteration</c><00:44:59.200><c> i</c><00:44:59.440><c> is</c>

00:44:59.589 --> 00:44:59.599 align:start position:0%
one asterisk in every iteration i is
 

00:44:59.599 --> 00:45:01.990 align:start position:0%
one asterisk in every iteration i is
incremented<00:45:00.240><c> by</c><00:45:00.480><c> one</c><00:45:00.880><c> so</c><00:45:01.040><c> we</c><00:45:01.200><c> see</c><00:45:01.359><c> one</c><00:45:01.599><c> extra</c>

00:45:01.990 --> 00:45:02.000 align:start position:0%
incremented by one so we see one extra
 

00:45:02.000 --> 00:45:04.069 align:start position:0%
incremented by one so we see one extra
asterisk<00:45:02.880><c> and</c><00:45:03.200><c> finally</c><00:45:03.599><c> in</c><00:45:03.680><c> the</c><00:45:03.760><c> last</c>

00:45:04.069 --> 00:45:04.079 align:start position:0%
asterisk and finally in the last
 

00:45:04.079 --> 00:45:07.190 align:start position:0%
asterisk and finally in the last
iteration<00:45:05.040><c> i</c><00:45:05.280><c> is</c><00:45:05.440><c> 10</c><00:45:06.160><c> and</c><00:45:06.400><c> we</c><00:45:06.560><c> see</c><00:45:06.960><c> 10</c>

00:45:07.190 --> 00:45:07.200 align:start position:0%
iteration i is 10 and we see 10
 

00:45:07.200 --> 00:45:15.030 align:start position:0%
iteration i is 10 and we see 10
asterisks<00:45:07.839><c> on</c><00:45:08.000><c> the</c><00:45:08.079><c> terminal</c>

00:45:15.030 --> 00:45:15.040 align:start position:0%
 
 

00:45:15.040 --> 00:45:16.630 align:start position:0%
 
so<00:45:15.200><c> you</c><00:45:15.359><c> have</c><00:45:15.440><c> learned</c><00:45:15.680><c> about</c><00:45:16.000><c> three</c><00:45:16.240><c> types</c><00:45:16.480><c> of</c>

00:45:16.630 --> 00:45:16.640 align:start position:0%
so you have learned about three types of
 

00:45:16.640 --> 00:45:19.349 align:start position:0%
so you have learned about three types of
data<00:45:16.960><c> in</c><00:45:17.040><c> python</c><00:45:17.920><c> we</c><00:45:18.079><c> have</c><00:45:18.319><c> numbers</c><00:45:18.960><c> which</c><00:45:19.119><c> can</c>

00:45:19.349 --> 00:45:19.359 align:start position:0%
data in python we have numbers which can
 

00:45:19.359 --> 00:45:21.510 align:start position:0%
data in python we have numbers which can
be<00:45:19.520><c> integers</c><00:45:20.000><c> or</c><00:45:20.480><c> floats</c>

00:45:21.510 --> 00:45:21.520 align:start position:0%
be integers or floats
 

00:45:21.520 --> 00:45:24.470 align:start position:0%
be integers or floats
we<00:45:21.680><c> have</c><00:45:21.839><c> booleans</c><00:45:22.800><c> and</c><00:45:23.359><c> strings</c>

00:45:24.470 --> 00:45:24.480 align:start position:0%
we have booleans and strings
 

00:45:24.480 --> 00:45:26.790 align:start position:0%
we have booleans and strings
these<00:45:24.720><c> are</c><00:45:24.880><c> what</c><00:45:25.040><c> we</c><00:45:25.280><c> refer</c><00:45:25.520><c> to</c><00:45:25.760><c> as</c><00:45:26.160><c> primitive</c>

00:45:26.790 --> 00:45:26.800 align:start position:0%
these are what we refer to as primitive
 

00:45:26.800 --> 00:45:29.510 align:start position:0%
these are what we refer to as primitive
or<00:45:27.040><c> basic</c><00:45:27.440><c> types</c><00:45:27.760><c> in</c><00:45:27.920><c> python</c><00:45:28.880><c> now</c><00:45:29.119><c> in</c><00:45:29.200><c> python</c>

00:45:29.510 --> 00:45:29.520 align:start position:0%
or basic types in python now in python
 

00:45:29.520 --> 00:45:31.829 align:start position:0%
or basic types in python now in python
we<00:45:29.680><c> have</c><00:45:29.760><c> a</c><00:45:29.839><c> bunch</c><00:45:30.079><c> of</c><00:45:30.240><c> complex</c><00:45:30.800><c> types</c><00:45:31.119><c> as</c><00:45:31.280><c> well</c>

00:45:31.829 --> 00:45:31.839 align:start position:0%
we have a bunch of complex types as well
 

00:45:31.839 --> 00:45:33.990 align:start position:0%
we have a bunch of complex types as well
these<00:45:32.160><c> complex</c><00:45:32.560><c> types</c><00:45:32.960><c> are</c><00:45:33.119><c> very</c><00:45:33.359><c> useful</c><00:45:33.839><c> in</c>

00:45:33.990 --> 00:45:34.000 align:start position:0%
these complex types are very useful in
 

00:45:34.000 --> 00:45:35.829 align:start position:0%
these complex types are very useful in
building<00:45:34.400><c> real</c><00:45:34.640><c> applications</c>

00:45:35.829 --> 00:45:35.839 align:start position:0%
building real applications
 

00:45:35.839 --> 00:45:37.109 align:start position:0%
building real applications
in<00:45:36.000><c> this</c><00:45:36.160><c> tutorial</c><00:45:36.560><c> we're</c><00:45:36.720><c> going</c><00:45:36.800><c> to</c><00:45:36.880><c> talk</c>

00:45:37.109 --> 00:45:37.119 align:start position:0%
in this tutorial we're going to talk
 

00:45:37.119 --> 00:45:39.990 align:start position:0%
in this tutorial we're going to talk
about<00:45:37.680><c> lists</c><00:45:38.560><c> we</c><00:45:38.720><c> use</c><00:45:38.960><c> lists</c><00:45:39.440><c> whenever</c><00:45:39.839><c> we</c>

00:45:39.990 --> 00:45:40.000 align:start position:0%
about lists we use lists whenever we
 

00:45:40.000 --> 00:45:42.390 align:start position:0%
about lists we use lists whenever we
want<00:45:40.079><c> to</c><00:45:40.160><c> represent</c><00:45:40.880><c> a</c><00:45:40.960><c> list</c><00:45:41.280><c> of</c><00:45:41.520><c> objects</c><00:45:42.240><c> like</c>

00:45:42.390 --> 00:45:42.400 align:start position:0%
want to represent a list of objects like
 

00:45:42.400 --> 00:45:44.550 align:start position:0%
want to represent a list of objects like
a<00:45:42.480><c> list</c><00:45:42.720><c> of</c><00:45:42.880><c> numbers</c><00:45:43.359><c> or</c><00:45:43.520><c> a</c><00:45:43.599><c> list</c><00:45:43.839><c> of</c><00:45:44.000><c> names</c><00:45:44.400><c> let</c>

00:45:44.550 --> 00:45:44.560 align:start position:0%
a list of numbers or a list of names let
 

00:45:44.560 --> 00:45:45.589 align:start position:0%
a list of numbers or a list of names let
me<00:45:44.720><c> show</c><00:45:44.880><c> you</c>

00:45:45.589 --> 00:45:45.599 align:start position:0%
me show you
 

00:45:45.599 --> 00:45:47.750 align:start position:0%
me show you
so<00:45:46.240><c> i'm</c><00:45:46.400><c> going</c><00:45:46.480><c> to</c><00:45:46.560><c> declare</c><00:45:46.880><c> a</c><00:45:46.960><c> variable</c>

00:45:47.750 --> 00:45:47.760 align:start position:0%
so i'm going to declare a variable
 

00:45:47.760 --> 00:45:49.030 align:start position:0%
so i'm going to declare a variable
called<00:45:48.000><c> names</c>

00:45:49.030 --> 00:45:49.040 align:start position:0%
called names
 

00:45:49.040 --> 00:45:51.109 align:start position:0%
called names
and<00:45:49.200><c> set</c><00:45:49.440><c> it</c><00:45:49.520><c> to</c><00:45:49.680><c> a</c><00:45:49.839><c> list</c><00:45:50.079><c> of</c><00:45:50.240><c> names</c>

00:45:51.109 --> 00:45:51.119 align:start position:0%
and set it to a list of names
 

00:45:51.119 --> 00:45:53.030 align:start position:0%
and set it to a list of names
so<00:45:51.280><c> here</c><00:45:51.440><c> we</c><00:45:51.599><c> add</c><00:45:52.000><c> square</c><00:45:52.319><c> brackets</c><00:45:52.880><c> to</c>

00:45:53.030 --> 00:45:53.040 align:start position:0%
so here we add square brackets to
 

00:45:53.040 --> 00:45:55.750 align:start position:0%
so here we add square brackets to
represent<00:45:53.520><c> a</c><00:45:53.680><c> list</c><00:45:54.400><c> and</c><00:45:54.560><c> now</c><00:45:54.720><c> we</c><00:45:54.800><c> can</c><00:45:55.040><c> add</c><00:45:55.440><c> one</c>

00:45:55.750 --> 00:45:55.760 align:start position:0%
represent a list and now we can add one
 

00:45:55.760 --> 00:45:58.309 align:start position:0%
represent a list and now we can add one
or<00:45:55.920><c> more</c><00:45:56.160><c> objects</c><00:45:56.720><c> inside</c><00:45:57.119><c> this</c><00:45:57.280><c> list</c><00:45:58.000><c> in</c><00:45:58.160><c> this</c>

00:45:58.309 --> 00:45:58.319 align:start position:0%
or more objects inside this list in this
 

00:45:58.319 --> 00:46:01.829 align:start position:0%
or more objects inside this list in this
list<00:45:58.560><c> we</c><00:45:58.640><c> add</c><00:45:58.800><c> a</c><00:45:58.880><c> bunch</c><00:45:59.119><c> of</c><00:45:59.200><c> names</c><00:46:00.160><c> like</c><00:46:00.400><c> john</c>

00:46:01.829 --> 00:46:01.839 align:start position:0%
list we add a bunch of names like john
 

00:46:01.839 --> 00:46:02.950 align:start position:0%
list we add a bunch of names like john
bob

00:46:02.950 --> 00:46:02.960 align:start position:0%
bob
 

00:46:02.960 --> 00:46:04.230 align:start position:0%
bob
marsh

00:46:04.230 --> 00:46:04.240 align:start position:0%
marsh
 

00:46:04.240 --> 00:46:05.190 align:start position:0%
marsh
sam

00:46:05.190 --> 00:46:05.200 align:start position:0%
sam
 

00:46:05.200 --> 00:46:07.750 align:start position:0%
sam
and<00:46:05.359><c> mary</c><00:46:06.160><c> so</c><00:46:06.319><c> we</c><00:46:06.560><c> separate</c><00:46:06.880><c> this</c><00:46:07.200><c> element</c>

00:46:07.750 --> 00:46:07.760 align:start position:0%
and mary so we separate this element
 

00:46:07.760 --> 00:46:10.470 align:start position:0%
and mary so we separate this element
these<00:46:08.079><c> items</c><00:46:08.400><c> using</c><00:46:08.720><c> a</c><00:46:08.800><c> comma</c><00:46:09.440><c> okay</c>

00:46:10.470 --> 00:46:10.480 align:start position:0%
these items using a comma okay
 

00:46:10.480 --> 00:46:11.430 align:start position:0%
these items using a comma okay
now

00:46:11.430 --> 00:46:11.440 align:start position:0%
now
 

00:46:11.440 --> 00:46:15.030 align:start position:0%
now
let's<00:46:11.760><c> print</c><00:46:12.000><c> our</c><00:46:12.160><c> list</c><00:46:12.800><c> so</c><00:46:13.040><c> print</c><00:46:13.520><c> names</c>

00:46:15.030 --> 00:46:15.040 align:start position:0%
let's print our list so print names
 

00:46:15.040 --> 00:46:16.230 align:start position:0%
let's print our list so print names
take<00:46:15.280><c> a</c><00:46:15.359><c> look</c>

00:46:16.230 --> 00:46:16.240 align:start position:0%
take a look
 

00:46:16.240 --> 00:46:18.710 align:start position:0%
take a look
it<00:46:16.319><c> comes</c><00:46:16.640><c> out</c><00:46:16.960><c> exactly</c><00:46:17.920><c> like</c><00:46:18.079><c> how</c><00:46:18.319><c> we</c><00:46:18.480><c> wrote</c>

00:46:18.710 --> 00:46:18.720 align:start position:0%
it comes out exactly like how we wrote
 

00:46:18.720 --> 00:46:19.589 align:start position:0%
it comes out exactly like how we wrote
it

00:46:19.589 --> 00:46:19.599 align:start position:0%
it
 

00:46:19.599 --> 00:46:21.589 align:start position:0%
it
now<00:46:19.760><c> we</c><00:46:19.839><c> can</c><00:46:20.000><c> also</c><00:46:20.240><c> get</c><00:46:20.480><c> individual</c><00:46:21.119><c> elements</c>

00:46:21.589 --> 00:46:21.599 align:start position:0%
now we can also get individual elements
 

00:46:21.599 --> 00:46:23.670 align:start position:0%
now we can also get individual elements
in<00:46:21.680><c> this</c><00:46:21.839><c> list</c><00:46:22.560><c> for</c><00:46:22.800><c> example</c><00:46:23.200><c> if</c><00:46:23.359><c> we</c><00:46:23.440><c> want</c><00:46:23.599><c> to</c>

00:46:23.670 --> 00:46:23.680 align:start position:0%
in this list for example if we want to
 

00:46:23.680 --> 00:46:26.150 align:start position:0%
in this list for example if we want to
get<00:46:24.160><c> the</c><00:46:24.319><c> first</c><00:46:24.640><c> element</c><00:46:24.960><c> in</c><00:46:25.119><c> this</c><00:46:25.280><c> list</c><00:46:26.000><c> here</c>

00:46:26.150 --> 00:46:26.160 align:start position:0%
get the first element in this list here
 

00:46:26.160 --> 00:46:29.030 align:start position:0%
get the first element in this list here
we<00:46:26.319><c> type</c><00:46:26.960><c> a</c><00:46:27.119><c> pair</c><00:46:27.359><c> of</c><00:46:27.520><c> square</c><00:46:27.760><c> brackets</c><00:46:28.800><c> and</c>

00:46:29.030 --> 00:46:29.040 align:start position:0%
we type a pair of square brackets and
 

00:46:29.040 --> 00:46:31.030 align:start position:0%
we type a pair of square brackets and
inside<00:46:29.359><c> the</c><00:46:29.520><c> square</c><00:46:29.839><c> brackets</c><00:46:30.480><c> we</c><00:46:30.640><c> type</c><00:46:30.880><c> an</c>

00:46:31.030 --> 00:46:31.040 align:start position:0%
inside the square brackets we type an
 

00:46:31.040 --> 00:46:33.589 align:start position:0%
inside the square brackets we type an
index<00:46:31.920><c> the</c><00:46:32.160><c> index</c><00:46:32.560><c> of</c><00:46:32.640><c> the</c><00:46:32.800><c> first</c><00:46:33.119><c> element</c><00:46:33.520><c> in</c>

00:46:33.589 --> 00:46:33.599 align:start position:0%
index the index of the first element in
 

00:46:33.599 --> 00:46:36.230 align:start position:0%
index the index of the first element in
this<00:46:33.839><c> list</c><00:46:34.240><c> is</c><00:46:34.400><c> zero</c><00:46:35.200><c> so</c><00:46:35.359><c> now</c><00:46:35.680><c> when</c><00:46:35.839><c> we</c><00:46:36.000><c> run</c>

00:46:36.230 --> 00:46:36.240 align:start position:0%
this list is zero so now when we run
 

00:46:36.240 --> 00:46:37.990 align:start position:0%
this list is zero so now when we run
this<00:46:36.400><c> program</c><00:46:36.880><c> we're</c><00:46:37.040><c> going</c><00:46:37.200><c> to</c><00:46:37.280><c> see</c><00:46:37.599><c> john</c><00:46:37.920><c> on</c>

00:46:37.990 --> 00:46:38.000 align:start position:0%
this program we're going to see john on
 

00:46:38.000 --> 00:46:39.430 align:start position:0%
this program we're going to see john on
the<00:46:38.079><c> terminal</c>

00:46:39.430 --> 00:46:39.440 align:start position:0%
the terminal
 

00:46:39.440 --> 00:46:40.870 align:start position:0%
the terminal
there<00:46:39.680><c> you</c><00:46:39.839><c> go</c>

00:46:40.870 --> 00:46:40.880 align:start position:0%
there you go
 

00:46:40.880 --> 00:46:41.670 align:start position:0%
there you go
now

00:46:41.670 --> 00:46:41.680 align:start position:0%
now
 

00:46:41.680 --> 00:46:43.670 align:start position:0%
now
in<00:46:41.760><c> python</c><00:46:42.160><c> we</c><00:46:42.240><c> can</c><00:46:42.400><c> also</c><00:46:42.640><c> use</c><00:46:43.040><c> a</c><00:46:43.280><c> negative</c>

00:46:43.670 --> 00:46:43.680 align:start position:0%
in python we can also use a negative
 

00:46:43.680 --> 00:46:45.510 align:start position:0%
in python we can also use a negative
index<00:46:44.240><c> this</c><00:46:44.480><c> is</c><00:46:44.560><c> a</c><00:46:44.720><c> feature</c><00:46:45.040><c> that</c><00:46:45.280><c> i</c>

00:46:45.510 --> 00:46:45.520 align:start position:0%
index this is a feature that i
 

00:46:45.520 --> 00:46:47.190 align:start position:0%
index this is a feature that i
personally<00:46:46.000><c> have</c><00:46:46.240><c> not</c><00:46:46.480><c> seen</c><00:46:46.720><c> in</c><00:46:46.960><c> other</c>

00:46:47.190 --> 00:46:47.200 align:start position:0%
personally have not seen in other
 

00:46:47.200 --> 00:46:48.870 align:start position:0%
personally have not seen in other
programming<00:46:47.599><c> languages</c>

00:46:48.870 --> 00:46:48.880 align:start position:0%
programming languages
 

00:46:48.880 --> 00:46:52.069 align:start position:0%
programming languages
so<00:46:49.440><c> if</c><00:46:49.680><c> 0</c><00:46:50.560><c> represents</c><00:46:51.200><c> the</c><00:46:51.280><c> first</c><00:46:51.680><c> element</c><00:46:52.000><c> in</c>

00:46:52.069 --> 00:46:52.079 align:start position:0%
so if 0 represents the first element in
 

00:46:52.079 --> 00:46:54.309 align:start position:0%
so if 0 represents the first element in
this<00:46:52.319><c> list</c><00:46:53.040><c> what</c><00:46:53.200><c> do</c><00:46:53.280><c> you</c><00:46:53.440><c> think</c>

00:46:54.309 --> 00:46:54.319 align:start position:0%
this list what do you think
 

00:46:54.319 --> 00:46:57.510 align:start position:0%
this list what do you think
negative<00:46:54.720><c> 1</c><00:46:54.880><c> represents</c><00:46:56.160><c> it</c><00:46:56.319><c> represents</c><00:46:57.280><c> the</c>

00:46:57.510 --> 00:46:57.520 align:start position:0%
negative 1 represents it represents the
 

00:46:57.520 --> 00:46:59.910 align:start position:0%
negative 1 represents it represents the
last<00:46:57.920><c> element</c><00:46:58.319><c> in</c><00:46:58.400><c> this</c><00:46:58.640><c> list</c><00:46:59.200><c> let's</c><00:46:59.440><c> verify</c>

00:46:59.910 --> 00:46:59.920 align:start position:0%
last element in this list let's verify
 

00:46:59.920 --> 00:47:02.710 align:start position:0%
last element in this list let's verify
it<00:47:00.480><c> so</c><00:47:01.040><c> let's</c><00:47:01.280><c> run</c><00:47:01.440><c> the</c><00:47:01.599><c> program</c><00:47:02.160><c> and</c><00:47:02.400><c> here's</c>

00:47:02.710 --> 00:47:02.720 align:start position:0%
it so let's run the program and here's
 

00:47:02.720 --> 00:47:03.670 align:start position:0%
it so let's run the program and here's
mary

00:47:03.670 --> 00:47:03.680 align:start position:0%
mary
 

00:47:03.680 --> 00:47:05.990 align:start position:0%
mary
what<00:47:03.920><c> about</c>

00:47:05.990 --> 00:47:06.000 align:start position:0%
what about
 

00:47:06.000 --> 00:47:09.190 align:start position:0%
what about
negative<00:47:06.480><c> 2</c><00:47:07.119><c> well</c><00:47:07.760><c> that</c><00:47:08.000><c> represents</c><00:47:08.880><c> the</c>

00:47:09.190 --> 00:47:09.200 align:start position:0%
negative 2 well that represents the
 

00:47:09.200 --> 00:47:10.790 align:start position:0%
negative 2 well that represents the
second<00:47:09.520><c> element</c>

00:47:10.790 --> 00:47:10.800 align:start position:0%
second element
 

00:47:10.800 --> 00:47:12.390 align:start position:0%
second element
from<00:47:10.960><c> the</c><00:47:11.200><c> end</c><00:47:11.359><c> of</c><00:47:11.440><c> the</c><00:47:11.599><c> list</c>

00:47:12.390 --> 00:47:12.400 align:start position:0%
from the end of the list
 

00:47:12.400 --> 00:47:15.750 align:start position:0%
from the end of the list
so<00:47:12.800><c> let's</c><00:47:13.040><c> run</c><00:47:13.200><c> the</c><00:47:13.359><c> program</c><00:47:14.160><c> and</c><00:47:14.319><c> here's</c><00:47:14.640><c> some</c>

00:47:15.750 --> 00:47:15.760 align:start position:0%
so let's run the program and here's some
 

00:47:15.760 --> 00:47:17.829 align:start position:0%
so let's run the program and here's some
then<00:47:15.920><c> we</c><00:47:16.000><c> can</c><00:47:16.240><c> also</c><00:47:16.560><c> change</c><00:47:16.960><c> an</c><00:47:17.200><c> object</c><00:47:17.680><c> at</c><00:47:17.760><c> a</c>

00:47:17.829 --> 00:47:17.839 align:start position:0%
then we can also change an object at a
 

00:47:17.839 --> 00:47:20.390 align:start position:0%
then we can also change an object at a
given<00:47:18.160><c> index</c><00:47:19.040><c> for</c><00:47:19.280><c> example</c><00:47:19.839><c> let's</c><00:47:20.079><c> say</c><00:47:20.240><c> here</c>

00:47:20.390 --> 00:47:20.400 align:start position:0%
given index for example let's say here
 

00:47:20.400 --> 00:47:22.630 align:start position:0%
given index for example let's say here
we<00:47:20.480><c> made</c><00:47:20.720><c> a</c><00:47:20.800><c> mistake</c><00:47:21.680><c> and</c><00:47:21.839><c> this</c><00:47:22.160><c> john</c><00:47:22.480><c> should</c>

00:47:22.630 --> 00:47:22.640 align:start position:0%
we made a mistake and this john should
 

00:47:22.640 --> 00:47:24.630 align:start position:0%
we made a mistake and this john should
not<00:47:22.800><c> be</c><00:47:23.040><c> spelled</c><00:47:23.520><c> with</c><00:47:23.680><c> an</c><00:47:23.920><c> h</c>

00:47:24.630 --> 00:47:24.640 align:start position:0%
not be spelled with an h
 

00:47:24.640 --> 00:47:28.150 align:start position:0%
not be spelled with an h
so<00:47:25.040><c> we</c><00:47:25.200><c> need</c><00:47:25.280><c> to</c><00:47:25.440><c> reset</c><00:47:25.839><c> it</c><00:47:26.400><c> we</c><00:47:26.559><c> type</c><00:47:26.880><c> names</c><00:47:27.680><c> of</c>

00:47:28.150 --> 00:47:28.160 align:start position:0%
so we need to reset it we type names of
 

00:47:28.160 --> 00:47:29.109 align:start position:0%
so we need to reset it we type names of
zero

00:47:29.109 --> 00:47:29.119 align:start position:0%
zero
 

00:47:29.119 --> 00:47:30.549 align:start position:0%
zero
now<00:47:29.359><c> we</c><00:47:29.520><c> treat</c><00:47:29.680><c> this</c><00:47:29.839><c> like</c><00:47:30.079><c> a</c><00:47:30.160><c> regular</c>

00:47:30.549 --> 00:47:30.559 align:start position:0%
now we treat this like a regular
 

00:47:30.559 --> 00:47:33.750 align:start position:0%
now we treat this like a regular
variable<00:47:31.280><c> so</c><00:47:31.520><c> we</c><00:47:31.680><c> set</c><00:47:31.920><c> it</c><00:47:32.000><c> to</c><00:47:32.079><c> a</c><00:47:32.160><c> new</c><00:47:32.400><c> value</c>

00:47:33.750 --> 00:47:33.760 align:start position:0%
variable so we set it to a new value
 

00:47:33.760 --> 00:47:36.549 align:start position:0%
variable so we set it to a new value
we<00:47:33.920><c> set</c><00:47:34.160><c> it</c><00:47:34.240><c> to</c><00:47:34.400><c> john</c><00:47:34.880><c> without</c><00:47:35.280><c> an</c><00:47:35.520><c> h</c><00:47:36.079><c> now</c><00:47:36.319><c> let's</c>

00:47:36.549 --> 00:47:36.559 align:start position:0%
we set it to john without an h now let's
 

00:47:36.559 --> 00:47:38.630 align:start position:0%
we set it to john without an h now let's
print<00:47:36.880><c> our</c><00:47:37.040><c> list</c>

00:47:38.630 --> 00:47:38.640 align:start position:0%
print our list
 

00:47:38.640 --> 00:47:41.670 align:start position:0%
print our list
and<00:47:38.960><c> here's</c><00:47:39.200><c> our</c><00:47:39.359><c> updated</c><00:47:39.760><c> list</c><00:47:40.160><c> beautiful</c>

00:47:41.670 --> 00:47:41.680 align:start position:0%
and here's our updated list beautiful
 

00:47:41.680 --> 00:47:44.150 align:start position:0%
and here's our updated list beautiful
we<00:47:41.839><c> can</c><00:47:42.079><c> also</c><00:47:42.319><c> select</c><00:47:42.720><c> a</c><00:47:42.880><c> range</c><00:47:43.119><c> of</c><00:47:43.280><c> values</c><00:47:44.000><c> for</c>

00:47:44.150 --> 00:47:44.160 align:start position:0%
we can also select a range of values for
 

00:47:44.160 --> 00:47:46.549 align:start position:0%
we can also select a range of values for
example<00:47:44.559><c> let's</c><00:47:44.720><c> say</c><00:47:44.880><c> we're</c><00:47:45.200><c> only</c><00:47:45.520><c> interested</c>

00:47:46.549 --> 00:47:46.559 align:start position:0%
example let's say we're only interested
 

00:47:46.559 --> 00:47:48.950 align:start position:0%
example let's say we're only interested
in<00:47:46.720><c> the</c><00:47:46.880><c> first</c><00:47:47.520><c> three</c><00:47:47.839><c> names</c>

00:47:48.950 --> 00:47:48.960 align:start position:0%
in the first three names
 

00:47:48.960 --> 00:47:51.589 align:start position:0%
in the first three names
so<00:47:49.200><c> over</c><00:47:49.359><c> here</c><00:47:49.920><c> we</c><00:47:50.079><c> type</c><00:47:50.319><c> square</c><00:47:50.640><c> brackets</c>

00:47:51.589 --> 00:47:51.599 align:start position:0%
so over here we type square brackets
 

00:47:51.599 --> 00:47:53.990 align:start position:0%
so over here we type square brackets
and<00:47:51.760><c> here</c><00:47:51.920><c> we</c><00:47:52.000><c> need</c><00:47:52.160><c> to</c><00:47:52.319><c> type</c><00:47:52.800><c> two</c><00:47:53.040><c> indexes</c><00:47:53.839><c> a</c>

00:47:53.990 --> 00:47:54.000 align:start position:0%
and here we need to type two indexes a
 

00:47:54.000 --> 00:47:56.549 align:start position:0%
and here we need to type two indexes a
start<00:47:54.319><c> index</c><00:47:54.960><c> and</c><00:47:55.200><c> an</c><00:47:55.359><c> end</c><00:47:55.599><c> index</c>

00:47:56.549 --> 00:47:56.559 align:start position:0%
start index and an end index
 

00:47:56.559 --> 00:47:58.549 align:start position:0%
start index and an end index
our<00:47:56.720><c> start</c><00:47:57.119><c> index</c><00:47:57.440><c> is</c><00:47:57.520><c> a</c><00:47:57.599><c> zero</c><00:47:58.240><c> because</c><00:47:58.480><c> we</c>

00:47:58.549 --> 00:47:58.559 align:start position:0%
our start index is a zero because we
 

00:47:58.559 --> 00:48:00.309 align:start position:0%
our start index is a zero because we
want<00:47:58.720><c> to</c><00:47:58.800><c> start</c><00:47:59.040><c> from</c><00:47:59.200><c> here</c>

00:48:00.309 --> 00:48:00.319 align:start position:0%
want to start from here
 

00:48:00.319 --> 00:48:03.670 align:start position:0%
want to start from here
and<00:48:00.960><c> our</c><00:48:01.280><c> end</c><00:48:01.520><c> index</c><00:48:02.160><c> is</c><00:48:02.319><c> going</c><00:48:02.480><c> to</c><00:48:02.559><c> be</c><00:48:03.040><c> zero</c>

00:48:03.670 --> 00:48:03.680 align:start position:0%
and our end index is going to be zero
 

00:48:03.680 --> 00:48:06.630 align:start position:0%
and our end index is going to be zero
one<00:48:04.240><c> two</c><00:48:04.960><c> plus</c><00:48:05.359><c> one</c><00:48:05.920><c> that's</c><00:48:06.160><c> going</c><00:48:06.400><c> to</c><00:48:06.480><c> be</c>

00:48:06.630 --> 00:48:06.640 align:start position:0%
one two plus one that's going to be
 

00:48:06.640 --> 00:48:10.790 align:start position:0%
one two plus one that's going to be
three<00:48:07.280><c> so</c><00:48:08.000><c> we</c><00:48:08.240><c> add</c><00:48:08.400><c> a</c><00:48:08.480><c> colon</c><00:48:09.359><c> three</c><00:48:10.160><c> so</c><00:48:10.400><c> python</c>

00:48:10.790 --> 00:48:10.800 align:start position:0%
three so we add a colon three so python
 

00:48:10.800 --> 00:48:12.710 align:start position:0%
three so we add a colon three so python
is<00:48:10.880><c> going</c><00:48:10.960><c> to</c><00:48:11.040><c> return</c><00:48:11.520><c> all</c><00:48:11.680><c> the</c><00:48:11.839><c> elements</c><00:48:12.559><c> from</c>

00:48:12.710 --> 00:48:12.720 align:start position:0%
is going to return all the elements from
 

00:48:12.720 --> 00:48:15.589 align:start position:0%
is going to return all the elements from
the<00:48:12.880><c> start</c><00:48:13.280><c> index</c><00:48:14.079><c> up</c><00:48:14.240><c> to</c><00:48:14.400><c> the</c><00:48:14.480><c> end</c><00:48:14.800><c> index</c><00:48:15.200><c> but</c>

00:48:15.589 --> 00:48:15.599 align:start position:0%
the start index up to the end index but
 

00:48:15.599 --> 00:48:17.910 align:start position:0%
the start index up to the end index but
excluding<00:48:16.240><c> the</c><00:48:16.480><c> end</c><00:48:16.720><c> index</c><00:48:17.359><c> so</c><00:48:17.599><c> it's</c><00:48:17.680><c> going</c><00:48:17.839><c> to</c>

00:48:17.910 --> 00:48:17.920 align:start position:0%
excluding the end index so it's going to
 

00:48:17.920 --> 00:48:22.150 align:start position:0%
excluding the end index so it's going to
return<00:48:18.640><c> the</c><00:48:18.800><c> elements</c><00:48:19.599><c> at</c><00:48:19.839><c> index</c><00:48:20.160><c> 0</c><00:48:20.880><c> 1</c><00:48:21.359><c> and</c><00:48:21.599><c> 2.</c>

00:48:22.150 --> 00:48:22.160 align:start position:0%
return the elements at index 0 1 and 2.
 

00:48:22.160 --> 00:48:24.630 align:start position:0%
return the elements at index 0 1 and 2.
take<00:48:22.400><c> a</c><00:48:22.480><c> look</c>

00:48:24.630 --> 00:48:24.640 align:start position:0%
take a look
 

00:48:24.640 --> 00:48:27.030 align:start position:0%
take a look
here<00:48:24.880><c> are</c><00:48:25.280><c> the</c><00:48:25.440><c> first</c><00:48:25.760><c> three</c><00:48:26.000><c> names</c>

00:48:27.030 --> 00:48:27.040 align:start position:0%
here are the first three names
 

00:48:27.040 --> 00:48:29.030 align:start position:0%
here are the first three names
and<00:48:27.280><c> by</c><00:48:27.520><c> the</c><00:48:27.599><c> way</c>

00:48:29.030 --> 00:48:29.040 align:start position:0%
and by the way
 

00:48:29.040 --> 00:48:31.349 align:start position:0%
and by the way
this<00:48:29.280><c> expression</c><00:48:30.160><c> does</c><00:48:30.400><c> not</c><00:48:30.640><c> modify</c><00:48:31.200><c> our</c>

00:48:31.349 --> 00:48:31.359 align:start position:0%
this expression does not modify our
 

00:48:31.359 --> 00:48:35.109 align:start position:0%
this expression does not modify our
original<00:48:31.920><c> list</c><00:48:32.640><c> it</c><00:48:32.800><c> returns</c><00:48:33.280><c> a</c><00:48:33.359><c> new</c><00:48:33.599><c> list</c><00:48:34.319><c> so</c>

00:48:35.109 --> 00:48:35.119 align:start position:0%
original list it returns a new list so
 

00:48:35.119 --> 00:48:37.589 align:start position:0%
original list it returns a new list so
right<00:48:35.440><c> after</c><00:48:35.760><c> this</c><00:48:36.000><c> print</c><00:48:36.240><c> statement</c><00:48:37.200><c> if</c><00:48:37.359><c> we</c>

00:48:37.589 --> 00:48:37.599 align:start position:0%
right after this print statement if we
 

00:48:37.599 --> 00:48:40.549 align:start position:0%
right after this print statement if we
print<00:48:38.319><c> our</c><00:48:38.559><c> original</c><00:48:39.040><c> list</c>

00:48:40.549 --> 00:48:40.559 align:start position:0%
print our original list
 

00:48:40.559 --> 00:48:42.630 align:start position:0%
print our original list
you<00:48:40.720><c> can</c><00:48:40.880><c> see</c><00:48:41.040><c> that</c><00:48:41.200><c> it's</c><00:48:41.359><c> not</c><00:48:41.599><c> changed</c>

00:48:42.630 --> 00:48:42.640 align:start position:0%
you can see that it's not changed
 

00:48:42.640 --> 00:48:51.430 align:start position:0%
you can see that it's not changed
so<00:48:42.960><c> this</c><00:48:43.119><c> is</c><00:48:43.200><c> how</c><00:48:43.359><c> we</c><00:48:43.440><c> use</c><00:48:43.680><c> lists</c><00:48:44.160><c> in</c><00:48:44.400><c> python</c>

00:48:51.430 --> 00:48:51.440 align:start position:0%
 
 

00:48:51.440 --> 00:48:52.950 align:start position:0%
 
earlier<00:48:51.839><c> i</c><00:48:51.920><c> told</c><00:48:52.079><c> you</c><00:48:52.240><c> that</c><00:48:52.400><c> strengths</c><00:48:52.800><c> in</c>

00:48:52.950 --> 00:48:52.960 align:start position:0%
earlier i told you that strengths in
 

00:48:52.960 --> 00:48:55.510 align:start position:0%
earlier i told you that strengths in
python<00:48:53.440><c> are</c><00:48:53.839><c> objects</c><00:48:54.960><c> objects</c><00:48:55.359><c> in</c>

00:48:55.510 --> 00:48:55.520 align:start position:0%
python are objects objects in
 

00:48:55.520 --> 00:48:57.190 align:start position:0%
python are objects objects in
programming<00:48:56.000><c> are</c><00:48:56.240><c> kind</c><00:48:56.400><c> of</c><00:48:56.480><c> like</c><00:48:56.800><c> objects</c><00:48:57.119><c> in</c>

00:48:57.190 --> 00:48:57.200 align:start position:0%
programming are kind of like objects in
 

00:48:57.200 --> 00:48:59.030 align:start position:0%
programming are kind of like objects in
the<00:48:57.359><c> real</c><00:48:57.599><c> world</c><00:48:58.000><c> like</c><00:48:58.160><c> your</c><00:48:58.319><c> mobile</c><00:48:58.640><c> phone</c>

00:48:59.030 --> 00:48:59.040 align:start position:0%
the real world like your mobile phone
 

00:48:59.040 --> 00:49:01.109 align:start position:0%
the real world like your mobile phone
your<00:48:59.280><c> bicycle</c><00:49:00.079><c> the</c><00:49:00.240><c> remote</c><00:49:00.559><c> control</c><00:49:00.880><c> of</c><00:49:00.960><c> your</c>

00:49:01.109 --> 00:49:01.119 align:start position:0%
your bicycle the remote control of your
 

00:49:01.119 --> 00:49:02.870 align:start position:0%
your bicycle the remote control of your
tv<00:49:01.440><c> and</c><00:49:01.520><c> so</c><00:49:01.680><c> on</c><00:49:02.160><c> they</c><00:49:02.319><c> have</c><00:49:02.559><c> certain</c>

00:49:02.870 --> 00:49:02.880 align:start position:0%
tv and so on they have certain
 

00:49:02.880 --> 00:49:06.150 align:start position:0%
tv and so on they have certain
capabilities<00:49:04.160><c> so</c><00:49:04.319><c> if</c><00:49:04.480><c> we</c><00:49:04.559><c> type</c><00:49:04.960><c> a</c><00:49:05.119><c> string</c><00:49:05.440><c> here</c>

00:49:06.150 --> 00:49:06.160 align:start position:0%
capabilities so if we type a string here
 

00:49:06.160 --> 00:49:08.549 align:start position:0%
capabilities so if we type a string here
and<00:49:06.319><c> then</c><00:49:06.480><c> press</c><00:49:06.880><c> dot</c><00:49:07.599><c> we</c><00:49:07.760><c> can</c><00:49:07.920><c> see</c><00:49:08.160><c> all</c><00:49:08.319><c> the</c>

00:49:08.549 --> 00:49:08.559 align:start position:0%
and then press dot we can see all the
 

00:49:08.559 --> 00:49:10.710 align:start position:0%
and then press dot we can see all the
functions<00:49:09.119><c> or</c><00:49:09.359><c> methods</c><00:49:09.920><c> available</c><00:49:10.400><c> in</c><00:49:10.559><c> a</c>

00:49:10.710 --> 00:49:10.720 align:start position:0%
functions or methods available in a
 

00:49:10.720 --> 00:49:12.630 align:start position:0%
functions or methods available in a
string<00:49:11.040><c> object</c><00:49:11.440><c> in</c><00:49:11.599><c> python</c>

00:49:12.630 --> 00:49:12.640 align:start position:0%
string object in python
 

00:49:12.640 --> 00:49:15.030 align:start position:0%
string object in python
now<00:49:13.119><c> lists</c><00:49:13.599><c> are</c><00:49:13.680><c> also</c><00:49:14.000><c> objects</c><00:49:14.640><c> so</c><00:49:14.800><c> they</c><00:49:14.880><c> have</c>

00:49:15.030 --> 00:49:15.040 align:start position:0%
now lists are also objects so they have
 

00:49:15.040 --> 00:49:17.190 align:start position:0%
now lists are also objects so they have
a<00:49:15.119><c> bunch</c><00:49:15.359><c> of</c><00:49:15.520><c> methods</c><00:49:15.920><c> for</c><00:49:16.319><c> adding</c><00:49:16.640><c> items</c><00:49:17.040><c> or</c>

00:49:17.190 --> 00:49:17.200 align:start position:0%
a bunch of methods for adding items or
 

00:49:17.200 --> 00:49:19.270 align:start position:0%
a bunch of methods for adding items or
removing<00:49:17.599><c> them</c><00:49:17.839><c> and</c><00:49:17.920><c> so</c><00:49:18.079><c> on</c><00:49:18.240><c> let</c><00:49:18.400><c> me</c><00:49:18.559><c> show</c><00:49:18.720><c> you</c>

00:49:19.270 --> 00:49:19.280 align:start position:0%
removing them and so on let me show you
 

00:49:19.280 --> 00:49:20.870 align:start position:0%
removing them and so on let me show you
so<00:49:19.440><c> i'm</c><00:49:19.599><c> going</c><00:49:19.680><c> to</c><00:49:19.760><c> declare</c>

00:49:20.870 --> 00:49:20.880 align:start position:0%
so i'm going to declare
 

00:49:20.880 --> 00:49:22.549 align:start position:0%
so i'm going to declare
a<00:49:21.040><c> list</c><00:49:21.280><c> of</c><00:49:21.359><c> numbers</c>

00:49:22.549 --> 00:49:22.559 align:start position:0%
a list of numbers
 

00:49:22.559 --> 00:49:25.750 align:start position:0%
a list of numbers
let's<00:49:22.720><c> say</c><00:49:22.960><c> 1</c><00:49:23.200><c> 2</c><00:49:23.440><c> 3</c><00:49:23.839><c> 4</c><00:49:24.240><c> and</c><00:49:24.480><c> 5.</c>

00:49:25.750 --> 00:49:25.760 align:start position:0%
let's say 1 2 3 4 and 5.
 

00:49:25.760 --> 00:49:27.670 align:start position:0%
let's say 1 2 3 4 and 5.
now<00:49:26.079><c> to</c><00:49:26.319><c> add</c><00:49:26.480><c> a</c><00:49:26.559><c> new</c><00:49:26.800><c> element</c><00:49:27.200><c> at</c><00:49:27.280><c> the</c><00:49:27.440><c> end</c><00:49:27.599><c> of</c>

00:49:27.670 --> 00:49:27.680 align:start position:0%
now to add a new element at the end of
 

00:49:27.680 --> 00:49:30.230 align:start position:0%
now to add a new element at the end of
this<00:49:27.920><c> list</c><00:49:28.400><c> we</c><00:49:28.559><c> can</c><00:49:28.720><c> use</c><00:49:28.880><c> the</c><00:49:29.040><c> append</c><00:49:29.440><c> method</c>

00:49:30.230 --> 00:49:30.240 align:start position:0%
this list we can use the append method
 

00:49:30.240 --> 00:49:31.750 align:start position:0%
this list we can use the append method
so<00:49:30.400><c> we</c><00:49:30.559><c> type</c><00:49:30.800><c> numbers</c>

00:49:31.750 --> 00:49:31.760 align:start position:0%
so we type numbers
 

00:49:31.760 --> 00:49:33.030 align:start position:0%
so we type numbers
that<00:49:32.000><c> append</c>

00:49:33.030 --> 00:49:33.040 align:start position:0%
that append
 

00:49:33.040 --> 00:49:35.510 align:start position:0%
that append
and<00:49:33.200><c> here</c><00:49:33.359><c> we</c><00:49:33.599><c> type</c><00:49:34.240><c> 6.</c>

00:49:35.510 --> 00:49:35.520 align:start position:0%
and here we type 6.
 

00:49:35.520 --> 00:49:39.109 align:start position:0%
and here we type 6.
now<00:49:36.079><c> let's</c><00:49:36.319><c> print</c><00:49:36.640><c> our</c><00:49:36.800><c> list</c>

00:49:39.109 --> 00:49:39.119 align:start position:0%
now let's print our list
 

00:49:39.119 --> 00:49:41.829 align:start position:0%
now let's print our list
so<00:49:39.440><c> here's</c><00:49:39.680><c> our</c><00:49:39.839><c> updated</c><00:49:40.240><c> list</c><00:49:40.640><c> beautiful</c>

00:49:41.829 --> 00:49:41.839 align:start position:0%
so here's our updated list beautiful
 

00:49:41.839 --> 00:49:43.750 align:start position:0%
so here's our updated list beautiful
now<00:49:42.000><c> what</c><00:49:42.240><c> if</c><00:49:42.319><c> you</c><00:49:42.400><c> want</c><00:49:42.480><c> to</c><00:49:42.559><c> insert</c><00:49:42.880><c> a</c><00:49:42.960><c> number</c>

00:49:43.750 --> 00:49:43.760 align:start position:0%
now what if you want to insert a number
 

00:49:43.760 --> 00:49:45.270 align:start position:0%
now what if you want to insert a number
somewhere<00:49:44.079><c> in</c><00:49:44.240><c> the</c><00:49:44.319><c> middle</c><00:49:44.720><c> or</c><00:49:45.040><c> at</c><00:49:45.200><c> the</c>

00:49:45.270 --> 00:49:45.280 align:start position:0%
somewhere in the middle or at the
 

00:49:45.280 --> 00:49:46.390 align:start position:0%
somewhere in the middle or at the
beginning

00:49:46.390 --> 00:49:46.400 align:start position:0%
beginning
 

00:49:46.400 --> 00:49:49.190 align:start position:0%
beginning
for<00:49:46.640><c> that</c><00:49:46.800><c> we</c><00:49:46.960><c> use</c><00:49:47.119><c> the</c><00:49:47.280><c> insert</c><00:49:47.760><c> method</c>

00:49:49.190 --> 00:49:49.200 align:start position:0%
for that we use the insert method
 

00:49:49.200 --> 00:49:52.630 align:start position:0%
for that we use the insert method
so<00:49:49.760><c> we're</c><00:49:49.920><c> going</c><00:49:50.000><c> to</c><00:49:50.160><c> call</c><00:49:50.720><c> the</c><00:49:50.960><c> insert</c><00:49:51.280><c> method</c>

00:49:52.630 --> 00:49:52.640 align:start position:0%
so we're going to call the insert method
 

00:49:52.640 --> 00:49:53.910 align:start position:0%
so we're going to call the insert method
now<00:49:52.880><c> on</c><00:49:53.040><c> the</c><00:49:53.119><c> top</c>

00:49:53.910 --> 00:49:53.920 align:start position:0%
now on the top
 

00:49:53.920 --> 00:49:55.589 align:start position:0%
now on the top
go<00:49:54.079><c> to</c><00:49:54.240><c> the</c><00:49:54.319><c> view</c><00:49:54.559><c> menu</c>

00:49:55.589 --> 00:49:55.599 align:start position:0%
go to the view menu
 

00:49:55.599 --> 00:49:56.390 align:start position:0%
go to the view menu
and

00:49:56.390 --> 00:49:56.400 align:start position:0%
and
 

00:49:56.400 --> 00:49:58.630 align:start position:0%
and
look<00:49:56.640><c> at</c><00:49:56.800><c> parameter</c><00:49:57.440><c> info</c><00:49:58.160><c> look</c><00:49:58.400><c> at</c><00:49:58.480><c> the</c>

00:49:58.630 --> 00:49:58.640 align:start position:0%
look at parameter info look at the
 

00:49:58.640 --> 00:50:01.670 align:start position:0%
look at parameter info look at the
shortcut<00:49:59.599><c> on</c><00:49:59.760><c> a</c><00:49:59.839><c> mac</c><00:50:00.160><c> computer</c><00:50:00.960><c> it's</c><00:50:01.200><c> command</c>

00:50:01.670 --> 00:50:01.680 align:start position:0%
shortcut on a mac computer it's command
 

00:50:01.680 --> 00:50:02.549 align:start position:0%
shortcut on a mac computer it's command
and<00:50:01.839><c> p</c>

00:50:02.549 --> 00:50:02.559 align:start position:0%
and p
 

00:50:02.559 --> 00:50:05.190 align:start position:0%
and p
on<00:50:02.720><c> windows</c><00:50:03.119><c> it's</c><00:50:03.359><c> probably</c><00:50:03.760><c> control</c><00:50:04.240><c> and</c><00:50:04.400><c> p</c>

00:50:05.190 --> 00:50:05.200 align:start position:0%
on windows it's probably control and p
 

00:50:05.200 --> 00:50:07.670 align:start position:0%
on windows it's probably control and p
if<00:50:05.440><c> we</c><00:50:05.520><c> use</c><00:50:05.680><c> this</c><00:50:05.920><c> shortcut</c><00:50:06.880><c> we</c><00:50:07.040><c> can</c><00:50:07.200><c> see</c><00:50:07.440><c> the</c>

00:50:07.670 --> 00:50:07.680 align:start position:0%
if we use this shortcut we can see the
 

00:50:07.680 --> 00:50:10.230 align:start position:0%
if we use this shortcut we can see the
values<00:50:08.240><c> that</c><00:50:08.400><c> this</c><00:50:08.640><c> method</c><00:50:09.040><c> expects</c>

00:50:10.230 --> 00:50:10.240 align:start position:0%
values that this method expects
 

00:50:10.240 --> 00:50:12.069 align:start position:0%
values that this method expects
so<00:50:10.720><c> the</c><00:50:10.880><c> first</c><00:50:11.119><c> value</c><00:50:11.440><c> that</c><00:50:11.520><c> this</c><00:50:11.680><c> method</c>

00:50:12.069 --> 00:50:12.079 align:start position:0%
so the first value that this method
 

00:50:12.079 --> 00:50:14.950 align:start position:0%
so the first value that this method
expects<00:50:12.720><c> is</c><00:50:12.880><c> an</c><00:50:13.119><c> index</c><00:50:13.599><c> value</c><00:50:14.319><c> and</c><00:50:14.480><c> the</c><00:50:14.720><c> type</c>

00:50:14.950 --> 00:50:14.960 align:start position:0%
expects is an index value and the type
 

00:50:14.960 --> 00:50:16.790 align:start position:0%
expects is an index value and the type
of<00:50:15.040><c> this</c><00:50:15.280><c> value</c><00:50:15.599><c> is</c><00:50:15.680><c> an</c><00:50:15.839><c> integer</c>

00:50:16.790 --> 00:50:16.800 align:start position:0%
of this value is an integer
 

00:50:16.800 --> 00:50:18.470 align:start position:0%
of this value is an integer
so<00:50:17.040><c> if</c><00:50:17.119><c> i</c><00:50:17.200><c> want</c><00:50:17.359><c> to</c><00:50:17.440><c> insert</c><00:50:17.760><c> a</c><00:50:17.920><c> value</c><00:50:18.240><c> at</c><00:50:18.400><c> the</c>

00:50:18.470 --> 00:50:18.480 align:start position:0%
so if i want to insert a value at the
 

00:50:18.480 --> 00:50:21.349 align:start position:0%
so if i want to insert a value at the
beginning<00:50:18.880><c> of</c><00:50:19.040><c> this</c><00:50:19.200><c> list</c><00:50:19.839><c> i</c><00:50:20.000><c> should</c><00:50:20.240><c> pass</c><00:50:20.559><c> 0</c>

00:50:21.349 --> 00:50:21.359 align:start position:0%
beginning of this list i should pass 0
 

00:50:21.359 --> 00:50:23.910 align:start position:0%
beginning of this list i should pass 0
as<00:50:21.599><c> the</c><00:50:21.839><c> index</c><00:50:22.240><c> of</c><00:50:22.319><c> the</c><00:50:22.400><c> first</c><00:50:22.720><c> element</c><00:50:23.200><c> right</c>

00:50:23.910 --> 00:50:23.920 align:start position:0%
as the index of the first element right
 

00:50:23.920 --> 00:50:25.670 align:start position:0%
as the index of the first element right
so<00:50:24.079><c> let's</c><00:50:24.319><c> pass</c><00:50:24.640><c> 0.</c>

00:50:25.670 --> 00:50:25.680 align:start position:0%
so let's pass 0.
 

00:50:25.680 --> 00:50:26.950 align:start position:0%
so let's pass 0.
now

00:50:26.950 --> 00:50:26.960 align:start position:0%
now
 

00:50:26.960 --> 00:50:29.030 align:start position:0%
now
the<00:50:27.200><c> second</c><00:50:27.520><c> value</c><00:50:27.839><c> is</c><00:50:27.920><c> highlighted</c><00:50:28.720><c> so</c><00:50:28.880><c> the</c>

00:50:29.030 --> 00:50:29.040 align:start position:0%
the second value is highlighted so the
 

00:50:29.040 --> 00:50:31.430 align:start position:0%
the second value is highlighted so the
second<00:50:29.359><c> value</c><00:50:29.680><c> is</c><00:50:29.839><c> an</c><00:50:30.000><c> object</c><00:50:30.800><c> and</c><00:50:31.040><c> the</c><00:50:31.200><c> type</c>

00:50:31.430 --> 00:50:31.440 align:start position:0%
second value is an object and the type
 

00:50:31.440 --> 00:50:34.150 align:start position:0%
second value is an object and the type
of<00:50:31.599><c> this</c><00:50:32.160><c> is</c><00:50:32.400><c> t</c><00:50:33.040><c> that</c><00:50:33.280><c> basically</c><00:50:33.599><c> means</c><00:50:33.920><c> this</c>

00:50:34.150 --> 00:50:34.160 align:start position:0%
of this is t that basically means this
 

00:50:34.160 --> 00:50:36.470 align:start position:0%
of this is t that basically means this
can<00:50:34.400><c> be</c><00:50:34.640><c> any</c><00:50:34.880><c> type</c><00:50:35.280><c> we</c><00:50:35.440><c> can</c><00:50:35.599><c> pass</c><00:50:35.839><c> a</c><00:50:36.000><c> number</c><00:50:36.319><c> we</c>

00:50:36.470 --> 00:50:36.480 align:start position:0%
can be any type we can pass a number we
 

00:50:36.480 --> 00:50:38.549 align:start position:0%
can be any type we can pass a number we
can<00:50:36.640><c> pass</c><00:50:36.960><c> a</c><00:50:37.119><c> boolean</c><00:50:37.520><c> we</c><00:50:37.599><c> can</c><00:50:37.760><c> pass</c><00:50:38.000><c> a</c><00:50:38.240><c> string</c>

00:50:38.549 --> 00:50:38.559 align:start position:0%
can pass a boolean we can pass a string
 

00:50:38.559 --> 00:50:40.710 align:start position:0%
can pass a boolean we can pass a string
we<00:50:38.640><c> can</c><00:50:38.800><c> pass</c><00:50:39.200><c> a</c><00:50:39.359><c> list</c><00:50:39.760><c> or</c><00:50:40.000><c> any</c><00:50:40.240><c> type</c><00:50:40.480><c> of</c>

00:50:40.710 --> 00:50:40.720 align:start position:0%
we can pass a list or any type of
 

00:50:40.720 --> 00:50:42.230 align:start position:0%
we can pass a list or any type of
objects<00:50:41.119><c> in</c><00:50:41.280><c> python</c>

00:50:42.230 --> 00:50:42.240 align:start position:0%
objects in python
 

00:50:42.240 --> 00:50:45.109 align:start position:0%
objects in python
so<00:50:42.559><c> i'm</c><00:50:42.720><c> going</c><00:50:42.880><c> to</c><00:50:42.960><c> pass</c><00:50:43.760><c> negative</c><00:50:44.160><c> 1.</c><00:50:44.960><c> now</c>

00:50:45.109 --> 00:50:45.119 align:start position:0%
so i'm going to pass negative 1. now
 

00:50:45.119 --> 00:50:47.349 align:start position:0%
so i'm going to pass negative 1. now
let's<00:50:45.359><c> run</c><00:50:45.520><c> our</c><00:50:45.680><c> program</c>

00:50:47.349 --> 00:50:47.359 align:start position:0%
let's run our program
 

00:50:47.359 --> 00:50:49.349 align:start position:0%
let's run our program
you<00:50:47.440><c> can</c><00:50:47.599><c> see</c><00:50:47.839><c> negative</c><00:50:48.160><c> 1</c><00:50:48.400><c> appeared</c><00:50:48.960><c> at</c><00:50:49.119><c> the</c>

00:50:49.349 --> 00:50:49.359 align:start position:0%
you can see negative 1 appeared at the
 

00:50:49.359 --> 00:50:50.950 align:start position:0%
you can see negative 1 appeared at the
beginning<00:50:49.680><c> of</c><00:50:49.839><c> our</c><00:50:50.000><c> list</c>

00:50:50.950 --> 00:50:50.960 align:start position:0%
beginning of our list
 

00:50:50.960 --> 00:50:52.950 align:start position:0%
beginning of our list
we<00:50:51.119><c> also</c><00:50:51.359><c> have</c><00:50:51.440><c> a</c><00:50:51.520><c> method</c><00:50:51.760><c> for</c><00:50:51.920><c> removing</c><00:50:52.400><c> items</c>

00:50:52.950 --> 00:50:52.960 align:start position:0%
we also have a method for removing items
 

00:50:52.960 --> 00:50:55.190 align:start position:0%
we also have a method for removing items
so<00:50:54.160><c> let's</c><00:50:54.400><c> call</c>

00:50:55.190 --> 00:50:55.200 align:start position:0%
so let's call
 

00:50:55.200 --> 00:50:56.630 align:start position:0%
so let's call
remove

00:50:56.630 --> 00:50:56.640 align:start position:0%
remove
 

00:50:56.640 --> 00:50:57.829 align:start position:0%
remove
three

00:50:57.829 --> 00:50:57.839 align:start position:0%
three
 

00:50:57.839 --> 00:50:59.430 align:start position:0%
three
let's<00:50:58.079><c> run</c><00:50:58.240><c> the</c><00:50:58.319><c> program</c>

00:50:59.430 --> 00:50:59.440 align:start position:0%
let's run the program
 

00:50:59.440 --> 00:51:01.670 align:start position:0%
let's run the program
three<00:50:59.680><c> is</c><00:50:59.839><c> gone</c><00:51:00.400><c> we</c><00:51:00.559><c> only</c><00:51:00.800><c> have</c><00:51:00.960><c> one</c><00:51:01.200><c> two</c><00:51:01.440><c> four</c>

00:51:01.670 --> 00:51:01.680 align:start position:0%
three is gone we only have one two four
 

00:51:01.680 --> 00:51:02.790 align:start position:0%
three is gone we only have one two four
and<00:51:01.839><c> five</c>

00:51:02.790 --> 00:51:02.800 align:start position:0%
and five
 

00:51:02.800 --> 00:51:04.390 align:start position:0%
and five
now<00:51:03.040><c> if</c><00:51:03.119><c> you</c><00:51:03.200><c> wanna</c><00:51:03.359><c> remove</c><00:51:03.760><c> all</c><00:51:03.839><c> the</c><00:51:04.000><c> items</c><00:51:04.319><c> in</c>

00:51:04.390 --> 00:51:04.400 align:start position:0%
now if you wanna remove all the items in
 

00:51:04.400 --> 00:51:07.109 align:start position:0%
now if you wanna remove all the items in
the<00:51:04.559><c> list</c><00:51:05.200><c> we</c><00:51:05.359><c> call</c><00:51:05.599><c> the</c><00:51:05.760><c> clear</c><00:51:06.079><c> method</c><00:51:06.800><c> so</c>

00:51:07.109 --> 00:51:07.119 align:start position:0%
the list we call the clear method so
 

00:51:07.119 --> 00:51:08.950 align:start position:0%
the list we call the clear method so
clear

00:51:08.950 --> 00:51:08.960 align:start position:0%
clear
 

00:51:08.960 --> 00:51:11.510 align:start position:0%
clear
this<00:51:09.200><c> method</c><00:51:09.520><c> doesn't</c><00:51:09.839><c> expect</c><00:51:10.160><c> any</c><00:51:10.400><c> values</c>

00:51:11.510 --> 00:51:11.520 align:start position:0%
this method doesn't expect any values
 

00:51:11.520 --> 00:51:13.589 align:start position:0%
this method doesn't expect any values
so<00:51:11.760><c> let's</c><00:51:11.920><c> run</c><00:51:12.160><c> our</c><00:51:12.240><c> program</c><00:51:12.960><c> our</c><00:51:13.119><c> list</c><00:51:13.440><c> is</c>

00:51:13.589 --> 00:51:13.599 align:start position:0%
so let's run our program our list is
 

00:51:13.599 --> 00:51:14.549 align:start position:0%
so let's run our program our list is
empty

00:51:14.549 --> 00:51:14.559 align:start position:0%
empty
 

00:51:14.559 --> 00:51:15.990 align:start position:0%
empty
now<00:51:14.800><c> sometimes</c><00:51:15.200><c> you</c><00:51:15.280><c> want</c><00:51:15.440><c> to</c><00:51:15.520><c> know</c><00:51:15.760><c> if</c><00:51:15.920><c> a</c>

00:51:15.990 --> 00:51:16.000 align:start position:0%
now sometimes you want to know if a
 

00:51:16.000 --> 00:51:18.710 align:start position:0%
now sometimes you want to know if a
given<00:51:16.319><c> item</c><00:51:16.720><c> exists</c><00:51:17.280><c> in</c><00:51:17.359><c> our</c><00:51:17.520><c> list</c><00:51:17.760><c> or</c><00:51:18.000><c> not</c><00:51:18.559><c> to</c>

00:51:18.710 --> 00:51:18.720 align:start position:0%
given item exists in our list or not to
 

00:51:18.720 --> 00:51:21.670 align:start position:0%
given item exists in our list or not to
do<00:51:18.880><c> that</c><00:51:19.119><c> we</c><00:51:19.280><c> use</c><00:51:19.440><c> the</c><00:51:19.680><c> in</c><00:51:20.000><c> operator</c><00:51:20.960><c> so</c>

00:51:21.670 --> 00:51:21.680 align:start position:0%
do that we use the in operator so
 

00:51:21.680 --> 00:51:23.910 align:start position:0%
do that we use the in operator so
let's<00:51:21.920><c> remove</c><00:51:22.240><c> this</c><00:51:22.400><c> line</c>

00:51:23.910 --> 00:51:23.920 align:start position:0%
let's remove this line
 

00:51:23.920 --> 00:51:25.990 align:start position:0%
let's remove this line
instead<00:51:24.240><c> of</c><00:51:24.319><c> printing</c><00:51:24.800><c> our</c><00:51:24.960><c> numbers</c><00:51:25.359><c> list</c><00:51:25.839><c> i'm</c>

00:51:25.990 --> 00:51:26.000 align:start position:0%
instead of printing our numbers list i'm
 

00:51:26.000 --> 00:51:28.150 align:start position:0%
instead of printing our numbers list i'm
going<00:51:26.079><c> to</c><00:51:26.160><c> print</c><00:51:26.480><c> an</c><00:51:26.640><c> expression</c>

00:51:28.150 --> 00:51:28.160 align:start position:0%
going to print an expression
 

00:51:28.160 --> 00:51:29.190 align:start position:0%
going to print an expression
one

00:51:29.190 --> 00:51:29.200 align:start position:0%
one
 

00:51:29.200 --> 00:51:29.990 align:start position:0%
one
in

00:51:29.990 --> 00:51:30.000 align:start position:0%
in
 

00:51:30.000 --> 00:51:31.109 align:start position:0%
in
numbers

00:51:31.109 --> 00:51:31.119 align:start position:0%
numbers
 

00:51:31.119 --> 00:51:33.030 align:start position:0%
numbers
so<00:51:31.280><c> here</c><00:51:31.440><c> we're</c><00:51:31.599><c> using</c><00:51:31.839><c> the</c><00:51:32.000><c> in</c><00:51:32.240><c> operator</c>

00:51:33.030 --> 00:51:33.040 align:start position:0%
so here we're using the in operator
 

00:51:33.040 --> 00:51:35.510 align:start position:0%
so here we're using the in operator
we're<00:51:33.280><c> checking</c><00:51:33.599><c> to</c><00:51:33.760><c> see</c><00:51:34.000><c> if</c><00:51:34.240><c> one</c><00:51:34.880><c> is</c><00:51:35.200><c> in</c><00:51:35.359><c> the</c>

00:51:35.510 --> 00:51:35.520 align:start position:0%
we're checking to see if one is in the
 

00:51:35.520 --> 00:51:37.510 align:start position:0%
we're checking to see if one is in the
numbers<00:51:36.000><c> list</c><00:51:36.559><c> so</c><00:51:36.720><c> this</c><00:51:36.880><c> is</c><00:51:37.040><c> a</c><00:51:37.119><c> boolean</c>

00:51:37.510 --> 00:51:37.520 align:start position:0%
numbers list so this is a boolean
 

00:51:37.520 --> 00:51:40.390 align:start position:0%
numbers list so this is a boolean
expression<00:51:38.160><c> it</c><00:51:38.319><c> returns</c><00:51:38.800><c> a</c><00:51:38.960><c> boolean</c><00:51:39.440><c> value</c>

00:51:40.390 --> 00:51:40.400 align:start position:0%
expression it returns a boolean value
 

00:51:40.400 --> 00:51:41.750 align:start position:0%
expression it returns a boolean value
take<00:51:40.559><c> a</c><00:51:40.640><c> look</c>

00:51:41.750 --> 00:51:41.760 align:start position:0%
take a look
 

00:51:41.760 --> 00:51:43.349 align:start position:0%
take a look
so<00:51:42.160><c> we</c><00:51:42.319><c> get</c><00:51:42.559><c> true</c>

00:51:43.349 --> 00:51:43.359 align:start position:0%
so we get true
 

00:51:43.359 --> 00:51:45.670 align:start position:0%
so we get true
obviously<00:51:43.920><c> if</c><00:51:44.079><c> we</c><00:51:44.240><c> search</c><00:51:44.880><c> for</c><00:51:45.040><c> a</c><00:51:45.200><c> value</c><00:51:45.520><c> that</c>

00:51:45.670 --> 00:51:45.680 align:start position:0%
obviously if we search for a value that
 

00:51:45.680 --> 00:51:47.349 align:start position:0%
obviously if we search for a value that
doesn't<00:51:46.000><c> exist</c><00:51:46.319><c> in</c><00:51:46.400><c> this</c><00:51:46.559><c> list</c>

00:51:47.349 --> 00:51:47.359 align:start position:0%
doesn't exist in this list
 

00:51:47.359 --> 00:51:48.549 align:start position:0%
doesn't exist in this list
like<00:51:47.599><c> 10</c>

00:51:48.549 --> 00:51:48.559 align:start position:0%
like 10
 

00:51:48.559 --> 00:51:50.870 align:start position:0%
like 10
we<00:51:48.720><c> get</c><00:51:48.960><c> false</c><00:51:49.440><c> okay</c>

00:51:50.870 --> 00:51:50.880 align:start position:0%
we get false okay
 

00:51:50.880 --> 00:51:52.390 align:start position:0%
we get false okay
now<00:51:51.119><c> finally</c><00:51:51.520><c> there</c><00:51:51.680><c> are</c><00:51:51.760><c> times</c><00:51:52.079><c> you</c><00:51:52.240><c> want</c><00:51:52.319><c> to</c>

00:51:52.390 --> 00:51:52.400 align:start position:0%
now finally there are times you want to
 

00:51:52.400 --> 00:51:54.470 align:start position:0%
now finally there are times you want to
know<00:51:52.640><c> how</c><00:51:52.800><c> many</c><00:51:53.119><c> items</c><00:51:53.440><c> you</c><00:51:53.520><c> have</c><00:51:53.680><c> in</c><00:51:53.760><c> the</c><00:51:53.839><c> list</c>

00:51:54.470 --> 00:51:54.480 align:start position:0%
know how many items you have in the list
 

00:51:54.480 --> 00:51:57.030 align:start position:0%
know how many items you have in the list
to<00:51:54.640><c> do</c><00:51:54.800><c> that</c><00:51:55.200><c> you</c><00:51:55.280><c> can</c><00:51:55.440><c> use</c><00:51:55.680><c> the</c><00:51:55.839><c> built-in</c><00:51:56.640><c> lend</c>

00:51:57.030 --> 00:51:57.040 align:start position:0%
to do that you can use the built-in lend
 

00:51:57.040 --> 00:51:57.990 align:start position:0%
to do that you can use the built-in lend
function

00:51:57.990 --> 00:51:58.000 align:start position:0%
function
 

00:51:58.000 --> 00:52:00.309 align:start position:0%
function
so<00:51:58.640><c> let's</c><00:51:58.960><c> print</c>

00:52:00.309 --> 00:52:00.319 align:start position:0%
so let's print
 

00:52:00.319 --> 00:52:03.510 align:start position:0%
so let's print
len<00:52:01.119><c> of</c><00:52:01.680><c> numbers</c><00:52:02.480><c> so</c><00:52:02.720><c> len</c>

00:52:03.510 --> 00:52:03.520 align:start position:0%
len of numbers so len
 

00:52:03.520 --> 00:52:05.270 align:start position:0%
len of numbers so len
is<00:52:03.680><c> a</c><00:52:03.760><c> built-in</c><00:52:04.160><c> function</c><00:52:04.720><c> just</c><00:52:04.960><c> like</c><00:52:05.119><c> the</c>

00:52:05.270 --> 00:52:05.280 align:start position:0%
is a built-in function just like the
 

00:52:05.280 --> 00:52:07.030 align:start position:0%
is a built-in function just like the
print<00:52:05.520><c> function</c><00:52:06.160><c> that</c><00:52:06.400><c> is</c><00:52:06.559><c> why</c><00:52:06.800><c> it's</c>

00:52:07.030 --> 00:52:07.040 align:start position:0%
print function that is why it's
 

00:52:07.040 --> 00:52:09.349 align:start position:0%
print function that is why it's
highlighted<00:52:07.599><c> as</c><00:52:07.760><c> purple</c><00:52:08.720><c> it</c><00:52:08.880><c> returns</c><00:52:09.280><c> the</c>

00:52:09.349 --> 00:52:09.359 align:start position:0%
highlighted as purple it returns the
 

00:52:09.359 --> 00:52:12.950 align:start position:0%
highlighted as purple it returns the
number<00:52:09.599><c> of</c><00:52:09.760><c> elements</c><00:52:10.160><c> in</c><00:52:10.240><c> a</c><00:52:10.319><c> list</c><00:52:10.720><c> take</c><00:52:10.880><c> a</c><00:52:10.960><c> look</c>

00:52:12.950 --> 00:52:12.960 align:start position:0%
number of elements in a list take a look
 

00:52:12.960 --> 00:52:20.790 align:start position:0%
number of elements in a list take a look
so<00:52:13.119><c> we</c><00:52:13.200><c> have</c><00:52:13.359><c> five</c><00:52:13.599><c> elements</c><00:52:14.000><c> in</c><00:52:14.079><c> this</c><00:52:14.240><c> list</c>

00:52:20.790 --> 00:52:20.800 align:start position:0%
 
 

00:52:20.800 --> 00:52:22.950 align:start position:0%
 
when<00:52:21.040><c> writing</c><00:52:21.359><c> python</c><00:52:21.839><c> programs</c><00:52:22.640><c> there</c><00:52:22.880><c> are</c>

00:52:22.950 --> 00:52:22.960 align:start position:0%
when writing python programs there are
 

00:52:22.960 --> 00:52:25.030 align:start position:0%
when writing python programs there are
times<00:52:23.200><c> you</c><00:52:23.359><c> want</c><00:52:23.440><c> to</c><00:52:23.599><c> iterate</c><00:52:24.000><c> over</c><00:52:24.240><c> a</c><00:52:24.400><c> list</c>

00:52:25.030 --> 00:52:25.040 align:start position:0%
times you want to iterate over a list
 

00:52:25.040 --> 00:52:27.510 align:start position:0%
times you want to iterate over a list
and<00:52:25.359><c> access</c><00:52:25.839><c> each</c><00:52:26.079><c> item</c><00:52:26.480><c> individually</c><00:52:27.200><c> let</c><00:52:27.359><c> me</c>

00:52:27.510 --> 00:52:27.520 align:start position:0%
and access each item individually let me
 

00:52:27.520 --> 00:52:29.670 align:start position:0%
and access each item individually let me
show<00:52:27.680><c> you</c><00:52:28.240><c> so</c><00:52:28.480><c> i'm</c><00:52:28.559><c> going</c><00:52:28.640><c> to</c><00:52:28.720><c> declare</c>

00:52:29.670 --> 00:52:29.680 align:start position:0%
show you so i'm going to declare
 

00:52:29.680 --> 00:52:31.430 align:start position:0%
show you so i'm going to declare
a<00:52:29.760><c> list</c><00:52:30.000><c> of</c><00:52:30.160><c> numbers</c>

00:52:31.430 --> 00:52:31.440 align:start position:0%
a list of numbers
 

00:52:31.440 --> 00:52:33.829 align:start position:0%
a list of numbers
one<00:52:31.760><c> two</c><00:52:32.079><c> three</c><00:52:32.400><c> four</c><00:52:32.720><c> five</c>

00:52:33.829 --> 00:52:33.839 align:start position:0%
one two three four five
 

00:52:33.839 --> 00:52:36.630 align:start position:0%
one two three four five
now<00:52:34.240><c> if</c><00:52:34.400><c> we</c><00:52:34.559><c> print</c><00:52:34.880><c> this</c><00:52:35.040><c> list</c>

00:52:36.630 --> 00:52:36.640 align:start position:0%
now if we print this list
 

00:52:36.640 --> 00:52:38.470 align:start position:0%
now if we print this list
it<00:52:36.800><c> comes</c><00:52:37.119><c> out</c><00:52:37.359><c> exactly</c><00:52:37.760><c> like</c><00:52:37.920><c> how</c><00:52:38.079><c> we</c><00:52:38.240><c> wrote</c>

00:52:38.470 --> 00:52:38.480 align:start position:0%
it comes out exactly like how we wrote
 

00:52:38.480 --> 00:52:41.030 align:start position:0%
it comes out exactly like how we wrote
it<00:52:38.800><c> using</c><00:52:39.040><c> the</c><00:52:39.200><c> square</c><00:52:39.520><c> bracket</c><00:52:39.920><c> notation</c><00:52:40.800><c> but</c>

00:52:41.030 --> 00:52:41.040 align:start position:0%
it using the square bracket notation but
 

00:52:41.040 --> 00:52:42.790 align:start position:0%
it using the square bracket notation but
what<00:52:41.200><c> if</c><00:52:41.359><c> we</c><00:52:41.440><c> wanted</c><00:52:41.599><c> to</c><00:52:41.760><c> print</c><00:52:42.079><c> each</c><00:52:42.319><c> item</c><00:52:42.640><c> on</c>

00:52:42.790 --> 00:52:42.800 align:start position:0%
what if we wanted to print each item on
 

00:52:42.800 --> 00:52:45.349 align:start position:0%
what if we wanted to print each item on
a<00:52:42.880><c> separate</c><00:52:43.280><c> line</c><00:52:44.000><c> that</c><00:52:44.240><c> is</c><00:52:44.319><c> where</c><00:52:44.880><c> we</c><00:52:45.040><c> use</c><00:52:45.200><c> the</c>

00:52:45.349 --> 00:52:45.359 align:start position:0%
a separate line that is where we use the
 

00:52:45.359 --> 00:52:48.150 align:start position:0%
a separate line that is where we use the
for<00:52:45.599><c> loop</c><00:52:46.000><c> let</c><00:52:46.160><c> me</c><00:52:46.319><c> show</c><00:52:46.480><c> you</c><00:52:47.040><c> so</c><00:52:47.760><c> we're</c><00:52:47.920><c> not</c>

00:52:48.150 --> 00:52:48.160 align:start position:0%
for loop let me show you so we're not
 

00:52:48.160 --> 00:52:49.990 align:start position:0%
for loop let me show you so we're not
going<00:52:48.240><c> to</c><00:52:48.319><c> print</c><00:52:48.640><c> the</c><00:52:48.720><c> entire</c><00:52:49.040><c> list</c>

00:52:49.990 --> 00:52:50.000 align:start position:0%
going to print the entire list
 

00:52:50.000 --> 00:52:52.069 align:start position:0%
going to print the entire list
instead<00:52:50.319><c> we're</c><00:52:50.480><c> going</c><00:52:50.640><c> to</c><00:52:50.720><c> type</c><00:52:51.119><c> 4</c>

00:52:52.069 --> 00:52:52.079 align:start position:0%
instead we're going to type 4
 

00:52:52.079 --> 00:52:53.829 align:start position:0%
instead we're going to type 4
now<00:52:52.240><c> we</c><00:52:52.319><c> declare</c><00:52:52.720><c> a</c><00:52:52.880><c> variable</c><00:52:53.440><c> which</c><00:52:53.680><c> is</c>

00:52:53.829 --> 00:52:53.839 align:start position:0%
now we declare a variable which is
 

00:52:53.839 --> 00:52:55.910 align:start position:0%
now we declare a variable which is
called<00:52:54.319><c> a</c><00:52:54.559><c> loop</c><00:52:54.800><c> variable</c>

00:52:55.910 --> 00:52:55.920 align:start position:0%
called a loop variable
 

00:52:55.920 --> 00:52:57.430 align:start position:0%
called a loop variable
let's<00:52:56.160><c> call</c><00:52:56.400><c> it</c><00:52:56.559><c> item</c>

00:52:57.430 --> 00:52:57.440 align:start position:0%
let's call it item
 

00:52:57.440 --> 00:52:59.430 align:start position:0%
let's call it item
then<00:52:57.599><c> we</c><00:52:57.760><c> type</c><00:52:58.160><c> in</c>

00:52:59.430 --> 00:52:59.440 align:start position:0%
then we type in
 

00:52:59.440 --> 00:53:00.549 align:start position:0%
then we type in
numbers

00:53:00.549 --> 00:53:00.559 align:start position:0%
numbers
 

00:53:00.559 --> 00:53:03.270 align:start position:0%
numbers
next<00:53:00.800><c> we</c><00:53:00.880><c> add</c><00:53:01.040><c> a</c><00:53:01.119><c> colon</c><00:53:01.839><c> to</c><00:53:02.079><c> start</c><00:53:02.640><c> a</c><00:53:02.800><c> block</c><00:53:03.119><c> of</c>

00:53:03.270 --> 00:53:03.280 align:start position:0%
next we add a colon to start a block of
 

00:53:03.280 --> 00:53:06.309 align:start position:0%
next we add a colon to start a block of
code<00:53:03.839><c> so</c><00:53:04.000><c> this</c><00:53:04.240><c> is</c><00:53:04.319><c> what</c><00:53:04.480><c> we</c><00:53:04.640><c> call</c><00:53:04.960><c> a</c><00:53:05.119><c> for</c><00:53:05.359><c> loop</c>

00:53:06.309 --> 00:53:06.319 align:start position:0%
code so this is what we call a for loop
 

00:53:06.319 --> 00:53:08.870 align:start position:0%
code so this is what we call a for loop
with<00:53:06.480><c> this</c><00:53:06.720><c> for</c><00:53:06.960><c> loop</c><00:53:07.359><c> we</c><00:53:07.520><c> can</c><00:53:07.839><c> iterate</c><00:53:08.319><c> over</c>

00:53:08.870 --> 00:53:08.880 align:start position:0%
with this for loop we can iterate over
 

00:53:08.880 --> 00:53:10.549 align:start position:0%
with this for loop we can iterate over
all<00:53:08.960><c> the</c><00:53:09.119><c> items</c><00:53:09.440><c> in</c><00:53:09.520><c> this</c><00:53:09.760><c> list</c>

00:53:10.549 --> 00:53:10.559 align:start position:0%
all the items in this list
 

00:53:10.559 --> 00:53:13.430 align:start position:0%
all the items in this list
in<00:53:10.720><c> each</c><00:53:10.960><c> iteration</c><00:53:12.079><c> this</c><00:53:12.319><c> item</c><00:53:12.640><c> variable</c><00:53:13.280><c> is</c>

00:53:13.430 --> 00:53:13.440 align:start position:0%
in each iteration this item variable is
 

00:53:13.440 --> 00:53:15.670 align:start position:0%
in each iteration this item variable is
going<00:53:13.599><c> to</c><00:53:13.680><c> hold</c><00:53:14.160><c> one</c><00:53:14.400><c> value</c><00:53:15.119><c> so</c><00:53:15.280><c> in</c><00:53:15.359><c> the</c><00:53:15.440><c> first</c>

00:53:15.670 --> 00:53:15.680 align:start position:0%
going to hold one value so in the first
 

00:53:15.680 --> 00:53:18.150 align:start position:0%
going to hold one value so in the first
iteration<00:53:16.480><c> item</c><00:53:16.800><c> is</c><00:53:16.880><c> going</c><00:53:16.960><c> to</c><00:53:17.040><c> be</c><00:53:17.200><c> equal</c><00:53:17.440><c> to</c><00:53:17.599><c> 1</c>

00:53:18.150 --> 00:53:18.160 align:start position:0%
iteration item is going to be equal to 1
 

00:53:18.160 --> 00:53:19.589 align:start position:0%
iteration item is going to be equal to 1
and<00:53:18.240><c> the</c><00:53:18.400><c> second</c><00:53:18.720><c> iteration</c><00:53:19.200><c> is</c><00:53:19.359><c> going</c><00:53:19.440><c> to</c><00:53:19.520><c> be</c>

00:53:19.589 --> 00:53:19.599 align:start position:0%
and the second iteration is going to be
 

00:53:19.599 --> 00:53:22.230 align:start position:0%
and the second iteration is going to be
equal<00:53:19.839><c> to</c><00:53:20.000><c> 2</c><00:53:20.240><c> and</c><00:53:20.400><c> so</c><00:53:20.559><c> on</c><00:53:21.280><c> so</c>

00:53:22.230 --> 00:53:22.240 align:start position:0%
equal to 2 and so on so
 

00:53:22.240 --> 00:53:25.109 align:start position:0%
equal to 2 and so on so
now<00:53:22.480><c> if</c><00:53:22.559><c> we</c><00:53:22.720><c> print</c><00:53:23.440><c> item</c>

00:53:25.109 --> 00:53:25.119 align:start position:0%
now if we print item
 

00:53:25.119 --> 00:53:26.549 align:start position:0%
now if we print item
and<00:53:25.280><c> run</c><00:53:25.520><c> our</c><00:53:25.599><c> program</c>

00:53:26.549 --> 00:53:26.559 align:start position:0%
and run our program
 

00:53:26.559 --> 00:53:28.549 align:start position:0%
and run our program
we<00:53:26.720><c> see</c><00:53:26.960><c> each</c><00:53:27.119><c> item</c><00:53:27.440><c> on</c><00:53:27.520><c> a</c><00:53:27.599><c> new</c><00:53:27.760><c> line</c>

00:53:28.549 --> 00:53:28.559 align:start position:0%
we see each item on a new line
 

00:53:28.559 --> 00:53:31.109 align:start position:0%
we see each item on a new line
so<00:53:28.720><c> this</c><00:53:28.880><c> is</c><00:53:29.040><c> how</c><00:53:29.680><c> we</c><00:53:29.760><c> use</c><00:53:30.000><c> a</c><00:53:30.079><c> for</c><00:53:30.240><c> loop</c><00:53:30.800><c> now</c><00:53:30.960><c> we</c>

00:53:31.109 --> 00:53:31.119 align:start position:0%
so this is how we use a for loop now we
 

00:53:31.119 --> 00:53:33.109 align:start position:0%
so this is how we use a for loop now we
could<00:53:31.359><c> also</c><00:53:31.599><c> achieve</c><00:53:31.920><c> the</c><00:53:32.079><c> same</c><00:53:32.400><c> thing</c><00:53:32.800><c> using</c>

00:53:33.109 --> 00:53:33.119 align:start position:0%
could also achieve the same thing using
 

00:53:33.119 --> 00:53:34.950 align:start position:0%
could also achieve the same thing using
a<00:53:33.280><c> while</c><00:53:33.520><c> loop</c><00:53:33.920><c> but</c><00:53:34.160><c> our</c><00:53:34.319><c> code</c><00:53:34.559><c> would</c><00:53:34.720><c> be</c><00:53:34.880><c> a</c>

00:53:34.950 --> 00:53:34.960 align:start position:0%
a while loop but our code would be a
 

00:53:34.960 --> 00:53:37.750 align:start position:0%
a while loop but our code would be a
little<00:53:35.119><c> bit</c><00:53:35.359><c> longer</c><00:53:35.839><c> let</c><00:53:36.000><c> me</c><00:53:36.160><c> show</c><00:53:36.319><c> you</c><00:53:36.960><c> so</c>

00:53:37.750 --> 00:53:37.760 align:start position:0%
little bit longer let me show you so
 

00:53:37.760 --> 00:53:39.670 align:start position:0%
little bit longer let me show you so
we<00:53:37.839><c> would</c><00:53:38.000><c> have</c><00:53:38.160><c> to</c><00:53:38.319><c> start</c><00:53:38.880><c> by</c><00:53:39.119><c> declaring</c><00:53:39.599><c> a</c>

00:53:39.670 --> 00:53:39.680 align:start position:0%
we would have to start by declaring a
 

00:53:39.680 --> 00:53:42.069 align:start position:0%
we would have to start by declaring a
loop<00:53:39.920><c> variable</c><00:53:40.559><c> outside</c><00:53:40.880><c> of</c><00:53:41.040><c> our</c><00:53:41.200><c> while</c><00:53:41.440><c> loop</c>

00:53:42.069 --> 00:53:42.079 align:start position:0%
loop variable outside of our while loop
 

00:53:42.079 --> 00:53:44.870 align:start position:0%
loop variable outside of our while loop
let's<00:53:42.240><c> say</c><00:53:42.480><c> i</c><00:53:43.200><c> we</c><00:53:43.359><c> set</c><00:53:43.520><c> it</c><00:53:43.599><c> to</c><00:53:43.760><c> zero</c>

00:53:44.870 --> 00:53:44.880 align:start position:0%
let's say i we set it to zero
 

00:53:44.880 --> 00:53:47.910 align:start position:0%
let's say i we set it to zero
now<00:53:45.040><c> we</c><00:53:45.200><c> say</c><00:53:45.520><c> while</c><00:53:46.240><c> i</c><00:53:46.559><c> is</c><00:53:46.720><c> less</c><00:53:46.960><c> than</c>

00:53:47.910 --> 00:53:47.920 align:start position:0%
now we say while i is less than
 

00:53:47.920 --> 00:53:49.670 align:start position:0%
now we say while i is less than
here<00:53:48.160><c> we</c><00:53:48.240><c> need</c><00:53:48.400><c> to</c><00:53:48.480><c> find</c><00:53:48.720><c> out</c><00:53:48.880><c> how</c><00:53:49.040><c> many</c><00:53:49.359><c> items</c>

00:53:49.670 --> 00:53:49.680 align:start position:0%
here we need to find out how many items
 

00:53:49.680 --> 00:53:51.109 align:start position:0%
here we need to find out how many items
we<00:53:49.760><c> have</c><00:53:49.920><c> in</c><00:53:50.000><c> this</c><00:53:50.240><c> list</c>

00:53:51.109 --> 00:53:51.119 align:start position:0%
we have in this list
 

00:53:51.119 --> 00:53:53.109 align:start position:0%
we have in this list
so<00:53:51.359><c> we</c><00:53:51.440><c> use</c><00:53:51.599><c> the</c><00:53:51.760><c> len</c><00:53:52.000><c> function</c>

00:53:53.109 --> 00:53:53.119 align:start position:0%
so we use the len function
 

00:53:53.119 --> 00:53:54.829 align:start position:0%
so we use the len function
len<00:53:53.520><c> of</c>

00:53:54.829 --> 00:53:54.839 align:start position:0%
len of
 

00:53:54.839 --> 00:53:57.990 align:start position:0%
len of
numbers<00:53:55.920><c> as</c><00:53:56.079><c> long</c><00:53:56.240><c> as</c><00:53:56.480><c> i</c><00:53:56.720><c> is</c><00:53:56.960><c> less</c><00:53:57.200><c> than</c><00:53:57.839><c> the</c>

00:53:57.990 --> 00:53:58.000 align:start position:0%
numbers as long as i is less than the
 

00:53:58.000 --> 00:53:59.670 align:start position:0%
numbers as long as i is less than the
length<00:53:58.319><c> of</c><00:53:58.480><c> the</c><00:53:58.559><c> list</c>

00:53:59.670 --> 00:53:59.680 align:start position:0%
length of the list
 

00:53:59.680 --> 00:54:00.790 align:start position:0%
length of the list
print

00:54:00.790 --> 00:54:00.800 align:start position:0%
print
 

00:54:00.800 --> 00:54:02.230 align:start position:0%
print
now<00:54:01.040><c> we</c><00:54:01.119><c> can</c><00:54:01.200><c> use</c><00:54:01.359><c> the</c><00:54:01.520><c> square</c><00:54:01.839><c> bracket</c>

00:54:02.230 --> 00:54:02.240 align:start position:0%
now we can use the square bracket
 

00:54:02.240 --> 00:54:04.870 align:start position:0%
now we can use the square bracket
notation<00:54:03.040><c> to</c><00:54:03.200><c> get</c><00:54:03.359><c> the</c><00:54:03.599><c> element</c><00:54:04.480><c> at</c><00:54:04.640><c> this</c>

00:54:04.870 --> 00:54:04.880 align:start position:0%
notation to get the element at this
 

00:54:04.880 --> 00:54:06.870 align:start position:0%
notation to get the element at this
index<00:54:05.599><c> so</c>

00:54:06.870 --> 00:54:06.880 align:start position:0%
index so
 

00:54:06.880 --> 00:54:08.829 align:start position:0%
index so
numbers<00:54:07.760><c> of</c>

00:54:08.829 --> 00:54:08.839 align:start position:0%
numbers of
 

00:54:08.839 --> 00:54:13.270 align:start position:0%
numbers of
i<00:54:10.079><c> now</c><00:54:10.640><c> we</c><00:54:10.800><c> need</c><00:54:10.880><c> to</c><00:54:11.119><c> increment</c><00:54:11.680><c> i</c><00:54:11.839><c> by</c><00:54:12.160><c> one</c><00:54:12.720><c> so</c><00:54:13.040><c> i</c>

00:54:13.270 --> 00:54:13.280 align:start position:0%
i now we need to increment i by one so i
 

00:54:13.280 --> 00:54:15.510 align:start position:0%
i now we need to increment i by one so i
equals<00:54:13.920><c> i</c><00:54:14.400><c> plus</c><00:54:14.720><c> one</c>

00:54:15.510 --> 00:54:15.520 align:start position:0%
equals i plus one
 

00:54:15.520 --> 00:54:16.870 align:start position:0%
equals i plus one
let's<00:54:15.760><c> run</c><00:54:15.920><c> the</c><00:54:16.079><c> program</c><00:54:16.400><c> and</c><00:54:16.480><c> see</c><00:54:16.640><c> what</c><00:54:16.720><c> we</c>

00:54:16.870 --> 00:54:16.880 align:start position:0%
let's run the program and see what we
 

00:54:16.880 --> 00:54:19.349 align:start position:0%
let's run the program and see what we
get

00:54:19.349 --> 00:54:19.359 align:start position:0%
 
 

00:54:19.359 --> 00:54:21.750 align:start position:0%
 
so<00:54:19.599><c> we</c><00:54:19.680><c> get</c><00:54:19.839><c> the</c><00:54:20.000><c> numbers</c><00:54:20.480><c> one</c><00:54:20.640><c> to</c><00:54:20.880><c> five</c><00:54:21.520><c> these</c>

00:54:21.750 --> 00:54:21.760 align:start position:0%
so we get the numbers one to five these
 

00:54:21.760 --> 00:54:23.750 align:start position:0%
so we get the numbers one to five these
are<00:54:21.839><c> coming</c><00:54:22.160><c> out</c><00:54:22.240><c> from</c><00:54:22.480><c> our</c><00:54:22.640><c> for</c><00:54:22.880><c> loop</c><00:54:23.680><c> and</c>

00:54:23.750 --> 00:54:23.760 align:start position:0%
are coming out from our for loop and
 

00:54:23.760 --> 00:54:25.589 align:start position:0%
are coming out from our for loop and
then<00:54:23.920><c> we</c><00:54:24.079><c> get</c><00:54:24.480><c> the</c><00:54:24.559><c> numbers</c><00:54:24.880><c> one</c><00:54:25.040><c> to</c><00:54:25.200><c> five</c><00:54:25.440><c> one</c>

00:54:25.589 --> 00:54:25.599 align:start position:0%
then we get the numbers one to five one
 

00:54:25.599 --> 00:54:27.430 align:start position:0%
then we get the numbers one to five one
more<00:54:25.760><c> time</c><00:54:26.240><c> these</c><00:54:26.480><c> are</c><00:54:26.559><c> coming</c><00:54:26.880><c> out</c><00:54:27.040><c> from</c><00:54:27.200><c> our</c>

00:54:27.430 --> 00:54:27.440 align:start position:0%
more time these are coming out from our
 

00:54:27.440 --> 00:54:29.430 align:start position:0%
more time these are coming out from our
while<00:54:27.680><c> loop</c><00:54:28.240><c> now</c><00:54:28.480><c> if</c><00:54:28.559><c> you</c><00:54:28.640><c> compare</c><00:54:29.040><c> these</c><00:54:29.200><c> two</c>

00:54:29.430 --> 00:54:29.440 align:start position:0%
while loop now if you compare these two
 

00:54:29.440 --> 00:54:31.589 align:start position:0%
while loop now if you compare these two
approaches<00:54:30.240><c> you</c><00:54:30.400><c> can</c><00:54:30.559><c> definitely</c><00:54:31.040><c> see</c><00:54:31.440><c> that</c>

00:54:31.589 --> 00:54:31.599 align:start position:0%
approaches you can definitely see that
 

00:54:31.599 --> 00:54:33.670 align:start position:0%
approaches you can definitely see that
the<00:54:31.760><c> implementation</c><00:54:32.400><c> using</c><00:54:32.640><c> the</c><00:54:32.880><c> for</c><00:54:33.040><c> loop</c><00:54:33.520><c> is</c>

00:54:33.670 --> 00:54:33.680 align:start position:0%
the implementation using the for loop is
 

00:54:33.680 --> 00:54:35.829 align:start position:0%
the implementation using the for loop is
shorter<00:54:34.160><c> and</c><00:54:34.400><c> easier</c><00:54:34.800><c> to</c><00:54:34.960><c> understand</c><00:54:35.680><c> we</c>

00:54:35.829 --> 00:54:35.839 align:start position:0%
shorter and easier to understand we
 

00:54:35.839 --> 00:54:37.510 align:start position:0%
shorter and easier to understand we
don't<00:54:36.000><c> have</c><00:54:36.160><c> to</c><00:54:36.319><c> use</c><00:54:36.720><c> the</c><00:54:36.880><c> square</c><00:54:37.200><c> bracket</c>

00:54:37.510 --> 00:54:37.520 align:start position:0%
don't have to use the square bracket
 

00:54:37.520 --> 00:54:39.670 align:start position:0%
don't have to use the square bracket
notation<00:54:38.240><c> we</c><00:54:38.319><c> don't</c><00:54:38.559><c> have</c><00:54:38.640><c> to</c><00:54:38.799><c> call</c><00:54:39.280><c> the</c><00:54:39.440><c> len</c>

00:54:39.670 --> 00:54:39.680 align:start position:0%
notation we don't have to call the len
 

00:54:39.680 --> 00:54:41.589 align:start position:0%
notation we don't have to call the len
function<00:54:40.319><c> we</c><00:54:40.480><c> don't</c><00:54:40.720><c> have</c><00:54:40.799><c> to</c><00:54:40.960><c> declare</c><00:54:41.440><c> a</c>

00:54:41.589 --> 00:54:41.599 align:start position:0%
function we don't have to declare a
 

00:54:41.599 --> 00:54:43.670 align:start position:0%
function we don't have to declare a
variable<00:54:42.240><c> a</c><00:54:42.319><c> loop</c><00:54:42.559><c> variable</c><00:54:43.040><c> and</c><00:54:43.119><c> then</c>

00:54:43.670 --> 00:54:43.680 align:start position:0%
variable a loop variable and then
 

00:54:43.680 --> 00:54:45.750 align:start position:0%
variable a loop variable and then
increment<00:54:44.240><c> it</c><00:54:44.480><c> explicitly</c>

00:54:45.750 --> 00:54:45.760 align:start position:0%
increment it explicitly
 

00:54:45.760 --> 00:54:48.390 align:start position:0%
increment it explicitly
so<00:54:46.079><c> with</c><00:54:46.240><c> the</c><00:54:46.400><c> for</c><00:54:46.640><c> loop</c><00:54:47.200><c> in</c><00:54:47.440><c> each</c><00:54:47.680><c> iteration</c>

00:54:48.390 --> 00:54:48.400 align:start position:0%
so with the for loop in each iteration
 

00:54:48.400 --> 00:54:50.069 align:start position:0%
so with the for loop in each iteration
the<00:54:48.640><c> item</c><00:54:48.960><c> variable</c><00:54:49.280><c> will</c><00:54:49.520><c> automatically</c>

00:54:50.069 --> 00:54:50.079 align:start position:0%
the item variable will automatically
 

00:54:50.079 --> 00:54:58.789 align:start position:0%
the item variable will automatically
hold<00:54:50.640><c> one</c><00:54:50.960><c> value</c><00:54:51.599><c> in</c><00:54:51.680><c> this</c><00:54:52.000><c> list</c>

00:54:58.789 --> 00:54:58.799 align:start position:0%
 
 

00:54:58.799 --> 00:55:00.150 align:start position:0%
 
in<00:54:58.960><c> this</c><00:54:59.119><c> tutorial</c><00:54:59.599><c> we're</c><00:54:59.680><c> going</c><00:54:59.839><c> to</c><00:54:59.920><c> talk</c>

00:55:00.150 --> 00:55:00.160 align:start position:0%
in this tutorial we're going to talk
 

00:55:00.160 --> 00:55:02.549 align:start position:0%
in this tutorial we're going to talk
about<00:55:00.319><c> the</c><00:55:00.480><c> range</c><00:55:00.799><c> function</c><00:55:01.280><c> in</c><00:55:01.520><c> python</c><00:55:02.400><c> we</c>

00:55:02.549 --> 00:55:02.559 align:start position:0%
about the range function in python we
 

00:55:02.559 --> 00:55:04.710 align:start position:0%
about the range function in python we
use<00:55:02.720><c> the</c><00:55:02.880><c> range</c><00:55:03.200><c> function</c><00:55:03.760><c> to</c><00:55:04.000><c> generate</c><00:55:04.559><c> a</c>

00:55:04.710 --> 00:55:04.720 align:start position:0%
use the range function to generate a
 

00:55:04.720 --> 00:55:07.109 align:start position:0%
use the range function to generate a
sequence<00:55:05.119><c> of</c><00:55:05.280><c> numbers</c><00:55:05.680><c> let</c><00:55:05.839><c> me</c><00:55:06.000><c> show</c><00:55:06.160><c> you</c><00:55:06.720><c> so</c>

00:55:07.109 --> 00:55:07.119 align:start position:0%
sequence of numbers let me show you so
 

00:55:07.119 --> 00:55:08.710 align:start position:0%
sequence of numbers let me show you so
you<00:55:07.280><c> type</c><00:55:07.599><c> range</c>

00:55:08.710 --> 00:55:08.720 align:start position:0%
you type range
 

00:55:08.720 --> 00:55:10.470 align:start position:0%
you type range
this<00:55:08.960><c> is</c><00:55:09.040><c> a</c><00:55:09.200><c> built-in</c><00:55:09.520><c> function</c><00:55:10.160><c> just</c><00:55:10.319><c> like</c>

00:55:10.470 --> 00:55:10.480 align:start position:0%
this is a built-in function just like
 

00:55:10.480 --> 00:55:12.710 align:start position:0%
this is a built-in function just like
the<00:55:10.640><c> print</c><00:55:10.960><c> and</c><00:55:11.200><c> input</c><00:55:11.520><c> functions</c><00:55:12.400><c> here</c><00:55:12.559><c> we</c>

00:55:12.710 --> 00:55:12.720 align:start position:0%
the print and input functions here we
 

00:55:12.720 --> 00:55:15.030 align:start position:0%
the print and input functions here we
can<00:55:12.880><c> pass</c><00:55:13.119><c> a</c><00:55:13.200><c> value</c><00:55:13.520><c> like</c><00:55:13.760><c> 5</c><00:55:14.480><c> and</c><00:55:14.640><c> this</c><00:55:14.799><c> will</c>

00:55:15.030 --> 00:55:15.040 align:start position:0%
can pass a value like 5 and this will
 

00:55:15.040 --> 00:55:17.349 align:start position:0%
can pass a value like 5 and this will
return<00:55:15.680><c> a</c><00:55:15.920><c> range</c><00:55:16.319><c> object</c>

00:55:17.349 --> 00:55:17.359 align:start position:0%
return a range object
 

00:55:17.359 --> 00:55:19.349 align:start position:0%
return a range object
a<00:55:17.520><c> range</c><00:55:17.920><c> object</c><00:55:18.400><c> is</c><00:55:18.559><c> an</c><00:55:18.720><c> object</c><00:55:19.040><c> that</c><00:55:19.119><c> can</c>

00:55:19.349 --> 00:55:19.359 align:start position:0%
a range object is an object that can
 

00:55:19.359 --> 00:55:21.589 align:start position:0%
a range object is an object that can
store<00:55:19.839><c> a</c><00:55:20.000><c> sequence</c><00:55:20.480><c> of</c><00:55:20.640><c> numbers</c><00:55:21.119><c> let</c><00:55:21.280><c> me</c><00:55:21.440><c> show</c>

00:55:21.589 --> 00:55:21.599 align:start position:0%
store a sequence of numbers let me show
 

00:55:21.599 --> 00:55:23.109 align:start position:0%
store a sequence of numbers let me show
you<00:55:22.160><c> so</c>

00:55:23.109 --> 00:55:23.119 align:start position:0%
you so
 

00:55:23.119 --> 00:55:25.109 align:start position:0%
you so
let's<00:55:23.359><c> call</c><00:55:23.599><c> that</c><00:55:24.160><c> numbers</c>

00:55:25.109 --> 00:55:25.119 align:start position:0%
let's call that numbers
 

00:55:25.119 --> 00:55:27.030 align:start position:0%
let's call that numbers
so<00:55:25.280><c> this</c><00:55:25.440><c> is</c><00:55:25.599><c> a</c><00:55:25.760><c> range</c><00:55:26.160><c> object</c>

00:55:27.030 --> 00:55:27.040 align:start position:0%
so this is a range object
 

00:55:27.040 --> 00:55:28.390 align:start position:0%
so this is a range object
in<00:55:27.200><c> this</c><00:55:27.440><c> object</c><00:55:27.760><c> we're</c><00:55:27.920><c> going</c><00:55:28.000><c> to</c><00:55:28.079><c> have</c><00:55:28.319><c> the</c>

00:55:28.390 --> 00:55:28.400 align:start position:0%
in this object we're going to have the
 

00:55:28.400 --> 00:55:32.309 align:start position:0%
in this object we're going to have the
numbers<00:55:29.119><c> 0</c><00:55:29.440><c> to</c><00:55:29.599><c> 5</c><00:55:30.160><c> but</c><00:55:30.559><c> excluding</c><00:55:31.200><c> 5.</c>

00:55:32.309 --> 00:55:32.319 align:start position:0%
numbers 0 to 5 but excluding 5.
 

00:55:32.319 --> 00:55:34.870 align:start position:0%
numbers 0 to 5 but excluding 5.
now<00:55:33.040><c> if</c><00:55:33.119><c> we</c><00:55:33.359><c> print</c>

00:55:34.870 --> 00:55:34.880 align:start position:0%
now if we print
 

00:55:34.880 --> 00:55:37.349 align:start position:0%
now if we print
numbers

00:55:37.349 --> 00:55:37.359 align:start position:0%
numbers
 

00:55:37.359 --> 00:55:39.430 align:start position:0%
numbers
we're<00:55:37.520><c> going</c><00:55:37.680><c> to</c><00:55:37.760><c> see</c><00:55:37.920><c> this</c><00:55:38.079><c> message</c><00:55:38.799><c> range</c><00:55:39.280><c> of</c>

00:55:39.430 --> 00:55:39.440 align:start position:0%
we're going to see this message range of
 

00:55:39.440 --> 00:55:41.670 align:start position:0%
we're going to see this message range of
zero<00:55:39.680><c> to</c><00:55:39.839><c> five</c><00:55:40.160><c> not</c><00:55:40.319><c> the</c><00:55:40.480><c> actual</c><00:55:40.880><c> numbers</c>

00:55:41.670 --> 00:55:41.680 align:start position:0%
zero to five not the actual numbers
 

00:55:41.680 --> 00:55:42.789 align:start position:0%
zero to five not the actual numbers
because<00:55:42.000><c> this</c><00:55:42.160><c> is</c><00:55:42.240><c> the</c><00:55:42.400><c> default</c>

00:55:42.789 --> 00:55:42.799 align:start position:0%
because this is the default
 

00:55:42.799 --> 00:55:45.510 align:start position:0%
because this is the default
representation<00:55:43.680><c> of</c><00:55:43.839><c> a</c><00:55:43.920><c> range</c><00:55:44.319><c> object</c><00:55:45.200><c> to</c><00:55:45.359><c> see</c>

00:55:45.510 --> 00:55:45.520 align:start position:0%
representation of a range object to see
 

00:55:45.520 --> 00:55:47.109 align:start position:0%
representation of a range object to see
the<00:55:45.599><c> actual</c><00:55:45.920><c> numbers</c><00:55:46.240><c> we</c><00:55:46.400><c> need</c><00:55:46.480><c> to</c><00:55:46.720><c> iterate</c>

00:55:47.109 --> 00:55:47.119 align:start position:0%
the actual numbers we need to iterate
 

00:55:47.119 --> 00:55:49.910 align:start position:0%
the actual numbers we need to iterate
over<00:55:47.440><c> this</c><00:55:47.599><c> range</c><00:55:48.000><c> object</c><00:55:48.480><c> using</c><00:55:48.799><c> a</c><00:55:48.960><c> for</c><00:55:49.280><c> loop</c>

00:55:49.910 --> 00:55:49.920 align:start position:0%
over this range object using a for loop
 

00:55:49.920 --> 00:55:51.589 align:start position:0%
over this range object using a for loop
in<00:55:50.079><c> the</c><00:55:50.160><c> last</c><00:55:50.400><c> video</c><00:55:50.720><c> you</c><00:55:50.880><c> learned</c><00:55:51.200><c> how</c><00:55:51.359><c> to</c>

00:55:51.589 --> 00:55:51.599 align:start position:0%
in the last video you learned how to
 

00:55:51.599 --> 00:55:53.910 align:start position:0%
in the last video you learned how to
iterate<00:55:52.000><c> over</c><00:55:52.240><c> a</c><00:55:52.319><c> list</c><00:55:52.559><c> using</c><00:55:52.880><c> a</c><00:55:52.960><c> for</c><00:55:53.200><c> loop</c><00:55:53.680><c> but</c>

00:55:53.910 --> 00:55:53.920 align:start position:0%
iterate over a list using a for loop but
 

00:55:53.920 --> 00:55:56.150 align:start position:0%
iterate over a list using a for loop but
we<00:55:54.000><c> can</c><00:55:54.160><c> also</c><00:55:54.480><c> iterate</c><00:55:54.880><c> over</c><00:55:55.119><c> a</c><00:55:55.280><c> range</c><00:55:55.680><c> object</c>

00:55:56.150 --> 00:55:56.160 align:start position:0%
we can also iterate over a range object
 

00:55:56.160 --> 00:55:58.069 align:start position:0%
we can also iterate over a range object
using<00:55:56.480><c> a</c><00:55:56.640><c> for</c><00:55:56.880><c> loop</c><00:55:57.280><c> basically</c><00:55:57.680><c> we</c><00:55:57.839><c> can</c><00:55:57.920><c> use</c>

00:55:58.069 --> 00:55:58.079 align:start position:0%
using a for loop basically we can use
 

00:55:58.079 --> 00:56:00.150 align:start position:0%
using a for loop basically we can use
the<00:55:58.240><c> for</c><00:55:58.480><c> loop</c><00:55:58.960><c> with</c><00:55:59.280><c> any</c><00:55:59.520><c> object</c><00:55:59.920><c> that</c>

00:56:00.150 --> 00:56:00.160 align:start position:0%
the for loop with any object that
 

00:56:00.160 --> 00:56:02.870 align:start position:0%
the for loop with any object that
represents<00:56:00.880><c> a</c><00:56:01.040><c> sequence</c><00:56:01.520><c> of</c><00:56:01.680><c> objects</c>

00:56:02.870 --> 00:56:02.880 align:start position:0%
represents a sequence of objects
 

00:56:02.880 --> 00:56:05.349 align:start position:0%
represents a sequence of objects
so<00:56:03.280><c> instead</c><00:56:03.599><c> of</c><00:56:03.680><c> printing</c><00:56:04.160><c> numbers</c>

00:56:05.349 --> 00:56:05.359 align:start position:0%
so instead of printing numbers
 

00:56:05.359 --> 00:56:07.030 align:start position:0%
so instead of printing numbers
we're<00:56:05.520><c> going</c><00:56:05.599><c> to</c><00:56:05.680><c> use</c><00:56:05.839><c> a</c><00:56:05.920><c> for</c><00:56:06.160><c> loop</c>

00:56:07.030 --> 00:56:07.040 align:start position:0%
we're going to use a for loop
 

00:56:07.040 --> 00:56:08.710 align:start position:0%
we're going to use a for loop
for<00:56:07.280><c> number</c>

00:56:08.710 --> 00:56:08.720 align:start position:0%
for number
 

00:56:08.720 --> 00:56:11.589 align:start position:0%
for number
in<00:56:09.440><c> numbers</c><00:56:10.400><c> colon</c>

00:56:11.589 --> 00:56:11.599 align:start position:0%
in numbers colon
 

00:56:11.599 --> 00:56:13.190 align:start position:0%
in numbers colon
we're<00:56:11.760><c> going</c><00:56:11.920><c> to</c><00:56:12.079><c> print</c>

00:56:13.190 --> 00:56:13.200 align:start position:0%
we're going to print
 

00:56:13.200 --> 00:56:15.030 align:start position:0%
we're going to print
number

00:56:15.030 --> 00:56:15.040 align:start position:0%
number
 

00:56:15.040 --> 00:56:17.030 align:start position:0%
number
take<00:56:15.280><c> a</c><00:56:15.359><c> look</c>

00:56:17.030 --> 00:56:17.040 align:start position:0%
take a look
 

00:56:17.040 --> 00:56:19.990 align:start position:0%
take a look
now<00:56:17.200><c> we</c><00:56:17.280><c> see</c><00:56:17.440><c> the</c><00:56:17.599><c> numbers</c><00:56:18.319><c> zero</c><00:56:18.960><c> to</c><00:56:19.200><c> four</c>

00:56:19.990 --> 00:56:20.000 align:start position:0%
now we see the numbers zero to four
 

00:56:20.000 --> 00:56:21.510 align:start position:0%
now we see the numbers zero to four
so

00:56:21.510 --> 00:56:21.520 align:start position:0%
so
 

00:56:21.520 --> 00:56:22.870 align:start position:0%
so
range<00:56:21.839><c> of</c><00:56:22.000><c> five</c>

00:56:22.870 --> 00:56:22.880 align:start position:0%
range of five
 

00:56:22.880 --> 00:56:24.870 align:start position:0%
range of five
generates<00:56:23.359><c> a</c><00:56:23.440><c> sequence</c><00:56:23.839><c> of</c><00:56:23.920><c> numbers</c><00:56:24.480><c> starting</c>

00:56:24.870 --> 00:56:24.880 align:start position:0%
generates a sequence of numbers starting
 

00:56:24.880 --> 00:56:27.430 align:start position:0%
generates a sequence of numbers starting
from<00:56:25.119><c> zero</c><00:56:25.760><c> up</c><00:56:25.920><c> to</c><00:56:26.079><c> the</c><00:56:26.160><c> number</c><00:56:26.720><c> we</c><00:56:26.880><c> specify</c>

00:56:27.430 --> 00:56:27.440 align:start position:0%
from zero up to the number we specify
 

00:56:27.440 --> 00:56:28.230 align:start position:0%
from zero up to the number we specify
here

00:56:28.230 --> 00:56:28.240 align:start position:0%
here
 

00:56:28.240 --> 00:56:30.789 align:start position:0%
here
now<00:56:28.400><c> if</c><00:56:28.559><c> we</c><00:56:28.640><c> supply</c><00:56:29.440><c> two</c><00:56:29.680><c> values</c>

00:56:30.789 --> 00:56:30.799 align:start position:0%
now if we supply two values
 

00:56:30.799 --> 00:56:31.910 align:start position:0%
now if we supply two values
the<00:56:30.960><c> first</c><00:56:31.280><c> value</c><00:56:31.599><c> is</c><00:56:31.680><c> going</c><00:56:31.760><c> to</c><00:56:31.839><c> be</c>

00:56:31.910 --> 00:56:31.920 align:start position:0%
the first value is going to be
 

00:56:31.920 --> 00:56:34.309 align:start position:0%
the first value is going to be
considered<00:56:32.640><c> the</c><00:56:32.799><c> starting</c><00:56:33.280><c> value</c>

00:56:34.309 --> 00:56:34.319 align:start position:0%
considered the starting value
 

00:56:34.319 --> 00:56:35.990 align:start position:0%
considered the starting value
and<00:56:34.799><c> the</c><00:56:34.960><c> second</c><00:56:35.280><c> value</c><00:56:35.599><c> is</c><00:56:35.760><c> going</c><00:56:35.839><c> to</c><00:56:35.920><c> be</c>

00:56:35.990 --> 00:56:36.000 align:start position:0%
and the second value is going to be
 

00:56:36.000 --> 00:56:37.829 align:start position:0%
and the second value is going to be
considered<00:56:36.559><c> the</c><00:56:36.799><c> ending</c><00:56:37.200><c> value</c><00:56:37.599><c> and</c><00:56:37.760><c> it's</c>

00:56:37.829 --> 00:56:37.839 align:start position:0%
considered the ending value and it's
 

00:56:37.839 --> 00:56:40.789 align:start position:0%
considered the ending value and it's
going<00:56:37.920><c> to</c><00:56:38.000><c> be</c><00:56:38.079><c> excluded</c><00:56:39.040><c> so</c><00:56:39.359><c> range</c><00:56:39.599><c> of</c><00:56:39.760><c> 5</c><00:56:40.000><c> to</c><00:56:40.160><c> 10</c>

00:56:40.789 --> 00:56:40.799 align:start position:0%
going to be excluded so range of 5 to 10
 

00:56:40.799 --> 00:56:43.109 align:start position:0%
going to be excluded so range of 5 to 10
is<00:56:40.960><c> going</c><00:56:41.040><c> to</c><00:56:41.200><c> generate</c><00:56:41.520><c> the</c><00:56:41.680><c> numbers</c><00:56:42.319><c> 5</c><00:56:42.640><c> to</c><00:56:42.799><c> 9.</c>

00:56:43.109 --> 00:56:43.119 align:start position:0%
is going to generate the numbers 5 to 9.
 

00:56:43.119 --> 00:56:45.190 align:start position:0%
is going to generate the numbers 5 to 9.
take<00:56:43.359><c> a</c><00:56:43.440><c> look</c>

00:56:45.190 --> 00:56:45.200 align:start position:0%
take a look
 

00:56:45.200 --> 00:56:46.710 align:start position:0%
take a look
there<00:56:45.440><c> you</c><00:56:45.520><c> go</c>

00:56:46.710 --> 00:56:46.720 align:start position:0%
there you go
 

00:56:46.720 --> 00:56:49.349 align:start position:0%
there you go
now<00:56:46.880><c> we</c><00:56:47.040><c> can</c><00:56:47.200><c> also</c><00:56:47.440><c> supply</c><00:56:48.079><c> a</c><00:56:48.319><c> third</c><00:56:48.640><c> value</c><00:56:49.200><c> and</c>

00:56:49.349 --> 00:56:49.359 align:start position:0%
now we can also supply a third value and
 

00:56:49.359 --> 00:56:52.230 align:start position:0%
now we can also supply a third value and
that<00:56:49.520><c> will</c><00:56:49.680><c> be</c><00:56:49.760><c> used</c><00:56:50.160><c> as</c><00:56:50.400><c> a</c><00:56:50.559><c> step</c><00:56:51.280><c> so</c><00:56:51.520><c> let's</c><00:56:51.680><c> say</c>

00:56:52.230 --> 00:56:52.240 align:start position:0%
that will be used as a step so let's say
 

00:56:52.240 --> 00:56:53.829 align:start position:0%
that will be used as a step so let's say
instead<00:56:52.559><c> of</c><00:56:52.640><c> having</c><00:56:52.880><c> a</c><00:56:53.040><c> sequence</c><00:56:53.440><c> of</c><00:56:53.520><c> numbers</c>

00:56:53.829 --> 00:56:53.839 align:start position:0%
instead of having a sequence of numbers
 

00:56:53.839 --> 00:56:56.150 align:start position:0%
instead of having a sequence of numbers
like<00:56:54.160><c> five</c><00:56:54.480><c> six</c><00:56:54.720><c> seven</c><00:56:55.040><c> eight</c><00:56:55.280><c> nine</c><00:56:55.680><c> we</c><00:56:55.920><c> wanna</c>

00:56:56.150 --> 00:56:56.160 align:start position:0%
like five six seven eight nine we wanna
 

00:56:56.160 --> 00:56:59.589 align:start position:0%
like five six seven eight nine we wanna
jump<00:56:56.640><c> two</c><00:56:56.880><c> numbers</c><00:56:57.280><c> at</c><00:56:57.440><c> a</c><00:56:57.520><c> time</c><00:56:58.000><c> so</c><00:56:58.319><c> 5</c><00:56:58.799><c> 7</c><00:56:59.200><c> 9</c><00:56:59.440><c> and</c>

00:56:59.589 --> 00:56:59.599 align:start position:0%
jump two numbers at a time so 5 7 9 and
 

00:56:59.599 --> 00:57:03.349 align:start position:0%
jump two numbers at a time so 5 7 9 and
so<00:56:59.760><c> on</c><00:57:00.400><c> so</c><00:57:00.640><c> here</c><00:57:00.799><c> we</c><00:57:01.040><c> pass</c><00:57:01.839><c> 2</c><00:57:02.160><c> as</c><00:57:02.319><c> the</c><00:57:02.480><c> step</c><00:57:03.119><c> take</c>

00:57:03.349 --> 00:57:03.359 align:start position:0%
so on so here we pass 2 as the step take
 

00:57:03.359 --> 00:57:05.030 align:start position:0%
so on so here we pass 2 as the step take
a<00:57:03.440><c> look</c>

00:57:05.030 --> 00:57:05.040 align:start position:0%
a look
 

00:57:05.040 --> 00:57:10.069 align:start position:0%
a look
so<00:57:05.200><c> we</c><00:57:05.359><c> get</c><00:57:05.920><c> these</c><00:57:06.240><c> odd</c><00:57:06.480><c> numbers</c><00:57:07.280><c> 5</c><00:57:07.760><c> 7</c><00:57:08.319><c> and</c><00:57:08.480><c> 9.</c>

00:57:10.069 --> 00:57:10.079 align:start position:0%
so we get these odd numbers 5 7 and 9.
 

00:57:10.079 --> 00:57:12.069 align:start position:0%
so we get these odd numbers 5 7 and 9.
so<00:57:10.240><c> this</c><00:57:10.400><c> is</c><00:57:10.480><c> the</c><00:57:10.640><c> range</c><00:57:10.880><c> function</c><00:57:11.280><c> in</c><00:57:11.440><c> python</c>

00:57:12.069 --> 00:57:12.079 align:start position:0%
so this is the range function in python
 

00:57:12.079 --> 00:57:13.829 align:start position:0%
so this is the range function in python
like<00:57:12.319><c> quite</c><00:57:12.640><c> often</c><00:57:13.119><c> you</c><00:57:13.280><c> see</c><00:57:13.440><c> the</c><00:57:13.599><c> range</c>

00:57:13.829 --> 00:57:13.839 align:start position:0%
like quite often you see the range
 

00:57:13.839 --> 00:57:16.309 align:start position:0%
like quite often you see the range
function<00:57:14.240><c> used</c><00:57:14.720><c> as</c><00:57:14.960><c> part</c><00:57:15.200><c> of</c><00:57:15.280><c> a</c><00:57:15.440><c> for</c><00:57:15.680><c> loop</c>

00:57:16.309 --> 00:57:16.319 align:start position:0%
function used as part of a for loop
 

00:57:16.319 --> 00:57:17.589 align:start position:0%
function used as part of a for loop
because<00:57:16.559><c> we</c><00:57:16.720><c> don't</c><00:57:16.799><c> really</c><00:57:17.040><c> need</c><00:57:17.119><c> to</c><00:57:17.280><c> store</c>

00:57:17.589 --> 00:57:17.599 align:start position:0%
because we don't really need to store
 

00:57:17.599 --> 00:57:20.150 align:start position:0%
because we don't really need to store
the<00:57:17.680><c> result</c><00:57:18.319><c> in</c><00:57:18.480><c> a</c><00:57:18.559><c> separate</c><00:57:18.960><c> variable</c><00:57:19.760><c> we</c><00:57:19.920><c> can</c>

00:57:20.150 --> 00:57:20.160 align:start position:0%
the result in a separate variable we can
 

00:57:20.160 --> 00:57:22.710 align:start position:0%
the result in a separate variable we can
call<00:57:20.400><c> the</c><00:57:20.559><c> range</c><00:57:20.799><c> function</c><00:57:21.599><c> right</c><00:57:21.839><c> here</c><00:57:22.480><c> where</c>

00:57:22.710 --> 00:57:22.720 align:start position:0%
call the range function right here where
 

00:57:22.720 --> 00:57:24.789 align:start position:0%
call the range function right here where
we<00:57:22.880><c> are</c><00:57:22.960><c> using</c><00:57:23.200><c> the</c><00:57:23.280><c> numbers</c><00:57:23.680><c> variable</c><00:57:24.480><c> so</c><00:57:24.720><c> we</c>

00:57:24.789 --> 00:57:24.799 align:start position:0%
we are using the numbers variable so we
 

00:57:24.799 --> 00:57:27.670 align:start position:0%
we are using the numbers variable so we
can<00:57:24.960><c> type</c><00:57:25.599><c> range</c><00:57:26.240><c> of</c><00:57:26.480><c> five</c><00:57:27.200><c> and</c><00:57:27.359><c> this</c><00:57:27.520><c> will</c>

00:57:27.670 --> 00:57:27.680 align:start position:0%
can type range of five and this will
 

00:57:27.680 --> 00:57:29.750 align:start position:0%
can type range of five and this will
return<00:57:28.160><c> a</c><00:57:28.319><c> range</c><00:57:28.720><c> object</c><00:57:29.280><c> holding</c><00:57:29.680><c> the</c>

00:57:29.750 --> 00:57:29.760 align:start position:0%
return a range object holding the
 

00:57:29.760 --> 00:57:32.789 align:start position:0%
return a range object holding the
numbers<00:57:30.160><c> zero</c><00:57:30.480><c> to</c><00:57:30.640><c> four</c><00:57:30.960><c> take</c><00:57:31.200><c> a</c><00:57:31.280><c> look</c>

00:57:32.789 --> 00:57:32.799 align:start position:0%
numbers zero to four take a look
 

00:57:32.799 --> 00:57:33.910 align:start position:0%
numbers zero to four take a look
there<00:57:33.040><c> you</c><00:57:33.200><c> go</c>

00:57:33.910 --> 00:57:33.920 align:start position:0%
there you go
 

00:57:33.920 --> 00:57:35.430 align:start position:0%
there you go
so<00:57:34.319><c> we</c><00:57:34.480><c> don't</c><00:57:34.640><c> really</c><00:57:34.799><c> need</c><00:57:34.960><c> to</c><00:57:35.119><c> store</c><00:57:35.280><c> the</c>

00:57:35.430 --> 00:57:35.440 align:start position:0%
so we don't really need to store the
 

00:57:35.440 --> 00:57:37.190 align:start position:0%
so we don't really need to store the
result<00:57:35.920><c> in</c><00:57:36.079><c> a</c><00:57:36.240><c> separate</c><00:57:36.640><c> variable</c><00:57:37.040><c> like</c>

00:57:37.190 --> 00:57:37.200 align:start position:0%
result in a separate variable like
 

00:57:37.200 --> 00:57:39.510 align:start position:0%
result in a separate variable like
numbers

00:57:39.510 --> 00:57:39.520 align:start position:0%
numbers
 

00:57:39.520 --> 00:57:47.430 align:start position:0%
numbers
there<00:57:39.760><c> you</c><00:57:39.920><c> go</c>

00:57:47.430 --> 00:57:47.440 align:start position:0%
 
 

00:57:47.440 --> 00:57:48.710 align:start position:0%
 
in<00:57:47.520><c> this</c><00:57:47.680><c> tutorial</c><00:57:48.160><c> we're</c><00:57:48.319><c> going</c><00:57:48.400><c> to</c><00:57:48.480><c> talk</c>

00:57:48.710 --> 00:57:48.720 align:start position:0%
in this tutorial we're going to talk
 

00:57:48.720 --> 00:57:51.190 align:start position:0%
in this tutorial we're going to talk
about<00:57:48.960><c> tuples</c><00:57:49.440><c> in</c><00:57:49.680><c> python</c><00:57:50.559><c> tuples</c><00:57:50.960><c> are</c><00:57:51.040><c> kind</c>

00:57:51.190 --> 00:57:51.200 align:start position:0%
about tuples in python tuples are kind
 

00:57:51.200 --> 00:57:53.190 align:start position:0%
about tuples in python tuples are kind
of<00:57:51.280><c> like</c><00:57:51.520><c> lists</c><00:57:52.160><c> we</c><00:57:52.240><c> use</c><00:57:52.480><c> them</c><00:57:52.640><c> to</c><00:57:52.799><c> store</c><00:57:53.119><c> a</c>

00:57:53.190 --> 00:57:53.200 align:start position:0%
of like lists we use them to store a
 

00:57:53.200 --> 00:57:55.510 align:start position:0%
of like lists we use them to store a
sequence<00:57:53.599><c> of</c><00:57:53.839><c> objects</c><00:57:54.640><c> but</c><00:57:54.880><c> tuples</c><00:57:55.280><c> are</c>

00:57:55.510 --> 00:57:55.520 align:start position:0%
sequence of objects but tuples are
 

00:57:55.520 --> 00:57:57.670 align:start position:0%
sequence of objects but tuples are
immutable<00:57:56.240><c> which</c><00:57:56.480><c> means</c><00:57:56.799><c> we</c><00:57:56.960><c> cannot</c><00:57:57.359><c> change</c>

00:57:57.670 --> 00:57:57.680 align:start position:0%
immutable which means we cannot change
 

00:57:57.680 --> 00:58:00.150 align:start position:0%
immutable which means we cannot change
them<00:57:58.000><c> once</c><00:57:58.240><c> we</c><00:57:58.400><c> create</c><00:57:58.720><c> them</c><00:57:59.040><c> let</c><00:57:59.200><c> me</c><00:57:59.359><c> show</c><00:57:59.520><c> you</c>

00:58:00.150 --> 00:58:00.160 align:start position:0%
them once we create them let me show you
 

00:58:00.160 --> 00:58:02.309 align:start position:0%
them once we create them let me show you
so<00:58:00.319><c> i'm</c><00:58:00.400><c> going</c><00:58:00.559><c> to</c><00:58:00.640><c> start</c><00:58:01.440><c> by</c><00:58:01.680><c> defining</c><00:58:02.000><c> a</c><00:58:02.079><c> list</c>

00:58:02.309 --> 00:58:02.319 align:start position:0%
so i'm going to start by defining a list
 

00:58:02.319 --> 00:58:04.789 align:start position:0%
so i'm going to start by defining a list
of<00:58:02.400><c> numbers</c><00:58:03.280><c> 1</c><00:58:03.440><c> 2</c><00:58:03.680><c> 3.</c>

00:58:04.789 --> 00:58:04.799 align:start position:0%
of numbers 1 2 3.
 

00:58:04.799 --> 00:58:06.630 align:start position:0%
of numbers 1 2 3.
now<00:58:04.960><c> we</c><00:58:05.040><c> use</c><00:58:05.280><c> square</c><00:58:05.520><c> brackets</c><00:58:06.079><c> to</c><00:58:06.160><c> define</c><00:58:06.559><c> a</c>

00:58:06.630 --> 00:58:06.640 align:start position:0%
now we use square brackets to define a
 

00:58:06.640 --> 00:58:07.589 align:start position:0%
now we use square brackets to define a
list

00:58:07.589 --> 00:58:07.599 align:start position:0%
list
 

00:58:07.599 --> 00:58:10.630 align:start position:0%
list
and<00:58:07.839><c> parenthesis</c><00:58:08.640><c> to</c><00:58:08.799><c> define</c><00:58:09.200><c> a</c><00:58:09.280><c> tuple</c><00:58:10.079><c> so</c><00:58:10.319><c> now</c>

00:58:10.630 --> 00:58:10.640 align:start position:0%
and parenthesis to define a tuple so now
 

00:58:10.640 --> 00:58:13.430 align:start position:0%
and parenthesis to define a tuple so now
this<00:58:10.880><c> numbers</c><00:58:11.280><c> variable</c><00:58:11.760><c> is</c><00:58:11.920><c> storing</c><00:58:12.319><c> a</c><00:58:12.480><c> tuple</c>

00:58:13.430 --> 00:58:13.440 align:start position:0%
this numbers variable is storing a tuple
 

00:58:13.440 --> 00:58:14.950 align:start position:0%
this numbers variable is storing a tuple
if<00:58:13.520><c> we</c><00:58:13.760><c> try</c>

00:58:14.950 --> 00:58:14.960 align:start position:0%
if we try
 

00:58:14.960 --> 00:58:18.390 align:start position:0%
if we try
to<00:58:15.119><c> reassign</c><00:58:16.160><c> let's</c><00:58:16.319><c> say</c><00:58:16.480><c> the</c><00:58:16.640><c> first</c><00:58:16.880><c> element</c>

00:58:18.390 --> 00:58:18.400 align:start position:0%
to reassign let's say the first element
 

00:58:18.400 --> 00:58:20.230 align:start position:0%
to reassign let's say the first element
we're<00:58:18.559><c> going</c><00:58:18.640><c> to</c><00:58:18.720><c> get</c><00:58:18.880><c> an</c><00:58:19.040><c> error</c>

00:58:20.230 --> 00:58:20.240 align:start position:0%
we're going to get an error
 

00:58:20.240 --> 00:58:22.549 align:start position:0%
we're going to get an error
topple<00:58:20.640><c> object</c><00:58:21.040><c> does</c><00:58:21.280><c> not</c><00:58:21.440><c> support</c><00:58:22.319><c> item</c>

00:58:22.549 --> 00:58:22.559 align:start position:0%
topple object does not support item
 

00:58:22.559 --> 00:58:24.950 align:start position:0%
topple object does not support item
assignment<00:58:23.599><c> so</c><00:58:23.839><c> this</c><00:58:24.000><c> is</c><00:58:24.079><c> what</c><00:58:24.160><c> i</c><00:58:24.319><c> meant</c><00:58:24.559><c> by</c>

00:58:24.950 --> 00:58:24.960 align:start position:0%
assignment so this is what i meant by
 

00:58:24.960 --> 00:58:26.789 align:start position:0%
assignment so this is what i meant by
tuples<00:58:25.440><c> are</c><00:58:25.599><c> immutable</c><00:58:26.480><c> they're</c>

00:58:26.789 --> 00:58:26.799 align:start position:0%
tuples are immutable they're
 

00:58:26.799 --> 00:58:28.230 align:start position:0%
tuples are immutable they're
unchangeable

00:58:28.230 --> 00:58:28.240 align:start position:0%
unchangeable
 

00:58:28.240 --> 00:58:29.829 align:start position:0%
unchangeable
also

00:58:29.829 --> 00:58:29.839 align:start position:0%
also
 

00:58:29.839 --> 00:58:32.630 align:start position:0%
also
if<00:58:30.000><c> you</c><00:58:30.160><c> type</c><00:58:30.880><c> numbers</c><00:58:31.760><c> dot</c>

00:58:32.630 --> 00:58:32.640 align:start position:0%
if you type numbers dot
 

00:58:32.640 --> 00:58:34.789 align:start position:0%
if you type numbers dot
you<00:58:32.799><c> don't</c><00:58:32.960><c> see</c><00:58:33.119><c> any</c><00:58:33.280><c> methods</c><00:58:33.599><c> like</c><00:58:34.000><c> append</c>

00:58:34.789 --> 00:58:34.799 align:start position:0%
you don't see any methods like append
 

00:58:34.799 --> 00:58:37.349 align:start position:0%
you don't see any methods like append
insert<00:58:35.520><c> remove</c><00:58:35.920><c> and</c><00:58:36.000><c> so</c><00:58:36.240><c> on</c><00:58:36.640><c> we</c><00:58:36.799><c> only</c><00:58:37.040><c> have</c>

00:58:37.349 --> 00:58:37.359 align:start position:0%
insert remove and so on we only have
 

00:58:37.359 --> 00:58:39.190 align:start position:0%
insert remove and so on we only have
count<00:58:37.920><c> and</c><00:58:38.160><c> index</c>

00:58:39.190 --> 00:58:39.200 align:start position:0%
count and index
 

00:58:39.200 --> 00:58:41.030 align:start position:0%
count and index
count<00:58:39.520><c> returns</c><00:58:39.839><c> the</c><00:58:40.000><c> number</c><00:58:40.240><c> of</c><00:58:40.480><c> occurrences</c>

00:58:41.030 --> 00:58:41.040 align:start position:0%
count returns the number of occurrences
 

00:58:41.040 --> 00:58:43.349 align:start position:0%
count returns the number of occurrences
of<00:58:41.200><c> an</c><00:58:41.359><c> element</c><00:58:42.160><c> for</c><00:58:42.319><c> example</c>

00:58:43.349 --> 00:58:43.359 align:start position:0%
of an element for example
 

00:58:43.359 --> 00:58:44.549 align:start position:0%
of an element for example
if<00:58:43.520><c> we</c><00:58:43.760><c> have</c>

00:58:44.549 --> 00:58:44.559 align:start position:0%
if we have
 

00:58:44.559 --> 00:58:45.670 align:start position:0%
if we have
let's<00:58:44.799><c> say</c>

00:58:45.670 --> 00:58:45.680 align:start position:0%
let's say
 

00:58:45.680 --> 00:58:47.510 align:start position:0%
let's say
two<00:58:45.920><c> threes</c><00:58:46.240><c> in</c><00:58:46.319><c> this</c><00:58:46.559><c> tuple</c>

00:58:47.510 --> 00:58:47.520 align:start position:0%
two threes in this tuple
 

00:58:47.520 --> 00:58:50.069 align:start position:0%
two threes in this tuple
and<00:58:47.760><c> call</c><00:58:48.160><c> count</c><00:58:48.640><c> of</c><00:58:48.880><c> three</c><00:58:49.359><c> this</c><00:58:49.520><c> will</c><00:58:49.680><c> return</c>

00:58:50.069 --> 00:58:50.079 align:start position:0%
and call count of three this will return
 

00:58:50.079 --> 00:58:51.109 align:start position:0%
and call count of three this will return
2.

00:58:51.109 --> 00:58:51.119 align:start position:0%
2.
 

00:58:51.119 --> 00:58:53.750 align:start position:0%
2.
the<00:58:51.280><c> other</c><00:58:51.440><c> method</c><00:58:51.760><c> we</c><00:58:51.839><c> have</c><00:58:52.000><c> here</c><00:58:52.559><c> is</c><00:58:52.880><c> index</c>

00:58:53.750 --> 00:58:53.760 align:start position:0%
the other method we have here is index
 

00:58:53.760 --> 00:58:56.150 align:start position:0%
the other method we have here is index
and<00:58:53.839><c> this</c><00:58:54.000><c> returns</c><00:58:54.720><c> the</c><00:58:54.960><c> index</c><00:58:55.440><c> of</c><00:58:55.520><c> the</c><00:58:55.760><c> first</c>

00:58:56.150 --> 00:58:56.160 align:start position:0%
and this returns the index of the first
 

00:58:56.160 --> 00:58:58.630 align:start position:0%
and this returns the index of the first
occurrence<00:58:56.640><c> of</c><00:58:56.799><c> the</c><00:58:56.880><c> given</c><00:58:57.200><c> element</c>

00:58:58.630 --> 00:58:58.640 align:start position:0%
occurrence of the given element
 

00:58:58.640 --> 00:58:59.349 align:start position:0%
occurrence of the given element
now

00:58:59.349 --> 00:58:59.359 align:start position:0%
now
 

00:58:59.359 --> 00:59:00.789 align:start position:0%
now
these<00:58:59.599><c> other</c><00:58:59.760><c> methods</c><00:59:00.079><c> you</c><00:59:00.240><c> see</c><00:59:00.400><c> here</c><00:59:00.559><c> that</c>

00:59:00.789 --> 00:59:00.799 align:start position:0%
these other methods you see here that
 

00:59:00.799 --> 00:59:03.030 align:start position:0%
these other methods you see here that
start<00:59:01.200><c> with</c><00:59:01.440><c> an</c><00:59:01.599><c> underscore</c><00:59:02.400><c> they're</c><00:59:02.640><c> called</c>

00:59:03.030 --> 00:59:03.040 align:start position:0%
start with an underscore they're called
 

00:59:03.040 --> 00:59:05.510 align:start position:0%
start with an underscore they're called
magic<00:59:03.359><c> methods</c><00:59:04.160><c> it's</c><00:59:04.319><c> an</c><00:59:04.480><c> advanced</c><00:59:04.880><c> topic</c><00:59:05.280><c> and</c>

00:59:05.510 --> 00:59:05.520 align:start position:0%
magic methods it's an advanced topic and
 

00:59:05.520 --> 00:59:07.589 align:start position:0%
magic methods it's an advanced topic and
i've<00:59:05.599><c> covered</c><00:59:05.920><c> it</c><00:59:06.079><c> in</c><00:59:06.240><c> detail</c><00:59:06.640><c> in</c><00:59:06.799><c> my</c><00:59:07.040><c> complete</c>

00:59:07.589 --> 00:59:07.599 align:start position:0%
i've covered it in detail in my complete
 

00:59:07.599 --> 00:59:09.510 align:start position:0%
i've covered it in detail in my complete
python<00:59:08.000><c> programming</c><00:59:08.480><c> course</c><00:59:09.200><c> if</c><00:59:09.280><c> you're</c>

00:59:09.510 --> 00:59:09.520 align:start position:0%
python programming course if you're
 

00:59:09.520 --> 00:59:11.430 align:start position:0%
python programming course if you're
interested<00:59:10.079><c> the</c><00:59:10.240><c> link</c><00:59:10.480><c> is</c><00:59:10.640><c> down</c><00:59:10.960><c> below</c><00:59:11.200><c> this</c>

00:59:11.430 --> 00:59:11.440 align:start position:0%
interested the link is down below this
 

00:59:11.440 --> 00:59:12.390 align:start position:0%
interested the link is down below this
video

00:59:12.390 --> 00:59:12.400 align:start position:0%
video
 

00:59:12.400 --> 00:59:14.870 align:start position:0%
video
so<00:59:13.040><c> tuples</c><00:59:13.440><c> are</c><00:59:13.599><c> immutable</c><00:59:14.079><c> we</c><00:59:14.240><c> cannot</c><00:59:14.559><c> change</c>

00:59:14.870 --> 00:59:14.880 align:start position:0%
so tuples are immutable we cannot change
 

00:59:14.880 --> 00:59:16.470 align:start position:0%
so tuples are immutable we cannot change
them<00:59:15.040><c> once</c><00:59:15.280><c> we</c><00:59:15.440><c> create</c><00:59:15.680><c> them</c>

00:59:16.470 --> 00:59:16.480 align:start position:0%
them once we create them
 

00:59:16.480 --> 00:59:18.470 align:start position:0%
them once we create them
now<00:59:16.720><c> practically</c><00:59:17.280><c> speaking</c><00:59:18.000><c> most</c><00:59:18.240><c> of</c><00:59:18.400><c> the</c>

00:59:18.470 --> 00:59:18.480 align:start position:0%
now practically speaking most of the
 

00:59:18.480 --> 00:59:20.230 align:start position:0%
now practically speaking most of the
time<00:59:18.640><c> you</c><00:59:18.799><c> would</c><00:59:18.880><c> be</c><00:59:19.040><c> using</c><00:59:19.359><c> lists</c><00:59:19.920><c> but</c><00:59:20.079><c> there</c>

00:59:20.230 --> 00:59:20.240 align:start position:0%
time you would be using lists but there
 

00:59:20.240 --> 00:59:21.910 align:start position:0%
time you would be using lists but there
are<00:59:20.319><c> times</c><00:59:20.559><c> that</c><00:59:20.799><c> once</c><00:59:20.960><c> you</c><00:59:21.119><c> create</c><00:59:21.440><c> a</c><00:59:21.520><c> list</c><00:59:21.760><c> of</c>

00:59:21.910 --> 00:59:21.920 align:start position:0%
are times that once you create a list of
 

00:59:21.920 --> 00:59:23.430 align:start position:0%
are times that once you create a list of
objects<00:59:22.480><c> you</c><00:59:22.640><c> want</c><00:59:22.720><c> to</c><00:59:22.880><c> make</c><00:59:22.960><c> sure</c><00:59:23.200><c> that</c>

00:59:23.430 --> 00:59:23.440 align:start position:0%
objects you want to make sure that
 

00:59:23.440 --> 00:59:25.670 align:start position:0%
objects you want to make sure that
somewhere<00:59:23.760><c> in</c><00:59:23.920><c> your</c><00:59:24.079><c> program</c><00:59:24.799><c> you</c><00:59:25.040><c> or</c><00:59:25.359><c> someone</c>

00:59:25.670 --> 00:59:25.680 align:start position:0%
somewhere in your program you or someone
 

00:59:25.680 --> 00:59:28.150 align:start position:0%
somewhere in your program you or someone
else<00:59:25.920><c> is</c><00:59:26.079><c> not</c><00:59:26.240><c> going</c><00:59:26.400><c> to</c><00:59:26.720><c> accidentally</c><00:59:27.680><c> modify</c>

00:59:28.150 --> 00:59:28.160 align:start position:0%
else is not going to accidentally modify
 

00:59:28.160 --> 00:59:30.150 align:start position:0%
else is not going to accidentally modify
that<00:59:28.400><c> list</c><00:59:28.799><c> if</c><00:59:28.960><c> that's</c><00:59:29.200><c> the</c><00:59:29.359><c> case</c><00:59:29.839><c> then</c><00:59:30.079><c> you</c>

00:59:30.150 --> 00:59:30.160 align:start position:0%
that list if that's the case then you
 

00:59:30.160 --> 00:59:33.430 align:start position:0%
that list if that's the case then you
should<00:59:30.319><c> use</c><00:59:30.559><c> a</c><00:59:30.720><c> tuple</c>

00:59:33.430 --> 00:59:33.440 align:start position:0%
should use a tuple
 

00:59:33.440 --> 00:59:34.870 align:start position:0%
should use a tuple
hey<00:59:33.599><c> guys</c><00:59:33.920><c> i</c><00:59:34.000><c> just</c><00:59:34.160><c> wanted</c><00:59:34.400><c> to</c><00:59:34.480><c> let</c><00:59:34.640><c> you</c><00:59:34.720><c> know</c>

00:59:34.870 --> 00:59:34.880 align:start position:0%
hey guys i just wanted to let you know
 

00:59:34.880 --> 00:59:36.829 align:start position:0%
hey guys i just wanted to let you know
that<00:59:35.119><c> i</c><00:59:35.200><c> have</c><00:59:35.359><c> an</c><00:59:35.520><c> online</c><00:59:35.920><c> coding</c><00:59:36.240><c> school</c><00:59:36.559><c> at</c>

00:59:36.829 --> 00:59:36.839 align:start position:0%
that i have an online coding school at
 

00:59:36.839 --> 00:59:38.549 align:start position:0%
that i have an online coding school at
codewoodmarch.com<00:59:37.920><c> where</c><00:59:38.079><c> you</c><00:59:38.160><c> can</c><00:59:38.319><c> find</c>

00:59:38.549 --> 00:59:38.559 align:start position:0%
codewoodmarch.com where you can find
 

00:59:38.559 --> 00:59:40.309 align:start position:0%
codewoodmarch.com where you can find
plenty<00:59:38.880><c> of</c><00:59:38.960><c> courses</c><00:59:39.440><c> on</c><00:59:39.599><c> web</c><00:59:39.839><c> and</c><00:59:40.000><c> mobile</c>

00:59:40.309 --> 00:59:40.319 align:start position:0%
plenty of courses on web and mobile
 

00:59:40.319 --> 00:59:41.829 align:start position:0%
plenty of courses on web and mobile
development<00:59:41.119><c> in</c><00:59:41.200><c> fact</c><00:59:41.440><c> i</c><00:59:41.520><c> have</c><00:59:41.680><c> a</c>

00:59:41.829 --> 00:59:41.839 align:start position:0%
development in fact i have a
 

00:59:41.839 --> 00:59:43.990 align:start position:0%
development in fact i have a
comprehensive<00:59:42.480><c> python</c><00:59:42.880><c> course</c><00:59:43.440><c> that</c><00:59:43.599><c> teaches</c>

00:59:43.990 --> 00:59:44.000 align:start position:0%
comprehensive python course that teaches
 

00:59:44.000 --> 00:59:45.510 align:start position:0%
comprehensive python course that teaches
you<00:59:44.240><c> everything</c><00:59:44.559><c> about</c><00:59:44.799><c> python</c><00:59:45.200><c> from</c><00:59:45.359><c> the</c>

00:59:45.510 --> 00:59:45.520 align:start position:0%
you everything about python from the
 

00:59:45.520 --> 00:59:47.750 align:start position:0%
you everything about python from the
basics<00:59:46.000><c> to</c><00:59:46.160><c> more</c><00:59:46.400><c> advanced</c><00:59:46.799><c> concepts</c><00:59:47.520><c> so</c>

00:59:47.750 --> 00:59:47.760 align:start position:0%
basics to more advanced concepts so
 

00:59:47.760 --> 00:59:49.430 align:start position:0%
basics to more advanced concepts so
after<00:59:48.000><c> you</c><00:59:48.160><c> watch</c><00:59:48.400><c> this</c><00:59:48.559><c> tutorial</c><00:59:49.200><c> if</c><00:59:49.280><c> you</c>

00:59:49.430 --> 00:59:49.440 align:start position:0%
after you watch this tutorial if you
 

00:59:49.440 --> 00:59:50.789 align:start position:0%
after you watch this tutorial if you
want<00:59:49.520><c> to</c><00:59:49.599><c> learn</c><00:59:49.839><c> more</c><00:59:50.240><c> you</c><00:59:50.400><c> may</c><00:59:50.480><c> want</c><00:59:50.559><c> to</c><00:59:50.640><c> look</c>

00:59:50.789 --> 00:59:50.799 align:start position:0%
want to learn more you may want to look
 

00:59:50.799 --> 00:59:52.710 align:start position:0%
want to learn more you may want to look
at<00:59:50.880><c> my</c><00:59:51.040><c> python</c><00:59:51.520><c> course</c><00:59:51.920><c> it</c><00:59:52.000><c> comes</c><00:59:52.240><c> with</c><00:59:52.400><c> a</c><00:59:52.559><c> 30</c>

00:59:52.710 --> 00:59:52.720 align:start position:0%
at my python course it comes with a 30
 

00:59:52.720 --> 00:59:54.230 align:start position:0%
at my python course it comes with a 30
day<00:59:52.880><c> money</c><00:59:53.119><c> back</c><00:59:53.359><c> guarantee</c><00:59:53.920><c> and</c><00:59:54.079><c> a</c>

00:59:54.230 --> 00:59:54.240 align:start position:0%
day money back guarantee and a
 

00:59:54.240 --> 00:59:55.910 align:start position:0%
day money back guarantee and a
certificate<00:59:54.720><c> of</c><00:59:54.799><c> completion</c><00:59:55.359><c> you</c><00:59:55.440><c> can</c><00:59:55.599><c> add</c><00:59:55.760><c> to</c>

00:59:55.910 --> 00:59:55.920 align:start position:0%
certificate of completion you can add to
 

00:59:55.920 --> 00:59:57.829 align:start position:0%
certificate of completion you can add to
your<00:59:56.000><c> resume</c><00:59:56.720><c> in</c><00:59:56.799><c> case</c><00:59:57.040><c> you're</c><00:59:57.200><c> interested</c>

00:59:57.829 --> 00:59:57.839 align:start position:0%
your resume in case you're interested
 

00:59:57.839 --> 01:00:01.430 align:start position:0%
your resume in case you're interested
the<00:59:58.000><c> link</c><00:59:58.240><c> is</c><00:59:58.319><c> below</c><00:59:58.559><c> this</c><00:59:58.799><c> video</c>

01:00:01.430 --> 01:00:01.440 align:start position:0%
the link is below this video
 

01:00:01.440 --> 01:00:04.440 align:start position:0%
the link is below this video
hey

