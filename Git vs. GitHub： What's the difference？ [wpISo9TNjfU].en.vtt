WEBVTT



00:00:00.400 --> 00:00:03.617
What is Git, and what's it used for?

00:00:03.617 --> 00:00:07.107
What's the&nbsp;difference between Git and GitHub, or GitLab?

00:00:07.290 --> 00:00:12.026
I'm Nathan Hekman from IBM Cloud and&nbsp;
I'm going to answer that for you today,&nbsp;&nbsp;

00:00:12.026 --> 00:00:15.450
but before I do, please hit that "Subscribe" button.

00:00:15.450 --> 00:00:18.695
Now let's "git" started with an example.

00:00:18.695 --> 00:00:21.360
Let's say you work for a media streaming company

00:00:21.360 --> 00:00:24.901
and you're&nbsp;tasked with building a music player app.

00:00:24.901 --> 00:00:32.016
So, you want to be able to be able to play music&nbsp;of all sorts of genres on a device

00:00:32.016 --> 00:00:37.760
and you're tasked with developing this application with a&nbsp;
team of developers, right - it's not just you.

00:00:38.400 --> 00:00:40.631
How do you work with that team of developers

00:00:40.631 --> 00:00:43.227
and&nbsp;write code at the same time as them

00:00:43.227 --> 00:00:47.013
on the same code base or project without conflicting?

00:00:47.013 --> 00:00:51.127
Well, that's where Git and GitHub, or GitLab, come in.

00:00:51.256 --> 00:00:54.974
So, what is Git, right?

00:00:54.974 --> 00:01:03.132
So, Git is what's known as&nbsp;a version control system.

00:01:03.132 --> 00:01:07.721
That might not mean a whole lot to you right now, but we'll jump into&nbsp;what exactly that means.

00:01:07.721 --> 00:01:11.430
How about GitHub?

00:01:11.430 --> 00:01:14.733
Or GitLab?

00:01:14.919 --> 00:01:21.604
Well, GitHub or GitLab are actually hosted ... Git. 

00:01:21.604 --> 00:01:26.560
So, where Git is actually the underlying&nbsp;
system that runs on your local machine,&nbsp;&nbsp;

00:01:26.560 --> 00:01:29.757
GitHub or GitLab is hosted maybe in the cloud,

00:01:29.757 --> 00:01:32.264
or hosted via the web,

00:01:32.264 --> 00:01:36.577
to host that Git system, as well as add a few more useful features.

00:01:36.577 --> 00:01:43.013
You&nbsp;may know GitHub or GitLab as a very diverse community, open source community, 

00:01:43.013 --> 00:01:49.703
where developers&nbsp;from all over the world can work together and collaborate on different code or projects.

00:01:49.703 --> 00:01:53.495
So, let's talk about some of the benefits and and aspects

00:01:53.495 --> 00:01:56.351
of Git and GitHub and&nbsp;how they work together.

00:01:56.351 --> 00:02:01.624
So, first of all, it allows you to track your changes.

00:02:01.624 --> 00:02:09.580
So, you&nbsp;always have a state tracking exactly what changes were made at any time.

00:02:09.580 --> 00:02:18.467
Kind of going&nbsp;along with that, it's a historical backup&nbsp;using ...

00:02:18.467 --> 00:02:23.458
... basically you can&nbsp;think of them as snapshots,&nbsp;&nbsp;right?

00:02:23.458 --> 00:02:26.016
So, it's it's kind of like a "Save as"&nbsp;button.

00:02:26.016 --> 00:02:27.794
So, you're probably familiar with&nbsp;that.

00:02:27.794 --> 00:02:32.032
You basically can keep a previous version and revert to it if you need to

00:02:32.032 --> 00:02:35.972
while still copying and then making changes on top of that&nbsp;previous version.

00:02:35.972 --> 00:02:38.531
So, if you introduce a bug or mess something up

00:02:38.531 --> 00:02:43.173
you can always go back&nbsp;with a historical backup that it provides

00:02:43.173 --> 00:02:46.093
and revert those changes.

00:02:46.093 --> 00:02:48.270
What else?

00:02:48.270 --> 00:02:52.829
So, maybe&nbsp;one of the biggest benefits that Git and GitHub allow

00:02:52.829 --> 00:02:54.765
are just team-based development.

00:02:54.765 --> 00:02:56.777
So, like we were talking about over here,

00:02:56.777 --> 00:03:02.147
it allows a team of developers to actually&nbsp;work on the same code simultaneously

00:03:02.147 --> 00:03:07.297
and then merge their changes in together to&nbsp;make progress on a project.

00:03:07.297 --> 00:03:08.971
Pretty cool.

00:03:10.959 --> 00:03:13.799
Next, it's also very flexible,

00:03:13.799 --> 00:03:18.251
so it&nbsp;allows you to work locally on a project

00:03:18.251 --> 00:03:24.098
or Git or GitHub can be used as part of your&nbsp;DevOps flows

00:03:24.098 --> 00:03:27.921
so that you can integrate your repository, which we'll talk about in a second,

00:03:27.921 --> 00:03:32.355
and your project and actually have it be part of an automated test,

00:03:32.355 --> 00:03:38.205
so kick off automated&nbsp;testing, or be part of your automated build&nbsp;&nbsp;and deploy processes.

00:03:38.205 --> 00:03:41.907
So, that's a really&nbsp;neat aspect, it's very flexible.

00:03:42.001 --> 00:03:48.500
And then finally, so, Git is typically ... you interact with it using&nbsp;the command line on your local machine

00:03:48.500 --> 00:03:54.648
versus GitHub is on the web, right - it's a website, and&nbsp;that's how you interact with GitHub or GitLab.&nbsp;&nbsp;

00:03:55.120 --> 00:03:58.988
And, finally, a concept that I think is important to&nbsp;
understand

00:03:58.988 --> 00:04:07.795
about Git and GitHub, or GitLab, is that it's trunk-based development.

00:04:07.795 --> 00:04:10.434
So, what&nbsp;does that mean? Think of a trunk like a tree, right?

00:04:10.434 --> 00:04:14.512
So, you have this main ... you can think of&nbsp;main code,

00:04:14.512 --> 00:04:20.357
and you as a developer maybe will want to branch off of that main branch of&nbsp;code,

00:04:20.357 --> 00:04:24.853
make some changes and then merge your code back into that main branch. 

00:04:24.853 --> 00:04:28.812
And, over here, you&nbsp;might have another developer that branches off&nbsp;of the main branch,

00:04:28.812 --> 00:04:32.280
makes some changes, and then&nbsp;merges back into that main branch.

00:04:32.280 --> 00:04:34.298
That's trunk-based development.

00:04:34.298 --> 00:04:38.161
All right, let's dive into&nbsp;our example and see what exactly this looks like.

00:04:38.400 --> 00:04:44.683
So, let's say that you have what's&nbsp;called a repository.

00:04:44.683 --> 00:04:47.708
So, repository.

00:04:47.843 --> 00:04:49.519
What's a repository?

00:04:49.519 --> 00:04:52.964
It's a place to&nbsp;store your code and your changes to code,

00:04:53.063 --> 00:05:03.582
and in this case it's going to be hosted&nbsp;on the cloud or in the web on GitHub&nbsp;or GitLab. 

00:05:03.582 --> 00:05:12.833
And, at the same&nbsp;time, let's say over here that I&nbsp;am working. 

00:05:12.833 --> 00:05:16.033
I want to work on this this code base&nbsp;on my local machine, right.

00:05:16.033 --> 00:05:16.960
So, how do I do that?

00:05:17.680 --> 00:05:26.800
Well, I need to do what's called "clone"&nbsp;this repo onto my local machine and I create,&nbsp;

00:05:26.800 --> 00:05:28.590
... remember our trunk based development?

00:05:28.590 --> 00:05:35.956
I create&nbsp;a branch of code called "Nathan-branch".

00:05:36.333 --> 00:05:40.393
So, that's where I'm going to be making my&nbsp;
changes to the code base.

00:05:40.476 --> 00:05:43.396
And let's say ... well, what changes do I want to make? 

00:05:43.396 --> 00:05:46.391
Well, I'm&nbsp;a huge Bluegrass fan, OK?

00:05:46.391 --> 00:05:51.467
So, I want to make the home page of the application feature Bluegrass.

00:05:51.467 --> 00:05:57.204
So, down here, let's say that I have my application

00:05:57.204 --> 00:06:02.824
and we call this our working copy.

00:06:02.824 --> 00:06:07.123
So, this&nbsp;is where I'm going to actually be making changes

00:06:07.123 --> 00:06:14.148
to that working copy to feature Bluegrass music&nbsp;on the application homepage.

00:06:14.148 --> 00:06:15.000
Great!

00:06:15.000 --> 00:06:20.598
So, once I'm happy with those changes what I'm going to do&nbsp;is I'm going to actually commit them,

00:06:20.598 --> 00:06:22.224
say "commit",

00:06:22.224 --> 00:06:25.129
those changes to Nathan-branch,

00:06:25.129 --> 00:06:28.005
and then, once I'm happy there, everything's committed,

00:06:28.005 --> 00:06:32.231
I'm going to go ahead and push&nbsp;those changes

00:06:32.231 --> 00:06:38.141
back over to our cloud-hosted repo in GitHub.

00:06:38.141 --> 00:06:42.216
So, I'm going&nbsp;to go ahead and push those changes.

00:06:42.216 --> 00:06:43.281
Perfect!

00:06:43.440 --> 00:06:46.535
Happy with that, right? Let's make it a little&nbsp;more complicated.

00:06:46.535 --> 00:06:50.358
So, over here my co-worker, Greg,

00:06:50.358 --> 00:06:55.902
is also wanting to make some changes to the application home screen,

00:06:55.902 --> 00:07:02.752
and now he happens to be making these changes before&nbsp;I pushed up my Bluegrass changes back to the ...

00:07:02.752 --> 00:07:09.401
... we'll call this the main-branch.

00:07:09.401 --> 00:07:17.779
So, he doesn't have my changes yet, so when he clones down to his local machine

00:07:17.779 --> 00:07:23.220
he wants to make&nbsp;some changes, he has a little different style preference for music.

00:07:23.220 --> 00:07:25.510
He's a huge Rock fan,&nbsp;OK?

00:07:25.510 --> 00:07:29.512
And so, over here on his working copy,

00:07:29.512 --> 00:07:32.469
he's going to make the home screen feature&nbsp;Rock music.

00:07:32.469 --> 00:07:36.992
And so when he goes ahead&nbsp;and he makes those changes

00:07:36.992 --> 00:07:44.724
and then he&nbsp;commits them back to what we call "Greg-branch",

00:07:45.269 --> 00:07:49.464
he's happy with those changes, he&nbsp;wants to go ahead and merge those

00:07:49.464 --> 00:07:52.240
and push them back to the main-branch.

00:07:52.980 --> 00:07:56.432
So, let's see, what does he need to do in order&nbsp;
to do that?

00:07:56.432 --> 00:08:06.483
Well, he'll actually need to pull and merge whatever is in the main-branch,

00:08:06.483 --> 00:08:10.847
because at this point as he's been working I've&nbsp;already pushed up my Bluegrass changes.

00:08:10.847 --> 00:08:14.860
So, now&nbsp;he has to pull those down into his Greg-branch and merge them.

00:08:14.860 --> 00:08:17.204
Uh-oh. Guess what?

00:08:17.203 --> 00:08:27.073
There is what's&nbsp;called a "merge conflict", that happens right here, right?

00:08:27.073 --> 00:08:30.607
So, when he's pulling down those changes&nbsp;he's been modifying the same code.

00:08:30.607 --> 00:08:33.520
So, there's a conflict that he needs to resolve there.

00:08:33.520 --> 00:08:34.799
So,&nbsp;what does he do?

00:08:34.799 --> 00:08:37.999
Like any good co-worker he compromises, right?

00:08:37.999 --> 00:08:42.864
So, he makes the main screen&nbsp;of the app feature both Bluegrass and Rock.

00:08:42.864 --> 00:08:45.000
So, he makes those changes in his branch,

00:08:45.000 --> 00:08:48.324
and he's ready&nbsp;to actually get those back in the main-branch.

00:08:48.397 --> 00:08:51.000
So, the next step he needs to take is:

00:08:51.000 --> 00:08:58.657
he needs to submit what's called a "pull&nbsp;request".

00:08:58.657 --> 00:09:04.471
You may have heard folks talk about&nbsp;a "P.R.", right? That's what a pull request is.&nbsp;&nbsp;

00:09:04.570 --> 00:09:06.408
What is it? It's basically

00:09:06.408 --> 00:09:10.447
a way for him to say,&nbsp;"Hey, these are the changes that I want to make",

00:09:10.447 --> 00:09:13.693
and it can be viewed in GitHub or GitLab

00:09:13.693 --> 00:09:16.387
so that&nbsp;anyone on the development team, like Nathan,

00:09:16.480 --> 00:09:20.938
I can go ahead and look at those changes and I&nbsp;say, "Good job Greg, looks great!"

00:09:20.938 --> 00:09:26.352
And I can approve the pull request and then get those changes&nbsp;merged into the main-branch.

00:09:26.352 --> 00:09:30.077
So, you'll see the final version of the application looks awesome,

00:09:30.077 --> 00:09:34.472
Bluegrass and Rock both featured on the main page. Awesome! 

00:09:34.472 --> 00:09:39.040
So, hopefully this makes&nbsp;it clear about what exactly Git is,&nbsp;&nbsp;

00:09:39.040 --> 00:09:41.531
how is it related to GitHub and GitLab,

00:09:41.531 --> 00:09:47.247
and how they are fundamental to developing applications not only by yourself,

00:09:47.247 --> 00:09:49.267
but&nbsp;as a team of developers.

00:09:49.267 --> 00:09:50.608
Thank you.

00:09:50.880 --> 00:09:53.708
If you have questions please drop us a line&nbsp;below.

00:09:53.708 --> 00:09:58.108
If you want to see more videos like this in the future, please like and subscribe.

00:09:58.108 --> 00:09:58.983
And don't forget,

00:09:58.983 --> 00:10:02.433
you can grow your skills and earn a badge with IBM CloudLabs

00:10:02.433 --> 00:10:05.738
which are free,&nbsp;browser-based interactive Kubernetes labs.

