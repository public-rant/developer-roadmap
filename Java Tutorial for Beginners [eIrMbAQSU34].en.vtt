WEBVTT



00:00:00.240 --> 00:00:01.829 align:start position:0%
 
hi<00:00:00.560><c> my</c><00:00:00.719><c> name</c><00:00:00.880><c> is</c><00:00:00.960><c> mosh</c><00:00:01.360><c> and</c><00:00:01.520><c> i'm</c><00:00:01.599><c> going</c><00:00:01.680><c> to</c><00:00:01.760><c> be</c>

00:00:01.829 --> 00:00:01.839 align:start position:0%
hi my name is mosh and i'm going to be
 

00:00:01.839 --> 00:00:03.750 align:start position:0%
hi my name is mosh and i'm going to be
your<00:00:02.000><c> instructor</c><00:00:02.480><c> in</c><00:00:02.560><c> this</c><00:00:02.720><c> java</c><00:00:03.120><c> course</c>

00:00:03.750 --> 00:00:03.760 align:start position:0%
your instructor in this java course
 

00:00:03.760 --> 00:00:05.030 align:start position:0%
your instructor in this java course
in<00:00:03.840><c> this</c><00:00:04.000><c> course</c><00:00:04.240><c> you're</c><00:00:04.400><c> going</c><00:00:04.480><c> to</c><00:00:04.560><c> learn</c>

00:00:05.030 --> 00:00:05.040 align:start position:0%
in this course you're going to learn
 

00:00:05.040 --> 00:00:06.389 align:start position:0%
in this course you're going to learn
everything<00:00:05.359><c> you</c><00:00:05.520><c> need</c><00:00:05.680><c> to</c><00:00:05.759><c> get</c><00:00:05.920><c> started</c>

00:00:06.389 --> 00:00:06.399 align:start position:0%
everything you need to get started
 

00:00:06.399 --> 00:00:06.950 align:start position:0%
everything you need to get started
programming

00:00:06.950 --> 00:00:06.960 align:start position:0%
programming
 

00:00:06.960 --> 00:00:09.110 align:start position:0%
programming
in<00:00:07.200><c> java</c><00:00:07.680><c> we'll</c><00:00:07.919><c> start</c><00:00:08.160><c> off</c><00:00:08.240><c> by</c><00:00:08.400><c> installing</c>

00:00:09.110 --> 00:00:09.120 align:start position:0%
in java we'll start off by installing
 

00:00:09.120 --> 00:00:10.870 align:start position:0%
in java we'll start off by installing
all<00:00:09.280><c> the</c><00:00:09.440><c> necessary</c><00:00:10.000><c> tools</c><00:00:10.240><c> to</c><00:00:10.400><c> build</c>

00:00:10.870 --> 00:00:10.880 align:start position:0%
all the necessary tools to build
 

00:00:10.880 --> 00:00:12.629 align:start position:0%
all the necessary tools to build
java<00:00:11.200><c> applications</c><00:00:12.160><c> then</c><00:00:12.320><c> you're</c><00:00:12.480><c> going</c><00:00:12.559><c> to</c>

00:00:12.629 --> 00:00:12.639 align:start position:0%
java applications then you're going to
 

00:00:12.639 --> 00:00:14.549 align:start position:0%
java applications then you're going to
learn<00:00:12.880><c> about</c><00:00:13.120><c> the</c><00:00:13.280><c> basics</c><00:00:13.759><c> of</c><00:00:13.920><c> java</c><00:00:14.320><c> you'll</c>

00:00:14.549 --> 00:00:14.559 align:start position:0%
learn about the basics of java you'll
 

00:00:14.559 --> 00:00:14.950 align:start position:0%
learn about the basics of java you'll
learn

00:00:14.950 --> 00:00:14.960 align:start position:0%
learn
 

00:00:14.960 --> 00:00:17.349 align:start position:0%
learn
how<00:00:15.280><c> java</c><00:00:15.599><c> code</c><00:00:15.839><c> gets</c><00:00:16.080><c> executed</c><00:00:16.880><c> you'll</c><00:00:17.119><c> learn</c>

00:00:17.349 --> 00:00:17.359 align:start position:0%
how java code gets executed you'll learn
 

00:00:17.359 --> 00:00:18.230 align:start position:0%
how java code gets executed you'll learn
how<00:00:17.520><c> to</c><00:00:17.680><c> build</c>

00:00:18.230 --> 00:00:18.240 align:start position:0%
how to build
 

00:00:18.240 --> 00:00:19.990 align:start position:0%
how to build
simple<00:00:18.560><c> algorithms</c><00:00:19.279><c> and</c><00:00:19.439><c> throughout</c><00:00:19.760><c> this</c>

00:00:19.990 --> 00:00:20.000 align:start position:0%
simple algorithms and throughout this
 

00:00:20.000 --> 00:00:21.510 align:start position:0%
simple algorithms and throughout this
course<00:00:20.400><c> i'm</c><00:00:20.480><c> going</c><00:00:20.640><c> to</c><00:00:20.720><c> share</c><00:00:20.960><c> with</c><00:00:21.119><c> you</c>

00:00:21.510 --> 00:00:21.520 align:start position:0%
course i'm going to share with you
 

00:00:21.520 --> 00:00:23.590 align:start position:0%
course i'm going to share with you
lots<00:00:21.840><c> of</c><00:00:22.000><c> tips</c><00:00:22.240><c> and</c><00:00:22.400><c> shortcuts</c><00:00:22.960><c> from</c><00:00:23.119><c> my</c><00:00:23.279><c> years</c>

00:00:23.590 --> 00:00:23.600 align:start position:0%
lots of tips and shortcuts from my years
 

00:00:23.600 --> 00:00:25.429 align:start position:0%
lots of tips and shortcuts from my years
of<00:00:23.760><c> experience</c><00:00:24.480><c> i'll</c><00:00:24.720><c> teach</c><00:00:24.960><c> you</c><00:00:25.119><c> how</c><00:00:25.279><c> to</c>

00:00:25.429 --> 00:00:25.439 align:start position:0%
of experience i'll teach you how to
 

00:00:25.439 --> 00:00:27.189 align:start position:0%
of experience i'll teach you how to
write<00:00:25.680><c> good</c><00:00:25.920><c> code</c><00:00:26.320><c> like</c><00:00:26.560><c> a</c><00:00:26.640><c> professional</c>

00:00:27.189 --> 00:00:27.199 align:start position:0%
write good code like a professional
 

00:00:27.199 --> 00:00:28.230 align:start position:0%
write good code like a professional
developer

00:00:28.230 --> 00:00:28.240 align:start position:0%
developer
 

00:00:28.240 --> 00:00:29.830 align:start position:0%
developer
so<00:00:28.400><c> by</c><00:00:28.560><c> the</c><00:00:28.720><c> end</c><00:00:28.880><c> of</c><00:00:28.960><c> watching</c><00:00:29.279><c> this</c><00:00:29.439><c> course</c>

00:00:29.830 --> 00:00:29.840 align:start position:0%
so by the end of watching this course
 

00:00:29.840 --> 00:00:32.150 align:start position:0%
so by the end of watching this course
you<00:00:30.000><c> will</c><00:00:30.160><c> have</c><00:00:30.320><c> a</c><00:00:30.480><c> solid</c><00:00:30.800><c> foundation</c><00:00:31.359><c> in</c><00:00:31.519><c> java</c>

00:00:32.150 --> 00:00:32.160 align:start position:0%
you will have a solid foundation in java
 

00:00:32.160 --> 00:00:34.069 align:start position:0%
you will have a solid foundation in java
and<00:00:32.320><c> be</c><00:00:32.480><c> ready</c><00:00:32.719><c> to</c><00:00:32.800><c> learn</c><00:00:33.040><c> about</c><00:00:33.440><c> advanced</c>

00:00:34.069 --> 00:00:34.079 align:start position:0%
and be ready to learn about advanced
 

00:00:34.079 --> 00:00:35.990 align:start position:0%
and be ready to learn about advanced
java<00:00:34.480><c> features</c><00:00:35.120><c> i've</c><00:00:35.360><c> designed</c><00:00:35.600><c> this</c><00:00:35.760><c> course</c>

00:00:35.990 --> 00:00:36.000 align:start position:0%
java features i've designed this course
 

00:00:36.000 --> 00:00:37.670 align:start position:0%
java features i've designed this course
for<00:00:36.239><c> anyone</c><00:00:36.559><c> who</c><00:00:36.640><c> wants</c><00:00:36.880><c> to</c><00:00:36.960><c> learn</c><00:00:37.200><c> java</c>

00:00:37.670 --> 00:00:37.680 align:start position:0%
for anyone who wants to learn java
 

00:00:37.680 --> 00:00:39.430 align:start position:0%
for anyone who wants to learn java
if<00:00:37.760><c> you're</c><00:00:37.920><c> a</c><00:00:38.079><c> beginner</c><00:00:38.559><c> don't</c><00:00:38.800><c> worry</c><00:00:39.200><c> i'll</c>

00:00:39.430 --> 00:00:39.440 align:start position:0%
if you're a beginner don't worry i'll
 

00:00:39.440 --> 00:00:41.350 align:start position:0%
if you're a beginner don't worry i'll
make<00:00:39.680><c> java</c><00:00:40.079><c> super</c><00:00:40.480><c> simple</c><00:00:40.879><c> and</c><00:00:41.040><c> hold</c><00:00:41.280><c> your</c>

00:00:41.350 --> 00:00:41.360 align:start position:0%
make java super simple and hold your
 

00:00:41.360 --> 00:00:42.869 align:start position:0%
make java super simple and hold your
hands<00:00:41.600><c> through</c><00:00:41.760><c> this</c><00:00:42.000><c> entire</c><00:00:42.399><c> course</c>

00:00:42.869 --> 00:00:42.879 align:start position:0%
hands through this entire course
 

00:00:42.879 --> 00:00:44.709 align:start position:0%
hands through this entire course
you're<00:00:43.120><c> not</c><00:00:43.280><c> too</c><00:00:43.440><c> old</c><00:00:43.680><c> or</c><00:00:43.840><c> too</c><00:00:44.079><c> young</c><00:00:44.399><c> you</c><00:00:44.559><c> will</c>

00:00:44.709 --> 00:00:44.719 align:start position:0%
you're not too old or too young you will
 

00:00:44.719 --> 00:00:46.950 align:start position:0%
you're not too old or too young you will
write<00:00:44.960><c> your</c><00:00:45.120><c> first</c><00:00:45.360><c> java</c><00:00:45.680><c> program</c><00:00:46.079><c> in</c><00:00:46.320><c> minutes</c>

00:00:46.950 --> 00:00:46.960 align:start position:0%
write your first java program in minutes
 

00:00:46.960 --> 00:00:48.950 align:start position:0%
write your first java program in minutes
my<00:00:47.120><c> name</c><00:00:47.280><c> is</c><00:00:47.360><c> mosh</c><00:00:48.000><c> i'm</c><00:00:48.160><c> a</c><00:00:48.239><c> software</c><00:00:48.559><c> engineer</c>

00:00:48.950 --> 00:00:48.960 align:start position:0%
my name is mosh i'm a software engineer
 

00:00:48.960 --> 00:00:50.549 align:start position:0%
my name is mosh i'm a software engineer
with<00:00:49.200><c> two</c><00:00:49.360><c> decades</c><00:00:49.680><c> of</c><00:00:49.840><c> experience</c>

00:00:50.549 --> 00:00:50.559 align:start position:0%
with two decades of experience
 

00:00:50.559 --> 00:00:52.709 align:start position:0%
with two decades of experience
and<00:00:50.719><c> i've</c><00:00:50.879><c> taught</c><00:00:51.199><c> over</c><00:00:51.760><c> 3</c><00:00:52.000><c> million</c><00:00:52.320><c> people</c>

00:00:52.709 --> 00:00:52.719 align:start position:0%
and i've taught over 3 million people
 

00:00:52.719 --> 00:00:53.590 align:start position:0%
and i've taught over 3 million people
how<00:00:52.960><c> to</c><00:00:53.120><c> code</c>

00:00:53.590 --> 00:00:53.600 align:start position:0%
how to code
 

00:00:53.600 --> 00:00:55.750 align:start position:0%
how to code
and<00:00:53.760><c> how</c><00:00:53.920><c> to</c><00:00:54.079><c> become</c><00:00:54.480><c> professional</c><00:00:55.360><c> software</c>

00:00:55.750 --> 00:00:55.760 align:start position:0%
and how to become professional software
 

00:00:55.760 --> 00:00:56.630 align:start position:0%
and how to become professional software
engineers

00:00:56.630 --> 00:00:56.640 align:start position:0%
engineers
 

00:00:56.640 --> 00:00:57.950 align:start position:0%
engineers
i<00:00:56.719><c> have</c><00:00:56.879><c> a</c><00:00:56.960><c> coding</c><00:00:57.280><c> school</c><00:00:57.600><c> at</c>

00:00:57.950 --> 00:00:57.960 align:start position:0%
i have a coding school at
 

00:00:57.960 --> 00:00:59.990 align:start position:0%
i have a coding school at
codegoodmarsh.com<00:00:59.280><c> where</c><00:00:59.440><c> you</c><00:00:59.600><c> can</c><00:00:59.760><c> find</c>

00:00:59.990 --> 00:01:00.000 align:start position:0%
codegoodmarsh.com where you can find
 

00:01:00.000 --> 00:01:01.670 align:start position:0%
codegoodmarsh.com where you can find
plenty<00:01:00.320><c> of</c><00:01:00.480><c> courses</c><00:01:00.879><c> that</c><00:01:01.039><c> help</c><00:01:01.280><c> you</c>

00:01:01.670 --> 00:01:01.680 align:start position:0%
plenty of courses that help you
 

00:01:01.680 --> 00:01:03.110 align:start position:0%
plenty of courses that help you
take<00:01:01.840><c> your</c><00:01:02.000><c> coding</c><00:01:02.320><c> skills</c><00:01:02.640><c> to</c><00:01:02.800><c> the</c><00:01:02.879><c> next</c>

00:01:03.110 --> 00:01:03.120 align:start position:0%
take your coding skills to the next
 

00:01:03.120 --> 00:01:05.030 align:start position:0%
take your coding skills to the next
level<00:01:03.760><c> i</c><00:01:03.920><c> hope</c><00:01:04.080><c> you</c><00:01:04.239><c> stick</c><00:01:04.400><c> around</c><00:01:04.720><c> and</c><00:01:04.799><c> learn</c>

00:01:05.030 --> 00:01:05.040 align:start position:0%
level i hope you stick around and learn
 

00:01:05.040 --> 00:01:05.990 align:start position:0%
level i hope you stick around and learn
this<00:01:05.280><c> beautiful</c>

00:01:05.990 --> 00:01:06.000 align:start position:0%
this beautiful
 

00:01:06.000 --> 00:01:08.149 align:start position:0%
this beautiful
and<00:01:06.320><c> powerful</c><00:01:06.720><c> programming</c><00:01:07.200><c> language</c><00:01:08.000><c> and</c>

00:01:08.149 --> 00:01:08.159 align:start position:0%
and powerful programming language and
 

00:01:08.159 --> 00:01:10.310 align:start position:0%
and powerful programming language and
now<00:01:08.400><c> a</c><00:01:08.479><c> word</c><00:01:08.720><c> from</c><00:01:08.880><c> this</c><00:01:09.040><c> video</c><00:01:09.439><c> sponsor</c>

00:01:10.310 --> 00:01:10.320 align:start position:0%
now a word from this video sponsor
 

00:01:10.320 --> 00:01:12.469 align:start position:0%
now a word from this video sponsor
as<00:01:10.479><c> someone</c><00:01:10.720><c> who</c><00:01:10.880><c> runs</c><00:01:11.200><c> an</c><00:01:11.360><c> online</c><00:01:11.680><c> business</c><00:01:12.320><c> i</c>

00:01:12.469 --> 00:01:12.479 align:start position:0%
as someone who runs an online business i
 

00:01:12.479 --> 00:01:14.230 align:start position:0%
as someone who runs an online business i
cannot<00:01:12.799><c> stress</c><00:01:13.200><c> enough</c><00:01:13.439><c> the</c><00:01:13.680><c> importance</c><00:01:14.159><c> of</c>

00:01:14.230 --> 00:01:14.240 align:start position:0%
cannot stress enough the importance of
 

00:01:14.240 --> 00:01:16.070 align:start position:0%
cannot stress enough the importance of
staying<00:01:14.640><c> safe</c><00:01:14.960><c> online</c><00:01:15.360><c> which</c><00:01:15.600><c> is</c><00:01:15.680><c> why</c>

00:01:16.070 --> 00:01:16.080 align:start position:0%
staying safe online which is why
 

00:01:16.080 --> 00:01:18.070 align:start position:0%
staying safe online which is why
i<00:01:16.159><c> was</c><00:01:16.400><c> so</c><00:01:16.640><c> excited</c><00:01:16.960><c> when</c><00:01:17.200><c> dashlane</c><00:01:17.759><c> reached</c>

00:01:18.070 --> 00:01:18.080 align:start position:0%
i was so excited when dashlane reached
 

00:01:18.080 --> 00:01:19.510 align:start position:0%
i was so excited when dashlane reached
out<00:01:18.159><c> to</c><00:01:18.320><c> me</c><00:01:18.720><c> if</c><00:01:18.799><c> you</c><00:01:18.960><c> don't</c><00:01:19.119><c> know</c>

00:01:19.510 --> 00:01:19.520 align:start position:0%
out to me if you don't know
 

00:01:19.520 --> 00:01:22.469 align:start position:0%
out to me if you don't know
dashlane<00:01:20.159><c> is</c><00:01:20.479><c> the</c><00:01:20.720><c> password</c><00:01:21.200><c> manager</c><00:01:21.759><c> and</c><00:01:21.920><c> vpn</c>

00:01:22.469 --> 00:01:22.479 align:start position:0%
dashlane is the password manager and vpn
 

00:01:22.479 --> 00:01:24.310 align:start position:0%
dashlane is the password manager and vpn
recommended<00:01:22.960><c> by</c><00:01:23.200><c> apple</c><00:01:23.600><c> and</c><00:01:23.759><c> google</c>

00:01:24.310 --> 00:01:24.320 align:start position:0%
recommended by apple and google
 

00:01:24.320 --> 00:01:26.149 align:start position:0%
recommended by apple and google
and<00:01:24.479><c> it's</c><00:01:24.640><c> a</c><00:01:24.799><c> fantastic</c><00:01:25.439><c> safeguard</c><00:01:26.000><c> for</c>

00:01:26.149 --> 00:01:26.159 align:start position:0%
and it's a fantastic safeguard for
 

00:01:26.159 --> 00:01:27.910 align:start position:0%
and it's a fantastic safeguard for
keeping<00:01:26.479><c> your</c><00:01:26.640><c> information</c><00:01:27.200><c> secure</c>

00:01:27.910 --> 00:01:27.920 align:start position:0%
keeping your information secure
 

00:01:27.920 --> 00:01:29.429 align:start position:0%
keeping your information secure
it's<00:01:28.159><c> completely</c><00:01:28.640><c> free</c><00:01:28.880><c> to</c><00:01:29.040><c> use</c><00:01:29.200><c> for</c><00:01:29.360><c> your</c>

00:01:29.429 --> 00:01:29.439 align:start position:0%
it's completely free to use for your
 

00:01:29.439 --> 00:01:31.030 align:start position:0%
it's completely free to use for your
first<00:01:29.759><c> device</c><00:01:30.320><c> so</c><00:01:30.479><c> head</c><00:01:30.720><c> over</c><00:01:30.880><c> to</c>

00:01:31.030 --> 00:01:31.040 align:start position:0%
first device so head over to
 

00:01:31.040 --> 00:01:32.630 align:start position:0%
first device so head over to
dashlane.com

00:01:32.630 --> 00:01:32.640 align:start position:0%
dashlane.com
 

00:01:32.640 --> 00:01:34.550 align:start position:0%
dashlane.com
to<00:01:32.799><c> give</c><00:01:32.960><c> it</c><00:01:33.119><c> a</c><00:01:33.200><c> go</c><00:01:33.680><c> if</c><00:01:33.759><c> you</c><00:01:33.920><c> want</c><00:01:34.000><c> to</c><00:01:34.159><c> upgrade</c>

00:01:34.550 --> 00:01:34.560 align:start position:0%
to give it a go if you want to upgrade
 

00:01:34.560 --> 00:01:36.390 align:start position:0%
to give it a go if you want to upgrade
to<00:01:34.640><c> the</c><00:01:34.880><c> premium</c><00:01:35.200><c> to</c><00:01:35.360><c> get</c><00:01:35.520><c> vpn</c><00:01:36.079><c> or</c>

00:01:36.390 --> 00:01:36.400 align:start position:0%
to the premium to get vpn or
 

00:01:36.400 --> 00:01:38.390 align:start position:0%
to the premium to get vpn or
dark<00:01:36.799><c> web</c><00:01:37.040><c> monitoring</c><00:01:37.759><c> you</c><00:01:37.920><c> can</c><00:01:38.000><c> use</c><00:01:38.240><c> the</c>

00:01:38.390 --> 00:01:38.400 align:start position:0%
dark web monitoring you can use the
 

00:01:38.400 --> 00:01:40.390 align:start position:0%
dark web monitoring you can use the
promo<00:01:38.720><c> code</c><00:01:38.960><c> mosh</c><00:01:39.360><c> to</c><00:01:39.520><c> get</c><00:01:39.759><c> 10</c>

00:01:40.390 --> 00:01:40.400 align:start position:0%
promo code mosh to get 10
 

00:01:40.400 --> 00:01:42.550 align:start position:0%
promo code mosh to get 10
off<00:01:40.880><c> sign</c><00:01:41.119><c> up</c><00:01:41.200><c> for</c><00:01:41.360><c> dashlane</c><00:01:41.759><c> today</c><00:01:42.159><c> and</c><00:01:42.320><c> keep</c>

00:01:42.550 --> 00:01:42.560 align:start position:0%
off sign up for dashlane today and keep
 

00:01:42.560 --> 00:01:43.830 align:start position:0%
off sign up for dashlane today and keep
yourself<00:01:43.040><c> safe</c><00:01:43.360><c> online</c>

00:01:43.830 --> 00:01:43.840 align:start position:0%
yourself safe online
 

00:01:43.840 --> 00:01:50.230 align:start position:0%
yourself safe online
now<00:01:44.159><c> back</c><00:01:44.399><c> to</c><00:01:44.479><c> the</c><00:01:44.640><c> course</c>

00:01:50.230 --> 00:01:50.240 align:start position:0%
 
 

00:01:50.240 --> 00:01:51.749 align:start position:0%
 
in<00:01:50.399><c> this</c><00:01:50.560><c> java</c><00:01:50.960><c> tutorial</c><00:01:51.439><c> we're</c><00:01:51.520><c> going</c><00:01:51.680><c> to</c>

00:01:51.749 --> 00:01:51.759 align:start position:0%
in this java tutorial we're going to
 

00:01:51.759 --> 00:01:53.990 align:start position:0%
in this java tutorial we're going to
download<00:01:52.240><c> and</c><00:01:52.479><c> install</c><00:01:52.960><c> the</c><00:01:53.119><c> necessary</c><00:01:53.680><c> tools</c>

00:01:53.990 --> 00:01:54.000 align:start position:0%
download and install the necessary tools
 

00:01:54.000 --> 00:01:57.109 align:start position:0%
download and install the necessary tools
to<00:01:54.240><c> build</c><00:01:54.799><c> java</c><00:01:55.119><c> applications</c><00:01:56.320><c> so</c><00:01:56.799><c> open</c><00:01:57.040><c> up</c>

00:01:57.109 --> 00:01:57.119 align:start position:0%
to build java applications so open up
 

00:01:57.119 --> 00:01:59.030 align:start position:0%
to build java applications so open up
your<00:01:57.280><c> browser</c><00:01:57.759><c> and</c><00:01:58.000><c> search</c><00:01:58.320><c> for</c>

00:01:59.030 --> 00:01:59.040 align:start position:0%
your browser and search for
 

00:01:59.040 --> 00:02:02.310 align:start position:0%
your browser and search for
jdk<00:02:00.479><c> download</c><00:02:01.600><c> jdk</c>

00:02:02.310 --> 00:02:02.320 align:start position:0%
jdk download jdk
 

00:02:02.320 --> 00:02:04.709 align:start position:0%
jdk download jdk
is<00:02:02.479><c> short</c><00:02:02.719><c> for</c><00:02:02.960><c> java</c><00:02:03.439><c> development</c><00:02:04.000><c> kit</c><00:02:04.560><c> and</c>

00:02:04.709 --> 00:02:04.719 align:start position:0%
is short for java development kit and
 

00:02:04.719 --> 00:02:06.230 align:start position:0%
is short for java development kit and
it's<00:02:04.880><c> basically</c><00:02:05.280><c> a</c><00:02:05.360><c> software</c><00:02:05.759><c> development</c>

00:02:06.230 --> 00:02:06.240 align:start position:0%
it's basically a software development
 

00:02:06.240 --> 00:02:07.190 align:start position:0%
it's basically a software development
environment<00:02:06.799><c> for</c>

00:02:07.190 --> 00:02:07.200 align:start position:0%
environment for
 

00:02:07.200 --> 00:02:09.589 align:start position:0%
environment for
building<00:02:07.840><c> java</c><00:02:08.160><c> applications</c><00:02:08.959><c> it</c><00:02:09.119><c> has</c><00:02:09.440><c> a</c>

00:02:09.589 --> 00:02:09.599 align:start position:0%
building java applications it has a
 

00:02:09.599 --> 00:02:10.550 align:start position:0%
building java applications it has a
compiler

00:02:10.550 --> 00:02:10.560 align:start position:0%
compiler
 

00:02:10.560 --> 00:02:12.710 align:start position:0%
compiler
it<00:02:10.720><c> has</c><00:02:10.959><c> a</c><00:02:11.039><c> bunch</c><00:02:11.280><c> of</c><00:02:11.360><c> code</c><00:02:11.599><c> that</c><00:02:11.760><c> we</c><00:02:11.920><c> can</c><00:02:12.080><c> reuse</c>

00:02:12.710 --> 00:02:12.720 align:start position:0%
it has a bunch of code that we can reuse
 

00:02:12.720 --> 00:02:14.710 align:start position:0%
it has a bunch of code that we can reuse
it<00:02:12.800><c> has</c><00:02:12.959><c> a</c><00:02:13.120><c> java</c><00:02:13.599><c> runtime</c><00:02:14.080><c> environment</c>

00:02:14.710 --> 00:02:14.720 align:start position:0%
it has a java runtime environment
 

00:02:14.720 --> 00:02:17.990 align:start position:0%
it has a java runtime environment
and<00:02:14.879><c> a</c><00:02:14.959><c> bunch</c><00:02:15.200><c> of</c><00:02:15.360><c> other</c><00:02:15.599><c> stuff</c><00:02:16.400><c> so</c><00:02:17.120><c> over</c><00:02:17.440><c> here</c>

00:02:17.990 --> 00:02:18.000 align:start position:0%
and a bunch of other stuff so over here
 

00:02:18.000 --> 00:02:21.190 align:start position:0%
and a bunch of other stuff so over here
you<00:02:18.160><c> can</c><00:02:18.319><c> see</c><00:02:18.480><c> this</c><00:02:18.640><c> page</c><00:02:19.040><c> on</c><00:02:19.280><c> oracle.com</c>

00:02:21.190 --> 00:02:21.200 align:start position:0%
you can see this page on oracle.com
 

00:02:21.200 --> 00:02:23.670 align:start position:0%
you can see this page on oracle.com
se<00:02:21.520><c> which</c><00:02:21.760><c> is</c><00:02:21.840><c> short</c><00:02:22.080><c> for</c><00:02:22.319><c> java</c><00:02:22.959><c> standard</c>

00:02:23.670 --> 00:02:23.680 align:start position:0%
se which is short for java standard
 

00:02:23.680 --> 00:02:24.710 align:start position:0%
se which is short for java standard
edition

00:02:24.710 --> 00:02:24.720 align:start position:0%
edition
 

00:02:24.720 --> 00:02:27.589 align:start position:0%
edition
click<00:02:24.959><c> on</c><00:02:25.120><c> this</c><00:02:26.400><c> now</c><00:02:26.640><c> over</c><00:02:26.879><c> here</c><00:02:27.280><c> click</c><00:02:27.520><c> on</c>

00:02:27.589 --> 00:02:27.599 align:start position:0%
click on this now over here click on
 

00:02:27.599 --> 00:02:29.830 align:start position:0%
click on this now over here click on
this<00:02:27.760><c> icon</c>

00:02:29.830 --> 00:02:29.840 align:start position:0%
this icon
 

00:02:29.840 --> 00:02:31.830 align:start position:0%
this icon
now<00:02:30.080><c> on</c><00:02:30.160><c> this</c><00:02:30.319><c> page</c><00:02:30.640><c> you</c><00:02:30.720><c> can</c><00:02:30.879><c> see</c><00:02:31.519><c> java</c>

00:02:31.830 --> 00:02:31.840 align:start position:0%
now on this page you can see java
 

00:02:31.840 --> 00:02:33.990 align:start position:0%
now on this page you can see java
development<00:02:32.400><c> kit</c><00:02:32.800><c> for</c><00:02:32.959><c> various</c><00:02:33.360><c> platforms</c>

00:02:33.990 --> 00:02:34.000 align:start position:0%
development kit for various platforms
 

00:02:34.000 --> 00:02:37.030 align:start position:0%
development kit for various platforms
like<00:02:34.239><c> linux</c><00:02:34.959><c> mac</c><00:02:35.200><c> os</c><00:02:35.680><c> and</c><00:02:35.840><c> windows</c><00:02:36.640><c> here</c><00:02:36.879><c> i'm</c>

00:02:37.030 --> 00:02:37.040 align:start position:0%
like linux mac os and windows here i'm
 

00:02:37.040 --> 00:02:37.589 align:start position:0%
like linux mac os and windows here i'm
on<00:02:37.120><c> a</c><00:02:37.200><c> mac</c>

00:02:37.589 --> 00:02:37.599 align:start position:0%
on a mac
 

00:02:37.599 --> 00:02:40.390 align:start position:0%
on a mac
so<00:02:37.920><c> i'm</c><00:02:38.000><c> going</c><00:02:38.160><c> to</c><00:02:38.239><c> download</c><00:02:39.040><c> this</c><00:02:39.360><c> dmg</c><00:02:39.840><c> file</c>

00:02:40.390 --> 00:02:40.400 align:start position:0%
so i'm going to download this dmg file
 

00:02:40.400 --> 00:02:41.190 align:start position:0%
so i'm going to download this dmg file
over<00:02:40.640><c> here</c>

00:02:41.190 --> 00:02:41.200 align:start position:0%
over here
 

00:02:41.200 --> 00:02:42.949 align:start position:0%
over here
now<00:02:41.360><c> before</c><00:02:41.599><c> we</c><00:02:41.760><c> do</c><00:02:41.920><c> this</c><00:02:42.319><c> first</c><00:02:42.560><c> we</c><00:02:42.720><c> need</c><00:02:42.800><c> to</c>

00:02:42.949 --> 00:02:42.959 align:start position:0%
now before we do this first we need to
 

00:02:42.959 --> 00:02:45.110 align:start position:0%
now before we do this first we need to
accept<00:02:43.760><c> the</c><00:02:43.920><c> license</c><00:02:44.400><c> agreement</c>

00:02:45.110 --> 00:02:45.120 align:start position:0%
accept the license agreement
 

00:02:45.120 --> 00:02:48.790 align:start position:0%
accept the license agreement
all<00:02:45.280><c> right</c><00:02:45.760><c> now</c><00:02:46.000><c> let's</c><00:02:46.239><c> download</c><00:02:46.560><c> the</c><00:02:46.720><c> dmg</c>

00:02:48.790 --> 00:02:48.800 align:start position:0%
all right now let's download the dmg
 

00:02:48.800 --> 00:02:49.910 align:start position:0%
all right now let's download the dmg
when<00:02:48.959><c> we</c><00:02:49.040><c> open</c><00:02:49.280><c> this</c><00:02:49.440><c> we're</c><00:02:49.599><c> going</c><00:02:49.680><c> to</c><00:02:49.760><c> see</c>

00:02:49.910 --> 00:02:49.920 align:start position:0%
when we open this we're going to see
 

00:02:49.920 --> 00:02:52.949 align:start position:0%
when we open this we're going to see
this<00:02:50.160><c> package</c><00:02:50.959><c> let's</c><00:02:51.120><c> double</c><00:02:51.440><c> click</c><00:02:51.680><c> this</c>

00:02:52.949 --> 00:02:52.959 align:start position:0%
this package let's double click this
 

00:02:52.959 --> 00:02:54.869 align:start position:0%
this package let's double click this
and<00:02:53.120><c> here</c><00:02:53.280><c> we</c><00:02:53.360><c> see</c><00:02:53.519><c> this</c><00:02:53.760><c> installation</c><00:02:54.319><c> wizard</c>

00:02:54.869 --> 00:02:54.879 align:start position:0%
and here we see this installation wizard
 

00:02:54.879 --> 00:02:57.430 align:start position:0%
and here we see this installation wizard
it's<00:02:55.040><c> super</c><00:02:55.440><c> easy</c><00:02:55.760><c> just</c><00:02:56.000><c> click</c><00:02:56.239><c> continue</c>

00:02:57.430 --> 00:02:57.440 align:start position:0%
it's super easy just click continue
 

00:02:57.440 --> 00:02:59.670 align:start position:0%
it's super easy just click continue
and<00:02:57.760><c> install</c><00:02:58.879><c> you</c><00:02:59.040><c> have</c><00:02:59.120><c> to</c><00:02:59.280><c> enter</c><00:02:59.519><c> your</c>

00:02:59.670 --> 00:02:59.680 align:start position:0%
and install you have to enter your
 

00:02:59.680 --> 00:03:01.670 align:start position:0%
and install you have to enter your
computer's<00:03:00.159><c> password</c>

00:03:01.670 --> 00:03:01.680 align:start position:0%
computer's password
 

00:03:01.680 --> 00:03:04.949 align:start position:0%
computer's password
and<00:03:02.840><c> then</c><00:03:04.159><c> all</c><00:03:04.239><c> right</c><00:03:04.480><c> done</c>

00:03:04.949 --> 00:03:04.959 align:start position:0%
and then all right done
 

00:03:04.959 --> 00:03:08.470 align:start position:0%
and then all right done
beautiful<00:03:06.400><c> so</c><00:03:06.560><c> we</c><00:03:06.640><c> can</c><00:03:06.800><c> move</c><00:03:06.959><c> this</c><00:03:07.120><c> to</c><00:03:07.280><c> trash</c>

00:03:08.470 --> 00:03:08.480 align:start position:0%
beautiful so we can move this to trash
 

00:03:08.480 --> 00:03:09.990 align:start position:0%
beautiful so we can move this to trash
now<00:03:08.640><c> the</c><00:03:08.800><c> next</c><00:03:08.959><c> piece</c><00:03:09.200><c> of</c><00:03:09.360><c> software</c><00:03:09.680><c> we</c><00:03:09.760><c> need</c>

00:03:09.990 --> 00:03:10.000 align:start position:0%
now the next piece of software we need
 

00:03:10.000 --> 00:03:12.070 align:start position:0%
now the next piece of software we need
is<00:03:10.159><c> a</c><00:03:10.319><c> code</c><00:03:10.560><c> editor</c><00:03:11.280><c> there</c><00:03:11.440><c> are</c><00:03:11.519><c> so</c><00:03:11.680><c> many</c><00:03:11.840><c> code</c>

00:03:12.070 --> 00:03:12.080 align:start position:0%
is a code editor there are so many code
 

00:03:12.080 --> 00:03:14.229 align:start position:0%
is a code editor there are so many code
editors<00:03:12.480><c> for</c><00:03:12.640><c> building</c><00:03:13.040><c> java</c><00:03:13.360><c> applications</c>

00:03:14.229 --> 00:03:14.239 align:start position:0%
editors for building java applications
 

00:03:14.239 --> 00:03:16.869 align:start position:0%
editors for building java applications
the<00:03:14.480><c> popular</c><00:03:14.879><c> ones</c><00:03:15.200><c> are</c><00:03:15.360><c> netbeans</c><00:03:16.080><c> eclipse</c>

00:03:16.869 --> 00:03:16.879 align:start position:0%
the popular ones are netbeans eclipse
 

00:03:16.879 --> 00:03:17.430 align:start position:0%
the popular ones are netbeans eclipse
and

00:03:17.430 --> 00:03:17.440 align:start position:0%
and
 

00:03:17.440 --> 00:03:19.589 align:start position:0%
and
intellij<00:03:18.400><c> in</c><00:03:18.560><c> this</c><00:03:18.720><c> java</c><00:03:19.120><c> course</c><00:03:19.360><c> i'm</c><00:03:19.519><c> going</c>

00:03:19.589 --> 00:03:19.599 align:start position:0%
intellij in this java course i'm going
 

00:03:19.599 --> 00:03:20.710 align:start position:0%
intellij in this java course i'm going
to<00:03:19.680><c> use</c><00:03:19.920><c> intellij</c>

00:03:20.710 --> 00:03:20.720 align:start position:0%
to use intellij
 

00:03:20.720 --> 00:03:22.470 align:start position:0%
to use intellij
but<00:03:20.879><c> if</c><00:03:21.040><c> you</c><00:03:21.120><c> have</c><00:03:21.280><c> a</c><00:03:21.440><c> favorite</c><00:03:21.840><c> editor</c><00:03:22.239><c> feel</c>

00:03:22.470 --> 00:03:22.480 align:start position:0%
but if you have a favorite editor feel
 

00:03:22.480 --> 00:03:24.149 align:start position:0%
but if you have a favorite editor feel
free<00:03:22.720><c> to</c><00:03:22.879><c> use</c><00:03:23.040><c> that</c><00:03:23.360><c> to</c><00:03:23.519><c> take</c><00:03:23.680><c> this</c><00:03:23.920><c> course</c>

00:03:24.149 --> 00:03:24.159 align:start position:0%
free to use that to take this course
 

00:03:24.159 --> 00:03:26.070 align:start position:0%
free to use that to take this course
that's<00:03:24.400><c> perfectly</c><00:03:24.879><c> fine</c>

00:03:26.070 --> 00:03:26.080 align:start position:0%
that's perfectly fine
 

00:03:26.080 --> 00:03:29.270 align:start position:0%
that's perfectly fine
so<00:03:26.319><c> let's</c><00:03:26.560><c> search</c><00:03:26.799><c> for</c><00:03:27.599><c> intellij</c>

00:03:29.270 --> 00:03:29.280 align:start position:0%
so let's search for intellij
 

00:03:29.280 --> 00:03:32.789 align:start position:0%
so let's search for intellij
download<00:03:31.680><c> all</c><00:03:31.840><c> right</c><00:03:32.000><c> you</c><00:03:32.080><c> can</c><00:03:32.239><c> see</c><00:03:32.400><c> download</c>

00:03:32.789 --> 00:03:32.799 align:start position:0%
download all right you can see download
 

00:03:32.799 --> 00:03:33.430 align:start position:0%
download all right you can see download
intellij

00:03:33.430 --> 00:03:33.440 align:start position:0%
intellij
 

00:03:33.440 --> 00:03:36.869 align:start position:0%
intellij
idea<00:03:34.239><c> click</c><00:03:34.480><c> on</c><00:03:34.560><c> this</c><00:03:34.799><c> link</c><00:03:36.239><c> over</c><00:03:36.480><c> here</c>

00:03:36.869 --> 00:03:36.879 align:start position:0%
idea click on this link over here
 

00:03:36.879 --> 00:03:38.630 align:start position:0%
idea click on this link over here
download<00:03:37.280><c> the</c><00:03:37.440><c> community</c><00:03:37.920><c> edition</c><00:03:38.319><c> which</c><00:03:38.480><c> is</c>

00:03:38.630 --> 00:03:38.640 align:start position:0%
download the community edition which is
 

00:03:38.640 --> 00:03:40.390 align:start position:0%
download the community edition which is
absolutely<00:03:39.200><c> free</c><00:03:39.680><c> and</c><00:03:39.840><c> it's</c><00:03:40.080><c> more</c><00:03:40.239><c> than</c>

00:03:40.390 --> 00:03:40.400 align:start position:0%
absolutely free and it's more than
 

00:03:40.400 --> 00:03:41.910 align:start position:0%
absolutely free and it's more than
enough<00:03:40.640><c> for</c><00:03:40.799><c> this</c><00:03:41.040><c> course</c>

00:03:41.910 --> 00:03:41.920 align:start position:0%
enough for this course
 

00:03:41.920 --> 00:03:45.350 align:start position:0%
enough for this course
so<00:03:42.480><c> download</c><00:03:44.159><c> all</c><00:03:44.319><c> right</c><00:03:44.480><c> now</c><00:03:44.640><c> let's</c><00:03:44.879><c> drag</c><00:03:45.280><c> and</c>

00:03:45.350 --> 00:03:45.360 align:start position:0%
so download all right now let's drag and
 

00:03:45.360 --> 00:03:49.430 align:start position:0%
so download all right now let's drag and
drop<00:03:45.680><c> this</c><00:03:45.920><c> onto</c><00:03:46.080><c> the</c><00:03:46.239><c> applications</c><00:03:46.799><c> folder</c>

00:03:49.430 --> 00:03:49.440 align:start position:0%
 
 

00:03:49.440 --> 00:03:51.509 align:start position:0%
 
beautiful<00:03:50.400><c> all</c><00:03:50.480><c> right</c><00:03:50.640><c> we've</c><00:03:50.879><c> installed</c><00:03:51.360><c> all</c>

00:03:51.509 --> 00:03:51.519 align:start position:0%
beautiful all right we've installed all
 

00:03:51.519 --> 00:03:53.429 align:start position:0%
beautiful all right we've installed all
the<00:03:51.680><c> necessary</c><00:03:52.159><c> tools</c><00:03:52.560><c> to</c><00:03:52.799><c> build</c><00:03:53.040><c> java</c>

00:03:53.429 --> 00:03:53.439 align:start position:0%
the necessary tools to build java
 

00:03:53.439 --> 00:03:54.390 align:start position:0%
the necessary tools to build java
applications

00:03:54.390 --> 00:03:54.400 align:start position:0%
applications
 

00:03:54.400 --> 00:03:55.670 align:start position:0%
applications
so<00:03:54.560><c> next</c><00:03:54.799><c> we're</c><00:03:54.959><c> going</c><00:03:55.040><c> to</c><00:03:55.120><c> look</c><00:03:55.280><c> at</c><00:03:55.519><c> the</c>

00:03:55.670 --> 00:03:55.680 align:start position:0%
so next we're going to look at the
 

00:03:55.680 --> 00:04:03.509 align:start position:0%
so next we're going to look at the
anatomy<00:03:56.319><c> of</c><00:03:56.480><c> a</c><00:03:56.640><c> java</c><00:03:58.840><c> program</c>

00:04:03.509 --> 00:04:03.519 align:start position:0%
 
 

00:04:03.519 --> 00:04:04.789 align:start position:0%
 
in<00:04:03.599><c> this</c><00:04:03.840><c> java</c><00:04:04.159><c> tutorial</c><00:04:04.480><c> we're</c><00:04:04.640><c> going</c><00:04:04.720><c> to</c>

00:04:04.789 --> 00:04:04.799 align:start position:0%
in this java tutorial we're going to
 

00:04:04.799 --> 00:04:07.270 align:start position:0%
in this java tutorial we're going to
look<00:04:04.959><c> at</c><00:04:05.040><c> the</c><00:04:05.200><c> anatomy</c><00:04:05.840><c> of</c><00:04:06.080><c> java</c><00:04:06.480><c> programs</c>

00:04:07.270 --> 00:04:07.280 align:start position:0%
look at the anatomy of java programs
 

00:04:07.280 --> 00:04:09.110 align:start position:0%
look at the anatomy of java programs
the<00:04:07.439><c> smallest</c><00:04:07.920><c> building</c><00:04:08.239><c> block</c><00:04:08.640><c> in</c><00:04:08.799><c> java</c>

00:04:09.110 --> 00:04:09.120 align:start position:0%
the smallest building block in java
 

00:04:09.120 --> 00:04:10.949 align:start position:0%
the smallest building block in java
programs<00:04:09.680><c> are</c><00:04:10.080><c> functions</c>

00:04:10.949 --> 00:04:10.959 align:start position:0%
programs are functions
 

00:04:10.959 --> 00:04:12.789 align:start position:0%
programs are functions
a<00:04:11.120><c> function</c><00:04:11.439><c> is</c><00:04:11.599><c> a</c><00:04:11.680><c> block</c><00:04:12.000><c> of</c><00:04:12.080><c> code</c><00:04:12.480><c> that</c>

00:04:12.789 --> 00:04:12.799 align:start position:0%
a function is a block of code that
 

00:04:12.799 --> 00:04:14.070 align:start position:0%
a function is a block of code that
performs<00:04:13.280><c> a</c><00:04:13.360><c> task</c>

00:04:14.070 --> 00:04:14.080 align:start position:0%
performs a task
 

00:04:14.080 --> 00:04:15.990 align:start position:0%
performs a task
as<00:04:14.239><c> a</c><00:04:14.319><c> metaphor</c><00:04:14.959><c> think</c><00:04:15.200><c> of</c><00:04:15.280><c> the</c><00:04:15.439><c> buttons</c><00:04:15.920><c> on</c>

00:04:15.990 --> 00:04:16.000 align:start position:0%
as a metaphor think of the buttons on
 

00:04:16.000 --> 00:04:17.990 align:start position:0%
as a metaphor think of the buttons on
the<00:04:16.160><c> remote</c><00:04:16.560><c> control</c><00:04:16.959><c> of</c><00:04:17.120><c> your</c><00:04:17.280><c> tv</c>

00:04:17.990 --> 00:04:18.000 align:start position:0%
the remote control of your tv
 

00:04:18.000 --> 00:04:20.469 align:start position:0%
the remote control of your tv
each<00:04:18.320><c> button</c><00:04:18.639><c> performs</c><00:04:19.120><c> a</c><00:04:19.199><c> task</c><00:04:20.000><c> functions</c><00:04:20.400><c> in</c>

00:04:20.469 --> 00:04:20.479 align:start position:0%
each button performs a task functions in
 

00:04:20.479 --> 00:04:21.909 align:start position:0%
each button performs a task functions in
programming<00:04:20.880><c> languages</c><00:04:21.280><c> are</c><00:04:21.440><c> exactly</c><00:04:21.840><c> the</c>

00:04:21.909 --> 00:04:21.919 align:start position:0%
programming languages are exactly the
 

00:04:21.919 --> 00:04:22.550 align:start position:0%
programming languages are exactly the
same

00:04:22.550 --> 00:04:22.560 align:start position:0%
same
 

00:04:22.560 --> 00:04:24.629 align:start position:0%
same
for<00:04:22.720><c> example</c><00:04:23.120><c> we</c><00:04:23.280><c> can</c><00:04:23.360><c> have</c><00:04:23.520><c> a</c><00:04:23.600><c> function</c><00:04:24.080><c> for</c>

00:04:24.629 --> 00:04:24.639 align:start position:0%
for example we can have a function for
 

00:04:24.639 --> 00:04:26.070 align:start position:0%
for example we can have a function for
sending<00:04:25.120><c> emails</c><00:04:25.440><c> to</c><00:04:25.600><c> people</c>

00:04:26.070 --> 00:04:26.080 align:start position:0%
sending emails to people
 

00:04:26.080 --> 00:04:27.909 align:start position:0%
sending emails to people
we<00:04:26.240><c> can</c><00:04:26.400><c> have</c><00:04:26.479><c> a</c><00:04:26.560><c> function</c><00:04:26.960><c> for</c><00:04:27.360><c> converting</c>

00:04:27.909 --> 00:04:27.919 align:start position:0%
we can have a function for converting
 

00:04:27.919 --> 00:04:30.310 align:start position:0%
we can have a function for converting
someone's<00:04:28.320><c> weight</c><00:04:28.800><c> in</c><00:04:29.040><c> pounds</c><00:04:29.360><c> to</c><00:04:29.520><c> kilograms</c>

00:04:30.310 --> 00:04:30.320 align:start position:0%
someone's weight in pounds to kilograms
 

00:04:30.320 --> 00:04:32.070 align:start position:0%
someone's weight in pounds to kilograms
we<00:04:30.479><c> can</c><00:04:30.639><c> have</c><00:04:30.800><c> a</c><00:04:30.880><c> function</c><00:04:31.199><c> for</c><00:04:31.440><c> validating</c>

00:04:32.070 --> 00:04:32.080 align:start position:0%
we can have a function for validating
 

00:04:32.080 --> 00:04:33.670 align:start position:0%
we can have a function for validating
user's<00:04:32.479><c> input</c><00:04:32.800><c> and</c><00:04:32.960><c> so</c><00:04:33.120><c> on</c>

00:04:33.670 --> 00:04:33.680 align:start position:0%
user's input and so on
 

00:04:33.680 --> 00:04:35.590 align:start position:0%
user's input and so on
now<00:04:33.919><c> let's</c><00:04:34.080><c> see</c><00:04:34.240><c> how</c><00:04:34.400><c> we</c><00:04:34.479><c> can</c><00:04:34.639><c> code</c><00:04:34.960><c> a</c><00:04:35.120><c> function</c>

00:04:35.590 --> 00:04:35.600 align:start position:0%
now let's see how we can code a function
 

00:04:35.600 --> 00:04:38.230 align:start position:0%
now let's see how we can code a function
in<00:04:35.759><c> java</c><00:04:36.639><c> we</c><00:04:36.880><c> start</c><00:04:37.280><c> by</c><00:04:37.600><c> specifying</c><00:04:38.080><c> the</c>

00:04:38.230 --> 00:04:38.240 align:start position:0%
in java we start by specifying the
 

00:04:38.240 --> 00:04:39.909 align:start position:0%
in java we start by specifying the
return<00:04:38.639><c> type</c><00:04:38.880><c> of</c><00:04:38.960><c> that</c><00:04:39.199><c> function</c>

00:04:39.909 --> 00:04:39.919 align:start position:0%
return type of that function
 

00:04:39.919 --> 00:04:41.590 align:start position:0%
return type of that function
some<00:04:40.080><c> functions</c><00:04:40.479><c> return</c><00:04:40.800><c> a</c><00:04:40.960><c> value</c><00:04:41.360><c> like</c><00:04:41.520><c> a</c>

00:04:41.590 --> 00:04:41.600 align:start position:0%
some functions return a value like a
 

00:04:41.600 --> 00:04:43.670 align:start position:0%
some functions return a value like a
number<00:04:42.160><c> a</c><00:04:42.320><c> daytime</c><00:04:42.800><c> and</c><00:04:42.960><c> so</c><00:04:43.120><c> on</c>

00:04:43.670 --> 00:04:43.680 align:start position:0%
number a daytime and so on
 

00:04:43.680 --> 00:04:45.830 align:start position:0%
number a daytime and so on
other<00:04:43.919><c> functions</c><00:04:44.320><c> don't</c><00:04:44.479><c> return</c><00:04:44.800><c> anything</c><00:04:45.680><c> so</c>

00:04:45.830 --> 00:04:45.840 align:start position:0%
other functions don't return anything so
 

00:04:45.840 --> 00:04:47.430 align:start position:0%
other functions don't return anything so
the<00:04:46.000><c> return</c><00:04:46.320><c> type</c><00:04:46.560><c> of</c><00:04:46.639><c> these</c><00:04:46.800><c> functions</c>

00:04:47.430 --> 00:04:47.440 align:start position:0%
the return type of these functions
 

00:04:47.440 --> 00:04:50.070 align:start position:0%
the return type of these functions
is<00:04:47.680><c> void</c><00:04:48.479><c> void</c><00:04:48.800><c> is</c><00:04:48.960><c> a</c><00:04:49.040><c> reserved</c><00:04:49.440><c> keyword</c><00:04:49.919><c> in</c>

00:04:50.070 --> 00:04:50.080 align:start position:0%
is void void is a reserved keyword in
 

00:04:50.080 --> 00:04:51.189 align:start position:0%
is void void is a reserved keyword in
java<00:04:50.400><c> and</c><00:04:50.479><c> that's</c><00:04:50.800><c> why</c>

00:04:51.189 --> 00:04:51.199 align:start position:0%
java and that's why
 

00:04:51.199 --> 00:04:53.909 align:start position:0%
java and that's why
i've<00:04:51.440><c> coded</c><00:04:51.759><c> that</c><00:04:52.160><c> in</c><00:04:52.320><c> blue</c><00:04:52.639><c> here</c><00:04:53.360><c> now</c><00:04:53.680><c> after</c>

00:04:53.909 --> 00:04:53.919 align:start position:0%
i've coded that in blue here now after
 

00:04:53.919 --> 00:04:55.270 align:start position:0%
i've coded that in blue here now after
the<00:04:54.080><c> return</c><00:04:54.400><c> type</c><00:04:54.720><c> we</c><00:04:54.880><c> have</c>

00:04:55.270 --> 00:04:55.280 align:start position:0%
the return type we have
 

00:04:55.280 --> 00:04:57.030 align:start position:0%
the return type we have
the<00:04:55.440><c> name</c><00:04:55.680><c> of</c><00:04:55.840><c> our</c><00:04:56.000><c> function</c><00:04:56.639><c> so</c><00:04:56.800><c> here</c><00:04:56.960><c> we</c>

00:04:57.030 --> 00:04:57.040 align:start position:0%
the name of our function so here we
 

00:04:57.040 --> 00:04:59.110 align:start position:0%
the name of our function so here we
should<00:04:57.199><c> give</c><00:04:57.360><c> our</c><00:04:57.440><c> function</c><00:04:58.080><c> a</c><00:04:58.320><c> proper</c>

00:04:59.110 --> 00:04:59.120 align:start position:0%
should give our function a proper
 

00:04:59.120 --> 00:05:02.310 align:start position:0%
should give our function a proper
descriptive<00:04:59.759><c> name</c><00:05:00.320><c> like</c><00:05:00.560><c> send</c><00:05:01.199><c> email</c><00:05:02.080><c> this</c>

00:05:02.310 --> 00:05:02.320 align:start position:0%
descriptive name like send email this
 

00:05:02.320 --> 00:05:02.870 align:start position:0%
descriptive name like send email this
name

00:05:02.870 --> 00:05:02.880 align:start position:0%
name
 

00:05:02.880 --> 00:05:04.870 align:start position:0%
name
clearly<00:05:03.280><c> identifies</c><00:05:04.000><c> the</c><00:05:04.240><c> purpose</c><00:05:04.639><c> of</c><00:05:04.720><c> this</c>

00:05:04.870 --> 00:05:04.880 align:start position:0%
clearly identifies the purpose of this
 

00:05:04.880 --> 00:05:06.550 align:start position:0%
clearly identifies the purpose of this
function<00:05:05.600><c> okay</c>

00:05:06.550 --> 00:05:06.560 align:start position:0%
function okay
 

00:05:06.560 --> 00:05:08.469 align:start position:0%
function okay
now<00:05:06.800><c> after</c><00:05:07.039><c> the</c><00:05:07.120><c> name</c><00:05:07.360><c> we</c><00:05:07.520><c> have</c><00:05:08.080><c> a</c><00:05:08.160><c> pair</c><00:05:08.400><c> of</c>

00:05:08.469 --> 00:05:08.479 align:start position:0%
now after the name we have a pair of
 

00:05:08.479 --> 00:05:09.670 align:start position:0%
now after the name we have a pair of
parentheses

00:05:09.670 --> 00:05:09.680 align:start position:0%
parentheses
 

00:05:09.680 --> 00:05:11.749 align:start position:0%
parentheses
and<00:05:09.919><c> inside</c><00:05:10.240><c> this</c><00:05:10.400><c> parenthesis</c><00:05:10.960><c> we</c><00:05:11.120><c> add</c><00:05:11.520><c> the</c>

00:05:11.749 --> 00:05:11.759 align:start position:0%
and inside this parenthesis we add the
 

00:05:11.759 --> 00:05:13.749 align:start position:0%
and inside this parenthesis we add the
parameters<00:05:12.639><c> for</c><00:05:12.800><c> this</c><00:05:12.960><c> function</c>

00:05:13.749 --> 00:05:13.759 align:start position:0%
parameters for this function
 

00:05:13.759 --> 00:05:16.150 align:start position:0%
parameters for this function
we<00:05:13.919><c> use</c><00:05:14.080><c> these</c><00:05:14.320><c> parameters</c><00:05:15.039><c> to</c><00:05:15.199><c> pass</c><00:05:15.600><c> values</c>

00:05:16.150 --> 00:05:16.160 align:start position:0%
we use these parameters to pass values
 

00:05:16.160 --> 00:05:17.189 align:start position:0%
we use these parameters to pass values
to<00:05:16.240><c> our</c><00:05:16.400><c> function</c>

00:05:17.189 --> 00:05:17.199 align:start position:0%
to our function
 

00:05:17.199 --> 00:05:19.029 align:start position:0%
to our function
for<00:05:17.360><c> example</c><00:05:17.919><c> our</c><00:05:18.160><c> send</c><00:05:18.479><c> email</c><00:05:18.720><c> function</c>

00:05:19.029 --> 00:05:19.039 align:start position:0%
for example our send email function
 

00:05:19.039 --> 00:05:20.629 align:start position:0%
for example our send email function
should<00:05:19.199><c> have</c><00:05:19.360><c> parameters</c><00:05:19.919><c> like</c><00:05:20.160><c> who's</c><00:05:20.479><c> the</c>

00:05:20.629 --> 00:05:20.639 align:start position:0%
should have parameters like who's the
 

00:05:20.639 --> 00:05:21.350 align:start position:0%
should have parameters like who's the
receiver

00:05:21.350 --> 00:05:21.360 align:start position:0%
receiver
 

00:05:21.360 --> 00:05:23.189 align:start position:0%
receiver
what<00:05:21.600><c> is</c><00:05:21.680><c> the</c><00:05:21.919><c> subject</c><00:05:22.320><c> of</c><00:05:22.400><c> this</c><00:05:22.639><c> email</c><00:05:23.039><c> what</c>

00:05:23.189 --> 00:05:23.199 align:start position:0%
what is the subject of this email what
 

00:05:23.199 --> 00:05:25.510 align:start position:0%
what is the subject of this email what
is<00:05:23.360><c> the</c><00:05:23.520><c> content</c><00:05:23.919><c> of</c><00:05:24.000><c> this</c><00:05:24.240><c> email</c><00:05:24.560><c> and</c><00:05:24.639><c> so</c><00:05:24.800><c> on</c>

00:05:25.510 --> 00:05:25.520 align:start position:0%
is the content of this email and so on
 

00:05:25.520 --> 00:05:26.710 align:start position:0%
is the content of this email and so on
now<00:05:25.680><c> in</c><00:05:25.759><c> this</c><00:05:25.919><c> tutorial</c><00:05:26.240><c> we're</c><00:05:26.400><c> not</c><00:05:26.560><c> going</c><00:05:26.639><c> to</c>

00:05:26.710 --> 00:05:26.720 align:start position:0%
now in this tutorial we're not going to
 

00:05:26.720 --> 00:05:28.150 align:start position:0%
now in this tutorial we're not going to
worry<00:05:26.960><c> about</c><00:05:27.199><c> parameters</c><00:05:27.759><c> we'll</c><00:05:27.919><c> look</c><00:05:28.080><c> at</c>

00:05:28.150 --> 00:05:28.160 align:start position:0%
worry about parameters we'll look at
 

00:05:28.160 --> 00:05:29.909 align:start position:0%
worry about parameters we'll look at
them<00:05:28.400><c> in</c><00:05:28.479><c> the</c><00:05:28.639><c> future</c>

00:05:29.909 --> 00:05:29.919 align:start position:0%
them in the future
 

00:05:29.919 --> 00:05:32.070 align:start position:0%
them in the future
now<00:05:30.240><c> after</c><00:05:30.560><c> the</c><00:05:30.639><c> parenthesis</c><00:05:31.280><c> we</c><00:05:31.440><c> add</c><00:05:31.759><c> a</c><00:05:31.919><c> pair</c>

00:05:32.070 --> 00:05:32.080 align:start position:0%
now after the parenthesis we add a pair
 

00:05:32.080 --> 00:05:33.510 align:start position:0%
now after the parenthesis we add a pair
of<00:05:32.240><c> curly</c><00:05:32.560><c> braces</c>

00:05:33.510 --> 00:05:33.520 align:start position:0%
of curly braces
 

00:05:33.520 --> 00:05:35.749 align:start position:0%
of curly braces
and<00:05:33.840><c> inside</c><00:05:34.240><c> these</c><00:05:34.400><c> braces</c><00:05:34.800><c> we</c><00:05:34.960><c> write</c><00:05:35.520><c> the</c>

00:05:35.749 --> 00:05:35.759 align:start position:0%
and inside these braces we write the
 

00:05:35.759 --> 00:05:37.670 align:start position:0%
and inside these braces we write the
actual<00:05:36.479><c> java</c><00:05:36.960><c> code</c>

00:05:37.670 --> 00:05:37.680 align:start position:0%
actual java code
 

00:05:37.680 --> 00:05:38.710 align:start position:0%
actual java code
now<00:05:37.840><c> one</c><00:05:38.000><c> thing</c><00:05:38.160><c> i</c><00:05:38.240><c> want</c><00:05:38.320><c> you</c><00:05:38.479><c> to</c><00:05:38.560><c> pay</c>

00:05:38.710 --> 00:05:38.720 align:start position:0%
now one thing i want you to pay
 

00:05:38.720 --> 00:05:40.950 align:start position:0%
now one thing i want you to pay
attention<00:05:39.039><c> to</c><00:05:39.199><c> here</c><00:05:39.600><c> is</c><00:05:39.759><c> that</c><00:05:39.919><c> in</c><00:05:40.160><c> java</c>

00:05:40.950 --> 00:05:40.960 align:start position:0%
attention to here is that in java
 

00:05:40.960 --> 00:05:43.189 align:start position:0%
attention to here is that in java
we<00:05:41.199><c> put</c><00:05:41.360><c> the</c><00:05:41.520><c> left</c><00:05:41.759><c> brace</c><00:05:42.240><c> on</c><00:05:42.400><c> the</c><00:05:42.560><c> same</c><00:05:42.880><c> line</c>

00:05:43.189 --> 00:05:43.199 align:start position:0%
we put the left brace on the same line
 

00:05:43.199 --> 00:05:44.390 align:start position:0%
we put the left brace on the same line
where<00:05:43.680><c> we</c><00:05:43.840><c> define</c>

00:05:44.390 --> 00:05:44.400 align:start position:0%
where we define
 

00:05:44.400 --> 00:05:46.469 align:start position:0%
where we define
our<00:05:44.560><c> function</c><00:05:45.600><c> in</c><00:05:45.759><c> other</c><00:05:46.000><c> programming</c>

00:05:46.469 --> 00:05:46.479 align:start position:0%
our function in other programming
 

00:05:46.479 --> 00:05:48.230 align:start position:0%
our function in other programming
languages<00:05:47.120><c> like</c><00:05:47.360><c> c</c><00:05:47.600><c> sharp</c>

00:05:48.230 --> 00:05:48.240 align:start position:0%
languages like c sharp
 

00:05:48.240 --> 00:05:50.070 align:start position:0%
languages like c sharp
it's<00:05:48.479><c> more</c><00:05:48.720><c> conventional</c><00:05:49.280><c> to</c><00:05:49.440><c> put</c><00:05:49.600><c> the</c><00:05:49.759><c> left</c>

00:05:50.070 --> 00:05:50.080 align:start position:0%
it's more conventional to put the left
 

00:05:50.080 --> 00:05:51.990 align:start position:0%
it's more conventional to put the left
brace<00:05:50.479><c> on</c><00:05:50.720><c> a</c><00:05:50.800><c> new</c><00:05:51.039><c> line</c><00:05:51.280><c> but</c><00:05:51.440><c> we</c><00:05:51.600><c> don't</c><00:05:51.680><c> do</c><00:05:51.840><c> that</c>

00:05:51.990 --> 00:05:52.000 align:start position:0%
brace on a new line but we don't do that
 

00:05:52.000 --> 00:05:53.029 align:start position:0%
brace on a new line but we don't do that
in<00:05:52.160><c> java</c>

00:05:53.029 --> 00:05:53.039 align:start position:0%
in java
 

00:05:53.039 --> 00:05:55.110 align:start position:0%
in java
so<00:05:53.280><c> we</c><00:05:53.440><c> put</c><00:05:53.680><c> the</c><00:05:53.759><c> left</c><00:05:54.080><c> brace</c><00:05:54.560><c> on</c><00:05:54.720><c> the</c><00:05:54.880><c> same</c>

00:05:55.110 --> 00:05:55.120 align:start position:0%
so we put the left brace on the same
 

00:05:55.120 --> 00:05:57.670 align:start position:0%
so we put the left brace on the same
line<00:05:55.440><c> where</c><00:05:55.919><c> we</c><00:05:56.080><c> define</c><00:05:56.479><c> our</c><00:05:56.639><c> function</c>

00:05:57.670 --> 00:05:57.680 align:start position:0%
line where we define our function
 

00:05:57.680 --> 00:05:59.749 align:start position:0%
line where we define our function
now<00:05:58.240><c> every</c><00:05:58.560><c> java</c><00:05:58.880><c> program</c><00:05:59.280><c> should</c><00:05:59.440><c> have</c><00:05:59.680><c> at</c>

00:05:59.749 --> 00:05:59.759 align:start position:0%
now every java program should have at
 

00:05:59.759 --> 00:06:01.270 align:start position:0%
now every java program should have at
least<00:06:00.400><c> one</c><00:06:00.639><c> function</c>

00:06:01.270 --> 00:06:01.280 align:start position:0%
least one function
 

00:06:01.280 --> 00:06:04.230 align:start position:0%
least one function
and<00:06:01.440><c> that</c><00:06:01.600><c> function</c><00:06:02.000><c> is</c><00:06:02.160><c> called</c><00:06:02.800><c> main</c><00:06:03.680><c> so</c><00:06:03.919><c> main</c>

00:06:04.230 --> 00:06:04.240 align:start position:0%
and that function is called main so main
 

00:06:04.240 --> 00:06:06.550 align:start position:0%
and that function is called main so main
is<00:06:04.319><c> the</c><00:06:04.560><c> entry</c><00:06:04.960><c> point</c><00:06:05.360><c> to</c><00:06:05.520><c> our</c><00:06:05.680><c> programs</c>

00:06:06.550 --> 00:06:06.560 align:start position:0%
is the entry point to our programs
 

00:06:06.560 --> 00:06:09.110 align:start position:0%
is the entry point to our programs
whenever<00:06:06.960><c> we</c><00:06:07.120><c> execute</c><00:06:07.600><c> a</c><00:06:07.759><c> java</c><00:06:08.080><c> program</c><00:06:08.880><c> the</c>

00:06:09.110 --> 00:06:09.120 align:start position:0%
whenever we execute a java program the
 

00:06:09.120 --> 00:06:10.629 align:start position:0%
whenever we execute a java program the
main<00:06:09.360><c> function</c><00:06:09.759><c> gets</c><00:06:10.080><c> called</c>

00:06:10.629 --> 00:06:10.639 align:start position:0%
main function gets called
 

00:06:10.639 --> 00:06:12.550 align:start position:0%
main function gets called
and<00:06:10.800><c> the</c><00:06:11.039><c> code</c><00:06:11.440><c> inside</c><00:06:11.759><c> this</c><00:06:11.919><c> function</c><00:06:12.240><c> gets</c>

00:06:12.550 --> 00:06:12.560 align:start position:0%
and the code inside this function gets
 

00:06:12.560 --> 00:06:14.309 align:start position:0%
and the code inside this function gets
executed<00:06:13.360><c> okay</c>

00:06:14.309 --> 00:06:14.319 align:start position:0%
executed okay
 

00:06:14.319 --> 00:06:16.230 align:start position:0%
executed okay
now<00:06:14.560><c> these</c><00:06:14.800><c> functions</c><00:06:15.199><c> don't</c><00:06:15.520><c> exist</c><00:06:15.919><c> on</c><00:06:16.000><c> their</c>

00:06:16.230 --> 00:06:16.240 align:start position:0%
now these functions don't exist on their
 

00:06:16.240 --> 00:06:18.070 align:start position:0%
now these functions don't exist on their
own<00:06:16.479><c> they</c><00:06:16.639><c> should</c><00:06:16.960><c> always</c><00:06:17.360><c> belong</c>

00:06:18.070 --> 00:06:18.080 align:start position:0%
own they should always belong
 

00:06:18.080 --> 00:06:21.270 align:start position:0%
own they should always belong
to<00:06:18.240><c> a</c><00:06:18.400><c> class</c><00:06:19.280><c> so</c><00:06:19.520><c> a</c><00:06:19.600><c> class</c><00:06:20.000><c> is</c><00:06:20.160><c> a</c><00:06:20.319><c> container</c>

00:06:21.270 --> 00:06:21.280 align:start position:0%
to a class so a class is a container
 

00:06:21.280 --> 00:06:23.590 align:start position:0%
to a class so a class is a container
for<00:06:21.520><c> one</c><00:06:21.840><c> or</c><00:06:22.000><c> more</c><00:06:22.319><c> related</c><00:06:22.720><c> functions</c>

00:06:23.590 --> 00:06:23.600 align:start position:0%
for one or more related functions
 

00:06:23.600 --> 00:06:25.029 align:start position:0%
for one or more related functions
basically<00:06:24.000><c> we</c><00:06:24.080><c> use</c><00:06:24.240><c> these</c><00:06:24.400><c> classes</c><00:06:24.800><c> to</c>

00:06:25.029 --> 00:06:25.039 align:start position:0%
basically we use these classes to
 

00:06:25.039 --> 00:06:26.150 align:start position:0%
basically we use these classes to
organize<00:06:25.520><c> our</c><00:06:25.680><c> code</c>

00:06:26.150 --> 00:06:26.160 align:start position:0%
organize our code
 

00:06:26.160 --> 00:06:28.390 align:start position:0%
organize our code
just<00:06:26.400><c> like</c><00:06:26.639><c> how</c><00:06:26.960><c> products</c><00:06:27.360><c> are</c><00:06:27.840><c> organized</c><00:06:28.319><c> in</c>

00:06:28.390 --> 00:06:28.400 align:start position:0%
just like how products are organized in
 

00:06:28.400 --> 00:06:29.430 align:start position:0%
just like how products are organized in
a<00:06:28.479><c> supermarket</c>

00:06:29.430 --> 00:06:29.440 align:start position:0%
a supermarket
 

00:06:29.440 --> 00:06:30.870 align:start position:0%
a supermarket
in<00:06:29.600><c> a</c><00:06:29.680><c> supermarket</c><00:06:30.240><c> we</c><00:06:30.400><c> have</c><00:06:30.479><c> various</c>

00:06:30.870 --> 00:06:30.880 align:start position:0%
in a supermarket we have various
 

00:06:30.880 --> 00:06:32.710 align:start position:0%
in a supermarket we have various
sections<00:06:31.280><c> like</c><00:06:31.759><c> vegetables</c>

00:06:32.710 --> 00:06:32.720 align:start position:0%
sections like vegetables
 

00:06:32.720 --> 00:06:35.189 align:start position:0%
sections like vegetables
fruits<00:06:33.360><c> cleaning</c><00:06:33.840><c> products</c><00:06:34.240><c> and</c><00:06:34.319><c> so</c><00:06:34.560><c> on</c><00:06:34.960><c> each</c>

00:06:35.189 --> 00:06:35.199 align:start position:0%
fruits cleaning products and so on each
 

00:06:35.199 --> 00:06:35.909 align:start position:0%
fruits cleaning products and so on each
section

00:06:35.909 --> 00:06:35.919 align:start position:0%
section
 

00:06:35.919 --> 00:06:38.550 align:start position:0%
section
contains<00:06:36.639><c> related</c><00:06:37.199><c> products</c><00:06:38.000><c> by</c><00:06:38.160><c> the</c><00:06:38.319><c> same</c>

00:06:38.550 --> 00:06:38.560 align:start position:0%
contains related products by the same
 

00:06:38.560 --> 00:06:40.230 align:start position:0%
contains related products by the same
token<00:06:38.880><c> a</c><00:06:39.039><c> class</c><00:06:39.440><c> in</c><00:06:39.600><c> java</c>

00:06:40.230 --> 00:06:40.240 align:start position:0%
token a class in java
 

00:06:40.240 --> 00:06:43.270 align:start position:0%
token a class in java
contains<00:06:40.960><c> related</c><00:06:41.440><c> functions</c><00:06:42.479><c> now</c><00:06:42.960><c> every</c>

00:06:43.270 --> 00:06:43.280 align:start position:0%
contains related functions now every
 

00:06:43.280 --> 00:06:44.950 align:start position:0%
contains related functions now every
java<00:06:43.600><c> program</c><00:06:43.919><c> should</c><00:06:44.080><c> have</c><00:06:44.319><c> at</c><00:06:44.400><c> least</c>

00:06:44.950 --> 00:06:44.960 align:start position:0%
java program should have at least
 

00:06:44.960 --> 00:06:47.270 align:start position:0%
java program should have at least
one<00:06:45.199><c> class</c><00:06:45.759><c> that</c><00:06:46.000><c> contains</c><00:06:46.560><c> the</c><00:06:46.800><c> main</c>

00:06:47.270 --> 00:06:47.280 align:start position:0%
one class that contains the main
 

00:06:47.280 --> 00:06:48.150 align:start position:0%
one class that contains the main
function

00:06:48.150 --> 00:06:48.160 align:start position:0%
function
 

00:06:48.160 --> 00:06:50.309 align:start position:0%
function
can<00:06:48.319><c> you</c><00:06:48.400><c> guess</c><00:06:48.639><c> the</c><00:06:48.720><c> name</c><00:06:48.880><c> of</c><00:06:48.960><c> that</c><00:06:49.199><c> class</c>

00:06:50.309 --> 00:06:50.319 align:start position:0%
can you guess the name of that class
 

00:06:50.319 --> 00:06:51.350 align:start position:0%
can you guess the name of that class
it's<00:06:50.560><c> main</c>

00:06:51.350 --> 00:06:51.360 align:start position:0%
it's main
 

00:06:51.360 --> 00:06:54.150 align:start position:0%
it's main
so<00:06:51.520><c> this</c><00:06:51.680><c> is</c><00:06:51.840><c> how</c><00:06:52.000><c> we</c><00:06:52.080><c> define</c><00:06:52.720><c> a</c><00:06:52.800><c> class</c><00:06:53.199><c> in</c><00:06:53.360><c> java</c>

00:06:54.150 --> 00:06:54.160 align:start position:0%
so this is how we define a class in java
 

00:06:54.160 --> 00:06:55.990 align:start position:0%
so this is how we define a class in java
we<00:06:54.319><c> start</c><00:06:54.639><c> with</c><00:06:54.800><c> a</c><00:06:54.880><c> class</c><00:06:55.199><c> keyword</c>

00:06:55.990 --> 00:06:56.000 align:start position:0%
we start with a class keyword
 

00:06:56.000 --> 00:06:57.830 align:start position:0%
we start with a class keyword
then<00:06:56.240><c> we</c><00:06:56.400><c> give</c><00:06:56.639><c> our</c><00:06:56.800><c> class</c><00:06:57.120><c> a</c><00:06:57.280><c> proper</c>

00:06:57.830 --> 00:06:57.840 align:start position:0%
then we give our class a proper
 

00:06:57.840 --> 00:06:59.029 align:start position:0%
then we give our class a proper
descriptive<00:06:58.479><c> name</c>

00:06:59.029 --> 00:06:59.039 align:start position:0%
descriptive name
 

00:06:59.039 --> 00:07:01.589 align:start position:0%
descriptive name
and<00:06:59.120><c> then</c><00:06:59.280><c> we</c><00:06:59.440><c> add</c><00:06:59.840><c> a</c><00:07:00.000><c> pair</c><00:07:00.160><c> of</c><00:07:00.319><c> curly</c><00:07:00.639><c> braces</c>

00:07:01.589 --> 00:07:01.599 align:start position:0%
and then we add a pair of curly braces
 

00:07:01.599 --> 00:07:03.189 align:start position:0%
and then we add a pair of curly braces
now<00:07:01.840><c> the</c><00:07:02.000><c> functions</c><00:07:02.400><c> that</c><00:07:02.479><c> we</c><00:07:02.639><c> define</c>

00:07:03.189 --> 00:07:03.199 align:start position:0%
now the functions that we define
 

00:07:03.199 --> 00:07:05.589 align:start position:0%
now the functions that we define
in<00:07:03.360><c> between</c><00:07:03.680><c> these</c><00:07:03.840><c> curly</c><00:07:04.160><c> braces</c><00:07:04.800><c> belong</c><00:07:05.440><c> to</c>

00:07:05.589 --> 00:07:05.599 align:start position:0%
in between these curly braces belong to
 

00:07:05.599 --> 00:07:06.550 align:start position:0%
in between these curly braces belong to
this<00:07:05.840><c> class</c>

00:07:06.550 --> 00:07:06.560 align:start position:0%
this class
 

00:07:06.560 --> 00:07:08.950 align:start position:0%
this class
and<00:07:07.039><c> more</c><00:07:07.280><c> accurately</c><00:07:07.759><c> we</c><00:07:07.919><c> refer</c><00:07:08.240><c> to</c><00:07:08.319><c> them</c><00:07:08.639><c> as</c>

00:07:08.950 --> 00:07:08.960 align:start position:0%
and more accurately we refer to them as
 

00:07:08.960 --> 00:07:09.909 align:start position:0%
and more accurately we refer to them as
methods

00:07:09.909 --> 00:07:09.919 align:start position:0%
methods
 

00:07:09.919 --> 00:07:12.150 align:start position:0%
methods
so<00:07:10.080><c> a</c><00:07:10.240><c> method</c><00:07:10.720><c> is</c><00:07:10.880><c> a</c><00:07:11.039><c> function</c><00:07:11.520><c> that</c><00:07:11.759><c> is</c><00:07:11.919><c> part</c>

00:07:12.150 --> 00:07:12.160 align:start position:0%
so a method is a function that is part
 

00:07:12.160 --> 00:07:13.110 align:start position:0%
so a method is a function that is part
of<00:07:12.240><c> a</c><00:07:12.400><c> class</c>

00:07:13.110 --> 00:07:13.120 align:start position:0%
of a class
 

00:07:13.120 --> 00:07:14.870 align:start position:0%
of a class
in<00:07:13.280><c> some</c><00:07:13.520><c> programming</c><00:07:13.840><c> languages</c><00:07:14.400><c> like</c>

00:07:14.870 --> 00:07:14.880 align:start position:0%
in some programming languages like
 

00:07:14.880 --> 00:07:16.710 align:start position:0%
in some programming languages like
python<00:07:15.520><c> we</c><00:07:15.680><c> can</c><00:07:15.759><c> have</c><00:07:16.000><c> a</c><00:07:16.080><c> function</c>

00:07:16.710 --> 00:07:16.720 align:start position:0%
python we can have a function
 

00:07:16.720 --> 00:07:19.189 align:start position:0%
python we can have a function
that<00:07:16.960><c> exists</c><00:07:17.759><c> outside</c><00:07:18.160><c> of</c><00:07:18.319><c> a</c><00:07:18.400><c> class</c><00:07:18.880><c> so</c><00:07:19.039><c> we</c>

00:07:19.189 --> 00:07:19.199 align:start position:0%
that exists outside of a class so we
 

00:07:19.199 --> 00:07:20.309 align:start position:0%
that exists outside of a class so we
call<00:07:19.360><c> it</c><00:07:19.520><c> a</c><00:07:19.599><c> function</c>

00:07:20.309 --> 00:07:20.319 align:start position:0%
call it a function
 

00:07:20.319 --> 00:07:22.309 align:start position:0%
call it a function
but<00:07:20.560><c> when</c><00:07:20.720><c> a</c><00:07:20.800><c> function</c><00:07:21.199><c> belongs</c><00:07:21.599><c> to</c><00:07:21.759><c> a</c><00:07:21.840><c> class</c>

00:07:22.309 --> 00:07:22.319 align:start position:0%
but when a function belongs to a class
 

00:07:22.319 --> 00:07:24.790 align:start position:0%
but when a function belongs to a class
we<00:07:22.479><c> refer</c><00:07:22.800><c> to</c><00:07:22.960><c> it</c><00:07:23.199><c> as</c><00:07:23.360><c> a</c><00:07:23.520><c> method</c><00:07:23.919><c> of</c><00:07:24.000><c> that</c><00:07:24.240><c> class</c>

00:07:24.790 --> 00:07:24.800 align:start position:0%
we refer to it as a method of that class
 

00:07:24.800 --> 00:07:28.629 align:start position:0%
we refer to it as a method of that class
okay<00:07:25.840><c> now</c><00:07:26.240><c> in</c><00:07:26.479><c> java</c><00:07:27.199><c> all</c><00:07:27.360><c> these</c><00:07:27.599><c> classes</c><00:07:28.240><c> and</c>

00:07:28.629 --> 00:07:28.639 align:start position:0%
okay now in java all these classes and
 

00:07:28.639 --> 00:07:31.749 align:start position:0%
okay now in java all these classes and
methods<00:07:29.520><c> should</c><00:07:29.680><c> have</c><00:07:29.919><c> an</c><00:07:30.319><c> access</c><00:07:30.880><c> modifier</c>

00:07:31.749 --> 00:07:31.759 align:start position:0%
methods should have an access modifier
 

00:07:31.759 --> 00:07:34.230 align:start position:0%
methods should have an access modifier
an<00:07:32.000><c> access</c><00:07:32.319><c> modifier</c><00:07:32.880><c> is</c><00:07:33.039><c> a</c><00:07:33.120><c> special</c><00:07:33.520><c> keyword</c>

00:07:34.230 --> 00:07:34.240 align:start position:0%
an access modifier is a special keyword
 

00:07:34.240 --> 00:07:35.350 align:start position:0%
an access modifier is a special keyword
that<00:07:34.479><c> determines</c>

00:07:35.350 --> 00:07:35.360 align:start position:0%
that determines
 

00:07:35.360 --> 00:07:37.350 align:start position:0%
that determines
if<00:07:35.599><c> other</c><00:07:35.840><c> classes</c><00:07:36.400><c> and</c><00:07:36.639><c> methods</c><00:07:37.039><c> in</c><00:07:37.120><c> this</c>

00:07:37.350 --> 00:07:37.360 align:start position:0%
if other classes and methods in this
 

00:07:37.360 --> 00:07:39.029 align:start position:0%
if other classes and methods in this
program<00:07:37.919><c> can</c><00:07:38.319><c> access</c>

00:07:39.029 --> 00:07:39.039 align:start position:0%
program can access
 

00:07:39.039 --> 00:07:41.029 align:start position:0%
program can access
these<00:07:39.280><c> classes</c><00:07:39.840><c> and</c><00:07:40.000><c> methods</c><00:07:40.720><c> we</c><00:07:40.880><c> have</c>

00:07:41.029 --> 00:07:41.039 align:start position:0%
these classes and methods we have
 

00:07:41.039 --> 00:07:42.469 align:start position:0%
these classes and methods we have
various<00:07:41.360><c> access</c><00:07:41.759><c> modifiers</c>

00:07:42.469 --> 00:07:42.479 align:start position:0%
various access modifiers
 

00:07:42.479 --> 00:07:45.350 align:start position:0%
various access modifiers
like<00:07:42.800><c> public</c><00:07:43.520><c> private</c><00:07:43.919><c> and</c><00:07:44.080><c> so</c><00:07:44.240><c> on</c><00:07:44.879><c> now</c><00:07:45.120><c> most</c>

00:07:45.350 --> 00:07:45.360 align:start position:0%
like public private and so on now most
 

00:07:45.360 --> 00:07:47.029 align:start position:0%
like public private and so on now most
of<00:07:45.520><c> the</c><00:07:45.599><c> time</c><00:07:45.759><c> we</c><00:07:45.919><c> use</c><00:07:46.080><c> the</c><00:07:46.240><c> public</c><00:07:46.639><c> access</c>

00:07:47.029 --> 00:07:47.039 align:start position:0%
of the time we use the public access
 

00:07:47.039 --> 00:07:47.909 align:start position:0%
of the time we use the public access
modifier

00:07:47.909 --> 00:07:47.919 align:start position:0%
modifier
 

00:07:47.919 --> 00:07:50.550 align:start position:0%
modifier
so<00:07:48.160><c> we</c><00:07:48.319><c> put</c><00:07:48.479><c> that</c><00:07:49.039><c> in</c><00:07:49.199><c> front</c><00:07:49.440><c> of</c><00:07:49.599><c> our</c><00:07:49.759><c> class</c><00:07:50.400><c> and</c>

00:07:50.550 --> 00:07:50.560 align:start position:0%
so we put that in front of our class and
 

00:07:50.560 --> 00:07:52.309 align:start position:0%
so we put that in front of our class and
method<00:07:50.960><c> declarations</c>

00:07:52.309 --> 00:07:52.319 align:start position:0%
method declarations
 

00:07:52.319 --> 00:07:54.710 align:start position:0%
method declarations
so<00:07:52.479><c> this</c><00:07:52.639><c> is</c><00:07:52.800><c> the</c><00:07:52.960><c> basic</c><00:07:53.440><c> structure</c><00:07:54.000><c> of</c><00:07:54.160><c> a</c><00:07:54.319><c> java</c>

00:07:54.710 --> 00:07:54.720 align:start position:0%
so this is the basic structure of a java
 

00:07:54.720 --> 00:07:55.510 align:start position:0%
so this is the basic structure of a java
program

00:07:55.510 --> 00:07:55.520 align:start position:0%
program
 

00:07:55.520 --> 00:07:58.309 align:start position:0%
program
at<00:07:55.680><c> a</c><00:07:55.759><c> minimum</c><00:07:56.160><c> we</c><00:07:56.319><c> have</c><00:07:56.720><c> a</c><00:07:56.960><c> main</c><00:07:57.199><c> class</c><00:07:58.000><c> and</c>

00:07:58.309 --> 00:07:58.319 align:start position:0%
at a minimum we have a main class and
 

00:07:58.319 --> 00:07:59.990 align:start position:0%
at a minimum we have a main class and
inside<00:07:58.639><c> this</c><00:07:58.879><c> main</c><00:07:59.120><c> class</c><00:07:59.360><c> we</c><00:07:59.520><c> have</c>

00:07:59.990 --> 00:08:00.000 align:start position:0%
inside this main class we have
 

00:08:00.000 --> 00:08:02.390 align:start position:0%
inside this main class we have
the<00:08:00.160><c> main</c><00:08:00.479><c> method</c><00:08:01.280><c> now</c><00:08:01.520><c> you</c><00:08:01.599><c> might</c><00:08:01.759><c> be</c><00:08:01.919><c> curious</c>

00:08:02.390 --> 00:08:02.400 align:start position:0%
the main method now you might be curious
 

00:08:02.400 --> 00:08:04.150 align:start position:0%
the main method now you might be curious
why<00:08:02.639><c> we</c><00:08:02.800><c> have</c><00:08:02.879><c> a</c><00:08:03.039><c> capital</c><00:08:03.599><c> m</c>

00:08:04.150 --> 00:08:04.160 align:start position:0%
why we have a capital m
 

00:08:04.160 --> 00:08:06.150 align:start position:0%
why we have a capital m
in<00:08:04.240><c> the</c><00:08:04.400><c> name</c><00:08:04.639><c> of</c><00:08:04.720><c> this</c><00:08:04.960><c> class</c><00:08:05.680><c> because</c><00:08:06.000><c> in</c>

00:08:06.150 --> 00:08:06.160 align:start position:0%
in the name of this class because in
 

00:08:06.160 --> 00:08:07.909 align:start position:0%
in the name of this class because in
java<00:08:06.479><c> we</c><00:08:06.639><c> use</c><00:08:06.800><c> different</c><00:08:07.120><c> conventions</c><00:08:07.680><c> for</c>

00:08:07.909 --> 00:08:07.919 align:start position:0%
java we use different conventions for
 

00:08:07.919 --> 00:08:09.430 align:start position:0%
java we use different conventions for
naming<00:08:08.240><c> our</c><00:08:08.400><c> classes</c><00:08:09.039><c> and</c>

00:08:09.430 --> 00:08:09.440 align:start position:0%
naming our classes and
 

00:08:09.440 --> 00:08:11.909 align:start position:0%
naming our classes and
our<00:08:09.680><c> methods</c><00:08:10.400><c> to</c><00:08:10.560><c> name</c><00:08:10.800><c> our</c><00:08:10.960><c> classes</c><00:08:11.440><c> we</c><00:08:11.520><c> use</c>

00:08:11.909 --> 00:08:11.919 align:start position:0%
our methods to name our classes we use
 

00:08:11.919 --> 00:08:13.029 align:start position:0%
our methods to name our classes we use
the<00:08:12.160><c> pascal</c>

00:08:13.029 --> 00:08:13.039 align:start position:0%
the pascal
 

00:08:13.039 --> 00:08:15.029 align:start position:0%
the pascal
naming<00:08:13.360><c> convention</c><00:08:14.319><c> and</c><00:08:14.400><c> that</c><00:08:14.639><c> basically</c>

00:08:15.029 --> 00:08:15.039 align:start position:0%
naming convention and that basically
 

00:08:15.039 --> 00:08:16.550 align:start position:0%
naming convention and that basically
means<00:08:15.440><c> the</c><00:08:15.680><c> first</c><00:08:16.000><c> letter</c><00:08:16.319><c> of</c>

00:08:16.550 --> 00:08:16.560 align:start position:0%
means the first letter of
 

00:08:16.560 --> 00:08:18.629 align:start position:0%
means the first letter of
every<00:08:16.800><c> word</c><00:08:17.039><c> should</c><00:08:17.199><c> be</c><00:08:17.440><c> uppercase</c><00:08:18.479><c> in</c>

00:08:18.629 --> 00:08:18.639 align:start position:0%
every word should be uppercase in
 

00:08:18.639 --> 00:08:20.629 align:start position:0%
every word should be uppercase in
contrast<00:08:19.360><c> to</c><00:08:19.599><c> name</c><00:08:19.840><c> our</c><00:08:20.000><c> method</c>

00:08:20.629 --> 00:08:20.639 align:start position:0%
contrast to name our method
 

00:08:20.639 --> 00:08:22.550 align:start position:0%
contrast to name our method
we<00:08:20.800><c> use</c><00:08:20.960><c> the</c><00:08:21.199><c> camel</c><00:08:21.520><c> naming</c><00:08:21.840><c> convention</c><00:08:22.400><c> and</c>

00:08:22.550 --> 00:08:22.560 align:start position:0%
we use the camel naming convention and
 

00:08:22.560 --> 00:08:24.309 align:start position:0%
we use the camel naming convention and
that<00:08:22.720><c> means</c><00:08:23.280><c> the</c><00:08:23.520><c> first</c><00:08:23.840><c> letter</c>

00:08:24.309 --> 00:08:24.319 align:start position:0%
that means the first letter
 

00:08:24.319 --> 00:08:26.790 align:start position:0%
that means the first letter
of<00:08:24.639><c> every</c><00:08:24.879><c> word</c><00:08:25.120><c> should</c><00:08:25.280><c> be</c><00:08:25.440><c> uppercase</c><00:08:26.160><c> except</c>

00:08:26.790 --> 00:08:26.800 align:start position:0%
of every word should be uppercase except
 

00:08:26.800 --> 00:08:28.070 align:start position:0%
of every word should be uppercase except
the<00:08:26.960><c> first</c><00:08:27.280><c> word</c>

00:08:28.070 --> 00:08:28.080 align:start position:0%
the first word
 

00:08:28.080 --> 00:08:30.390 align:start position:0%
the first word
so<00:08:28.319><c> that</c><00:08:28.560><c> is</c><00:08:28.639><c> why</c><00:08:28.879><c> we</c><00:08:28.960><c> have</c><00:08:29.120><c> a</c><00:08:29.280><c> capital</c><00:08:29.840><c> m</c><00:08:30.240><c> in</c>

00:08:30.390 --> 00:08:30.400 align:start position:0%
so that is why we have a capital m in
 

00:08:30.400 --> 00:08:31.830 align:start position:0%
so that is why we have a capital m in
the<00:08:30.479><c> name</c><00:08:30.639><c> of</c><00:08:30.800><c> this</c><00:08:30.960><c> class</c>

00:08:31.830 --> 00:08:31.840 align:start position:0%
the name of this class
 

00:08:31.840 --> 00:08:33.430 align:start position:0%
the name of this class
all<00:08:31.919><c> right</c><00:08:32.080><c> now</c><00:08:32.240><c> that</c><00:08:32.399><c> you</c><00:08:32.560><c> understand</c><00:08:33.200><c> the</c>

00:08:33.430 --> 00:08:33.440 align:start position:0%
all right now that you understand the
 

00:08:33.440 --> 00:08:35.029 align:start position:0%
all right now that you understand the
anatomy<00:08:33.839><c> of</c><00:08:34.000><c> a</c><00:08:34.080><c> java</c><00:08:34.479><c> program</c>

00:08:35.029 --> 00:08:35.039 align:start position:0%
anatomy of a java program
 

00:08:35.039 --> 00:08:37.430 align:start position:0%
anatomy of a java program
let's<00:08:35.360><c> create</c><00:08:35.680><c> a</c><00:08:35.760><c> new</c><00:08:36.000><c> java</c><00:08:36.399><c> project</c><00:08:37.039><c> and</c><00:08:37.200><c> see</c>

00:08:37.430 --> 00:08:37.440 align:start position:0%
let's create a new java project and see
 

00:08:37.440 --> 00:08:45.190 align:start position:0%
let's create a new java project and see
all<00:08:37.599><c> these</c><00:08:37.839><c> building</c><00:08:38.159><c> blocks</c><00:08:38.560><c> in</c><00:08:38.839><c> action</c>

00:08:45.190 --> 00:08:45.200 align:start position:0%
 
 

00:08:45.200 --> 00:08:46.470 align:start position:0%
 
in<00:08:45.360><c> this</c><00:08:45.519><c> java</c><00:08:45.839><c> tutorial</c><00:08:46.240><c> you're</c><00:08:46.320><c> going</c><00:08:46.399><c> to</c>

00:08:46.470 --> 00:08:46.480 align:start position:0%
in this java tutorial you're going to
 

00:08:46.480 --> 00:08:48.389 align:start position:0%
in this java tutorial you're going to
learn<00:08:46.800><c> how</c><00:08:46.959><c> to</c><00:08:47.200><c> write</c><00:08:47.519><c> and</c><00:08:47.760><c> execute</c><00:08:48.240><c> your</c>

00:08:48.389 --> 00:08:48.399 align:start position:0%
learn how to write and execute your
 

00:08:48.399 --> 00:08:48.870 align:start position:0%
learn how to write and execute your
first

00:08:48.870 --> 00:08:48.880 align:start position:0%
first
 

00:08:48.880 --> 00:08:52.949 align:start position:0%
first
java<00:08:49.279><c> program</c><00:08:50.080><c> so</c><00:08:50.240><c> let's</c><00:08:50.480><c> open</c><00:08:50.800><c> intellij</c><00:08:51.440><c> idea</c>

00:08:52.949 --> 00:08:52.959 align:start position:0%
java program so let's open intellij idea
 

00:08:52.959 --> 00:08:55.030 align:start position:0%
java program so let's open intellij idea
here<00:08:53.200><c> on</c><00:08:53.279><c> the</c><00:08:53.360><c> home</c><00:08:53.600><c> screen</c><00:08:54.080><c> let's</c><00:08:54.399><c> create</c><00:08:54.959><c> a</c>

00:08:55.030 --> 00:08:55.040 align:start position:0%
here on the home screen let's create a
 

00:08:55.040 --> 00:08:57.269 align:start position:0%
here on the home screen let's create a
new<00:08:55.360><c> project</c>

00:08:57.269 --> 00:08:57.279 align:start position:0%
new project
 

00:08:57.279 --> 00:08:59.750 align:start position:0%
new project
all<00:08:57.440><c> right</c><00:08:57.600><c> on</c><00:08:57.760><c> the</c><00:08:57.839><c> left</c><00:08:58.080><c> side</c><00:08:58.480><c> select</c><00:08:58.880><c> java</c>

00:08:59.750 --> 00:08:59.760 align:start position:0%
all right on the left side select java
 

00:08:59.760 --> 00:09:00.470 align:start position:0%
all right on the left side select java
and<00:09:00.000><c> make</c><00:09:00.160><c> sure</c>

00:09:00.470 --> 00:09:00.480 align:start position:0%
and make sure
 

00:09:00.480 --> 00:09:03.190 align:start position:0%
and make sure
project<00:09:00.880><c> sdk</c><00:09:01.519><c> is</c><00:09:01.760><c> not</c><00:09:02.080><c> blank</c><00:09:02.560><c> so</c><00:09:02.720><c> earlier</c><00:09:03.040><c> we</c>

00:09:03.190 --> 00:09:03.200 align:start position:0%
project sdk is not blank so earlier we
 

00:09:03.200 --> 00:09:04.949 align:start position:0%
project sdk is not blank so earlier we
downloaded<00:09:03.760><c> jdk</c><00:09:04.399><c> or</c>

00:09:04.949 --> 00:09:04.959 align:start position:0%
downloaded jdk or
 

00:09:04.959 --> 00:09:07.990 align:start position:0%
downloaded jdk or
java<00:09:05.519><c> development</c><00:09:06.160><c> kit</c><00:09:06.560><c> version</c><00:09:06.880><c> 12.</c><00:09:07.600><c> that</c><00:09:07.839><c> is</c>

00:09:07.990 --> 00:09:08.000 align:start position:0%
java development kit version 12. that is
 

00:09:08.000 --> 00:09:08.389 align:start position:0%
java development kit version 12. that is
why

00:09:08.389 --> 00:09:08.399 align:start position:0%
why
 

00:09:08.399 --> 00:09:10.710 align:start position:0%
why
jdk<00:09:08.880><c> version</c><00:09:09.200><c> 12</c><00:09:09.600><c> is</c><00:09:09.680><c> selected</c><00:09:10.160><c> here</c><00:09:10.480><c> if</c><00:09:10.640><c> you</c>

00:09:10.710 --> 00:09:10.720 align:start position:0%
jdk version 12 is selected here if you
 

00:09:10.720 --> 00:09:11.910 align:start position:0%
jdk version 12 is selected here if you
don't<00:09:10.880><c> see</c><00:09:11.040><c> that</c><00:09:11.279><c> make</c><00:09:11.440><c> sure</c>

00:09:11.910 --> 00:09:11.920 align:start position:0%
don't see that make sure
 

00:09:11.920 --> 00:09:14.230 align:start position:0%
don't see that make sure
to<00:09:12.160><c> select</c><00:09:12.480><c> it</c><00:09:12.560><c> from</c><00:09:12.720><c> this</c><00:09:12.959><c> drop-down</c><00:09:13.360><c> list</c>

00:09:14.230 --> 00:09:14.240 align:start position:0%
to select it from this drop-down list
 

00:09:14.240 --> 00:09:15.509 align:start position:0%
to select it from this drop-down list
alright<00:09:14.640><c> now</c><00:09:14.880><c> let's</c><00:09:15.120><c> click</c>

00:09:15.509 --> 00:09:15.519 align:start position:0%
alright now let's click
 

00:09:15.519 --> 00:09:18.630 align:start position:0%
alright now let's click
on<00:09:15.760><c> next</c><00:09:16.720><c> on</c><00:09:16.880><c> this</c><00:09:17.040><c> page</c><00:09:17.680><c> select</c><00:09:18.240><c> create</c>

00:09:18.630 --> 00:09:18.640 align:start position:0%
on next on this page select create
 

00:09:18.640 --> 00:09:20.070 align:start position:0%
on next on this page select create
project<00:09:18.959><c> from</c><00:09:19.200><c> template</c>

00:09:20.070 --> 00:09:20.080 align:start position:0%
project from template
 

00:09:20.080 --> 00:09:21.829 align:start position:0%
project from template
so<00:09:20.240><c> we're</c><00:09:20.399><c> going</c><00:09:20.480><c> to</c><00:09:20.640><c> create</c><00:09:21.040><c> a</c><00:09:21.200><c> command</c><00:09:21.600><c> line</c>

00:09:21.829 --> 00:09:21.839 align:start position:0%
so we're going to create a command line
 

00:09:21.839 --> 00:09:23.590 align:start position:0%
so we're going to create a command line
application<00:09:22.480><c> which</c><00:09:22.720><c> is</c><00:09:22.800><c> an</c><00:09:22.959><c> application</c><00:09:23.440><c> that</c>

00:09:23.590 --> 00:09:23.600 align:start position:0%
application which is an application that
 

00:09:23.600 --> 00:09:24.310 align:start position:0%
application which is an application that
we<00:09:23.760><c> can</c><00:09:23.920><c> run</c>

00:09:24.310 --> 00:09:24.320 align:start position:0%
we can run
 

00:09:24.320 --> 00:09:26.710 align:start position:0%
we can run
from<00:09:24.480><c> the</c><00:09:24.640><c> command</c><00:09:25.120><c> line</c><00:09:25.519><c> it</c><00:09:25.760><c> doesn't</c><00:09:26.080><c> have</c><00:09:26.480><c> a</c>

00:09:26.710 --> 00:09:26.720 align:start position:0%
from the command line it doesn't have a
 

00:09:26.720 --> 00:09:28.230 align:start position:0%
from the command line it doesn't have a
graphical<00:09:27.279><c> user</c><00:09:27.600><c> interface</c>

00:09:28.230 --> 00:09:28.240 align:start position:0%
graphical user interface
 

00:09:28.240 --> 00:09:30.150 align:start position:0%
graphical user interface
or<00:09:28.320><c> a</c><00:09:28.480><c> gui</c><00:09:29.120><c> now</c><00:09:29.360><c> i</c><00:09:29.440><c> know</c><00:09:29.600><c> a</c><00:09:29.680><c> command</c><00:09:29.920><c> line</c>

00:09:30.150 --> 00:09:30.160 align:start position:0%
or a gui now i know a command line
 

00:09:30.160 --> 00:09:32.230 align:start position:0%
or a gui now i know a command line
application<00:09:30.720><c> is</c><00:09:30.880><c> not</c><00:09:31.120><c> as</c><00:09:31.360><c> exciting</c><00:09:31.760><c> as</c>

00:09:32.230 --> 00:09:32.240 align:start position:0%
application is not as exciting as
 

00:09:32.240 --> 00:09:33.990 align:start position:0%
application is not as exciting as
an<00:09:32.399><c> application</c><00:09:32.880><c> with</c><00:09:33.040><c> a</c><00:09:33.120><c> graphical</c><00:09:33.680><c> user</c>

00:09:33.990 --> 00:09:34.000 align:start position:0%
an application with a graphical user
 

00:09:34.000 --> 00:09:36.310 align:start position:0%
an application with a graphical user
interface<00:09:34.720><c> like</c><00:09:34.959><c> a</c><00:09:35.040><c> mobile</c><00:09:35.440><c> app</c><00:09:35.680><c> or</c><00:09:35.760><c> a</c><00:09:35.839><c> desktop</c>

00:09:36.310 --> 00:09:36.320 align:start position:0%
interface like a mobile app or a desktop
 

00:09:36.320 --> 00:09:36.870 align:start position:0%
interface like a mobile app or a desktop
app

00:09:36.870 --> 00:09:36.880 align:start position:0%
app
 

00:09:36.880 --> 00:09:38.630 align:start position:0%
app
but<00:09:37.040><c> trust</c><00:09:37.360><c> me</c><00:09:37.760><c> building</c><00:09:38.080><c> an</c><00:09:38.240><c> application</c>

00:09:38.630 --> 00:09:38.640 align:start position:0%
but trust me building an application
 

00:09:38.640 --> 00:09:40.230 align:start position:0%
but trust me building an application
with<00:09:38.800><c> a</c><00:09:38.959><c> graphical</c><00:09:39.360><c> user</c><00:09:39.600><c> interface</c>

00:09:40.230 --> 00:09:40.240 align:start position:0%
with a graphical user interface
 

00:09:40.240 --> 00:09:42.150 align:start position:0%
with a graphical user interface
is<00:09:40.399><c> very</c><00:09:40.640><c> complicated</c><00:09:41.519><c> so</c><00:09:41.680><c> for</c><00:09:41.839><c> now</c><00:09:42.000><c> we're</c>

00:09:42.150 --> 00:09:42.160 align:start position:0%
is very complicated so for now we're
 

00:09:42.160 --> 00:09:43.509 align:start position:0%
is very complicated so for now we're
just<00:09:42.320><c> going</c><00:09:42.480><c> to</c><00:09:42.560><c> build</c><00:09:42.880><c> command</c><00:09:43.200><c> line</c>

00:09:43.509 --> 00:09:43.519 align:start position:0%
just going to build command line
 

00:09:43.519 --> 00:09:44.230 align:start position:0%
just going to build command line
applications

00:09:44.230 --> 00:09:44.240 align:start position:0%
applications
 

00:09:44.240 --> 00:09:46.710 align:start position:0%
applications
to<00:09:44.399><c> learn</c><00:09:44.720><c> java</c><00:09:45.200><c> properly</c><00:09:46.080><c> once</c><00:09:46.320><c> you</c><00:09:46.480><c> learn</c>

00:09:46.710 --> 00:09:46.720 align:start position:0%
to learn java properly once you learn
 

00:09:46.720 --> 00:09:48.470 align:start position:0%
to learn java properly once you learn
java<00:09:47.040><c> properly</c><00:09:47.600><c> then</c><00:09:47.760><c> you</c><00:09:47.920><c> can</c><00:09:48.000><c> learn</c><00:09:48.240><c> about</c>

00:09:48.470 --> 00:09:48.480 align:start position:0%
java properly then you can learn about
 

00:09:48.480 --> 00:09:49.110 align:start position:0%
java properly then you can learn about
building

00:09:49.110 --> 00:09:49.120 align:start position:0%
building
 

00:09:49.120 --> 00:09:51.910 align:start position:0%
building
desktop<00:09:49.760><c> or</c><00:09:49.920><c> mobile</c><00:09:50.320><c> applications</c><00:09:50.800><c> with</c><00:09:50.959><c> java</c>

00:09:51.910 --> 00:09:51.920 align:start position:0%
desktop or mobile applications with java
 

00:09:51.920 --> 00:09:52.389 align:start position:0%
desktop or mobile applications with java
all<00:09:52.080><c> right</c>

00:09:52.389 --> 00:09:52.399 align:start position:0%
all right
 

00:09:52.399 --> 00:09:55.829 align:start position:0%
all right
now<00:09:52.640><c> let's</c><00:09:52.880><c> click</c><00:09:53.360><c> on</c><00:09:53.600><c> next</c><00:09:55.120><c> on</c><00:09:55.279><c> this</c><00:09:55.440><c> page</c><00:09:55.680><c> we</c>

00:09:55.829 --> 00:09:55.839 align:start position:0%
now let's click on next on this page we
 

00:09:55.839 --> 00:09:57.509 align:start position:0%
now let's click on next on this page we
have<00:09:55.920><c> to</c><00:09:56.000><c> give</c><00:09:56.240><c> our</c><00:09:56.399><c> project</c><00:09:56.800><c> a</c><00:09:56.959><c> name</c>

00:09:57.509 --> 00:09:57.519 align:start position:0%
have to give our project a name
 

00:09:57.519 --> 00:10:00.949 align:start position:0%
have to give our project a name
let's<00:09:57.760><c> call</c><00:09:57.920><c> it</c><00:09:58.080><c> hello</c><00:09:58.720><c> world</c><00:10:00.399><c> now</c><00:10:00.640><c> over</c><00:10:00.800><c> here</c>

00:10:00.949 --> 00:10:00.959 align:start position:0%
let's call it hello world now over here
 

00:10:00.959 --> 00:10:03.030 align:start position:0%
let's call it hello world now over here
you<00:10:01.040><c> can</c><00:10:01.200><c> see</c><00:10:01.360><c> the</c><00:10:01.519><c> location</c><00:10:01.920><c> of</c><00:10:02.000><c> this</c><00:10:02.240><c> project</c>

00:10:03.030 --> 00:10:03.040 align:start position:0%
you can see the location of this project
 

00:10:03.040 --> 00:10:06.310 align:start position:0%
you can see the location of this project
so<00:10:03.440><c> it's</c><00:10:03.760><c> inside</c><00:10:04.320><c> the</c><00:10:04.560><c> idea</c><00:10:04.959><c> projects</c><00:10:05.360><c> folder</c>

00:10:06.310 --> 00:10:06.320 align:start position:0%
so it's inside the idea projects folder
 

00:10:06.320 --> 00:10:08.150 align:start position:0%
so it's inside the idea projects folder
now<00:10:06.560><c> right</c><00:10:06.720><c> below</c><00:10:06.959><c> that</c><00:10:07.120><c> you</c><00:10:07.200><c> can</c><00:10:07.440><c> see</c><00:10:07.920><c> the</c>

00:10:08.150 --> 00:10:08.160 align:start position:0%
now right below that you can see the
 

00:10:08.160 --> 00:10:10.389 align:start position:0%
now right below that you can see the
base<00:10:08.480><c> package</c><00:10:09.120><c> which</c><00:10:09.360><c> is</c><00:10:09.440><c> set</c><00:10:09.680><c> to</c><00:10:09.839><c> com</c>

00:10:10.389 --> 00:10:10.399 align:start position:0%
base package which is set to com
 

00:10:10.399 --> 00:10:12.790 align:start position:0%
base package which is set to com
that<00:10:10.640><c> code</c><00:10:10.880><c> with</c><00:10:11.120><c> mosh</c><00:10:11.600><c> on</c><00:10:11.839><c> my</c><00:10:12.000><c> machine</c><00:10:12.720><c> and</c>

00:10:12.790 --> 00:10:12.800 align:start position:0%
that code with mosh on my machine and
 

00:10:12.800 --> 00:10:14.870 align:start position:0%
that code with mosh on my machine and
your<00:10:13.040><c> mission</c><00:10:13.360><c> is</c><00:10:13.519><c> probably</c><00:10:13.839><c> going</c><00:10:13.920><c> to</c><00:10:14.000><c> become</c>

00:10:14.870 --> 00:10:14.880 align:start position:0%
your mission is probably going to become
 

00:10:14.880 --> 00:10:18.069 align:start position:0%
your mission is probably going to become
that<00:10:15.440><c> package</c><00:10:16.320><c> what</c><00:10:16.480><c> is</c><00:10:16.640><c> this</c><00:10:17.279><c> well</c><00:10:17.760><c> earlier</c>

00:10:18.069 --> 00:10:18.079 align:start position:0%
that package what is this well earlier
 

00:10:18.079 --> 00:10:20.230 align:start position:0%
that package what is this well earlier
we<00:10:18.240><c> talked</c><00:10:18.480><c> about</c><00:10:18.720><c> classes</c><00:10:19.360><c> and</c><00:10:19.600><c> methods</c><00:10:20.079><c> i</c>

00:10:20.230 --> 00:10:20.240 align:start position:0%
we talked about classes and methods i
 

00:10:20.240 --> 00:10:22.230 align:start position:0%
we talked about classes and methods i
told<00:10:20.399><c> you</c><00:10:20.560><c> that</c><00:10:20.640><c> a</c><00:10:20.800><c> class</c><00:10:21.120><c> is</c><00:10:21.200><c> a</c><00:10:21.360><c> container</c>

00:10:22.230 --> 00:10:22.240 align:start position:0%
told you that a class is a container
 

00:10:22.240 --> 00:10:24.790 align:start position:0%
told you that a class is a container
for<00:10:22.480><c> related</c><00:10:22.959><c> methods</c><00:10:23.519><c> so</c><00:10:23.680><c> we</c><00:10:23.839><c> use</c><00:10:24.079><c> classes</c><00:10:24.560><c> to</c>

00:10:24.790 --> 00:10:24.800 align:start position:0%
for related methods so we use classes to
 

00:10:24.800 --> 00:10:26.389 align:start position:0%
for related methods so we use classes to
organize<00:10:25.360><c> our</c><00:10:25.519><c> code</c>

00:10:26.389 --> 00:10:26.399 align:start position:0%
organize our code
 

00:10:26.399 --> 00:10:28.470 align:start position:0%
organize our code
by<00:10:26.640><c> the</c><00:10:26.720><c> same</c><00:10:26.959><c> token</c><00:10:27.519><c> we</c><00:10:27.680><c> have</c><00:10:27.839><c> a</c><00:10:27.920><c> concept</c>

00:10:28.470 --> 00:10:28.480 align:start position:0%
by the same token we have a concept
 

00:10:28.480 --> 00:10:29.590 align:start position:0%
by the same token we have a concept
called<00:10:28.800><c> package</c>

00:10:29.590 --> 00:10:29.600 align:start position:0%
called package
 

00:10:29.600 --> 00:10:31.829 align:start position:0%
called package
and<00:10:29.760><c> we</c><00:10:29.920><c> use</c><00:10:30.079><c> a</c><00:10:30.240><c> package</c><00:10:30.640><c> to</c><00:10:30.880><c> group</c><00:10:31.360><c> related</c>

00:10:31.829 --> 00:10:31.839 align:start position:0%
and we use a package to group related
 

00:10:31.839 --> 00:10:32.710 align:start position:0%
and we use a package to group related
classes

00:10:32.710 --> 00:10:32.720 align:start position:0%
classes
 

00:10:32.720 --> 00:10:34.470 align:start position:0%
classes
so<00:10:32.880><c> as</c><00:10:33.040><c> our</c><00:10:33.200><c> applications</c><00:10:33.760><c> grow</c><00:10:34.240><c> we're</c><00:10:34.399><c> going</c>

00:10:34.470 --> 00:10:34.480 align:start position:0%
so as our applications grow we're going
 

00:10:34.480 --> 00:10:35.910 align:start position:0%
so as our applications grow we're going
to<00:10:34.560><c> end</c><00:10:34.720><c> up</c><00:10:34.880><c> with</c><00:10:35.040><c> hundreds</c><00:10:35.440><c> or</c><00:10:35.600><c> even</c>

00:10:35.910 --> 00:10:35.920 align:start position:0%
to end up with hundreds or even
 

00:10:35.920 --> 00:10:37.829 align:start position:0%
to end up with hundreds or even
thousands<00:10:36.399><c> of</c><00:10:36.480><c> classes</c><00:10:37.279><c> so</c><00:10:37.519><c> we</c><00:10:37.600><c> should</c>

00:10:37.829 --> 00:10:37.839 align:start position:0%
thousands of classes so we should
 

00:10:37.839 --> 00:10:39.750 align:start position:0%
thousands of classes so we should
properly<00:10:38.320><c> organize</c><00:10:38.800><c> these</c><00:10:38.959><c> classes</c>

00:10:39.750 --> 00:10:39.760 align:start position:0%
properly organize these classes
 

00:10:39.760 --> 00:10:42.710 align:start position:0%
properly organize these classes
into<00:10:40.160><c> packages</c><00:10:41.120><c> now</c><00:10:41.360><c> by</c><00:10:41.600><c> convention</c><00:10:42.160><c> the</c><00:10:42.399><c> base</c>

00:10:42.710 --> 00:10:42.720 align:start position:0%
into packages now by convention the base
 

00:10:42.720 --> 00:10:44.790 align:start position:0%
into packages now by convention the base
package<00:10:43.120><c> for</c><00:10:43.360><c> java</c><00:10:43.760><c> project</c><00:10:44.160><c> is</c><00:10:44.320><c> the</c><00:10:44.399><c> domain</c>

00:10:44.790 --> 00:10:44.800 align:start position:0%
package for java project is the domain
 

00:10:44.800 --> 00:10:46.790 align:start position:0%
package for java project is the domain
name<00:10:44.959><c> of</c><00:10:45.120><c> your</c><00:10:45.279><c> company</c><00:10:45.760><c> in</c><00:10:45.920><c> reverse</c>

00:10:46.790 --> 00:10:46.800 align:start position:0%
name of your company in reverse
 

00:10:46.800 --> 00:10:49.829 align:start position:0%
name of your company in reverse
so<00:10:47.440><c> my</c><00:10:47.600><c> website</c><00:10:48.079><c> is</c><00:10:48.519><c> codewithmosh.com</c><00:10:49.600><c> that</c>

00:10:49.829 --> 00:10:49.839 align:start position:0%
so my website is codewithmosh.com that
 

00:10:49.839 --> 00:10:51.430 align:start position:0%
so my website is codewithmosh.com that
is<00:10:49.920><c> why</c><00:10:50.160><c> i'm</c><00:10:50.240><c> going</c><00:10:50.320><c> to</c><00:10:50.399><c> set</c><00:10:50.640><c> the</c><00:10:50.800><c> base</c><00:10:51.040><c> package</c>

00:10:51.430 --> 00:10:51.440 align:start position:0%
is why i'm going to set the base package
 

00:10:51.440 --> 00:10:52.949 align:start position:0%
is why i'm going to set the base package
for<00:10:51.600><c> this</c><00:10:51.839><c> project</c><00:10:52.160><c> to</c><00:10:52.399><c> come</c>

00:10:52.949 --> 00:10:52.959 align:start position:0%
for this project to come
 

00:10:52.959 --> 00:10:55.509 align:start position:0%
for this project to come
that<00:10:53.279><c> code</c><00:10:53.920><c> with</c><00:10:54.240><c> mosh</c><00:10:54.880><c> now</c><00:10:55.040><c> it</c><00:10:55.120><c> doesn't</c><00:10:55.360><c> mean</c>

00:10:55.509 --> 00:10:55.519 align:start position:0%
that code with mosh now it doesn't mean
 

00:10:55.519 --> 00:10:56.230 align:start position:0%
that code with mosh now it doesn't mean
that<00:10:55.680><c> you</c><00:10:55.760><c> should</c><00:10:55.920><c> have</c><00:10:56.000><c> an</c>

00:10:56.230 --> 00:10:56.240 align:start position:0%
that you should have an
 

00:10:56.240 --> 00:10:58.470 align:start position:0%
that you should have an
actual<00:10:56.640><c> domain</c><00:10:57.040><c> registered</c><00:10:57.680><c> on</c><00:10:57.760><c> the</c><00:10:57.920><c> internet</c>

00:10:58.470 --> 00:10:58.480 align:start position:0%
actual domain registered on the internet
 

00:10:58.480 --> 00:11:00.710 align:start position:0%
actual domain registered on the internet
this<00:10:58.720><c> is</c><00:10:58.800><c> just</c><00:10:59.040><c> a</c><00:10:59.120><c> way</c><00:10:59.360><c> to</c><00:10:59.519><c> create</c><00:10:59.760><c> a</c><00:10:59.920><c> namespace</c>

00:11:00.710 --> 00:11:00.720 align:start position:0%
this is just a way to create a namespace
 

00:11:00.720 --> 00:11:03.110 align:start position:0%
this is just a way to create a namespace
for<00:11:00.880><c> our</c><00:11:01.040><c> classes</c><00:11:02.000><c> so</c><00:11:02.160><c> now</c><00:11:02.399><c> every</c><00:11:02.640><c> class</c><00:11:02.959><c> that</c>

00:11:03.110 --> 00:11:03.120 align:start position:0%
for our classes so now every class that
 

00:11:03.120 --> 00:11:04.470 align:start position:0%
for our classes so now every class that
we<00:11:03.279><c> create</c><00:11:03.519><c> in</c><00:11:03.680><c> this</c><00:11:03.839><c> project</c>

00:11:04.470 --> 00:11:04.480 align:start position:0%
we create in this project
 

00:11:04.480 --> 00:11:06.870 align:start position:0%
we create in this project
will<00:11:04.720><c> belong</c><00:11:05.360><c> to</c><00:11:05.519><c> this</c><00:11:05.760><c> package</c><00:11:06.640><c> we're</c><00:11:06.800><c> going</c>

00:11:06.870 --> 00:11:06.880 align:start position:0%
will belong to this package we're going
 

00:11:06.880 --> 00:11:08.710 align:start position:0%
will belong to this package we're going
to<00:11:06.959><c> talk</c><00:11:07.200><c> about</c><00:11:07.440><c> packages</c><00:11:07.920><c> in</c><00:11:08.000><c> more</c><00:11:08.240><c> detail</c><00:11:08.560><c> in</c>

00:11:08.710 --> 00:11:08.720 align:start position:0%
to talk about packages in more detail in
 

00:11:08.720 --> 00:11:09.750 align:start position:0%
to talk about packages in more detail in
the<00:11:08.800><c> future</c>

00:11:09.750 --> 00:11:09.760 align:start position:0%
the future
 

00:11:09.760 --> 00:11:11.910 align:start position:0%
the future
so<00:11:09.920><c> for</c><00:11:10.160><c> now</c><00:11:10.399><c> just</c><00:11:10.560><c> type</c><00:11:11.040><c> a</c><00:11:11.200><c> base</c><00:11:11.440><c> package</c><00:11:11.760><c> for</c>

00:11:11.910 --> 00:11:11.920 align:start position:0%
so for now just type a base package for
 

00:11:11.920 --> 00:11:12.790 align:start position:0%
so for now just type a base package for
your<00:11:12.079><c> project</c>

00:11:12.790 --> 00:11:12.800 align:start position:0%
your project
 

00:11:12.800 --> 00:11:14.949 align:start position:0%
your project
it<00:11:12.959><c> can</c><00:11:13.120><c> become</c><00:11:13.519><c> that</c><00:11:13.680><c> your</c><00:11:13.920><c> name</c><00:11:14.240><c> or</c><00:11:14.560><c> whatever</c>

00:11:14.949 --> 00:11:14.959 align:start position:0%
it can become that your name or whatever
 

00:11:14.959 --> 00:11:16.470 align:start position:0%
it can become that your name or whatever
it<00:11:15.120><c> doesn't</c><00:11:15.360><c> really</c><00:11:15.600><c> matter</c>

00:11:16.470 --> 00:11:16.480 align:start position:0%
it doesn't really matter
 

00:11:16.480 --> 00:11:20.230 align:start position:0%
it doesn't really matter
all<00:11:16.560><c> right</c><00:11:16.880><c> now</c><00:11:17.120><c> let's</c><00:11:17.360><c> go</c><00:11:17.600><c> forward</c>

00:11:20.230 --> 00:11:20.240 align:start position:0%
 
 

00:11:20.240 --> 00:11:22.389 align:start position:0%
 
all<00:11:20.399><c> right</c><00:11:20.480><c> here's</c><00:11:20.800><c> our</c><00:11:20.880><c> first</c><00:11:21.200><c> java</c><00:11:21.600><c> project</c>

00:11:22.389 --> 00:11:22.399 align:start position:0%
all right here's our first java project
 

00:11:22.399 --> 00:11:24.150 align:start position:0%
all right here's our first java project
now<00:11:22.560><c> this</c><00:11:22.800><c> code</c><00:11:23.040><c> editor</c><00:11:23.440><c> might</c><00:11:23.680><c> look</c><00:11:23.920><c> a</c><00:11:24.000><c> little</c>

00:11:24.150 --> 00:11:24.160 align:start position:0%
now this code editor might look a little
 

00:11:24.160 --> 00:11:25.829 align:start position:0%
now this code editor might look a little
bit<00:11:24.399><c> intimidating</c><00:11:25.040><c> at</c><00:11:25.200><c> first</c><00:11:25.440><c> but</c>

00:11:25.829 --> 00:11:25.839 align:start position:0%
bit intimidating at first but
 

00:11:25.839 --> 00:11:27.269 align:start position:0%
bit intimidating at first but
trust<00:11:26.079><c> me</c><00:11:26.240><c> it's</c><00:11:26.399><c> really</c><00:11:26.640><c> easy</c><00:11:27.040><c> and</c><00:11:27.120><c> you're</c>

00:11:27.269 --> 00:11:27.279 align:start position:0%
trust me it's really easy and you're
 

00:11:27.279 --> 00:11:28.470 align:start position:0%
trust me it's really easy and you're
going<00:11:27.360><c> to</c><00:11:27.440><c> learn</c><00:11:27.600><c> about</c><00:11:27.839><c> it</c><00:11:28.000><c> throughout</c><00:11:28.320><c> this</c>

00:11:28.470 --> 00:11:28.480 align:start position:0%
going to learn about it throughout this
 

00:11:28.480 --> 00:11:29.190 align:start position:0%
going to learn about it throughout this
course

00:11:29.190 --> 00:11:29.200 align:start position:0%
course
 

00:11:29.200 --> 00:11:31.030 align:start position:0%
course
on<00:11:29.360><c> the</c><00:11:29.440><c> left</c><00:11:29.680><c> side</c><00:11:29.920><c> we</c><00:11:30.000><c> have</c><00:11:30.399><c> the</c><00:11:30.640><c> project</c>

00:11:31.030 --> 00:11:31.040 align:start position:0%
on the left side we have the project
 

00:11:31.040 --> 00:11:32.550 align:start position:0%
on the left side we have the project
panel<00:11:31.440><c> where</c><00:11:31.920><c> we</c><00:11:32.079><c> can</c><00:11:32.240><c> see</c>

00:11:32.550 --> 00:11:32.560 align:start position:0%
panel where we can see
 

00:11:32.560 --> 00:11:35.509 align:start position:0%
panel where we can see
all<00:11:32.720><c> the</c><00:11:32.880><c> folders</c><00:11:33.440><c> and</c><00:11:33.839><c> files</c><00:11:34.399><c> in</c><00:11:34.560><c> our</c><00:11:34.720><c> project</c>

00:11:35.509 --> 00:11:35.519 align:start position:0%
all the folders and files in our project
 

00:11:35.519 --> 00:11:37.190 align:start position:0%
all the folders and files in our project
for<00:11:35.680><c> example</c>

00:11:37.190 --> 00:11:37.200 align:start position:0%
for example
 

00:11:37.200 --> 00:11:38.870 align:start position:0%
for example
on<00:11:37.360><c> the</c><00:11:37.440><c> top</c><00:11:37.680><c> we</c><00:11:37.839><c> have</c><00:11:38.160><c> the</c><00:11:38.320><c> hello</c><00:11:38.560><c> world</c>

00:11:38.870 --> 00:11:38.880 align:start position:0%
on the top we have the hello world
 

00:11:38.880 --> 00:11:41.430 align:start position:0%
on the top we have the hello world
project<00:11:39.920><c> inside</c><00:11:40.240><c> this</c><00:11:40.480><c> project</c><00:11:40.800><c> we</c><00:11:40.959><c> have</c>

00:11:41.430 --> 00:11:41.440 align:start position:0%
project inside this project we have
 

00:11:41.440 --> 00:11:43.190 align:start position:0%
project inside this project we have
the<00:11:41.600><c> source</c><00:11:42.000><c> folder</c><00:11:42.480><c> where</c><00:11:42.720><c> we</c><00:11:42.800><c> have</c><00:11:42.959><c> the</c>

00:11:43.190 --> 00:11:43.200 align:start position:0%
the source folder where we have the
 

00:11:43.200 --> 00:11:45.350 align:start position:0%
the source folder where we have the
source<00:11:43.519><c> code</c><00:11:44.079><c> of</c><00:11:44.240><c> our</c><00:11:44.399><c> project</c>

00:11:45.350 --> 00:11:45.360 align:start position:0%
source code of our project
 

00:11:45.360 --> 00:11:47.350 align:start position:0%
source code of our project
now<00:11:45.600><c> in</c><00:11:45.680><c> this</c><00:11:45.839><c> folder</c><00:11:46.160><c> we</c><00:11:46.320><c> have</c><00:11:47.040><c> another</c>

00:11:47.350 --> 00:11:47.360 align:start position:0%
now in this folder we have another
 

00:11:47.360 --> 00:11:50.150 align:start position:0%
now in this folder we have another
folder<00:11:48.000><c> that</c><00:11:48.240><c> is</c><00:11:48.440><c> com.code</c><00:11:49.440><c> with</c><00:11:49.600><c> mosh</c><00:11:49.920><c> that</c>

00:11:50.150 --> 00:11:50.160 align:start position:0%
folder that is com.code with mosh that
 

00:11:50.160 --> 00:11:52.069 align:start position:0%
folder that is com.code with mosh that
is<00:11:50.240><c> the</c><00:11:50.399><c> name</c><00:11:50.560><c> of</c><00:11:50.720><c> our</c><00:11:50.880><c> base</c><00:11:51.200><c> package</c>

00:11:52.069 --> 00:11:52.079 align:start position:0%
is the name of our base package
 

00:11:52.079 --> 00:11:54.949 align:start position:0%
is the name of our base package
and<00:11:52.240><c> in</c><00:11:52.320><c> this</c><00:11:52.560><c> package</c><00:11:53.120><c> we</c><00:11:53.360><c> have</c><00:11:54.079><c> this</c><00:11:54.320><c> class</c>

00:11:54.949 --> 00:11:54.959 align:start position:0%
and in this package we have this class
 

00:11:54.959 --> 00:11:56.069 align:start position:0%
and in this package we have this class
main

00:11:56.069 --> 00:11:56.079 align:start position:0%
main
 

00:11:56.079 --> 00:11:58.790 align:start position:0%
main
so<00:11:56.240><c> you</c><00:11:56.399><c> can</c><00:11:56.480><c> see</c><00:11:56.639><c> this</c><00:11:56.880><c> main</c><00:11:57.200><c> file</c><00:11:57.920><c> opened</c><00:11:58.639><c> on</c>

00:11:58.790 --> 00:11:58.800 align:start position:0%
so you can see this main file opened on
 

00:11:58.800 --> 00:11:59.910 align:start position:0%
so you can see this main file opened on
the<00:11:58.880><c> right</c><00:11:59.120><c> side</c><00:11:59.360><c> here</c>

00:11:59.910 --> 00:11:59.920 align:start position:0%
the right side here
 

00:11:59.920 --> 00:12:01.550 align:start position:0%
the right side here
now<00:12:00.079><c> look</c><00:12:00.240><c> at</c><00:12:00.320><c> the</c><00:12:00.480><c> name</c><00:12:00.720><c> of</c><00:12:00.800><c> this</c><00:12:00.959><c> file</c><00:12:01.200><c> it's</c>

00:12:01.550 --> 00:12:01.560 align:start position:0%
now look at the name of this file it's
 

00:12:01.560 --> 00:12:03.190 align:start position:0%
now look at the name of this file it's
main.java<00:12:02.880><c> so</c>

00:12:03.190 --> 00:12:03.200 align:start position:0%
main.java so
 

00:12:03.200 --> 00:12:05.750 align:start position:0%
main.java so
all<00:12:03.440><c> java</c><00:12:03.839><c> files</c><00:12:04.320><c> should</c><00:12:04.480><c> have</c><00:12:04.800><c> the</c><00:12:05.120><c> java</c>

00:12:05.750 --> 00:12:05.760 align:start position:0%
all java files should have the java
 

00:12:05.760 --> 00:12:06.629 align:start position:0%
all java files should have the java
extension

00:12:06.629 --> 00:12:06.639 align:start position:0%
extension
 

00:12:06.639 --> 00:12:09.670 align:start position:0%
extension
okay<00:12:07.680><c> now</c><00:12:08.240><c> let's</c><00:12:08.560><c> collapse</c><00:12:08.959><c> the</c><00:12:09.200><c> project</c>

00:12:09.670 --> 00:12:09.680 align:start position:0%
okay now let's collapse the project
 

00:12:09.680 --> 00:12:11.509 align:start position:0%
okay now let's collapse the project
panel<00:12:10.079><c> by</c><00:12:10.240><c> clicking</c><00:12:10.639><c> on</c><00:12:10.720><c> this</c><00:12:10.880><c> icon</c>

00:12:11.509 --> 00:12:11.519 align:start position:0%
panel by clicking on this icon
 

00:12:11.519 --> 00:12:14.550 align:start position:0%
panel by clicking on this icon
that<00:12:11.760><c> is</c><00:12:11.920><c> better</c><00:12:12.800><c> so</c><00:12:13.279><c> see</c><00:12:13.440><c> what</c><00:12:13.600><c> we</c><00:12:13.760><c> have</c><00:12:13.920><c> here</c>

00:12:14.550 --> 00:12:14.560 align:start position:0%
that is better so see what we have here
 

00:12:14.560 --> 00:12:17.110 align:start position:0%
that is better so see what we have here
on<00:12:14.720><c> top</c><00:12:14.959><c> of</c><00:12:15.040><c> this</c><00:12:15.279><c> file</c><00:12:15.920><c> we</c><00:12:16.079><c> have</c><00:12:16.240><c> the</c><00:12:16.480><c> package</c>

00:12:17.110 --> 00:12:17.120 align:start position:0%
on top of this file we have the package
 

00:12:17.120 --> 00:12:17.990 align:start position:0%
on top of this file we have the package
statement

00:12:17.990 --> 00:12:18.000 align:start position:0%
statement
 

00:12:18.000 --> 00:12:20.470 align:start position:0%
statement
and<00:12:18.079><c> this</c><00:12:18.320><c> is</c><00:12:18.399><c> used</c><00:12:18.560><c> to</c><00:12:18.720><c> specify</c><00:12:19.519><c> what</c><00:12:19.839><c> package</c>

00:12:20.470 --> 00:12:20.480 align:start position:0%
and this is used to specify what package
 

00:12:20.480 --> 00:12:21.430 align:start position:0%
and this is used to specify what package
this<00:12:20.800><c> class</c>

00:12:21.430 --> 00:12:21.440 align:start position:0%
this class
 

00:12:21.440 --> 00:12:24.230 align:start position:0%
this class
belongs<00:12:21.920><c> to</c><00:12:22.320><c> so</c><00:12:23.200><c> the</c><00:12:23.440><c> main</c><00:12:23.680><c> class</c><00:12:24.000><c> that</c><00:12:24.079><c> we</c>

00:12:24.230 --> 00:12:24.240 align:start position:0%
belongs to so the main class that we
 

00:12:24.240 --> 00:12:24.949 align:start position:0%
belongs to so the main class that we
have<00:12:24.399><c> here</c>

00:12:24.949 --> 00:12:24.959 align:start position:0%
have here
 

00:12:24.959 --> 00:12:27.829 align:start position:0%
have here
belongs<00:12:25.680><c> to</c><00:12:25.839><c> this</c><00:12:26.079><c> package</c><00:12:27.040><c> now</c><00:12:27.200><c> this</c><00:12:27.440><c> package</c>

00:12:27.829 --> 00:12:27.839 align:start position:0%
belongs to this package now this package
 

00:12:27.839 --> 00:12:30.470 align:start position:0%
belongs to this package now this package
statement<00:12:28.240><c> is</c><00:12:28.399><c> terminated</c><00:12:29.040><c> by</c><00:12:29.360><c> semicolon</c>

00:12:30.470 --> 00:12:30.480 align:start position:0%
statement is terminated by semicolon
 

00:12:30.480 --> 00:12:32.710 align:start position:0%
statement is terminated by semicolon
so<00:12:30.639><c> in</c><00:12:30.800><c> java</c><00:12:31.120><c> wherever</c><00:12:31.519><c> we</c><00:12:31.680><c> have</c><00:12:32.079><c> a</c><00:12:32.240><c> statement</c>

00:12:32.710 --> 00:12:32.720 align:start position:0%
so in java wherever we have a statement
 

00:12:32.720 --> 00:12:34.470 align:start position:0%
so in java wherever we have a statement
we<00:12:32.880><c> should</c><00:12:33.040><c> terminate</c><00:12:33.440><c> that</c><00:12:33.680><c> statement</c><00:12:34.240><c> with</c>

00:12:34.470 --> 00:12:34.480 align:start position:0%
we should terminate that statement with
 

00:12:34.480 --> 00:12:35.430 align:start position:0%
we should terminate that statement with
a<00:12:34.560><c> semicolon</c>

00:12:35.430 --> 00:12:35.440 align:start position:0%
a semicolon
 

00:12:35.440 --> 00:12:38.790 align:start position:0%
a semicolon
this<00:12:35.680><c> is</c><00:12:35.839><c> exactly</c><00:12:36.160><c> like</c><00:12:36.399><c> c</c><00:12:36.639><c> sharp</c><00:12:36.959><c> or</c><00:12:37.279><c> c</c><00:12:37.760><c> plus</c>

00:12:38.790 --> 00:12:38.800 align:start position:0%
this is exactly like c sharp or c plus
 

00:12:38.800 --> 00:12:40.949 align:start position:0%
this is exactly like c sharp or c plus
now<00:12:38.959><c> below</c><00:12:39.279><c> this</c><00:12:39.440><c> package</c><00:12:39.760><c> statement</c><00:12:40.240><c> we</c><00:12:40.399><c> have</c>

00:12:40.949 --> 00:12:40.959 align:start position:0%
now below this package statement we have
 

00:12:40.959 --> 00:12:41.910 align:start position:0%
now below this package statement we have
our<00:12:41.200><c> main</c><00:12:41.440><c> class</c>

00:12:41.910 --> 00:12:41.920 align:start position:0%
our main class
 

00:12:41.920 --> 00:12:43.110 align:start position:0%
our main class
exactly<00:12:42.320><c> like</c><00:12:42.480><c> what</c><00:12:42.639><c> you</c><00:12:42.720><c> saw</c><00:12:42.959><c> in</c><00:12:43.040><c> the</c>

00:12:43.110 --> 00:12:43.120 align:start position:0%
exactly like what you saw in the
 

00:12:43.120 --> 00:12:45.350 align:start position:0%
exactly like what you saw in the
previous<00:12:43.440><c> tutorial</c><00:12:44.160><c> so</c><00:12:44.320><c> we</c><00:12:44.399><c> have</c><00:12:44.639><c> public</c>

00:12:45.350 --> 00:12:45.360 align:start position:0%
previous tutorial so we have public
 

00:12:45.360 --> 00:12:49.110 align:start position:0%
previous tutorial so we have public
class<00:12:46.079><c> main</c><00:12:46.959><c> with</c><00:12:47.360><c> a</c><00:12:47.519><c> pair</c><00:12:47.680><c> of</c><00:12:47.839><c> curly</c><00:12:48.160><c> braces</c>

00:12:49.110 --> 00:12:49.120 align:start position:0%
class main with a pair of curly braces
 

00:12:49.120 --> 00:12:50.949 align:start position:0%
class main with a pair of curly braces
inside<00:12:49.440><c> this</c><00:12:49.680><c> class</c><00:12:50.160><c> we</c><00:12:50.320><c> have</c><00:12:50.560><c> our</c><00:12:50.720><c> main</c>

00:12:50.949 --> 00:12:50.959 align:start position:0%
inside this class we have our main
 

00:12:50.959 --> 00:12:53.110 align:start position:0%
inside this class we have our main
method<00:12:51.839><c> so</c><00:12:52.000><c> it's</c><00:12:52.160><c> a</c><00:12:52.240><c> public</c><00:12:52.560><c> method</c><00:12:52.880><c> which</c>

00:12:53.110 --> 00:12:53.120 align:start position:0%
method so it's a public method which
 

00:12:53.120 --> 00:12:54.790 align:start position:0%
method so it's a public method which
means<00:12:53.440><c> it's</c><00:12:53.680><c> accessible</c><00:12:54.320><c> from</c>

00:12:54.790 --> 00:12:54.800 align:start position:0%
means it's accessible from
 

00:12:54.800 --> 00:12:57.269 align:start position:0%
means it's accessible from
other<00:12:55.040><c> parts</c><00:12:55.279><c> of</c><00:12:55.360><c> this</c><00:12:55.600><c> program</c><00:12:56.480><c> it's</c><00:12:56.720><c> static</c>

00:12:57.269 --> 00:12:57.279 align:start position:0%
other parts of this program it's static
 

00:12:57.279 --> 00:12:58.949 align:start position:0%
other parts of this program it's static
we<00:12:57.440><c> haven't</c><00:12:57.680><c> talked</c><00:12:57.920><c> about</c><00:12:58.079><c> static</c><00:12:58.560><c> methods</c>

00:12:58.949 --> 00:12:58.959 align:start position:0%
we haven't talked about static methods
 

00:12:58.959 --> 00:12:59.590 align:start position:0%
we haven't talked about static methods
yet

00:12:59.590 --> 00:12:59.600 align:start position:0%
yet
 

00:12:59.600 --> 00:13:01.269 align:start position:0%
yet
we'll<00:12:59.760><c> talk</c><00:13:00.000><c> about</c><00:13:00.160><c> them</c><00:13:00.399><c> in</c><00:13:00.480><c> the</c><00:13:00.560><c> future</c><00:13:01.120><c> for</c>

00:13:01.269 --> 00:13:01.279 align:start position:0%
we'll talk about them in the future for
 

00:13:01.279 --> 00:13:03.110 align:start position:0%
we'll talk about them in the future for
now<00:13:01.519><c> just</c><00:13:01.680><c> remember</c><00:13:02.079><c> that</c><00:13:02.240><c> the</c><00:13:02.480><c> main</c><00:13:02.720><c> method</c>

00:13:03.110 --> 00:13:03.120 align:start position:0%
now just remember that the main method
 

00:13:03.120 --> 00:13:04.069 align:start position:0%
now just remember that the main method
in<00:13:03.200><c> your</c><00:13:03.360><c> program</c><00:13:03.760><c> should</c>

00:13:04.069 --> 00:13:04.079 align:start position:0%
in your program should
 

00:13:04.079 --> 00:13:06.790 align:start position:0%
in your program should
always<00:13:04.720><c> be</c><00:13:04.880><c> static</c><00:13:05.839><c> the</c><00:13:06.000><c> return</c><00:13:06.399><c> type</c><00:13:06.560><c> of</c><00:13:06.639><c> this</c>

00:13:06.790 --> 00:13:06.800 align:start position:0%
always be static the return type of this
 

00:13:06.800 --> 00:13:08.790 align:start position:0%
always be static the return type of this
method<00:13:07.120><c> is</c><00:13:07.279><c> void</c><00:13:07.600><c> which</c><00:13:07.760><c> means</c><00:13:08.160><c> this</c><00:13:08.399><c> method</c>

00:13:08.790 --> 00:13:08.800 align:start position:0%
method is void which means this method
 

00:13:08.800 --> 00:13:10.550 align:start position:0%
method is void which means this method
is<00:13:08.880><c> not</c><00:13:09.040><c> going</c><00:13:09.200><c> to</c><00:13:09.279><c> return</c><00:13:09.600><c> a</c><00:13:09.760><c> value</c>

00:13:10.550 --> 00:13:10.560 align:start position:0%
is not going to return a value
 

00:13:10.560 --> 00:13:12.470 align:start position:0%
is not going to return a value
and<00:13:10.720><c> here</c><00:13:10.880><c> in</c><00:13:11.040><c> parenthesis</c><00:13:11.600><c> we</c><00:13:11.760><c> have</c><00:13:12.160><c> one</c>

00:13:12.470 --> 00:13:12.480 align:start position:0%
and here in parenthesis we have one
 

00:13:12.480 --> 00:13:14.470 align:start position:0%
and here in parenthesis we have one
parameter<00:13:13.200><c> for</c><00:13:13.360><c> this</c><00:13:13.519><c> function</c>

00:13:14.470 --> 00:13:14.480 align:start position:0%
parameter for this function
 

00:13:14.480 --> 00:13:16.150 align:start position:0%
parameter for this function
we<00:13:14.639><c> can</c><00:13:14.800><c> use</c><00:13:14.959><c> these</c><00:13:15.200><c> parameters</c><00:13:15.680><c> to</c><00:13:15.839><c> pass</c>

00:13:16.150 --> 00:13:16.160 align:start position:0%
we can use these parameters to pass
 

00:13:16.160 --> 00:13:17.990 align:start position:0%
we can use these parameters to pass
values<00:13:16.480><c> to</c><00:13:16.639><c> our</c><00:13:16.800><c> program</c><00:13:17.440><c> again</c><00:13:17.680><c> we'll</c><00:13:17.839><c> look</c>

00:13:17.990 --> 00:13:18.000 align:start position:0%
values to our program again we'll look
 

00:13:18.000 --> 00:13:19.430 align:start position:0%
values to our program again we'll look
at<00:13:18.079><c> this</c><00:13:18.240><c> in</c><00:13:18.399><c> the</c><00:13:18.480><c> future</c>

00:13:19.430 --> 00:13:19.440 align:start position:0%
at this in the future
 

00:13:19.440 --> 00:13:21.269 align:start position:0%
at this in the future
now<00:13:19.680><c> right</c><00:13:20.000><c> after</c><00:13:20.240><c> this</c><00:13:20.399><c> parenthesis</c><00:13:20.959><c> you</c><00:13:21.040><c> can</c>

00:13:21.269 --> 00:13:21.279 align:start position:0%
now right after this parenthesis you can
 

00:13:21.279 --> 00:13:23.190 align:start position:0%
now right after this parenthesis you can
see<00:13:21.680><c> the</c><00:13:21.839><c> left</c><00:13:22.160><c> brace</c>

00:13:23.190 --> 00:13:23.200 align:start position:0%
see the left brace
 

00:13:23.200 --> 00:13:25.509 align:start position:0%
see the left brace
and<00:13:23.760><c> this</c><00:13:24.000><c> is</c><00:13:24.160><c> where</c><00:13:24.399><c> we</c><00:13:24.560><c> write</c><00:13:24.800><c> the</c><00:13:24.959><c> code</c><00:13:25.440><c> in</c>

00:13:25.509 --> 00:13:25.519 align:start position:0%
and this is where we write the code in
 

00:13:25.519 --> 00:13:26.790 align:start position:0%
and this is where we write the code in
this<00:13:25.760><c> method</c>

00:13:26.790 --> 00:13:26.800 align:start position:0%
this method
 

00:13:26.800 --> 00:13:29.430 align:start position:0%
this method
now<00:13:27.040><c> by</c><00:13:27.200><c> default</c><00:13:27.600><c> we</c><00:13:27.760><c> have</c><00:13:28.160><c> this</c><00:13:28.399><c> line</c><00:13:28.959><c> prefix</c>

00:13:29.430 --> 00:13:29.440 align:start position:0%
now by default we have this line prefix
 

00:13:29.440 --> 00:13:30.790 align:start position:0%
now by default we have this line prefix
with<00:13:29.680><c> two</c><00:13:30.000><c> slashes</c>

00:13:30.790 --> 00:13:30.800 align:start position:0%
with two slashes
 

00:13:30.800 --> 00:13:33.190 align:start position:0%
with two slashes
this<00:13:31.040><c> indicates</c><00:13:31.519><c> a</c><00:13:31.760><c> comment</c><00:13:32.720><c> we</c><00:13:32.880><c> use</c><00:13:33.040><c> these</c>

00:13:33.190 --> 00:13:33.200 align:start position:0%
this indicates a comment we use these
 

00:13:33.200 --> 00:13:35.030 align:start position:0%
this indicates a comment we use these
comments<00:13:33.600><c> to</c><00:13:33.760><c> explain</c><00:13:34.160><c> our</c><00:13:34.320><c> code</c><00:13:34.560><c> to</c><00:13:34.800><c> other</c>

00:13:35.030 --> 00:13:35.040 align:start position:0%
comments to explain our code to other
 

00:13:35.040 --> 00:13:35.590 align:start position:0%
comments to explain our code to other
people

00:13:35.590 --> 00:13:35.600 align:start position:0%
people
 

00:13:35.600 --> 00:13:38.389 align:start position:0%
people
so<00:13:35.760><c> these</c><00:13:36.000><c> comments</c><00:13:36.399><c> don't</c><00:13:36.639><c> get</c><00:13:36.880><c> executed</c><00:13:38.079><c> now</c>

00:13:38.389 --> 00:13:38.399 align:start position:0%
so these comments don't get executed now
 

00:13:38.399 --> 00:13:40.150 align:start position:0%
so these comments don't get executed now
let's<00:13:38.639><c> remove</c><00:13:38.959><c> this</c><00:13:39.120><c> comment</c><00:13:39.600><c> and</c>

00:13:40.150 --> 00:13:40.160 align:start position:0%
let's remove this comment and
 

00:13:40.160 --> 00:13:42.230 align:start position:0%
let's remove this comment and
write<00:13:40.399><c> a</c><00:13:40.480><c> bit</c><00:13:40.639><c> of</c><00:13:40.800><c> code</c><00:13:41.279><c> to</c><00:13:41.440><c> print</c><00:13:41.760><c> something</c>

00:13:42.230 --> 00:13:42.240 align:start position:0%
write a bit of code to print something
 

00:13:42.240 --> 00:13:43.590 align:start position:0%
write a bit of code to print something
on<00:13:42.399><c> the</c><00:13:42.480><c> terminal</c>

00:13:43.590 --> 00:13:43.600 align:start position:0%
on the terminal
 

00:13:43.600 --> 00:13:45.430 align:start position:0%
on the terminal
so<00:13:43.760><c> here</c><00:13:43.920><c> we're</c><00:13:44.079><c> going</c><00:13:44.160><c> to</c><00:13:44.240><c> use</c><00:13:44.720><c> the</c><00:13:44.959><c> system</c>

00:13:45.430 --> 00:13:45.440 align:start position:0%
so here we're going to use the system
 

00:13:45.440 --> 00:13:46.790 align:start position:0%
so here we're going to use the system
class<00:13:45.839><c> in</c><00:13:46.000><c> java</c>

00:13:46.790 --> 00:13:46.800 align:start position:0%
class in java
 

00:13:46.800 --> 00:13:49.990 align:start position:0%
class in java
so<00:13:47.040><c> capital</c><00:13:47.600><c> s</c><00:13:48.160><c> system</c><00:13:49.360><c> here</c><00:13:49.519><c> in</c><00:13:49.600><c> this</c><00:13:49.760><c> tool</c>

00:13:49.990 --> 00:13:50.000 align:start position:0%
so capital s system here in this tool
 

00:13:50.000 --> 00:13:50.790 align:start position:0%
so capital s system here in this tool
tip<00:13:50.160><c> you</c><00:13:50.320><c> can</c><00:13:50.399><c> see</c>

00:13:50.790 --> 00:13:50.800 align:start position:0%
tip you can see
 

00:13:50.800 --> 00:13:53.110 align:start position:0%
tip you can see
the<00:13:51.040><c> system</c><00:13:51.440><c> class</c><00:13:51.680><c> is</c><00:13:51.839><c> defined</c><00:13:52.720><c> in</c><00:13:52.880><c> this</c>

00:13:53.110 --> 00:13:53.120 align:start position:0%
the system class is defined in this
 

00:13:53.120 --> 00:13:54.189 align:start position:0%
the system class is defined in this
package

00:13:54.189 --> 00:13:54.199 align:start position:0%
package
 

00:13:54.199 --> 00:13:57.509 align:start position:0%
package
java.lang<00:13:55.360><c> or</c><00:13:55.600><c> language</c><00:13:56.720><c> also</c><00:13:56.959><c> look</c><00:13:57.199><c> at</c><00:13:57.279><c> this</c>

00:13:57.509 --> 00:13:57.519 align:start position:0%
java.lang or language also look at this
 

00:13:57.519 --> 00:13:58.710 align:start position:0%
java.lang or language also look at this
icon<00:13:57.920><c> on</c><00:13:58.000><c> the</c><00:13:58.079><c> left</c><00:13:58.320><c> side</c>

00:13:58.710 --> 00:13:58.720 align:start position:0%
icon on the left side
 

00:13:58.720 --> 00:14:01.590 align:start position:0%
icon on the left side
this<00:13:59.040><c> indicates</c><00:13:59.519><c> a</c><00:13:59.600><c> class</c><00:14:00.720><c> now</c><00:14:01.120><c> inside</c><00:14:01.440><c> this</c>

00:14:01.590 --> 00:14:01.600 align:start position:0%
this indicates a class now inside this
 

00:14:01.600 --> 00:14:01.990 align:start position:0%
this indicates a class now inside this
class

00:14:01.990 --> 00:14:02.000 align:start position:0%
class
 

00:14:02.000 --> 00:14:04.550 align:start position:0%
class
we<00:14:02.160><c> have</c><00:14:02.560><c> various</c><00:14:02.959><c> members</c><00:14:03.839><c> we</c><00:14:04.000><c> can</c><00:14:04.160><c> use</c><00:14:04.320><c> the</c>

00:14:04.550 --> 00:14:04.560 align:start position:0%
we have various members we can use the
 

00:14:04.560 --> 00:14:05.670 align:start position:0%
we have various members we can use the
dot<00:14:04.959><c> operator</c>

00:14:05.670 --> 00:14:05.680 align:start position:0%
dot operator
 

00:14:05.680 --> 00:14:08.069 align:start position:0%
dot operator
to<00:14:05.839><c> see</c><00:14:06.000><c> the</c><00:14:06.160><c> members</c><00:14:06.639><c> defined</c><00:14:07.360><c> in</c><00:14:07.440><c> the</c><00:14:07.600><c> system</c>

00:14:08.069 --> 00:14:08.079 align:start position:0%
to see the members defined in the system
 

00:14:08.079 --> 00:14:08.949 align:start position:0%
to see the members defined in the system
class

00:14:08.949 --> 00:14:08.959 align:start position:0%
class
 

00:14:08.959 --> 00:14:09.990 align:start position:0%
class
now<00:14:09.120><c> the</c><00:14:09.199><c> member</c><00:14:09.519><c> that</c><00:14:09.680><c> we're</c><00:14:09.839><c> going</c><00:14:09.920><c> to</c>

00:14:09.990 --> 00:14:10.000 align:start position:0%
now the member that we're going to
 

00:14:10.000 --> 00:14:13.110 align:start position:0%
now the member that we're going to
access<00:14:10.480><c> is</c><00:14:11.040><c> out</c><00:14:11.920><c> look</c><00:14:12.160><c> at</c><00:14:12.240><c> the</c><00:14:12.480><c> icon</c>

00:14:13.110 --> 00:14:13.120 align:start position:0%
access is out look at the icon
 

00:14:13.120 --> 00:14:15.750 align:start position:0%
access is out look at the icon
of<00:14:13.279><c> this</c><00:14:13.519><c> member</c><00:14:14.240><c> it's</c><00:14:14.560><c> f</c><00:14:14.800><c> which</c><00:14:15.040><c> is</c><00:14:15.199><c> short</c><00:14:15.519><c> for</c>

00:14:15.750 --> 00:14:15.760 align:start position:0%
of this member it's f which is short for
 

00:14:15.760 --> 00:14:16.150 align:start position:0%
of this member it's f which is short for
field

00:14:16.150 --> 00:14:16.160 align:start position:0%
field
 

00:14:16.160 --> 00:14:17.670 align:start position:0%
field
we're<00:14:16.320><c> going</c><00:14:16.399><c> to</c><00:14:16.480><c> talk</c><00:14:16.720><c> about</c><00:14:17.040><c> fields</c><00:14:17.440><c> in</c><00:14:17.519><c> the</c>

00:14:17.670 --> 00:14:17.680 align:start position:0%
we're going to talk about fields in the
 

00:14:17.680 --> 00:14:19.829 align:start position:0%
we're going to talk about fields in the
future<00:14:18.000><c> when</c><00:14:18.160><c> we</c><00:14:18.320><c> talk</c><00:14:18.480><c> about</c><00:14:18.800><c> classes</c><00:14:19.360><c> and</c>

00:14:19.829 --> 00:14:19.839 align:start position:0%
future when we talk about classes and
 

00:14:19.839 --> 00:14:22.150 align:start position:0%
future when we talk about classes and
object<00:14:20.160><c> oriented</c><00:14:20.639><c> programming</c><00:14:21.600><c> now</c><00:14:21.760><c> what</c><00:14:21.920><c> is</c>

00:14:22.150 --> 00:14:22.160 align:start position:0%
object oriented programming now what is
 

00:14:22.160 --> 00:14:22.870 align:start position:0%
object oriented programming now what is
interesting<00:14:22.560><c> here</c>

00:14:22.870 --> 00:14:22.880 align:start position:0%
interesting here
 

00:14:22.880 --> 00:14:24.550 align:start position:0%
interesting here
is<00:14:23.040><c> the</c><00:14:23.199><c> type</c><00:14:23.440><c> of</c><00:14:23.519><c> this</c><00:14:23.760><c> field</c><00:14:24.160><c> and</c><00:14:24.320><c> you</c><00:14:24.399><c> can</c>

00:14:24.550 --> 00:14:24.560 align:start position:0%
is the type of this field and you can
 

00:14:24.560 --> 00:14:26.949 align:start position:0%
is the type of this field and you can
see<00:14:24.720><c> that</c><00:14:24.959><c> on</c><00:14:25.040><c> the</c><00:14:25.120><c> right</c><00:14:25.360><c> side</c><00:14:25.760><c> that</c><00:14:26.000><c> is</c><00:14:26.160><c> print</c>

00:14:26.949 --> 00:14:26.959 align:start position:0%
see that on the right side that is print
 

00:14:26.959 --> 00:14:29.670 align:start position:0%
see that on the right side that is print
stream<00:14:27.680><c> so</c><00:14:27.920><c> print</c><00:14:28.240><c> stream</c><00:14:28.800><c> is</c><00:14:29.040><c> another</c><00:14:29.440><c> class</c>

00:14:29.670 --> 00:14:29.680 align:start position:0%
stream so print stream is another class
 

00:14:29.680 --> 00:14:31.590 align:start position:0%
stream so print stream is another class
that<00:14:29.920><c> is</c><00:14:30.000><c> defined</c><00:14:30.480><c> in</c><00:14:30.720><c> java</c>

00:14:31.590 --> 00:14:31.600 align:start position:0%
that is defined in java
 

00:14:31.600 --> 00:14:34.470 align:start position:0%
that is defined in java
so<00:14:32.240><c> once</c><00:14:32.480><c> again</c><00:14:32.800><c> we</c><00:14:32.959><c> use</c><00:14:33.360><c> the</c><00:14:33.519><c> dot</c><00:14:33.920><c> operator</c><00:14:34.320><c> to</c>

00:14:34.470 --> 00:14:34.480 align:start position:0%
so once again we use the dot operator to
 

00:14:34.480 --> 00:14:36.069 align:start position:0%
so once again we use the dot operator to
look<00:14:34.639><c> at</c><00:14:34.720><c> the</c><00:14:34.959><c> methods</c><00:14:35.440><c> or</c>

00:14:36.069 --> 00:14:36.079 align:start position:0%
look at the methods or
 

00:14:36.079 --> 00:14:38.310 align:start position:0%
look at the methods or
members<00:14:36.560><c> defined</c><00:14:37.199><c> in</c><00:14:37.360><c> the</c><00:14:37.600><c> print</c><00:14:37.920><c> stream</c>

00:14:38.310 --> 00:14:38.320 align:start position:0%
members defined in the print stream
 

00:14:38.320 --> 00:14:39.269 align:start position:0%
members defined in the print stream
class

00:14:39.269 --> 00:14:39.279 align:start position:0%
class
 

00:14:39.279 --> 00:14:40.949 align:start position:0%
class
the<00:14:39.440><c> method</c><00:14:39.760><c> we're</c><00:14:39.920><c> going</c><00:14:40.000><c> to</c><00:14:40.079><c> use</c><00:14:40.320><c> is</c><00:14:40.480><c> print</c>

00:14:40.949 --> 00:14:40.959 align:start position:0%
the method we're going to use is print
 

00:14:40.959 --> 00:14:43.110 align:start position:0%
the method we're going to use is print
ln<00:14:41.360><c> which</c><00:14:41.600><c> is</c><00:14:41.760><c> short</c><00:14:42.000><c> for</c><00:14:42.240><c> line</c>

00:14:43.110 --> 00:14:43.120 align:start position:0%
ln which is short for line
 

00:14:43.120 --> 00:14:45.509 align:start position:0%
ln which is short for line
look<00:14:43.360><c> at</c><00:14:43.440><c> the</c><00:14:43.600><c> icon</c><00:14:43.920><c> for</c><00:14:44.000><c> this</c><00:14:44.240><c> method</c><00:14:44.959><c> so</c><00:14:45.199><c> m</c>

00:14:45.509 --> 00:14:45.519 align:start position:0%
look at the icon for this method so m
 

00:14:45.519 --> 00:14:46.230 align:start position:0%
look at the icon for this method so m
indicates

00:14:46.230 --> 00:14:46.240 align:start position:0%
indicates
 

00:14:46.240 --> 00:14:50.150 align:start position:0%
indicates
a<00:14:46.399><c> method</c><00:14:47.600><c> now</c><00:14:48.639><c> we</c><00:14:48.880><c> press</c><00:14:49.199><c> enter</c>

00:14:50.150 --> 00:14:50.160 align:start position:0%
a method now we press enter
 

00:14:50.160 --> 00:14:52.550 align:start position:0%
a method now we press enter
and<00:14:50.480><c> intellij</c><00:14:51.199><c> automatically</c><00:14:51.760><c> adds</c><00:14:52.240><c> these</c>

00:14:52.550 --> 00:14:52.560 align:start position:0%
and intellij automatically adds these
 

00:14:52.560 --> 00:14:53.509 align:start position:0%
and intellij automatically adds these
parentheses

00:14:53.509 --> 00:14:53.519 align:start position:0%
parentheses
 

00:14:53.519 --> 00:14:55.670 align:start position:0%
parentheses
as<00:14:53.680><c> well</c><00:14:53.839><c> as</c><00:14:54.000><c> a</c><00:14:54.079><c> semicolon</c><00:14:55.120><c> so</c><00:14:55.279><c> now</c><00:14:55.440><c> with</c><00:14:55.600><c> the</c>

00:14:55.670 --> 00:14:55.680 align:start position:0%
as well as a semicolon so now with the
 

00:14:55.680 --> 00:14:57.030 align:start position:0%
as well as a semicolon so now with the
code<00:14:55.920><c> on</c><00:14:56.079><c> line</c><00:14:56.320><c> six</c>

00:14:57.030 --> 00:14:57.040 align:start position:0%
code on line six
 

00:14:57.040 --> 00:14:59.750 align:start position:0%
code on line six
recalling<00:14:57.920><c> or</c><00:14:58.240><c> executing</c><00:14:58.880><c> the</c><00:14:59.120><c> print</c><00:14:59.440><c> line</c>

00:14:59.750 --> 00:14:59.760 align:start position:0%
recalling or executing the print line
 

00:14:59.760 --> 00:15:00.550 align:start position:0%
recalling or executing the print line
method

00:15:00.550 --> 00:15:00.560 align:start position:0%
method
 

00:15:00.560 --> 00:15:01.990 align:start position:0%
method
earlier<00:15:00.880><c> i</c><00:15:00.959><c> told</c><00:15:01.120><c> you</c><00:15:01.279><c> that</c><00:15:01.519><c> inside</c><00:15:01.839><c> this</c>

00:15:01.990 --> 00:15:02.000 align:start position:0%
earlier i told you that inside this
 

00:15:02.000 --> 00:15:04.069 align:start position:0%
earlier i told you that inside this
parenthesis<00:15:02.720><c> we</c><00:15:02.880><c> can</c><00:15:03.120><c> pass</c><00:15:03.440><c> values</c><00:15:03.839><c> to</c><00:15:04.000><c> our</c>

00:15:04.069 --> 00:15:04.079 align:start position:0%
parenthesis we can pass values to our
 

00:15:04.079 --> 00:15:05.110 align:start position:0%
parenthesis we can pass values to our
methods

00:15:05.110 --> 00:15:05.120 align:start position:0%
methods
 

00:15:05.120 --> 00:15:06.790 align:start position:0%
methods
here<00:15:05.279><c> we</c><00:15:05.440><c> want</c><00:15:05.600><c> to</c><00:15:05.680><c> print</c><00:15:06.160><c> the</c><00:15:06.240><c> hello</c><00:15:06.560><c> world</c>

00:15:06.790 --> 00:15:06.800 align:start position:0%
here we want to print the hello world
 

00:15:06.800 --> 00:15:08.470 align:start position:0%
here we want to print the hello world
message<00:15:07.199><c> on</c><00:15:07.279><c> the</c><00:15:07.440><c> terminal</c><00:15:08.079><c> so</c>

00:15:08.470 --> 00:15:08.480 align:start position:0%
message on the terminal so
 

00:15:08.480 --> 00:15:11.829 align:start position:0%
message on the terminal so
let's<00:15:08.720><c> type</c><00:15:09.360><c> double</c><00:15:09.680><c> quotes</c><00:15:10.880><c> and</c><00:15:11.279><c> inside</c><00:15:11.600><c> this</c>

00:15:11.829 --> 00:15:11.839 align:start position:0%
let's type double quotes and inside this
 

00:15:11.839 --> 00:15:13.030 align:start position:0%
let's type double quotes and inside this
codes<00:15:12.240><c> write</c>

00:15:13.030 --> 00:15:13.040 align:start position:0%
codes write
 

00:15:13.040 --> 00:15:15.750 align:start position:0%
codes write
hello<00:15:13.360><c> world</c><00:15:14.160><c> so</c><00:15:14.320><c> hello</c><00:15:14.560><c> world</c><00:15:14.880><c> is</c><00:15:15.279><c> textual</c>

00:15:15.750 --> 00:15:15.760 align:start position:0%
hello world so hello world is textual
 

00:15:15.760 --> 00:15:16.470 align:start position:0%
hello world so hello world is textual
data

00:15:16.470 --> 00:15:16.480 align:start position:0%
data
 

00:15:16.480 --> 00:15:18.629 align:start position:0%
data
in<00:15:16.720><c> java</c><00:15:17.279><c> whenever</c><00:15:17.680><c> we</c><00:15:17.839><c> deal</c><00:15:18.000><c> with</c><00:15:18.160><c> textual</c>

00:15:18.629 --> 00:15:18.639 align:start position:0%
in java whenever we deal with textual
 

00:15:18.639 --> 00:15:21.030 align:start position:0%
in java whenever we deal with textual
data<00:15:19.120><c> we</c><00:15:19.279><c> should</c><00:15:19.600><c> always</c><00:15:19.920><c> surround</c><00:15:20.320><c> them</c><00:15:20.560><c> with</c>

00:15:21.030 --> 00:15:21.040 align:start position:0%
data we should always surround them with
 

00:15:21.040 --> 00:15:23.509 align:start position:0%
data we should always surround them with
double<00:15:21.440><c> quotes</c><00:15:22.160><c> now</c><00:15:22.320><c> we</c><00:15:22.480><c> say</c><00:15:22.639><c> we</c><00:15:22.800><c> have</c><00:15:23.279><c> a</c>

00:15:23.509 --> 00:15:23.519 align:start position:0%
double quotes now we say we have a
 

00:15:23.519 --> 00:15:24.310 align:start position:0%
double quotes now we say we have a
string

00:15:24.310 --> 00:15:24.320 align:start position:0%
string
 

00:15:24.320 --> 00:15:27.430 align:start position:0%
string
so<00:15:24.560><c> a</c><00:15:24.639><c> string</c><00:15:25.120><c> is</c><00:15:25.279><c> a</c><00:15:25.440><c> sequence</c><00:15:26.000><c> of</c><00:15:26.160><c> characters</c>

00:15:27.430 --> 00:15:27.440 align:start position:0%
so a string is a sequence of characters
 

00:15:27.440 --> 00:15:29.030 align:start position:0%
so a string is a sequence of characters
all<00:15:27.600><c> right</c><00:15:27.680><c> so</c><00:15:27.839><c> we're</c><00:15:28.079><c> done</c><00:15:28.399><c> with</c><00:15:28.639><c> our</c><00:15:28.800><c> first</c>

00:15:29.030 --> 00:15:29.040 align:start position:0%
all right so we're done with our first
 

00:15:29.040 --> 00:15:31.509 align:start position:0%
all right so we're done with our first
program<00:15:29.920><c> now</c><00:15:30.160><c> to</c><00:15:30.399><c> execute</c><00:15:30.880><c> this</c>

00:15:31.509 --> 00:15:31.519 align:start position:0%
program now to execute this
 

00:15:31.519 --> 00:15:33.990 align:start position:0%
program now to execute this
we<00:15:31.680><c> can</c><00:15:31.839><c> click</c><00:15:32.079><c> on</c><00:15:32.160><c> this</c><00:15:32.399><c> icon</c><00:15:32.720><c> on</c><00:15:32.800><c> the</c><00:15:32.959><c> toolbar</c>

00:15:33.990 --> 00:15:34.000 align:start position:0%
we can click on this icon on the toolbar
 

00:15:34.000 --> 00:15:35.189 align:start position:0%
we can click on this icon on the toolbar
look<00:15:34.240><c> at</c><00:15:34.320><c> the</c><00:15:34.480><c> shortcut</c>

00:15:35.189 --> 00:15:35.199 align:start position:0%
look at the shortcut
 

00:15:35.199 --> 00:15:38.069 align:start position:0%
look at the shortcut
on<00:15:35.440><c> mac</c><00:15:35.759><c> it's</c><00:15:35.920><c> ctrl</c><00:15:36.639><c> and</c><00:15:36.800><c> r</c><00:15:37.360><c> i</c><00:15:37.600><c> always</c><00:15:37.839><c> prefer</c>

00:15:38.069 --> 00:15:38.079 align:start position:0%
on mac it's ctrl and r i always prefer
 

00:15:38.079 --> 00:15:39.910 align:start position:0%
on mac it's ctrl and r i always prefer
to<00:15:38.240><c> use</c><00:15:38.320><c> shortcuts</c><00:15:38.880><c> because</c><00:15:39.040><c> they're</c><00:15:39.360><c> faster</c>

00:15:39.910 --> 00:15:39.920 align:start position:0%
to use shortcuts because they're faster
 

00:15:39.920 --> 00:15:40.870 align:start position:0%
to use shortcuts because they're faster
so<00:15:40.160><c> ctrl</c>

00:15:40.870 --> 00:15:40.880 align:start position:0%
so ctrl
 

00:15:40.880 --> 00:15:44.069 align:start position:0%
so ctrl
and<00:15:41.040><c> r</c><00:15:42.480><c> now</c><00:15:43.519><c> intellij</c>

00:15:44.069 --> 00:15:44.079 align:start position:0%
and r now intellij
 

00:15:44.079 --> 00:15:45.990 align:start position:0%
and r now intellij
is<00:15:44.160><c> building</c><00:15:44.480><c> our</c><00:15:44.639><c> application</c><00:15:45.440><c> and</c><00:15:45.680><c> we</c><00:15:45.839><c> can</c>

00:15:45.990 --> 00:15:46.000 align:start position:0%
is building our application and we can
 

00:15:46.000 --> 00:15:47.910 align:start position:0%
is building our application and we can
see<00:15:46.160><c> the</c><00:15:46.320><c> result</c><00:15:46.800><c> in</c><00:15:46.880><c> this</c><00:15:47.120><c> little</c>

00:15:47.910 --> 00:15:47.920 align:start position:0%
see the result in this little
 

00:15:47.920 --> 00:15:50.389 align:start position:0%
see the result in this little
terminal<00:15:48.399><c> window</c><00:15:49.279><c> so</c><00:15:49.440><c> here's</c><00:15:49.839><c> our</c><00:15:50.160><c> hello</c>

00:15:50.389 --> 00:15:50.399 align:start position:0%
terminal window so here's our hello
 

00:15:50.399 --> 00:15:51.670 align:start position:0%
terminal window so here's our hello
world<00:15:50.639><c> message</c>

00:15:51.670 --> 00:15:51.680 align:start position:0%
world message
 

00:15:51.680 --> 00:15:54.389 align:start position:0%
world message
so<00:15:51.920><c> that</c><00:15:52.079><c> was</c><00:15:52.320><c> our</c><00:15:52.480><c> first</c><00:15:52.959><c> java</c><00:15:53.360><c> program</c><00:15:54.160><c> next</c>

00:15:54.389 --> 00:15:54.399 align:start position:0%
so that was our first java program next
 

00:15:54.399 --> 00:15:55.350 align:start position:0%
so that was our first java program next
i'm<00:15:54.480><c> going</c><00:15:54.560><c> to</c><00:15:54.720><c> explain</c>

00:15:55.350 --> 00:15:55.360 align:start position:0%
i'm going to explain
 

00:15:55.360 --> 00:15:57.749 align:start position:0%
i'm going to explain
how<00:15:55.680><c> java</c><00:15:56.000><c> code</c><00:15:56.240><c> gets</c><00:15:56.560><c> executed</c><00:15:57.360><c> under</c><00:15:57.600><c> the</c>

00:15:57.749 --> 00:15:57.759 align:start position:0%
how java code gets executed under the
 

00:15:57.759 --> 00:15:59.910 align:start position:0%
how java code gets executed under the
hood

00:15:59.910 --> 00:15:59.920 align:start position:0%
hood
 

00:15:59.920 --> 00:16:01.749 align:start position:0%
hood
hey<00:16:00.320><c> mosh</c><00:16:00.639><c> here</c><00:16:00.959><c> i</c><00:16:01.040><c> just</c><00:16:01.199><c> wanted</c><00:16:01.360><c> to</c><00:16:01.440><c> let</c><00:16:01.600><c> you</c>

00:16:01.749 --> 00:16:01.759 align:start position:0%
hey mosh here i just wanted to let you
 

00:16:01.759 --> 00:16:03.030 align:start position:0%
hey mosh here i just wanted to let you
know<00:16:01.920><c> that</c><00:16:02.079><c> you</c><00:16:02.160><c> really</c><00:16:02.399><c> don't</c><00:16:02.639><c> have</c><00:16:02.800><c> to</c>

00:16:03.030 --> 00:16:03.040 align:start position:0%
know that you really don't have to
 

00:16:03.040 --> 00:16:04.550 align:start position:0%
know that you really don't have to
memorize<00:16:03.519><c> anything</c><00:16:03.759><c> in</c><00:16:03.839><c> this</c><00:16:04.000><c> course</c>

00:16:04.550 --> 00:16:04.560 align:start position:0%
memorize anything in this course
 

00:16:04.560 --> 00:16:06.550 align:start position:0%
memorize anything in this course
i've<00:16:04.800><c> put</c><00:16:04.959><c> together</c><00:16:05.440><c> a</c><00:16:05.600><c> comprehensive</c><00:16:06.320><c> cheat</c>

00:16:06.550 --> 00:16:06.560 align:start position:0%
i've put together a comprehensive cheat
 

00:16:06.560 --> 00:16:08.069 align:start position:0%
i've put together a comprehensive cheat
sheet<00:16:06.800><c> with</c><00:16:07.040><c> summary</c><00:16:07.360><c> notes</c><00:16:07.600><c> that</c><00:16:07.759><c> you</c><00:16:07.839><c> can</c>

00:16:08.069 --> 00:16:08.079 align:start position:0%
sheet with summary notes that you can
 

00:16:08.079 --> 00:16:09.829 align:start position:0%
sheet with summary notes that you can
download<00:16:08.399><c> below</c><00:16:08.720><c> this</c><00:16:08.880><c> video</c>

00:16:09.829 --> 00:16:09.839 align:start position:0%
download below this video
 

00:16:09.839 --> 00:16:11.829 align:start position:0%
download below this video
so<00:16:10.160><c> i</c><00:16:10.240><c> have</c><00:16:10.399><c> done</c><00:16:10.639><c> my</c><00:16:10.800><c> best</c><00:16:11.120><c> to</c><00:16:11.279><c> create</c><00:16:11.600><c> the</c>

00:16:11.829 --> 00:16:11.839 align:start position:0%
so i have done my best to create the
 

00:16:11.839 --> 00:16:13.910 align:start position:0%
so i have done my best to create the
best<00:16:12.240><c> possible</c><00:16:12.800><c> java</c><00:16:13.120><c> course</c>

00:16:13.910 --> 00:16:13.920 align:start position:0%
best possible java course
 

00:16:13.920 --> 00:16:15.430 align:start position:0%
best possible java course
and<00:16:14.160><c> i</c><00:16:14.240><c> would</c><00:16:14.399><c> really</c><00:16:14.639><c> appreciate</c><00:16:15.120><c> it</c><00:16:15.199><c> if</c><00:16:15.279><c> you</c>

00:16:15.430 --> 00:16:15.440 align:start position:0%
and i would really appreciate it if you
 

00:16:15.440 --> 00:16:17.590 align:start position:0%
and i would really appreciate it if you
support<00:16:15.839><c> me</c><00:16:16.000><c> by</c><00:16:16.480><c> liking</c><00:16:16.880><c> and</c><00:16:17.040><c> sharing</c><00:16:17.360><c> this</c>

00:16:17.590 --> 00:16:17.600 align:start position:0%
support me by liking and sharing this
 

00:16:17.600 --> 00:16:19.189 align:start position:0%
support me by liking and sharing this
video<00:16:17.920><c> on</c><00:16:18.000><c> the</c><00:16:18.160><c> social</c><00:16:18.560><c> networks</c><00:16:18.959><c> that</c><00:16:19.040><c> you</c>

00:16:19.189 --> 00:16:19.199 align:start position:0%
video on the social networks that you
 

00:16:19.199 --> 00:16:20.230 align:start position:0%
video on the social networks that you
use<00:16:19.440><c> often</c>

00:16:20.230 --> 00:16:20.240 align:start position:0%
use often
 

00:16:20.240 --> 00:16:22.389 align:start position:0%
use often
also<00:16:20.560><c> be</c><00:16:20.720><c> sure</c><00:16:20.880><c> to</c><00:16:21.040><c> subscribe</c><00:16:21.680><c> and</c><00:16:21.839><c> enable</c><00:16:22.240><c> the</c>

00:16:22.389 --> 00:16:22.399 align:start position:0%
also be sure to subscribe and enable the
 

00:16:22.399 --> 00:16:23.269 align:start position:0%
also be sure to subscribe and enable the
notifications

00:16:23.269 --> 00:16:23.279 align:start position:0%
notifications
 

00:16:23.279 --> 00:16:25.030 align:start position:0%
notifications
so<00:16:23.519><c> next</c><00:16:23.680><c> time</c><00:16:23.920><c> i</c><00:16:24.000><c> upload</c><00:16:24.320><c> a</c><00:16:24.399><c> video</c><00:16:24.720><c> you'll</c><00:16:24.880><c> get</c>

00:16:25.030 --> 00:16:25.040 align:start position:0%
so next time i upload a video you'll get
 

00:16:25.040 --> 00:16:27.030 align:start position:0%
so next time i upload a video you'll get
notified<00:16:25.759><c> thank</c><00:16:26.000><c> you</c><00:16:26.160><c> so</c><00:16:26.320><c> much</c><00:16:26.639><c> and</c>

00:16:27.030 --> 00:16:27.040 align:start position:0%
notified thank you so much and
 

00:16:27.040 --> 00:16:30.710 align:start position:0%
notified thank you so much and
let's<00:16:27.199><c> continue</c><00:16:27.680><c> watching</c>

00:16:30.710 --> 00:16:30.720 align:start position:0%
 
 

00:16:30.720 --> 00:16:32.389 align:start position:0%
 
all<00:16:30.880><c> right</c><00:16:31.040><c> now</c><00:16:31.199><c> let's</c><00:16:31.360><c> see</c><00:16:31.600><c> what</c><00:16:31.920><c> exactly</c>

00:16:32.389 --> 00:16:32.399 align:start position:0%
all right now let's see what exactly
 

00:16:32.399 --> 00:16:33.749 align:start position:0%
all right now let's see what exactly
happens<00:16:32.880><c> under</c><00:16:33.199><c> the</c><00:16:33.279><c> hood</c>

00:16:33.749 --> 00:16:33.759 align:start position:0%
happens under the hood
 

00:16:33.759 --> 00:16:35.990 align:start position:0%
happens under the hood
the<00:16:34.000><c> moment</c><00:16:34.320><c> we</c><00:16:34.560><c> run</c><00:16:34.800><c> a</c><00:16:35.040><c> java</c><00:16:35.360><c> program</c><00:16:35.839><c> in</c>

00:16:35.990 --> 00:16:36.000 align:start position:0%
the moment we run a java program in
 

00:16:36.000 --> 00:16:37.030 align:start position:0%
the moment we run a java program in
intellij

00:16:37.030 --> 00:16:37.040 align:start position:0%
intellij
 

00:16:37.040 --> 00:16:38.629 align:start position:0%
intellij
there<00:16:37.199><c> are</c><00:16:37.279><c> basically</c><00:16:37.680><c> two</c><00:16:37.920><c> steps</c><00:16:38.240><c> involved</c>

00:16:38.629 --> 00:16:38.639 align:start position:0%
there are basically two steps involved
 

00:16:38.639 --> 00:16:40.550 align:start position:0%
there are basically two steps involved
here<00:16:39.279><c> compilation</c><00:16:40.000><c> and</c>

00:16:40.550 --> 00:16:40.560 align:start position:0%
here compilation and
 

00:16:40.560 --> 00:16:43.110 align:start position:0%
here compilation and
execution<00:16:41.759><c> in</c><00:16:41.920><c> the</c><00:16:42.000><c> compilation</c><00:16:42.639><c> step</c>

00:16:43.110 --> 00:16:43.120 align:start position:0%
execution in the compilation step
 

00:16:43.120 --> 00:16:45.509 align:start position:0%
execution in the compilation step
intellij<00:16:43.759><c> uses</c><00:16:44.079><c> the</c><00:16:44.320><c> java</c><00:16:44.639><c> compiler</c><00:16:45.279><c> to</c>

00:16:45.509 --> 00:16:45.519 align:start position:0%
intellij uses the java compiler to
 

00:16:45.519 --> 00:16:47.670 align:start position:0%
intellij uses the java compiler to
compile<00:16:46.000><c> our</c><00:16:46.160><c> code</c><00:16:46.560><c> into</c><00:16:46.800><c> a</c><00:16:46.880><c> different</c><00:16:47.279><c> format</c>

00:16:47.670 --> 00:16:47.680 align:start position:0%
compile our code into a different format
 

00:16:47.680 --> 00:16:48.310 align:start position:0%
compile our code into a different format
called

00:16:48.310 --> 00:16:48.320 align:start position:0%
called
 

00:16:48.320 --> 00:16:51.269 align:start position:0%
called
java<00:16:48.839><c> bytecode</c><00:16:49.839><c> this</c><00:16:50.079><c> java</c><00:16:50.480><c> compiler</c><00:16:51.040><c> comes</c>

00:16:51.269 --> 00:16:51.279 align:start position:0%
java bytecode this java compiler comes
 

00:16:51.279 --> 00:16:53.030 align:start position:0%
java bytecode this java compiler comes
with<00:16:51.440><c> the</c><00:16:51.600><c> java</c><00:16:52.000><c> development</c><00:16:52.560><c> kit</c>

00:16:53.030 --> 00:16:53.040 align:start position:0%
with the java development kit
 

00:16:53.040 --> 00:16:54.710 align:start position:0%
with the java development kit
that<00:16:53.199><c> we</c><00:16:53.440><c> downloaded</c><00:16:54.000><c> at</c><00:16:54.079><c> the</c><00:16:54.240><c> beginning</c><00:16:54.639><c> of</c>

00:16:54.710 --> 00:16:54.720 align:start position:0%
that we downloaded at the beginning of
 

00:16:54.720 --> 00:16:56.629 align:start position:0%
that we downloaded at the beginning of
the<00:16:54.880><c> course</c><00:16:55.279><c> let</c><00:16:55.440><c> me</c><00:16:55.600><c> show</c><00:16:55.759><c> you</c>

00:16:56.629 --> 00:16:56.639 align:start position:0%
the course let me show you
 

00:16:56.639 --> 00:16:58.710 align:start position:0%
the course let me show you
so<00:16:56.880><c> here</c><00:16:56.959><c> we</c><00:16:57.120><c> can</c><00:16:57.279><c> right</c><00:16:57.440><c> click</c><00:16:57.759><c> on</c><00:16:57.920><c> this</c><00:16:58.160><c> main</c>

00:16:58.710 --> 00:16:58.720 align:start position:0%
so here we can right click on this main
 

00:16:58.720 --> 00:17:00.069 align:start position:0%
so here we can right click on this main
the<00:16:59.040><c> java</c>

00:17:00.069 --> 00:17:00.079 align:start position:0%
the java
 

00:17:00.079 --> 00:17:02.629 align:start position:0%
the java
and<00:17:00.320><c> in</c><00:17:00.399><c> this</c><00:17:00.639><c> context</c><00:17:01.040><c> menu</c><00:17:01.519><c> we</c><00:17:01.680><c> have</c><00:17:02.000><c> an</c><00:17:02.240><c> item</c>

00:17:02.629 --> 00:17:02.639 align:start position:0%
and in this context menu we have an item
 

00:17:02.639 --> 00:17:03.189 align:start position:0%
and in this context menu we have an item
called

00:17:03.189 --> 00:17:03.199 align:start position:0%
called
 

00:17:03.199 --> 00:17:05.669 align:start position:0%
called
open<00:17:03.839><c> in</c><00:17:04.000><c> terminal</c><00:17:04.880><c> it's</c><00:17:05.120><c> down</c><00:17:05.360><c> below</c>

00:17:05.669 --> 00:17:05.679 align:start position:0%
open in terminal it's down below
 

00:17:05.679 --> 00:17:07.189 align:start position:0%
open in terminal it's down below
unfortunately<00:17:06.240><c> it's</c><00:17:06.319><c> not</c><00:17:06.559><c> visible</c><00:17:06.959><c> in</c><00:17:07.039><c> my</c>

00:17:07.189 --> 00:17:07.199 align:start position:0%
unfortunately it's not visible in my
 

00:17:07.199 --> 00:17:08.309 align:start position:0%
unfortunately it's not visible in my
recording<00:17:07.679><c> window</c>

00:17:08.309 --> 00:17:08.319 align:start position:0%
recording window
 

00:17:08.319 --> 00:17:11.029 align:start position:0%
recording window
it's<00:17:08.559><c> called</c><00:17:08.959><c> open</c><00:17:09.280><c> in</c><00:17:09.439><c> terminal</c><00:17:09.919><c> on</c><00:17:10.079><c> mac</c><00:17:10.799><c> and</c>

00:17:11.029 --> 00:17:11.039 align:start position:0%
it's called open in terminal on mac and
 

00:17:11.039 --> 00:17:12.870 align:start position:0%
it's called open in terminal on mac and
probably<00:17:11.439><c> open</c><00:17:11.760><c> in</c><00:17:11.839><c> command</c><00:17:12.240><c> prompt</c><00:17:12.720><c> on</c>

00:17:12.870 --> 00:17:12.880 align:start position:0%
probably open in command prompt on
 

00:17:12.880 --> 00:17:13.909 align:start position:0%
probably open in command prompt on
windows

00:17:13.909 --> 00:17:13.919 align:start position:0%
windows
 

00:17:13.919 --> 00:17:17.110 align:start position:0%
windows
so<00:17:15.039><c> let's</c><00:17:15.280><c> open</c><00:17:15.600><c> that</c><00:17:16.240><c> we</c><00:17:16.400><c> get</c><00:17:16.559><c> this</c><00:17:16.720><c> terminal</c>

00:17:17.110 --> 00:17:17.120 align:start position:0%
so let's open that we get this terminal
 

00:17:17.120 --> 00:17:19.669 align:start position:0%
so let's open that we get this terminal
window<00:17:17.520><c> or</c><00:17:17.839><c> command</c><00:17:18.240><c> prompt</c><00:17:18.559><c> on</c><00:17:18.720><c> windows</c>

00:17:19.669 --> 00:17:19.679 align:start position:0%
window or command prompt on windows
 

00:17:19.679 --> 00:17:21.189 align:start position:0%
window or command prompt on windows
here<00:17:19.919><c> we're</c><00:17:20.079><c> currently</c><00:17:20.559><c> inside</c><00:17:20.959><c> of</c><00:17:21.039><c> this</c>

00:17:21.189 --> 00:17:21.199 align:start position:0%
here we're currently inside of this
 

00:17:21.199 --> 00:17:23.110 align:start position:0%
here we're currently inside of this
folder<00:17:21.760><c> code</c><00:17:22.079><c> with</c><00:17:22.319><c> mush</c>

00:17:23.110 --> 00:17:23.120 align:start position:0%
folder code with mush
 

00:17:23.120 --> 00:17:25.510 align:start position:0%
folder code with mush
that<00:17:23.360><c> is</c><00:17:23.439><c> where</c><00:17:23.679><c> we</c><00:17:23.839><c> have</c><00:17:24.319><c> our</c><00:17:24.559><c> main</c><00:17:24.959><c> the</c><00:17:25.120><c> java</c>

00:17:25.510 --> 00:17:25.520 align:start position:0%
that is where we have our main the java
 

00:17:25.520 --> 00:17:26.309 align:start position:0%
that is where we have our main the java
file

00:17:26.309 --> 00:17:26.319 align:start position:0%
file
 

00:17:26.319 --> 00:17:28.390 align:start position:0%
file
now<00:17:26.480><c> we</c><00:17:26.640><c> can</c><00:17:26.880><c> invoke</c><00:17:27.199><c> the</c><00:17:27.360><c> java</c><00:17:27.760><c> compiler</c><00:17:28.240><c> like</c>

00:17:28.390 --> 00:17:28.400 align:start position:0%
now we can invoke the java compiler like
 

00:17:28.400 --> 00:17:30.230 align:start position:0%
now we can invoke the java compiler like
this<00:17:28.960><c> java</c><00:17:29.360><c> c</c>

00:17:30.230 --> 00:17:30.240 align:start position:0%
this java c
 

00:17:30.240 --> 00:17:32.390 align:start position:0%
this java c
and<00:17:30.480><c> pass</c><00:17:30.720><c> the</c><00:17:30.799><c> name</c><00:17:31.039><c> or</c><00:17:31.200><c> java</c><00:17:31.520><c> file</c><00:17:32.080><c> as</c><00:17:32.240><c> an</c>

00:17:32.390 --> 00:17:32.400 align:start position:0%
and pass the name or java file as an
 

00:17:32.400 --> 00:17:34.070 align:start position:0%
and pass the name or java file as an
argument<00:17:33.039><c> so</c><00:17:33.360><c> main</c>

00:17:34.070 --> 00:17:34.080 align:start position:0%
argument so main
 

00:17:34.080 --> 00:17:36.870 align:start position:0%
argument so main
to<00:17:34.320><c> java</c><00:17:35.120><c> if</c><00:17:35.280><c> you're</c><00:17:35.440><c> on</c><00:17:35.600><c> mac</c><00:17:35.840><c> or</c><00:17:36.000><c> linux</c><00:17:36.640><c> make</c>

00:17:36.870 --> 00:17:36.880 align:start position:0%
to java if you're on mac or linux make
 

00:17:36.880 --> 00:17:38.549 align:start position:0%
to java if you're on mac or linux make
sure<00:17:37.039><c> to</c><00:17:37.280><c> spell</c><00:17:37.520><c> this</c><00:17:37.679><c> with</c><00:17:37.840><c> a</c><00:17:37.919><c> capital</c><00:17:38.400><c> m</c>

00:17:38.549 --> 00:17:38.559 align:start position:0%
sure to spell this with a capital m
 

00:17:38.559 --> 00:17:40.310 align:start position:0%
sure to spell this with a capital m
because<00:17:38.799><c> these</c><00:17:39.039><c> operating</c><00:17:39.440><c> systems</c><00:17:39.919><c> are</c><00:17:40.080><c> case</c>

00:17:40.310 --> 00:17:40.320 align:start position:0%
because these operating systems are case
 

00:17:40.320 --> 00:17:41.590 align:start position:0%
because these operating systems are case
sensitive

00:17:41.590 --> 00:17:41.600 align:start position:0%
sensitive
 

00:17:41.600 --> 00:17:44.630 align:start position:0%
sensitive
so<00:17:42.320><c> enter</c><00:17:43.360><c> now</c><00:17:43.600><c> let's</c><00:17:43.760><c> look</c><00:17:43.919><c> at</c><00:17:44.080><c> the</c><00:17:44.240><c> content</c>

00:17:44.630 --> 00:17:44.640 align:start position:0%
so enter now let's look at the content
 

00:17:44.640 --> 00:17:45.750 align:start position:0%
so enter now let's look at the content
of<00:17:44.720><c> this</c><00:17:44.880><c> folder</c>

00:17:45.750 --> 00:17:45.760 align:start position:0%
of this folder
 

00:17:45.760 --> 00:17:48.070 align:start position:0%
of this folder
on<00:17:45.919><c> mac</c><00:17:46.160><c> or</c><00:17:46.320><c> linux</c><00:17:46.640><c> we</c><00:17:46.720><c> can</c><00:17:46.880><c> type</c><00:17:47.200><c> ls</c><00:17:47.840><c> on</c>

00:17:48.070 --> 00:17:48.080 align:start position:0%
on mac or linux we can type ls on
 

00:17:48.080 --> 00:17:49.590 align:start position:0%
on mac or linux we can type ls on
windows<00:17:48.480><c> we</c><00:17:48.720><c> type</c>

00:17:49.590 --> 00:17:49.600 align:start position:0%
windows we type
 

00:17:49.600 --> 00:17:52.710 align:start position:0%
windows we type
dir<00:17:51.120><c> so</c><00:17:51.760><c> let's</c><00:17:51.919><c> take</c><00:17:52.160><c> a</c><00:17:52.240><c> look</c>

00:17:52.710 --> 00:17:52.720 align:start position:0%
dir so let's take a look
 

00:17:52.720 --> 00:17:54.950 align:start position:0%
dir so let's take a look
in<00:17:52.880><c> this</c><00:17:53.039><c> folder</c><00:17:53.360><c> now</c><00:17:53.520><c> we</c><00:17:53.679><c> have</c><00:17:54.000><c> a</c><00:17:54.160><c> new</c><00:17:54.400><c> file</c>

00:17:54.950 --> 00:17:54.960 align:start position:0%
in this folder now we have a new file
 

00:17:54.960 --> 00:17:56.230 align:start position:0%
in this folder now we have a new file
main.class

00:17:56.230 --> 00:17:56.240 align:start position:0%
main.class
 

00:17:56.240 --> 00:17:58.230 align:start position:0%
main.class
this<00:17:56.480><c> is</c><00:17:56.559><c> the</c><00:17:56.880><c> bytecode</c><00:17:57.440><c> representation</c><00:17:58.160><c> of</c>

00:17:58.230 --> 00:17:58.240 align:start position:0%
this is the bytecode representation of
 

00:17:58.240 --> 00:17:59.750 align:start position:0%
this is the bytecode representation of
this<00:17:58.480><c> java</c><00:17:58.799><c> file</c>

00:17:59.750 --> 00:17:59.760 align:start position:0%
this java file
 

00:17:59.760 --> 00:18:02.310 align:start position:0%
this java file
now<00:18:00.240><c> let</c><00:18:00.400><c> me</c><00:18:00.559><c> use</c><00:18:00.880><c> intellij</c><00:18:01.440><c> to</c><00:18:01.600><c> run</c><00:18:01.840><c> our</c><00:18:02.000><c> java</c>

00:18:02.310 --> 00:18:02.320 align:start position:0%
now let me use intellij to run our java
 

00:18:02.320 --> 00:18:03.190 align:start position:0%
now let me use intellij to run our java
program

00:18:03.190 --> 00:18:03.200 align:start position:0%
program
 

00:18:03.200 --> 00:18:04.950 align:start position:0%
program
this<00:18:03.440><c> class</c><00:18:03.840><c> file</c><00:18:04.080><c> gets</c><00:18:04.320><c> stored</c><00:18:04.640><c> somewhere</c>

00:18:04.950 --> 00:18:04.960 align:start position:0%
this class file gets stored somewhere
 

00:18:04.960 --> 00:18:06.950 align:start position:0%
this class file gets stored somewhere
else<00:18:05.200><c> let</c><00:18:05.360><c> me</c><00:18:05.440><c> show</c><00:18:05.600><c> you</c>

00:18:06.950 --> 00:18:06.960 align:start position:0%
else let me show you
 

00:18:06.960 --> 00:18:10.150 align:start position:0%
else let me show you
so<00:18:07.200><c> back</c><00:18:07.360><c> to</c><00:18:07.520><c> the</c><00:18:07.679><c> project</c><00:18:08.080><c> panel</c><00:18:09.679><c> here</c><00:18:09.840><c> in</c><00:18:10.000><c> our</c>

00:18:10.150 --> 00:18:10.160 align:start position:0%
so back to the project panel here in our
 

00:18:10.160 --> 00:18:11.029 align:start position:0%
so back to the project panel here in our
project

00:18:11.029 --> 00:18:11.039 align:start position:0%
project
 

00:18:11.039 --> 00:18:12.789 align:start position:0%
project
we<00:18:11.200><c> have</c><00:18:11.360><c> this</c><00:18:11.440><c> source</c><00:18:11.840><c> folder</c><00:18:12.320><c> where</c><00:18:12.559><c> we</c><00:18:12.640><c> have</c>

00:18:12.789 --> 00:18:12.799 align:start position:0%
we have this source folder where we have
 

00:18:12.799 --> 00:18:14.150 align:start position:0%
we have this source folder where we have
our<00:18:13.039><c> source</c><00:18:13.360><c> code</c>

00:18:14.150 --> 00:18:14.160 align:start position:0%
our source code
 

00:18:14.160 --> 00:18:16.390 align:start position:0%
our source code
and<00:18:14.400><c> we</c><00:18:14.480><c> have</c><00:18:14.640><c> this</c><00:18:14.960><c> out</c><00:18:15.200><c> folder</c><00:18:15.679><c> where</c><00:18:16.240><c> we</c>

00:18:16.390 --> 00:18:16.400 align:start position:0%
and we have this out folder where we
 

00:18:16.400 --> 00:18:18.549 align:start position:0%
and we have this out folder where we
have<00:18:16.559><c> the</c><00:18:16.720><c> result</c><00:18:17.120><c> of</c><00:18:17.200><c> the</c><00:18:17.360><c> compilation</c>

00:18:18.549 --> 00:18:18.559 align:start position:0%
have the result of the compilation
 

00:18:18.559 --> 00:18:21.590 align:start position:0%
have the result of the compilation
so<00:18:19.440><c> inside</c><00:18:19.760><c> this</c><00:18:19.919><c> folder</c><00:18:20.240><c> we</c><00:18:20.320><c> have</c><00:18:20.480><c> production</c>

00:18:21.590 --> 00:18:21.600 align:start position:0%
so inside this folder we have production
 

00:18:21.600 --> 00:18:23.510 align:start position:0%
so inside this folder we have production
inside<00:18:21.919><c> this</c><00:18:22.080><c> we</c><00:18:22.240><c> have</c><00:18:22.400><c> hello</c><00:18:22.640><c> world</c><00:18:23.120><c> the</c><00:18:23.280><c> same</c>

00:18:23.510 --> 00:18:23.520 align:start position:0%
inside this we have hello world the same
 

00:18:23.520 --> 00:18:25.190 align:start position:0%
inside this we have hello world the same
name<00:18:23.760><c> as</c><00:18:23.919><c> our</c><00:18:24.080><c> project</c>

00:18:25.190 --> 00:18:25.200 align:start position:0%
name as our project
 

00:18:25.200 --> 00:18:26.950 align:start position:0%
name as our project
inside<00:18:25.520><c> hello</c><00:18:25.760><c> world</c><00:18:26.000><c> we</c><00:18:26.160><c> have</c><00:18:26.400><c> com</c><00:18:26.720><c> which</c><00:18:26.880><c> is</c>

00:18:26.950 --> 00:18:26.960 align:start position:0%
inside hello world we have com which is
 

00:18:26.960 --> 00:18:29.669 align:start position:0%
inside hello world we have com which is
the<00:18:27.039><c> name</c><00:18:27.280><c> of</c><00:18:27.440><c> our</c><00:18:27.600><c> top</c><00:18:27.840><c> level</c><00:18:28.240><c> package</c>

00:18:29.669 --> 00:18:29.679 align:start position:0%
the name of our top level package
 

00:18:29.679 --> 00:18:31.750 align:start position:0%
the name of our top level package
inside<00:18:29.919><c> this</c><00:18:30.080><c> package</c><00:18:30.480><c> we</c><00:18:30.640><c> have</c><00:18:31.360><c> a</c><00:18:31.520><c> sub</c>

00:18:31.750 --> 00:18:31.760 align:start position:0%
inside this package we have a sub
 

00:18:31.760 --> 00:18:33.830 align:start position:0%
inside this package we have a sub
package<00:18:32.080><c> that</c><00:18:32.240><c> is</c><00:18:32.400><c> code</c><00:18:32.640><c> with</c><00:18:32.799><c> mosh</c>

00:18:33.830 --> 00:18:33.840 align:start position:0%
package that is code with mosh
 

00:18:33.840 --> 00:18:36.789 align:start position:0%
package that is code with mosh
and<00:18:34.000><c> here</c><00:18:34.240><c> we</c><00:18:34.400><c> have</c><00:18:34.799><c> our</c><00:18:35.039><c> main.class</c><00:18:35.840><c> file</c><00:18:36.640><c> so</c>

00:18:36.789 --> 00:18:36.799 align:start position:0%
and here we have our main.class file so
 

00:18:36.799 --> 00:18:38.710 align:start position:0%
and here we have our main.class file so
this<00:18:36.960><c> was</c><00:18:37.120><c> the</c><00:18:37.200><c> compilation</c><00:18:37.760><c> step</c>

00:18:38.710 --> 00:18:38.720 align:start position:0%
this was the compilation step
 

00:18:38.720 --> 00:18:40.630 align:start position:0%
this was the compilation step
now<00:18:38.880><c> this</c><00:18:39.200><c> java</c><00:18:39.679><c> byte</c><00:18:39.919><c> code</c><00:18:40.160><c> that</c><00:18:40.320><c> we</c><00:18:40.400><c> have</c><00:18:40.559><c> in</c>

00:18:40.630 --> 00:18:40.640 align:start position:0%
now this java byte code that we have in
 

00:18:40.640 --> 00:18:43.350 align:start position:0%
now this java byte code that we have in
this<00:18:40.880><c> file</c><00:18:41.280><c> is</c><00:18:41.600><c> platform</c><00:18:42.320><c> independent</c><00:18:43.200><c> and</c>

00:18:43.350 --> 00:18:43.360 align:start position:0%
this file is platform independent and
 

00:18:43.360 --> 00:18:45.270 align:start position:0%
this file is platform independent and
that<00:18:43.600><c> means</c><00:18:43.840><c> it</c><00:18:43.919><c> can</c><00:18:44.160><c> run</c><00:18:44.400><c> on</c><00:18:44.559><c> windows</c>

00:18:45.270 --> 00:18:45.280 align:start position:0%
that means it can run on windows
 

00:18:45.280 --> 00:18:48.310 align:start position:0%
that means it can run on windows
mac<00:18:45.919><c> linux</c><00:18:46.640><c> or</c><00:18:46.880><c> any</c><00:18:47.200><c> operating</c><00:18:47.600><c> systems</c><00:18:48.160><c> that</c>

00:18:48.310 --> 00:18:48.320 align:start position:0%
mac linux or any operating systems that
 

00:18:48.320 --> 00:18:48.789 align:start position:0%
mac linux or any operating systems that
has<00:18:48.559><c> a</c>

00:18:48.789 --> 00:18:48.799 align:start position:0%
has a
 

00:18:48.799 --> 00:18:52.390 align:start position:0%
has a
java<00:18:49.520><c> runtime</c><00:18:50.080><c> environment</c><00:18:51.760><c> if</c><00:18:51.919><c> we</c><00:18:52.000><c> go</c><00:18:52.160><c> to</c>

00:18:52.390 --> 00:18:52.400 align:start position:0%
java runtime environment if we go to
 

00:18:52.400 --> 00:18:53.510 align:start position:0%
java runtime environment if we go to
java.com

00:18:53.510 --> 00:18:53.520 align:start position:0%
java.com
 

00:18:53.520 --> 00:18:56.310 align:start position:0%
java.com
download<00:18:54.240><c> we</c><00:18:54.400><c> can</c><00:18:54.640><c> download</c><00:18:55.120><c> java</c><00:18:55.520><c> or</c><00:18:56.000><c> more</c>

00:18:56.310 --> 00:18:56.320 align:start position:0%
download we can download java or more
 

00:18:56.320 --> 00:18:58.630 align:start position:0%
download we can download java or more
accurately<00:18:56.960><c> java</c><00:18:57.360><c> runtime</c><00:18:57.840><c> environment</c><00:18:58.400><c> for</c>

00:18:58.630 --> 00:18:58.640 align:start position:0%
accurately java runtime environment for
 

00:18:58.640 --> 00:19:00.310 align:start position:0%
accurately java runtime environment for
various<00:18:59.039><c> operating</c><00:18:59.520><c> systems</c>

00:19:00.310 --> 00:19:00.320 align:start position:0%
various operating systems
 

00:19:00.320 --> 00:19:02.470 align:start position:0%
various operating systems
this<00:19:00.640><c> java</c><00:19:01.039><c> runtime</c><00:19:01.440><c> environment</c><00:19:02.080><c> has</c><00:19:02.320><c> a</c>

00:19:02.470 --> 00:19:02.480 align:start position:0%
this java runtime environment has a
 

00:19:02.480 --> 00:19:04.070 align:start position:0%
this java runtime environment has a
software<00:19:02.880><c> component</c><00:19:03.440><c> called</c>

00:19:04.070 --> 00:19:04.080 align:start position:0%
software component called
 

00:19:04.080 --> 00:19:07.190 align:start position:0%
software component called
java<00:19:04.640><c> virtual</c><00:19:05.039><c> machine</c><00:19:05.520><c> or</c><00:19:06.000><c> jvm</c>

00:19:07.190 --> 00:19:07.200 align:start position:0%
java virtual machine or jvm
 

00:19:07.200 --> 00:19:10.230 align:start position:0%
java virtual machine or jvm
this<00:19:07.440><c> jvm</c><00:19:08.000><c> takes</c><00:19:08.240><c> our</c><00:19:08.480><c> java</c><00:19:08.960><c> byte</c><00:19:09.200><c> code</c><00:19:09.919><c> and</c>

00:19:10.230 --> 00:19:10.240 align:start position:0%
this jvm takes our java byte code and
 

00:19:10.240 --> 00:19:12.470 align:start position:0%
this jvm takes our java byte code and
translates<00:19:10.799><c> it</c><00:19:10.880><c> to</c><00:19:11.039><c> the</c><00:19:11.200><c> native</c><00:19:11.520><c> code</c><00:19:12.000><c> for</c><00:19:12.160><c> the</c>

00:19:12.470 --> 00:19:12.480 align:start position:0%
translates it to the native code for the
 

00:19:12.480 --> 00:19:14.470 align:start position:0%
translates it to the native code for the
underlying<00:19:13.039><c> operating</c><00:19:13.520><c> system</c>

00:19:14.470 --> 00:19:14.480 align:start position:0%
underlying operating system
 

00:19:14.480 --> 00:19:16.390 align:start position:0%
underlying operating system
so<00:19:14.640><c> if</c><00:19:14.799><c> you're</c><00:19:14.960><c> on</c><00:19:15.039><c> a</c><00:19:15.120><c> windows</c><00:19:15.600><c> machine</c><00:19:16.080><c> this</c>

00:19:16.390 --> 00:19:16.400 align:start position:0%
so if you're on a windows machine this
 

00:19:16.400 --> 00:19:17.669 align:start position:0%
so if you're on a windows machine this
java<00:19:16.720><c> virtual</c><00:19:17.120><c> machine</c>

00:19:17.669 --> 00:19:17.679 align:start position:0%
java virtual machine
 

00:19:17.679 --> 00:19:19.909 align:start position:0%
java virtual machine
converts<00:19:18.080><c> our</c><00:19:18.320><c> java</c><00:19:18.720><c> byte</c><00:19:19.039><c> code</c><00:19:19.520><c> into</c><00:19:19.760><c> the</c>

00:19:19.909 --> 00:19:19.919 align:start position:0%
converts our java byte code into the
 

00:19:19.919 --> 00:19:22.390 align:start position:0%
converts our java byte code into the
native<00:19:20.240><c> code</c><00:19:20.480><c> that</c><00:19:20.720><c> windows</c><00:19:21.120><c> can</c><00:19:21.360><c> understand</c>

00:19:22.390 --> 00:19:22.400 align:start position:0%
native code that windows can understand
 

00:19:22.400 --> 00:19:24.789 align:start position:0%
native code that windows can understand
this<00:19:22.640><c> architecture</c><00:19:23.360><c> is</c><00:19:23.440><c> the</c><00:19:23.600><c> reason</c><00:19:24.000><c> why</c><00:19:24.480><c> java</c>

00:19:24.789 --> 00:19:24.799 align:start position:0%
this architecture is the reason why java
 

00:19:24.799 --> 00:19:26.549 align:start position:0%
this architecture is the reason why java
applications<00:19:25.440><c> are</c><00:19:25.600><c> portable</c><00:19:26.160><c> or</c>

00:19:26.549 --> 00:19:26.559 align:start position:0%
applications are portable or
 

00:19:26.559 --> 00:19:29.270 align:start position:0%
applications are portable or
platform<00:19:27.200><c> independent</c><00:19:28.240><c> we</c><00:19:28.400><c> can</c><00:19:28.559><c> write</c><00:19:28.799><c> a</c><00:19:28.960><c> java</c>

00:19:29.270 --> 00:19:29.280 align:start position:0%
platform independent we can write a java
 

00:19:29.280 --> 00:19:30.870 align:start position:0%
platform independent we can write a java
program<00:19:29.679><c> on</c><00:19:29.760><c> a</c><00:19:29.840><c> windows</c><00:19:30.240><c> machine</c>

00:19:30.870 --> 00:19:30.880 align:start position:0%
program on a windows machine
 

00:19:30.880 --> 00:19:33.830 align:start position:0%
program on a windows machine
and<00:19:31.200><c> execute</c><00:19:31.679><c> it</c><00:19:31.840><c> on</c><00:19:32.000><c> linux</c><00:19:32.720><c> mac</c><00:19:33.200><c> or</c><00:19:33.360><c> any</c><00:19:33.600><c> other</c>

00:19:33.830 --> 00:19:33.840 align:start position:0%
and execute it on linux mac or any other
 

00:19:33.840 --> 00:19:35.590 align:start position:0%
and execute it on linux mac or any other
operating<00:19:34.240><c> systems</c><00:19:34.640><c> that</c><00:19:34.799><c> have</c><00:19:34.960><c> a</c><00:19:35.120><c> java</c>

00:19:35.590 --> 00:19:35.600 align:start position:0%
operating systems that have a java
 

00:19:35.600 --> 00:19:37.190 align:start position:0%
operating systems that have a java
runtime<00:19:36.080><c> environment</c>

00:19:37.190 --> 00:19:37.200 align:start position:0%
runtime environment
 

00:19:37.200 --> 00:19:39.350 align:start position:0%
runtime environment
c-sharp<00:19:37.760><c> and</c><00:19:38.000><c> python</c><00:19:38.480><c> also</c><00:19:38.720><c> have</c><00:19:38.880><c> the</c><00:19:39.120><c> same</c>

00:19:39.350 --> 00:19:39.360 align:start position:0%
c-sharp and python also have the same
 

00:19:39.360 --> 00:19:41.510 align:start position:0%
c-sharp and python also have the same
architecture<00:19:40.160><c> that's</c><00:19:40.400><c> why</c><00:19:40.640><c> they're</c><00:19:40.960><c> platform</c>

00:19:41.510 --> 00:19:41.520 align:start position:0%
architecture that's why they're platform
 

00:19:41.520 --> 00:19:43.190 align:start position:0%
architecture that's why they're platform
independent<00:19:42.160><c> as</c><00:19:42.320><c> well</c>

00:19:43.190 --> 00:19:43.200 align:start position:0%
independent as well
 

00:19:43.200 --> 00:19:45.110 align:start position:0%
independent as well
now<00:19:43.360><c> let</c><00:19:43.520><c> me</c><00:19:43.600><c> show</c><00:19:43.760><c> you</c><00:19:43.919><c> how</c><00:19:44.080><c> to</c><00:19:44.320><c> invoke</c><00:19:44.799><c> this</c>

00:19:45.110 --> 00:19:45.120 align:start position:0%
now let me show you how to invoke this
 

00:19:45.120 --> 00:19:47.110 align:start position:0%
now let me show you how to invoke this
java<00:19:45.520><c> virtual</c><00:19:45.840><c> machine</c><00:19:46.240><c> to</c><00:19:46.400><c> run</c><00:19:46.640><c> a</c><00:19:46.799><c> java</c>

00:19:47.110 --> 00:19:47.120 align:start position:0%
java virtual machine to run a java
 

00:19:47.120 --> 00:19:48.710 align:start position:0%
java virtual machine to run a java
program

00:19:48.710 --> 00:19:48.720 align:start position:0%
program
 

00:19:48.720 --> 00:19:50.950 align:start position:0%
program
so<00:19:48.880><c> back</c><00:19:49.120><c> to</c><00:19:49.200><c> this</c><00:19:49.360><c> terminal</c><00:19:49.760><c> window</c><00:19:50.559><c> let</c><00:19:50.720><c> me</c>

00:19:50.950 --> 00:19:50.960 align:start position:0%
so back to this terminal window let me
 

00:19:50.960 --> 00:19:52.470 align:start position:0%
so back to this terminal window let me
expand<00:19:51.360><c> this</c>

00:19:52.470 --> 00:19:52.480 align:start position:0%
expand this
 

00:19:52.480 --> 00:19:54.549 align:start position:0%
expand this
currently<00:19:52.799><c> we</c><00:19:53.039><c> are</c><00:19:53.600><c> inside</c><00:19:54.000><c> of</c><00:19:54.080><c> this</c><00:19:54.240><c> folder</c>

00:19:54.549 --> 00:19:54.559 align:start position:0%
currently we are inside of this folder
 

00:19:54.559 --> 00:19:56.150 align:start position:0%
currently we are inside of this folder
code<00:19:54.799><c> with</c><00:19:55.039><c> mosh</c><00:19:55.280><c> and</c><00:19:55.440><c> in</c><00:19:55.520><c> this</c><00:19:55.679><c> folder</c><00:19:56.000><c> we</c>

00:19:56.150 --> 00:19:56.160 align:start position:0%
code with mosh and in this folder we
 

00:19:56.160 --> 00:19:56.710 align:start position:0%
code with mosh and in this folder we
have

00:19:56.710 --> 00:19:56.720 align:start position:0%
have
 

00:19:56.720 --> 00:19:59.590 align:start position:0%
have
this<00:19:56.960><c> class</c><00:19:57.280><c> file</c><00:19:58.320><c> now</c><00:19:58.559><c> let's</c><00:19:58.799><c> go</c><00:19:59.039><c> one</c><00:19:59.200><c> level</c>

00:19:59.590 --> 00:19:59.600 align:start position:0%
this class file now let's go one level
 

00:19:59.600 --> 00:19:59.909 align:start position:0%
this class file now let's go one level
up

00:19:59.909 --> 00:19:59.919 align:start position:0%
up
 

00:19:59.919 --> 00:20:04.470 align:start position:0%
up
so<00:20:00.240><c> cd</c><00:20:01.200><c> dot</c><00:20:01.520><c> dot</c><00:20:02.159><c> and</c><00:20:02.400><c> one</c><00:20:02.559><c> more</c><00:20:02.799><c> time</c>

00:20:04.470 --> 00:20:04.480 align:start position:0%
so cd dot dot and one more time
 

00:20:04.480 --> 00:20:07.190 align:start position:0%
so cd dot dot and one more time
so<00:20:04.640><c> now</c><00:20:04.799><c> we</c><00:20:05.039><c> are</c><00:20:05.600><c> inside</c><00:20:05.919><c> the</c><00:20:06.080><c> source</c><00:20:06.320><c> folder</c>

00:20:07.190 --> 00:20:07.200 align:start position:0%
so now we are inside the source folder
 

00:20:07.200 --> 00:20:09.110 align:start position:0%
so now we are inside the source folder
we<00:20:07.280><c> can</c><00:20:07.520><c> invoke</c><00:20:07.919><c> java</c><00:20:08.240><c> virtual</c><00:20:08.559><c> machine</c><00:20:08.960><c> like</c>

00:20:09.110 --> 00:20:09.120 align:start position:0%
we can invoke java virtual machine like
 

00:20:09.120 --> 00:20:09.590 align:start position:0%
we can invoke java virtual machine like
this

00:20:09.590 --> 00:20:09.600 align:start position:0%
this
 

00:20:09.600 --> 00:20:12.390 align:start position:0%
this
we<00:20:09.760><c> type</c><00:20:10.080><c> java</c><00:20:10.960><c> and</c><00:20:11.039><c> then</c><00:20:11.200><c> we</c><00:20:11.440><c> type</c><00:20:11.840><c> the</c><00:20:12.080><c> full</c>

00:20:12.390 --> 00:20:12.400 align:start position:0%
we type java and then we type the full
 

00:20:12.400 --> 00:20:12.870 align:start position:0%
we type java and then we type the full
pass

00:20:12.870 --> 00:20:12.880 align:start position:0%
pass
 

00:20:12.880 --> 00:20:15.029 align:start position:0%
pass
to<00:20:13.039><c> our</c><00:20:13.280><c> main</c><00:20:13.600><c> class</c><00:20:13.919><c> file</c><00:20:14.320><c> what</c><00:20:14.480><c> do</c><00:20:14.640><c> i</c><00:20:14.720><c> mean</c><00:20:14.880><c> by</c>

00:20:15.029 --> 00:20:15.039 align:start position:0%
to our main class file what do i mean by
 

00:20:15.039 --> 00:20:16.630 align:start position:0%
to our main class file what do i mean by
that<00:20:15.679><c> well</c>

00:20:16.630 --> 00:20:16.640 align:start position:0%
that well
 

00:20:16.640 --> 00:20:19.750 align:start position:0%
that well
earlier<00:20:16.960><c> we</c><00:20:17.120><c> defined</c><00:20:17.760><c> this</c><00:20:18.080><c> package</c><00:20:18.799><c> com.code</c>

00:20:19.750 --> 00:20:19.760 align:start position:0%
earlier we defined this package com.code
 

00:20:19.760 --> 00:20:20.549 align:start position:0%
earlier we defined this package com.code
with<00:20:19.919><c> mosh</c>

00:20:20.549 --> 00:20:20.559 align:start position:0%
with mosh
 

00:20:20.559 --> 00:20:23.029 align:start position:0%
with mosh
and<00:20:20.720><c> this</c><00:20:20.960><c> class</c><00:20:21.440><c> the</c><00:20:21.679><c> main</c><00:20:21.919><c> class</c><00:20:22.480><c> is</c><00:20:22.720><c> part</c><00:20:22.960><c> of</c>

00:20:23.029 --> 00:20:23.039 align:start position:0%
and this class the main class is part of
 

00:20:23.039 --> 00:20:24.390 align:start position:0%
and this class the main class is part of
this<00:20:23.280><c> package</c>

00:20:24.390 --> 00:20:24.400 align:start position:0%
this package
 

00:20:24.400 --> 00:20:29.029 align:start position:0%
this package
so<00:20:24.960><c> the</c><00:20:25.200><c> full</c><00:20:25.520><c> path</c><00:20:26.080><c> to</c><00:20:26.320><c> this</c><00:20:26.559><c> class</c><00:20:26.960><c> is</c>

00:20:29.029 --> 00:20:29.039 align:start position:0%
so the full path to this class is
 

00:20:29.039 --> 00:20:32.549 align:start position:0%
so the full path to this class is
com<00:20:30.000><c> dot</c><00:20:30.640><c> code</c><00:20:30.960><c> with</c><00:20:31.120><c> mosh</c><00:20:31.840><c> dot</c>

00:20:32.549 --> 00:20:32.559 align:start position:0%
com dot code with mosh dot
 

00:20:32.559 --> 00:20:35.110 align:start position:0%
com dot code with mosh dot
main<00:20:33.360><c> make</c><00:20:33.520><c> sure</c><00:20:33.760><c> to</c><00:20:33.840><c> use</c><00:20:34.080><c> a</c><00:20:34.159><c> capital</c><00:20:34.640><c> m</c><00:20:34.880><c> here</c>

00:20:35.110 --> 00:20:35.120 align:start position:0%
main make sure to use a capital m here
 

00:20:35.120 --> 00:20:35.669 align:start position:0%
main make sure to use a capital m here
because

00:20:35.669 --> 00:20:35.679 align:start position:0%
because
 

00:20:35.679 --> 00:20:38.470 align:start position:0%
because
this<00:20:35.919><c> is</c><00:20:36.080><c> case</c><00:20:36.320><c> sensitive</c><00:20:37.600><c> now</c><00:20:37.840><c> when</c><00:20:38.000><c> we</c><00:20:38.159><c> press</c>

00:20:38.470 --> 00:20:38.480 align:start position:0%
this is case sensitive now when we press
 

00:20:38.480 --> 00:20:39.350 align:start position:0%
this is case sensitive now when we press
enter

00:20:39.350 --> 00:20:39.360 align:start position:0%
enter
 

00:20:39.360 --> 00:20:41.990 align:start position:0%
enter
java<00:20:39.679><c> will</c><00:20:39.840><c> look</c><00:20:40.000><c> at</c><00:20:40.080><c> this</c><00:20:40.240><c> folder</c><00:20:40.880><c> com</c><00:20:41.679><c> inside</c>

00:20:41.990 --> 00:20:42.000 align:start position:0%
java will look at this folder com inside
 

00:20:42.000 --> 00:20:42.630 align:start position:0%
java will look at this folder com inside
this<00:20:42.159><c> folder</c>

00:20:42.630 --> 00:20:42.640 align:start position:0%
this folder
 

00:20:42.640 --> 00:20:44.149 align:start position:0%
this folder
it<00:20:42.720><c> will</c><00:20:42.880><c> look</c><00:20:43.039><c> at</c><00:20:43.120><c> this</c><00:20:43.360><c> other</c><00:20:43.600><c> folder</c><00:20:43.919><c> called</c>

00:20:44.149 --> 00:20:44.159 align:start position:0%
it will look at this other folder called
 

00:20:44.159 --> 00:20:46.149 align:start position:0%
it will look at this other folder called
with<00:20:44.400><c> mosh</c><00:20:44.880><c> and</c><00:20:45.039><c> then</c><00:20:45.200><c> it</c><00:20:45.360><c> will</c><00:20:45.520><c> find</c>

00:20:46.149 --> 00:20:46.159 align:start position:0%
with mosh and then it will find
 

00:20:46.159 --> 00:20:49.110 align:start position:0%
with mosh and then it will find
main.class<00:20:47.600><c> in</c><00:20:47.679><c> that</c><00:20:47.919><c> folder</c><00:20:48.559><c> it</c><00:20:48.720><c> will</c><00:20:48.880><c> load</c>

00:20:49.110 --> 00:20:49.120 align:start position:0%
main.class in that folder it will load
 

00:20:49.120 --> 00:20:50.390 align:start position:0%
main.class in that folder it will load
the<00:20:49.280><c> bytecode</c><00:20:49.919><c> and</c>

00:20:50.390 --> 00:20:50.400 align:start position:0%
the bytecode and
 

00:20:50.400 --> 00:20:52.230 align:start position:0%
the bytecode and
convert<00:20:50.799><c> it</c><00:20:50.880><c> to</c><00:20:51.039><c> the</c><00:20:51.120><c> native</c><00:20:51.440><c> code</c><00:20:51.840><c> for</c><00:20:52.080><c> the</c>

00:20:52.230 --> 00:20:52.240 align:start position:0%
convert it to the native code for the
 

00:20:52.240 --> 00:20:54.070 align:start position:0%
convert it to the native code for the
operating<00:20:52.640><c> system</c><00:20:52.960><c> we</c><00:20:53.120><c> are</c><00:20:53.200><c> using</c>

00:20:54.070 --> 00:20:54.080 align:start position:0%
operating system we are using
 

00:20:54.080 --> 00:20:56.710 align:start position:0%
operating system we are using
so<00:20:54.559><c> take</c><00:20:54.799><c> a</c><00:20:54.880><c> look</c><00:20:55.520><c> so</c><00:20:55.840><c> it</c><00:20:56.080><c> executed</c><00:20:56.559><c> our</c>

00:20:56.710 --> 00:20:56.720 align:start position:0%
so take a look so it executed our
 

00:20:56.720 --> 00:20:58.710 align:start position:0%
so take a look so it executed our
program<00:20:57.039><c> hello</c><00:20:57.360><c> world</c><00:20:57.679><c> beautiful</c>

00:20:58.710 --> 00:20:58.720 align:start position:0%
program hello world beautiful
 

00:20:58.720 --> 00:21:00.870 align:start position:0%
program hello world beautiful
when<00:20:58.880><c> we</c><00:20:59.039><c> run</c><00:20:59.200><c> a</c><00:20:59.280><c> program</c><00:20:59.600><c> using</c><00:20:59.919><c> intellij</c><00:21:00.720><c> all</c>

00:21:00.870 --> 00:21:00.880 align:start position:0%
when we run a program using intellij all
 

00:21:00.880 --> 00:21:02.789 align:start position:0%
when we run a program using intellij all
these<00:21:01.120><c> steps</c><00:21:01.679><c> are</c><00:21:01.840><c> hidden</c><00:21:02.159><c> from</c><00:21:02.480><c> us</c>

00:21:02.789 --> 00:21:02.799 align:start position:0%
these steps are hidden from us
 

00:21:02.799 --> 00:21:04.310 align:start position:0%
these steps are hidden from us
we<00:21:02.960><c> don't</c><00:21:03.120><c> see</c><00:21:03.280><c> the</c><00:21:03.440><c> compilation</c><00:21:04.080><c> or</c>

00:21:04.310 --> 00:21:04.320 align:start position:0%
we don't see the compilation or
 

00:21:04.320 --> 00:21:08.870 align:start position:0%
we don't see the compilation or
execution<00:21:04.880><c> steps</c>

00:21:08.870 --> 00:21:08.880 align:start position:0%
 
 

00:21:08.880 --> 00:21:11.270 align:start position:0%
 
so<00:21:09.120><c> you</c><00:21:09.280><c> have</c><00:21:09.360><c> seen</c><00:21:09.679><c> java</c><00:21:10.000><c> in</c><00:21:10.240><c> action</c><00:21:10.960><c> now</c><00:21:11.120><c> let</c>

00:21:11.270 --> 00:21:11.280 align:start position:0%
so you have seen java in action now let
 

00:21:11.280 --> 00:21:11.990 align:start position:0%
so you have seen java in action now let
me<00:21:11.440><c> tell</c><00:21:11.600><c> you</c>

00:21:11.990 --> 00:21:12.000 align:start position:0%
me tell you
 

00:21:12.000 --> 00:21:14.950 align:start position:0%
me tell you
five<00:21:12.320><c> interesting</c><00:21:12.880><c> facts</c><00:21:13.200><c> about</c><00:21:13.600><c> java</c><00:21:14.640><c> java</c>

00:21:14.950 --> 00:21:14.960 align:start position:0%
five interesting facts about java java
 

00:21:14.960 --> 00:21:16.870 align:start position:0%
five interesting facts about java java
was<00:21:15.200><c> developed</c><00:21:15.520><c> by</c><00:21:15.760><c> james</c><00:21:16.159><c> gosling</c>

00:21:16.870 --> 00:21:16.880 align:start position:0%
was developed by james gosling
 

00:21:16.880 --> 00:21:20.070 align:start position:0%
was developed by james gosling
in<00:21:17.039><c> 1995</c><00:21:18.080><c> at</c><00:21:18.320><c> sun</c><00:21:18.559><c> microsystems</c><00:21:19.600><c> which</c><00:21:19.840><c> was</c>

00:21:20.070 --> 00:21:20.080 align:start position:0%
in 1995 at sun microsystems which was
 

00:21:20.080 --> 00:21:22.789 align:start position:0%
in 1995 at sun microsystems which was
later<00:21:20.400><c> acquired</c><00:21:20.880><c> by</c><00:21:21.120><c> oracle</c><00:21:21.679><c> in</c><00:21:21.840><c> 2010.</c>

00:21:22.789 --> 00:21:22.799 align:start position:0%
later acquired by oracle in 2010.
 

00:21:22.799 --> 00:21:25.029 align:start position:0%
later acquired by oracle in 2010.
it<00:21:22.960><c> was</c><00:21:23.120><c> originally</c><00:21:23.600><c> called</c><00:21:24.000><c> oak</c><00:21:24.559><c> after</c><00:21:24.880><c> an</c>

00:21:25.029 --> 00:21:25.039 align:start position:0%
it was originally called oak after an
 

00:21:25.039 --> 00:21:27.350 align:start position:0%
it was originally called oak after an
oak<00:21:25.280><c> tree</c><00:21:25.600><c> that</c><00:21:25.760><c> stood</c><00:21:26.240><c> outside</c><00:21:26.720><c> gosling's</c>

00:21:27.350 --> 00:21:27.360 align:start position:0%
oak tree that stood outside gosling's
 

00:21:27.360 --> 00:21:28.070 align:start position:0%
oak tree that stood outside gosling's
office

00:21:28.070 --> 00:21:28.080 align:start position:0%
office
 

00:21:28.080 --> 00:21:29.909 align:start position:0%
office
later<00:21:28.400><c> it</c><00:21:28.559><c> was</c><00:21:28.640><c> renamed</c><00:21:28.960><c> to</c><00:21:29.120><c> green</c><00:21:29.520><c> and</c><00:21:29.679><c> was</c>

00:21:29.909 --> 00:21:29.919 align:start position:0%
later it was renamed to green and was
 

00:21:29.919 --> 00:21:31.510 align:start position:0%
later it was renamed to green and was
finally<00:21:30.320><c> renamed</c><00:21:30.720><c> to</c><00:21:30.880><c> java</c>

00:21:31.510 --> 00:21:31.520 align:start position:0%
finally renamed to java
 

00:21:31.520 --> 00:21:34.149 align:start position:0%
finally renamed to java
inspired<00:21:32.000><c> by</c><00:21:32.240><c> java</c><00:21:32.720><c> coffee</c><00:21:33.440><c> that's</c><00:21:33.679><c> why</c><00:21:33.919><c> its</c>

00:21:34.149 --> 00:21:34.159 align:start position:0%
inspired by java coffee that's why its
 

00:21:34.159 --> 00:21:35.990 align:start position:0%
inspired by java coffee that's why its
logo<00:21:34.480><c> looks</c><00:21:34.720><c> like</c><00:21:34.880><c> this</c>

00:21:35.990 --> 00:21:36.000 align:start position:0%
logo looks like this
 

00:21:36.000 --> 00:21:37.830 align:start position:0%
logo looks like this
we<00:21:36.159><c> have</c><00:21:36.320><c> four</c><00:21:36.640><c> editions</c><00:21:37.039><c> of</c><00:21:37.200><c> java</c><00:21:37.600><c> for</c>

00:21:37.830 --> 00:21:37.840 align:start position:0%
we have four editions of java for
 

00:21:37.840 --> 00:21:39.830 align:start position:0%
we have four editions of java for
building<00:21:38.240><c> different</c><00:21:38.559><c> kinds</c><00:21:38.799><c> of</c><00:21:38.960><c> applications</c>

00:21:39.830 --> 00:21:39.840 align:start position:0%
building different kinds of applications
 

00:21:39.840 --> 00:21:42.149 align:start position:0%
building different kinds of applications
we<00:21:40.000><c> have</c><00:21:40.240><c> java</c><00:21:40.720><c> standard</c><00:21:41.200><c> edition</c><00:21:41.840><c> this</c><00:21:42.080><c> is</c>

00:21:42.149 --> 00:21:42.159 align:start position:0%
we have java standard edition this is
 

00:21:42.159 --> 00:21:43.909 align:start position:0%
we have java standard edition this is
the<00:21:42.320><c> core</c><00:21:42.640><c> java</c><00:21:43.039><c> platform</c><00:21:43.520><c> which</c><00:21:43.679><c> is</c><00:21:43.760><c> what</c>

00:21:43.909 --> 00:21:43.919 align:start position:0%
the core java platform which is what
 

00:21:43.919 --> 00:21:45.350 align:start position:0%
the core java platform which is what
we're<00:21:44.080><c> using</c><00:21:44.400><c> in</c><00:21:44.480><c> this</c><00:21:44.640><c> course</c>

00:21:45.350 --> 00:21:45.360 align:start position:0%
we're using in this course
 

00:21:45.360 --> 00:21:47.350 align:start position:0%
we're using in this course
it<00:21:45.520><c> contains</c><00:21:46.080><c> all</c><00:21:46.240><c> of</c><00:21:46.320><c> the</c><00:21:46.480><c> libraries</c><00:21:47.039><c> that</c>

00:21:47.350 --> 00:21:47.360 align:start position:0%
it contains all of the libraries that
 

00:21:47.360 --> 00:21:49.510 align:start position:0%
it contains all of the libraries that
every<00:21:47.679><c> java</c><00:21:48.080><c> developer</c><00:21:48.640><c> must</c><00:21:48.880><c> learn</c>

00:21:49.510 --> 00:21:49.520 align:start position:0%
every java developer must learn
 

00:21:49.520 --> 00:21:51.830 align:start position:0%
every java developer must learn
we<00:21:49.679><c> have</c><00:21:49.919><c> java</c><00:21:50.400><c> enterprise</c><00:21:50.960><c> edition</c><00:21:51.440><c> which</c><00:21:51.760><c> is</c>

00:21:51.830 --> 00:21:51.840 align:start position:0%
we have java enterprise edition which is
 

00:21:51.840 --> 00:21:52.950 align:start position:0%
we have java enterprise edition which is
used<00:21:52.080><c> for</c><00:21:52.320><c> building</c>

00:21:52.950 --> 00:21:52.960 align:start position:0%
used for building
 

00:21:52.960 --> 00:21:55.830 align:start position:0%
used for building
very<00:21:53.280><c> large</c><00:21:53.679><c> scale</c><00:21:54.320><c> and</c><00:21:54.480><c> distributed</c><00:21:55.200><c> systems</c>

00:21:55.830 --> 00:21:55.840 align:start position:0%
very large scale and distributed systems
 

00:21:55.840 --> 00:21:57.909 align:start position:0%
very large scale and distributed systems
it's<00:21:56.159><c> built</c><00:21:56.480><c> on</c><00:21:56.720><c> top</c><00:21:56.960><c> of</c><00:21:57.120><c> java</c><00:21:57.440><c> standard</c>

00:21:57.909 --> 00:21:57.919 align:start position:0%
it's built on top of java standard
 

00:21:57.919 --> 00:21:58.870 align:start position:0%
it's built on top of java standard
edition<00:21:58.400><c> and</c>

00:21:58.870 --> 00:21:58.880 align:start position:0%
edition and
 

00:21:58.880 --> 00:22:00.950 align:start position:0%
edition and
provides<00:21:59.440><c> additional</c><00:21:59.919><c> libraries</c><00:22:00.480><c> for</c>

00:22:00.950 --> 00:22:00.960 align:start position:0%
provides additional libraries for
 

00:22:00.960 --> 00:22:02.710 align:start position:0%
provides additional libraries for
building<00:22:01.679><c> fault</c><00:22:02.000><c> tolerant</c>

00:22:02.710 --> 00:22:02.720 align:start position:0%
building fault tolerant
 

00:22:02.720 --> 00:22:05.750 align:start position:0%
building fault tolerant
distributed<00:22:03.760><c> multitude</c><00:22:04.320><c> software</c><00:22:05.360><c> we</c><00:22:05.520><c> have</c>

00:22:05.750 --> 00:22:05.760 align:start position:0%
distributed multitude software we have
 

00:22:05.760 --> 00:22:07.190 align:start position:0%
distributed multitude software we have
java<00:22:06.159><c> micro</c><00:22:06.559><c> edition</c>

00:22:07.190 --> 00:22:07.200 align:start position:0%
java micro edition
 

00:22:07.200 --> 00:22:09.110 align:start position:0%
java micro edition
which<00:22:07.440><c> is</c><00:22:07.600><c> a</c><00:22:07.760><c> subset</c><00:22:08.159><c> of</c><00:22:08.320><c> java</c><00:22:08.640><c> standard</c>

00:22:09.110 --> 00:22:09.120 align:start position:0%
which is a subset of java standard
 

00:22:09.120 --> 00:22:10.549 align:start position:0%
which is a subset of java standard
edition<00:22:09.840><c> designed</c>

00:22:10.549 --> 00:22:10.559 align:start position:0%
edition designed
 

00:22:10.559 --> 00:22:13.029 align:start position:0%
edition designed
for<00:22:10.720><c> mobile</c><00:22:11.120><c> devices</c><00:22:11.760><c> so</c><00:22:11.919><c> it</c><00:22:12.080><c> has</c><00:22:12.320><c> libraries</c>

00:22:13.029 --> 00:22:13.039 align:start position:0%
for mobile devices so it has libraries
 

00:22:13.039 --> 00:22:14.950 align:start position:0%
for mobile devices so it has libraries
specific<00:22:13.600><c> to</c><00:22:13.760><c> mobile</c><00:22:14.159><c> devices</c>

00:22:14.950 --> 00:22:14.960 align:start position:0%
specific to mobile devices
 

00:22:14.960 --> 00:22:17.190 align:start position:0%
specific to mobile devices
and<00:22:15.200><c> finally</c><00:22:15.600><c> we</c><00:22:15.679><c> have</c><00:22:15.919><c> java</c><00:22:16.320><c> card</c><00:22:16.799><c> which</c><00:22:17.039><c> is</c>

00:22:17.190 --> 00:22:17.200 align:start position:0%
and finally we have java card which is
 

00:22:17.200 --> 00:22:19.190 align:start position:0%
and finally we have java card which is
used<00:22:17.600><c> in</c><00:22:17.760><c> smart</c><00:22:18.159><c> cards</c>

00:22:19.190 --> 00:22:19.200 align:start position:0%
used in smart cards
 

00:22:19.200 --> 00:22:21.510 align:start position:0%
used in smart cards
the<00:22:19.360><c> latest</c><00:22:19.679><c> version</c><00:22:20.000><c> of</c><00:22:20.240><c> java</c><00:22:20.799><c> is</c><00:22:21.039><c> java</c>

00:22:21.510 --> 00:22:21.520 align:start position:0%
the latest version of java is java
 

00:22:21.520 --> 00:22:23.190 align:start position:0%
the latest version of java is java
standard<00:22:22.000><c> edition</c><00:22:22.480><c> 12</c>

00:22:23.190 --> 00:22:23.200 align:start position:0%
standard edition 12
 

00:22:23.200 --> 00:22:24.950 align:start position:0%
standard edition 12
which<00:22:23.360><c> was</c><00:22:23.600><c> released</c><00:22:23.919><c> just</c><00:22:24.080><c> a</c><00:22:24.159><c> few</c><00:22:24.400><c> months</c><00:22:24.640><c> ago</c>

00:22:24.950 --> 00:22:24.960 align:start position:0%
which was released just a few months ago
 

00:22:24.960 --> 00:22:26.870 align:start position:0%
which was released just a few months ago
in<00:22:25.200><c> march</c><00:22:25.600><c> 2019</c>

00:22:26.870 --> 00:22:26.880 align:start position:0%
in march 2019
 

00:22:26.880 --> 00:22:29.190 align:start position:0%
in march 2019
java<00:22:27.200><c> has</c><00:22:27.440><c> close</c><00:22:27.679><c> to</c><00:22:27.919><c> 9</c><00:22:28.159><c> million</c><00:22:28.559><c> developers</c>

00:22:29.190 --> 00:22:29.200 align:start position:0%
java has close to 9 million developers
 

00:22:29.200 --> 00:22:30.149 align:start position:0%
java has close to 9 million developers
worldwide

00:22:30.149 --> 00:22:30.159 align:start position:0%
worldwide
 

00:22:30.159 --> 00:22:32.230 align:start position:0%
worldwide
currently<00:22:30.559><c> about</c><00:22:30.799><c> 3</c><00:22:31.120><c> billion</c><00:22:31.440><c> mobile</c><00:22:31.840><c> phones</c>

00:22:32.230 --> 00:22:32.240 align:start position:0%
currently about 3 billion mobile phones
 

00:22:32.240 --> 00:22:33.190 align:start position:0%
currently about 3 billion mobile phones
run<00:22:32.559><c> java</c>

00:22:33.190 --> 00:22:33.200 align:start position:0%
run java
 

00:22:33.200 --> 00:22:36.549 align:start position:0%
run java
as<00:22:33.280><c> well</c><00:22:33.520><c> as</c><00:22:33.679><c> 120</c><00:22:34.720><c> million</c><00:22:35.120><c> tv</c><00:22:35.520><c> sets</c><00:22:36.000><c> and</c><00:22:36.240><c> every</c>

00:22:36.549 --> 00:22:36.559 align:start position:0%
as well as 120 million tv sets and every
 

00:22:36.559 --> 00:22:38.070 align:start position:0%
as well as 120 million tv sets and every
blu-ray<00:22:37.120><c> player</c>

00:22:38.070 --> 00:22:38.080 align:start position:0%
blu-ray player
 

00:22:38.080 --> 00:22:40.310 align:start position:0%
blu-ray player
according<00:22:38.480><c> to</c><00:22:38.640><c> indeed.com</c><00:22:39.679><c> the</c><00:22:39.919><c> average</c>

00:22:40.310 --> 00:22:40.320 align:start position:0%
according to indeed.com the average
 

00:22:40.320 --> 00:22:41.909 align:start position:0%
according to indeed.com the average
salary<00:22:40.720><c> of</c><00:22:40.799><c> a</c><00:22:40.960><c> java</c><00:22:41.280><c> developer</c>

00:22:41.909 --> 00:22:41.919 align:start position:0%
salary of a java developer
 

00:22:41.919 --> 00:22:43.430 align:start position:0%
salary of a java developer
is<00:22:42.080><c> just</c><00:22:42.320><c> over</c><00:22:42.559><c> one</c><00:22:42.799><c> hundred</c><00:22:43.120><c> thousand</c>

00:22:43.430 --> 00:22:43.440 align:start position:0%
is just over one hundred thousand
 

00:22:43.440 --> 00:22:45.750 align:start position:0%
is just over one hundred thousand
dollars<00:22:43.840><c> per</c><00:22:44.080><c> year</c><00:22:44.640><c> in</c><00:22:44.720><c> the</c><00:22:44.880><c> us</c>

00:22:45.750 --> 00:22:45.760 align:start position:0%
dollars per year in the us
 

00:22:45.760 --> 00:22:47.590 align:start position:0%
dollars per year in the us
so<00:22:45.919><c> as</c><00:22:46.080><c> you</c><00:22:46.159><c> can</c><00:22:46.320><c> see</c><00:22:46.720><c> java</c><00:22:47.120><c> is</c><00:22:47.200><c> everywhere</c>

00:22:47.590 --> 00:22:47.600 align:start position:0%
so as you can see java is everywhere
 

00:22:47.600 --> 00:22:49.350 align:start position:0%
so as you can see java is everywhere
which<00:22:47.840><c> means</c><00:22:48.320><c> more</c><00:22:48.559><c> opportunities</c><00:22:49.120><c> for</c><00:22:49.280><c> you</c>

00:22:49.350 --> 00:22:49.360 align:start position:0%
which means more opportunities for you
 

00:22:49.360 --> 00:22:50.149 align:start position:0%
which means more opportunities for you
to<00:22:49.520><c> get</c><00:22:49.679><c> hired</c>

00:22:50.149 --> 00:22:50.159 align:start position:0%
to get hired
 

00:22:50.159 --> 00:22:55.029 align:start position:0%
to get hired
as<00:22:50.320><c> a</c><00:22:50.400><c> professional</c><00:22:52.840><c> programmer</c>

00:22:55.029 --> 00:22:55.039 align:start position:0%
as a professional programmer
 

00:22:55.039 --> 00:22:56.789 align:start position:0%
as a professional programmer
now<00:22:55.280><c> let</c><00:22:55.440><c> me</c><00:22:55.520><c> give</c><00:22:55.679><c> you</c><00:22:55.760><c> a</c><00:22:55.919><c> quick</c><00:22:56.240><c> overview</c><00:22:56.640><c> of</c>

00:22:56.789 --> 00:22:56.799 align:start position:0%
now let me give you a quick overview of
 

00:22:56.799 --> 00:22:58.390 align:start position:0%
now let me give you a quick overview of
how<00:22:57.039><c> i've</c><00:22:57.200><c> structured</c><00:22:57.679><c> this</c><00:22:57.840><c> course</c>

00:22:58.390 --> 00:22:58.400 align:start position:0%
how i've structured this course
 

00:22:58.400 --> 00:23:00.470 align:start position:0%
how i've structured this course
so<00:22:58.559><c> you</c><00:22:58.640><c> can</c><00:22:58.799><c> get</c><00:22:58.960><c> the</c><00:22:59.120><c> most</c><00:22:59.440><c> out</c><00:22:59.600><c> of</c><00:22:59.760><c> it</c><00:23:00.240><c> this</c>

00:23:00.470 --> 00:23:00.480 align:start position:0%
so you can get the most out of it this
 

00:23:00.480 --> 00:23:02.870 align:start position:0%
so you can get the most out of it this
course<00:23:00.799><c> is</c><00:23:00.960><c> the</c><00:23:01.120><c> first</c><00:23:01.440><c> part</c><00:23:01.679><c> of</c><00:23:01.760><c> my</c><00:23:02.080><c> complete</c>

00:23:02.870 --> 00:23:02.880 align:start position:0%
course is the first part of my complete
 

00:23:02.880 --> 00:23:05.830 align:start position:0%
course is the first part of my complete
four<00:23:03.200><c> part</c><00:23:03.679><c> java</c><00:23:04.080><c> series</c><00:23:04.799><c> each</c><00:23:05.039><c> part</c><00:23:05.280><c> is</c><00:23:05.440><c> about</c>

00:23:05.830 --> 00:23:05.840 align:start position:0%
four part java series each part is about
 

00:23:05.840 --> 00:23:07.190 align:start position:0%
four part java series each part is about
three<00:23:06.080><c> to</c><00:23:06.240><c> four</c><00:23:06.480><c> hours</c><00:23:06.799><c> long</c>

00:23:07.190 --> 00:23:07.200 align:start position:0%
three to four hours long
 

00:23:07.200 --> 00:23:08.950 align:start position:0%
three to four hours long
so<00:23:07.360><c> you</c><00:23:07.440><c> can</c><00:23:07.600><c> easily</c><00:23:08.000><c> complete</c><00:23:08.400><c> it</c><00:23:08.559><c> in</c><00:23:08.640><c> a</c><00:23:08.720><c> day</c>

00:23:08.950 --> 00:23:08.960 align:start position:0%
so you can easily complete it in a day
 

00:23:08.960 --> 00:23:11.270 align:start position:0%
so you can easily complete it in a day
or<00:23:09.120><c> two</c><00:23:10.000><c> in</c><00:23:10.080><c> the</c><00:23:10.240><c> first</c><00:23:10.480><c> part</c><00:23:10.720><c> which</c><00:23:10.960><c> is</c><00:23:11.120><c> what</c>

00:23:11.270 --> 00:23:11.280 align:start position:0%
or two in the first part which is what
 

00:23:11.280 --> 00:23:12.149 align:start position:0%
or two in the first part which is what
you're<00:23:11.520><c> watching</c>

00:23:12.149 --> 00:23:12.159 align:start position:0%
you're watching
 

00:23:12.159 --> 00:23:13.590 align:start position:0%
you're watching
you're<00:23:12.320><c> going</c><00:23:12.400><c> to</c><00:23:12.480><c> learn</c><00:23:12.720><c> the</c><00:23:12.880><c> fundamentals</c>

00:23:13.590 --> 00:23:13.600 align:start position:0%
you're going to learn the fundamentals
 

00:23:13.600 --> 00:23:15.590 align:start position:0%
you're going to learn the fundamentals
of<00:23:13.840><c> programming</c><00:23:14.400><c> with</c><00:23:14.799><c> java</c>

00:23:15.590 --> 00:23:15.600 align:start position:0%
of programming with java
 

00:23:15.600 --> 00:23:16.789 align:start position:0%
of programming with java
in<00:23:15.679><c> the</c><00:23:15.760><c> next</c><00:23:16.000><c> section</c><00:23:16.240><c> you'll</c><00:23:16.400><c> learn</c><00:23:16.640><c> about</c>

00:23:16.789 --> 00:23:16.799 align:start position:0%
in the next section you'll learn about
 

00:23:16.799 --> 00:23:18.789 align:start position:0%
in the next section you'll learn about
the<00:23:17.039><c> type</c><00:23:17.280><c> system</c><00:23:17.760><c> in</c><00:23:17.919><c> java</c><00:23:18.400><c> you</c><00:23:18.559><c> will</c><00:23:18.640><c> learn</c>

00:23:18.789 --> 00:23:18.799 align:start position:0%
the type system in java you will learn
 

00:23:18.799 --> 00:23:19.750 align:start position:0%
the type system in java you will learn
how<00:23:19.039><c> to</c><00:23:19.120><c> work</c><00:23:19.360><c> with</c>

00:23:19.750 --> 00:23:19.760 align:start position:0%
how to work with
 

00:23:19.760 --> 00:23:22.549 align:start position:0%
how to work with
various<00:23:20.159><c> types</c><00:23:20.640><c> such</c><00:23:20.880><c> as</c><00:23:21.039><c> numbers</c><00:23:21.840><c> strings</c>

00:23:22.549 --> 00:23:22.559 align:start position:0%
various types such as numbers strings
 

00:23:22.559 --> 00:23:24.149 align:start position:0%
various types such as numbers strings
booleans<00:23:23.200><c> and</c><00:23:23.360><c> arrays</c>

00:23:24.149 --> 00:23:24.159 align:start position:0%
booleans and arrays
 

00:23:24.159 --> 00:23:25.430 align:start position:0%
booleans and arrays
by<00:23:24.320><c> the</c><00:23:24.480><c> end</c><00:23:24.559><c> of</c><00:23:24.640><c> this</c><00:23:24.799><c> section</c><00:23:25.120><c> you</c><00:23:25.280><c> will</c>

00:23:25.430 --> 00:23:25.440 align:start position:0%
by the end of this section you will
 

00:23:25.440 --> 00:23:27.750 align:start position:0%
by the end of this section you will
build<00:23:25.919><c> a</c><00:23:26.080><c> mortgage</c><00:23:26.559><c> calculator</c><00:23:27.360><c> as</c><00:23:27.520><c> your</c>

00:23:27.750 --> 00:23:27.760 align:start position:0%
build a mortgage calculator as your
 

00:23:27.760 --> 00:23:28.230 align:start position:0%
build a mortgage calculator as your
first

00:23:28.230 --> 00:23:28.240 align:start position:0%
first
 

00:23:28.240 --> 00:23:30.470 align:start position:0%
first
java<00:23:28.640><c> project</c><00:23:29.520><c> we'll</c><00:23:29.679><c> be</c><00:23:29.840><c> improving</c><00:23:30.240><c> this</c>

00:23:30.470 --> 00:23:30.480 align:start position:0%
java project we'll be improving this
 

00:23:30.480 --> 00:23:31.270 align:start position:0%
java project we'll be improving this
calculator

00:23:31.270 --> 00:23:31.280 align:start position:0%
calculator
 

00:23:31.280 --> 00:23:33.430 align:start position:0%
calculator
bit<00:23:31.520><c> by</c><00:23:31.760><c> bit</c><00:23:31.919><c> throughout</c><00:23:32.240><c> this</c><00:23:32.400><c> course</c><00:23:33.200><c> next</c>

00:23:33.430 --> 00:23:33.440 align:start position:0%
bit by bit throughout this course next
 

00:23:33.440 --> 00:23:34.390 align:start position:0%
bit by bit throughout this course next
you<00:23:33.600><c> will</c><00:23:33.679><c> learn</c><00:23:33.919><c> about</c>

00:23:34.390 --> 00:23:34.400 align:start position:0%
you will learn about
 

00:23:34.400 --> 00:23:36.630 align:start position:0%
you will learn about
control<00:23:34.880><c> flow</c><00:23:35.120><c> statements</c><00:23:35.919><c> that</c><00:23:36.080><c> are</c><00:23:36.240><c> used</c><00:23:36.480><c> to</c>

00:23:36.630 --> 00:23:36.640 align:start position:0%
control flow statements that are used to
 

00:23:36.640 --> 00:23:38.070 align:start position:0%
control flow statements that are used to
build<00:23:37.120><c> algorithms</c>

00:23:38.070 --> 00:23:38.080 align:start position:0%
build algorithms
 

00:23:38.080 --> 00:23:39.990 align:start position:0%
build algorithms
we'll<00:23:38.240><c> be</c><00:23:38.400><c> talking</c><00:23:38.720><c> about</c><00:23:38.960><c> various</c><00:23:39.280><c> types</c><00:23:39.600><c> of</c>

00:23:39.990 --> 00:23:40.000 align:start position:0%
we'll be talking about various types of
 

00:23:40.000 --> 00:23:42.230 align:start position:0%
we'll be talking about various types of
conditional<00:23:40.640><c> statements</c><00:23:41.200><c> and</c><00:23:41.440><c> loops</c>

00:23:42.230 --> 00:23:42.240 align:start position:0%
conditional statements and loops
 

00:23:42.240 --> 00:23:43.909 align:start position:0%
conditional statements and loops
later<00:23:42.559><c> in</c><00:23:42.640><c> this</c><00:23:42.720><c> section</c><00:23:43.039><c> we'll</c><00:23:43.279><c> add</c><00:23:43.600><c> data</c>

00:23:43.909 --> 00:23:43.919 align:start position:0%
later in this section we'll add data
 

00:23:43.919 --> 00:23:46.230 align:start position:0%
later in this section we'll add data
validation<00:23:44.480><c> to</c><00:23:44.559><c> our</c><00:23:44.720><c> mortgage</c><00:23:45.200><c> calculator</c>

00:23:46.230 --> 00:23:46.240 align:start position:0%
validation to our mortgage calculator
 

00:23:46.240 --> 00:23:49.269 align:start position:0%
validation to our mortgage calculator
to<00:23:46.400><c> force</c><00:23:46.640><c> the</c><00:23:46.799><c> user</c><00:23:47.360><c> to</c><00:23:47.600><c> enter</c><00:23:48.000><c> valid</c><00:23:48.400><c> values</c>

00:23:49.269 --> 00:23:49.279 align:start position:0%
to force the user to enter valid values
 

00:23:49.279 --> 00:23:51.110 align:start position:0%
to force the user to enter valid values
at<00:23:49.440><c> this</c><00:23:49.600><c> point</c><00:23:49.840><c> you'll</c><00:23:50.080><c> be</c><00:23:50.240><c> able</c><00:23:50.400><c> to</c><00:23:50.559><c> build</c>

00:23:51.110 --> 00:23:51.120 align:start position:0%
at this point you'll be able to build
 

00:23:51.120 --> 00:23:53.190 align:start position:0%
at this point you'll be able to build
basic<00:23:51.520><c> algorithms</c><00:23:52.240><c> and</c><00:23:52.320><c> that's</c><00:23:52.559><c> great</c>

00:23:53.190 --> 00:23:53.200 align:start position:0%
basic algorithms and that's great
 

00:23:53.200 --> 00:23:55.110 align:start position:0%
basic algorithms and that's great
but<00:23:53.440><c> being</c><00:23:53.679><c> a</c><00:23:53.760><c> good</c><00:23:54.000><c> programmer</c><00:23:54.480><c> requires</c>

00:23:55.110 --> 00:23:55.120 align:start position:0%
but being a good programmer requires
 

00:23:55.120 --> 00:23:57.110 align:start position:0%
but being a good programmer requires
knowing<00:23:55.440><c> how</c><00:23:55.600><c> to</c><00:23:55.760><c> write</c><00:23:56.159><c> good</c><00:23:56.480><c> code</c>

00:23:57.110 --> 00:23:57.120 align:start position:0%
knowing how to write good code
 

00:23:57.120 --> 00:23:59.750 align:start position:0%
knowing how to write good code
code<00:23:57.360><c> that</c><00:23:57.600><c> is</c><00:23:57.760><c> clean</c><00:23:58.320><c> and</c><00:23:58.480><c> expressive</c><00:23:59.520><c> that's</c>

00:23:59.750 --> 00:23:59.760 align:start position:0%
code that is clean and expressive that's
 

00:23:59.760 --> 00:24:00.710 align:start position:0%
code that is clean and expressive that's
what<00:24:00.000><c> separates</c><00:24:00.480><c> an</c>

00:24:00.710 --> 00:24:00.720 align:start position:0%
what separates an
 

00:24:00.720 --> 00:24:02.710 align:start position:0%
what separates an
outstanding<00:24:01.360><c> programmer</c><00:24:01.840><c> from</c><00:24:02.080><c> an</c><00:24:02.320><c> average</c>

00:24:02.710 --> 00:24:02.720 align:start position:0%
outstanding programmer from an average
 

00:24:02.720 --> 00:24:04.630 align:start position:0%
outstanding programmer from an average
programmer<00:24:03.520><c> so</c><00:24:03.679><c> in</c><00:24:03.760><c> the</c><00:24:03.919><c> following</c><00:24:04.320><c> section</c><00:24:04.559><c> i</c>

00:24:04.630 --> 00:24:04.640 align:start position:0%
programmer so in the following section i
 

00:24:04.640 --> 00:24:05.510 align:start position:0%
programmer so in the following section i
will<00:24:04.799><c> talk</c><00:24:05.039><c> about</c>

00:24:05.510 --> 00:24:05.520 align:start position:0%
will talk about
 

00:24:05.520 --> 00:24:07.350 align:start position:0%
will talk about
clean<00:24:05.840><c> coding</c><00:24:06.400><c> i</c><00:24:06.559><c> will</c><00:24:06.640><c> show</c><00:24:06.799><c> you</c><00:24:06.960><c> various</c>

00:24:07.350 --> 00:24:07.360 align:start position:0%
clean coding i will show you various
 

00:24:07.360 --> 00:24:09.430 align:start position:0%
clean coding i will show you various
techniques<00:24:08.000><c> that</c><00:24:08.320><c> professional</c><00:24:08.880><c> programmers</c>

00:24:09.430 --> 00:24:09.440 align:start position:0%
techniques that professional programmers
 

00:24:09.440 --> 00:24:09.750 align:start position:0%
techniques that professional programmers
use

00:24:09.750 --> 00:24:09.760 align:start position:0%
use
 

00:24:09.760 --> 00:24:11.190 align:start position:0%
use
to<00:24:09.919><c> make</c><00:24:10.159><c> their</c><00:24:10.320><c> code</c><00:24:10.640><c> clean</c><00:24:11.039><c> and</c>

00:24:11.190 --> 00:24:11.200 align:start position:0%
to make their code clean and
 

00:24:11.200 --> 00:24:13.510 align:start position:0%
to make their code clean and
maintainable<00:24:12.400><c> and</c><00:24:12.640><c> finally</c><00:24:13.039><c> in</c><00:24:13.120><c> the</c><00:24:13.279><c> last</c>

00:24:13.510 --> 00:24:13.520 align:start position:0%
maintainable and finally in the last
 

00:24:13.520 --> 00:24:14.230 align:start position:0%
maintainable and finally in the last
section

00:24:14.230 --> 00:24:14.240 align:start position:0%
section
 

00:24:14.240 --> 00:24:15.990 align:start position:0%
section
you<00:24:14.400><c> will</c><00:24:14.559><c> learn</c><00:24:14.799><c> how</c><00:24:14.960><c> to</c><00:24:15.200><c> find</c><00:24:15.520><c> and</c><00:24:15.679><c> fix</c>

00:24:15.990 --> 00:24:16.000 align:start position:0%
you will learn how to find and fix
 

00:24:16.000 --> 00:24:18.310 align:start position:0%
you will learn how to find and fix
errors<00:24:16.320><c> in</c><00:24:16.480><c> your</c><00:24:16.640><c> java</c><00:24:16.960><c> programs</c><00:24:17.840><c> as</c><00:24:18.000><c> well</c><00:24:18.159><c> as</c>

00:24:18.310 --> 00:24:18.320 align:start position:0%
errors in your java programs as well as
 

00:24:18.320 --> 00:24:20.549 align:start position:0%
errors in your java programs as well as
how<00:24:18.480><c> to</c><00:24:18.720><c> package</c><00:24:19.120><c> them</c><00:24:19.360><c> for</c><00:24:19.600><c> deployment</c>

00:24:20.549 --> 00:24:20.559 align:start position:0%
how to package them for deployment
 

00:24:20.559 --> 00:24:23.110 align:start position:0%
how to package them for deployment
so<00:24:20.720><c> others</c><00:24:21.039><c> can</c><00:24:21.279><c> use</c><00:24:21.520><c> them</c><00:24:22.159><c> so</c><00:24:22.400><c> the</c><00:24:22.559><c> materials</c>

00:24:23.110 --> 00:24:23.120 align:start position:0%
so others can use them so the materials
 

00:24:23.120 --> 00:24:24.070 align:start position:0%
so others can use them so the materials
in<00:24:23.200><c> the</c><00:24:23.279><c> first</c><00:24:23.520><c> part</c>

00:24:24.070 --> 00:24:24.080 align:start position:0%
in the first part
 

00:24:24.080 --> 00:24:26.390 align:start position:0%
in the first part
will<00:24:24.320><c> give</c><00:24:24.480><c> you</c><00:24:24.640><c> a</c><00:24:24.799><c> solid</c><00:24:25.279><c> foundation</c><00:24:26.000><c> on</c><00:24:26.159><c> how</c>

00:24:26.390 --> 00:24:26.400 align:start position:0%
will give you a solid foundation on how
 

00:24:26.400 --> 00:24:27.190 align:start position:0%
will give you a solid foundation on how
to<00:24:26.640><c> start</c>

00:24:27.190 --> 00:24:27.200 align:start position:0%
to start
 

00:24:27.200 --> 00:24:29.830 align:start position:0%
to start
programming<00:24:27.760><c> in</c><00:24:27.919><c> java</c><00:24:28.880><c> in</c><00:24:29.039><c> the</c><00:24:29.120><c> second</c><00:24:29.440><c> part</c>

00:24:29.830 --> 00:24:29.840 align:start position:0%
programming in java in the second part
 

00:24:29.840 --> 00:24:30.870 align:start position:0%
programming in java in the second part
we'll<00:24:30.080><c> talk</c><00:24:30.320><c> about</c>

00:24:30.870 --> 00:24:30.880 align:start position:0%
we'll talk about
 

00:24:30.880 --> 00:24:32.470 align:start position:0%
we'll talk about
object object-oriented<00:24:31.760><c> programming</c><00:24:32.240><c> which</c>

00:24:32.470 --> 00:24:32.480 align:start position:0%
object object-oriented programming which
 

00:24:32.480 --> 00:24:34.149 align:start position:0%
object object-oriented programming which
is<00:24:32.559><c> a</c><00:24:32.640><c> style</c><00:24:32.960><c> of</c><00:24:33.120><c> programming</c><00:24:33.600><c> used</c>

00:24:34.149 --> 00:24:34.159 align:start position:0%
is a style of programming used
 

00:24:34.159 --> 00:24:36.789 align:start position:0%
is a style of programming used
in<00:24:34.320><c> most</c><00:24:34.640><c> if</c><00:24:34.799><c> not</c><00:24:35.120><c> all</c><00:24:35.440><c> java</c><00:24:35.840><c> applications</c>

00:24:36.789 --> 00:24:36.799 align:start position:0%
in most if not all java applications
 

00:24:36.799 --> 00:24:37.669 align:start position:0%
in most if not all java applications
whether<00:24:37.039><c> you</c><00:24:37.200><c> want</c><00:24:37.279><c> to</c><00:24:37.440><c> use</c>

00:24:37.669 --> 00:24:37.679 align:start position:0%
whether you want to use
 

00:24:37.679 --> 00:24:40.549 align:start position:0%
whether you want to use
java<00:24:38.000><c> to</c><00:24:38.159><c> build</c><00:24:38.640><c> web</c><00:24:39.279><c> mobile</c><00:24:39.840><c> or</c><00:24:40.080><c> desktop</c>

00:24:40.549 --> 00:24:40.559 align:start position:0%
java to build web mobile or desktop
 

00:24:40.559 --> 00:24:41.269 align:start position:0%
java to build web mobile or desktop
applications

00:24:41.269 --> 00:24:41.279 align:start position:0%
applications
 

00:24:41.279 --> 00:24:43.029 align:start position:0%
applications
you<00:24:41.440><c> need</c><00:24:41.600><c> to</c><00:24:41.760><c> understand</c><00:24:42.320><c> object-oriented</c>

00:24:43.029 --> 00:24:43.039 align:start position:0%
you need to understand object-oriented
 

00:24:43.039 --> 00:24:44.789 align:start position:0%
you need to understand object-oriented
programming<00:24:43.600><c> well</c><00:24:44.159><c> because</c><00:24:44.480><c> otherwise</c>

00:24:44.789 --> 00:24:44.799 align:start position:0%
programming well because otherwise
 

00:24:44.799 --> 00:24:46.149 align:start position:0%
programming well because otherwise
you're<00:24:44.960><c> going</c><00:24:45.120><c> to</c><00:24:45.279><c> constantly</c><00:24:45.840><c> hit</c>

00:24:46.149 --> 00:24:46.159 align:start position:0%
you're going to constantly hit
 

00:24:46.159 --> 00:24:48.149 align:start position:0%
you're going to constantly hit
obstacles<00:24:47.279><c> in</c><00:24:47.360><c> the</c><00:24:47.520><c> third</c><00:24:47.760><c> part</c><00:24:47.919><c> we're</c><00:24:48.080><c> going</c>

00:24:48.149 --> 00:24:48.159 align:start position:0%
obstacles in the third part we're going
 

00:24:48.159 --> 00:24:51.029 align:start position:0%
obstacles in the third part we're going
to<00:24:48.240><c> talk</c><00:24:48.480><c> about</c><00:24:49.120><c> core</c><00:24:49.440><c> java</c><00:24:49.919><c> apis</c><00:24:50.480><c> or</c>

00:24:51.029 --> 00:24:51.039 align:start position:0%
to talk about core java apis or
 

00:24:51.039 --> 00:24:53.190 align:start position:0%
to talk about core java apis or
application<00:24:51.679><c> programming</c><00:24:52.240><c> interfaces</c>

00:24:53.190 --> 00:24:53.200 align:start position:0%
application programming interfaces
 

00:24:53.200 --> 00:24:54.789 align:start position:0%
application programming interfaces
you'll<00:24:53.440><c> learn</c><00:24:53.679><c> about</c><00:24:53.919><c> many</c><00:24:54.159><c> of</c><00:24:54.240><c> the</c><00:24:54.400><c> useful</c>

00:24:54.789 --> 00:24:54.799 align:start position:0%
you'll learn about many of the useful
 

00:24:54.799 --> 00:24:55.430 align:start position:0%
you'll learn about many of the useful
classes

00:24:55.430 --> 00:24:55.440 align:start position:0%
classes
 

00:24:55.440 --> 00:24:58.470 align:start position:0%
classes
in<00:24:55.600><c> the</c><00:24:55.760><c> standard</c><00:24:56.400><c> java</c><00:24:56.799><c> library</c><00:24:57.840><c> and</c><00:24:58.080><c> finally</c>

00:24:58.470 --> 00:24:58.480 align:start position:0%
in the standard java library and finally
 

00:24:58.480 --> 00:24:59.269 align:start position:0%
in the standard java library and finally
in<00:24:58.559><c> the</c><00:24:58.640><c> last</c><00:24:58.880><c> part</c>

00:24:59.269 --> 00:24:59.279 align:start position:0%
in the last part
 

00:24:59.279 --> 00:25:00.390 align:start position:0%
in the last part
we'll<00:24:59.440><c> be</c><00:24:59.600><c> looking</c><00:24:59.840><c> at</c><00:24:59.919><c> the</c><00:25:00.000><c> advanced</c>

00:25:00.390 --> 00:25:00.400 align:start position:0%
we'll be looking at the advanced
 

00:25:00.400 --> 00:25:02.950 align:start position:0%
we'll be looking at the advanced
features<00:25:00.880><c> in</c><00:25:01.039><c> java</c><00:25:01.840><c> such</c><00:25:02.080><c> as</c><00:25:02.240><c> streams</c>

00:25:02.950 --> 00:25:02.960 align:start position:0%
features in java such as streams
 

00:25:02.960 --> 00:25:05.669 align:start position:0%
features in java such as streams
threads<00:25:03.679><c> database</c><00:25:04.240><c> programming</c><00:25:04.720><c> and</c><00:25:04.799><c> so</c><00:25:05.039><c> on</c>

00:25:05.669 --> 00:25:05.679 align:start position:0%
threads database programming and so on
 

00:25:05.679 --> 00:25:07.110 align:start position:0%
threads database programming and so on
so<00:25:05.919><c> i</c><00:25:06.080><c> hope</c><00:25:06.240><c> you're</c><00:25:06.400><c> going</c><00:25:06.480><c> to</c><00:25:06.640><c> join</c><00:25:06.880><c> me</c><00:25:07.039><c> on</c>

00:25:07.110 --> 00:25:07.120 align:start position:0%
so i hope you're going to join me on
 

00:25:07.120 --> 00:25:08.630 align:start position:0%
so i hope you're going to join me on
this<00:25:07.360><c> journey</c><00:25:07.760><c> and</c><00:25:08.080><c> master</c>

00:25:08.630 --> 00:25:08.640 align:start position:0%
this journey and master
 

00:25:08.640 --> 00:25:10.710 align:start position:0%
this journey and master
java<00:25:09.200><c> the</c><00:25:09.360><c> most</c><00:25:09.760><c> popular</c><00:25:10.320><c> programming</c>

00:25:10.710 --> 00:25:10.720 align:start position:0%
java the most popular programming
 

00:25:10.720 --> 00:25:11.669 align:start position:0%
java the most popular programming
language<00:25:11.120><c> behind</c>

00:25:11.669 --> 00:25:11.679 align:start position:0%
language behind
 

00:25:11.679 --> 00:25:15.960 align:start position:0%
language behind
millions<00:25:12.080><c> of</c><00:25:12.240><c> apps</c><00:25:12.640><c> and</c><00:25:12.840><c> websites</c>

00:25:15.960 --> 00:25:15.970 align:start position:0%
 
 

00:25:15.970 --> 00:25:24.710 align:start position:0%
 
[Music]

00:25:24.710 --> 00:25:24.720 align:start position:0%
 
 

00:25:24.720 --> 00:25:25.750 align:start position:0%
 
in<00:25:24.799><c> this</c><00:25:24.880><c> section</c><00:25:25.200><c> we're</c><00:25:25.279><c> going</c><00:25:25.360><c> to</c><00:25:25.440><c> look</c><00:25:25.600><c> at</c>

00:25:25.750 --> 00:25:25.760 align:start position:0%
in this section we're going to look at
 

00:25:25.760 --> 00:25:28.710 align:start position:0%
in this section we're going to look at
the<00:25:25.919><c> fundamentals</c><00:25:26.640><c> of</c><00:25:26.960><c> programming</c><00:25:27.600><c> in</c><00:25:27.840><c> java</c>

00:25:28.710 --> 00:25:28.720 align:start position:0%
the fundamentals of programming in java
 

00:25:28.720 --> 00:25:30.149 align:start position:0%
the fundamentals of programming in java
you're<00:25:28.880><c> going</c><00:25:28.960><c> to</c><00:25:29.039><c> learn</c><00:25:29.279><c> about</c><00:25:29.679><c> variables</c>

00:25:30.149 --> 00:25:30.159 align:start position:0%
you're going to learn about variables
 

00:25:30.159 --> 00:25:32.470 align:start position:0%
you're going to learn about variables
and<00:25:30.400><c> constants</c><00:25:31.360><c> primitive</c><00:25:31.919><c> and</c><00:25:32.080><c> reference</c>

00:25:32.470 --> 00:25:32.480 align:start position:0%
and constants primitive and reference
 

00:25:32.480 --> 00:25:32.950 align:start position:0%
and constants primitive and reference
types

00:25:32.950 --> 00:25:32.960 align:start position:0%
types
 

00:25:32.960 --> 00:25:34.789 align:start position:0%
types
you're<00:25:33.120><c> going</c><00:25:33.200><c> to</c><00:25:33.279><c> learn</c><00:25:33.440><c> about</c><00:25:33.840><c> casting</c><00:25:34.320><c> or</c>

00:25:34.789 --> 00:25:34.799 align:start position:0%
you're going to learn about casting or
 

00:25:34.799 --> 00:25:36.070 align:start position:0%
you're going to learn about casting or
type<00:25:35.039><c> conversion</c>

00:25:36.070 --> 00:25:36.080 align:start position:0%
type conversion
 

00:25:36.080 --> 00:25:37.909 align:start position:0%
type conversion
you<00:25:36.240><c> will</c><00:25:36.400><c> learn</c><00:25:36.559><c> how</c><00:25:36.720><c> to</c><00:25:36.880><c> work</c><00:25:37.120><c> with</c><00:25:37.279><c> numbers</c>

00:25:37.909 --> 00:25:37.919 align:start position:0%
you will learn how to work with numbers
 

00:25:37.919 --> 00:25:39.430 align:start position:0%
you will learn how to work with numbers
strings<00:25:38.559><c> and</c><00:25:38.799><c> arrays</c>

00:25:39.430 --> 00:25:39.440 align:start position:0%
strings and arrays
 

00:25:39.440 --> 00:25:41.669 align:start position:0%
strings and arrays
and<00:25:39.600><c> how</c><00:25:39.760><c> to</c><00:25:39.919><c> read</c><00:25:40.159><c> input</c><00:25:40.480><c> from</c><00:25:40.640><c> the</c><00:25:40.799><c> user</c><00:25:41.520><c> once</c>

00:25:41.669 --> 00:25:41.679 align:start position:0%
and how to read input from the user once
 

00:25:41.679 --> 00:25:42.630 align:start position:0%
and how to read input from the user once
you<00:25:41.840><c> learn</c><00:25:42.159><c> all</c><00:25:42.320><c> this</c>

00:25:42.630 --> 00:25:42.640 align:start position:0%
you learn all this
 

00:25:42.640 --> 00:25:44.070 align:start position:0%
you learn all this
i'm<00:25:42.720><c> going</c><00:25:42.799><c> to</c><00:25:42.880><c> give</c><00:25:43.039><c> you</c><00:25:43.200><c> a</c><00:25:43.279><c> project</c><00:25:43.919><c> you're</c>

00:25:44.070 --> 00:25:44.080 align:start position:0%
i'm going to give you a project you're
 

00:25:44.080 --> 00:25:46.070 align:start position:0%
i'm going to give you a project you're
going<00:25:44.159><c> to</c><00:25:44.240><c> build</c><00:25:44.640><c> a</c><00:25:44.799><c> mortgage</c><00:25:45.279><c> calculator</c><00:25:45.919><c> on</c>

00:25:46.070 --> 00:25:46.080 align:start position:0%
going to build a mortgage calculator on
 

00:25:46.080 --> 00:25:46.630 align:start position:0%
going to build a mortgage calculator on
your<00:25:46.240><c> own</c>

00:25:46.630 --> 00:25:46.640 align:start position:0%
your own
 

00:25:46.640 --> 00:25:48.390 align:start position:0%
your own
so<00:25:46.880><c> make</c><00:25:47.039><c> sure</c><00:25:47.200><c> to</c><00:25:47.279><c> pay</c><00:25:47.600><c> great</c><00:25:47.840><c> attention</c><00:25:48.240><c> to</c>

00:25:48.390 --> 00:25:48.400 align:start position:0%
so make sure to pay great attention to
 

00:25:48.400 --> 00:25:49.909 align:start position:0%
so make sure to pay great attention to
all<00:25:48.480><c> the</c><00:25:48.720><c> materials</c><00:25:49.039><c> you're</c><00:25:49.200><c> going</c><00:25:49.360><c> to</c><00:25:49.440><c> learn</c>

00:25:49.909 --> 00:25:49.919 align:start position:0%
all the materials you're going to learn
 

00:25:49.919 --> 00:25:51.350 align:start position:0%
all the materials you're going to learn
because<00:25:50.159><c> you're</c><00:25:50.320><c> going</c><00:25:50.400><c> to</c><00:25:50.480><c> use</c><00:25:50.799><c> most</c><00:25:51.039><c> of</c><00:25:51.120><c> them</c>

00:25:51.350 --> 00:25:51.360 align:start position:0%
because you're going to use most of them
 

00:25:51.360 --> 00:25:53.510 align:start position:0%
because you're going to use most of them
in<00:25:51.440><c> this</c><00:25:51.679><c> project</c><00:25:52.559><c> are</c><00:25:52.720><c> you</c><00:25:52.799><c> ready</c>

00:25:53.510 --> 00:25:53.520 align:start position:0%
in this project are you ready
 

00:25:53.520 --> 00:26:01.190 align:start position:0%
in this project are you ready
now<00:25:53.760><c> let's</c><00:25:54.000><c> jump</c><00:25:54.320><c> in</c><00:25:54.480><c> and</c><00:25:54.799><c> get</c><00:25:54.960><c> started</c>

00:26:01.190 --> 00:26:01.200 align:start position:0%
 
 

00:26:01.200 --> 00:26:02.470 align:start position:0%
 
in<00:26:01.360><c> this</c><00:26:01.520><c> tutorial</c><00:26:01.919><c> we're</c><00:26:02.080><c> going</c><00:26:02.159><c> to</c><00:26:02.240><c> talk</c>

00:26:02.470 --> 00:26:02.480 align:start position:0%
in this tutorial we're going to talk
 

00:26:02.480 --> 00:26:04.549 align:start position:0%
in this tutorial we're going to talk
about<00:26:02.720><c> variables</c><00:26:03.360><c> in</c><00:26:03.679><c> java</c>

00:26:04.549 --> 00:26:04.559 align:start position:0%
about variables in java
 

00:26:04.559 --> 00:26:06.549 align:start position:0%
about variables in java
we<00:26:04.720><c> use</c><00:26:04.960><c> variables</c><00:26:05.360><c> to</c><00:26:05.600><c> temporarily</c><00:26:06.240><c> store</c>

00:26:06.549 --> 00:26:06.559 align:start position:0%
we use variables to temporarily store
 

00:26:06.559 --> 00:26:08.470 align:start position:0%
we use variables to temporarily store
data<00:26:07.120><c> in</c><00:26:07.279><c> computer's</c><00:26:07.840><c> memory</c>

00:26:08.470 --> 00:26:08.480 align:start position:0%
data in computer's memory
 

00:26:08.480 --> 00:26:10.549 align:start position:0%
data in computer's memory
here<00:26:08.640><c> is</c><00:26:08.799><c> an</c><00:26:08.960><c> example</c><00:26:09.840><c> imagine</c><00:26:10.240><c> in</c><00:26:10.320><c> this</c>

00:26:10.549 --> 00:26:10.559 align:start position:0%
here is an example imagine in this
 

00:26:10.559 --> 00:26:11.830 align:start position:0%
here is an example imagine in this
program<00:26:10.880><c> you</c><00:26:11.039><c> want</c><00:26:11.120><c> to</c><00:26:11.279><c> store</c>

00:26:11.830 --> 00:26:11.840 align:start position:0%
program you want to store
 

00:26:11.840 --> 00:26:14.070 align:start position:0%
program you want to store
someone's<00:26:12.320><c> age</c><00:26:12.559><c> in</c><00:26:12.720><c> the</c><00:26:12.799><c> memory</c><00:26:13.760><c> so</c><00:26:13.919><c> we</c>

00:26:14.070 --> 00:26:14.080 align:start position:0%
someone's age in the memory so we
 

00:26:14.080 --> 00:26:15.830 align:start position:0%
someone's age in the memory so we
declare<00:26:14.400><c> a</c><00:26:14.559><c> variable</c><00:26:14.960><c> like</c><00:26:15.120><c> this</c>

00:26:15.830 --> 00:26:15.840 align:start position:0%
declare a variable like this
 

00:26:15.840 --> 00:26:19.269 align:start position:0%
declare a variable like this
and<00:26:16.720><c> age</c><00:26:17.440><c> equals</c><00:26:18.240><c> 30.</c>

00:26:19.269 --> 00:26:19.279 align:start position:0%
and age equals 30.
 

00:26:19.279 --> 00:26:21.669 align:start position:0%
and age equals 30.
so<00:26:19.679><c> int</c><00:26:20.000><c> or</c><00:26:20.320><c> integer</c><00:26:20.720><c> is</c><00:26:20.880><c> the</c><00:26:21.120><c> type</c><00:26:21.360><c> of</c><00:26:21.440><c> this</c>

00:26:21.669 --> 00:26:21.679 align:start position:0%
so int or integer is the type of this
 

00:26:21.679 --> 00:26:22.470 align:start position:0%
so int or integer is the type of this
variable

00:26:22.470 --> 00:26:22.480 align:start position:0%
variable
 

00:26:22.480 --> 00:26:24.710 align:start position:0%
variable
so<00:26:22.720><c> in</c><00:26:22.799><c> this</c><00:26:22.960><c> variable</c><00:26:23.440><c> we</c><00:26:23.520><c> can</c><00:26:23.679><c> only</c><00:26:24.080><c> store</c>

00:26:24.710 --> 00:26:24.720 align:start position:0%
so in this variable we can only store
 

00:26:24.720 --> 00:26:26.390 align:start position:0%
so in this variable we can only store
integers<00:26:25.279><c> which</c><00:26:25.440><c> are</c><00:26:25.600><c> whole</c><00:26:25.919><c> numbers</c>

00:26:26.390 --> 00:26:26.400 align:start position:0%
integers which are whole numbers
 

00:26:26.400 --> 00:26:28.310 align:start position:0%
integers which are whole numbers
like<00:26:26.640><c> one</c><00:26:26.799><c> two</c><00:26:27.039><c> three</c><00:26:27.279><c> four</c><00:26:27.760><c> numbers</c><00:26:28.159><c> that</c>

00:26:28.310 --> 00:26:28.320 align:start position:0%
like one two three four numbers that
 

00:26:28.320 --> 00:26:30.070 align:start position:0%
like one two three four numbers that
don't<00:26:28.559><c> have</c><00:26:28.799><c> a</c><00:26:28.880><c> decimal</c><00:26:29.360><c> point</c>

00:26:30.070 --> 00:26:30.080 align:start position:0%
don't have a decimal point
 

00:26:30.080 --> 00:26:31.590 align:start position:0%
don't have a decimal point
now<00:26:30.240><c> in</c><00:26:30.400><c> java</c><00:26:30.720><c> we</c><00:26:30.880><c> have</c><00:26:31.039><c> several</c><00:26:31.360><c> different</c>

00:26:31.590 --> 00:26:31.600 align:start position:0%
now in java we have several different
 

00:26:31.600 --> 00:26:33.029 align:start position:0%
now in java we have several different
types<00:26:31.919><c> i'm</c><00:26:32.000><c> going</c><00:26:32.159><c> to</c><00:26:32.240><c> talk</c><00:26:32.480><c> about</c><00:26:32.720><c> them</c><00:26:32.960><c> in</c>

00:26:33.029 --> 00:26:33.039 align:start position:0%
types i'm going to talk about them in
 

00:26:33.039 --> 00:26:34.390 align:start position:0%
types i'm going to talk about them in
the<00:26:33.200><c> next</c><00:26:33.440><c> tutorial</c>

00:26:34.390 --> 00:26:34.400 align:start position:0%
the next tutorial
 

00:26:34.400 --> 00:26:36.149 align:start position:0%
the next tutorial
so<00:26:34.559><c> first</c><00:26:34.799><c> we</c><00:26:35.039><c> specify</c><00:26:35.520><c> the</c><00:26:35.679><c> type</c><00:26:35.840><c> of</c><00:26:36.000><c> our</c>

00:26:36.149 --> 00:26:36.159 align:start position:0%
so first we specify the type of our
 

00:26:36.159 --> 00:26:38.630 align:start position:0%
so first we specify the type of our
variable<00:26:37.200><c> then</c><00:26:37.360><c> we</c><00:26:37.520><c> give</c><00:26:37.679><c> it</c><00:26:37.840><c> a</c><00:26:38.000><c> name</c><00:26:38.320><c> or</c><00:26:38.480><c> a</c>

00:26:38.630 --> 00:26:38.640 align:start position:0%
variable then we give it a name or a
 

00:26:38.640 --> 00:26:39.269 align:start position:0%
variable then we give it a name or a
label

00:26:39.269 --> 00:26:39.279 align:start position:0%
label
 

00:26:39.279 --> 00:26:41.510 align:start position:0%
label
this<00:26:39.520><c> is</c><00:26:39.679><c> also</c><00:26:40.000><c> called</c><00:26:40.320><c> an</c><00:26:40.559><c> identifier</c>

00:26:41.510 --> 00:26:41.520 align:start position:0%
this is also called an identifier
 

00:26:41.520 --> 00:26:43.269 align:start position:0%
this is also called an identifier
because<00:26:41.760><c> we</c><00:26:42.000><c> use</c><00:26:42.159><c> it</c><00:26:42.240><c> to</c><00:26:42.480><c> identify</c>

00:26:43.269 --> 00:26:43.279 align:start position:0%
because we use it to identify
 

00:26:43.279 --> 00:26:45.990 align:start position:0%
because we use it to identify
our<00:26:43.520><c> variable</c><00:26:44.559><c> this</c><00:26:44.880><c> equal</c><00:26:45.200><c> sign</c><00:26:45.520><c> is</c><00:26:45.600><c> called</c>

00:26:45.990 --> 00:26:46.000 align:start position:0%
our variable this equal sign is called
 

00:26:46.000 --> 00:26:47.590 align:start position:0%
our variable this equal sign is called
the<00:26:46.240><c> assignment</c><00:26:46.799><c> operator</c>

00:26:47.590 --> 00:26:47.600 align:start position:0%
the assignment operator
 

00:26:47.600 --> 00:26:49.909 align:start position:0%
the assignment operator
and<00:26:48.159><c> 30</c><00:26:48.559><c> is</c><00:26:48.640><c> the</c><00:26:48.799><c> initial</c><00:26:49.200><c> value</c><00:26:49.520><c> that</c><00:26:49.679><c> we</c><00:26:49.760><c> are</c>

00:26:49.909 --> 00:26:49.919 align:start position:0%
and 30 is the initial value that we are
 

00:26:49.919 --> 00:26:52.549 align:start position:0%
and 30 is the initial value that we are
assigning<00:26:50.400><c> to</c><00:26:50.559><c> this</c><00:26:50.840><c> variable</c><00:26:51.840><c> so</c><00:26:52.000><c> we</c><00:26:52.159><c> say</c><00:26:52.400><c> on</c>

00:26:52.549 --> 00:26:52.559 align:start position:0%
assigning to this variable so we say on
 

00:26:52.559 --> 00:26:53.430 align:start position:0%
assigning to this variable so we say on
line<00:26:52.799><c> six</c>

00:26:53.430 --> 00:26:53.440 align:start position:0%
line six
 

00:26:53.440 --> 00:26:55.590 align:start position:0%
line six
we're<00:26:53.760><c> initializing</c><00:26:54.559><c> this</c><00:26:54.799><c> variable</c><00:26:55.360><c> which</c>

00:26:55.590 --> 00:26:55.600 align:start position:0%
we're initializing this variable which
 

00:26:55.600 --> 00:26:57.990 align:start position:0%
we're initializing this variable which
means<00:26:56.000><c> we're</c><00:26:56.240><c> giving</c><00:26:56.559><c> it</c><00:26:56.720><c> an</c><00:26:56.880><c> initial</c><00:26:57.440><c> value</c>

00:26:57.990 --> 00:26:58.000 align:start position:0%
means we're giving it an initial value
 

00:26:58.000 --> 00:26:59.590 align:start position:0%
means we're giving it an initial value
we<00:26:58.240><c> always</c><00:26:58.559><c> have</c><00:26:58.720><c> to</c><00:26:58.880><c> initialize</c><00:26:59.440><c> our</c>

00:26:59.590 --> 00:26:59.600 align:start position:0%
we always have to initialize our
 

00:26:59.600 --> 00:27:01.909 align:start position:0%
we always have to initialize our
variables<00:27:00.400><c> before</c><00:27:00.799><c> reading</c><00:27:01.200><c> them</c>

00:27:01.909 --> 00:27:01.919 align:start position:0%
variables before reading them
 

00:27:01.919 --> 00:27:03.830 align:start position:0%
variables before reading them
so<00:27:02.080><c> with</c><00:27:02.240><c> this</c><00:27:02.480><c> line</c><00:27:02.799><c> we're</c><00:27:03.120><c> storing</c><00:27:03.440><c> number</c>

00:27:03.830 --> 00:27:03.840 align:start position:0%
so with this line we're storing number
 

00:27:03.840 --> 00:27:06.070 align:start position:0%
so with this line we're storing number
30<00:27:04.240><c> somewhere</c><00:27:04.559><c> in</c><00:27:04.640><c> computers</c><00:27:05.120><c> memory</c><00:27:05.919><c> and</c>

00:27:06.070 --> 00:27:06.080 align:start position:0%
30 somewhere in computers memory and
 

00:27:06.080 --> 00:27:07.669 align:start position:0%
30 somewhere in computers memory and
we're<00:27:06.320><c> assigning</c><00:27:06.640><c> this</c><00:27:06.880><c> label</c><00:27:07.279><c> to</c><00:27:07.440><c> that</c>

00:27:07.669 --> 00:27:07.679 align:start position:0%
we're assigning this label to that
 

00:27:07.679 --> 00:27:09.350 align:start position:0%
we're assigning this label to that
memory<00:27:08.080><c> location</c>

00:27:09.350 --> 00:27:09.360 align:start position:0%
memory location
 

00:27:09.360 --> 00:27:11.510 align:start position:0%
memory location
now<00:27:09.600><c> on</c><00:27:09.760><c> line</c><00:27:10.080><c> 7</c><00:27:10.480><c> instead</c><00:27:10.720><c> of</c><00:27:10.880><c> printing</c><00:27:11.200><c> hello</c>

00:27:11.510 --> 00:27:11.520 align:start position:0%
now on line 7 instead of printing hello
 

00:27:11.520 --> 00:27:13.430 align:start position:0%
now on line 7 instead of printing hello
world<00:27:12.240><c> we</c><00:27:12.400><c> can</c><00:27:12.640><c> print</c>

00:27:13.430 --> 00:27:13.440 align:start position:0%
world we can print
 

00:27:13.440 --> 00:27:15.909 align:start position:0%
world we can print
the<00:27:13.679><c> value</c><00:27:14.000><c> of</c><00:27:14.159><c> the</c><00:27:14.480><c> age</c><00:27:15.039><c> variable</c><00:27:15.679><c> take</c><00:27:15.840><c> a</c>

00:27:15.909 --> 00:27:15.919 align:start position:0%
the value of the age variable take a
 

00:27:15.919 --> 00:27:17.669 align:start position:0%
the value of the age variable take a
look<00:27:16.400><c> so</c><00:27:16.640><c> i'm</c><00:27:16.720><c> going</c><00:27:16.880><c> to</c><00:27:16.960><c> run</c><00:27:17.120><c> this</c><00:27:17.279><c> program</c>

00:27:17.669 --> 00:27:17.679 align:start position:0%
look so i'm going to run this program
 

00:27:17.679 --> 00:27:21.510 align:start position:0%
look so i'm going to run this program
using<00:27:18.000><c> ctrl</c><00:27:18.480><c> and</c><00:27:18.840><c> r</c>

00:27:21.510 --> 00:27:21.520 align:start position:0%
using ctrl and r
 

00:27:21.520 --> 00:27:23.430 align:start position:0%
using ctrl and r
there<00:27:21.760><c> you</c><00:27:21.919><c> go</c><00:27:22.320><c> now</c><00:27:22.559><c> we</c><00:27:22.720><c> see</c><00:27:22.880><c> 30</c><00:27:23.200><c> on</c><00:27:23.360><c> the</c>

00:27:23.430 --> 00:27:23.440 align:start position:0%
there you go now we see 30 on the
 

00:27:23.440 --> 00:27:25.110 align:start position:0%
there you go now we see 30 on the
terminal<00:27:24.159><c> beautiful</c>

00:27:25.110 --> 00:27:25.120 align:start position:0%
terminal beautiful
 

00:27:25.120 --> 00:27:26.710 align:start position:0%
terminal beautiful
we<00:27:25.279><c> can</c><00:27:25.440><c> also</c><00:27:25.840><c> change</c><00:27:26.080><c> the</c><00:27:26.240><c> value</c><00:27:26.480><c> of</c><00:27:26.640><c> our</c>

00:27:26.710 --> 00:27:26.720 align:start position:0%
we can also change the value of our
 

00:27:26.720 --> 00:27:28.230 align:start position:0%
we can also change the value of our
variable<00:27:27.200><c> so</c>

00:27:28.230 --> 00:27:28.240 align:start position:0%
variable so
 

00:27:28.240 --> 00:27:30.710 align:start position:0%
variable so
after<00:27:28.559><c> we</c><00:27:28.640><c> initialize</c><00:27:29.279><c> it</c><00:27:30.159><c> perhaps</c><00:27:30.480><c> we</c><00:27:30.640><c> can</c>

00:27:30.710 --> 00:27:30.720 align:start position:0%
after we initialize it perhaps we can
 

00:27:30.720 --> 00:27:32.389 align:start position:0%
after we initialize it perhaps we can
change<00:27:30.960><c> it</c><00:27:31.039><c> to</c><00:27:31.200><c> 35.</c>

00:27:32.389 --> 00:27:32.399 align:start position:0%
change it to 35.
 

00:27:32.399 --> 00:27:36.070 align:start position:0%
change it to 35.
now<00:27:32.640><c> when</c><00:27:32.799><c> we</c><00:27:32.960><c> run</c><00:27:33.120><c> this</c><00:27:33.279><c> program</c><00:27:33.600><c> again</c>

00:27:36.070 --> 00:27:36.080 align:start position:0%
 
 

00:27:36.080 --> 00:27:39.110 align:start position:0%
 
we<00:27:36.240><c> see</c><00:27:36.480><c> 35</c><00:27:37.679><c> beautiful</c>

00:27:39.110 --> 00:27:39.120 align:start position:0%
we see 35 beautiful
 

00:27:39.120 --> 00:27:40.630 align:start position:0%
we see 35 beautiful
we<00:27:39.279><c> can</c><00:27:39.440><c> also</c><00:27:39.679><c> initialize</c><00:27:40.240><c> multiple</c>

00:27:40.630 --> 00:27:40.640 align:start position:0%
we can also initialize multiple
 

00:27:40.640 --> 00:27:42.149 align:start position:0%
we can also initialize multiple
variables<00:27:41.120><c> on</c><00:27:41.200><c> the</c><00:27:41.360><c> same</c><00:27:41.600><c> line</c>

00:27:42.149 --> 00:27:42.159 align:start position:0%
variables on the same line
 

00:27:42.159 --> 00:27:43.510 align:start position:0%
variables on the same line
but<00:27:42.320><c> this</c><00:27:42.480><c> is</c><00:27:42.559><c> something</c><00:27:42.880><c> that</c><00:27:43.120><c> i</c><00:27:43.279><c> don't</c>

00:27:43.510 --> 00:27:43.520 align:start position:0%
but this is something that i don't
 

00:27:43.520 --> 00:27:45.510 align:start position:0%
but this is something that i don't
recommend<00:27:44.080><c> because</c><00:27:44.320><c> it</c><00:27:44.480><c> makes</c><00:27:44.720><c> your</c><00:27:44.960><c> code</c>

00:27:45.510 --> 00:27:45.520 align:start position:0%
recommend because it makes your code
 

00:27:45.520 --> 00:27:47.990 align:start position:0%
recommend because it makes your code
ugly<00:27:46.000><c> and</c><00:27:46.399><c> hard</c><00:27:46.559><c> to</c><00:27:46.720><c> read</c><00:27:47.200><c> here</c><00:27:47.360><c> is</c><00:27:47.520><c> an</c><00:27:47.600><c> example</c>

00:27:47.990 --> 00:27:48.000 align:start position:0%
ugly and hard to read here is an example
 

00:27:48.000 --> 00:27:49.029 align:start position:0%
ugly and hard to read here is an example
we<00:27:48.159><c> can</c><00:27:48.240><c> declare</c>

00:27:49.029 --> 00:27:49.039 align:start position:0%
we can declare
 

00:27:49.039 --> 00:27:51.669 align:start position:0%
we can declare
another<00:27:49.440><c> variable</c><00:27:50.240><c> like</c><00:27:50.480><c> temperature</c><00:27:51.520><c> and</c>

00:27:51.669 --> 00:27:51.679 align:start position:0%
another variable like temperature and
 

00:27:51.679 --> 00:27:53.110 align:start position:0%
another variable like temperature and
set<00:27:51.919><c> it</c><00:27:52.000><c> to</c><00:27:52.159><c> 20.</c>

00:27:53.110 --> 00:27:53.120 align:start position:0%
set it to 20.
 

00:27:53.120 --> 00:27:56.070 align:start position:0%
set it to 20.
so<00:27:53.760><c> using</c><00:27:54.080><c> a</c><00:27:54.240><c> comma</c><00:27:54.640><c> we</c><00:27:54.720><c> can</c><00:27:54.880><c> declare</c><00:27:55.600><c> multiple</c>

00:27:56.070 --> 00:27:56.080 align:start position:0%
so using a comma we can declare multiple
 

00:27:56.080 --> 00:27:57.909 align:start position:0%
so using a comma we can declare multiple
variables<00:27:56.640><c> on</c><00:27:56.720><c> the</c><00:27:56.880><c> same</c><00:27:57.120><c> line</c>

00:27:57.909 --> 00:27:57.919 align:start position:0%
variables on the same line
 

00:27:57.919 --> 00:27:59.190 align:start position:0%
variables on the same line
now<00:27:58.080><c> even</c><00:27:58.240><c> though</c><00:27:58.399><c> this</c><00:27:58.559><c> is</c><00:27:58.720><c> technically</c>

00:27:59.190 --> 00:27:59.200 align:start position:0%
now even though this is technically
 

00:27:59.200 --> 00:28:00.710 align:start position:0%
now even though this is technically
possible<00:27:59.760><c> it's</c><00:27:59.919><c> not</c><00:28:00.159><c> something</c><00:28:00.399><c> that</c><00:28:00.559><c> i</c>

00:28:00.710 --> 00:28:00.720 align:start position:0%
possible it's not something that i
 

00:28:00.720 --> 00:28:01.590 align:start position:0%
possible it's not something that i
recommend

00:28:01.590 --> 00:28:01.600 align:start position:0%
recommend
 

00:28:01.600 --> 00:28:04.630 align:start position:0%
recommend
so<00:28:01.840><c> it's</c><00:28:02.080><c> always</c><00:28:02.480><c> better</c><00:28:03.279><c> to</c><00:28:03.440><c> declare</c><00:28:04.399><c> one</c>

00:28:04.630 --> 00:28:04.640 align:start position:0%
so it's always better to declare one
 

00:28:04.640 --> 00:28:05.510 align:start position:0%
so it's always better to declare one
variable

00:28:05.510 --> 00:28:05.520 align:start position:0%
variable
 

00:28:05.520 --> 00:28:08.630 align:start position:0%
variable
on<00:28:05.760><c> each</c><00:28:05.919><c> line</c><00:28:06.320><c> like</c><00:28:06.559><c> this</c><00:28:07.600><c> we</c><00:28:07.760><c> can</c><00:28:07.919><c> also</c><00:28:08.320><c> copy</c>

00:28:08.630 --> 00:28:08.640 align:start position:0%
on each line like this we can also copy
 

00:28:08.640 --> 00:28:10.710 align:start position:0%
on each line like this we can also copy
the<00:28:08.799><c> value</c><00:28:09.039><c> of</c><00:28:09.120><c> one</c><00:28:09.360><c> variable</c><00:28:09.760><c> into</c><00:28:10.080><c> another</c>

00:28:10.710 --> 00:28:10.720 align:start position:0%
the value of one variable into another
 

00:28:10.720 --> 00:28:12.950 align:start position:0%
the value of one variable into another
here<00:28:10.960><c> is</c><00:28:11.039><c> an</c><00:28:11.200><c> example</c><00:28:11.760><c> let</c><00:28:11.919><c> me</c><00:28:12.080><c> delete</c><00:28:12.720><c> these</c>

00:28:12.950 --> 00:28:12.960 align:start position:0%
here is an example let me delete these
 

00:28:12.960 --> 00:28:14.070 align:start position:0%
here is an example let me delete these
variables

00:28:14.070 --> 00:28:14.080 align:start position:0%
variables
 

00:28:14.080 --> 00:28:16.710 align:start position:0%
variables
and<00:28:14.159><c> declare</c><00:28:14.480><c> a</c><00:28:14.559><c> new</c><00:28:14.720><c> variable</c><00:28:15.120><c> called</c><00:28:15.440><c> my</c><00:28:16.159><c> age</c>

00:28:16.710 --> 00:28:16.720 align:start position:0%
and declare a new variable called my age
 

00:28:16.720 --> 00:28:18.389 align:start position:0%
and declare a new variable called my age
we<00:28:16.880><c> set</c><00:28:17.039><c> it</c><00:28:17.120><c> to</c><00:28:17.279><c> 30</c>

00:28:18.389 --> 00:28:18.399 align:start position:0%
we set it to 30
 

00:28:18.399 --> 00:28:20.230 align:start position:0%
we set it to 30
and<00:28:18.480><c> then</c><00:28:18.640><c> we</c><00:28:18.799><c> declare</c><00:28:19.440><c> another</c><00:28:19.760><c> variable</c>

00:28:20.230 --> 00:28:20.240 align:start position:0%
and then we declare another variable
 

00:28:20.240 --> 00:28:21.830 align:start position:0%
and then we declare another variable
like<00:28:20.640><c> her</c><00:28:20.960><c> age</c>

00:28:21.830 --> 00:28:21.840 align:start position:0%
like her age
 

00:28:21.840 --> 00:28:25.029 align:start position:0%
like her age
and<00:28:22.080><c> we</c><00:28:22.240><c> set</c><00:28:22.480><c> it</c><00:28:22.559><c> to</c><00:28:23.200><c> my</c><00:28:23.440><c> age</c><00:28:24.320><c> so</c><00:28:24.480><c> now</c>

00:28:25.029 --> 00:28:25.039 align:start position:0%
and we set it to my age so now
 

00:28:25.039 --> 00:28:28.630 align:start position:0%
and we set it to my age so now
when<00:28:25.279><c> we</c><00:28:25.440><c> print</c><00:28:26.000><c> her</c><00:28:26.320><c> age</c><00:28:27.279><c> we're</c><00:28:27.440><c> going</c><00:28:27.600><c> to</c><00:28:27.679><c> see</c>

00:28:28.630 --> 00:28:28.640 align:start position:0%
when we print her age we're going to see
 

00:28:28.640 --> 00:28:31.909 align:start position:0%
when we print her age we're going to see
30.<00:28:29.279><c> take</c><00:28:29.520><c> a</c><00:28:29.600><c> look</c>

00:28:31.909 --> 00:28:31.919 align:start position:0%
 
 

00:28:31.919 --> 00:28:34.950 align:start position:0%
 
so<00:28:32.559><c> on</c><00:28:32.720><c> line</c><00:28:33.039><c> 7</c><00:28:33.600><c> we're</c><00:28:33.919><c> copying</c><00:28:34.320><c> the</c><00:28:34.480><c> value</c><00:28:34.799><c> of</c>

00:28:34.950 --> 00:28:34.960 align:start position:0%
so on line 7 we're copying the value of
 

00:28:34.960 --> 00:28:36.149 align:start position:0%
so on line 7 we're copying the value of
this<00:28:35.120><c> variable</c><00:28:35.679><c> into</c>

00:28:36.149 --> 00:28:36.159 align:start position:0%
this variable into
 

00:28:36.159 --> 00:28:38.389 align:start position:0%
this variable into
this<00:28:36.399><c> other</c><00:28:36.640><c> variable</c><00:28:37.760><c> now</c><00:28:37.919><c> one</c><00:28:38.080><c> thing</c><00:28:38.159><c> i</c><00:28:38.240><c> want</c>

00:28:38.389 --> 00:28:38.399 align:start position:0%
this other variable now one thing i want
 

00:28:38.399 --> 00:28:39.909 align:start position:0%
this other variable now one thing i want
you<00:28:38.480><c> to</c><00:28:38.559><c> pay</c><00:28:38.720><c> attention</c><00:28:39.120><c> to</c><00:28:39.279><c> here</c>

00:28:39.909 --> 00:28:39.919 align:start position:0%
you to pay attention to here
 

00:28:39.919 --> 00:28:42.149 align:start position:0%
you to pay attention to here
is<00:28:40.080><c> the</c><00:28:40.240><c> convention</c><00:28:40.799><c> i</c><00:28:40.880><c> have</c><00:28:41.120><c> used</c><00:28:41.520><c> for</c><00:28:41.840><c> naming</c>

00:28:42.149 --> 00:28:42.159 align:start position:0%
is the convention i have used for naming
 

00:28:42.159 --> 00:28:43.190 align:start position:0%
is the convention i have used for naming
our<00:28:42.320><c> variables</c>

00:28:43.190 --> 00:28:43.200 align:start position:0%
our variables
 

00:28:43.200 --> 00:28:45.269 align:start position:0%
our variables
as<00:28:43.360><c> i</c><00:28:43.440><c> told</c><00:28:43.600><c> you</c><00:28:43.760><c> before</c><00:28:44.159><c> this</c><00:28:44.399><c> is</c><00:28:44.559><c> called</c><00:28:45.039><c> the</c>

00:28:45.269 --> 00:28:45.279 align:start position:0%
as i told you before this is called the
 

00:28:45.279 --> 00:28:46.950 align:start position:0%
as i told you before this is called the
camelcase<00:28:45.919><c> notation</c>

00:28:46.950 --> 00:28:46.960 align:start position:0%
camelcase notation
 

00:28:46.960 --> 00:28:49.029 align:start position:0%
camelcase notation
so<00:28:47.120><c> we</c><00:28:47.279><c> should</c><00:28:47.520><c> capitalize</c><00:28:48.240><c> the</c><00:28:48.399><c> first</c><00:28:48.720><c> letter</c>

00:28:49.029 --> 00:28:49.039 align:start position:0%
so we should capitalize the first letter
 

00:28:49.039 --> 00:28:50.310 align:start position:0%
so we should capitalize the first letter
of<00:28:49.360><c> every</c><00:28:49.600><c> word</c>

00:28:50.310 --> 00:28:50.320 align:start position:0%
of every word
 

00:28:50.320 --> 00:28:52.789 align:start position:0%
of every word
except<00:28:51.120><c> the</c><00:28:51.279><c> first</c><00:28:51.600><c> word</c><00:28:52.159><c> so</c><00:28:52.399><c> in</c><00:28:52.480><c> this</c><00:28:52.640><c> case</c>

00:28:52.789 --> 00:28:52.799 align:start position:0%
except the first word so in this case
 

00:28:52.799 --> 00:28:53.669 align:start position:0%
except the first word so in this case
the<00:28:52.960><c> first</c><00:28:53.200><c> word</c>

00:28:53.669 --> 00:28:53.679 align:start position:0%
the first word
 

00:28:53.679 --> 00:28:56.149 align:start position:0%
the first word
my<00:28:54.080><c> it's</c><00:28:54.320><c> all</c><00:28:54.559><c> in</c><00:28:54.640><c> lowercase</c><00:28:55.440><c> but</c><00:28:55.679><c> the</c><00:28:55.840><c> second</c>

00:28:56.149 --> 00:28:56.159 align:start position:0%
my it's all in lowercase but the second
 

00:28:56.159 --> 00:28:56.870 align:start position:0%
my it's all in lowercase but the second
word

00:28:56.870 --> 00:28:56.880 align:start position:0%
word
 

00:28:56.880 --> 00:28:59.430 align:start position:0%
word
starts<00:28:57.360><c> with</c><00:28:57.520><c> a</c><00:28:57.600><c> capital</c><00:28:58.159><c> letter</c><00:28:58.960><c> so</c><00:28:59.120><c> this</c><00:28:59.360><c> is</c>

00:28:59.430 --> 00:28:59.440 align:start position:0%
starts with a capital letter so this is
 

00:28:59.440 --> 00:29:01.350 align:start position:0%
starts with a capital letter so this is
all<00:28:59.600><c> about</c><00:28:59.919><c> declaring</c><00:29:00.480><c> and</c><00:29:00.640><c> initializing</c>

00:29:01.350 --> 00:29:01.360 align:start position:0%
all about declaring and initializing
 

00:29:01.360 --> 00:29:02.070 align:start position:0%
all about declaring and initializing
variables

00:29:02.070 --> 00:29:02.080 align:start position:0%
variables
 

00:29:02.080 --> 00:29:03.430 align:start position:0%
variables
in<00:29:02.159><c> the</c><00:29:02.240><c> next</c><00:29:02.480><c> tutorial</c><00:29:02.880><c> we're</c><00:29:03.039><c> going</c><00:29:03.120><c> to</c><00:29:03.200><c> talk</c>

00:29:03.430 --> 00:29:03.440 align:start position:0%
in the next tutorial we're going to talk
 

00:29:03.440 --> 00:29:11.430 align:start position:0%
in the next tutorial we're going to talk
about<00:29:03.919><c> various</c><00:29:04.320><c> types</c><00:29:04.799><c> in</c><00:29:04.960><c> java</c>

00:29:11.430 --> 00:29:11.440 align:start position:0%
 
 

00:29:11.440 --> 00:29:12.630 align:start position:0%
 
in<00:29:11.600><c> this</c><00:29:11.679><c> tutorial</c><00:29:12.080><c> we're</c><00:29:12.240><c> going</c><00:29:12.320><c> to</c><00:29:12.399><c> talk</c>

00:29:12.630 --> 00:29:12.640 align:start position:0%
in this tutorial we're going to talk
 

00:29:12.640 --> 00:29:15.110 align:start position:0%
in this tutorial we're going to talk
about<00:29:13.039><c> various</c><00:29:13.440><c> types</c><00:29:13.919><c> in</c><00:29:14.240><c> java</c>

00:29:15.110 --> 00:29:15.120 align:start position:0%
about various types in java
 

00:29:15.120 --> 00:29:16.950 align:start position:0%
about various types in java
basically<00:29:15.520><c> we</c><00:29:15.679><c> have</c><00:29:15.840><c> two</c><00:29:16.240><c> categories</c><00:29:16.799><c> of</c>

00:29:16.950 --> 00:29:16.960 align:start position:0%
basically we have two categories of
 

00:29:16.960 --> 00:29:19.029 align:start position:0%
basically we have two categories of
types<00:29:17.520><c> we</c><00:29:17.679><c> have</c><00:29:17.840><c> primitive</c><00:29:18.320><c> types</c><00:29:18.799><c> for</c>

00:29:19.029 --> 00:29:19.039 align:start position:0%
types we have primitive types for
 

00:29:19.039 --> 00:29:20.549 align:start position:0%
types we have primitive types for
storing<00:29:19.360><c> simple</c><00:29:19.760><c> values</c>

00:29:20.549 --> 00:29:20.559 align:start position:0%
storing simple values
 

00:29:20.559 --> 00:29:22.710 align:start position:0%
storing simple values
and<00:29:20.799><c> non-primitive</c><00:29:21.440><c> types</c><00:29:21.840><c> or</c><00:29:22.240><c> reference</c>

00:29:22.710 --> 00:29:22.720 align:start position:0%
and non-primitive types or reference
 

00:29:22.720 --> 00:29:25.430 align:start position:0%
and non-primitive types or reference
types<00:29:23.120><c> for</c><00:29:23.360><c> storing</c><00:29:23.840><c> complex</c><00:29:24.399><c> objects</c>

00:29:25.430 --> 00:29:25.440 align:start position:0%
types for storing complex objects
 

00:29:25.440 --> 00:29:27.190 align:start position:0%
types for storing complex objects
so<00:29:25.600><c> in</c><00:29:25.760><c> the</c><00:29:25.840><c> category</c><00:29:26.240><c> of</c><00:29:26.320><c> primitive</c><00:29:26.720><c> types</c><00:29:27.039><c> we</c>

00:29:27.190 --> 00:29:27.200 align:start position:0%
so in the category of primitive types we
 

00:29:27.200 --> 00:29:28.950 align:start position:0%
so in the category of primitive types we
have<00:29:27.600><c> white</c><00:29:28.240><c> which</c><00:29:28.480><c> takes</c>

00:29:28.950 --> 00:29:28.960 align:start position:0%
have white which takes
 

00:29:28.960 --> 00:29:31.350 align:start position:0%
have white which takes
one<00:29:29.200><c> byte</c><00:29:29.440><c> of</c><00:29:29.600><c> memory</c><00:29:30.320><c> and</c><00:29:30.559><c> in</c><00:29:30.640><c> one</c><00:29:30.960><c> byte</c><00:29:31.200><c> we</c>

00:29:31.350 --> 00:29:31.360 align:start position:0%
one byte of memory and in one byte we
 

00:29:31.360 --> 00:29:33.990 align:start position:0%
one byte of memory and in one byte we
can<00:29:31.520><c> store</c><00:29:31.840><c> values</c><00:29:32.240><c> from</c><00:29:32.840><c> 128</c>

00:29:33.990 --> 00:29:34.000 align:start position:0%
can store values from 128
 

00:29:34.000 --> 00:29:37.590 align:start position:0%
can store values from 128
to<00:29:34.600><c> 127.</c><00:29:36.000><c> now</c><00:29:36.159><c> the</c><00:29:36.320><c> more</c><00:29:36.559><c> bytes</c><00:29:36.880><c> we</c><00:29:37.039><c> have</c>

00:29:37.590 --> 00:29:37.600 align:start position:0%
to 127. now the more bytes we have
 

00:29:37.600 --> 00:29:39.830 align:start position:0%
to 127. now the more bytes we have
the<00:29:37.760><c> larger</c><00:29:38.159><c> numbers</c><00:29:38.480><c> we</c><00:29:38.559><c> can</c><00:29:38.799><c> store</c><00:29:39.440><c> so</c><00:29:39.600><c> next</c>

00:29:39.830 --> 00:29:39.840 align:start position:0%
the larger numbers we can store so next
 

00:29:39.840 --> 00:29:41.430 align:start position:0%
the larger numbers we can store so next
we<00:29:40.000><c> have</c><00:29:40.240><c> short</c><00:29:40.640><c> which</c><00:29:40.880><c> takes</c>

00:29:41.430 --> 00:29:41.440 align:start position:0%
we have short which takes
 

00:29:41.440 --> 00:29:43.190 align:start position:0%
we have short which takes
2<00:29:41.679><c> bytes</c><00:29:42.159><c> and</c><00:29:42.320><c> with</c><00:29:42.480><c> this</c><00:29:42.640><c> we</c><00:29:42.799><c> can</c><00:29:42.960><c> store</c>

00:29:43.190 --> 00:29:43.200 align:start position:0%
2 bytes and with this we can store
 

00:29:43.200 --> 00:29:44.710 align:start position:0%
2 bytes and with this we can store
values<00:29:43.679><c> up</c><00:29:43.760><c> to</c><00:29:44.080><c> 32</c>

00:29:44.710 --> 00:29:44.720 align:start position:0%
values up to 32
 

00:29:44.720 --> 00:29:46.950 align:start position:0%
values up to 32
000.<00:29:45.440><c> next</c><00:29:45.679><c> we</c><00:29:45.840><c> have</c><00:29:46.080><c> integer</c><00:29:46.480><c> which</c><00:29:46.720><c> we</c><00:29:46.799><c> have</c>

00:29:46.950 --> 00:29:46.960 align:start position:0%
000. next we have integer which we have
 

00:29:46.960 --> 00:29:47.909 align:start position:0%
000. next we have integer which we have
seen<00:29:47.200><c> before</c>

00:29:47.909 --> 00:29:47.919 align:start position:0%
seen before
 

00:29:47.919 --> 00:29:50.230 align:start position:0%
seen before
integers<00:29:48.399><c> take</c><00:29:48.640><c> 4</c><00:29:48.880><c> bytes</c><00:29:49.120><c> of</c><00:29:49.279><c> memory</c><00:29:49.760><c> and</c>

00:29:50.230 --> 00:29:50.240 align:start position:0%
integers take 4 bytes of memory and
 

00:29:50.240 --> 00:29:52.950 align:start position:0%
integers take 4 bytes of memory and
allow<00:29:50.559><c> us</c><00:29:50.640><c> to</c><00:29:50.799><c> store</c><00:29:51.120><c> values</c><00:29:51.520><c> up</c><00:29:51.600><c> to</c><00:29:51.840><c> 2</c><00:29:52.159><c> billion</c>

00:29:52.950 --> 00:29:52.960 align:start position:0%
allow us to store values up to 2 billion
 

00:29:52.960 --> 00:29:55.430 align:start position:0%
allow us to store values up to 2 billion
then<00:29:53.120><c> we</c><00:29:53.279><c> have</c><00:29:53.520><c> long</c><00:29:54.080><c> which</c><00:29:54.320><c> takes</c><00:29:54.640><c> 8</c><00:29:54.880><c> bytes</c>

00:29:55.430 --> 00:29:55.440 align:start position:0%
then we have long which takes 8 bytes
 

00:29:55.440 --> 00:29:57.110 align:start position:0%
then we have long which takes 8 bytes
and<00:29:55.600><c> with</c><00:29:55.760><c> this</c><00:29:55.919><c> we</c><00:29:56.000><c> can</c><00:29:56.159><c> store</c><00:29:56.399><c> even</c><00:29:56.720><c> larger</c>

00:29:57.110 --> 00:29:57.120 align:start position:0%
and with this we can store even larger
 

00:29:57.120 --> 00:29:57.990 align:start position:0%
and with this we can store even larger
numbers

00:29:57.990 --> 00:29:58.000 align:start position:0%
numbers
 

00:29:58.000 --> 00:30:00.070 align:start position:0%
numbers
now<00:29:58.240><c> all</c><00:29:58.399><c> these</c><00:29:58.640><c> types</c><00:29:59.039><c> are</c><00:29:59.120><c> for</c><00:29:59.360><c> storing</c>

00:30:00.070 --> 00:30:00.080 align:start position:0%
now all these types are for storing
 

00:30:00.080 --> 00:30:02.070 align:start position:0%
now all these types are for storing
whole<00:30:00.320><c> numbers</c><00:30:00.720><c> that</c><00:30:00.960><c> don't</c><00:30:01.200><c> have</c><00:30:01.440><c> a</c><00:30:01.600><c> decimal</c>

00:30:02.070 --> 00:30:02.080 align:start position:0%
whole numbers that don't have a decimal
 

00:30:02.080 --> 00:30:02.789 align:start position:0%
whole numbers that don't have a decimal
point

00:30:02.789 --> 00:30:02.799 align:start position:0%
point
 

00:30:02.799 --> 00:30:04.310 align:start position:0%
point
if<00:30:02.960><c> you</c><00:30:03.039><c> want</c><00:30:03.120><c> to</c><00:30:03.279><c> store</c><00:30:03.520><c> a</c><00:30:03.600><c> number</c><00:30:03.919><c> that</c><00:30:04.080><c> has</c><00:30:04.240><c> a</c>

00:30:04.310 --> 00:30:04.320 align:start position:0%
if you want to store a number that has a
 

00:30:04.320 --> 00:30:05.909 align:start position:0%
if you want to store a number that has a
decimal<00:30:04.720><c> point</c><00:30:04.960><c> you</c><00:30:05.120><c> have</c><00:30:05.200><c> to</c><00:30:05.360><c> use</c>

00:30:05.909 --> 00:30:05.919 align:start position:0%
decimal point you have to use
 

00:30:05.919 --> 00:30:09.110 align:start position:0%
decimal point you have to use
float<00:30:06.559><c> or</c><00:30:06.880><c> double</c><00:30:07.679><c> float</c><00:30:08.000><c> takes</c><00:30:08.240><c> 4</c><00:30:08.480><c> bytes</c>

00:30:09.110 --> 00:30:09.120 align:start position:0%
float or double float takes 4 bytes
 

00:30:09.120 --> 00:30:10.789 align:start position:0%
float or double float takes 4 bytes
double<00:30:09.440><c> takes</c><00:30:09.679><c> 8</c><00:30:09.919><c> bytes</c><00:30:10.159><c> so</c><00:30:10.320><c> obviously</c><00:30:10.640><c> with</c>

00:30:10.789 --> 00:30:10.799 align:start position:0%
double takes 8 bytes so obviously with
 

00:30:10.799 --> 00:30:13.350 align:start position:0%
double takes 8 bytes so obviously with
double<00:30:11.120><c> we</c><00:30:11.200><c> can</c><00:30:11.360><c> store</c><00:30:12.000><c> larger</c><00:30:12.480><c> numbers</c>

00:30:13.350 --> 00:30:13.360 align:start position:0%
double we can store larger numbers
 

00:30:13.360 --> 00:30:15.350 align:start position:0%
double we can store larger numbers
next<00:30:13.600><c> we</c><00:30:13.760><c> have</c><00:30:13.919><c> char</c><00:30:14.320><c> for</c><00:30:14.559><c> storing</c><00:30:14.880><c> a</c><00:30:14.960><c> single</c>

00:30:15.350 --> 00:30:15.360 align:start position:0%
next we have char for storing a single
 

00:30:15.360 --> 00:30:17.110 align:start position:0%
next we have char for storing a single
character<00:30:15.840><c> like</c><00:30:16.080><c> abc</c>

00:30:17.110 --> 00:30:17.120 align:start position:0%
character like abc
 

00:30:17.120 --> 00:30:19.909 align:start position:0%
character like abc
and<00:30:17.360><c> these</c><00:30:17.600><c> chart</c><00:30:18.000><c> types</c><00:30:18.399><c> take</c><00:30:18.799><c> 2</c><00:30:19.039><c> bytes</c><00:30:19.760><c> so</c>

00:30:19.909 --> 00:30:19.919 align:start position:0%
and these chart types take 2 bytes so
 

00:30:19.919 --> 00:30:20.549 align:start position:0%
and these chart types take 2 bytes so
they<00:30:20.080><c> support</c>

00:30:20.549 --> 00:30:20.559 align:start position:0%
they support
 

00:30:20.559 --> 00:30:22.630 align:start position:0%
they support
international<00:30:21.200><c> letters</c><00:30:22.000><c> and</c><00:30:22.159><c> finally</c><00:30:22.559><c> we</c>

00:30:22.630 --> 00:30:22.640 align:start position:0%
international letters and finally we
 

00:30:22.640 --> 00:30:24.789 align:start position:0%
international letters and finally we
have<00:30:22.880><c> boolean</c><00:30:23.360><c> for</c><00:30:23.600><c> storing</c><00:30:23.919><c> boolean</c><00:30:24.399><c> values</c>

00:30:24.789 --> 00:30:24.799 align:start position:0%
have boolean for storing boolean values
 

00:30:24.799 --> 00:30:26.549 align:start position:0%
have boolean for storing boolean values
which<00:30:24.960><c> can</c><00:30:25.120><c> be</c><00:30:25.360><c> true</c><00:30:25.679><c> or</c><00:30:25.919><c> false</c>

00:30:26.549 --> 00:30:26.559 align:start position:0%
which can be true or false
 

00:30:26.559 --> 00:30:29.590 align:start position:0%
which can be true or false
just<00:30:26.799><c> like</c><00:30:27.039><c> yes</c><00:30:27.440><c> or</c><00:30:27.600><c> no</c><00:30:27.840><c> in</c><00:30:28.080><c> english</c><00:30:29.200><c> now</c><00:30:29.440><c> let's</c>

00:30:29.590 --> 00:30:29.600 align:start position:0%
just like yes or no in english now let's
 

00:30:29.600 --> 00:30:31.990 align:start position:0%
just like yes or no in english now let's
take<00:30:29.760><c> a</c><00:30:29.840><c> look</c><00:30:30.000><c> at</c><00:30:30.159><c> a</c><00:30:30.240><c> few</c><00:30:30.399><c> examples</c>

00:30:31.990 --> 00:30:32.000 align:start position:0%
take a look at a few examples
 

00:30:32.000 --> 00:30:33.830 align:start position:0%
take a look at a few examples
earlier<00:30:32.399><c> we</c><00:30:32.480><c> used</c><00:30:32.720><c> an</c><00:30:32.880><c> integer</c><00:30:33.279><c> for</c><00:30:33.440><c> storing</c>

00:30:33.830 --> 00:30:33.840 align:start position:0%
earlier we used an integer for storing
 

00:30:33.840 --> 00:30:35.830 align:start position:0%
earlier we used an integer for storing
someone's<00:30:34.240><c> age</c><00:30:34.880><c> but</c><00:30:35.039><c> as</c><00:30:35.200><c> you</c><00:30:35.360><c> learned</c>

00:30:35.830 --> 00:30:35.840 align:start position:0%
someone's age but as you learned
 

00:30:35.840 --> 00:30:38.310 align:start position:0%
someone's age but as you learned
integers<00:30:36.320><c> take</c><00:30:36.559><c> 4</c><00:30:36.880><c> bytes</c><00:30:37.279><c> and</c><00:30:37.679><c> allow</c><00:30:38.000><c> us</c><00:30:38.159><c> to</c>

00:30:38.310 --> 00:30:38.320 align:start position:0%
integers take 4 bytes and allow us to
 

00:30:38.320 --> 00:30:40.230 align:start position:0%
integers take 4 bytes and allow us to
store<00:30:38.640><c> values</c><00:30:39.039><c> up</c><00:30:39.120><c> to</c><00:30:39.360><c> 2</c><00:30:39.679><c> billion</c>

00:30:40.230 --> 00:30:40.240 align:start position:0%
store values up to 2 billion
 

00:30:40.240 --> 00:30:42.389 align:start position:0%
store values up to 2 billion
we<00:30:40.399><c> don't</c><00:30:40.559><c> need</c><00:30:40.799><c> 4</c><00:30:41.039><c> bytes</c><00:30:41.279><c> of</c><00:30:41.360><c> memory</c><00:30:41.840><c> to</c><00:30:42.159><c> store</c>

00:30:42.389 --> 00:30:42.399 align:start position:0%
we don't need 4 bytes of memory to store
 

00:30:42.399 --> 00:30:43.430 align:start position:0%
we don't need 4 bytes of memory to store
someone's<00:30:42.880><c> age</c>

00:30:43.430 --> 00:30:43.440 align:start position:0%
someone's age
 

00:30:43.440 --> 00:30:45.669 align:start position:0%
someone's age
all<00:30:43.600><c> we</c><00:30:43.760><c> need</c><00:30:44.080><c> is</c><00:30:44.240><c> 1</c><00:30:44.480><c> byte</c><00:30:44.960><c> because</c><00:30:45.200><c> with</c><00:30:45.440><c> 1</c>

00:30:45.669 --> 00:30:45.679 align:start position:0%
all we need is 1 byte because with 1
 

00:30:45.679 --> 00:30:49.269 align:start position:0%
all we need is 1 byte because with 1
byte<00:30:45.919><c> we</c><00:30:46.000><c> can</c><00:30:46.159><c> store</c><00:30:46.399><c> values</c><00:30:46.880><c> up</c><00:30:46.960><c> to</c><00:30:47.559><c> 127</c>

00:30:49.269 --> 00:30:49.279 align:start position:0%
byte we can store values up to 127
 

00:30:49.279 --> 00:30:51.510 align:start position:0%
byte we can store values up to 127
so<00:30:49.440><c> i'm</c><00:30:49.520><c> going</c><00:30:49.679><c> to</c><00:30:49.840><c> change</c><00:30:50.080><c> this</c><00:30:50.320><c> to</c><00:30:50.640><c> byte</c><00:30:51.279><c> that</c>

00:30:51.510 --> 00:30:51.520 align:start position:0%
so i'm going to change this to byte that
 

00:30:51.520 --> 00:30:52.549 align:start position:0%
so i'm going to change this to byte that
is<00:30:51.679><c> better</c>

00:30:52.549 --> 00:30:52.559 align:start position:0%
is better
 

00:30:52.559 --> 00:30:54.710 align:start position:0%
is better
now<00:30:52.799><c> let's</c><00:30:52.960><c> look</c><00:30:53.120><c> at</c><00:30:53.360><c> another</c><00:30:53.760><c> example</c><00:30:54.559><c> let's</c>

00:30:54.710 --> 00:30:54.720 align:start position:0%
now let's look at another example let's
 

00:30:54.720 --> 00:30:55.669 align:start position:0%
now let's look at another example let's
say<00:30:54.880><c> we</c><00:30:55.039><c> want</c><00:30:55.120><c> to</c><00:30:55.279><c> store</c>

00:30:55.669 --> 00:30:55.679 align:start position:0%
say we want to store
 

00:30:55.679 --> 00:30:57.669 align:start position:0%
say we want to store
the<00:30:55.840><c> number</c><00:30:56.080><c> of</c><00:30:56.240><c> times</c><00:30:56.559><c> a</c><00:30:56.720><c> youtube</c><00:30:57.200><c> video</c><00:30:57.519><c> has</c>

00:30:57.669 --> 00:30:57.679 align:start position:0%
the number of times a youtube video has
 

00:30:57.679 --> 00:30:58.710 align:start position:0%
the number of times a youtube video has
been<00:30:57.919><c> watched</c>

00:30:58.710 --> 00:30:58.720 align:start position:0%
been watched
 

00:30:58.720 --> 00:31:01.430 align:start position:0%
been watched
so<00:30:58.960><c> we</c><00:30:59.039><c> define</c><00:30:59.440><c> an</c><00:30:59.600><c> integer</c><00:31:00.159><c> called</c><00:31:00.480><c> views</c>

00:31:01.430 --> 00:31:01.440 align:start position:0%
so we define an integer called views
 

00:31:01.440 --> 00:31:02.149 align:start position:0%
so we define an integer called views
count

00:31:02.149 --> 00:31:02.159 align:start position:0%
count
 

00:31:02.159 --> 00:31:04.070 align:start position:0%
count
note<00:31:02.399><c> that</c><00:31:02.559><c> i'm</c><00:31:02.799><c> always</c><00:31:03.200><c> using</c><00:31:03.519><c> meaningful</c>

00:31:04.070 --> 00:31:04.080 align:start position:0%
note that i'm always using meaningful
 

00:31:04.080 --> 00:31:05.430 align:start position:0%
note that i'm always using meaningful
names<00:31:04.399><c> for</c><00:31:04.559><c> my</c><00:31:04.720><c> variables</c>

00:31:05.430 --> 00:31:05.440 align:start position:0%
names for my variables
 

00:31:05.440 --> 00:31:07.190 align:start position:0%
names for my variables
because<00:31:05.679><c> these</c><00:31:05.919><c> names</c><00:31:06.240><c> help</c><00:31:06.480><c> us</c><00:31:06.640><c> understand</c>

00:31:07.190 --> 00:31:07.200 align:start position:0%
because these names help us understand
 

00:31:07.200 --> 00:31:08.630 align:start position:0%
because these names help us understand
what<00:31:07.440><c> this</c><00:31:07.679><c> code</c><00:31:08.080><c> does</c>

00:31:08.630 --> 00:31:08.640 align:start position:0%
what this code does
 

00:31:08.640 --> 00:31:10.310 align:start position:0%
what this code does
i've<00:31:08.880><c> seen</c><00:31:09.039><c> some</c><00:31:09.200><c> people</c><00:31:09.440><c> use</c><00:31:09.679><c> variable</c><00:31:10.080><c> names</c>

00:31:10.310 --> 00:31:10.320 align:start position:0%
i've seen some people use variable names
 

00:31:10.320 --> 00:31:11.669 align:start position:0%
i've seen some people use variable names
like<00:31:10.559><c> v</c><00:31:11.039><c> or</c>

00:31:11.669 --> 00:31:11.679 align:start position:0%
like v or
 

00:31:11.679 --> 00:31:14.310 align:start position:0%
like v or
v1<00:31:12.399><c> or</c><00:31:12.799><c> n</c><00:31:13.440><c> nobody</c><00:31:13.760><c> knows</c><00:31:14.000><c> what</c><00:31:14.159><c> these</c>

00:31:14.310 --> 00:31:14.320 align:start position:0%
v1 or n nobody knows what these
 

00:31:14.320 --> 00:31:15.190 align:start position:0%
v1 or n nobody knows what these
variables<00:31:14.799><c> do</c>

00:31:15.190 --> 00:31:15.200 align:start position:0%
variables do
 

00:31:15.200 --> 00:31:17.430 align:start position:0%
variables do
so<00:31:15.360><c> as</c><00:31:15.519><c> a</c><00:31:15.600><c> best</c><00:31:15.840><c> practice</c><00:31:16.640><c> always</c><00:31:17.039><c> use</c>

00:31:17.430 --> 00:31:17.440 align:start position:0%
so as a best practice always use
 

00:31:17.440 --> 00:31:19.350 align:start position:0%
so as a best practice always use
meaningful<00:31:18.159><c> and</c><00:31:18.399><c> descriptive</c><00:31:18.960><c> names</c><00:31:19.200><c> for</c>

00:31:19.350 --> 00:31:19.360 align:start position:0%
meaningful and descriptive names for
 

00:31:19.360 --> 00:31:20.789 align:start position:0%
meaningful and descriptive names for
your<00:31:19.519><c> variables</c>

00:31:20.789 --> 00:31:20.799 align:start position:0%
your variables
 

00:31:20.799 --> 00:31:23.350 align:start position:0%
your variables
so<00:31:21.039><c> views</c><00:31:21.679><c> count</c><00:31:22.080><c> we</c><00:31:22.240><c> set</c><00:31:22.399><c> this</c><00:31:22.640><c> to</c><00:31:22.880><c> a</c><00:31:23.039><c> large</c>

00:31:23.350 --> 00:31:23.360 align:start position:0%
so views count we set this to a large
 

00:31:23.360 --> 00:31:24.149 align:start position:0%
so views count we set this to a large
number<00:31:23.760><c> like</c>

00:31:24.149 --> 00:31:24.159 align:start position:0%
number like
 

00:31:24.159 --> 00:31:26.230 align:start position:0%
number like
one<00:31:24.320><c> two</c><00:31:24.559><c> three</c><00:31:24.880><c> four</c><00:31:25.120><c> five</c><00:31:25.360><c> six</c><00:31:25.760><c> seven</c><00:31:26.080><c> eight</c>

00:31:26.230 --> 00:31:26.240 align:start position:0%
one two three four five six seven eight
 

00:31:26.240 --> 00:31:27.430 align:start position:0%
one two three four five six seven eight
nine

00:31:27.430 --> 00:31:27.440 align:start position:0%
nine
 

00:31:27.440 --> 00:31:29.750 align:start position:0%
nine
now<00:31:27.760><c> in</c><00:31:27.919><c> java</c><00:31:28.559><c> whenever</c><00:31:28.960><c> you</c><00:31:29.120><c> deal</c><00:31:29.440><c> with</c><00:31:29.679><c> a</c>

00:31:29.750 --> 00:31:29.760 align:start position:0%
now in java whenever you deal with a
 

00:31:29.760 --> 00:31:31.190 align:start position:0%
now in java whenever you deal with a
large<00:31:30.080><c> number</c><00:31:30.399><c> like</c><00:31:30.559><c> this</c>

00:31:31.190 --> 00:31:31.200 align:start position:0%
large number like this
 

00:31:31.200 --> 00:31:34.149 align:start position:0%
large number like this
you<00:31:31.360><c> can</c><00:31:31.519><c> use</c><00:31:31.679><c> an</c><00:31:32.000><c> underscore</c><00:31:33.120><c> to</c><00:31:33.360><c> separate</c>

00:31:34.149 --> 00:31:34.159 align:start position:0%
you can use an underscore to separate
 

00:31:34.159 --> 00:31:35.350 align:start position:0%
you can use an underscore to separate
every<00:31:34.480><c> three</c><00:31:34.799><c> digits</c>

00:31:35.350 --> 00:31:35.360 align:start position:0%
every three digits
 

00:31:35.360 --> 00:31:37.430 align:start position:0%
every three digits
just<00:31:35.519><c> like</c><00:31:35.679><c> how</c><00:31:35.840><c> we</c><00:31:36.000><c> use</c><00:31:36.240><c> a</c><00:31:36.480><c> comma</c><00:31:37.120><c> in</c><00:31:37.279><c> our</c>

00:31:37.430 --> 00:31:37.440 align:start position:0%
just like how we use a comma in our
 

00:31:37.440 --> 00:31:39.029 align:start position:0%
just like how we use a comma in our
documents

00:31:39.029 --> 00:31:39.039 align:start position:0%
documents
 

00:31:39.039 --> 00:31:41.029 align:start position:0%
documents
to<00:31:39.200><c> make</c><00:31:39.360><c> our</c><00:31:39.519><c> numbers</c><00:31:39.840><c> more</c><00:31:40.080><c> readable</c><00:31:40.799><c> we</c><00:31:40.960><c> can</c>

00:31:41.029 --> 00:31:41.039 align:start position:0%
to make our numbers more readable we can
 

00:31:41.039 --> 00:31:42.950 align:start position:0%
to make our numbers more readable we can
use<00:31:41.279><c> an</c><00:31:41.519><c> underscore</c>

00:31:42.950 --> 00:31:42.960 align:start position:0%
use an underscore
 

00:31:42.960 --> 00:31:46.470 align:start position:0%
use an underscore
in<00:31:43.120><c> java</c><00:31:45.200><c> so</c><00:31:45.360><c> with</c><00:31:45.600><c> integers</c><00:31:46.000><c> we</c><00:31:46.080><c> can</c><00:31:46.240><c> store</c>

00:31:46.470 --> 00:31:46.480 align:start position:0%
in java so with integers we can store
 

00:31:46.480 --> 00:31:48.310 align:start position:0%
in java so with integers we can store
values<00:31:46.960><c> up</c><00:31:47.039><c> to</c><00:31:47.279><c> 2</c><00:31:47.519><c> billion</c>

00:31:48.310 --> 00:31:48.320 align:start position:0%
values up to 2 billion
 

00:31:48.320 --> 00:31:50.070 align:start position:0%
values up to 2 billion
but<00:31:48.480><c> let's</c><00:31:48.720><c> say</c><00:31:49.120><c> the</c><00:31:49.279><c> number</c><00:31:49.519><c> of</c><00:31:49.600><c> times</c><00:31:49.919><c> this</c>

00:31:50.070 --> 00:31:50.080 align:start position:0%
but let's say the number of times this
 

00:31:50.080 --> 00:31:52.070 align:start position:0%
but let's say the number of times this
video<00:31:50.399><c> has</c><00:31:50.559><c> been</c><00:31:50.720><c> watched</c><00:31:51.039><c> is</c><00:31:51.200><c> 3</c><00:31:51.519><c> billion</c>

00:31:52.070 --> 00:31:52.080 align:start position:0%
video has been watched is 3 billion
 

00:31:52.080 --> 00:31:55.110 align:start position:0%
video has been watched is 3 billion
so<00:31:52.880><c> i</c><00:31:53.039><c> added</c><00:31:53.360><c> 3</c><00:31:53.600><c> here</c><00:31:54.399><c> now</c><00:31:54.559><c> we</c><00:31:54.720><c> have</c><00:31:54.799><c> a</c><00:31:54.880><c> red</c>

00:31:55.110 --> 00:31:55.120 align:start position:0%
so i added 3 here now we have a red
 

00:31:55.120 --> 00:31:57.190 align:start position:0%
so i added 3 here now we have a red
underline<00:31:55.600><c> that</c><00:31:55.760><c> indicates</c><00:31:56.240><c> an</c><00:31:56.399><c> error</c>

00:31:57.190 --> 00:31:57.200 align:start position:0%
underline that indicates an error
 

00:31:57.200 --> 00:31:59.029 align:start position:0%
underline that indicates an error
when<00:31:57.360><c> we</c><00:31:57.519><c> hover</c><00:31:57.840><c> our</c><00:31:58.000><c> mouse</c><00:31:58.399><c> over</c><00:31:58.640><c> it</c><00:31:58.799><c> we</c><00:31:58.880><c> see</c>

00:31:59.029 --> 00:31:59.039 align:start position:0%
when we hover our mouse over it we see
 

00:31:59.039 --> 00:32:01.110 align:start position:0%
when we hover our mouse over it we see
this<00:31:59.279><c> tooltip</c><00:32:00.000><c> integer</c><00:32:00.480><c> number</c>

00:32:01.110 --> 00:32:01.120 align:start position:0%
this tooltip integer number
 

00:32:01.120 --> 00:32:03.669 align:start position:0%
this tooltip integer number
too<00:32:01.360><c> large</c><00:32:02.159><c> so</c><00:32:02.559><c> we</c><00:32:02.720><c> need</c><00:32:02.880><c> to</c><00:32:03.120><c> change</c><00:32:03.360><c> the</c><00:32:03.440><c> type</c>

00:32:03.669 --> 00:32:03.679 align:start position:0%
too large so we need to change the type
 

00:32:03.679 --> 00:32:05.669 align:start position:0%
too large so we need to change the type
of<00:32:03.760><c> this</c><00:32:04.000><c> variable</c><00:32:04.320><c> to</c><00:32:04.559><c> long</c>

00:32:05.669 --> 00:32:05.679 align:start position:0%
of this variable to long
 

00:32:05.679 --> 00:32:08.389 align:start position:0%
of this variable to long
however<00:32:06.480><c> the</c><00:32:06.720><c> error</c><00:32:06.960><c> is</c><00:32:07.039><c> still</c><00:32:07.279><c> there</c><00:32:08.159><c> what's</c>

00:32:08.389 --> 00:32:08.399 align:start position:0%
however the error is still there what's
 

00:32:08.399 --> 00:32:09.509 align:start position:0%
however the error is still there what's
going<00:32:08.559><c> on</c><00:32:08.720><c> here</c>

00:32:09.509 --> 00:32:09.519 align:start position:0%
going on here
 

00:32:09.519 --> 00:32:10.870 align:start position:0%
going on here
the<00:32:09.679><c> reason</c><00:32:09.919><c> we're</c><00:32:10.080><c> getting</c><00:32:10.320><c> this</c><00:32:10.480><c> error</c><00:32:10.720><c> is</c>

00:32:10.870 --> 00:32:10.880 align:start position:0%
the reason we're getting this error is
 

00:32:10.880 --> 00:32:13.110 align:start position:0%
the reason we're getting this error is
that<00:32:11.039><c> by</c><00:32:11.279><c> default</c><00:32:11.760><c> java</c><00:32:12.159><c> sees</c><00:32:12.399><c> these</c><00:32:12.640><c> numbers</c>

00:32:13.110 --> 00:32:13.120 align:start position:0%
that by default java sees these numbers
 

00:32:13.120 --> 00:32:13.509 align:start position:0%
that by default java sees these numbers
as

00:32:13.509 --> 00:32:13.519 align:start position:0%
as
 

00:32:13.519 --> 00:32:15.430 align:start position:0%
as
integers<00:32:14.240><c> so</c><00:32:14.480><c> even</c><00:32:14.720><c> though</c><00:32:14.880><c> we</c><00:32:14.960><c> have</c><00:32:15.039><c> defined</c>

00:32:15.430 --> 00:32:15.440 align:start position:0%
integers so even though we have defined
 

00:32:15.440 --> 00:32:17.430 align:start position:0%
integers so even though we have defined
the<00:32:15.519><c> type</c><00:32:15.760><c> of</c><00:32:15.840><c> this</c><00:32:16.080><c> variable</c><00:32:16.480><c> as</c><00:32:16.720><c> long</c>

00:32:17.430 --> 00:32:17.440 align:start position:0%
the type of this variable as long
 

00:32:17.440 --> 00:32:19.669 align:start position:0%
the type of this variable as long
java<00:32:17.840><c> compiler</c><00:32:18.559><c> sees</c><00:32:18.799><c> this</c><00:32:19.039><c> value</c><00:32:19.360><c> as</c><00:32:19.519><c> an</c>

00:32:19.669 --> 00:32:19.679 align:start position:0%
java compiler sees this value as an
 

00:32:19.679 --> 00:32:20.950 align:start position:0%
java compiler sees this value as an
integer<00:32:20.320><c> and</c><00:32:20.480><c> he</c><00:32:20.559><c> thinks</c>

00:32:20.950 --> 00:32:20.960 align:start position:0%
integer and he thinks
 

00:32:20.960 --> 00:32:23.350 align:start position:0%
integer and he thinks
this<00:32:21.279><c> value</c><00:32:21.600><c> is</c><00:32:21.760><c> too</c><00:32:21.919><c> large</c><00:32:22.159><c> for</c><00:32:22.320><c> an</c><00:32:22.480><c> integer</c>

00:32:23.350 --> 00:32:23.360 align:start position:0%
this value is too large for an integer
 

00:32:23.360 --> 00:32:24.549 align:start position:0%
this value is too large for an integer
to<00:32:23.519><c> solve</c><00:32:23.760><c> this</c><00:32:23.919><c> problem</c>

00:32:24.549 --> 00:32:24.559 align:start position:0%
to solve this problem
 

00:32:24.559 --> 00:32:27.909 align:start position:0%
to solve this problem
we<00:32:24.720><c> need</c><00:32:24.880><c> to</c><00:32:24.960><c> add</c><00:32:25.440><c> an</c><00:32:25.760><c> l</c><00:32:26.159><c> as</c><00:32:26.399><c> a</c><00:32:26.559><c> suffix</c><00:32:27.200><c> number</c>

00:32:27.909 --> 00:32:27.919 align:start position:0%
we need to add an l as a suffix number
 

00:32:27.919 --> 00:32:29.669 align:start position:0%
we need to add an l as a suffix number
we<00:32:28.080><c> can</c><00:32:28.240><c> use</c><00:32:28.399><c> an</c><00:32:28.559><c> uppercase</c><00:32:29.200><c> or</c>

00:32:29.669 --> 00:32:29.679 align:start position:0%
we can use an uppercase or
 

00:32:29.679 --> 00:32:31.830 align:start position:0%
we can use an uppercase or
a<00:32:29.840><c> lowercase</c><00:32:30.399><c> l</c><00:32:30.880><c> but</c><00:32:31.120><c> as</c><00:32:31.279><c> you</c><00:32:31.360><c> can</c><00:32:31.519><c> see</c><00:32:31.679><c> a</c>

00:32:31.830 --> 00:32:31.840 align:start position:0%
a lowercase l but as you can see a
 

00:32:31.840 --> 00:32:33.750 align:start position:0%
a lowercase l but as you can see a
lowercase<00:32:32.399><c> l</c><00:32:32.559><c> kinda</c><00:32:32.799><c> looks</c><00:32:33.039><c> like</c><00:32:33.200><c> a</c><00:32:33.360><c> one</c>

00:32:33.750 --> 00:32:33.760 align:start position:0%
lowercase l kinda looks like a one
 

00:32:33.760 --> 00:32:37.350 align:start position:0%
lowercase l kinda looks like a one
so<00:32:34.320><c> it's</c><00:32:34.720><c> better</c><00:32:34.960><c> to</c><00:32:35.120><c> use</c><00:32:35.600><c> a</c><00:32:35.840><c> capital</c><00:32:36.399><c> l</c>

00:32:37.350 --> 00:32:37.360 align:start position:0%
so it's better to use a capital l
 

00:32:37.360 --> 00:32:39.350 align:start position:0%
so it's better to use a capital l
so<00:32:37.519><c> these</c><00:32:37.679><c> are</c><00:32:37.840><c> examples</c><00:32:38.240><c> of</c><00:32:38.399><c> whole</c><00:32:38.640><c> numbers</c>

00:32:39.350 --> 00:32:39.360 align:start position:0%
so these are examples of whole numbers
 

00:32:39.360 --> 00:32:41.269 align:start position:0%
so these are examples of whole numbers
now<00:32:39.600><c> let's</c><00:32:39.760><c> declare</c><00:32:40.159><c> a</c><00:32:40.240><c> variable</c><00:32:40.640><c> for</c><00:32:40.880><c> storing</c>

00:32:41.269 --> 00:32:41.279 align:start position:0%
now let's declare a variable for storing
 

00:32:41.279 --> 00:32:43.350 align:start position:0%
now let's declare a variable for storing
a<00:32:41.360><c> number</c><00:32:41.600><c> with</c><00:32:41.840><c> a</c><00:32:41.919><c> decimal</c><00:32:42.399><c> point</c>

00:32:43.350 --> 00:32:43.360 align:start position:0%
a number with a decimal point
 

00:32:43.360 --> 00:32:46.710 align:start position:0%
a number with a decimal point
so<00:32:43.679><c> double</c><00:32:44.720><c> price</c><00:32:45.200><c> we</c><00:32:45.360><c> set</c><00:32:45.519><c> this</c><00:32:45.760><c> to</c><00:32:46.000><c> 10</c>

00:32:46.710 --> 00:32:46.720 align:start position:0%
so double price we set this to 10
 

00:32:46.720 --> 00:32:49.830 align:start position:0%
so double price we set this to 10
99.<00:32:47.840><c> obviously</c><00:32:48.399><c> the</c><00:32:48.640><c> double</c><00:32:48.960><c> variable</c><00:32:49.440><c> is</c><00:32:49.600><c> too</c>

00:32:49.830 --> 00:32:49.840 align:start position:0%
99. obviously the double variable is too
 

00:32:49.840 --> 00:32:52.149 align:start position:0%
99. obviously the double variable is too
large<00:32:50.159><c> for</c><00:32:50.399><c> storing</c><00:32:50.720><c> the</c><00:32:50.960><c> price</c><00:32:51.200><c> of</c><00:32:51.360><c> a</c><00:32:51.519><c> product</c>

00:32:52.149 --> 00:32:52.159 align:start position:0%
large for storing the price of a product
 

00:32:52.159 --> 00:32:55.029 align:start position:0%
large for storing the price of a product
so<00:32:52.320><c> we</c><00:32:52.399><c> can</c><00:32:52.559><c> change</c><00:32:52.799><c> this</c><00:32:52.960><c> to</c><00:32:53.120><c> float</c><00:32:54.640><c> that</c><00:32:54.880><c> is</c>

00:32:55.029 --> 00:32:55.039 align:start position:0%
so we can change this to float that is
 

00:32:55.039 --> 00:32:55.590 align:start position:0%
so we can change this to float that is
better

00:32:55.590 --> 00:32:55.600 align:start position:0%
better
 

00:32:55.600 --> 00:32:57.190 align:start position:0%
better
but<00:32:55.840><c> we</c><00:32:55.919><c> have</c><00:32:56.000><c> a</c><00:32:56.159><c> compilation</c><00:32:56.720><c> error</c><00:32:56.960><c> here</c>

00:32:57.190 --> 00:32:57.200 align:start position:0%
but we have a compilation error here
 

00:32:57.200 --> 00:32:58.870 align:start position:0%
but we have a compilation error here
take<00:32:57.440><c> a</c><00:32:57.519><c> look</c>

00:32:58.870 --> 00:32:58.880 align:start position:0%
take a look
 

00:32:58.880 --> 00:33:01.750 align:start position:0%
take a look
incompatible<00:32:59.760><c> types</c><00:33:00.399><c> required</c><00:33:00.880><c> float</c><00:33:01.519><c> but</c>

00:33:01.750 --> 00:33:01.760 align:start position:0%
incompatible types required float but
 

00:33:01.760 --> 00:33:02.389 align:start position:0%
incompatible types required float but
found

00:33:02.389 --> 00:33:02.399 align:start position:0%
found
 

00:33:02.399 --> 00:33:04.470 align:start position:0%
found
double<00:33:03.440><c> the</c><00:33:03.600><c> reason</c><00:33:03.919><c> we're</c><00:33:04.080><c> seeing</c><00:33:04.320><c> this</c>

00:33:04.470 --> 00:33:04.480 align:start position:0%
double the reason we're seeing this
 

00:33:04.480 --> 00:33:06.630 align:start position:0%
double the reason we're seeing this
error<00:33:04.799><c> is</c><00:33:04.880><c> that</c><00:33:05.039><c> by</c><00:33:05.279><c> default</c><00:33:05.760><c> java</c><00:33:06.080><c> sees</c>

00:33:06.630 --> 00:33:06.640 align:start position:0%
error is that by default java sees
 

00:33:06.640 --> 00:33:08.870 align:start position:0%
error is that by default java sees
these<00:33:06.880><c> numbers</c><00:33:07.200><c> with</c><00:33:07.360><c> a</c><00:33:07.440><c> decimal</c><00:33:07.919><c> point</c><00:33:08.480><c> as</c>

00:33:08.870 --> 00:33:08.880 align:start position:0%
these numbers with a decimal point as
 

00:33:08.880 --> 00:33:09.669 align:start position:0%
these numbers with a decimal point as
double

00:33:09.669 --> 00:33:09.679 align:start position:0%
double
 

00:33:09.679 --> 00:33:11.669 align:start position:0%
double
so<00:33:10.320><c> even</c><00:33:10.480><c> though</c><00:33:10.720><c> we</c><00:33:10.799><c> set</c><00:33:11.039><c> the</c><00:33:11.120><c> type</c><00:33:11.360><c> of</c><00:33:11.440><c> this</c>

00:33:11.669 --> 00:33:11.679 align:start position:0%
so even though we set the type of this
 

00:33:11.679 --> 00:33:12.870 align:start position:0%
so even though we set the type of this
variable<00:33:12.080><c> to</c><00:33:12.240><c> float</c>

00:33:12.870 --> 00:33:12.880 align:start position:0%
variable to float
 

00:33:12.880 --> 00:33:16.310 align:start position:0%
variable to float
java<00:33:13.279><c> sees</c><00:33:13.519><c> this</c><00:33:13.679><c> number</c><00:33:14.320><c> as</c><00:33:14.480><c> a</c><00:33:14.640><c> double</c><00:33:15.760><c> so</c>

00:33:16.310 --> 00:33:16.320 align:start position:0%
java sees this number as a double so
 

00:33:16.320 --> 00:33:19.110 align:start position:0%
java sees this number as a double so
just<00:33:16.640><c> like</c><00:33:16.880><c> how</c><00:33:17.360><c> we</c><00:33:17.600><c> added</c><00:33:17.919><c> a</c><00:33:18.080><c> suffix</c><00:33:18.720><c> number</c>

00:33:19.110 --> 00:33:19.120 align:start position:0%
just like how we added a suffix number
 

00:33:19.120 --> 00:33:20.950 align:start position:0%
just like how we added a suffix number
to<00:33:19.200><c> represent</c><00:33:19.760><c> it</c><00:33:19.919><c> as</c><00:33:20.080><c> a</c><00:33:20.240><c> long</c>

00:33:20.950 --> 00:33:20.960 align:start position:0%
to represent it as a long
 

00:33:20.960 --> 00:33:22.470 align:start position:0%
to represent it as a long
we<00:33:21.120><c> need</c><00:33:21.279><c> to</c><00:33:21.360><c> add</c><00:33:21.600><c> a</c><00:33:21.679><c> suffix</c><00:33:22.080><c> here</c><00:33:22.320><c> to</c>

00:33:22.470 --> 00:33:22.480 align:start position:0%
we need to add a suffix here to
 

00:33:22.480 --> 00:33:24.470 align:start position:0%
we need to add a suffix here to
represent<00:33:22.960><c> this</c><00:33:23.120><c> number</c><00:33:23.760><c> as</c><00:33:23.919><c> a</c><00:33:24.000><c> float</c><00:33:24.399><c> and</c>

00:33:24.470 --> 00:33:24.480 align:start position:0%
represent this number as a float and
 

00:33:24.480 --> 00:33:25.750 align:start position:0%
represent this number as a float and
that<00:33:24.720><c> suffix</c><00:33:25.200><c> is</c>

00:33:25.750 --> 00:33:25.760 align:start position:0%
that suffix is
 

00:33:25.760 --> 00:33:28.789 align:start position:0%
that suffix is
f<00:33:26.399><c> once</c><00:33:26.640><c> again</c><00:33:26.799><c> we</c><00:33:26.960><c> can</c><00:33:27.039><c> use</c><00:33:27.360><c> an</c><00:33:27.519><c> uppercase</c><00:33:28.159><c> or</c>

00:33:28.789 --> 00:33:28.799 align:start position:0%
f once again we can use an uppercase or
 

00:33:28.799 --> 00:33:32.310 align:start position:0%
f once again we can use an uppercase or
lowercase<00:33:29.360><c> f</c><00:33:30.799><c> so</c><00:33:31.440><c> these</c><00:33:31.600><c> are</c><00:33:31.760><c> examples</c><00:33:32.159><c> of</c>

00:33:32.310 --> 00:33:32.320 align:start position:0%
lowercase f so these are examples of
 

00:33:32.320 --> 00:33:32.789 align:start position:0%
lowercase f so these are examples of
numbers

00:33:32.789 --> 00:33:32.799 align:start position:0%
numbers
 

00:33:32.799 --> 00:33:36.310 align:start position:0%
numbers
now<00:33:33.600><c> let's</c><00:33:33.840><c> store</c><00:33:34.240><c> a</c><00:33:34.399><c> character</c><00:33:35.039><c> so</c><00:33:35.279><c> char</c>

00:33:36.310 --> 00:33:36.320 align:start position:0%
now let's store a character so char
 

00:33:36.320 --> 00:33:39.430 align:start position:0%
now let's store a character so char
we<00:33:36.480><c> call</c><00:33:36.720><c> it</c><00:33:36.880><c> letter</c><00:33:37.519><c> and</c><00:33:37.919><c> we</c><00:33:38.080><c> set</c><00:33:38.320><c> it</c><00:33:38.399><c> to</c>

00:33:39.430 --> 00:33:39.440 align:start position:0%
we call it letter and we set it to
 

00:33:39.440 --> 00:33:41.750 align:start position:0%
we call it letter and we set it to
a<00:33:40.240><c> note</c><00:33:40.480><c> that</c><00:33:40.559><c> we</c><00:33:40.720><c> should</c><00:33:40.960><c> always</c><00:33:41.360><c> surround</c>

00:33:41.750 --> 00:33:41.760 align:start position:0%
a note that we should always surround
 

00:33:41.760 --> 00:33:43.909 align:start position:0%
a note that we should always surround
single<00:33:42.159><c> characters</c><00:33:42.640><c> with</c><00:33:42.880><c> single</c><00:33:43.200><c> quotes</c>

00:33:43.909 --> 00:33:43.919 align:start position:0%
single characters with single quotes
 

00:33:43.919 --> 00:33:46.870 align:start position:0%
single characters with single quotes
and<00:33:44.559><c> multiple</c><00:33:45.039><c> characters</c><00:33:45.600><c> or</c><00:33:45.840><c> strings</c><00:33:46.640><c> with</c>

00:33:46.870 --> 00:33:46.880 align:start position:0%
and multiple characters or strings with
 

00:33:46.880 --> 00:33:47.830 align:start position:0%
and multiple characters or strings with
double<00:33:47.200><c> quotes</c>

00:33:47.830 --> 00:33:47.840 align:start position:0%
double quotes
 

00:33:47.840 --> 00:33:50.470 align:start position:0%
double quotes
okay<00:33:48.880><c> so</c><00:33:49.120><c> char</c><00:33:49.440><c> represents</c><00:33:50.000><c> only</c><00:33:50.240><c> one</c>

00:33:50.470 --> 00:33:50.480 align:start position:0%
okay so char represents only one
 

00:33:50.480 --> 00:33:51.269 align:start position:0%
okay so char represents only one
character

00:33:51.269 --> 00:33:51.279 align:start position:0%
character
 

00:33:51.279 --> 00:33:54.149 align:start position:0%
character
string<00:33:51.679><c> represents</c><00:33:52.320><c> a</c><00:33:52.480><c> series</c><00:33:52.880><c> of</c><00:33:53.039><c> characters</c>

00:33:54.149 --> 00:33:54.159 align:start position:0%
string represents a series of characters
 

00:33:54.159 --> 00:33:55.830 align:start position:0%
string represents a series of characters
and<00:33:54.399><c> finally</c><00:33:54.799><c> let's</c><00:33:54.960><c> see</c><00:33:55.120><c> an</c><00:33:55.279><c> example</c><00:33:55.679><c> of</c><00:33:55.760><c> a</c>

00:33:55.830 --> 00:33:55.840 align:start position:0%
and finally let's see an example of a
 

00:33:55.840 --> 00:33:56.630 align:start position:0%
and finally let's see an example of a
boolean

00:33:56.630 --> 00:33:56.640 align:start position:0%
boolean
 

00:33:56.640 --> 00:33:59.830 align:start position:0%
boolean
so<00:33:56.880><c> we</c><00:33:57.039><c> define</c><00:33:57.760><c> a</c><00:33:57.840><c> boolean</c><00:33:58.240><c> variable</c><00:33:59.279><c> called</c>

00:33:59.830 --> 00:33:59.840 align:start position:0%
so we define a boolean variable called
 

00:33:59.840 --> 00:34:02.789 align:start position:0%
so we define a boolean variable called
is<00:34:00.480><c> eligible</c><00:34:01.360><c> is</c><00:34:01.600><c> this</c><00:34:01.679><c> person</c><00:34:02.080><c> eligible</c><00:34:02.559><c> for</c>

00:34:02.789 --> 00:34:02.799 align:start position:0%
is eligible is this person eligible for
 

00:34:02.799 --> 00:34:04.310 align:start position:0%
is eligible is this person eligible for
loan<00:34:03.120><c> or</c><00:34:03.279><c> not</c>

00:34:04.310 --> 00:34:04.320 align:start position:0%
loan or not
 

00:34:04.320 --> 00:34:07.830 align:start position:0%
loan or not
we<00:34:04.480><c> set</c><00:34:04.640><c> this</c><00:34:04.880><c> to</c><00:34:05.440><c> true</c><00:34:06.480><c> or</c><00:34:07.120><c> false</c>

00:34:07.830 --> 00:34:07.840 align:start position:0%
we set this to true or false
 

00:34:07.840 --> 00:34:10.389 align:start position:0%
we set this to true or false
these<00:34:08.159><c> are</c><00:34:08.320><c> the</c><00:34:08.480><c> boolean</c><00:34:08.879><c> values</c><00:34:10.000><c> now</c><00:34:10.159><c> note</c>

00:34:10.389 --> 00:34:10.399 align:start position:0%
these are the boolean values now note
 

00:34:10.399 --> 00:34:11.909 align:start position:0%
these are the boolean values now note
that<00:34:10.560><c> all</c><00:34:10.720><c> these</c><00:34:10.879><c> words</c><00:34:11.280><c> coded</c><00:34:11.679><c> in</c>

00:34:11.909 --> 00:34:11.919 align:start position:0%
that all these words coded in
 

00:34:11.919 --> 00:34:15.109 align:start position:0%
that all these words coded in
orange<00:34:12.399><c> are</c><00:34:12.879><c> reserved</c><00:34:13.440><c> keywords</c><00:34:14.000><c> in</c><00:34:14.159><c> java</c>

00:34:15.109 --> 00:34:15.119 align:start position:0%
orange are reserved keywords in java
 

00:34:15.119 --> 00:34:18.230 align:start position:0%
orange are reserved keywords in java
just<00:34:15.359><c> like</c><00:34:15.839><c> public</c><00:34:16.399><c> static</c><00:34:16.960><c> void</c><00:34:17.679><c> class</c>

00:34:18.230 --> 00:34:18.240 align:start position:0%
just like public static void class
 

00:34:18.240 --> 00:34:20.710 align:start position:0%
just like public static void class
package<00:34:18.800><c> these</c><00:34:19.040><c> are</c><00:34:19.280><c> all</c><00:34:19.679><c> reserved</c><00:34:20.079><c> keywords</c>

00:34:20.710 --> 00:34:20.720 align:start position:0%
package these are all reserved keywords
 

00:34:20.720 --> 00:34:22.629 align:start position:0%
package these are all reserved keywords
so<00:34:20.960><c> we</c><00:34:21.040><c> cannot</c><00:34:21.359><c> use</c><00:34:21.520><c> these</c><00:34:21.679><c> reserved</c><00:34:22.079><c> keywords</c>

00:34:22.629 --> 00:34:22.639 align:start position:0%
so we cannot use these reserved keywords
 

00:34:22.639 --> 00:34:24.869 align:start position:0%
so we cannot use these reserved keywords
to<00:34:22.800><c> name</c><00:34:23.040><c> our</c><00:34:23.440><c> variables</c><00:34:24.159><c> classes</c><00:34:24.720><c> and</c>

00:34:24.869 --> 00:34:24.879 align:start position:0%
to name our variables classes and
 

00:34:24.879 --> 00:34:31.430 align:start position:0%
to name our variables classes and
methods

00:34:31.430 --> 00:34:31.440 align:start position:0%
 
 

00:34:31.440 --> 00:34:32.869 align:start position:0%
 
in<00:34:31.520><c> the</c><00:34:31.599><c> last</c><00:34:31.839><c> tutorial</c><00:34:32.320><c> you</c><00:34:32.399><c> learned</c><00:34:32.560><c> that</c><00:34:32.720><c> we</c>

00:34:32.869 --> 00:34:32.879 align:start position:0%
in the last tutorial you learned that we
 

00:34:32.879 --> 00:34:35.030 align:start position:0%
in the last tutorial you learned that we
use<00:34:33.119><c> primitive</c><00:34:33.599><c> types</c><00:34:34.079><c> to</c><00:34:34.320><c> store</c><00:34:34.639><c> simple</c>

00:34:35.030 --> 00:34:35.040 align:start position:0%
use primitive types to store simple
 

00:34:35.040 --> 00:34:35.909 align:start position:0%
use primitive types to store simple
values<00:34:35.520><c> like</c>

00:34:35.909 --> 00:34:35.919 align:start position:0%
values like
 

00:34:35.919 --> 00:34:38.470 align:start position:0%
values like
numbers<00:34:36.720><c> boolean</c><00:34:37.119><c> values</c><00:34:37.599><c> or</c><00:34:38.079><c> single</c>

00:34:38.470 --> 00:34:38.480 align:start position:0%
numbers boolean values or single
 

00:34:38.480 --> 00:34:39.589 align:start position:0%
numbers boolean values or single
characters

00:34:39.589 --> 00:34:39.599 align:start position:0%
characters
 

00:34:39.599 --> 00:34:41.990 align:start position:0%
characters
in<00:34:39.839><c> contrast</c><00:34:40.560><c> we</c><00:34:40.720><c> use</c><00:34:40.960><c> reference</c><00:34:41.359><c> types</c><00:34:41.839><c> to</c>

00:34:41.990 --> 00:34:42.000 align:start position:0%
in contrast we use reference types to
 

00:34:42.000 --> 00:34:43.750 align:start position:0%
in contrast we use reference types to
store<00:34:42.399><c> complex</c><00:34:43.040><c> objects</c>

00:34:43.750 --> 00:34:43.760 align:start position:0%
store complex objects
 

00:34:43.760 --> 00:34:46.629 align:start position:0%
store complex objects
like<00:34:44.000><c> data</c><00:34:44.399><c> objects</c><00:34:45.040><c> or</c><00:34:45.359><c> mail</c><00:34:45.679><c> messages</c><00:34:46.399><c> these</c>

00:34:46.629 --> 00:34:46.639 align:start position:0%
like data objects or mail messages these
 

00:34:46.639 --> 00:34:47.030 align:start position:0%
like data objects or mail messages these
are

00:34:47.030 --> 00:34:47.040 align:start position:0%
are
 

00:34:47.040 --> 00:34:49.909 align:start position:0%
are
complex<00:34:47.599><c> objects</c><00:34:48.639><c> now</c><00:34:48.800><c> in</c><00:34:48.960><c> java</c><00:34:49.280><c> we</c><00:34:49.440><c> have</c>

00:34:49.909 --> 00:34:49.919 align:start position:0%
complex objects now in java we have
 

00:34:49.919 --> 00:34:51.510 align:start position:0%
complex objects now in java we have
eight<00:34:50.159><c> primitive</c><00:34:50.639><c> types</c><00:34:50.960><c> that</c><00:34:51.119><c> you</c><00:34:51.200><c> have</c><00:34:51.280><c> seen</c>

00:34:51.510 --> 00:34:51.520 align:start position:0%
eight primitive types that you have seen
 

00:34:51.520 --> 00:34:52.310 align:start position:0%
eight primitive types that you have seen
before

00:34:52.310 --> 00:34:52.320 align:start position:0%
before
 

00:34:52.320 --> 00:34:54.470 align:start position:0%
before
all<00:34:52.480><c> the</c><00:34:52.639><c> other</c><00:34:52.879><c> types</c><00:34:53.280><c> are</c><00:34:53.440><c> reference</c><00:34:53.919><c> types</c>

00:34:54.470 --> 00:34:54.480 align:start position:0%
all the other types are reference types
 

00:34:54.480 --> 00:34:57.030 align:start position:0%
all the other types are reference types
let<00:34:54.639><c> me</c><00:34:54.800><c> show</c><00:34:54.879><c> you</c><00:34:54.960><c> an</c><00:34:55.119><c> example</c>

00:34:57.030 --> 00:34:57.040 align:start position:0%
let me show you an example
 

00:34:57.040 --> 00:34:58.950 align:start position:0%
let me show you an example
so<00:34:57.440><c> here</c><00:34:57.599><c> in</c><00:34:57.680><c> this</c><00:34:57.839><c> program</c><00:34:58.480><c> first</c><00:34:58.800><c> i'm</c><00:34:58.880><c> going</c>

00:34:58.950 --> 00:34:58.960 align:start position:0%
so here in this program first i'm going
 

00:34:58.960 --> 00:35:00.950 align:start position:0%
so here in this program first i'm going
to<00:34:59.040><c> declare</c><00:34:59.440><c> a</c><00:34:59.599><c> primitive</c><00:35:00.079><c> type</c>

00:35:00.950 --> 00:35:00.960 align:start position:0%
to declare a primitive type
 

00:35:00.960 --> 00:35:04.069 align:start position:0%
to declare a primitive type
let's<00:35:01.119><c> say</c><00:35:01.760><c> byte</c><00:35:02.240><c> age</c><00:35:03.200><c> equals</c>

00:35:04.069 --> 00:35:04.079 align:start position:0%
let's say byte age equals
 

00:35:04.079 --> 00:35:07.109 align:start position:0%
let's say byte age equals
30.<00:35:05.359><c> now</c><00:35:05.760><c> declaring</c><00:35:06.240><c> and</c><00:35:06.400><c> initializing</c><00:35:07.040><c> a</c>

00:35:07.109 --> 00:35:07.119 align:start position:0%
30. now declaring and initializing a
 

00:35:07.119 --> 00:35:08.069 align:start position:0%
30. now declaring and initializing a
reference<00:35:07.599><c> type</c>

00:35:08.069 --> 00:35:08.079 align:start position:0%
reference type
 

00:35:08.079 --> 00:35:10.230 align:start position:0%
reference type
is<00:35:08.320><c> slightly</c><00:35:08.880><c> different</c><00:35:09.520><c> from</c><00:35:09.680><c> a</c><00:35:09.760><c> primitive</c>

00:35:10.230 --> 00:35:10.240 align:start position:0%
is slightly different from a primitive
 

00:35:10.240 --> 00:35:11.670 align:start position:0%
is slightly different from a primitive
type<00:35:10.480><c> let</c><00:35:10.640><c> me</c><00:35:10.800><c> show</c><00:35:11.040><c> you</c>

00:35:11.670 --> 00:35:11.680 align:start position:0%
type let me show you
 

00:35:11.680 --> 00:35:14.710 align:start position:0%
type let me show you
so<00:35:12.079><c> let's</c><00:35:12.320><c> type</c><00:35:12.720><c> date</c><00:35:14.079><c> now</c><00:35:14.240><c> here</c><00:35:14.480><c> in</c><00:35:14.560><c> this</c>

00:35:14.710 --> 00:35:14.720 align:start position:0%
so let's type date now here in this
 

00:35:14.720 --> 00:35:16.630 align:start position:0%
so let's type date now here in this
tooltip<00:35:15.200><c> box</c><00:35:15.599><c> which</c><00:35:15.920><c> is</c><00:35:16.000><c> called</c>

00:35:16.630 --> 00:35:16.640 align:start position:0%
tooltip box which is called
 

00:35:16.640 --> 00:35:18.870 align:start position:0%
tooltip box which is called
intellisense<00:35:17.680><c> we</c><00:35:17.839><c> can</c><00:35:18.000><c> see</c><00:35:18.160><c> various</c><00:35:18.480><c> classes</c>

00:35:18.870 --> 00:35:18.880 align:start position:0%
intellisense we can see various classes
 

00:35:18.880 --> 00:35:19.990 align:start position:0%
intellisense we can see various classes
that<00:35:19.040><c> have</c><00:35:19.359><c> date</c>

00:35:19.990 --> 00:35:20.000 align:start position:0%
that have date
 

00:35:20.000 --> 00:35:22.390 align:start position:0%
that have date
in<00:35:20.079><c> their</c><00:35:20.320><c> name</c><00:35:20.640><c> so</c><00:35:20.880><c> intellij</c><00:35:21.520><c> is</c><00:35:21.760><c> helping</c><00:35:22.160><c> us</c>

00:35:22.390 --> 00:35:22.400 align:start position:0%
in their name so intellij is helping us
 

00:35:22.400 --> 00:35:23.430 align:start position:0%
in their name so intellij is helping us
complete<00:35:22.880><c> our</c><00:35:23.040><c> code</c>

00:35:23.430 --> 00:35:23.440 align:start position:0%
complete our code
 

00:35:23.440 --> 00:35:26.069 align:start position:0%
complete our code
by<00:35:23.680><c> suggesting</c><00:35:24.160><c> these</c><00:35:24.400><c> class</c><00:35:24.720><c> names</c><00:35:25.760><c> now</c><00:35:25.920><c> here</c>

00:35:26.069 --> 00:35:26.079 align:start position:0%
by suggesting these class names now here
 

00:35:26.079 --> 00:35:27.270 align:start position:0%
by suggesting these class names now here
we<00:35:26.160><c> have</c><00:35:26.320><c> a</c><00:35:26.400><c> date</c><00:35:26.720><c> class</c>

00:35:27.270 --> 00:35:27.280 align:start position:0%
we have a date class
 

00:35:27.280 --> 00:35:30.470 align:start position:0%
we have a date class
in<00:35:27.359><c> this</c><00:35:27.680><c> package</c><00:35:28.480><c> java</c><00:35:29.200><c> util</c><00:35:30.079><c> so</c><00:35:30.240><c> this</c>

00:35:30.470 --> 00:35:30.480 align:start position:0%
in this package java util so this
 

00:35:30.480 --> 00:35:32.310 align:start position:0%
in this package java util so this
package<00:35:30.880><c> contains</c><00:35:31.359><c> a</c><00:35:31.440><c> lot</c><00:35:31.599><c> of</c><00:35:31.760><c> utility</c>

00:35:32.310 --> 00:35:32.320 align:start position:0%
package contains a lot of utility
 

00:35:32.320 --> 00:35:34.069 align:start position:0%
package contains a lot of utility
classes<00:35:32.800><c> that</c><00:35:32.960><c> are</c><00:35:33.040><c> useful</c><00:35:33.520><c> in</c><00:35:33.680><c> a</c><00:35:33.760><c> lot</c><00:35:33.920><c> of</c>

00:35:34.069 --> 00:35:34.079 align:start position:0%
classes that are useful in a lot of
 

00:35:34.079 --> 00:35:35.030 align:start position:0%
classes that are useful in a lot of
programs

00:35:35.030 --> 00:35:35.040 align:start position:0%
programs
 

00:35:35.040 --> 00:35:36.950 align:start position:0%
programs
we<00:35:35.280><c> also</c><00:35:35.520><c> have</c><00:35:35.680><c> a</c><00:35:35.839><c> date</c><00:35:36.079><c> class</c><00:35:36.400><c> in</c><00:35:36.560><c> a</c><00:35:36.640><c> different</c>

00:35:36.950 --> 00:35:36.960 align:start position:0%
we also have a date class in a different
 

00:35:36.960 --> 00:35:39.670 align:start position:0%
we also have a date class in a different
package<00:35:38.040><c> java.sql</c><00:35:39.119><c> or</c>

00:35:39.670 --> 00:35:39.680 align:start position:0%
package java.sql or
 

00:35:39.680 --> 00:35:41.589 align:start position:0%
package java.sql or
sql<00:35:40.079><c> which</c><00:35:40.240><c> is</c><00:35:40.400><c> used</c><00:35:40.640><c> for</c><00:35:41.119><c> programming</c>

00:35:41.589 --> 00:35:41.599 align:start position:0%
sql which is used for programming
 

00:35:41.599 --> 00:35:43.829 align:start position:0%
sql which is used for programming
databases<00:35:42.640><c> so</c><00:35:42.800><c> this</c><00:35:42.960><c> is</c><00:35:43.040><c> the</c><00:35:43.200><c> benefit</c><00:35:43.599><c> of</c>

00:35:43.829 --> 00:35:43.839 align:start position:0%
databases so this is the benefit of
 

00:35:43.839 --> 00:35:44.470 align:start position:0%
databases so this is the benefit of
packages

00:35:44.470 --> 00:35:44.480 align:start position:0%
packages
 

00:35:44.480 --> 00:35:46.310 align:start position:0%
packages
we<00:35:44.640><c> can</c><00:35:44.800><c> have</c><00:35:44.960><c> the</c><00:35:45.119><c> same</c><00:35:45.440><c> class</c><00:35:46.000><c> but</c><00:35:46.240><c> in</c>

00:35:46.310 --> 00:35:46.320 align:start position:0%
we can have the same class but in
 

00:35:46.320 --> 00:35:47.510 align:start position:0%
we can have the same class but in
different<00:35:46.720><c> packages</c>

00:35:47.510 --> 00:35:47.520 align:start position:0%
different packages
 

00:35:47.520 --> 00:35:49.990 align:start position:0%
different packages
they<00:35:47.680><c> don't</c><00:35:47.920><c> conflict</c><00:35:48.720><c> so</c><00:35:48.960><c> packages</c><00:35:49.440><c> create</c><00:35:49.839><c> a</c>

00:35:49.990 --> 00:35:50.000 align:start position:0%
they don't conflict so packages create a
 

00:35:50.000 --> 00:35:51.589 align:start position:0%
they don't conflict so packages create a
namespace<00:35:50.560><c> for</c><00:35:50.720><c> our</c><00:35:50.880><c> classes</c>

00:35:51.589 --> 00:35:51.599 align:start position:0%
namespace for our classes
 

00:35:51.599 --> 00:35:54.950 align:start position:0%
namespace for our classes
okay<00:35:52.560><c> now</c><00:35:52.800><c> in</c><00:35:52.880><c> this</c><00:35:53.119><c> case</c><00:35:53.920><c> if</c><00:35:54.079><c> we</c><00:35:54.240><c> select</c>

00:35:54.950 --> 00:35:54.960 align:start position:0%
okay now in this case if we select
 

00:35:54.960 --> 00:35:57.349 align:start position:0%
okay now in this case if we select
the<00:35:55.119><c> first</c><00:35:55.359><c> date</c><00:35:55.680><c> class</c><00:35:56.160><c> and</c><00:35:56.320><c> press</c><00:35:56.720><c> enter</c><00:35:57.119><c> or</c>

00:35:57.349 --> 00:35:57.359 align:start position:0%
the first date class and press enter or
 

00:35:57.359 --> 00:35:58.710 align:start position:0%
the first date class and press enter or
tab

00:35:58.710 --> 00:35:58.720 align:start position:0%
tab
 

00:35:58.720 --> 00:36:01.910 align:start position:0%
tab
intellij<00:35:59.599><c> automatically</c><00:36:00.160><c> adds</c><00:36:00.960><c> this</c><00:36:01.280><c> line</c>

00:36:01.910 --> 00:36:01.920 align:start position:0%
intellij automatically adds this line
 

00:36:01.920 --> 00:36:02.630 align:start position:0%
intellij automatically adds this line
for<00:36:02.079><c> us</c>

00:36:02.630 --> 00:36:02.640 align:start position:0%
for us
 

00:36:02.640 --> 00:36:06.230 align:start position:0%
for us
import<00:36:04.680><c> java.util.date</c>

00:36:06.230 --> 00:36:06.240 align:start position:0%
import java.util.date
 

00:36:06.240 --> 00:36:08.390 align:start position:0%
import java.util.date
so<00:36:06.400><c> because</c><00:36:06.720><c> currently</c><00:36:07.119><c> we</c><00:36:07.280><c> are</c><00:36:08.000><c> in</c><00:36:08.160><c> this</c>

00:36:08.390 --> 00:36:08.400 align:start position:0%
so because currently we are in this
 

00:36:08.400 --> 00:36:09.270 align:start position:0%
so because currently we are in this
package

00:36:09.270 --> 00:36:09.280 align:start position:0%
package
 

00:36:09.280 --> 00:36:11.190 align:start position:0%
package
in<00:36:09.440><c> order</c><00:36:09.680><c> to</c><00:36:09.760><c> use</c><00:36:10.000><c> a</c><00:36:10.079><c> class</c><00:36:10.560><c> from</c><00:36:10.720><c> a</c><00:36:10.800><c> different</c>

00:36:11.190 --> 00:36:11.200 align:start position:0%
in order to use a class from a different
 

00:36:11.200 --> 00:36:13.109 align:start position:0%
in order to use a class from a different
package<00:36:11.680><c> we</c><00:36:11.839><c> need</c><00:36:12.000><c> to</c><00:36:12.160><c> import</c><00:36:12.480><c> it</c>

00:36:13.109 --> 00:36:13.119 align:start position:0%
package we need to import it
 

00:36:13.119 --> 00:36:15.270 align:start position:0%
package we need to import it
so<00:36:13.280><c> here</c><00:36:13.440><c> we're</c><00:36:13.680><c> importing</c><00:36:14.000><c> the</c><00:36:14.160><c> date</c><00:36:14.400><c> class</c>

00:36:15.270 --> 00:36:15.280 align:start position:0%
so here we're importing the date class
 

00:36:15.280 --> 00:36:16.470 align:start position:0%
so here we're importing the date class
in<00:36:15.359><c> this</c><00:36:15.599><c> package</c>

00:36:16.470 --> 00:36:16.480 align:start position:0%
in this package
 

00:36:16.480 --> 00:36:18.230 align:start position:0%
in this package
we'll<00:36:16.720><c> talk</c><00:36:16.880><c> about</c><00:36:17.119><c> packages</c><00:36:17.599><c> in</c><00:36:17.680><c> more</c><00:36:17.920><c> detail</c>

00:36:18.230 --> 00:36:18.240 align:start position:0%
we'll talk about packages in more detail
 

00:36:18.240 --> 00:36:19.510 align:start position:0%
we'll talk about packages in more detail
in<00:36:18.320><c> the</c><00:36:18.400><c> future</c>

00:36:19.510 --> 00:36:19.520 align:start position:0%
in the future
 

00:36:19.520 --> 00:36:22.390 align:start position:0%
in the future
so<00:36:20.079><c> back</c><00:36:20.240><c> to</c><00:36:20.400><c> our</c><00:36:20.560><c> date</c><00:36:20.800><c> variable</c><00:36:22.000><c> let's</c><00:36:22.240><c> give</c>

00:36:22.390 --> 00:36:22.400 align:start position:0%
so back to our date variable let's give
 

00:36:22.400 --> 00:36:24.150 align:start position:0%
so back to our date variable let's give
this<00:36:22.560><c> variable</c><00:36:22.960><c> a</c><00:36:23.119><c> name</c>

00:36:24.150 --> 00:36:24.160 align:start position:0%
this variable a name
 

00:36:24.160 --> 00:36:27.190 align:start position:0%
this variable a name
like<00:36:24.480><c> now</c><00:36:25.520><c> now</c><00:36:26.000><c> we</c><00:36:26.160><c> set</c><00:36:26.400><c> this</c>

00:36:27.190 --> 00:36:27.200 align:start position:0%
like now now we set this
 

00:36:27.200 --> 00:36:29.349 align:start position:0%
like now now we set this
here<00:36:27.359><c> we</c><00:36:27.520><c> need</c><00:36:27.680><c> to</c><00:36:27.760><c> use</c><00:36:28.000><c> the</c><00:36:28.240><c> new</c><00:36:28.560><c> operator</c><00:36:29.119><c> to</c>

00:36:29.349 --> 00:36:29.359 align:start position:0%
here we need to use the new operator to
 

00:36:29.359 --> 00:36:31.430 align:start position:0%
here we need to use the new operator to
allocate<00:36:30.000><c> memory</c><00:36:30.480><c> for</c><00:36:30.640><c> this</c><00:36:30.880><c> variable</c>

00:36:31.430 --> 00:36:31.440 align:start position:0%
allocate memory for this variable
 

00:36:31.440 --> 00:36:32.710 align:start position:0%
allocate memory for this variable
and<00:36:31.520><c> this</c><00:36:31.680><c> is</c><00:36:31.760><c> one</c><00:36:31.920><c> of</c><00:36:32.000><c> the</c><00:36:32.160><c> differences</c>

00:36:32.710 --> 00:36:32.720 align:start position:0%
and this is one of the differences
 

00:36:32.720 --> 00:36:34.310 align:start position:0%
and this is one of the differences
between<00:36:33.040><c> the</c><00:36:33.200><c> primitive</c><00:36:33.760><c> and</c><00:36:33.920><c> reference</c>

00:36:34.310 --> 00:36:34.320 align:start position:0%
between the primitive and reference
 

00:36:34.320 --> 00:36:35.030 align:start position:0%
between the primitive and reference
types

00:36:35.030 --> 00:36:35.040 align:start position:0%
types
 

00:36:35.040 --> 00:36:36.710 align:start position:0%
types
when<00:36:35.200><c> declaring</c><00:36:35.599><c> primitive</c><00:36:36.079><c> types</c><00:36:36.400><c> we</c><00:36:36.560><c> don't</c>

00:36:36.710 --> 00:36:36.720 align:start position:0%
when declaring primitive types we don't
 

00:36:36.720 --> 00:36:38.230 align:start position:0%
when declaring primitive types we don't
need<00:36:36.880><c> to</c><00:36:37.040><c> allocate</c><00:36:37.520><c> memory</c>

00:36:38.230 --> 00:36:38.240 align:start position:0%
need to allocate memory
 

00:36:38.240 --> 00:36:40.470 align:start position:0%
need to allocate memory
memory<00:36:38.640><c> is</c><00:36:38.800><c> allocated</c><00:36:39.359><c> and</c><00:36:39.520><c> released</c><00:36:39.839><c> by</c><00:36:40.160><c> java</c>

00:36:40.470 --> 00:36:40.480 align:start position:0%
memory is allocated and released by java
 

00:36:40.480 --> 00:36:41.910 align:start position:0%
memory is allocated and released by java
runtime<00:36:40.960><c> environment</c>

00:36:41.910 --> 00:36:41.920 align:start position:0%
runtime environment
 

00:36:41.920 --> 00:36:43.670 align:start position:0%
runtime environment
but<00:36:42.160><c> when</c><00:36:42.320><c> dealing</c><00:36:42.640><c> with</c><00:36:42.800><c> reference</c><00:36:43.200><c> types</c><00:36:43.520><c> we</c>

00:36:43.670 --> 00:36:43.680 align:start position:0%
but when dealing with reference types we
 

00:36:43.680 --> 00:36:45.670 align:start position:0%
but when dealing with reference types we
should<00:36:44.000><c> always</c><00:36:44.400><c> allocate</c><00:36:44.880><c> memory</c><00:36:45.359><c> now</c><00:36:45.599><c> we</c>

00:36:45.670 --> 00:36:45.680 align:start position:0%
should always allocate memory now we
 

00:36:45.680 --> 00:36:47.270 align:start position:0%
should always allocate memory now we
don't<00:36:45.839><c> have</c><00:36:45.920><c> to</c><00:36:46.079><c> release</c><00:36:46.400><c> this</c><00:36:46.560><c> memory</c>

00:36:47.270 --> 00:36:47.280 align:start position:0%
don't have to release this memory
 

00:36:47.280 --> 00:36:48.710 align:start position:0%
don't have to release this memory
java<00:36:47.599><c> runtime</c><00:36:48.000><c> environment</c><00:36:48.480><c> will</c>

00:36:48.710 --> 00:36:48.720 align:start position:0%
java runtime environment will
 

00:36:48.720 --> 00:36:50.630 align:start position:0%
java runtime environment will
automatically<00:36:49.280><c> take</c><00:36:49.440><c> care</c><00:36:49.680><c> of</c><00:36:49.760><c> that</c>

00:36:50.630 --> 00:36:50.640 align:start position:0%
automatically take care of that
 

00:36:50.640 --> 00:36:52.950 align:start position:0%
automatically take care of that
so<00:36:51.200><c> we</c><00:36:51.359><c> use</c><00:36:51.520><c> the</c><00:36:51.680><c> new</c><00:36:51.920><c> operator</c><00:36:52.560><c> and</c><00:36:52.720><c> then</c>

00:36:52.950 --> 00:36:52.960 align:start position:0%
so we use the new operator and then
 

00:36:52.960 --> 00:36:54.550 align:start position:0%
so we use the new operator and then
repeat<00:36:53.440><c> the</c><00:36:53.599><c> name</c><00:36:53.760><c> of</c><00:36:53.920><c> our</c><00:36:54.079><c> class</c>

00:36:54.550 --> 00:36:54.560 align:start position:0%
repeat the name of our class
 

00:36:54.560 --> 00:36:57.270 align:start position:0%
repeat the name of our class
in<00:36:54.640><c> this</c><00:36:54.800><c> case</c><00:36:55.119><c> date</c><00:36:56.079><c> and</c><00:36:56.160><c> then</c><00:36:56.320><c> we</c><00:36:56.480><c> add</c>

00:36:57.270 --> 00:36:57.280 align:start position:0%
in this case date and then we add
 

00:36:57.280 --> 00:36:58.550 align:start position:0%
in this case date and then we add
parentheses

00:36:58.550 --> 00:36:58.560 align:start position:0%
parentheses
 

00:36:58.560 --> 00:37:01.510 align:start position:0%
parentheses
followed<00:36:58.880><c> by</c><00:36:59.040><c> a</c><00:36:59.200><c> semicolon</c><00:37:00.480><c> in</c><00:37:00.560><c> this</c><00:37:00.800><c> example</c>

00:37:01.510 --> 00:37:01.520 align:start position:0%
followed by a semicolon in this example
 

00:37:01.520 --> 00:37:03.190 align:start position:0%
followed by a semicolon in this example
this<00:37:01.760><c> variable</c><00:37:02.079><c> we</c><00:37:02.240><c> have</c><00:37:02.320><c> defined</c><00:37:02.720><c> here</c>

00:37:03.190 --> 00:37:03.200 align:start position:0%
this variable we have defined here
 

00:37:03.200 --> 00:37:06.150 align:start position:0%
this variable we have defined here
is<00:37:03.359><c> an</c><00:37:03.680><c> instance</c><00:37:04.560><c> of</c><00:37:04.640><c> the</c><00:37:04.880><c> date</c><00:37:05.200><c> class</c><00:37:06.000><c> so</c>

00:37:06.150 --> 00:37:06.160 align:start position:0%
is an instance of the date class so
 

00:37:06.160 --> 00:37:07.349 align:start position:0%
is an instance of the date class so
these<00:37:06.400><c> classes</c><00:37:06.880><c> define</c>

00:37:07.349 --> 00:37:07.359 align:start position:0%
these classes define
 

00:37:07.359 --> 00:37:10.230 align:start position:0%
these classes define
templates<00:37:07.920><c> or</c><00:37:08.400><c> blueprints</c><00:37:09.119><c> for</c><00:37:09.359><c> creating</c><00:37:09.839><c> new</c>

00:37:10.230 --> 00:37:10.240 align:start position:0%
templates or blueprints for creating new
 

00:37:10.240 --> 00:37:11.270 align:start position:0%
templates or blueprints for creating new
objects<00:37:10.880><c> new</c>

00:37:11.270 --> 00:37:11.280 align:start position:0%
objects new
 

00:37:11.280 --> 00:37:13.670 align:start position:0%
objects new
instances<00:37:12.240><c> as</c><00:37:12.480><c> another</c><00:37:12.800><c> example</c><00:37:13.280><c> we</c><00:37:13.440><c> can</c><00:37:13.599><c> have</c>

00:37:13.670 --> 00:37:13.680 align:start position:0%
instances as another example we can have
 

00:37:13.680 --> 00:37:15.190 align:start position:0%
instances as another example we can have
a<00:37:13.760><c> class</c><00:37:14.079><c> called</c><00:37:14.320><c> human</c>

00:37:15.190 --> 00:37:15.200 align:start position:0%
a class called human
 

00:37:15.200 --> 00:37:18.069 align:start position:0%
a class called human
and<00:37:15.359><c> we</c><00:37:15.440><c> can</c><00:37:15.599><c> have</c><00:37:16.000><c> objects</c><00:37:16.480><c> like</c><00:37:16.880><c> john</c><00:37:17.520><c> bob</c>

00:37:18.069 --> 00:37:18.079 align:start position:0%
and we can have objects like john bob
 

00:37:18.079 --> 00:37:19.270 align:start position:0%
and we can have objects like john bob
mary<00:37:18.480><c> and</c><00:37:18.560><c> so</c><00:37:18.800><c> on</c>

00:37:19.270 --> 00:37:19.280 align:start position:0%
mary and so on
 

00:37:19.280 --> 00:37:22.550 align:start position:0%
mary and so on
so<00:37:19.520><c> an</c><00:37:19.760><c> object</c><00:37:20.160><c> is</c><00:37:20.320><c> an</c><00:37:20.560><c> instance</c><00:37:21.040><c> of</c><00:37:21.119><c> a</c><00:37:21.280><c> class</c>

00:37:22.550 --> 00:37:22.560 align:start position:0%
so an object is an instance of a class
 

00:37:22.560 --> 00:37:25.030 align:start position:0%
so an object is an instance of a class
now<00:37:22.800><c> these</c><00:37:23.200><c> objects</c><00:37:23.680><c> or</c><00:37:24.000><c> these</c><00:37:24.240><c> classes</c><00:37:24.720><c> have</c>

00:37:25.030 --> 00:37:25.040 align:start position:0%
now these objects or these classes have
 

00:37:25.040 --> 00:37:27.190 align:start position:0%
now these objects or these classes have
members<00:37:25.440><c> that</c><00:37:25.520><c> we</c><00:37:25.680><c> can</c><00:37:25.839><c> access</c><00:37:26.240><c> using</c><00:37:26.480><c> the</c><00:37:26.720><c> dot</c>

00:37:27.190 --> 00:37:27.200 align:start position:0%
members that we can access using the dot
 

00:37:27.200 --> 00:37:30.470 align:start position:0%
members that we can access using the dot
operator<00:37:28.160><c> so</c><00:37:28.400><c> we</c><00:37:28.480><c> can</c><00:37:28.720><c> type</c><00:37:29.200><c> now</c><00:37:29.839><c> dot</c>

00:37:30.470 --> 00:37:30.480 align:start position:0%
operator so we can type now dot
 

00:37:30.480 --> 00:37:32.230 align:start position:0%
operator so we can type now dot
and<00:37:30.640><c> these</c><00:37:30.800><c> are</c><00:37:30.960><c> all</c><00:37:31.119><c> the</c><00:37:31.280><c> members</c><00:37:31.680><c> defined</c><00:37:32.160><c> in</c>

00:37:32.230 --> 00:37:32.240 align:start position:0%
and these are all the members defined in
 

00:37:32.240 --> 00:37:34.550 align:start position:0%
and these are all the members defined in
this<00:37:32.400><c> class</c><00:37:32.800><c> or</c><00:37:33.119><c> in</c><00:37:33.200><c> this</c><00:37:33.520><c> object</c>

00:37:34.550 --> 00:37:34.560 align:start position:0%
this class or in this object
 

00:37:34.560 --> 00:37:36.790 align:start position:0%
this class or in this object
for<00:37:34.720><c> example</c><00:37:35.119><c> we</c><00:37:35.200><c> have</c><00:37:35.359><c> a</c><00:37:35.520><c> method</c><00:37:36.480><c> called</c>

00:37:36.790 --> 00:37:36.800 align:start position:0%
for example we have a method called
 

00:37:36.800 --> 00:37:37.750 align:start position:0%
for example we have a method called
gettime

00:37:37.750 --> 00:37:37.760 align:start position:0%
gettime
 

00:37:37.760 --> 00:37:39.510 align:start position:0%
gettime
and<00:37:37.920><c> this</c><00:37:38.079><c> returns</c><00:37:38.480><c> the</c><00:37:38.640><c> time</c><00:37:38.960><c> component</c><00:37:39.440><c> of</c>

00:37:39.510 --> 00:37:39.520 align:start position:0%
and this returns the time component of
 

00:37:39.520 --> 00:37:41.670 align:start position:0%
and this returns the time component of
this<00:37:39.760><c> object</c><00:37:40.640><c> this</c><00:37:40.880><c> is</c><00:37:41.040><c> another</c><00:37:41.359><c> difference</c>

00:37:41.670 --> 00:37:41.680 align:start position:0%
this object this is another difference
 

00:37:41.680 --> 00:37:43.510 align:start position:0%
this object this is another difference
between<00:37:42.079><c> primitive</c><00:37:42.480><c> types</c><00:37:42.880><c> and</c><00:37:43.040><c> reference</c>

00:37:43.510 --> 00:37:43.520 align:start position:0%
between primitive types and reference
 

00:37:43.520 --> 00:37:44.069 align:start position:0%
between primitive types and reference
types

00:37:44.069 --> 00:37:44.079 align:start position:0%
types
 

00:37:44.079 --> 00:37:46.390 align:start position:0%
types
these<00:37:44.320><c> primitive</c><00:37:44.800><c> types</c><00:37:45.119><c> don't</c><00:37:45.359><c> have</c><00:37:45.599><c> members</c>

00:37:46.390 --> 00:37:46.400 align:start position:0%
these primitive types don't have members
 

00:37:46.400 --> 00:37:47.190 align:start position:0%
these primitive types don't have members
so<00:37:46.640><c> if</c><00:37:46.720><c> we</c><00:37:46.800><c> type</c>

00:37:47.190 --> 00:37:47.200 align:start position:0%
so if we type
 

00:37:47.200 --> 00:37:49.910 align:start position:0%
so if we type
age<00:37:47.760><c> dot</c><00:37:48.480><c> we</c><00:37:48.640><c> don't</c><00:37:48.800><c> see</c><00:37:48.960><c> anything</c><00:37:49.599><c> these</c>

00:37:49.910 --> 00:37:49.920 align:start position:0%
age dot we don't see anything these
 

00:37:49.920 --> 00:37:51.829 align:start position:0%
age dot we don't see anything these
items<00:37:50.240><c> you</c><00:37:50.320><c> see</c><00:37:50.480><c> here</c><00:37:50.800><c> are</c><00:37:50.960><c> not</c><00:37:51.200><c> members</c><00:37:51.599><c> of</c>

00:37:51.829 --> 00:37:51.839 align:start position:0%
items you see here are not members of
 

00:37:51.839 --> 00:37:52.390 align:start position:0%
items you see here are not members of
age

00:37:52.390 --> 00:37:52.400 align:start position:0%
age
 

00:37:52.400 --> 00:37:54.150 align:start position:0%
age
they're<00:37:52.640><c> code</c><00:37:52.880><c> snippets</c><00:37:53.359><c> which</c><00:37:53.520><c> allow</c><00:37:53.839><c> us</c><00:37:54.000><c> to</c>

00:37:54.150 --> 00:37:54.160 align:start position:0%
they're code snippets which allow us to
 

00:37:54.160 --> 00:37:55.510 align:start position:0%
they're code snippets which allow us to
quickly<00:37:54.560><c> generate</c><00:37:55.040><c> code</c>

00:37:55.510 --> 00:37:55.520 align:start position:0%
quickly generate code
 

00:37:55.520 --> 00:37:58.390 align:start position:0%
quickly generate code
for<00:37:55.680><c> example</c><00:37:56.400><c> we</c><00:37:56.560><c> can</c><00:37:56.720><c> select</c><00:37:57.280><c> 4i</c><00:37:58.079><c> and</c><00:37:58.160><c> this</c>

00:37:58.390 --> 00:37:58.400 align:start position:0%
for example we can select 4i and this
 

00:37:58.400 --> 00:38:00.069 align:start position:0%
for example we can select 4i and this
automatically<00:37:59.040><c> generates</c><00:37:59.440><c> this</c><00:37:59.599><c> block</c><00:37:59.920><c> of</c>

00:38:00.069 --> 00:38:00.079 align:start position:0%
automatically generates this block of
 

00:38:00.079 --> 00:38:00.790 align:start position:0%
automatically generates this block of
code<00:38:00.320><c> for</c><00:38:00.480><c> us</c>

00:38:00.790 --> 00:38:00.800 align:start position:0%
code for us
 

00:38:00.800 --> 00:38:03.829 align:start position:0%
code for us
we'll<00:38:00.960><c> talk</c><00:38:01.119><c> about</c><00:38:01.359><c> this</c><00:38:01.520><c> in</c><00:38:01.599><c> the</c><00:38:01.760><c> future</c><00:38:02.880><c> so</c>

00:38:03.829 --> 00:38:03.839 align:start position:0%
we'll talk about this in the future so
 

00:38:03.839 --> 00:38:05.990 align:start position:0%
we'll talk about this in the future so
this<00:38:04.079><c> h</c><00:38:04.320><c> variable</c><00:38:04.720><c> is</c><00:38:04.880><c> a</c><00:38:04.960><c> primitive</c><00:38:05.440><c> type</c><00:38:05.760><c> it's</c>

00:38:05.990 --> 00:38:06.000 align:start position:0%
this h variable is a primitive type it's
 

00:38:06.000 --> 00:38:06.950 align:start position:0%
this h variable is a primitive type it's
not<00:38:06.320><c> an</c><00:38:06.480><c> object</c>

00:38:06.950 --> 00:38:06.960 align:start position:0%
not an object
 

00:38:06.960 --> 00:38:09.109 align:start position:0%
not an object
it<00:38:07.040><c> doesn't</c><00:38:07.280><c> have</c><00:38:07.440><c> any</c><00:38:07.599><c> members</c><00:38:08.320><c> and</c><00:38:08.800><c> that's</c>

00:38:09.109 --> 00:38:09.119 align:start position:0%
it doesn't have any members and that's
 

00:38:09.119 --> 00:38:11.030 align:start position:0%
it doesn't have any members and that's
why<00:38:09.599><c> when</c><00:38:09.760><c> we</c><00:38:09.920><c> use</c><00:38:10.000><c> the</c><00:38:10.160><c> dot</c><00:38:10.480><c> operator</c><00:38:10.960><c> we</c>

00:38:11.030 --> 00:38:11.040 align:start position:0%
why when we use the dot operator we
 

00:38:11.040 --> 00:38:12.630 align:start position:0%
why when we use the dot operator we
don't<00:38:11.200><c> see</c><00:38:11.359><c> anything</c><00:38:11.680><c> here</c>

00:38:12.630 --> 00:38:12.640 align:start position:0%
don't see anything here
 

00:38:12.640 --> 00:38:14.790 align:start position:0%
don't see anything here
now<00:38:12.880><c> let's</c><00:38:13.040><c> delete</c><00:38:13.359><c> this</c><00:38:13.520><c> line</c><00:38:14.079><c> and</c><00:38:14.400><c> instead</c>

00:38:14.790 --> 00:38:14.800 align:start position:0%
now let's delete this line and instead
 

00:38:14.800 --> 00:38:17.109 align:start position:0%
now let's delete this line and instead
print<00:38:15.119><c> the</c><00:38:15.280><c> value</c><00:38:15.599><c> of</c><00:38:15.680><c> this</c><00:38:15.920><c> data</c><00:38:16.240><c> object</c>

00:38:17.109 --> 00:38:17.119 align:start position:0%
print the value of this data object
 

00:38:17.119 --> 00:38:20.150 align:start position:0%
print the value of this data object
so<00:38:17.280><c> once</c><00:38:17.520><c> again</c><00:38:17.760><c> we</c><00:38:17.839><c> can</c><00:38:18.000><c> type</c><00:38:18.640><c> system</c><00:38:19.760><c> this</c><00:38:20.000><c> is</c>

00:38:20.150 --> 00:38:20.160 align:start position:0%
so once again we can type system this is
 

00:38:20.160 --> 00:38:20.790 align:start position:0%
so once again we can type system this is
a<00:38:20.240><c> class</c>

00:38:20.790 --> 00:38:20.800 align:start position:0%
a class
 

00:38:20.800 --> 00:38:22.550 align:start position:0%
a class
so<00:38:20.960><c> we</c><00:38:21.119><c> can</c><00:38:21.200><c> use</c><00:38:21.359><c> the</c><00:38:21.440><c> dot</c><00:38:21.760><c> operator</c><00:38:22.079><c> to</c><00:38:22.240><c> access</c>

00:38:22.550 --> 00:38:22.560 align:start position:0%
so we can use the dot operator to access
 

00:38:22.560 --> 00:38:25.030 align:start position:0%
so we can use the dot operator to access
its<00:38:22.800><c> members</c><00:38:23.680><c> here</c><00:38:23.839><c> we</c><00:38:24.000><c> have</c><00:38:24.240><c> out</c><00:38:24.560><c> which</c><00:38:24.800><c> is</c><00:38:24.960><c> a</c>

00:38:25.030 --> 00:38:25.040 align:start position:0%
its members here we have out which is a
 

00:38:25.040 --> 00:38:25.829 align:start position:0%
its members here we have out which is a
field

00:38:25.829 --> 00:38:25.839 align:start position:0%
field
 

00:38:25.839 --> 00:38:27.750 align:start position:0%
field
and<00:38:26.000><c> the</c><00:38:26.160><c> type</c><00:38:26.400><c> of</c><00:38:26.480><c> this</c><00:38:26.720><c> field</c><00:38:27.200><c> is</c><00:38:27.440><c> print</c>

00:38:27.750 --> 00:38:27.760 align:start position:0%
and the type of this field is print
 

00:38:27.760 --> 00:38:28.870 align:start position:0%
and the type of this field is print
stream<00:38:28.160><c> which</c><00:38:28.400><c> is</c>

00:38:28.870 --> 00:38:28.880 align:start position:0%
stream which is
 

00:38:28.880 --> 00:38:31.430 align:start position:0%
stream which is
another<00:38:29.200><c> class</c><00:38:29.839><c> in</c><00:38:30.000><c> java</c><00:38:30.800><c> so</c><00:38:30.960><c> once</c><00:38:31.200><c> again</c><00:38:31.359><c> we</c>

00:38:31.430 --> 00:38:31.440 align:start position:0%
another class in java so once again we
 

00:38:31.440 --> 00:38:33.030 align:start position:0%
another class in java so once again we
can<00:38:31.599><c> use</c><00:38:31.839><c> a</c><00:38:31.920><c> dot</c><00:38:32.160><c> operator</c>

00:38:33.030 --> 00:38:33.040 align:start position:0%
can use a dot operator
 

00:38:33.040 --> 00:38:35.589 align:start position:0%
can use a dot operator
and<00:38:33.280><c> call</c><00:38:33.839><c> the</c><00:38:34.000><c> print</c><00:38:34.320><c> line</c><00:38:34.560><c> function</c><00:38:35.280><c> now</c><00:38:35.440><c> let</c>

00:38:35.589 --> 00:38:35.599 align:start position:0%
and call the print line function now let
 

00:38:35.599 --> 00:38:37.349 align:start position:0%
and call the print line function now let
me<00:38:35.680><c> show</c><00:38:35.839><c> you</c><00:38:35.920><c> a</c><00:38:36.079><c> very</c><00:38:36.320><c> cool</c><00:38:36.560><c> shortcut</c>

00:38:37.349 --> 00:38:37.359 align:start position:0%
me show you a very cool shortcut
 

00:38:37.359 --> 00:38:39.670 align:start position:0%
me show you a very cool shortcut
instead<00:38:37.599><c> of</c><00:38:37.760><c> typing</c><00:38:38.160><c> all</c><00:38:38.320><c> this</c><00:38:38.960><c> we</c><00:38:39.119><c> can</c><00:38:39.280><c> use</c>

00:38:39.670 --> 00:38:39.680 align:start position:0%
instead of typing all this we can use
 

00:38:39.680 --> 00:38:41.030 align:start position:0%
instead of typing all this we can use
one<00:38:39.839><c> of</c><00:38:39.920><c> these</c><00:38:40.079><c> code</c><00:38:40.400><c> snippets</c>

00:38:41.030 --> 00:38:41.040 align:start position:0%
one of these code snippets
 

00:38:41.040 --> 00:38:44.069 align:start position:0%
one of these code snippets
so<00:38:41.200><c> we</c><00:38:41.359><c> type</c><00:38:41.760><c> s</c><00:38:42.160><c> o</c><00:38:42.720><c> u</c><00:38:43.280><c> t</c>

00:38:44.069 --> 00:38:44.079 align:start position:0%
so we type s o u t
 

00:38:44.079 --> 00:38:46.470 align:start position:0%
so we type s o u t
and<00:38:44.240><c> press</c><00:38:44.800><c> tab</c><00:38:45.440><c> and</c><00:38:45.599><c> this</c><00:38:45.839><c> generates</c><00:38:46.320><c> this</c>

00:38:46.470 --> 00:38:46.480 align:start position:0%
and press tab and this generates this
 

00:38:46.480 --> 00:38:48.069 align:start position:0%
and press tab and this generates this
piece<00:38:46.720><c> of</c><00:38:46.880><c> code</c><00:38:47.119><c> for</c><00:38:47.280><c> us</c>

00:38:48.069 --> 00:38:48.079 align:start position:0%
piece of code for us
 

00:38:48.079 --> 00:38:49.670 align:start position:0%
piece of code for us
all<00:38:48.160><c> right</c><00:38:48.320><c> now</c><00:38:48.480><c> let's</c><00:38:48.640><c> pass</c><00:38:48.960><c> our</c><00:38:49.040><c> date</c><00:38:49.359><c> object</c>

00:38:49.670 --> 00:38:49.680 align:start position:0%
all right now let's pass our date object
 

00:38:49.680 --> 00:38:51.990 align:start position:0%
all right now let's pass our date object
here<00:38:50.560><c> note</c><00:38:50.800><c> that</c><00:38:50.960><c> i</c><00:38:51.040><c> have</c><00:38:51.200><c> not</c><00:38:51.440><c> surrounded</c>

00:38:51.990 --> 00:38:52.000 align:start position:0%
here note that i have not surrounded
 

00:38:52.000 --> 00:38:53.270 align:start position:0%
here note that i have not surrounded
this<00:38:52.240><c> variable</c><00:38:52.720><c> with</c>

00:38:53.270 --> 00:38:53.280 align:start position:0%
this variable with
 

00:38:53.280 --> 00:38:55.589 align:start position:0%
this variable with
double<00:38:53.680><c> quotes</c><00:38:54.320><c> because</c><00:38:54.560><c> this</c><00:38:54.720><c> is</c><00:38:54.880><c> a</c><00:38:55.040><c> string</c>

00:38:55.589 --> 00:38:55.599 align:start position:0%
double quotes because this is a string
 

00:38:55.599 --> 00:38:57.190 align:start position:0%
double quotes because this is a string
and<00:38:55.760><c> if</c><00:38:55.839><c> you</c><00:38:55.920><c> run</c><00:38:56.160><c> this</c><00:38:56.320><c> program</c><00:38:56.720><c> we'll</c><00:38:56.880><c> see</c>

00:38:57.190 --> 00:38:57.200 align:start position:0%
and if you run this program we'll see
 

00:38:57.200 --> 00:39:00.310 align:start position:0%
and if you run this program we'll see
now<00:38:58.000><c> on</c><00:38:58.079><c> the</c><00:38:58.240><c> terminal</c><00:38:59.040><c> there</c><00:38:59.280><c> you</c><00:38:59.359><c> go</c><00:39:00.160><c> we</c>

00:39:00.310 --> 00:39:00.320 align:start position:0%
now on the terminal there you go we
 

00:39:00.320 --> 00:39:01.190 align:start position:0%
now on the terminal there you go we
don't<00:39:00.400><c> want</c><00:39:00.640><c> this</c>

00:39:01.190 --> 00:39:01.200 align:start position:0%
don't want this
 

00:39:01.200 --> 00:39:03.190 align:start position:0%
don't want this
you<00:39:01.359><c> want</c><00:39:01.520><c> the</c><00:39:01.680><c> value</c><00:39:02.000><c> of</c><00:39:02.079><c> our</c><00:39:02.240><c> data</c><00:39:02.640><c> object</c>

00:39:03.190 --> 00:39:03.200 align:start position:0%
you want the value of our data object
 

00:39:03.200 --> 00:39:04.550 align:start position:0%
you want the value of our data object
not<00:39:03.440><c> a</c><00:39:03.599><c> label</c>

00:39:04.550 --> 00:39:04.560 align:start position:0%
not a label
 

00:39:04.560 --> 00:39:08.230 align:start position:0%
not a label
so<00:39:05.359><c> let's</c><00:39:05.599><c> remove</c><00:39:07.440><c> the</c><00:39:07.680><c> quotes</c>

00:39:08.230 --> 00:39:08.240 align:start position:0%
so let's remove the quotes
 

00:39:08.240 --> 00:39:11.270 align:start position:0%
so let's remove the quotes
i<00:39:08.400><c> run</c><00:39:08.560><c> the</c><00:39:08.720><c> program</c><00:39:09.040><c> again</c><00:39:10.720><c> so</c><00:39:10.880><c> here's</c><00:39:11.200><c> the</c>

00:39:11.270 --> 00:39:11.280 align:start position:0%
i run the program again so here's the
 

00:39:11.280 --> 00:39:12.310 align:start position:0%
i run the program again so here's the
current<00:39:11.520><c> date</c><00:39:11.839><c> time</c>

00:39:12.310 --> 00:39:12.320 align:start position:0%
current date time
 

00:39:12.320 --> 00:39:19.270 align:start position:0%
current date time
on<00:39:12.560><c> my</c><00:39:12.839><c> machine</c>

00:39:19.270 --> 00:39:19.280 align:start position:0%
 
 

00:39:19.280 --> 00:39:20.310 align:start position:0%
 
i've<00:39:19.359><c> learned</c><00:39:19.599><c> a</c><00:39:19.680><c> little</c><00:39:19.839><c> bit</c><00:39:20.000><c> about</c><00:39:20.160><c> the</c>

00:39:20.310 --> 00:39:20.320 align:start position:0%
i've learned a little bit about the
 

00:39:20.320 --> 00:39:22.230 align:start position:0%
i've learned a little bit about the
differences<00:39:20.800><c> between</c><00:39:21.200><c> the</c><00:39:21.359><c> primitive</c><00:39:21.839><c> and</c>

00:39:22.230 --> 00:39:22.240 align:start position:0%
differences between the primitive and
 

00:39:22.240 --> 00:39:23.349 align:start position:0%
differences between the primitive and
reference<00:39:22.640><c> types</c>

00:39:23.349 --> 00:39:23.359 align:start position:0%
reference types
 

00:39:23.359 --> 00:39:25.030 align:start position:0%
reference types
so<00:39:23.599><c> you</c><00:39:23.680><c> know</c><00:39:23.839><c> that</c><00:39:24.000><c> we</c><00:39:24.079><c> use</c><00:39:24.320><c> primitive</c><00:39:24.720><c> types</c>

00:39:25.030 --> 00:39:25.040 align:start position:0%
so you know that we use primitive types
 

00:39:25.040 --> 00:39:27.190 align:start position:0%
so you know that we use primitive types
for<00:39:25.280><c> storing</c><00:39:25.920><c> simple</c><00:39:26.320><c> values</c>

00:39:27.190 --> 00:39:27.200 align:start position:0%
for storing simple values
 

00:39:27.200 --> 00:39:29.510 align:start position:0%
for storing simple values
and<00:39:27.440><c> reference</c><00:39:27.839><c> types</c><00:39:28.079><c> for</c><00:39:28.320><c> storing</c><00:39:28.960><c> complex</c>

00:39:29.510 --> 00:39:29.520 align:start position:0%
and reference types for storing complex
 

00:39:29.520 --> 00:39:31.430 align:start position:0%
and reference types for storing complex
objects<00:39:30.160><c> but</c><00:39:30.320><c> there</c><00:39:30.480><c> is</c><00:39:30.640><c> a</c><00:39:30.800><c> very</c><00:39:31.040><c> important</c>

00:39:31.430 --> 00:39:31.440 align:start position:0%
objects but there is a very important
 

00:39:31.440 --> 00:39:33.109 align:start position:0%
objects but there is a very important
difference<00:39:31.760><c> between</c><00:39:32.079><c> these</c><00:39:32.320><c> two</c><00:39:32.640><c> categories</c>

00:39:33.109 --> 00:39:33.119 align:start position:0%
difference between these two categories
 

00:39:33.119 --> 00:39:34.470 align:start position:0%
difference between these two categories
of<00:39:33.280><c> types</c><00:39:33.680><c> in</c><00:39:33.839><c> terms</c><00:39:34.079><c> of</c>

00:39:34.470 --> 00:39:34.480 align:start position:0%
of types in terms of
 

00:39:34.480 --> 00:39:36.710 align:start position:0%
of types in terms of
memory<00:39:34.880><c> management</c><00:39:35.920><c> and</c><00:39:36.240><c> that's</c><00:39:36.480><c> what</c><00:39:36.640><c> we're</c>

00:39:36.710 --> 00:39:36.720 align:start position:0%
memory management and that's what we're
 

00:39:36.720 --> 00:39:38.710 align:start position:0%
memory management and that's what we're
going<00:39:36.800><c> to</c><00:39:36.880><c> talk</c><00:39:37.119><c> about</c><00:39:37.440><c> in</c><00:39:37.520><c> this</c><00:39:37.680><c> tutorial</c>

00:39:38.710 --> 00:39:38.720 align:start position:0%
going to talk about in this tutorial
 

00:39:38.720 --> 00:39:40.150 align:start position:0%
going to talk about in this tutorial
so<00:39:38.960><c> i'm</c><00:39:39.040><c> going</c><00:39:39.119><c> to</c><00:39:39.200><c> declare</c><00:39:39.599><c> a</c><00:39:39.760><c> primitive</c>

00:39:40.150 --> 00:39:40.160 align:start position:0%
so i'm going to declare a primitive
 

00:39:40.160 --> 00:39:43.589 align:start position:0%
so i'm going to declare a primitive
variable<00:39:41.520><c> x</c><00:39:41.920><c> and</c><00:39:42.160><c> set</c><00:39:42.320><c> it</c><00:39:42.400><c> to</c><00:39:42.560><c> one</c>

00:39:43.589 --> 00:39:43.599 align:start position:0%
variable x and set it to one
 

00:39:43.599 --> 00:39:45.349 align:start position:0%
variable x and set it to one
and<00:39:43.680><c> then</c><00:39:43.920><c> i'm</c><00:39:44.000><c> going</c><00:39:44.079><c> to</c><00:39:44.160><c> declare</c><00:39:44.960><c> another</c>

00:39:45.349 --> 00:39:45.359 align:start position:0%
and then i'm going to declare another
 

00:39:45.359 --> 00:39:46.870 align:start position:0%
and then i'm going to declare another
variable<00:39:46.160><c> like</c><00:39:46.480><c> y</c>

00:39:46.870 --> 00:39:46.880 align:start position:0%
variable like y
 

00:39:46.880 --> 00:39:50.230 align:start position:0%
variable like y
and<00:39:47.440><c> set</c><00:39:47.680><c> it</c><00:39:47.760><c> to</c><00:39:48.320><c> x</c><00:39:49.200><c> so</c><00:39:49.359><c> in</c><00:39:49.440><c> this</c><00:39:49.680><c> example</c><00:39:50.079><c> we</c>

00:39:50.230 --> 00:39:50.240 align:start position:0%
and set it to x so in this example we
 

00:39:50.240 --> 00:39:50.790 align:start position:0%
and set it to x so in this example we
have

00:39:50.790 --> 00:39:50.800 align:start position:0%
have
 

00:39:50.800 --> 00:39:52.950 align:start position:0%
have
two<00:39:50.960><c> different</c><00:39:51.280><c> variables</c><00:39:51.920><c> x</c><00:39:52.160><c> and</c><00:39:52.320><c> y</c><00:39:52.800><c> and</c>

00:39:52.950 --> 00:39:52.960 align:start position:0%
two different variables x and y and
 

00:39:52.960 --> 00:39:54.950 align:start position:0%
two different variables x and y and
these<00:39:53.200><c> two</c><00:39:53.359><c> variables</c><00:39:54.000><c> are</c><00:39:54.160><c> at</c><00:39:54.240><c> different</c>

00:39:54.950 --> 00:39:54.960 align:start position:0%
these two variables are at different
 

00:39:54.960 --> 00:39:57.670 align:start position:0%
these two variables are at different
memory<00:39:55.440><c> locations</c><00:39:56.480><c> so</c><00:39:56.720><c> they're</c><00:39:56.960><c> completely</c>

00:39:57.670 --> 00:39:57.680 align:start position:0%
memory locations so they're completely
 

00:39:57.680 --> 00:39:59.270 align:start position:0%
memory locations so they're completely
independent<00:39:58.480><c> of</c><00:39:58.640><c> each</c><00:39:58.800><c> other</c>

00:39:59.270 --> 00:39:59.280 align:start position:0%
independent of each other
 

00:39:59.280 --> 00:40:01.510 align:start position:0%
independent of each other
in<00:39:59.440><c> other</c><00:39:59.680><c> words</c><00:40:00.240><c> if</c><00:40:00.400><c> i</c><00:40:00.560><c> change</c><00:40:00.800><c> the</c><00:40:01.040><c> value</c><00:40:01.280><c> of</c>

00:40:01.510 --> 00:40:01.520 align:start position:0%
in other words if i change the value of
 

00:40:01.520 --> 00:40:02.470 align:start position:0%
in other words if i change the value of
x<00:40:02.079><c> y</c>

00:40:02.470 --> 00:40:02.480 align:start position:0%
x y
 

00:40:02.480 --> 00:40:04.470 align:start position:0%
x y
is<00:40:02.720><c> not</c><00:40:02.880><c> going</c><00:40:03.119><c> to</c><00:40:03.200><c> get</c><00:40:03.440><c> affected</c><00:40:04.000><c> let</c><00:40:04.160><c> me</c><00:40:04.319><c> show</c>

00:40:04.470 --> 00:40:04.480 align:start position:0%
is not going to get affected let me show
 

00:40:04.480 --> 00:40:05.829 align:start position:0%
is not going to get affected let me show
you<00:40:04.960><c> so</c><00:40:05.119><c> i'm</c><00:40:05.200><c> going</c><00:40:05.280><c> to</c><00:40:05.440><c> update</c>

00:40:05.829 --> 00:40:05.839 align:start position:0%
you so i'm going to update
 

00:40:05.839 --> 00:40:09.109 align:start position:0%
you so i'm going to update
x<00:40:06.400><c> to</c><00:40:06.720><c> 2</c><00:40:07.520><c> and</c><00:40:07.599><c> then</c><00:40:07.920><c> print</c><00:40:08.640><c> y</c>

00:40:09.109 --> 00:40:09.119 align:start position:0%
x to 2 and then print y
 

00:40:09.119 --> 00:40:12.550 align:start position:0%
x to 2 and then print y
so<00:40:09.359><c> s-o-u-t</c><00:40:10.560><c> tab</c><00:40:11.520><c> y</c>

00:40:12.550 --> 00:40:12.560 align:start position:0%
so s-o-u-t tab y
 

00:40:12.560 --> 00:40:15.750 align:start position:0%
so s-o-u-t tab y
let's<00:40:12.800><c> take</c><00:40:13.040><c> a</c><00:40:13.119><c> look</c><00:40:13.760><c> so</c><00:40:14.079><c> run</c>

00:40:15.750 --> 00:40:15.760 align:start position:0%
let's take a look so run
 

00:40:15.760 --> 00:40:17.910 align:start position:0%
let's take a look so run
as<00:40:15.920><c> you</c><00:40:16.000><c> can</c><00:40:16.160><c> see</c><00:40:16.480><c> y</c><00:40:16.800><c> is</c><00:40:16.960><c> not</c><00:40:17.200><c> affected</c><00:40:17.599><c> because</c>

00:40:17.910 --> 00:40:17.920 align:start position:0%
as you can see y is not affected because
 

00:40:17.920 --> 00:40:19.829 align:start position:0%
as you can see y is not affected because
x<00:40:18.160><c> and</c><00:40:18.319><c> y</c><00:40:18.720><c> are</c><00:40:18.960><c> completely</c>

00:40:19.829 --> 00:40:19.839 align:start position:0%
x and y are completely
 

00:40:19.839 --> 00:40:22.790 align:start position:0%
x and y are completely
independent<00:40:20.560><c> of</c><00:40:20.720><c> each</c><00:40:20.880><c> other</c><00:40:21.839><c> however</c><00:40:22.640><c> when</c>

00:40:22.790 --> 00:40:22.800 align:start position:0%
independent of each other however when
 

00:40:22.800 --> 00:40:23.990 align:start position:0%
independent of each other however when
we<00:40:22.960><c> use</c><00:40:23.119><c> a</c><00:40:23.200><c> reference</c><00:40:23.599><c> time</c>

00:40:23.990 --> 00:40:24.000 align:start position:0%
we use a reference time
 

00:40:24.000 --> 00:40:25.829 align:start position:0%
we use a reference time
this<00:40:24.319><c> behavior</c><00:40:24.720><c> is</c><00:40:24.880><c> different</c><00:40:25.440><c> let's</c><00:40:25.599><c> take</c><00:40:25.760><c> a</c>

00:40:25.829 --> 00:40:25.839 align:start position:0%
this behavior is different let's take a
 

00:40:25.839 --> 00:40:27.030 align:start position:0%
this behavior is different let's take a
look<00:40:26.640><c> so</c>

00:40:27.030 --> 00:40:27.040 align:start position:0%
look so
 

00:40:27.040 --> 00:40:31.910 align:start position:0%
look so
i'm<00:40:27.119><c> going</c><00:40:27.280><c> to</c><00:40:27.359><c> delete</c><00:40:27.920><c> all</c><00:40:28.079><c> the</c><00:40:28.240><c> code</c><00:40:28.480><c> here</c>

00:40:31.910 --> 00:40:31.920 align:start position:0%
 
 

00:40:31.920 --> 00:40:33.829 align:start position:0%
 
in<00:40:32.079><c> java</c><00:40:32.400><c> we</c><00:40:32.480><c> have</c><00:40:32.640><c> a</c><00:40:32.720><c> point</c><00:40:33.040><c> class</c><00:40:33.520><c> that</c><00:40:33.680><c> is</c>

00:40:33.829 --> 00:40:33.839 align:start position:0%
in java we have a point class that is
 

00:40:33.839 --> 00:40:36.829 align:start position:0%
in java we have a point class that is
defined<00:40:34.720><c> in</c><00:40:34.800><c> this</c><00:40:35.040><c> package</c>

00:40:36.829 --> 00:40:36.839 align:start position:0%
defined in this package
 

00:40:36.839 --> 00:40:38.790 align:start position:0%
defined in this package
java.awt<00:40:37.920><c> so</c>

00:40:38.790 --> 00:40:38.800 align:start position:0%
java.awt so
 

00:40:38.800 --> 00:40:41.430 align:start position:0%
java.awt so
we<00:40:38.960><c> press</c><00:40:39.280><c> enter</c><00:40:40.160><c> and</c><00:40:40.319><c> now</c><00:40:40.560><c> we</c><00:40:40.800><c> have</c><00:40:41.200><c> this</c>

00:40:41.430 --> 00:40:41.440 align:start position:0%
we press enter and now we have this
 

00:40:41.440 --> 00:40:43.510 align:start position:0%
we press enter and now we have this
import<00:40:41.760><c> statement</c><00:40:42.160><c> on</c><00:40:42.240><c> the</c><00:40:42.319><c> top</c><00:40:42.640><c> beautiful</c>

00:40:43.510 --> 00:40:43.520 align:start position:0%
import statement on the top beautiful
 

00:40:43.520 --> 00:40:46.069 align:start position:0%
import statement on the top beautiful
let's<00:40:43.760><c> declare</c><00:40:44.160><c> a</c><00:40:44.240><c> variable</c><00:40:45.119><c> like</c><00:40:45.359><c> point</c><00:40:45.680><c> one</c>

00:40:46.069 --> 00:40:46.079 align:start position:0%
let's declare a variable like point one
 

00:40:46.079 --> 00:40:47.190 align:start position:0%
let's declare a variable like point one
and<00:40:46.400><c> set</c><00:40:46.560><c> it</c><00:40:46.720><c> to</c>

00:40:47.190 --> 00:40:47.200 align:start position:0%
and set it to
 

00:40:47.200 --> 00:40:50.870 align:start position:0%
and set it to
new<00:40:47.520><c> point</c><00:40:49.599><c> here</c><00:40:49.760><c> we</c><00:40:49.920><c> can</c><00:40:50.079><c> pass</c><00:40:50.319><c> the</c><00:40:50.480><c> initial</c>

00:40:50.870 --> 00:40:50.880 align:start position:0%
new point here we can pass the initial
 

00:40:50.880 --> 00:40:51.750 align:start position:0%
new point here we can pass the initial
values<00:40:51.359><c> for</c>

00:40:51.750 --> 00:40:51.760 align:start position:0%
values for
 

00:40:51.760 --> 00:40:54.870 align:start position:0%
values for
x<00:40:52.240><c> and</c><00:40:52.480><c> y</c><00:40:53.119><c> so</c><00:40:53.280><c> i'm</c><00:40:53.359><c> going</c><00:40:53.520><c> to</c><00:40:53.599><c> pass</c><00:40:54.240><c> 1</c>

00:40:54.870 --> 00:40:54.880 align:start position:0%
x and y so i'm going to pass 1
 

00:40:54.880 --> 00:40:58.470 align:start position:0%
x and y so i'm going to pass 1
and<00:40:55.440><c> 1.</c><00:40:56.480><c> so</c><00:40:56.800><c> intellij</c><00:40:57.359><c> automatically</c><00:40:57.920><c> adds</c>

00:40:58.470 --> 00:40:58.480 align:start position:0%
and 1. so intellij automatically adds
 

00:40:58.480 --> 00:41:01.750 align:start position:0%
and 1. so intellij automatically adds
these<00:40:58.800><c> labels</c><00:40:59.280><c> x</c><00:40:59.839><c> and</c><00:41:00.000><c> y</c><00:41:01.119><c> now</c>

00:41:01.750 --> 00:41:01.760 align:start position:0%
these labels x and y now
 

00:41:01.760 --> 00:41:03.670 align:start position:0%
these labels x and y now
just<00:41:02.000><c> like</c><00:41:02.160><c> before</c><00:41:02.560><c> i'm</c><00:41:02.640><c> going</c><00:41:02.800><c> to</c><00:41:02.880><c> declare</c>

00:41:03.670 --> 00:41:03.680 align:start position:0%
just like before i'm going to declare
 

00:41:03.680 --> 00:41:04.950 align:start position:0%
just like before i'm going to declare
another<00:41:04.079><c> variable</c>

00:41:04.950 --> 00:41:04.960 align:start position:0%
another variable
 

00:41:04.960 --> 00:41:08.710 align:start position:0%
another variable
0.2<00:41:06.160><c> and</c><00:41:06.319><c> set</c><00:41:06.560><c> it</c><00:41:06.640><c> to</c><00:41:06.920><c> 0.1</c>

00:41:08.710 --> 00:41:08.720 align:start position:0%
0.2 and set it to 0.1
 

00:41:08.720 --> 00:41:10.870 align:start position:0%
0.2 and set it to 0.1
and<00:41:08.880><c> this</c><00:41:09.040><c> is</c><00:41:09.119><c> where</c><00:41:09.440><c> things</c><00:41:09.680><c> get</c><00:41:09.920><c> interesting</c>

00:41:10.870 --> 00:41:10.880 align:start position:0%
and this is where things get interesting
 

00:41:10.880 --> 00:41:13.109 align:start position:0%
and this is where things get interesting
when<00:41:11.119><c> java</c><00:41:11.520><c> runtime</c><00:41:11.920><c> environment</c><00:41:12.400><c> executes</c>

00:41:13.109 --> 00:41:13.119 align:start position:0%
when java runtime environment executes
 

00:41:13.119 --> 00:41:15.750 align:start position:0%
when java runtime environment executes
line<00:41:13.440><c> 8</c><00:41:14.240><c> first</c><00:41:14.560><c> it's</c><00:41:14.720><c> going</c><00:41:14.880><c> to</c><00:41:15.119><c> allocate</c><00:41:15.599><c> some</c>

00:41:15.750 --> 00:41:15.760 align:start position:0%
line 8 first it's going to allocate some
 

00:41:15.760 --> 00:41:16.390 align:start position:0%
line 8 first it's going to allocate some
memory

00:41:16.390 --> 00:41:16.400 align:start position:0%
memory
 

00:41:16.400 --> 00:41:19.430 align:start position:0%
memory
to<00:41:16.640><c> store</c><00:41:17.280><c> this</c><00:41:17.520><c> point</c><00:41:17.920><c> object</c><00:41:18.800><c> let's</c><00:41:19.040><c> see</c><00:41:19.280><c> the</c>

00:41:19.430 --> 00:41:19.440 align:start position:0%
to store this point object let's see the
 

00:41:19.440 --> 00:41:21.030 align:start position:0%
to store this point object let's see the
address<00:41:19.839><c> of</c><00:41:19.920><c> that</c><00:41:20.079><c> memory</c><00:41:20.480><c> location</c>

00:41:21.030 --> 00:41:21.040 align:start position:0%
address of that memory location
 

00:41:21.040 --> 00:41:24.069 align:start position:0%
address of that memory location
is<00:41:21.440><c> 100</c><00:41:22.560><c> then</c><00:41:22.800><c> it's</c><00:41:22.960><c> going</c><00:41:23.119><c> to</c><00:41:23.280><c> allocate</c>

00:41:24.069 --> 00:41:24.079 align:start position:0%
is 100 then it's going to allocate
 

00:41:24.079 --> 00:41:26.470 align:start position:0%
is 100 then it's going to allocate
a<00:41:24.240><c> separate</c><00:41:24.720><c> part</c><00:41:24.960><c> of</c><00:41:25.040><c> the</c><00:41:25.200><c> memory</c><00:41:25.920><c> and</c><00:41:26.319><c> it's</c>

00:41:26.470 --> 00:41:26.480 align:start position:0%
a separate part of the memory and it's
 

00:41:26.480 --> 00:41:27.990 align:start position:0%
a separate part of the memory and it's
going<00:41:26.640><c> to</c><00:41:26.800><c> attach</c><00:41:27.119><c> this</c><00:41:27.359><c> label</c>

00:41:27.990 --> 00:41:28.000 align:start position:0%
going to attach this label
 

00:41:28.000 --> 00:41:31.190 align:start position:0%
going to attach this label
to<00:41:28.160><c> that</c><00:41:28.319><c> memory</c><00:41:28.640><c> location</c><00:41:29.520><c> 0.1</c><00:41:30.880><c> in</c><00:41:31.040><c> that</c>

00:41:31.190 --> 00:41:31.200 align:start position:0%
to that memory location 0.1 in that
 

00:41:31.200 --> 00:41:33.190 align:start position:0%
to that memory location 0.1 in that
memory<00:41:31.599><c> location</c><00:41:32.079><c> it's</c><00:41:32.240><c> going</c><00:41:32.400><c> to</c><00:41:32.640><c> store</c>

00:41:33.190 --> 00:41:33.200 align:start position:0%
memory location it's going to store
 

00:41:33.200 --> 00:41:36.230 align:start position:0%
memory location it's going to store
the<00:41:33.520><c> address</c><00:41:34.400><c> of</c><00:41:34.560><c> our</c><00:41:34.800><c> point</c><00:41:35.200><c> object</c><00:41:35.920><c> so</c><00:41:36.079><c> this</c>

00:41:36.230 --> 00:41:36.240 align:start position:0%
the address of our point object so this
 

00:41:36.240 --> 00:41:37.589 align:start position:0%
the address of our point object so this
is<00:41:36.400><c> the</c><00:41:36.560><c> critical</c><00:41:37.040><c> difference</c>

00:41:37.589 --> 00:41:37.599 align:start position:0%
is the critical difference
 

00:41:37.599 --> 00:41:40.069 align:start position:0%
is the critical difference
between<00:41:38.079><c> primitive</c><00:41:38.720><c> and</c><00:41:38.960><c> reference</c><00:41:39.359><c> types</c>

00:41:40.069 --> 00:41:40.079 align:start position:0%
between primitive and reference types
 

00:41:40.079 --> 00:41:41.750 align:start position:0%
between primitive and reference types
when<00:41:40.240><c> we</c><00:41:40.400><c> declare</c><00:41:40.800><c> a</c><00:41:40.960><c> primitive</c><00:41:41.359><c> variable</c>

00:41:41.750 --> 00:41:41.760 align:start position:0%
when we declare a primitive variable
 

00:41:41.760 --> 00:41:42.790 align:start position:0%
when we declare a primitive variable
like<00:41:41.920><c> a</c><00:41:42.160><c> byte</c>

00:41:42.790 --> 00:41:42.800 align:start position:0%
like a byte
 

00:41:42.800 --> 00:41:44.230 align:start position:0%
like a byte
the<00:41:43.040><c> value</c><00:41:43.359><c> that</c><00:41:43.440><c> we</c><00:41:43.599><c> assigned</c><00:41:43.839><c> to</c><00:41:44.000><c> that</c>

00:41:44.230 --> 00:41:44.240 align:start position:0%
the value that we assigned to that
 

00:41:44.240 --> 00:41:46.390 align:start position:0%
the value that we assigned to that
variable<00:41:44.560><c> will</c><00:41:44.720><c> be</c><00:41:44.960><c> stored</c><00:41:45.599><c> in</c><00:41:45.760><c> that</c><00:41:46.000><c> memory</c>

00:41:46.390 --> 00:41:46.400 align:start position:0%
variable will be stored in that memory
 

00:41:46.400 --> 00:41:47.190 align:start position:0%
variable will be stored in that memory
location

00:41:47.190 --> 00:41:47.200 align:start position:0%
location
 

00:41:47.200 --> 00:41:48.870 align:start position:0%
location
but<00:41:47.359><c> when</c><00:41:47.599><c> we</c><00:41:47.680><c> use</c><00:41:47.839><c> a</c><00:41:48.000><c> reference</c><00:41:48.400><c> type</c><00:41:48.720><c> like</c>

00:41:48.870 --> 00:41:48.880 align:start position:0%
but when we use a reference type like
 

00:41:48.880 --> 00:41:51.030 align:start position:0%
but when we use a reference type like
this<00:41:49.040><c> point</c><00:41:49.359><c> class</c><00:41:50.000><c> our</c><00:41:50.240><c> variable</c><00:41:50.720><c> is</c><00:41:50.880><c> going</c>

00:41:51.030 --> 00:41:51.040 align:start position:0%
this point class our variable is going
 

00:41:51.040 --> 00:41:51.750 align:start position:0%
this point class our variable is going
to<00:41:51.200><c> hold</c><00:41:51.440><c> the</c>

00:41:51.750 --> 00:41:51.760 align:start position:0%
to hold the
 

00:41:51.760 --> 00:41:54.230 align:start position:0%
to hold the
address<00:41:52.560><c> of</c><00:41:52.640><c> that</c><00:41:52.880><c> point</c><00:41:53.280><c> object</c><00:41:53.680><c> in</c><00:41:53.760><c> memory</c>

00:41:54.230 --> 00:41:54.240 align:start position:0%
address of that point object in memory
 

00:41:54.240 --> 00:41:55.510 align:start position:0%
address of that point object in memory
not<00:41:54.480><c> the</c><00:41:54.640><c> actual</c><00:41:55.119><c> point</c>

00:41:55.510 --> 00:41:55.520 align:start position:0%
not the actual point
 

00:41:55.520 --> 00:41:58.870 align:start position:0%
not the actual point
object<00:41:56.560><c> now</c><00:41:56.720><c> look</c><00:41:56.960><c> at</c><00:41:57.119><c> line</c><00:41:57.440><c> nine</c><00:41:58.400><c> here</c><00:41:58.640><c> we're</c>

00:41:58.870 --> 00:41:58.880 align:start position:0%
object now look at line nine here we're
 

00:41:58.880 --> 00:42:00.390 align:start position:0%
object now look at line nine here we're
copying<00:41:59.280><c> the</c><00:41:59.440><c> value</c><00:41:59.760><c> that</c><00:41:59.839><c> we</c><00:42:00.000><c> have</c>

00:42:00.390 --> 00:42:00.400 align:start position:0%
copying the value that we have
 

00:42:00.400 --> 00:42:02.309 align:start position:0%
copying the value that we have
in<00:42:00.480><c> this</c><00:42:00.720><c> variable</c><00:42:01.599><c> into</c><00:42:01.839><c> this</c><00:42:02.079><c> other</c>

00:42:02.309 --> 00:42:02.319 align:start position:0%
in this variable into this other
 

00:42:02.319 --> 00:42:04.790 align:start position:0%
in this variable into this other
variable<00:42:03.200><c> so</c><00:42:03.359><c> that</c><00:42:03.599><c> value</c><00:42:04.000><c> as</c><00:42:04.160><c> you</c><00:42:04.240><c> learn</c><00:42:04.560><c> is</c>

00:42:04.790 --> 00:42:04.800 align:start position:0%
variable so that value as you learn is
 

00:42:04.800 --> 00:42:05.510 align:start position:0%
variable so that value as you learn is
not<00:42:04.960><c> the</c><00:42:05.119><c> point</c>

00:42:05.510 --> 00:42:05.520 align:start position:0%
not the point
 

00:42:05.520 --> 00:42:08.309 align:start position:0%
not the point
object<00:42:06.000><c> is</c><00:42:06.160><c> the</c><00:42:06.480><c> address</c><00:42:07.280><c> or</c><00:42:07.440><c> the</c><00:42:07.680><c> reference</c>

00:42:08.309 --> 00:42:08.319 align:start position:0%
object is the address or the reference
 

00:42:08.319 --> 00:42:10.150 align:start position:0%
object is the address or the reference
to<00:42:08.480><c> the</c><00:42:08.640><c> point</c><00:42:08.960><c> object</c><00:42:09.359><c> in</c><00:42:09.440><c> memory</c>

00:42:10.150 --> 00:42:10.160 align:start position:0%
to the point object in memory
 

00:42:10.160 --> 00:42:12.550 align:start position:0%
to the point object in memory
that<00:42:10.400><c> is</c><00:42:10.560><c> why</c><00:42:10.960><c> we</c><00:42:11.119><c> refer</c><00:42:11.440><c> to</c><00:42:11.599><c> these</c><00:42:11.920><c> types</c><00:42:12.319><c> as</c>

00:42:12.550 --> 00:42:12.560 align:start position:0%
that is why we refer to these types as
 

00:42:12.560 --> 00:42:13.430 align:start position:0%
that is why we refer to these types as
reference<00:42:12.960><c> types</c>

00:42:13.430 --> 00:42:13.440 align:start position:0%
reference types
 

00:42:13.440 --> 00:42:14.870 align:start position:0%
reference types
because<00:42:13.680><c> they</c><00:42:13.839><c> don't</c><00:42:14.000><c> store</c><00:42:14.319><c> the</c><00:42:14.480><c> actual</c>

00:42:14.870 --> 00:42:14.880 align:start position:0%
because they don't store the actual
 

00:42:14.880 --> 00:42:17.349 align:start position:0%
because they don't store the actual
values<00:42:15.440><c> they</c><00:42:15.760><c> store</c><00:42:16.240><c> a</c><00:42:16.480><c> reference</c><00:42:16.960><c> to</c><00:42:17.040><c> an</c>

00:42:17.349 --> 00:42:17.359 align:start position:0%
values they store a reference to an
 

00:42:17.359 --> 00:42:20.069 align:start position:0%
values they store a reference to an
object<00:42:18.000><c> somewhere</c><00:42:18.480><c> in</c><00:42:18.560><c> the</c><00:42:18.720><c> memory</c><00:42:19.760><c> so</c><00:42:20.000><c> in</c>

00:42:20.069 --> 00:42:20.079 align:start position:0%
object somewhere in the memory so in
 

00:42:20.079 --> 00:42:21.430 align:start position:0%
object somewhere in the memory so in
this<00:42:20.319><c> example</c>

00:42:21.430 --> 00:42:21.440 align:start position:0%
this example
 

00:42:21.440 --> 00:42:24.069 align:start position:0%
this example
point<00:42:21.760><c> one</c><00:42:22.160><c> and</c><00:42:22.319><c> point</c><00:42:22.640><c> two</c><00:42:23.200><c> are</c><00:42:23.440><c> referencing</c>

00:42:24.069 --> 00:42:24.079 align:start position:0%
point one and point two are referencing
 

00:42:24.079 --> 00:42:25.190 align:start position:0%
point one and point two are referencing
the<00:42:24.319><c> exact</c>

00:42:25.190 --> 00:42:25.200 align:start position:0%
the exact
 

00:42:25.200 --> 00:42:28.069 align:start position:0%
the exact
same<00:42:25.839><c> point</c><00:42:26.240><c> object</c><00:42:26.640><c> in</c><00:42:26.720><c> memory</c><00:42:27.119><c> we</c><00:42:27.359><c> only</c><00:42:27.599><c> have</c>

00:42:28.069 --> 00:42:28.079 align:start position:0%
same point object in memory we only have
 

00:42:28.079 --> 00:42:29.589 align:start position:0%
same point object in memory we only have
one<00:42:28.319><c> point</c><00:42:28.640><c> object</c>

00:42:29.589 --> 00:42:29.599 align:start position:0%
one point object
 

00:42:29.599 --> 00:42:31.270 align:start position:0%
one point object
so<00:42:29.760><c> these</c><00:42:30.000><c> two</c><00:42:30.160><c> variables</c><00:42:30.720><c> are</c><00:42:30.960><c> not</c>

00:42:31.270 --> 00:42:31.280 align:start position:0%
so these two variables are not
 

00:42:31.280 --> 00:42:32.630 align:start position:0%
so these two variables are not
independent<00:42:31.920><c> of</c><00:42:32.079><c> each</c><00:42:32.240><c> other</c>

00:42:32.630 --> 00:42:32.640 align:start position:0%
independent of each other
 

00:42:32.640 --> 00:42:34.710 align:start position:0%
independent of each other
they're<00:42:32.960><c> referencing</c><00:42:33.520><c> the</c><00:42:33.680><c> same</c><00:42:34.000><c> object</c><00:42:34.560><c> and</c>

00:42:34.710 --> 00:42:34.720 align:start position:0%
they're referencing the same object and
 

00:42:34.720 --> 00:42:35.670 align:start position:0%
they're referencing the same object and
that<00:42:34.960><c> means</c>

00:42:35.670 --> 00:42:35.680 align:start position:0%
that means
 

00:42:35.680 --> 00:42:37.589 align:start position:0%
that means
if<00:42:35.839><c> i</c><00:42:36.000><c> update</c><00:42:36.319><c> this</c><00:42:36.480><c> point</c><00:42:36.880><c> object</c><00:42:37.359><c> through</c>

00:42:37.589 --> 00:42:37.599 align:start position:0%
if i update this point object through
 

00:42:37.599 --> 00:42:38.950 align:start position:0%
if i update this point object through
either<00:42:37.920><c> of</c><00:42:38.000><c> these</c><00:42:38.160><c> variables</c>

00:42:38.950 --> 00:42:38.960 align:start position:0%
either of these variables
 

00:42:38.960 --> 00:42:41.270 align:start position:0%
either of these variables
the<00:42:39.280><c> changes</c><00:42:39.760><c> will</c><00:42:40.000><c> be</c><00:42:40.160><c> visible</c><00:42:40.640><c> to</c><00:42:40.800><c> the</c><00:42:40.960><c> other</c>

00:42:41.270 --> 00:42:41.280 align:start position:0%
the changes will be visible to the other
 

00:42:41.280 --> 00:42:42.950 align:start position:0%
the changes will be visible to the other
variable<00:42:41.839><c> let</c><00:42:42.000><c> me</c><00:42:42.160><c> show</c><00:42:42.319><c> you</c>

00:42:42.950 --> 00:42:42.960 align:start position:0%
variable let me show you
 

00:42:42.960 --> 00:42:45.829 align:start position:0%
variable let me show you
so<00:42:43.440><c> using</c><00:42:43.760><c> the</c><00:42:43.839><c> first</c><00:42:44.079><c> variable</c><00:42:44.720><c> point</c><00:42:45.119><c> one</c>

00:42:45.829 --> 00:42:45.839 align:start position:0%
so using the first variable point one
 

00:42:45.839 --> 00:42:47.910 align:start position:0%
so using the first variable point one
we're<00:42:46.000><c> going</c><00:42:46.160><c> to</c><00:42:46.319><c> update</c><00:42:46.640><c> the</c><00:42:46.800><c> value</c><00:42:47.119><c> of</c><00:42:47.359><c> x</c>

00:42:47.910 --> 00:42:47.920 align:start position:0%
we're going to update the value of x
 

00:42:47.920 --> 00:42:50.950 align:start position:0%
we're going to update the value of x
so<00:42:48.640><c> we</c><00:42:48.800><c> use</c><00:42:48.960><c> the</c><00:42:49.119><c> dot</c><00:42:49.440><c> operator</c><00:42:50.000><c> and</c><00:42:50.640><c> here</c><00:42:50.880><c> we</c>

00:42:50.950 --> 00:42:50.960 align:start position:0%
so we use the dot operator and here we
 

00:42:50.960 --> 00:42:51.510 align:start position:0%
so we use the dot operator and here we
can<00:42:51.119><c> see</c>

00:42:51.510 --> 00:42:51.520 align:start position:0%
can see
 

00:42:51.520 --> 00:42:54.230 align:start position:0%
can see
the<00:42:51.760><c> members</c><00:42:52.160><c> of</c><00:42:52.240><c> this</c><00:42:52.560><c> object</c><00:42:53.440><c> x</c><00:42:53.680><c> and</c><00:42:53.839><c> y</c><00:42:54.079><c> are</c>

00:42:54.230 --> 00:42:54.240 align:start position:0%
the members of this object x and y are
 

00:42:54.240 --> 00:42:55.109 align:start position:0%
the members of this object x and y are
both<00:42:54.560><c> fields</c>

00:42:55.109 --> 00:42:55.119 align:start position:0%
both fields
 

00:42:55.119 --> 00:42:57.349 align:start position:0%
both fields
which<00:42:55.359><c> are</c><00:42:55.520><c> variables</c><00:42:56.000><c> that</c><00:42:56.240><c> exist</c><00:42:56.800><c> inside</c><00:42:57.200><c> of</c>

00:42:57.349 --> 00:42:57.359 align:start position:0%
which are variables that exist inside of
 

00:42:57.359 --> 00:42:58.230 align:start position:0%
which are variables that exist inside of
a<00:42:57.440><c> class</c>

00:42:58.230 --> 00:42:58.240 align:start position:0%
a class
 

00:42:58.240 --> 00:43:00.710 align:start position:0%
a class
so<00:42:58.480><c> we</c><00:42:58.640><c> set</c><00:42:58.960><c> x</c><00:42:59.520><c> just</c><00:42:59.680><c> like</c><00:42:59.839><c> a</c><00:42:59.920><c> regular</c><00:43:00.319><c> variable</c>

00:43:00.710 --> 00:43:00.720 align:start position:0%
so we set x just like a regular variable
 

00:43:00.720 --> 00:43:02.230 align:start position:0%
so we set x just like a regular variable
to<00:43:00.880><c> a</c><00:43:00.960><c> different</c><00:43:01.359><c> value</c>

00:43:02.230 --> 00:43:02.240 align:start position:0%
to a different value
 

00:43:02.240 --> 00:43:05.670 align:start position:0%
to a different value
let's<00:43:02.400><c> say</c><00:43:03.040><c> two</c><00:43:04.480><c> now</c><00:43:04.640><c> because</c><00:43:05.040><c> point</c><00:43:05.359><c> one</c><00:43:05.599><c> and</c>

00:43:05.670 --> 00:43:05.680 align:start position:0%
let's say two now because point one and
 

00:43:05.680 --> 00:43:07.510 align:start position:0%
let's say two now because point one and
point<00:43:05.920><c> two</c><00:43:06.079><c> are</c><00:43:06.240><c> referencing</c><00:43:06.800><c> the</c><00:43:06.960><c> exact</c><00:43:07.280><c> same</c>

00:43:07.510 --> 00:43:07.520 align:start position:0%
point two are referencing the exact same
 

00:43:07.520 --> 00:43:08.550 align:start position:0%
point two are referencing the exact same
object

00:43:08.550 --> 00:43:08.560 align:start position:0%
object
 

00:43:08.560 --> 00:43:11.510 align:start position:0%
object
if<00:43:08.640><c> we</c><00:43:08.880><c> print</c><00:43:09.680><c> point</c><00:43:10.000><c> two</c><00:43:10.400><c> we're</c><00:43:10.560><c> going</c><00:43:10.720><c> to</c><00:43:10.880><c> see</c>

00:43:11.510 --> 00:43:11.520 align:start position:0%
if we print point two we're going to see
 

00:43:11.520 --> 00:43:13.589 align:start position:0%
if we print point two we're going to see
the<00:43:11.839><c> change</c><00:43:12.480><c> that</c><00:43:12.640><c> we</c><00:43:12.800><c> just</c><00:43:13.040><c> made</c>

00:43:13.589 --> 00:43:13.599 align:start position:0%
the change that we just made
 

00:43:13.599 --> 00:43:17.349 align:start position:0%
the change that we just made
take<00:43:13.760><c> a</c><00:43:13.839><c> look</c><00:43:14.400><c> so</c><00:43:14.640><c> sout</c><00:43:16.480><c> tab</c>

00:43:17.349 --> 00:43:17.359 align:start position:0%
take a look so sout tab
 

00:43:17.359 --> 00:43:20.550 align:start position:0%
take a look so sout tab
let's<00:43:17.680><c> print</c><00:43:18.400><c> point</c><00:43:19.280><c> two</c>

00:43:20.550 --> 00:43:20.560 align:start position:0%
let's print point two
 

00:43:20.560 --> 00:43:23.589 align:start position:0%
let's print point two
and<00:43:20.720><c> run</c><00:43:20.880><c> the</c><00:43:21.040><c> program</c>

00:43:23.589 --> 00:43:23.599 align:start position:0%
 
 

00:43:23.599 --> 00:43:26.710 align:start position:0%
 
there<00:43:23.839><c> you</c><00:43:23.920><c> go</c><00:43:24.160><c> so</c><00:43:24.319><c> the</c><00:43:24.560><c> change</c><00:43:24.880><c> was</c><00:43:25.119><c> visible</c>

00:43:26.710 --> 00:43:26.720 align:start position:0%
there you go so the change was visible
 

00:43:26.720 --> 00:43:29.589 align:start position:0%
there you go so the change was visible
so<00:43:27.200><c> remember</c><00:43:27.680><c> this</c><00:43:28.400><c> reference</c><00:43:28.880><c> types</c><00:43:29.359><c> are</c>

00:43:29.589 --> 00:43:29.599 align:start position:0%
so remember this reference types are
 

00:43:29.599 --> 00:43:31.270 align:start position:0%
so remember this reference types are
copied<00:43:29.920><c> by</c><00:43:30.079><c> the</c><00:43:30.240><c> references</c>

00:43:31.270 --> 00:43:31.280 align:start position:0%
copied by the references
 

00:43:31.280 --> 00:43:33.270 align:start position:0%
copied by the references
whereas<00:43:31.760><c> primitive</c><00:43:32.240><c> types</c><00:43:32.640><c> are</c><00:43:32.800><c> copied</c><00:43:33.119><c> by</c>

00:43:33.270 --> 00:43:33.280 align:start position:0%
whereas primitive types are copied by
 

00:43:33.280 --> 00:43:35.190 align:start position:0%
whereas primitive types are copied by
their<00:43:33.599><c> value</c><00:43:34.079><c> and</c><00:43:34.240><c> these</c><00:43:34.480><c> values</c><00:43:34.960><c> are</c>

00:43:35.190 --> 00:43:35.200 align:start position:0%
their value and these values are
 

00:43:35.200 --> 00:43:35.910 align:start position:0%
their value and these values are
completely

00:43:35.910 --> 00:43:35.920 align:start position:0%
completely
 

00:43:35.920 --> 00:43:43.349 align:start position:0%
completely
independent<00:43:36.560><c> of</c><00:43:36.720><c> each</c><00:43:38.839><c> other</c>

00:43:43.349 --> 00:43:43.359 align:start position:0%
 
 

00:43:43.359 --> 00:43:44.630 align:start position:0%
 
in<00:43:43.440><c> this</c><00:43:43.599><c> tutorial</c><00:43:44.000><c> we're</c><00:43:44.160><c> going</c><00:43:44.240><c> to</c><00:43:44.319><c> look</c><00:43:44.480><c> at</c>

00:43:44.630 --> 00:43:44.640 align:start position:0%
in this tutorial we're going to look at
 

00:43:44.640 --> 00:43:47.349 align:start position:0%
in this tutorial we're going to look at
strings<00:43:45.200><c> in</c><00:43:45.440><c> java</c><00:43:46.240><c> so</c><00:43:46.400><c> earlier</c><00:43:46.720><c> in</c><00:43:46.880><c> the</c><00:43:46.960><c> course</c>

00:43:47.349 --> 00:43:47.359 align:start position:0%
strings in java so earlier in the course
 

00:43:47.359 --> 00:43:48.950 align:start position:0%
strings in java so earlier in the course
we<00:43:47.599><c> printed</c><00:43:48.000><c> the</c><00:43:48.079><c> hello</c><00:43:48.319><c> world</c><00:43:48.560><c> message</c><00:43:48.880><c> on</c>

00:43:48.950 --> 00:43:48.960 align:start position:0%
we printed the hello world message on
 

00:43:48.960 --> 00:43:50.790 align:start position:0%
we printed the hello world message on
the<00:43:49.040><c> terminal</c><00:43:49.839><c> this</c><00:43:50.079><c> hello</c><00:43:50.319><c> world</c><00:43:50.560><c> that</c><00:43:50.720><c> we</c>

00:43:50.790 --> 00:43:50.800 align:start position:0%
the terminal this hello world that we
 

00:43:50.800 --> 00:43:52.390 align:start position:0%
the terminal this hello world that we
have<00:43:50.960><c> here</c><00:43:51.280><c> as</c><00:43:51.520><c> a</c><00:43:51.680><c> string</c>

00:43:52.390 --> 00:43:52.400 align:start position:0%
have here as a string
 

00:43:52.400 --> 00:43:54.870 align:start position:0%
have here as a string
or<00:43:52.640><c> more</c><00:43:52.880><c> accurately</c><00:43:53.440><c> it's</c><00:43:53.680><c> a</c><00:43:53.839><c> string</c><00:43:54.319><c> literal</c>

00:43:54.870 --> 00:43:54.880 align:start position:0%
or more accurately it's a string literal
 

00:43:54.880 --> 00:43:56.630 align:start position:0%
or more accurately it's a string literal
that<00:43:55.040><c> means</c><00:43:55.359><c> a</c><00:43:55.520><c> string</c><00:43:55.920><c> value</c>

00:43:56.630 --> 00:43:56.640 align:start position:0%
that means a string value
 

00:43:56.640 --> 00:43:58.630 align:start position:0%
that means a string value
now<00:43:56.880><c> let's</c><00:43:57.119><c> extract</c><00:43:57.520><c> this</c><00:43:57.680><c> from</c><00:43:57.920><c> here</c><00:43:58.480><c> and</c>

00:43:58.630 --> 00:43:58.640 align:start position:0%
now let's extract this from here and
 

00:43:58.640 --> 00:44:00.710 align:start position:0%
now let's extract this from here and
store<00:43:58.960><c> it</c><00:43:59.119><c> in</c><00:43:59.280><c> a</c><00:43:59.359><c> string</c><00:43:59.839><c> variable</c>

00:44:00.710 --> 00:44:00.720 align:start position:0%
store it in a string variable
 

00:44:00.720 --> 00:44:04.390 align:start position:0%
store it in a string variable
so<00:44:01.359><c> cut</c><00:44:03.040><c> just</c><00:44:03.200><c> before</c><00:44:03.520><c> this</c><00:44:03.680><c> line</c>

00:44:04.390 --> 00:44:04.400 align:start position:0%
so cut just before this line
 

00:44:04.400 --> 00:44:07.270 align:start position:0%
so cut just before this line
we<00:44:04.640><c> type</c><00:44:05.040><c> string</c><00:44:06.000><c> now</c><00:44:06.240><c> look</c><00:44:06.640><c> this</c><00:44:06.960><c> string</c>

00:44:07.270 --> 00:44:07.280 align:start position:0%
we type string now look this string
 

00:44:07.280 --> 00:44:08.470 align:start position:0%
we type string now look this string
class<00:44:07.520><c> is</c><00:44:07.599><c> defined</c>

00:44:08.470 --> 00:44:08.480 align:start position:0%
class is defined
 

00:44:08.480 --> 00:44:11.990 align:start position:0%
class is defined
in<00:44:08.920><c> java.lang</c><00:44:10.000><c> package</c><00:44:10.880><c> what</c><00:44:11.119><c> is</c><00:44:11.280><c> interesting</c>

00:44:11.990 --> 00:44:12.000 align:start position:0%
in java.lang package what is interesting
 

00:44:12.000 --> 00:44:13.510 align:start position:0%
in java.lang package what is interesting
is<00:44:12.160><c> that</c><00:44:12.560><c> we</c><00:44:12.720><c> don't</c><00:44:12.880><c> have</c><00:44:13.040><c> an</c><00:44:13.200><c> import</c>

00:44:13.510 --> 00:44:13.520 align:start position:0%
is that we don't have an import
 

00:44:13.520 --> 00:44:15.670 align:start position:0%
is that we don't have an import
statement<00:44:13.920><c> to</c><00:44:14.160><c> import</c><00:44:14.480><c> this</c><00:44:14.720><c> package</c><00:44:15.200><c> or</c>

00:44:15.670 --> 00:44:15.680 align:start position:0%
statement to import this package or
 

00:44:15.680 --> 00:44:17.670 align:start position:0%
statement to import this package or
import<00:44:16.000><c> this</c><00:44:16.240><c> class</c><00:44:16.880><c> because</c><00:44:17.119><c> this</c><00:44:17.280><c> package</c>

00:44:17.670 --> 00:44:17.680 align:start position:0%
import this class because this package
 

00:44:17.680 --> 00:44:19.349 align:start position:0%
import this class because this package
is<00:44:17.920><c> automatically</c><00:44:18.560><c> imported</c>

00:44:19.349 --> 00:44:19.359 align:start position:0%
is automatically imported
 

00:44:19.359 --> 00:44:20.790 align:start position:0%
is automatically imported
so<00:44:19.520><c> we</c><00:44:19.680><c> can</c><00:44:19.760><c> use</c><00:44:20.000><c> any</c><00:44:20.160><c> classes</c><00:44:20.560><c> that</c><00:44:20.720><c> are</c>

00:44:20.790 --> 00:44:20.800 align:start position:0%
so we can use any classes that are
 

00:44:20.800 --> 00:44:22.870 align:start position:0%
so we can use any classes that are
defined<00:44:21.520><c> in</c><00:44:21.599><c> this</c><00:44:21.839><c> package</c>

00:44:22.870 --> 00:44:22.880 align:start position:0%
defined in this package
 

00:44:22.880 --> 00:44:25.430 align:start position:0%
defined in this package
now<00:44:23.280><c> let's</c><00:44:23.520><c> declare</c><00:44:24.160><c> a</c><00:44:24.319><c> variable</c><00:44:24.800><c> called</c>

00:44:25.430 --> 00:44:25.440 align:start position:0%
now let's declare a variable called
 

00:44:25.440 --> 00:44:27.670 align:start position:0%
now let's declare a variable called
message

00:44:27.670 --> 00:44:27.680 align:start position:0%
message
 

00:44:27.680 --> 00:44:29.990 align:start position:0%
message
and<00:44:28.079><c> because</c><00:44:28.319><c> this</c><00:44:28.480><c> is</c><00:44:28.560><c> a</c><00:44:28.640><c> reference</c><00:44:29.040><c> type</c><00:44:29.839><c> we</c>

00:44:29.990 --> 00:44:30.000 align:start position:0%
and because this is a reference type we
 

00:44:30.000 --> 00:44:31.829 align:start position:0%
and because this is a reference type we
should<00:44:30.319><c> instantiate</c><00:44:30.960><c> this</c><00:44:31.119><c> variable</c><00:44:31.599><c> using</c>

00:44:31.829 --> 00:44:31.839 align:start position:0%
should instantiate this variable using
 

00:44:31.839 --> 00:44:33.030 align:start position:0%
should instantiate this variable using
the<00:44:32.000><c> new</c><00:44:32.319><c> operator</c>

00:44:33.030 --> 00:44:33.040 align:start position:0%
the new operator
 

00:44:33.040 --> 00:44:37.270 align:start position:0%
the new operator
so<00:44:33.280><c> new</c><00:44:34.240><c> string</c><00:44:35.680><c> and</c><00:44:35.839><c> here</c><00:44:36.000><c> in</c><00:44:36.160><c> parenthesis</c>

00:44:37.270 --> 00:44:37.280 align:start position:0%
so new string and here in parenthesis
 

00:44:37.280 --> 00:44:41.190 align:start position:0%
so new string and here in parenthesis
we<00:44:37.520><c> type</c><00:44:38.000><c> our</c><00:44:38.160><c> message</c><00:44:38.880><c> hello</c><00:44:39.200><c> world</c><00:44:40.160><c> however</c>

00:44:41.190 --> 00:44:41.200 align:start position:0%
we type our message hello world however
 

00:44:41.200 --> 00:44:43.430 align:start position:0%
we type our message hello world however
here<00:44:41.359><c> we</c><00:44:41.520><c> have</c><00:44:41.599><c> this</c><00:44:41.760><c> little</c><00:44:42.079><c> warning</c><00:44:43.119><c> take</c><00:44:43.359><c> a</c>

00:44:43.430 --> 00:44:43.440 align:start position:0%
here we have this little warning take a
 

00:44:43.440 --> 00:44:44.230 align:start position:0%
here we have this little warning take a
look

00:44:44.230 --> 00:44:44.240 align:start position:0%
look
 

00:44:44.240 --> 00:44:47.030 align:start position:0%
look
new<00:44:44.560><c> string</c><00:44:45.040><c> is</c><00:44:45.200><c> redundant</c><00:44:46.160><c> because</c><00:44:46.480><c> in</c><00:44:46.640><c> java</c>

00:44:47.030 --> 00:44:47.040 align:start position:0%
new string is redundant because in java
 

00:44:47.040 --> 00:44:48.230 align:start position:0%
new string is redundant because in java
there<00:44:47.200><c> is</c><00:44:47.359><c> a</c><00:44:47.440><c> shorter</c><00:44:47.839><c> way</c>

00:44:48.230 --> 00:44:48.240 align:start position:0%
there is a shorter way
 

00:44:48.240 --> 00:44:50.630 align:start position:0%
there is a shorter way
to<00:44:48.480><c> initialize</c><00:44:49.359><c> string</c><00:44:49.760><c> variables</c><00:44:50.319><c> let</c><00:44:50.480><c> me</c>

00:44:50.630 --> 00:44:50.640 align:start position:0%
to initialize string variables let me
 

00:44:50.640 --> 00:44:51.349 align:start position:0%
to initialize string variables let me
show<00:44:50.800><c> you</c>

00:44:51.349 --> 00:44:51.359 align:start position:0%
show you
 

00:44:51.359 --> 00:44:53.510 align:start position:0%
show you
so<00:44:51.599><c> instead</c><00:44:51.920><c> of</c><00:44:52.000><c> using</c><00:44:52.240><c> the</c><00:44:52.400><c> new</c><00:44:52.640><c> operator</c><00:44:53.359><c> we</c>

00:44:53.510 --> 00:44:53.520 align:start position:0%
so instead of using the new operator we
 

00:44:53.520 --> 00:44:55.510 align:start position:0%
so instead of using the new operator we
simply<00:44:53.920><c> set</c><00:44:54.079><c> this</c><00:44:54.400><c> to</c>

00:44:55.510 --> 00:44:55.520 align:start position:0%
simply set this to
 

00:44:55.520 --> 00:44:59.190 align:start position:0%
simply set this to
our<00:44:55.760><c> string</c><00:44:56.800><c> literal</c><00:44:58.319><c> now</c><00:44:58.560><c> on</c><00:44:58.720><c> the</c><00:44:58.800><c> surface</c>

00:44:59.190 --> 00:44:59.200 align:start position:0%
our string literal now on the surface
 

00:44:59.200 --> 00:45:00.870 align:start position:0%
our string literal now on the surface
this<00:44:59.440><c> looks</c><00:44:59.599><c> like</c><00:44:59.760><c> a</c><00:44:59.839><c> primitive</c><00:45:00.319><c> type</c><00:45:00.640><c> because</c>

00:45:00.870 --> 00:45:00.880 align:start position:0%
this looks like a primitive type because
 

00:45:00.880 --> 00:45:02.870 align:start position:0%
this looks like a primitive type because
we<00:45:01.040><c> are</c><00:45:01.119><c> not</c><00:45:01.280><c> using</c><00:45:01.520><c> the</c><00:45:01.680><c> new</c><00:45:01.920><c> operator</c>

00:45:02.870 --> 00:45:02.880 align:start position:0%
we are not using the new operator
 

00:45:02.880 --> 00:45:04.870 align:start position:0%
we are not using the new operator
but<00:45:03.040><c> this</c><00:45:03.280><c> is</c><00:45:03.440><c> just</c><00:45:03.680><c> a</c><00:45:03.839><c> shorthand</c><00:45:04.640><c> to</c>

00:45:04.870 --> 00:45:04.880 align:start position:0%
but this is just a shorthand to
 

00:45:04.880 --> 00:45:06.950 align:start position:0%
but this is just a shorthand to
initialize<00:45:05.680><c> a</c><00:45:05.920><c> string</c><00:45:06.240><c> variable</c>

00:45:06.950 --> 00:45:06.960 align:start position:0%
initialize a string variable
 

00:45:06.960 --> 00:45:09.430 align:start position:0%
initialize a string variable
strings<00:45:07.440><c> are</c><00:45:07.599><c> reference</c><00:45:08.079><c> types</c><00:45:08.400><c> in</c><00:45:08.560><c> java</c><00:45:09.200><c> but</c>

00:45:09.430 --> 00:45:09.440 align:start position:0%
strings are reference types in java but
 

00:45:09.440 --> 00:45:11.030 align:start position:0%
strings are reference types in java but
because<00:45:09.599><c> we</c><00:45:09.760><c> use</c><00:45:09.920><c> them</c><00:45:10.160><c> often</c><00:45:10.560><c> there</c><00:45:10.800><c> is</c><00:45:10.880><c> a</c>

00:45:11.030 --> 00:45:11.040 align:start position:0%
because we use them often there is a
 

00:45:11.040 --> 00:45:12.950 align:start position:0%
because we use them often there is a
short<00:45:11.359><c> way</c><00:45:11.599><c> to</c><00:45:11.760><c> create</c><00:45:12.079><c> them</c>

00:45:12.950 --> 00:45:12.960 align:start position:0%
short way to create them
 

00:45:12.960 --> 00:45:16.309 align:start position:0%
short way to create them
so<00:45:13.760><c> now</c><00:45:14.000><c> let's</c><00:45:14.240><c> pass</c><00:45:15.119><c> message</c><00:45:15.760><c> to</c><00:45:15.920><c> the</c><00:45:16.079><c> print</c>

00:45:16.309 --> 00:45:16.319 align:start position:0%
so now let's pass message to the print
 

00:45:16.319 --> 00:45:17.190 align:start position:0%
so now let's pass message to the print
line<00:45:16.560><c> method</c>

00:45:17.190 --> 00:45:17.200 align:start position:0%
line method
 

00:45:17.200 --> 00:45:20.150 align:start position:0%
line method
and<00:45:17.359><c> run</c><00:45:17.599><c> our</c><00:45:17.760><c> program</c><00:45:19.359><c> we</c><00:45:19.520><c> get</c><00:45:19.680><c> the</c><00:45:19.839><c> exact</c>

00:45:20.150 --> 00:45:20.160 align:start position:0%
and run our program we get the exact
 

00:45:20.160 --> 00:45:21.750 align:start position:0%
and run our program we get the exact
same<00:45:20.400><c> result</c><00:45:20.720><c> as</c><00:45:20.880><c> before</c>

00:45:21.750 --> 00:45:21.760 align:start position:0%
same result as before
 

00:45:21.760 --> 00:45:23.589 align:start position:0%
same result as before
beautiful<00:45:22.720><c> now</c><00:45:22.880><c> let's</c><00:45:23.040><c> look</c><00:45:23.200><c> at</c><00:45:23.359><c> a</c><00:45:23.440><c> few</c>

00:45:23.589 --> 00:45:23.599 align:start position:0%
beautiful now let's look at a few
 

00:45:23.599 --> 00:45:24.950 align:start position:0%
beautiful now let's look at a few
interesting<00:45:24.000><c> things</c><00:45:24.160><c> that</c><00:45:24.319><c> you</c><00:45:24.400><c> can</c><00:45:24.560><c> do</c><00:45:24.720><c> with</c>

00:45:24.950 --> 00:45:24.960 align:start position:0%
interesting things that you can do with
 

00:45:24.960 --> 00:45:25.750 align:start position:0%
interesting things that you can do with
strings

00:45:25.750 --> 00:45:25.760 align:start position:0%
strings
 

00:45:25.760 --> 00:45:28.550 align:start position:0%
strings
we<00:45:25.920><c> can</c><00:45:26.079><c> concatenate</c><00:45:26.880><c> or</c><00:45:27.440><c> join</c><00:45:27.760><c> a</c><00:45:27.920><c> string</c><00:45:28.319><c> with</c>

00:45:28.550 --> 00:45:28.560 align:start position:0%
we can concatenate or join a string with
 

00:45:28.560 --> 00:45:29.510 align:start position:0%
we can concatenate or join a string with
another<00:45:28.880><c> one</c>

00:45:29.510 --> 00:45:29.520 align:start position:0%
another one
 

00:45:29.520 --> 00:45:32.069 align:start position:0%
another one
using<00:45:29.760><c> the</c><00:45:30.000><c> plus</c><00:45:30.800><c> operator</c><00:45:31.440><c> so</c><00:45:31.599><c> here</c><00:45:31.760><c> we</c><00:45:31.920><c> can</c>

00:45:32.069 --> 00:45:32.079 align:start position:0%
using the plus operator so here we can
 

00:45:32.079 --> 00:45:33.510 align:start position:0%
using the plus operator so here we can
combine<00:45:32.560><c> this</c><00:45:32.800><c> with</c>

00:45:33.510 --> 00:45:33.520 align:start position:0%
combine this with
 

00:45:33.520 --> 00:45:36.390 align:start position:0%
combine this with
another<00:45:33.920><c> string</c><00:45:35.040><c> with</c><00:45:35.520><c> two</c><00:45:35.760><c> exclamation</c>

00:45:36.390 --> 00:45:36.400 align:start position:0%
another string with two exclamation
 

00:45:36.400 --> 00:45:38.069 align:start position:0%
another string with two exclamation
marks

00:45:38.069 --> 00:45:38.079 align:start position:0%
marks
 

00:45:38.079 --> 00:45:41.990 align:start position:0%
marks
and<00:45:39.599><c> here's</c><00:45:39.920><c> the</c><00:45:40.000><c> result</c>

00:45:41.990 --> 00:45:42.000 align:start position:0%
and here's the result
 

00:45:42.000 --> 00:45:43.990 align:start position:0%
and here's the result
now<00:45:42.160><c> because</c><00:45:42.480><c> string</c><00:45:42.880><c> is</c><00:45:42.960><c> a</c><00:45:43.040><c> class</c><00:45:43.599><c> it</c><00:45:43.760><c> has</c>

00:45:43.990 --> 00:45:44.000 align:start position:0%
now because string is a class it has
 

00:45:44.000 --> 00:45:46.069 align:start position:0%
now because string is a class it has
members<00:45:44.400><c> that</c><00:45:44.560><c> we</c><00:45:44.640><c> can</c><00:45:44.960><c> access</c><00:45:45.280><c> using</c><00:45:45.599><c> the</c><00:45:45.680><c> dot</c>

00:45:46.069 --> 00:45:46.079 align:start position:0%
members that we can access using the dot
 

00:45:46.079 --> 00:45:49.430 align:start position:0%
members that we can access using the dot
operator<00:45:46.880><c> so</c><00:45:47.119><c> we</c><00:45:47.280><c> can</c><00:45:47.440><c> type</c><00:45:47.839><c> message</c><00:45:48.640><c> dot</c>

00:45:49.430 --> 00:45:49.440 align:start position:0%
operator so we can type message dot
 

00:45:49.440 --> 00:45:51.109 align:start position:0%
operator so we can type message dot
and<00:45:49.599><c> these</c><00:45:49.839><c> are</c><00:45:50.079><c> all</c><00:45:50.240><c> the</c><00:45:50.480><c> methods</c><00:45:50.960><c> or</c>

00:45:51.109 --> 00:45:51.119 align:start position:0%
and these are all the methods or
 

00:45:51.119 --> 00:45:53.829 align:start position:0%
and these are all the methods or
functions<00:45:51.599><c> defined</c><00:45:52.319><c> in</c><00:45:52.480><c> the</c><00:45:52.640><c> string</c><00:45:52.960><c> class</c>

00:45:53.829 --> 00:45:53.839 align:start position:0%
functions defined in the string class
 

00:45:53.839 --> 00:45:55.270 align:start position:0%
functions defined in the string class
for<00:45:54.000><c> example</c><00:45:54.319><c> we</c><00:45:54.480><c> have</c><00:45:54.560><c> this</c><00:45:54.720><c> method</c><00:45:55.040><c> here</c>

00:45:55.270 --> 00:45:55.280 align:start position:0%
for example we have this method here
 

00:45:55.280 --> 00:45:57.910 align:start position:0%
for example we have this method here
ends<00:45:55.599><c> with</c><00:45:56.800><c> and</c><00:45:56.880><c> with</c><00:45:57.119><c> this</c><00:45:57.280><c> we</c><00:45:57.440><c> can</c><00:45:57.599><c> check</c><00:45:57.760><c> to</c>

00:45:57.910 --> 00:45:57.920 align:start position:0%
ends with and with this we can check to
 

00:45:57.920 --> 00:45:59.030 align:start position:0%
ends with and with this we can check to
see<00:45:58.079><c> if</c><00:45:58.240><c> our</c><00:45:58.400><c> string</c>

00:45:59.030 --> 00:45:59.040 align:start position:0%
see if our string
 

00:45:59.040 --> 00:46:01.270 align:start position:0%
see if our string
ends<00:45:59.359><c> with</c><00:45:59.520><c> a</c><00:45:59.599><c> character</c><00:46:00.160><c> or</c><00:46:00.640><c> sequence</c><00:46:01.040><c> of</c>

00:46:01.270 --> 00:46:01.280 align:start position:0%
ends with a character or sequence of
 

00:46:01.280 --> 00:46:02.150 align:start position:0%
ends with a character or sequence of
characters

00:46:02.150 --> 00:46:02.160 align:start position:0%
characters
 

00:46:02.160 --> 00:46:04.870 align:start position:0%
characters
for<00:46:02.400><c> example</c><00:46:03.200><c> here</c><00:46:03.359><c> we</c><00:46:03.440><c> can</c><00:46:03.599><c> pass</c><00:46:03.920><c> a</c><00:46:04.000><c> string</c><00:46:04.720><c> to</c>

00:46:04.870 --> 00:46:04.880 align:start position:0%
for example here we can pass a string to
 

00:46:04.880 --> 00:46:05.829 align:start position:0%
for example here we can pass a string to
see<00:46:04.960><c> if</c><00:46:05.119><c> our</c><00:46:05.359><c> message</c>

00:46:05.829 --> 00:46:05.839 align:start position:0%
see if our message
 

00:46:05.839 --> 00:46:08.870 align:start position:0%
see if our message
ends<00:46:06.240><c> with</c><00:46:06.400><c> two</c><00:46:06.640><c> exclamation</c><00:46:07.280><c> marks</c><00:46:08.160><c> now</c>

00:46:08.870 --> 00:46:08.880 align:start position:0%
ends with two exclamation marks now
 

00:46:08.880 --> 00:46:10.790 align:start position:0%
ends with two exclamation marks now
instead<00:46:09.200><c> of</c><00:46:09.359><c> printing</c><00:46:09.760><c> the</c><00:46:09.920><c> message</c><00:46:10.480><c> let's</c>

00:46:10.790 --> 00:46:10.800 align:start position:0%
instead of printing the message let's
 

00:46:10.800 --> 00:46:12.230 align:start position:0%
instead of printing the message let's
print

00:46:12.230 --> 00:46:12.240 align:start position:0%
print
 

00:46:12.240 --> 00:46:15.750 align:start position:0%
print
this<00:46:12.480><c> expression</c><00:46:13.040><c> here</c><00:46:14.880><c> so</c><00:46:15.200><c> let's</c><00:46:15.440><c> run</c><00:46:15.599><c> the</c>

00:46:15.750 --> 00:46:15.760 align:start position:0%
this expression here so let's run the
 

00:46:15.760 --> 00:46:18.069 align:start position:0%
this expression here so let's run the
program

00:46:18.069 --> 00:46:18.079 align:start position:0%
program
 

00:46:18.079 --> 00:46:20.630 align:start position:0%
program
we<00:46:18.240><c> get</c><00:46:18.480><c> true</c><00:46:19.599><c> so</c><00:46:19.760><c> this</c><00:46:20.000><c> method</c><00:46:20.240><c> that</c><00:46:20.400><c> we</c><00:46:20.480><c> have</c>

00:46:20.630 --> 00:46:20.640 align:start position:0%
we get true so this method that we have
 

00:46:20.640 --> 00:46:21.430 align:start position:0%
we get true so this method that we have
called<00:46:20.880><c> here</c>

00:46:21.430 --> 00:46:21.440 align:start position:0%
called here
 

00:46:21.440 --> 00:46:23.990 align:start position:0%
called here
returns<00:46:22.079><c> a</c><00:46:22.319><c> boolean</c><00:46:22.800><c> value</c><00:46:23.440><c> which</c><00:46:23.599><c> can</c><00:46:23.760><c> be</c>

00:46:23.990 --> 00:46:24.000 align:start position:0%
returns a boolean value which can be
 

00:46:24.000 --> 00:46:25.430 align:start position:0%
returns a boolean value which can be
true<00:46:24.240><c> or</c><00:46:24.400><c> false</c>

00:46:25.430 --> 00:46:25.440 align:start position:0%
true or false
 

00:46:25.440 --> 00:46:28.710 align:start position:0%
true or false
we<00:46:25.599><c> also</c><00:46:25.920><c> have</c><00:46:26.240><c> another</c><00:46:26.560><c> method</c><00:46:27.119><c> starts</c><00:46:27.760><c> with</c>

00:46:28.710 --> 00:46:28.720 align:start position:0%
we also have another method starts with
 

00:46:28.720 --> 00:46:31.430 align:start position:0%
we also have another method starts with
let's<00:46:28.960><c> take</c><00:46:29.119><c> a</c><00:46:29.200><c> look</c><00:46:30.720><c> now</c><00:46:30.880><c> in</c><00:46:31.040><c> this</c><00:46:31.119><c> case</c><00:46:31.359><c> we</c>

00:46:31.430 --> 00:46:31.440 align:start position:0%
let's take a look now in this case we
 

00:46:31.440 --> 00:46:33.270 align:start position:0%
let's take a look now in this case we
get<00:46:31.680><c> false</c><00:46:32.079><c> because</c><00:46:32.400><c> our</c><00:46:32.560><c> message</c><00:46:32.960><c> doesn't</c>

00:46:33.270 --> 00:46:33.280 align:start position:0%
get false because our message doesn't
 

00:46:33.280 --> 00:46:33.910 align:start position:0%
get false because our message doesn't
start

00:46:33.910 --> 00:46:33.920 align:start position:0%
start
 

00:46:33.920 --> 00:46:37.109 align:start position:0%
start
with<00:46:34.160><c> two</c><00:46:34.319><c> exclamation</c><00:46:34.960><c> marks</c><00:46:36.800><c> another</c>

00:46:37.109 --> 00:46:37.119 align:start position:0%
with two exclamation marks another
 

00:46:37.119 --> 00:46:39.109 align:start position:0%
with two exclamation marks another
useful<00:46:37.520><c> method</c><00:46:37.920><c> is</c><00:46:38.160><c> length</c>

00:46:39.109 --> 00:46:39.119 align:start position:0%
useful method is length
 

00:46:39.119 --> 00:46:41.270 align:start position:0%
useful method is length
so<00:46:39.359><c> we</c><00:46:39.440><c> can</c><00:46:39.599><c> call</c><00:46:39.839><c> that</c><00:46:40.079><c> to</c><00:46:40.240><c> get</c><00:46:40.640><c> the</c><00:46:40.800><c> length</c><00:46:41.119><c> of</c>

00:46:41.270 --> 00:46:41.280 align:start position:0%
so we can call that to get the length of
 

00:46:41.280 --> 00:46:42.309 align:start position:0%
so we can call that to get the length of
a<00:46:41.359><c> string</c><00:46:41.680><c> which</c><00:46:42.000><c> is</c>

00:46:42.309 --> 00:46:42.319 align:start position:0%
a string which is
 

00:46:42.319 --> 00:46:44.589 align:start position:0%
a string which is
the<00:46:42.560><c> number</c><00:46:42.800><c> of</c><00:46:42.960><c> characters</c><00:46:44.000><c> so</c>

00:46:44.589 --> 00:46:44.599 align:start position:0%
the number of characters so
 

00:46:44.599 --> 00:46:46.309 align:start position:0%
the number of characters so
message.length

00:46:46.309 --> 00:46:46.319 align:start position:0%
message.length
 

00:46:46.319 --> 00:46:50.470 align:start position:0%
message.length
take<00:46:46.560><c> a</c><00:46:46.640><c> look</c><00:46:48.480><c> so</c><00:46:49.280><c> in</c><00:46:49.359><c> this</c><00:46:49.520><c> string</c><00:46:49.760><c> we</c><00:46:49.920><c> have</c>

00:46:50.470 --> 00:46:50.480 align:start position:0%
take a look so in this string we have
 

00:46:50.480 --> 00:46:52.630 align:start position:0%
take a look so in this string we have
13<00:46:50.880><c> characters</c><00:46:51.839><c> and</c><00:46:51.920><c> this</c><00:46:52.079><c> is</c><00:46:52.240><c> useful</c><00:46:52.560><c> in</c>

00:46:52.630 --> 00:46:52.640 align:start position:0%
13 characters and this is useful in
 

00:46:52.640 --> 00:46:53.589 align:start position:0%
13 characters and this is useful in
situations<00:46:53.200><c> where</c>

00:46:53.589 --> 00:46:53.599 align:start position:0%
situations where
 

00:46:53.599 --> 00:46:55.109 align:start position:0%
situations where
you<00:46:53.760><c> want</c><00:46:53.839><c> to</c><00:46:54.000><c> check</c><00:46:54.240><c> the</c><00:46:54.400><c> length</c><00:46:54.720><c> of</c><00:46:54.800><c> the</c>

00:46:55.109 --> 00:46:55.119 align:start position:0%
you want to check the length of the
 

00:46:55.119 --> 00:46:57.109 align:start position:0%
you want to check the length of the
input<00:46:55.440><c> by</c><00:46:55.599><c> the</c><00:46:55.680><c> user</c><00:46:56.240><c> for</c><00:46:56.400><c> example</c><00:46:56.880><c> you</c><00:46:56.960><c> might</c>

00:46:57.109 --> 00:46:57.119 align:start position:0%
input by the user for example you might
 

00:46:57.119 --> 00:46:59.430 align:start position:0%
input by the user for example you might
have<00:46:57.280><c> a</c><00:46:57.359><c> signup</c><00:46:57.839><c> form</c><00:46:58.079><c> with</c><00:46:58.240><c> a</c><00:46:58.319><c> username</c><00:46:58.880><c> field</c>

00:46:59.430 --> 00:46:59.440 align:start position:0%
have a signup form with a username field
 

00:46:59.440 --> 00:47:00.870 align:start position:0%
have a signup form with a username field
you<00:46:59.599><c> can</c><00:46:59.760><c> check</c><00:46:59.920><c> the</c><00:47:00.079><c> length</c><00:47:00.319><c> of</c><00:47:00.480><c> someone's</c>

00:47:00.870 --> 00:47:00.880 align:start position:0%
you can check the length of someone's
 

00:47:00.880 --> 00:47:03.030 align:start position:0%
you can check the length of someone's
username<00:47:01.520><c> and</c><00:47:02.000><c> give</c><00:47:02.160><c> them</c><00:47:02.319><c> an</c><00:47:02.560><c> error</c>

00:47:03.030 --> 00:47:03.040 align:start position:0%
username and give them an error
 

00:47:03.040 --> 00:47:05.109 align:start position:0%
username and give them an error
if<00:47:03.200><c> the</c><00:47:03.359><c> username</c><00:47:03.920><c> is</c><00:47:04.079><c> longer</c><00:47:04.480><c> than</c><00:47:04.720><c> let's</c><00:47:04.880><c> say</c>

00:47:05.109 --> 00:47:05.119 align:start position:0%
if the username is longer than let's say
 

00:47:05.119 --> 00:47:06.550 align:start position:0%
if the username is longer than let's say
20<00:47:05.440><c> characters</c>

00:47:06.550 --> 00:47:06.560 align:start position:0%
20 characters
 

00:47:06.560 --> 00:47:09.270 align:start position:0%
20 characters
pretty<00:47:06.800><c> useful</c><00:47:07.760><c> we</c><00:47:08.000><c> also</c><00:47:08.319><c> have</c><00:47:08.960><c> another</c>

00:47:09.270 --> 00:47:09.280 align:start position:0%
pretty useful we also have another
 

00:47:09.280 --> 00:47:10.630 align:start position:0%
pretty useful we also have another
method<00:47:09.680><c> that</c><00:47:09.920><c> is</c>

00:47:10.630 --> 00:47:10.640 align:start position:0%
method that is
 

00:47:10.640 --> 00:47:14.230 align:start position:0%
method that is
index<00:47:11.680><c> of</c><00:47:12.640><c> and</c><00:47:12.800><c> this</c><00:47:12.960><c> returns</c><00:47:13.440><c> the</c><00:47:13.680><c> index</c>

00:47:14.230 --> 00:47:14.240 align:start position:0%
index of and this returns the index
 

00:47:14.240 --> 00:47:16.710 align:start position:0%
index of and this returns the index
of<00:47:14.400><c> the</c><00:47:14.640><c> first</c><00:47:15.040><c> occurrence</c><00:47:15.839><c> of</c><00:47:16.000><c> the</c><00:47:16.240><c> character</c>

00:47:16.710 --> 00:47:16.720 align:start position:0%
of the first occurrence of the character
 

00:47:16.720 --> 00:47:18.470 align:start position:0%
of the first occurrence of the character
or<00:47:16.880><c> the</c><00:47:17.040><c> string</c><00:47:17.280><c> that</c><00:47:17.440><c> we</c><00:47:17.599><c> pass</c><00:47:17.920><c> here</c>

00:47:18.470 --> 00:47:18.480 align:start position:0%
or the string that we pass here
 

00:47:18.480 --> 00:47:22.390 align:start position:0%
or the string that we pass here
for<00:47:18.720><c> example</c><00:47:19.119><c> if</c><00:47:19.280><c> we</c><00:47:19.359><c> pass</c><00:47:20.079><c> h</c><00:47:21.040><c> the</c><00:47:21.280><c> index</c><00:47:21.680><c> of</c><00:47:21.920><c> h</c>

00:47:22.390 --> 00:47:22.400 align:start position:0%
for example if we pass h the index of h
 

00:47:22.400 --> 00:47:25.829 align:start position:0%
for example if we pass h the index of h
is<00:47:22.559><c> zero</c><00:47:23.599><c> so</c><00:47:23.839><c> let's</c><00:47:24.079><c> run</c><00:47:24.240><c> the</c><00:47:24.400><c> program</c>

00:47:25.829 --> 00:47:25.839 align:start position:0%
is zero so let's run the program
 

00:47:25.839 --> 00:47:29.349 align:start position:0%
is zero so let's run the program
there<00:47:26.079><c> you</c><00:47:26.160><c> go</c><00:47:26.400><c> we</c><00:47:26.480><c> get</c><00:47:26.720><c> zero</c><00:47:27.440><c> if</c><00:47:27.599><c> you</c><00:47:27.760><c> pass</c><00:47:28.480><c> e</c>

00:47:29.349 --> 00:47:29.359 align:start position:0%
there you go we get zero if you pass e
 

00:47:29.359 --> 00:47:31.990 align:start position:0%
there you go we get zero if you pass e
we<00:47:29.599><c> get</c><00:47:30.160><c> one</c><00:47:30.559><c> because</c><00:47:30.880><c> the</c><00:47:31.200><c> index</c><00:47:31.760><c> of</c><00:47:31.839><c> the</c>

00:47:31.990 --> 00:47:32.000 align:start position:0%
we get one because the index of the
 

00:47:32.000 --> 00:47:32.710 align:start position:0%
we get one because the index of the
first<00:47:32.400><c> e</c>

00:47:32.710 --> 00:47:32.720 align:start position:0%
first e
 

00:47:32.720 --> 00:47:35.589 align:start position:0%
first e
in<00:47:32.800><c> this</c><00:47:32.960><c> message</c><00:47:33.440><c> is</c><00:47:34.000><c> one</c><00:47:35.040><c> now</c><00:47:35.200><c> what</c><00:47:35.359><c> if</c><00:47:35.520><c> you</c>

00:47:35.589 --> 00:47:35.599 align:start position:0%
in this message is one now what if you
 

00:47:35.599 --> 00:47:35.910 align:start position:0%
in this message is one now what if you
pass

00:47:35.910 --> 00:47:35.920 align:start position:0%
pass
 

00:47:35.920 --> 00:47:37.589 align:start position:0%
pass
a<00:47:36.079><c> character</c><00:47:36.559><c> or</c><00:47:36.720><c> a</c><00:47:36.800><c> string</c><00:47:37.119><c> that</c><00:47:37.280><c> doesn't</c>

00:47:37.589 --> 00:47:37.599 align:start position:0%
a character or a string that doesn't
 

00:47:37.599 --> 00:47:39.190 align:start position:0%
a character or a string that doesn't
exist<00:47:38.160><c> in</c><00:47:38.240><c> this</c><00:47:38.480><c> message</c>

00:47:39.190 --> 00:47:39.200 align:start position:0%
exist in this message
 

00:47:39.200 --> 00:47:44.309 align:start position:0%
exist in this message
let's<00:47:39.440><c> say</c><00:47:40.480><c> sky</c>

00:47:44.309 --> 00:47:44.319 align:start position:0%
 
 

00:47:44.319 --> 00:47:46.470 align:start position:0%
 
we<00:47:44.480><c> get</c><00:47:44.720><c> negative</c><00:47:45.119><c> one</c><00:47:45.680><c> so</c><00:47:45.839><c> with</c><00:47:46.000><c> this</c><00:47:46.160><c> method</c>

00:47:46.470 --> 00:47:46.480 align:start position:0%
we get negative one so with this method
 

00:47:46.480 --> 00:47:48.630 align:start position:0%
we get negative one so with this method
we<00:47:46.640><c> can</c><00:47:46.800><c> check</c><00:47:46.960><c> to</c><00:47:47.119><c> see</c><00:47:47.280><c> if</c><00:47:47.440><c> a</c><00:47:47.520><c> string</c><00:47:47.920><c> contains</c>

00:47:48.630 --> 00:47:48.640 align:start position:0%
we can check to see if a string contains
 

00:47:48.640 --> 00:47:51.190 align:start position:0%
we can check to see if a string contains
certain<00:47:49.040><c> characters</c><00:47:49.520><c> or</c><00:47:49.760><c> words</c><00:47:50.079><c> or</c><00:47:50.559><c> sentences</c>

00:47:51.190 --> 00:47:51.200 align:start position:0%
certain characters or words or sentences
 

00:47:51.200 --> 00:47:52.549 align:start position:0%
certain characters or words or sentences
and<00:47:51.359><c> so</c><00:47:51.520><c> on</c>

00:47:52.549 --> 00:47:52.559 align:start position:0%
and so on
 

00:47:52.559 --> 00:47:55.910 align:start position:0%
and so on
another<00:47:52.880><c> useful</c><00:47:53.200><c> method</c><00:47:53.599><c> is</c><00:47:54.079><c> replace</c><00:47:55.520><c> and</c>

00:47:55.910 --> 00:47:55.920 align:start position:0%
another useful method is replace and
 

00:47:55.920 --> 00:47:57.990 align:start position:0%
another useful method is replace and
with<00:47:56.079><c> this</c><00:47:56.240><c> we</c><00:47:56.400><c> can</c><00:47:56.559><c> replace</c><00:47:57.359><c> one</c><00:47:57.599><c> or</c><00:47:57.760><c> more</c>

00:47:57.990 --> 00:47:58.000 align:start position:0%
with this we can replace one or more
 

00:47:58.000 --> 00:47:59.589 align:start position:0%
with this we can replace one or more
characters<00:47:58.480><c> with</c><00:47:58.640><c> something</c><00:47:59.040><c> else</c>

00:47:59.589 --> 00:47:59.599 align:start position:0%
characters with something else
 

00:47:59.599 --> 00:48:02.069 align:start position:0%
characters with something else
for<00:47:59.839><c> example</c><00:48:00.480><c> we</c><00:48:00.640><c> can</c><00:48:00.800><c> replace</c><00:48:01.839><c> any</c>

00:48:02.069 --> 00:48:02.079 align:start position:0%
for example we can replace any
 

00:48:02.079 --> 00:48:06.230 align:start position:0%
for example we can replace any
exclamation<00:48:02.640><c> marks</c><00:48:04.839><c> with</c>

00:48:06.230 --> 00:48:06.240 align:start position:0%
exclamation marks with
 

00:48:06.240 --> 00:48:09.510 align:start position:0%
exclamation marks with
let's<00:48:06.400><c> say</c><00:48:06.640><c> a</c><00:48:06.720><c> store</c><00:48:08.400><c> so</c><00:48:08.559><c> this</c><00:48:08.800><c> replace</c><00:48:09.200><c> method</c>

00:48:09.510 --> 00:48:09.520 align:start position:0%
let's say a store so this replace method
 

00:48:09.520 --> 00:48:10.950 align:start position:0%
let's say a store so this replace method
has<00:48:09.760><c> two</c><00:48:10.000><c> parameters</c>

00:48:10.950 --> 00:48:10.960 align:start position:0%
has two parameters
 

00:48:10.960 --> 00:48:13.670 align:start position:0%
has two parameters
one<00:48:11.200><c> is</c><00:48:11.359><c> target</c><00:48:11.839><c> the</c><00:48:12.000><c> other</c><00:48:12.240><c> is</c><00:48:12.720><c> replacement</c>

00:48:13.670 --> 00:48:13.680 align:start position:0%
one is target the other is replacement
 

00:48:13.680 --> 00:48:15.750 align:start position:0%
one is target the other is replacement
and<00:48:13.839><c> here</c><00:48:14.000><c> we're</c><00:48:14.240><c> passing</c><00:48:14.720><c> two</c><00:48:15.040><c> values</c>

00:48:15.750 --> 00:48:15.760 align:start position:0%
and here we're passing two values
 

00:48:15.760 --> 00:48:17.829 align:start position:0%
and here we're passing two values
for<00:48:15.920><c> these</c><00:48:16.160><c> parameters</c><00:48:17.200><c> here's</c><00:48:17.520><c> the</c><00:48:17.599><c> first</c>

00:48:17.829 --> 00:48:17.839 align:start position:0%
for these parameters here's the first
 

00:48:17.839 --> 00:48:19.510 align:start position:0%
for these parameters here's the first
value<00:48:18.160><c> here's</c><00:48:18.480><c> the</c><00:48:18.559><c> second</c><00:48:18.960><c> value</c>

00:48:19.510 --> 00:48:19.520 align:start position:0%
value here's the second value
 

00:48:19.520 --> 00:48:21.349 align:start position:0%
value here's the second value
and<00:48:19.599><c> we</c><00:48:19.760><c> have</c><00:48:19.920><c> separated</c><00:48:20.400><c> these</c><00:48:20.640><c> values</c><00:48:20.960><c> using</c>

00:48:21.349 --> 00:48:21.359 align:start position:0%
and we have separated these values using
 

00:48:21.359 --> 00:48:23.190 align:start position:0%
and we have separated these values using
a<00:48:21.839><c> comma</c>

00:48:23.190 --> 00:48:23.200 align:start position:0%
a comma
 

00:48:23.200 --> 00:48:25.190 align:start position:0%
a comma
now<00:48:23.359><c> in</c><00:48:23.520><c> programming</c><00:48:24.000><c> terms</c><00:48:24.559><c> we</c><00:48:24.720><c> refer</c><00:48:25.040><c> to</c>

00:48:25.190 --> 00:48:25.200 align:start position:0%
now in programming terms we refer to
 

00:48:25.200 --> 00:48:26.390 align:start position:0%
now in programming terms we refer to
these<00:48:25.440><c> values</c><00:48:25.920><c> as</c>

00:48:26.390 --> 00:48:26.400 align:start position:0%
these values as
 

00:48:26.400 --> 00:48:28.309 align:start position:0%
these values as
arguments<00:48:27.200><c> a</c><00:48:27.280><c> lot</c><00:48:27.520><c> of</c><00:48:27.599><c> programmers</c><00:48:28.079><c> don't</c>

00:48:28.309 --> 00:48:28.319 align:start position:0%
arguments a lot of programmers don't
 

00:48:28.319 --> 00:48:29.589 align:start position:0%
arguments a lot of programmers don't
know<00:48:28.480><c> the</c><00:48:28.559><c> difference</c><00:48:28.960><c> between</c>

00:48:29.589 --> 00:48:29.599 align:start position:0%
know the difference between
 

00:48:29.599 --> 00:48:32.470 align:start position:0%
know the difference between
parameters<00:48:30.319><c> and</c><00:48:30.800><c> arguments</c><00:48:31.760><c> parameters</c><00:48:32.319><c> are</c>

00:48:32.470 --> 00:48:32.480 align:start position:0%
parameters and arguments parameters are
 

00:48:32.480 --> 00:48:34.870 align:start position:0%
parameters and arguments parameters are
the<00:48:32.640><c> holes</c><00:48:32.960><c> that</c><00:48:33.040><c> we</c><00:48:33.200><c> define</c><00:48:33.520><c> in</c><00:48:33.680><c> our</c><00:48:33.839><c> methods</c>

00:48:34.870 --> 00:48:34.880 align:start position:0%
the holes that we define in our methods
 

00:48:34.880 --> 00:48:37.190 align:start position:0%
the holes that we define in our methods
arguments<00:48:35.520><c> are</c><00:48:35.680><c> the</c><00:48:35.920><c> actual</c><00:48:36.400><c> values</c><00:48:36.800><c> that</c><00:48:36.960><c> we</c>

00:48:37.190 --> 00:48:37.200 align:start position:0%
arguments are the actual values that we
 

00:48:37.200 --> 00:48:38.950 align:start position:0%
arguments are the actual values that we
pass<00:48:37.680><c> to</c><00:48:37.839><c> this</c><00:48:38.079><c> method</c>

00:48:38.950 --> 00:48:38.960 align:start position:0%
pass to this method
 

00:48:38.960 --> 00:48:41.589 align:start position:0%
pass to this method
so<00:48:39.200><c> in</c><00:48:39.280><c> this</c><00:48:39.440><c> case</c><00:48:40.000><c> target</c><00:48:40.559><c> and</c><00:48:40.880><c> replacement</c>

00:48:41.589 --> 00:48:41.599 align:start position:0%
so in this case target and replacement
 

00:48:41.599 --> 00:48:43.829 align:start position:0%
so in this case target and replacement
are<00:48:41.760><c> parameters</c><00:48:42.400><c> but</c><00:48:42.640><c> exclamation</c><00:48:43.280><c> mark</c>

00:48:43.829 --> 00:48:43.839 align:start position:0%
are parameters but exclamation mark
 

00:48:43.839 --> 00:48:47.349 align:start position:0%
are parameters but exclamation mark
and<00:48:44.240><c> asterisk</c><00:48:44.880><c> are</c><00:48:45.359><c> arguments</c><00:48:46.720><c> now</c><00:48:46.960><c> let's</c><00:48:47.200><c> run</c>

00:48:47.349 --> 00:48:47.359 align:start position:0%
and asterisk are arguments now let's run
 

00:48:47.359 --> 00:48:48.069 align:start position:0%
and asterisk are arguments now let's run
this<00:48:47.520><c> program</c>

00:48:48.069 --> 00:48:48.079 align:start position:0%
this program
 

00:48:48.079 --> 00:48:51.510 align:start position:0%
this program
and<00:48:48.240><c> see</c><00:48:48.640><c> what</c><00:48:48.800><c> happens</c>

00:48:51.510 --> 00:48:51.520 align:start position:0%
 
 

00:48:51.520 --> 00:48:54.230 align:start position:0%
 
so<00:48:52.640><c> our</c><00:48:52.800><c> exclamation</c><00:48:53.359><c> marks</c><00:48:53.680><c> are</c><00:48:53.760><c> replaced</c>

00:48:54.230 --> 00:48:54.240 align:start position:0%
so our exclamation marks are replaced
 

00:48:54.240 --> 00:48:54.710 align:start position:0%
so our exclamation marks are replaced
with

00:48:54.710 --> 00:48:54.720 align:start position:0%
with
 

00:48:54.720 --> 00:48:57.829 align:start position:0%
with
stars<00:48:55.760><c> now</c><00:48:55.920><c> what</c><00:48:56.079><c> is</c><00:48:56.240><c> important</c><00:48:56.640><c> here</c><00:48:57.520><c> is</c><00:48:57.680><c> that</c>

00:48:57.829 --> 00:48:57.839 align:start position:0%
stars now what is important here is that
 

00:48:57.839 --> 00:49:00.150 align:start position:0%
stars now what is important here is that
this<00:48:58.079><c> method</c><00:48:58.480><c> does</c><00:48:58.800><c> not</c><00:48:59.119><c> modify</c>

00:49:00.150 --> 00:49:00.160 align:start position:0%
this method does not modify
 

00:49:00.160 --> 00:49:02.950 align:start position:0%
this method does not modify
our<00:49:00.480><c> original</c><00:49:01.119><c> string</c><00:49:01.599><c> it</c><00:49:01.839><c> returns</c><00:49:02.480><c> a</c><00:49:02.640><c> new</c>

00:49:02.950 --> 00:49:02.960 align:start position:0%
our original string it returns a new
 

00:49:02.960 --> 00:49:03.750 align:start position:0%
our original string it returns a new
string

00:49:03.750 --> 00:49:03.760 align:start position:0%
string
 

00:49:03.760 --> 00:49:07.829 align:start position:0%
string
so<00:49:04.480><c> if</c><00:49:04.640><c> we</c><00:49:04.960><c> print</c><00:49:05.920><c> our</c><00:49:06.160><c> original</c><00:49:06.640><c> string</c>

00:49:07.829 --> 00:49:07.839 align:start position:0%
so if we print our original string
 

00:49:07.839 --> 00:49:13.750 align:start position:0%
so if we print our original string
right<00:49:08.079><c> after</c><00:49:08.720><c> srut</c><00:49:09.680><c> tab</c><00:49:10.559><c> message</c>

00:49:13.750 --> 00:49:13.760 align:start position:0%
 
 

00:49:13.760 --> 00:49:15.670 align:start position:0%
 
you<00:49:13.920><c> can</c><00:49:14.079><c> see</c><00:49:14.240><c> the</c><00:49:14.400><c> original</c><00:49:14.880><c> string</c><00:49:15.280><c> is</c><00:49:15.440><c> not</c>

00:49:15.670 --> 00:49:15.680 align:start position:0%
you can see the original string is not
 

00:49:15.680 --> 00:49:17.510 align:start position:0%
you can see the original string is not
changed<00:49:16.400><c> because</c><00:49:16.720><c> in</c><00:49:16.880><c> java</c>

00:49:17.510 --> 00:49:17.520 align:start position:0%
changed because in java
 

00:49:17.520 --> 00:49:20.150 align:start position:0%
changed because in java
strings<00:49:18.079><c> are</c><00:49:18.319><c> immutable</c><00:49:19.280><c> we</c><00:49:19.359><c> cannot</c><00:49:19.760><c> mutate</c>

00:49:20.150 --> 00:49:20.160 align:start position:0%
strings are immutable we cannot mutate
 

00:49:20.160 --> 00:49:21.829 align:start position:0%
strings are immutable we cannot mutate
them<00:49:20.400><c> we</c><00:49:20.480><c> cannot</c><00:49:20.880><c> change</c><00:49:21.200><c> them</c>

00:49:21.829 --> 00:49:21.839 align:start position:0%
them we cannot change them
 

00:49:21.839 --> 00:49:24.069 align:start position:0%
them we cannot change them
so<00:49:22.079><c> any</c><00:49:22.319><c> methods</c><00:49:22.720><c> that</c><00:49:22.960><c> modify</c><00:49:23.440><c> a</c><00:49:23.520><c> string</c><00:49:23.839><c> will</c>

00:49:24.069 --> 00:49:24.079 align:start position:0%
so any methods that modify a string will
 

00:49:24.079 --> 00:49:25.109 align:start position:0%
so any methods that modify a string will
always<00:49:24.400><c> return</c>

00:49:25.109 --> 00:49:25.119 align:start position:0%
always return
 

00:49:25.119 --> 00:49:28.470 align:start position:0%
always return
a<00:49:25.280><c> new</c><00:49:25.599><c> string</c><00:49:26.079><c> object</c><00:49:27.200><c> okay</c>

00:49:28.470 --> 00:49:28.480 align:start position:0%
a new string object okay
 

00:49:28.480 --> 00:49:31.510 align:start position:0%
a new string object okay
we<00:49:28.640><c> also</c><00:49:28.960><c> have</c><00:49:29.359><c> another</c><00:49:29.680><c> useful</c><00:49:30.000><c> method</c><00:49:30.800><c> to</c>

00:49:31.510 --> 00:49:31.520 align:start position:0%
we also have another useful method to
 

00:49:31.520 --> 00:49:35.430 align:start position:0%
we also have another useful method to
lowercase<00:49:32.640><c> let's</c><00:49:32.880><c> take</c><00:49:33.119><c> a</c><00:49:33.200><c> look</c>

00:49:35.430 --> 00:49:35.440 align:start position:0%
lowercase let's take a look
 

00:49:35.440 --> 00:49:38.549 align:start position:0%
lowercase let's take a look
so<00:49:36.480><c> to</c><00:49:36.640><c> lower</c><00:49:36.960><c> case</c><00:49:37.359><c> convert</c><00:49:37.839><c> all</c><00:49:38.079><c> characters</c>

00:49:38.549 --> 00:49:38.559 align:start position:0%
so to lower case convert all characters
 

00:49:38.559 --> 00:49:39.750 align:start position:0%
so to lower case convert all characters
to<00:49:38.720><c> lowercase</c>

00:49:39.750 --> 00:49:39.760 align:start position:0%
to lowercase
 

00:49:39.760 --> 00:49:41.270 align:start position:0%
to lowercase
and<00:49:40.079><c> once</c><00:49:40.319><c> again</c><00:49:40.559><c> you</c><00:49:40.640><c> can</c><00:49:40.800><c> see</c><00:49:40.960><c> that</c><00:49:41.119><c> the</c>

00:49:41.270 --> 00:49:41.280 align:start position:0%
and once again you can see that the
 

00:49:41.280 --> 00:49:43.030 align:start position:0%
and once again you can see that the
original<00:49:41.760><c> string</c><00:49:42.079><c> is</c><00:49:42.160><c> not</c><00:49:42.400><c> affected</c>

00:49:43.030 --> 00:49:43.040 align:start position:0%
original string is not affected
 

00:49:43.040 --> 00:49:46.710 align:start position:0%
original string is not affected
because<00:49:43.359><c> this</c><00:49:43.520><c> method</c><00:49:43.920><c> returns</c><00:49:45.839><c> a</c><00:49:45.920><c> new</c><00:49:46.160><c> string</c>

00:49:46.710 --> 00:49:46.720 align:start position:0%
because this method returns a new string
 

00:49:46.720 --> 00:49:50.069 align:start position:0%
because this method returns a new string
okay<00:49:47.440><c> we</c><00:49:47.599><c> also</c><00:49:47.839><c> have</c><00:49:48.480><c> two</c><00:49:48.720><c> upper</c><00:49:49.040><c> case</c>

00:49:50.069 --> 00:49:50.079 align:start position:0%
okay we also have two upper case
 

00:49:50.079 --> 00:49:53.589 align:start position:0%
okay we also have two upper case
and<00:49:50.559><c> another</c><00:49:50.880><c> useful</c><00:49:51.200><c> method</c><00:49:51.599><c> is</c><00:49:52.079><c> trim</c>

00:49:53.589 --> 00:49:53.599 align:start position:0%
and another useful method is trim
 

00:49:53.599 --> 00:49:56.309 align:start position:0%
and another useful method is trim
trim<00:49:55.040><c> and</c><00:49:55.200><c> with</c><00:49:55.359><c> this</c><00:49:55.520><c> we</c><00:49:55.599><c> can</c><00:49:55.680><c> get</c><00:49:55.920><c> rid</c><00:49:56.079><c> of</c>

00:49:56.309 --> 00:49:56.319 align:start position:0%
trim and with this we can get rid of
 

00:49:56.319 --> 00:49:58.230 align:start position:0%
trim and with this we can get rid of
extra<00:49:56.720><c> white</c><00:49:57.040><c> spaces</c><00:49:57.440><c> that</c><00:49:57.599><c> can</c><00:49:57.760><c> be</c><00:49:57.920><c> at</c><00:49:58.000><c> the</c>

00:49:58.230 --> 00:49:58.240 align:start position:0%
extra white spaces that can be at the
 

00:49:58.240 --> 00:49:59.109 align:start position:0%
extra white spaces that can be at the
beginning<00:49:58.720><c> or</c>

00:49:59.109 --> 00:49:59.119 align:start position:0%
beginning or
 

00:49:59.119 --> 00:50:01.430 align:start position:0%
beginning or
the<00:49:59.359><c> end</c><00:49:59.520><c> of</c><00:49:59.680><c> a</c><00:49:59.760><c> string</c><00:50:00.480><c> sometimes</c><00:50:00.880><c> our</c><00:50:01.040><c> users</c>

00:50:01.430 --> 00:50:01.440 align:start position:0%
the end of a string sometimes our users
 

00:50:01.440 --> 00:50:03.990 align:start position:0%
the end of a string sometimes our users
type<00:50:01.760><c> unnecessary</c><00:50:02.400><c> spaces</c><00:50:02.880><c> in</c><00:50:03.040><c> form</c><00:50:03.359><c> fields</c>

00:50:03.990 --> 00:50:04.000 align:start position:0%
type unnecessary spaces in form fields
 

00:50:04.000 --> 00:50:05.829 align:start position:0%
type unnecessary spaces in form fields
so<00:50:04.160><c> using</c><00:50:04.480><c> the</c><00:50:04.640><c> trim</c><00:50:04.880><c> method</c><00:50:05.200><c> we</c><00:50:05.359><c> can</c><00:50:05.440><c> get</c><00:50:05.680><c> rid</c>

00:50:05.829 --> 00:50:05.839 align:start position:0%
so using the trim method we can get rid
 

00:50:05.839 --> 00:50:07.030 align:start position:0%
so using the trim method we can get rid
of<00:50:05.920><c> these</c><00:50:06.160><c> white</c><00:50:06.400><c> spaces</c>

00:50:07.030 --> 00:50:07.040 align:start position:0%
of these white spaces
 

00:50:07.040 --> 00:50:09.190 align:start position:0%
of these white spaces
let<00:50:07.200><c> me</c><00:50:07.359><c> show</c><00:50:07.520><c> you</c><00:50:08.079><c> so</c><00:50:08.240><c> i'm</c><00:50:08.319><c> going</c><00:50:08.400><c> to</c><00:50:08.480><c> add</c><00:50:09.119><c> a</c>

00:50:09.190 --> 00:50:09.200 align:start position:0%
let me show you so i'm going to add a
 

00:50:09.200 --> 00:50:10.790 align:start position:0%
let me show you so i'm going to add a
couple<00:50:09.440><c> of</c><00:50:09.599><c> spaces</c>

00:50:10.790 --> 00:50:10.800 align:start position:0%
couple of spaces
 

00:50:10.800 --> 00:50:14.549 align:start position:0%
couple of spaces
before<00:50:11.839><c> and</c><00:50:12.800><c> after</c><00:50:13.359><c> our</c><00:50:13.520><c> message</c>

00:50:14.549 --> 00:50:14.559 align:start position:0%
before and after our message
 

00:50:14.559 --> 00:50:16.950 align:start position:0%
before and after our message
now<00:50:14.720><c> when</c><00:50:14.880><c> we</c><00:50:15.119><c> trim</c><00:50:15.520><c> it</c><00:50:16.079><c> these</c><00:50:16.240><c> white</c><00:50:16.480><c> spacers</c>

00:50:16.950 --> 00:50:16.960 align:start position:0%
now when we trim it these white spacers
 

00:50:16.960 --> 00:50:20.710 align:start position:0%
now when we trim it these white spacers
are<00:50:17.040><c> going</c><00:50:17.119><c> to</c><00:50:17.200><c> get</c><00:50:17.359><c> removed</c><00:50:17.839><c> take</c><00:50:18.079><c> a</c><00:50:18.160><c> look</c>

00:50:20.710 --> 00:50:20.720 align:start position:0%
 
 

00:50:20.720 --> 00:50:22.870 align:start position:0%
 
so<00:50:21.359><c> here's</c><00:50:21.680><c> the</c><00:50:21.839><c> original</c><00:50:22.319><c> string</c><00:50:22.640><c> you</c><00:50:22.720><c> can</c>

00:50:22.870 --> 00:50:22.880 align:start position:0%
so here's the original string you can
 

00:50:22.880 --> 00:50:25.430 align:start position:0%
so here's the original string you can
see<00:50:23.440><c> two</c><00:50:23.599><c> white</c><00:50:23.839><c> spaces</c><00:50:24.240><c> at</c><00:50:24.319><c> the</c><00:50:24.480><c> beginning</c>

00:50:25.430 --> 00:50:25.440 align:start position:0%
see two white spaces at the beginning
 

00:50:25.440 --> 00:50:28.950 align:start position:0%
see two white spaces at the beginning
and<00:50:26.000><c> here's</c><00:50:26.319><c> our</c><00:50:26.480><c> string</c><00:50:27.040><c> after</c><00:50:27.359><c> trimming</c>

00:50:28.950 --> 00:50:28.960 align:start position:0%
and here's our string after trimming
 

00:50:28.960 --> 00:50:30.710 align:start position:0%
and here's our string after trimming
so<00:50:29.200><c> these</c><00:50:29.440><c> are</c><00:50:29.520><c> some</c><00:50:29.760><c> useful</c><00:50:30.079><c> methods</c><00:50:30.480><c> in</c><00:50:30.559><c> the</c>

00:50:30.710 --> 00:50:30.720 align:start position:0%
so these are some useful methods in the
 

00:50:30.720 --> 00:50:32.549 align:start position:0%
so these are some useful methods in the
string<00:50:31.040><c> class</c><00:50:31.359><c> but</c><00:50:31.599><c> this</c><00:50:31.839><c> class</c><00:50:32.160><c> has</c><00:50:32.319><c> more</c>

00:50:32.549 --> 00:50:32.559 align:start position:0%
string class but this class has more
 

00:50:32.559 --> 00:50:33.430 align:start position:0%
string class but this class has more
methods<00:50:33.040><c> that</c>

00:50:33.430 --> 00:50:33.440 align:start position:0%
methods that
 

00:50:33.440 --> 00:50:34.950 align:start position:0%
methods that
we<00:50:33.599><c> don't</c><00:50:33.760><c> have</c><00:50:33.920><c> time</c><00:50:34.160><c> to</c><00:50:34.319><c> cover</c><00:50:34.720><c> in</c><00:50:34.800><c> this</c>

00:50:34.950 --> 00:50:34.960 align:start position:0%
we don't have time to cover in this
 

00:50:34.960 --> 00:50:36.870 align:start position:0%
we don't have time to cover in this
lecture<00:50:35.760><c> but</c><00:50:36.000><c> as</c><00:50:36.160><c> we</c><00:50:36.240><c> go</c><00:50:36.319><c> through</c><00:50:36.559><c> the</c><00:50:36.640><c> course</c>

00:50:36.870 --> 00:50:36.880 align:start position:0%
lecture but as we go through the course
 

00:50:36.880 --> 00:50:37.910 align:start position:0%
lecture but as we go through the course
you're<00:50:36.960><c> going</c><00:50:37.040><c> to</c><00:50:37.119><c> learn</c><00:50:37.359><c> more</c><00:50:37.599><c> about</c><00:50:37.760><c> the</c>

00:50:37.910 --> 00:50:37.920 align:start position:0%
you're going to learn more about the
 

00:50:37.920 --> 00:50:38.950 align:start position:0%
you're going to learn more about the
string<00:50:38.240><c> class</c><00:50:38.559><c> and</c>

00:50:38.950 --> 00:50:38.960 align:start position:0%
string class and
 

00:50:38.960 --> 00:50:46.710 align:start position:0%
string class and
other<00:50:39.119><c> useful</c><00:50:39.520><c> classes</c><00:50:40.000><c> in</c><00:50:40.240><c> java</c>

00:50:46.710 --> 00:50:46.720 align:start position:0%
 
 

00:50:46.720 --> 00:50:48.549 align:start position:0%
 
there<00:50:46.960><c> are</c><00:50:47.119><c> times</c><00:50:47.359><c> will</c><00:50:47.599><c> include</c><00:50:48.079><c> special</c>

00:50:48.549 --> 00:50:48.559 align:start position:0%
there are times will include special
 

00:50:48.559 --> 00:50:49.910 align:start position:0%
there are times will include special
characters<00:50:49.119><c> in</c><00:50:49.200><c> our</c><00:50:49.359><c> strings</c>

00:50:49.910 --> 00:50:49.920 align:start position:0%
characters in our strings
 

00:50:49.920 --> 00:50:52.470 align:start position:0%
characters in our strings
like<00:50:50.160><c> a</c><00:50:50.319><c> tab</c><00:50:50.640><c> or</c><00:50:50.800><c> a</c><00:50:50.880><c> new</c><00:50:51.119><c> line</c><00:50:51.520><c> or</c><00:50:51.680><c> a</c><00:50:51.839><c> backslash</c>

00:50:52.470 --> 00:50:52.480 align:start position:0%
like a tab or a new line or a backslash
 

00:50:52.480 --> 00:50:52.950 align:start position:0%
like a tab or a new line or a backslash
or

00:50:52.950 --> 00:50:52.960 align:start position:0%
or
 

00:50:52.960 --> 00:50:54.950 align:start position:0%
or
double<00:50:53.280><c> quotes</c><00:50:54.000><c> so</c><00:50:54.240><c> in</c><00:50:54.319><c> this</c><00:50:54.400><c> tutorial</c><00:50:54.880><c> i'm</c>

00:50:54.950 --> 00:50:54.960 align:start position:0%
double quotes so in this tutorial i'm
 

00:50:54.960 --> 00:50:56.470 align:start position:0%
double quotes so in this tutorial i'm
going<00:50:55.040><c> to</c><00:50:55.119><c> show</c><00:50:55.280><c> you</c><00:50:55.440><c> how</c><00:50:55.599><c> to</c><00:50:55.760><c> include</c><00:50:56.240><c> these</c>

00:50:56.470 --> 00:50:56.480 align:start position:0%
going to show you how to include these
 

00:50:56.480 --> 00:50:58.470 align:start position:0%
going to show you how to include these
special<00:50:56.960><c> characters</c><00:50:57.440><c> in</c><00:50:57.520><c> your</c><00:50:57.760><c> strings</c>

00:50:58.470 --> 00:50:58.480 align:start position:0%
special characters in your strings
 

00:50:58.480 --> 00:51:00.870 align:start position:0%
special characters in your strings
so<00:50:58.640><c> here</c><00:50:58.800><c> we</c><00:50:58.880><c> have</c><00:50:59.040><c> the</c><00:50:59.200><c> string</c><00:50:59.680><c> hello</c><00:51:00.079><c> mosh</c>

00:51:00.870 --> 00:51:00.880 align:start position:0%
so here we have the string hello mosh
 

00:51:00.880 --> 00:51:02.630 align:start position:0%
so here we have the string hello mosh
let's<00:51:01.040><c> say</c><00:51:01.200><c> we</c><00:51:01.280><c> want</c><00:51:01.440><c> to</c><00:51:01.520><c> surround</c><00:51:02.079><c> mosh</c>

00:51:02.630 --> 00:51:02.640 align:start position:0%
let's say we want to surround mosh
 

00:51:02.640 --> 00:51:04.230 align:start position:0%
let's say we want to surround mosh
with<00:51:02.880><c> double</c><00:51:03.200><c> quotes</c><00:51:03.680><c> now</c><00:51:03.839><c> here's</c><00:51:04.160><c> the</c>

00:51:04.230 --> 00:51:04.240 align:start position:0%
with double quotes now here's the
 

00:51:04.240 --> 00:51:06.069 align:start position:0%
with double quotes now here's the
problem<00:51:05.119><c> if</c><00:51:05.359><c> we</c><00:51:05.520><c> add</c>

00:51:06.069 --> 00:51:06.079 align:start position:0%
problem if we add
 

00:51:06.079 --> 00:51:09.030 align:start position:0%
problem if we add
a<00:51:06.240><c> double</c><00:51:06.480><c> quote</c><00:51:06.800><c> here</c><00:51:07.760><c> java</c><00:51:08.079><c> compiler</c><00:51:08.559><c> thinks</c>

00:51:09.030 --> 00:51:09.040 align:start position:0%
a double quote here java compiler thinks
 

00:51:09.040 --> 00:51:10.790 align:start position:0%
a double quote here java compiler thinks
this<00:51:09.280><c> is</c><00:51:09.359><c> the</c><00:51:09.520><c> termination</c><00:51:10.000><c> of</c><00:51:10.160><c> our</c><00:51:10.319><c> string</c>

00:51:10.790 --> 00:51:10.800 align:start position:0%
this is the termination of our string
 

00:51:10.800 --> 00:51:12.870 align:start position:0%
this is the termination of our string
so<00:51:11.280><c> it</c><00:51:11.440><c> doesn't</c><00:51:11.680><c> understand</c><00:51:12.319><c> what</c><00:51:12.559><c> we</c><00:51:12.640><c> have</c>

00:51:12.870 --> 00:51:12.880 align:start position:0%
so it doesn't understand what we have
 

00:51:12.880 --> 00:51:14.549 align:start position:0%
so it doesn't understand what we have
after<00:51:13.280><c> that's</c><00:51:13.520><c> why</c><00:51:13.680><c> we</c><00:51:13.839><c> have</c><00:51:13.920><c> a</c><00:51:14.000><c> compilation</c>

00:51:14.549 --> 00:51:14.559 align:start position:0%
after that's why we have a compilation
 

00:51:14.559 --> 00:51:15.190 align:start position:0%
after that's why we have a compilation
error

00:51:15.190 --> 00:51:15.200 align:start position:0%
error
 

00:51:15.200 --> 00:51:17.270 align:start position:0%
error
to<00:51:15.359><c> fix</c><00:51:15.599><c> this</c><00:51:15.839><c> problem</c><00:51:16.400><c> we</c><00:51:16.559><c> need</c><00:51:16.720><c> to</c><00:51:16.880><c> prefix</c>

00:51:17.270 --> 00:51:17.280 align:start position:0%
to fix this problem we need to prefix
 

00:51:17.280 --> 00:51:18.309 align:start position:0%
to fix this problem we need to prefix
this<00:51:17.520><c> double</c><00:51:17.839><c> code</c>

00:51:18.309 --> 00:51:18.319 align:start position:0%
this double code
 

00:51:18.319 --> 00:51:21.910 align:start position:0%
this double code
with<00:51:18.880><c> a</c><00:51:19.200><c> backslash</c><00:51:20.480><c> so</c><00:51:20.640><c> using</c><00:51:20.880><c> this</c><00:51:21.119><c> backslash</c>

00:51:21.910 --> 00:51:21.920 align:start position:0%
with a backslash so using this backslash
 

00:51:21.920 --> 00:51:23.030 align:start position:0%
with a backslash so using this backslash
we<00:51:22.079><c> have</c><00:51:22.319><c> escaped</c>

00:51:23.030 --> 00:51:23.040 align:start position:0%
we have escaped
 

00:51:23.040 --> 00:51:26.069 align:start position:0%
we have escaped
the<00:51:23.200><c> double</c><00:51:23.599><c> quote</c><00:51:24.480><c> now</c><00:51:24.960><c> one</c><00:51:25.119><c> more</c><00:51:25.280><c> time</c>

00:51:26.069 --> 00:51:26.079 align:start position:0%
the double quote now one more time
 

00:51:26.079 --> 00:51:29.430 align:start position:0%
the double quote now one more time
let's<00:51:26.319><c> add</c><00:51:26.880><c> backslash</c><00:51:27.680><c> double</c><00:51:28.000><c> quote</c><00:51:28.240><c> here</c>

00:51:29.430 --> 00:51:29.440 align:start position:0%
let's add backslash double quote here
 

00:51:29.440 --> 00:51:31.109 align:start position:0%
let's add backslash double quote here
now<00:51:29.680><c> let's</c><00:51:29.920><c> run</c><00:51:30.079><c> the</c><00:51:30.240><c> program</c><00:51:30.720><c> and</c><00:51:30.800><c> see</c><00:51:30.960><c> what</c>

00:51:31.109 --> 00:51:31.119 align:start position:0%
now let's run the program and see what
 

00:51:31.119 --> 00:51:33.910 align:start position:0%
now let's run the program and see what
we<00:51:31.200><c> get</c><00:51:32.319><c> so</c><00:51:32.480><c> we</c><00:51:32.640><c> get</c><00:51:32.880><c> hello</c><00:51:33.200><c> marsh</c>

00:51:33.910 --> 00:51:33.920 align:start position:0%
we get so we get hello marsh
 

00:51:33.920 --> 00:51:36.950 align:start position:0%
we get so we get hello marsh
in<00:51:34.079><c> double</c><00:51:34.400><c> quotes</c><00:51:35.040><c> beautiful</c><00:51:36.079><c> so</c><00:51:36.640><c> double</c>

00:51:36.950 --> 00:51:36.960 align:start position:0%
in double quotes beautiful so double
 

00:51:36.960 --> 00:51:38.630 align:start position:0%
in double quotes beautiful so double
quote<00:51:37.280><c> is</c><00:51:37.359><c> one</c><00:51:37.520><c> of</c><00:51:37.599><c> those</c><00:51:37.760><c> special</c><00:51:38.240><c> characters</c>

00:51:38.630 --> 00:51:38.640 align:start position:0%
quote is one of those special characters
 

00:51:38.640 --> 00:51:40.069 align:start position:0%
quote is one of those special characters
that<00:51:38.800><c> you</c><00:51:38.880><c> need</c><00:51:39.040><c> to</c><00:51:39.119><c> be</c><00:51:39.280><c> aware</c><00:51:39.520><c> of</c>

00:51:40.069 --> 00:51:40.079 align:start position:0%
that you need to be aware of
 

00:51:40.079 --> 00:51:42.790 align:start position:0%
that you need to be aware of
another<00:51:40.400><c> special</c><00:51:40.800><c> character</c><00:51:41.280><c> is</c><00:51:41.680><c> backslash</c>

00:51:42.790 --> 00:51:42.800 align:start position:0%
another special character is backslash
 

00:51:42.800 --> 00:51:44.390 align:start position:0%
another special character is backslash
let's<00:51:42.960><c> say</c><00:51:43.119><c> we</c><00:51:43.200><c> want</c><00:51:43.359><c> to</c><00:51:43.440><c> store</c><00:51:43.680><c> the</c><00:51:43.839><c> path</c><00:51:44.079><c> to</c><00:51:44.240><c> a</c>

00:51:44.390 --> 00:51:44.400 align:start position:0%
let's say we want to store the path to a
 

00:51:44.400 --> 00:51:46.390 align:start position:0%
let's say we want to store the path to a
directory<00:51:44.960><c> on</c><00:51:45.040><c> a</c><00:51:45.119><c> windows</c><00:51:45.520><c> machine</c>

00:51:46.390 --> 00:51:46.400 align:start position:0%
directory on a windows machine
 

00:51:46.400 --> 00:51:49.030 align:start position:0%
directory on a windows machine
so<00:51:46.640><c> that</c><00:51:46.800><c> will</c><00:51:46.960><c> look</c><00:51:47.119><c> like</c><00:51:47.359><c> this</c><00:51:47.920><c> c</c><00:51:48.160><c> drive</c>

00:51:49.030 --> 00:51:49.040 align:start position:0%
so that will look like this c drive
 

00:51:49.040 --> 00:51:49.829 align:start position:0%
so that will look like this c drive
backslash

00:51:49.829 --> 00:51:49.839 align:start position:0%
backslash
 

00:51:49.839 --> 00:51:52.950 align:start position:0%
backslash
windows<00:51:50.559><c> backslash</c><00:51:51.680><c> whatever</c>

00:51:52.950 --> 00:51:52.960 align:start position:0%
windows backslash whatever
 

00:51:52.960 --> 00:51:54.790 align:start position:0%
windows backslash whatever
now<00:51:53.680><c> if</c><00:51:53.839><c> you</c><00:51:53.920><c> want</c><00:51:54.000><c> to</c><00:51:54.160><c> store</c><00:51:54.319><c> this</c><00:51:54.559><c> in</c><00:51:54.640><c> a</c>

00:51:54.790 --> 00:51:54.800 align:start position:0%
now if you want to store this in a
 

00:51:54.800 --> 00:51:56.390 align:start position:0%
now if you want to store this in a
string<00:51:55.520><c> we</c><00:51:55.680><c> need</c><00:51:55.760><c> to</c><00:51:55.920><c> escape</c>

00:51:56.390 --> 00:51:56.400 align:start position:0%
string we need to escape
 

00:51:56.400 --> 00:51:59.829 align:start position:0%
string we need to escape
each<00:51:56.640><c> backslash</c><00:51:57.359><c> let</c><00:51:57.520><c> me</c><00:51:57.680><c> show</c><00:51:57.839><c> you</c><00:51:58.480><c> so</c>

00:51:59.829 --> 00:51:59.839 align:start position:0%
each backslash let me show you so
 

00:51:59.839 --> 00:52:03.750 align:start position:0%
each backslash let me show you so
c<00:52:00.400><c> drive</c><00:52:01.280><c> backslash</c><00:52:02.400><c> now</c><00:52:02.640><c> we</c><00:52:02.720><c> have</c><00:52:02.880><c> a</c><00:52:02.960><c> problem</c>

00:52:03.750 --> 00:52:03.760 align:start position:0%
c drive backslash now we have a problem
 

00:52:03.760 --> 00:52:05.030 align:start position:0%
c drive backslash now we have a problem
java<00:52:04.079><c> compiler</c><00:52:04.559><c> thinks</c>

00:52:05.030 --> 00:52:05.040 align:start position:0%
java compiler thinks
 

00:52:05.040 --> 00:52:06.870 align:start position:0%
java compiler thinks
we're<00:52:05.280><c> escaping</c><00:52:05.680><c> the</c><00:52:05.839><c> double</c><00:52:06.160><c> code</c><00:52:06.400><c> here</c><00:52:06.720><c> so</c>

00:52:06.870 --> 00:52:06.880 align:start position:0%
we're escaping the double code here so
 

00:52:06.880 --> 00:52:09.270 align:start position:0%
we're escaping the double code here so
it<00:52:06.960><c> thinks</c><00:52:07.359><c> our</c><00:52:07.599><c> string</c><00:52:08.000><c> is</c><00:52:08.160><c> not</c><00:52:08.400><c> terminated</c>

00:52:09.270 --> 00:52:09.280 align:start position:0%
it thinks our string is not terminated
 

00:52:09.280 --> 00:52:11.109 align:start position:0%
it thinks our string is not terminated
with<00:52:09.680><c> another</c><00:52:10.000><c> double</c><00:52:10.319><c> code</c><00:52:10.640><c> but</c><00:52:10.720><c> that's</c><00:52:10.960><c> not</c>

00:52:11.109 --> 00:52:11.119 align:start position:0%
with another double code but that's not
 

00:52:11.119 --> 00:52:13.349 align:start position:0%
with another double code but that's not
what<00:52:11.280><c> we</c><00:52:11.440><c> want</c><00:52:11.920><c> you</c><00:52:12.079><c> want</c><00:52:12.240><c> to</c><00:52:12.319><c> add</c><00:52:12.640><c> a</c><00:52:12.880><c> backslash</c>

00:52:13.349 --> 00:52:13.359 align:start position:0%
what we want you want to add a backslash
 

00:52:13.359 --> 00:52:14.470 align:start position:0%
what we want you want to add a backslash
here<00:52:13.680><c> so</c>

00:52:14.470 --> 00:52:14.480 align:start position:0%
here so
 

00:52:14.480 --> 00:52:16.950 align:start position:0%
here so
we<00:52:14.640><c> need</c><00:52:14.800><c> to</c><00:52:14.960><c> prefix</c><00:52:15.359><c> our</c><00:52:15.520><c> backslash</c><00:52:16.160><c> with</c>

00:52:16.950 --> 00:52:16.960 align:start position:0%
we need to prefix our backslash with
 

00:52:16.960 --> 00:52:18.549 align:start position:0%
we need to prefix our backslash with
another<00:52:17.280><c> backslash</c>

00:52:18.549 --> 00:52:18.559 align:start position:0%
another backslash
 

00:52:18.559 --> 00:52:22.230 align:start position:0%
another backslash
now<00:52:18.720><c> we</c><00:52:18.960><c> type</c><00:52:19.520><c> windows</c><00:52:20.559><c> one</c><00:52:20.720><c> more</c><00:52:20.960><c> time</c>

00:52:22.230 --> 00:52:22.240 align:start position:0%
now we type windows one more time
 

00:52:22.240 --> 00:52:26.069 align:start position:0%
now we type windows one more time
something<00:52:23.440><c> let's</c><00:52:23.680><c> run</c><00:52:23.839><c> the</c><00:52:24.000><c> program</c>

00:52:26.069 --> 00:52:26.079 align:start position:0%
something let's run the program
 

00:52:26.079 --> 00:52:28.549 align:start position:0%
something let's run the program
so<00:52:26.640><c> even</c><00:52:26.800><c> though</c><00:52:26.960><c> we</c><00:52:27.119><c> have</c><00:52:27.760><c> two</c><00:52:28.000><c> backslashes</c>

00:52:28.549 --> 00:52:28.559 align:start position:0%
so even though we have two backslashes
 

00:52:28.559 --> 00:52:29.670 align:start position:0%
so even though we have two backslashes
in<00:52:28.720><c> our</c><00:52:28.880><c> code</c>

00:52:29.670 --> 00:52:29.680 align:start position:0%
in our code
 

00:52:29.680 --> 00:52:31.589 align:start position:0%
in our code
we<00:52:29.839><c> actually</c><00:52:30.160><c> see</c><00:52:30.319><c> one</c><00:52:30.559><c> backslash</c><00:52:31.359><c> in</c><00:52:31.520><c> a</c>

00:52:31.589 --> 00:52:31.599 align:start position:0%
we actually see one backslash in a
 

00:52:31.599 --> 00:52:33.190 align:start position:0%
we actually see one backslash in a
terminal<00:52:32.000><c> window</c>

00:52:33.190 --> 00:52:33.200 align:start position:0%
terminal window
 

00:52:33.200 --> 00:52:35.990 align:start position:0%
terminal window
another<00:52:33.599><c> escape</c><00:52:33.920><c> sequence</c><00:52:34.400><c> is</c><00:52:34.880><c> backslash</c><00:52:35.520><c> n</c>

00:52:35.990 --> 00:52:36.000 align:start position:0%
another escape sequence is backslash n
 

00:52:36.000 --> 00:52:37.910 align:start position:0%
another escape sequence is backslash n
and<00:52:36.079><c> we</c><00:52:36.240><c> use</c><00:52:36.400><c> that</c><00:52:36.559><c> to</c><00:52:36.640><c> add</c><00:52:36.880><c> a</c><00:52:37.040><c> new</c><00:52:37.280><c> line</c><00:52:37.599><c> to</c><00:52:37.760><c> our</c>

00:52:37.910 --> 00:52:37.920 align:start position:0%
and we use that to add a new line to our
 

00:52:37.920 --> 00:52:38.549 align:start position:0%
and we use that to add a new line to our
strings

00:52:38.549 --> 00:52:38.559 align:start position:0%
strings
 

00:52:38.559 --> 00:52:41.750 align:start position:0%
strings
so<00:52:39.359><c> let's</c><00:52:39.680><c> change</c><00:52:39.920><c> this</c><00:52:40.079><c> to</c><00:52:40.240><c> backslash</c><00:52:40.960><c> n</c>

00:52:41.750 --> 00:52:41.760 align:start position:0%
so let's change this to backslash n
 

00:52:41.760 --> 00:52:45.030 align:start position:0%
so let's change this to backslash n
and<00:52:41.920><c> run</c><00:52:42.079><c> the</c><00:52:42.240><c> program</c><00:52:42.720><c> to</c><00:52:42.880><c> see</c><00:52:43.200><c> what</c><00:52:43.359><c> happens</c>

00:52:45.030 --> 00:52:45.040 align:start position:0%
and run the program to see what happens
 

00:52:45.040 --> 00:52:47.030 align:start position:0%
and run the program to see what happens
now<00:52:45.200><c> our</c><00:52:45.359><c> string</c><00:52:45.680><c> is</c><00:52:45.839><c> broken</c><00:52:46.240><c> down</c><00:52:46.720><c> onto</c>

00:52:47.030 --> 00:52:47.040 align:start position:0%
now our string is broken down onto
 

00:52:47.040 --> 00:52:48.309 align:start position:0%
now our string is broken down onto
multiple<00:52:47.440><c> lines</c>

00:52:48.309 --> 00:52:48.319 align:start position:0%
multiple lines
 

00:52:48.319 --> 00:52:50.549 align:start position:0%
multiple lines
on<00:52:48.480><c> the</c><00:52:48.559><c> first</c><00:52:48.720><c> line</c><00:52:48.960><c> we</c><00:52:49.119><c> have</c><00:52:49.520><c> c</c><00:52:49.760><c> drive</c><00:52:50.319><c> then</c>

00:52:50.549 --> 00:52:50.559 align:start position:0%
on the first line we have c drive then
 

00:52:50.559 --> 00:52:51.990 align:start position:0%
on the first line we have c drive then
we<00:52:50.720><c> have</c><00:52:51.200><c> windows</c>

00:52:51.990 --> 00:52:52.000 align:start position:0%
we have windows
 

00:52:52.000 --> 00:52:54.470 align:start position:0%
we have windows
so<00:52:52.240><c> wherever</c><00:52:52.559><c> we</c><00:52:52.720><c> add</c><00:52:52.880><c> a</c><00:52:53.040><c> backslash</c><00:52:53.599><c> n</c><00:52:54.160><c> java</c>

00:52:54.470 --> 00:52:54.480 align:start position:0%
so wherever we add a backslash n java
 

00:52:54.480 --> 00:52:56.309 align:start position:0%
so wherever we add a backslash n java
will<00:52:54.720><c> insert</c><00:52:55.119><c> a</c><00:52:55.280><c> new</c><00:52:55.520><c> line</c>

00:52:56.309 --> 00:52:56.319 align:start position:0%
will insert a new line
 

00:52:56.319 --> 00:52:58.950 align:start position:0%
will insert a new line
we<00:52:56.480><c> can</c><00:52:56.640><c> also</c><00:52:56.880><c> add</c><00:52:57.040><c> a</c><00:52:57.200><c> tab</c><00:52:57.440><c> in</c><00:52:57.599><c> our</c><00:52:57.760><c> strings</c><00:52:58.640><c> so</c>

00:52:58.950 --> 00:52:58.960 align:start position:0%
we can also add a tab in our strings so
 

00:52:58.960 --> 00:53:01.510 align:start position:0%
we can also add a tab in our strings so
if<00:52:59.040><c> we</c><00:52:59.200><c> add</c><00:52:59.760><c> backslash</c><00:53:00.319><c> t</c><00:53:00.559><c> here</c>

00:53:01.510 --> 00:53:01.520 align:start position:0%
if we add backslash t here
 

00:53:01.520 --> 00:53:03.910 align:start position:0%
if we add backslash t here
there<00:53:01.680><c> will</c><00:53:01.839><c> be</c><00:53:01.920><c> a</c><00:53:02.079><c> tab</c><00:53:02.559><c> between</c><00:53:03.040><c> c</c><00:53:03.280><c> drive</c><00:53:03.680><c> and</c>

00:53:03.910 --> 00:53:03.920 align:start position:0%
there will be a tab between c drive and
 

00:53:03.920 --> 00:53:04.630 align:start position:0%
there will be a tab between c drive and
windows

00:53:04.630 --> 00:53:04.640 align:start position:0%
windows
 

00:53:04.640 --> 00:53:08.230 align:start position:0%
windows
let's<00:53:04.800><c> take</c><00:53:04.960><c> a</c><00:53:05.040><c> look</c><00:53:06.960><c> so</c><00:53:07.200><c> c</c><00:53:07.440><c> drive</c>

00:53:08.230 --> 00:53:08.240 align:start position:0%
let's take a look so c drive
 

00:53:08.240 --> 00:53:11.190 align:start position:0%
let's take a look so c drive
here<00:53:08.480><c> we</c><00:53:08.559><c> have</c><00:53:08.720><c> a</c><00:53:08.880><c> tab</c><00:53:09.440><c> and</c><00:53:09.520><c> then</c><00:53:09.680><c> windows</c><00:53:10.960><c> now</c>

00:53:11.190 --> 00:53:11.200 align:start position:0%
here we have a tab and then windows now
 

00:53:11.200 --> 00:53:12.710 align:start position:0%
here we have a tab and then windows now
in<00:53:11.280><c> java</c><00:53:11.599><c> we</c><00:53:11.760><c> have</c><00:53:11.920><c> a</c><00:53:12.000><c> few</c><00:53:12.160><c> more</c><00:53:12.400><c> escape</c>

00:53:12.710 --> 00:53:12.720 align:start position:0%
in java we have a few more escape
 

00:53:12.720 --> 00:53:13.990 align:start position:0%
in java we have a few more escape
sequences<00:53:13.359><c> but</c><00:53:13.680><c> quite</c>

00:53:13.990 --> 00:53:14.000 align:start position:0%
sequences but quite
 

00:53:14.000 --> 00:53:16.870 align:start position:0%
sequences but quite
honestly<00:53:14.559><c> they're</c><00:53:14.800><c> hardly</c><00:53:15.200><c> used</c><00:53:15.839><c> so</c><00:53:16.400><c> remember</c>

00:53:16.870 --> 00:53:16.880 align:start position:0%
honestly they're hardly used so remember
 

00:53:16.880 --> 00:53:17.589 align:start position:0%
honestly they're hardly used so remember
these<00:53:17.200><c> four</c>

00:53:17.589 --> 00:53:17.599 align:start position:0%
these four
 

00:53:17.599 --> 00:53:19.349 align:start position:0%
these four
escape<00:53:18.000><c> sequences</c><00:53:18.480><c> that</c><00:53:18.640><c> we</c><00:53:18.800><c> covered</c><00:53:19.119><c> in</c><00:53:19.200><c> this</c>

00:53:19.349 --> 00:53:19.359 align:start position:0%
escape sequences that we covered in this
 

00:53:19.359 --> 00:53:25.910 align:start position:0%
escape sequences that we covered in this
tutorial

00:53:25.910 --> 00:53:25.920 align:start position:0%
 
 

00:53:25.920 --> 00:53:27.109 align:start position:0%
 
in<00:53:26.000><c> this</c><00:53:26.160><c> tutorial</c><00:53:26.640><c> we're</c><00:53:26.720><c> going</c><00:53:26.800><c> to</c><00:53:26.880><c> talk</c>

00:53:27.109 --> 00:53:27.119 align:start position:0%
in this tutorial we're going to talk
 

00:53:27.119 --> 00:53:29.109 align:start position:0%
in this tutorial we're going to talk
about<00:53:27.440><c> arrays</c><00:53:28.000><c> in</c><00:53:28.319><c> java</c>

00:53:29.109 --> 00:53:29.119 align:start position:0%
about arrays in java
 

00:53:29.119 --> 00:53:31.270 align:start position:0%
about arrays in java
we<00:53:29.280><c> use</c><00:53:29.440><c> arrays</c><00:53:29.760><c> to</c><00:53:30.000><c> store</c><00:53:30.319><c> a</c><00:53:30.480><c> list</c><00:53:30.720><c> of</c><00:53:30.880><c> items</c>

00:53:31.270 --> 00:53:31.280 align:start position:0%
we use arrays to store a list of items
 

00:53:31.280 --> 00:53:32.630 align:start position:0%
we use arrays to store a list of items
like<00:53:31.440><c> a</c><00:53:31.520><c> list</c><00:53:31.760><c> of</c><00:53:31.920><c> numbers</c><00:53:32.319><c> or</c>

00:53:32.630 --> 00:53:32.640 align:start position:0%
like a list of numbers or
 

00:53:32.640 --> 00:53:35.270 align:start position:0%
like a list of numbers or
a<00:53:32.800><c> list</c><00:53:33.040><c> of</c><00:53:33.200><c> people</c><00:53:33.760><c> or</c><00:53:34.160><c> a</c><00:53:34.240><c> list</c><00:53:34.480><c> of</c><00:53:34.640><c> messages</c>

00:53:35.270 --> 00:53:35.280 align:start position:0%
a list of people or a list of messages
 

00:53:35.280 --> 00:53:36.390 align:start position:0%
a list of people or a list of messages
let<00:53:35.440><c> me</c><00:53:35.599><c> show</c><00:53:35.760><c> you</c>

00:53:36.390 --> 00:53:36.400 align:start position:0%
let me show you
 

00:53:36.400 --> 00:53:38.470 align:start position:0%
let me show you
so<00:53:36.559><c> here</c><00:53:36.720><c> we</c><00:53:36.880><c> have</c><00:53:37.040><c> an</c><00:53:37.200><c> integer</c><00:53:37.599><c> variable</c><00:53:38.319><c> we</c>

00:53:38.470 --> 00:53:38.480 align:start position:0%
so here we have an integer variable we
 

00:53:38.480 --> 00:53:39.430 align:start position:0%
so here we have an integer variable we
want<00:53:38.640><c> to</c><00:53:38.720><c> convert</c><00:53:39.119><c> this</c>

00:53:39.430 --> 00:53:39.440 align:start position:0%
want to convert this
 

00:53:39.440 --> 00:53:42.710 align:start position:0%
want to convert this
to<00:53:39.599><c> an</c><00:53:39.839><c> integer</c><00:53:40.319><c> array</c><00:53:41.200><c> so</c><00:53:41.680><c> right</c><00:53:41.920><c> after</c><00:53:42.400><c> end</c>

00:53:42.710 --> 00:53:42.720 align:start position:0%
to an integer array so right after end
 

00:53:42.720 --> 00:53:43.990 align:start position:0%
to an integer array so right after end
we<00:53:42.960><c> add</c>

00:53:43.990 --> 00:53:44.000 align:start position:0%
we add
 

00:53:44.000 --> 00:53:45.990 align:start position:0%
we add
square<00:53:44.319><c> brackets</c><00:53:45.440><c> now</c><00:53:45.680><c> we</c><00:53:45.760><c> have</c><00:53:45.920><c> a</c>

00:53:45.990 --> 00:53:46.000 align:start position:0%
square brackets now we have a
 

00:53:46.000 --> 00:53:47.910 align:start position:0%
square brackets now we have a
compilation<00:53:46.480><c> error</c><00:53:46.960><c> because</c><00:53:47.200><c> we're</c><00:53:47.440><c> storing</c>

00:53:47.910 --> 00:53:47.920 align:start position:0%
compilation error because we're storing
 

00:53:47.920 --> 00:53:48.950 align:start position:0%
compilation error because we're storing
a<00:53:48.000><c> single</c><00:53:48.319><c> number</c>

00:53:48.950 --> 00:53:48.960 align:start position:0%
a single number
 

00:53:48.960 --> 00:53:51.510 align:start position:0%
a single number
in<00:53:49.040><c> this</c><00:53:49.280><c> array</c><00:53:50.319><c> so</c><00:53:50.559><c> to</c><00:53:50.720><c> fix</c><00:53:50.960><c> this</c><00:53:51.119><c> we</c><00:53:51.280><c> need</c><00:53:51.440><c> to</c>

00:53:51.510 --> 00:53:51.520 align:start position:0%
in this array so to fix this we need to
 

00:53:51.520 --> 00:53:52.790 align:start position:0%
in this array so to fix this we need to
remove<00:53:51.839><c> one</c>

00:53:52.790 --> 00:53:52.800 align:start position:0%
remove one
 

00:53:52.800 --> 00:53:55.190 align:start position:0%
remove one
because<00:53:53.119><c> arrays</c><00:53:53.520><c> are</c><00:53:53.920><c> reference</c><00:53:54.400><c> types</c><00:53:55.040><c> we</c>

00:53:55.190 --> 00:53:55.200 align:start position:0%
because arrays are reference types we
 

00:53:55.200 --> 00:53:57.510 align:start position:0%
because arrays are reference types we
need<00:53:55.359><c> to</c><00:53:55.440><c> use</c><00:53:55.839><c> the</c><00:53:56.000><c> new</c><00:53:56.319><c> operator</c><00:53:56.800><c> here</c>

00:53:57.510 --> 00:53:57.520 align:start position:0%
need to use the new operator here
 

00:53:57.520 --> 00:53:59.589 align:start position:0%
need to use the new operator here
then<00:53:57.760><c> we</c><00:53:57.920><c> repeat</c><00:53:58.240><c> the</c><00:53:58.400><c> type</c><00:53:58.720><c> one</c><00:53:58.880><c> more</c><00:53:59.040><c> time</c>

00:53:59.589 --> 00:53:59.599 align:start position:0%
then we repeat the type one more time
 

00:53:59.599 --> 00:54:00.630 align:start position:0%
then we repeat the type one more time
into<00:53:59.920><c> array</c>

00:54:00.630 --> 00:54:00.640 align:start position:0%
into array
 

00:54:00.640 --> 00:54:02.870 align:start position:0%
into array
and<00:54:00.800><c> here</c><00:54:01.040><c> in</c><00:54:01.200><c> square</c><00:54:01.520><c> brackets</c><00:54:01.920><c> we</c><00:54:02.079><c> specify</c>

00:54:02.870 --> 00:54:02.880 align:start position:0%
and here in square brackets we specify
 

00:54:02.880 --> 00:54:05.190 align:start position:0%
and here in square brackets we specify
the<00:54:03.200><c> size</c><00:54:03.599><c> or</c><00:54:03.760><c> the</c><00:54:03.920><c> length</c><00:54:04.240><c> of</c><00:54:04.319><c> this</c><00:54:04.559><c> array</c>

00:54:05.190 --> 00:54:05.200 align:start position:0%
the size or the length of this array
 

00:54:05.200 --> 00:54:06.710 align:start position:0%
the size or the length of this array
how<00:54:05.359><c> many</c><00:54:05.520><c> items</c><00:54:05.839><c> do</c><00:54:06.000><c> we</c><00:54:06.079><c> want</c><00:54:06.160><c> to</c><00:54:06.319><c> include</c><00:54:06.559><c> in</c>

00:54:06.710 --> 00:54:06.720 align:start position:0%
how many items do we want to include in
 

00:54:06.720 --> 00:54:08.230 align:start position:0%
how many items do we want to include in
this<00:54:06.880><c> array</c><00:54:07.359><c> let's</c><00:54:07.599><c> say</c>

00:54:08.230 --> 00:54:08.240 align:start position:0%
this array let's say
 

00:54:08.240 --> 00:54:10.870 align:start position:0%
this array let's say
five<00:54:09.359><c> also</c><00:54:09.680><c> we</c><00:54:09.839><c> should</c><00:54:10.079><c> change</c><00:54:10.480><c> the</c><00:54:10.640><c> name</c><00:54:10.800><c> of</c>

00:54:10.870 --> 00:54:10.880 align:start position:0%
five also we should change the name of
 

00:54:10.880 --> 00:54:12.309 align:start position:0%
five also we should change the name of
this<00:54:11.040><c> variable</c><00:54:11.440><c> from</c><00:54:11.680><c> number</c>

00:54:12.309 --> 00:54:12.319 align:start position:0%
this variable from number
 

00:54:12.319 --> 00:54:14.470 align:start position:0%
this variable from number
to<00:54:12.559><c> numbers</c><00:54:13.359><c> because</c><00:54:13.599><c> we're</c><00:54:13.839><c> dealing</c><00:54:14.160><c> with</c><00:54:14.319><c> a</c>

00:54:14.470 --> 00:54:14.480 align:start position:0%
to numbers because we're dealing with a
 

00:54:14.480 --> 00:54:15.510 align:start position:0%
to numbers because we're dealing with a
list<00:54:14.720><c> of</c><00:54:14.880><c> items</c>

00:54:15.510 --> 00:54:15.520 align:start position:0%
list of items
 

00:54:15.520 --> 00:54:17.670 align:start position:0%
list of items
so<00:54:15.839><c> always</c><00:54:16.480><c> pay</c><00:54:16.640><c> attention</c><00:54:17.040><c> to</c><00:54:17.200><c> the</c><00:54:17.359><c> name</c><00:54:17.599><c> of</c>

00:54:17.670 --> 00:54:17.680 align:start position:0%
so always pay attention to the name of
 

00:54:17.680 --> 00:54:19.349 align:start position:0%
so always pay attention to the name of
your<00:54:17.839><c> variables</c>

00:54:19.349 --> 00:54:19.359 align:start position:0%
your variables
 

00:54:19.359 --> 00:54:21.670 align:start position:0%
your variables
now<00:54:19.920><c> we</c><00:54:20.079><c> can</c><00:54:20.319><c> access</c><00:54:20.800><c> individual</c><00:54:21.280><c> items</c><00:54:21.599><c> in</c>

00:54:21.670 --> 00:54:21.680 align:start position:0%
now we can access individual items in
 

00:54:21.680 --> 00:54:23.430 align:start position:0%
now we can access individual items in
this<00:54:21.839><c> array</c><00:54:22.160><c> using</c><00:54:22.480><c> an</c><00:54:22.640><c> index</c>

00:54:23.430 --> 00:54:23.440 align:start position:0%
this array using an index
 

00:54:23.440 --> 00:54:26.710 align:start position:0%
this array using an index
so<00:54:23.599><c> we</c><00:54:23.839><c> type</c><00:54:24.319><c> numbers</c><00:54:25.440><c> square</c><00:54:25.760><c> brackets</c>

00:54:26.710 --> 00:54:26.720 align:start position:0%
so we type numbers square brackets
 

00:54:26.720 --> 00:54:28.790 align:start position:0%
so we type numbers square brackets
to<00:54:26.880><c> reference</c><00:54:27.280><c> the</c><00:54:27.359><c> first</c><00:54:27.680><c> element</c><00:54:28.079><c> or</c><00:54:28.480><c> first</c>

00:54:28.790 --> 00:54:28.800 align:start position:0%
to reference the first element or first
 

00:54:28.800 --> 00:54:29.990 align:start position:0%
to reference the first element or first
item<00:54:29.280><c> we</c><00:54:29.440><c> use</c>

00:54:29.990 --> 00:54:30.000 align:start position:0%
item we use
 

00:54:30.000 --> 00:54:33.030 align:start position:0%
item we use
zero<00:54:30.960><c> now</c><00:54:31.200><c> we</c><00:54:31.359><c> can</c><00:54:31.599><c> set</c><00:54:31.760><c> this</c><00:54:32.000><c> to</c>

00:54:33.030 --> 00:54:33.040 align:start position:0%
zero now we can set this to
 

00:54:33.040 --> 00:54:36.150 align:start position:0%
zero now we can set this to
a<00:54:33.200><c> value</c><00:54:33.520><c> like</c><00:54:33.760><c> one</c><00:54:34.800><c> similarly</c><00:54:35.280><c> we</c><00:54:35.440><c> can</c><00:54:35.599><c> set</c>

00:54:36.150 --> 00:54:36.160 align:start position:0%
a value like one similarly we can set
 

00:54:36.160 --> 00:54:39.750 align:start position:0%
a value like one similarly we can set
the<00:54:36.400><c> second</c><00:54:36.799><c> item</c><00:54:37.520><c> to</c><00:54:37.839><c> 2.</c><00:54:38.960><c> now</c><00:54:39.200><c> what</c><00:54:39.359><c> if</c><00:54:39.440><c> we</c><00:54:39.520><c> use</c>

00:54:39.750 --> 00:54:39.760 align:start position:0%
the second item to 2. now what if we use
 

00:54:39.760 --> 00:54:41.030 align:start position:0%
the second item to 2. now what if we use
an<00:54:39.920><c> invalid</c><00:54:40.480><c> index</c>

00:54:41.030 --> 00:54:41.040 align:start position:0%
an invalid index
 

00:54:41.040 --> 00:54:43.109 align:start position:0%
an invalid index
let's<00:54:41.200><c> say</c><00:54:41.440><c> 10</c><00:54:42.000><c> this</c><00:54:42.240><c> array</c><00:54:42.480><c> doesn't</c><00:54:42.720><c> have</c><00:54:42.880><c> 10</c>

00:54:43.109 --> 00:54:43.119 align:start position:0%
let's say 10 this array doesn't have 10
 

00:54:43.119 --> 00:54:44.390 align:start position:0%
let's say 10 this array doesn't have 10
items<00:54:43.839><c> so</c>

00:54:44.390 --> 00:54:44.400 align:start position:0%
items so
 

00:54:44.400 --> 00:54:47.109 align:start position:0%
items so
let's<00:54:44.559><c> see</c><00:54:44.720><c> what</c><00:54:44.880><c> happens</c><00:54:45.280><c> numbers</c><00:54:45.839><c> of</c><00:54:46.079><c> 10</c><00:54:46.960><c> we</c>

00:54:47.109 --> 00:54:47.119 align:start position:0%
let's see what happens numbers of 10 we
 

00:54:47.119 --> 00:54:48.549 align:start position:0%
let's see what happens numbers of 10 we
set<00:54:47.280><c> this</c><00:54:47.520><c> to</c>

00:54:48.549 --> 00:54:48.559 align:start position:0%
set this to
 

00:54:48.559 --> 00:54:52.390 align:start position:0%
set this to
3.<00:54:49.599><c> let</c><00:54:49.760><c> me</c><00:54:49.920><c> run</c><00:54:50.079><c> this</c><00:54:50.839><c> program</c>

00:54:52.390 --> 00:54:52.400 align:start position:0%
3. let me run this program
 

00:54:52.400 --> 00:54:55.190 align:start position:0%
3. let me run this program
we<00:54:52.559><c> get</c><00:54:52.960><c> an</c><00:54:53.119><c> exception</c><00:54:54.240><c> exceptions</c><00:54:54.799><c> are</c>

00:54:55.190 --> 00:54:55.200 align:start position:0%
we get an exception exceptions are
 

00:54:55.200 --> 00:54:56.950 align:start position:0%
we get an exception exceptions are
java's<00:54:55.599><c> way</c><00:54:55.839><c> to</c><00:54:55.920><c> report</c><00:54:56.319><c> errors</c>

00:54:56.950 --> 00:54:56.960 align:start position:0%
java's way to report errors
 

00:54:56.960 --> 00:54:58.950 align:start position:0%
java's way to report errors
so<00:54:57.200><c> in</c><00:54:57.280><c> this</c><00:54:57.440><c> case</c><00:54:57.760><c> an</c><00:54:57.920><c> exception</c><00:54:58.319><c> was</c><00:54:58.559><c> raised</c>

00:54:58.950 --> 00:54:58.960 align:start position:0%
so in this case an exception was raised
 

00:54:58.960 --> 00:55:00.630 align:start position:0%
so in this case an exception was raised
and<00:54:59.359><c> our</c><00:54:59.520><c> program</c><00:55:00.000><c> crashed</c>

00:55:00.630 --> 00:55:00.640 align:start position:0%
and our program crashed
 

00:55:00.640 --> 00:55:02.470 align:start position:0%
and our program crashed
we'll<00:55:00.880><c> talk</c><00:55:01.040><c> about</c><00:55:01.359><c> exceptions</c><00:55:01.839><c> in</c><00:55:02.000><c> detail</c>

00:55:02.470 --> 00:55:02.480 align:start position:0%
we'll talk about exceptions in detail
 

00:55:02.480 --> 00:55:03.910 align:start position:0%
we'll talk about exceptions in detail
later<00:55:02.799><c> in</c><00:55:02.960><c> the</c><00:55:03.040><c> course</c>

00:55:03.910 --> 00:55:03.920 align:start position:0%
later in the course
 

00:55:03.920 --> 00:55:07.270 align:start position:0%
later in the course
so<00:55:04.960><c> now</c><00:55:05.200><c> let's</c><00:55:05.359><c> remove</c><00:55:05.599><c> the</c><00:55:05.760><c> last</c><00:55:06.000><c> line</c><00:55:06.480><c> and</c>

00:55:07.270 --> 00:55:07.280 align:start position:0%
so now let's remove the last line and
 

00:55:07.280 --> 00:55:10.549 align:start position:0%
so now let's remove the last line and
print<00:55:07.599><c> this</c><00:55:07.760><c> array</c><00:55:08.319><c> so</c><00:55:08.640><c> s-o-u-t</c><00:55:09.599><c> tab</c>

00:55:10.549 --> 00:55:10.559 align:start position:0%
print this array so s-o-u-t tab
 

00:55:10.559 --> 00:55:14.789 align:start position:0%
print this array so s-o-u-t tab
numbers<00:55:11.760><c> let's</c><00:55:11.920><c> see</c><00:55:12.079><c> what</c><00:55:12.240><c> we</c><00:55:12.319><c> get</c>

00:55:14.789 --> 00:55:14.799 align:start position:0%
 
 

00:55:14.799 --> 00:55:16.710 align:start position:0%
 
we<00:55:14.960><c> get</c><00:55:15.119><c> this</c><00:55:15.359><c> weird</c><00:55:15.760><c> string</c><00:55:16.160><c> instead</c><00:55:16.480><c> of</c><00:55:16.559><c> the</c>

00:55:16.710 --> 00:55:16.720 align:start position:0%
we get this weird string instead of the
 

00:55:16.720 --> 00:55:17.990 align:start position:0%
we get this weird string instead of the
items<00:55:17.040><c> in</c><00:55:17.119><c> our</c><00:55:17.280><c> array</c>

00:55:17.990 --> 00:55:18.000 align:start position:0%
items in our array
 

00:55:18.000 --> 00:55:20.150 align:start position:0%
items in our array
here's<00:55:18.240><c> the</c><00:55:18.400><c> reason</c><00:55:19.200><c> by</c><00:55:19.440><c> default</c><00:55:19.839><c> when</c><00:55:20.000><c> we</c>

00:55:20.150 --> 00:55:20.160 align:start position:0%
here's the reason by default when we
 

00:55:20.160 --> 00:55:21.270 align:start position:0%
here's the reason by default when we
print<00:55:20.480><c> an</c><00:55:20.640><c> array</c>

00:55:21.270 --> 00:55:21.280 align:start position:0%
print an array
 

00:55:21.280 --> 00:55:22.870 align:start position:0%
print an array
java<00:55:21.599><c> returns</c><00:55:22.000><c> the</c><00:55:22.160><c> string</c><00:55:22.480><c> which</c><00:55:22.720><c> is</c>

00:55:22.870 --> 00:55:22.880 align:start position:0%
java returns the string which is
 

00:55:22.880 --> 00:55:25.349 align:start position:0%
java returns the string which is
calculated<00:55:23.599><c> based</c><00:55:24.079><c> on</c><00:55:24.240><c> the</c><00:55:24.480><c> address</c><00:55:24.960><c> of</c><00:55:25.040><c> this</c>

00:55:25.349 --> 00:55:25.359 align:start position:0%
calculated based on the address of this
 

00:55:25.359 --> 00:55:27.750 align:start position:0%
calculated based on the address of this
object<00:55:25.839><c> in</c><00:55:25.920><c> memory</c><00:55:26.799><c> so</c><00:55:26.960><c> if</c><00:55:27.119><c> you</c><00:55:27.200><c> have</c><00:55:27.359><c> another</c>

00:55:27.750 --> 00:55:27.760 align:start position:0%
object in memory so if you have another
 

00:55:27.760 --> 00:55:29.109 align:start position:0%
object in memory so if you have another
array<00:55:28.079><c> and</c><00:55:28.240><c> we</c><00:55:28.400><c> print</c><00:55:28.640><c> that</c>

00:55:29.109 --> 00:55:29.119 align:start position:0%
array and we print that
 

00:55:29.119 --> 00:55:30.710 align:start position:0%
array and we print that
we're<00:55:29.280><c> going</c><00:55:29.359><c> to</c><00:55:29.440><c> see</c><00:55:29.599><c> something</c><00:55:29.920><c> different</c>

00:55:30.710 --> 00:55:30.720 align:start position:0%
we're going to see something different
 

00:55:30.720 --> 00:55:32.549 align:start position:0%
we're going to see something different
because<00:55:31.040><c> each</c><00:55:31.359><c> object</c><00:55:31.680><c> is</c><00:55:31.760><c> going</c><00:55:31.920><c> to</c><00:55:32.000><c> be</c><00:55:32.240><c> in</c><00:55:32.400><c> a</c>

00:55:32.549 --> 00:55:32.559 align:start position:0%
because each object is going to be in a
 

00:55:32.559 --> 00:55:34.710 align:start position:0%
because each object is going to be in a
different<00:55:32.960><c> memory</c><00:55:33.359><c> space</c><00:55:33.920><c> okay</c>

00:55:34.710 --> 00:55:34.720 align:start position:0%
different memory space okay
 

00:55:34.720 --> 00:55:36.470 align:start position:0%
different memory space okay
now<00:55:34.960><c> how</c><00:55:35.119><c> can</c><00:55:35.280><c> we</c><00:55:35.440><c> see</c><00:55:35.599><c> the</c><00:55:35.760><c> actual</c><00:55:36.079><c> items</c><00:55:36.400><c> in</c>

00:55:36.470 --> 00:55:36.480 align:start position:0%
now how can we see the actual items in
 

00:55:36.480 --> 00:55:37.910 align:start position:0%
now how can we see the actual items in
this<00:55:36.640><c> array</c><00:55:37.200><c> well</c>

00:55:37.910 --> 00:55:37.920 align:start position:0%
this array well
 

00:55:37.920 --> 00:55:41.109 align:start position:0%
this array well
we<00:55:38.079><c> have</c><00:55:38.319><c> a</c><00:55:38.559><c> class</c><00:55:39.119><c> in</c><00:55:39.280><c> java</c><00:55:39.839><c> called</c><00:55:40.480><c> arrays</c>

00:55:41.109 --> 00:55:41.119 align:start position:0%
we have a class in java called arrays
 

00:55:41.119 --> 00:55:43.910 align:start position:0%
we have a class in java called arrays
let<00:55:41.280><c> me</c><00:55:41.440><c> show</c><00:55:41.599><c> you</c><00:55:41.920><c> arrays</c><00:55:43.119><c> so</c><00:55:43.280><c> this</c><00:55:43.520><c> class</c><00:55:43.839><c> is</c>

00:55:43.910 --> 00:55:43.920 align:start position:0%
let me show you arrays so this class is
 

00:55:43.920 --> 00:55:44.549 align:start position:0%
let me show you arrays so this class is
defined

00:55:44.549 --> 00:55:44.559 align:start position:0%
defined
 

00:55:44.559 --> 00:55:48.150 align:start position:0%
defined
in<00:55:44.799><c> java.util</c><00:55:45.760><c> package</c><00:55:46.640><c> let's</c><00:55:46.880><c> press</c><00:55:47.200><c> enter</c>

00:55:48.150 --> 00:55:48.160 align:start position:0%
in java.util package let's press enter
 

00:55:48.160 --> 00:55:50.390 align:start position:0%
in java.util package let's press enter
now<00:55:48.720><c> this</c><00:55:48.960><c> is</c><00:55:49.119><c> imported</c><00:55:49.520><c> on</c><00:55:49.680><c> the</c><00:55:49.760><c> top</c>

00:55:50.390 --> 00:55:50.400 align:start position:0%
now this is imported on the top
 

00:55:50.400 --> 00:55:51.270 align:start position:0%
now this is imported on the top
beautiful

00:55:51.270 --> 00:55:51.280 align:start position:0%
beautiful
 

00:55:51.280 --> 00:55:53.430 align:start position:0%
beautiful
so<00:55:51.440><c> we</c><00:55:51.599><c> can</c><00:55:51.680><c> use</c><00:55:51.839><c> the</c><00:55:52.000><c> dot</c><00:55:52.319><c> operator</c><00:55:52.720><c> to</c><00:55:52.960><c> access</c>

00:55:53.430 --> 00:55:53.440 align:start position:0%
so we can use the dot operator to access
 

00:55:53.440 --> 00:55:55.349 align:start position:0%
so we can use the dot operator to access
the<00:55:53.680><c> members</c><00:55:54.079><c> of</c><00:55:54.160><c> this</c><00:55:54.400><c> class</c>

00:55:55.349 --> 00:55:55.359 align:start position:0%
the members of this class
 

00:55:55.359 --> 00:55:58.630 align:start position:0%
the members of this class
here<00:55:55.520><c> we</c><00:55:55.680><c> have</c><00:55:55.839><c> a</c><00:55:55.920><c> method</c><00:55:56.319><c> called</c><00:55:56.880><c> to</c><00:55:57.520><c> string</c>

00:55:58.630 --> 00:55:58.640 align:start position:0%
here we have a method called to string
 

00:55:58.640 --> 00:56:00.230 align:start position:0%
here we have a method called to string
now<00:55:58.880><c> as</c><00:55:59.040><c> you</c><00:55:59.119><c> see</c><00:55:59.359><c> this</c><00:55:59.680><c> method</c><00:56:00.000><c> is</c>

00:56:00.230 --> 00:56:00.240 align:start position:0%
now as you see this method is
 

00:56:00.240 --> 00:56:02.789 align:start position:0%
now as you see this method is
implemented<00:56:01.200><c> multiple</c><00:56:01.680><c> times</c>

00:56:02.789 --> 00:56:02.799 align:start position:0%
implemented multiple times
 

00:56:02.799 --> 00:56:04.150 align:start position:0%
implemented multiple times
so<00:56:02.960><c> in</c><00:56:03.040><c> the</c><00:56:03.119><c> first</c><00:56:03.359><c> implementation</c><00:56:04.000><c> this</c>

00:56:04.150 --> 00:56:04.160 align:start position:0%
so in the first implementation this
 

00:56:04.160 --> 00:56:06.309 align:start position:0%
so in the first implementation this
method<00:56:04.559><c> gets</c><00:56:05.119><c> a</c><00:56:05.280><c> float</c><00:56:05.680><c> array</c>

00:56:06.309 --> 00:56:06.319 align:start position:0%
method gets a float array
 

00:56:06.319 --> 00:56:08.390 align:start position:0%
method gets a float array
in<00:56:06.480><c> the</c><00:56:06.559><c> second</c><00:56:06.880><c> implementation</c><00:56:07.520><c> it</c><00:56:07.599><c> takes</c><00:56:08.079><c> an</c>

00:56:08.390 --> 00:56:08.400 align:start position:0%
in the second implementation it takes an
 

00:56:08.400 --> 00:56:09.990 align:start position:0%
in the second implementation it takes an
integer<00:56:08.799><c> array</c><00:56:09.200><c> and</c><00:56:09.359><c> so</c><00:56:09.520><c> on</c>

00:56:09.990 --> 00:56:10.000 align:start position:0%
integer array and so on
 

00:56:10.000 --> 00:56:11.670 align:start position:0%
integer array and so on
so<00:56:10.160><c> for</c><00:56:10.400><c> all</c><00:56:10.559><c> primitive</c><00:56:11.040><c> types</c><00:56:11.280><c> as</c><00:56:11.440><c> well</c><00:56:11.599><c> as</c>

00:56:11.670 --> 00:56:11.680 align:start position:0%
so for all primitive types as well as
 

00:56:11.680 --> 00:56:13.349 align:start position:0%
so for all primitive types as well as
reference<00:56:12.079><c> types</c><00:56:12.559><c> this</c><00:56:12.799><c> method</c><00:56:13.200><c> is</c>

00:56:13.349 --> 00:56:13.359 align:start position:0%
reference types this method is
 

00:56:13.359 --> 00:56:15.190 align:start position:0%
reference types this method is
implemented<00:56:14.000><c> multiple</c><00:56:14.640><c> times</c>

00:56:15.190 --> 00:56:15.200 align:start position:0%
implemented multiple times
 

00:56:15.200 --> 00:56:18.390 align:start position:0%
implemented multiple times
this<00:56:15.440><c> is</c><00:56:15.520><c> what</c><00:56:15.680><c> we</c><00:56:15.760><c> call</c><00:56:16.319><c> method</c><00:56:16.960><c> overloading</c>

00:56:18.390 --> 00:56:18.400 align:start position:0%
this is what we call method overloading
 

00:56:18.400 --> 00:56:21.510 align:start position:0%
this is what we call method overloading
now<00:56:18.720><c> we</c><00:56:18.880><c> can</c><00:56:19.119><c> call</c><00:56:19.280><c> this</c><00:56:19.520><c> method</c><00:56:19.920><c> and</c><00:56:20.079><c> pass</c><00:56:20.960><c> our</c>

00:56:21.510 --> 00:56:21.520 align:start position:0%
now we can call this method and pass our
 

00:56:21.520 --> 00:56:24.549 align:start position:0%
now we can call this method and pass our
integer<00:56:22.000><c> array</c><00:56:24.000><c> and</c>

00:56:24.549 --> 00:56:24.559 align:start position:0%
integer array and
 

00:56:24.559 --> 00:56:26.150 align:start position:0%
integer array and
this<00:56:24.720><c> will</c><00:56:24.960><c> return</c><00:56:25.520><c> the</c><00:56:25.760><c> string</c>

00:56:26.150 --> 00:56:26.160 align:start position:0%
this will return the string
 

00:56:26.160 --> 00:56:27.750 align:start position:0%
this will return the string
representation<00:56:26.880><c> of</c><00:56:26.960><c> this</c><00:56:27.200><c> array</c>

00:56:27.750 --> 00:56:27.760 align:start position:0%
representation of this array
 

00:56:27.760 --> 00:56:30.390 align:start position:0%
representation of this array
so<00:56:27.920><c> we</c><00:56:28.079><c> can</c><00:56:28.240><c> cut</c><00:56:28.400><c> this</c><00:56:28.559><c> from</c><00:56:28.720><c> here</c><00:56:29.520><c> and</c><00:56:29.839><c> pass</c><00:56:30.160><c> it</c>

00:56:30.390 --> 00:56:30.400 align:start position:0%
so we can cut this from here and pass it
 

00:56:30.400 --> 00:56:31.829 align:start position:0%
so we can cut this from here and pass it
to<00:56:30.559><c> our</c><00:56:30.799><c> print</c><00:56:31.040><c> method</c>

00:56:31.829 --> 00:56:31.839 align:start position:0%
to our print method
 

00:56:31.839 --> 00:56:34.789 align:start position:0%
to our print method
like<00:56:32.079><c> this</c><00:56:33.200><c> now</c><00:56:33.839><c> let's</c><00:56:34.079><c> run</c><00:56:34.240><c> the</c><00:56:34.319><c> program</c><00:56:34.640><c> one</c>

00:56:34.789 --> 00:56:34.799 align:start position:0%
like this now let's run the program one
 

00:56:34.799 --> 00:56:35.990 align:start position:0%
like this now let's run the program one
more<00:56:34.960><c> time</c>

00:56:35.990 --> 00:56:36.000 align:start position:0%
more time
 

00:56:36.000 --> 00:56:38.870 align:start position:0%
more time
and<00:56:37.040><c> here's</c><00:56:37.280><c> our</c><00:56:37.440><c> array</c><00:56:37.760><c> beautiful</c><00:56:38.559><c> so</c><00:56:38.720><c> the</c>

00:56:38.870 --> 00:56:38.880 align:start position:0%
and here's our array beautiful so the
 

00:56:38.880 --> 00:56:40.470 align:start position:0%
and here's our array beautiful so the
first<00:56:39.040><c> two</c><00:56:39.200><c> items</c><00:56:39.520><c> are</c><00:56:39.680><c> initialized</c>

00:56:40.470 --> 00:56:40.480 align:start position:0%
first two items are initialized
 

00:56:40.480 --> 00:56:42.789 align:start position:0%
first two items are initialized
the<00:56:40.720><c> others</c><00:56:41.119><c> are</c><00:56:41.280><c> set</c><00:56:41.520><c> to</c><00:56:41.680><c> zero</c><00:56:42.000><c> by</c><00:56:42.240><c> default</c>

00:56:42.789 --> 00:56:42.799 align:start position:0%
the others are set to zero by default
 

00:56:42.799 --> 00:56:43.990 align:start position:0%
the others are set to zero by default
because<00:56:42.960><c> here</c><00:56:43.200><c> we're</c><00:56:43.359><c> dealing</c><00:56:43.599><c> with</c><00:56:43.760><c> an</c>

00:56:43.990 --> 00:56:44.000 align:start position:0%
because here we're dealing with an
 

00:56:44.000 --> 00:56:46.549 align:start position:0%
because here we're dealing with an
integer<00:56:44.400><c> array</c><00:56:45.040><c> if</c><00:56:45.200><c> we</c><00:56:45.280><c> had</c><00:56:45.440><c> a</c><00:56:45.599><c> boolean</c><00:56:46.079><c> array</c>

00:56:46.549 --> 00:56:46.559 align:start position:0%
integer array if we had a boolean array
 

00:56:46.559 --> 00:56:48.789 align:start position:0%
integer array if we had a boolean array
all<00:56:46.799><c> items</c><00:56:47.200><c> by</c><00:56:47.359><c> default</c><00:56:47.760><c> get</c><00:56:48.000><c> initialized</c>

00:56:48.789 --> 00:56:48.799 align:start position:0%
all items by default get initialized
 

00:56:48.799 --> 00:56:51.349 align:start position:0%
all items by default get initialized
to<00:56:49.040><c> false</c><00:56:49.839><c> if</c><00:56:49.920><c> you</c><00:56:50.079><c> have</c><00:56:50.160><c> a</c><00:56:50.319><c> string</c><00:56:50.640><c> array</c><00:56:51.119><c> all</c>

00:56:51.349 --> 00:56:51.359 align:start position:0%
to false if you have a string array all
 

00:56:51.359 --> 00:56:52.950 align:start position:0%
to false if you have a string array all
items<00:56:51.680><c> get</c><00:56:51.920><c> initialized</c><00:56:52.559><c> to</c><00:56:52.720><c> an</c>

00:56:52.950 --> 00:56:52.960 align:start position:0%
items get initialized to an
 

00:56:52.960 --> 00:56:56.150 align:start position:0%
items get initialized to an
empty<00:56:53.359><c> string</c><00:56:54.000><c> okay</c><00:56:55.280><c> now</c>

00:56:56.150 --> 00:56:56.160 align:start position:0%
empty string okay now
 

00:56:56.160 --> 00:56:58.710 align:start position:0%
empty string okay now
this<00:56:56.400><c> syntax</c><00:56:56.960><c> for</c><00:56:57.599><c> creating</c><00:56:58.319><c> and</c>

00:56:58.710 --> 00:56:58.720 align:start position:0%
this syntax for creating and
 

00:56:58.720 --> 00:57:00.230 align:start position:0%
this syntax for creating and
initializing<00:56:59.280><c> an</c><00:56:59.440><c> array</c><00:56:59.680><c> is</c><00:56:59.839><c> a</c><00:56:59.920><c> little</c><00:57:00.079><c> bit</c>

00:57:00.230 --> 00:57:00.240 align:start position:0%
initializing an array is a little bit
 

00:57:00.240 --> 00:57:00.870 align:start position:0%
initializing an array is a little bit
tedious

00:57:00.870 --> 00:57:00.880 align:start position:0%
tedious
 

00:57:00.880 --> 00:57:03.190 align:start position:0%
tedious
and<00:57:01.040><c> it's</c><00:57:01.200><c> an</c><00:57:01.440><c> older</c><00:57:01.839><c> syntax</c><00:57:02.720><c> there</c><00:57:02.960><c> is</c><00:57:03.040><c> a</c>

00:57:03.190 --> 00:57:03.200 align:start position:0%
and it's an older syntax there is a
 

00:57:03.200 --> 00:57:03.910 align:start position:0%
and it's an older syntax there is a
newer<00:57:03.520><c> way</c>

00:57:03.910 --> 00:57:03.920 align:start position:0%
newer way
 

00:57:03.920 --> 00:57:05.670 align:start position:0%
newer way
to<00:57:04.079><c> initialize</c><00:57:04.640><c> an</c><00:57:04.799><c> array</c><00:57:05.119><c> if</c><00:57:05.200><c> we</c><00:57:05.359><c> know</c><00:57:05.520><c> the</c>

00:57:05.670 --> 00:57:05.680 align:start position:0%
to initialize an array if we know the
 

00:57:05.680 --> 00:57:07.109 align:start position:0%
to initialize an array if we know the
items<00:57:06.240><c> ahead</c><00:57:06.559><c> of</c><00:57:06.720><c> time</c>

00:57:07.109 --> 00:57:07.119 align:start position:0%
items ahead of time
 

00:57:07.119 --> 00:57:09.190 align:start position:0%
items ahead of time
like<00:57:07.280><c> in</c><00:57:07.359><c> this</c><00:57:07.599><c> case</c><00:57:08.400><c> so</c><00:57:08.559><c> i'm</c><00:57:08.720><c> going</c><00:57:08.799><c> to</c><00:57:08.880><c> remove</c>

00:57:09.190 --> 00:57:09.200 align:start position:0%
like in this case so i'm going to remove
 

00:57:09.200 --> 00:57:10.789 align:start position:0%
like in this case so i'm going to remove
these<00:57:09.359><c> two</c><00:57:09.599><c> lines</c>

00:57:10.789 --> 00:57:10.799 align:start position:0%
these two lines
 

00:57:10.799 --> 00:57:12.390 align:start position:0%
these two lines
i'm<00:57:10.960><c> also</c><00:57:11.200><c> going</c><00:57:11.280><c> to</c><00:57:11.359><c> remove</c><00:57:12.000><c> the</c><00:57:12.160><c> new</c>

00:57:12.390 --> 00:57:12.400 align:start position:0%
i'm also going to remove the new
 

00:57:12.400 --> 00:57:14.710 align:start position:0%
i'm also going to remove the new
operator<00:57:13.520><c> here</c><00:57:13.680><c> we</c><00:57:13.839><c> use</c>

00:57:14.710 --> 00:57:14.720 align:start position:0%
operator here we use
 

00:57:14.720 --> 00:57:17.349 align:start position:0%
operator here we use
curly<00:57:15.040><c> braces</c><00:57:15.760><c> and</c><00:57:16.319><c> inside</c><00:57:16.640><c> these</c><00:57:16.799><c> braces</c><00:57:17.200><c> we</c>

00:57:17.349 --> 00:57:17.359 align:start position:0%
curly braces and inside these braces we
 

00:57:17.359 --> 00:57:19.109 align:start position:0%
curly braces and inside these braces we
add<00:57:17.599><c> all</c><00:57:17.760><c> the</c><00:57:17.839><c> items</c><00:57:18.160><c> in</c><00:57:18.240><c> this</c><00:57:18.480><c> array</c>

00:57:19.109 --> 00:57:19.119 align:start position:0%
add all the items in this array
 

00:57:19.119 --> 00:57:22.549 align:start position:0%
add all the items in this array
let's<00:57:19.280><c> say</c><00:57:19.520><c> two</c><00:57:19.920><c> three</c><00:57:20.400><c> five</c><00:57:20.880><c> one</c><00:57:21.440><c> and</c><00:57:21.599><c> four</c>

00:57:22.549 --> 00:57:22.559 align:start position:0%
let's say two three five one and four
 

00:57:22.559 --> 00:57:24.710 align:start position:0%
let's say two three five one and four
now<00:57:22.720><c> we</c><00:57:22.880><c> have</c><00:57:23.040><c> five</c><00:57:23.280><c> items</c><00:57:23.920><c> so</c><00:57:24.079><c> the</c><00:57:24.319><c> length</c><00:57:24.640><c> of</c>

00:57:24.710 --> 00:57:24.720 align:start position:0%
now we have five items so the length of
 

00:57:24.720 --> 00:57:25.990 align:start position:0%
now we have five items so the length of
this<00:57:24.960><c> array</c><00:57:25.440><c> is</c><00:57:25.599><c> going</c><00:57:25.680><c> to</c><00:57:25.760><c> be</c>

00:57:25.990 --> 00:57:26.000 align:start position:0%
this array is going to be
 

00:57:26.000 --> 00:57:28.150 align:start position:0%
this array is going to be
5.<00:57:26.799><c> we</c><00:57:26.960><c> can</c><00:57:27.119><c> read</c><00:57:27.280><c> that</c><00:57:27.520><c> using</c><00:57:27.760><c> the</c><00:57:27.839><c> length</c>

00:57:28.150 --> 00:57:28.160 align:start position:0%
5. we can read that using the length
 

00:57:28.160 --> 00:57:30.230 align:start position:0%
5. we can read that using the length
field<00:57:28.799><c> so</c><00:57:28.960><c> if</c><00:57:29.040><c> we</c><00:57:29.200><c> type</c><00:57:29.520><c> numbers</c>

00:57:30.230 --> 00:57:30.240 align:start position:0%
field so if we type numbers
 

00:57:30.240 --> 00:57:33.270 align:start position:0%
field so if we type numbers
dot<00:57:31.040><c> look</c><00:57:31.280><c> here</c><00:57:31.520><c> we</c><00:57:31.680><c> have</c><00:57:32.400><c> this</c><00:57:32.640><c> field</c><00:57:33.040><c> look</c><00:57:33.200><c> at</c>

00:57:33.270 --> 00:57:33.280 align:start position:0%
dot look here we have this field look at
 

00:57:33.280 --> 00:57:34.150 align:start position:0%
dot look here we have this field look at
the<00:57:33.440><c> icon</c><00:57:33.760><c> it's</c><00:57:33.920><c> an</c>

00:57:34.150 --> 00:57:34.160 align:start position:0%
the icon it's an
 

00:57:34.160 --> 00:57:36.069 align:start position:0%
the icon it's an
f<00:57:34.720><c> so</c><00:57:34.880><c> this</c><00:57:35.040><c> is</c><00:57:35.200><c> a</c><00:57:35.280><c> field</c><00:57:35.520><c> which</c><00:57:35.680><c> is</c><00:57:35.839><c> like</c><00:57:36.000><c> a</c>

00:57:36.069 --> 00:57:36.079 align:start position:0%
f so this is a field which is like a
 

00:57:36.079 --> 00:57:37.589 align:start position:0%
f so this is a field which is like a
variable<00:57:36.559><c> in</c><00:57:36.640><c> a</c><00:57:36.799><c> class</c>

00:57:37.589 --> 00:57:37.599 align:start position:0%
variable in a class
 

00:57:37.599 --> 00:57:40.230 align:start position:0%
variable in a class
and<00:57:37.760><c> the</c><00:57:37.920><c> type</c><00:57:38.240><c> of</c><00:57:38.319><c> this</c><00:57:38.480><c> field</c><00:57:39.040><c> as</c><00:57:39.200><c> an</c><00:57:39.359><c> integer</c>

00:57:40.230 --> 00:57:40.240 align:start position:0%
and the type of this field as an integer
 

00:57:40.240 --> 00:57:41.910 align:start position:0%
and the type of this field as an integer
so<00:57:40.400><c> this</c><00:57:40.559><c> returns</c><00:57:40.960><c> the</c><00:57:41.040><c> number</c><00:57:41.280><c> of</c><00:57:41.520><c> items</c><00:57:41.839><c> in</c>

00:57:41.910 --> 00:57:41.920 align:start position:0%
so this returns the number of items in
 

00:57:41.920 --> 00:57:43.030 align:start position:0%
so this returns the number of items in
this<00:57:42.160><c> array</c>

00:57:43.030 --> 00:57:43.040 align:start position:0%
this array
 

00:57:43.040 --> 00:57:46.150 align:start position:0%
this array
let's<00:57:43.280><c> get</c><00:57:43.520><c> that</c><00:57:43.839><c> and</c><00:57:44.480><c> print</c><00:57:44.799><c> it</c><00:57:44.960><c> using</c><00:57:46.000><c> our</c>

00:57:46.150 --> 00:57:46.160 align:start position:0%
let's get that and print it using our
 

00:57:46.160 --> 00:57:46.789 align:start position:0%
let's get that and print it using our
print

00:57:46.789 --> 00:57:46.799 align:start position:0%
print
 

00:57:46.799 --> 00:57:51.510 align:start position:0%
print
method<00:57:48.000><c> like</c><00:57:48.240><c> this</c><00:57:49.280><c> take</c><00:57:49.520><c> a</c><00:57:49.599><c> look</c>

00:57:51.510 --> 00:57:51.520 align:start position:0%
method like this take a look
 

00:57:51.520 --> 00:57:55.190 align:start position:0%
method like this take a look
so<00:57:51.760><c> we</c><00:57:51.920><c> get</c><00:57:52.400><c> 5.</c><00:57:53.520><c> now</c><00:57:53.760><c> in</c><00:57:53.920><c> java</c><00:57:54.400><c> arrays</c><00:57:54.880><c> have</c><00:57:55.040><c> a</c>

00:57:55.190 --> 00:57:55.200 align:start position:0%
so we get 5. now in java arrays have a
 

00:57:55.200 --> 00:57:56.309 align:start position:0%
so we get 5. now in java arrays have a
fixed<00:57:55.599><c> size</c>

00:57:56.309 --> 00:57:56.319 align:start position:0%
fixed size
 

00:57:56.319 --> 00:57:58.549 align:start position:0%
fixed size
so<00:57:56.640><c> once</c><00:57:56.880><c> we</c><00:57:57.040><c> create</c><00:57:57.359><c> them</c><00:57:57.599><c> we</c><00:57:57.760><c> cannot</c><00:57:58.079><c> add</c><00:57:58.319><c> or</c>

00:57:58.549 --> 00:57:58.559 align:start position:0%
so once we create them we cannot add or
 

00:57:58.559 --> 00:58:00.390 align:start position:0%
so once we create them we cannot add or
remove<00:57:58.960><c> additional</c><00:57:59.440><c> items</c><00:57:59.839><c> to</c><00:58:00.000><c> them</c>

00:58:00.390 --> 00:58:00.400 align:start position:0%
remove additional items to them
 

00:58:00.400 --> 00:58:02.390 align:start position:0%
remove additional items to them
they<00:58:00.559><c> have</c><00:58:00.720><c> a</c><00:58:00.880><c> fixed</c><00:58:01.280><c> length</c><00:58:02.000><c> if</c><00:58:02.160><c> you</c><00:58:02.240><c> want</c><00:58:02.319><c> to</c>

00:58:02.390 --> 00:58:02.400 align:start position:0%
they have a fixed length if you want to
 

00:58:02.400 --> 00:58:04.150 align:start position:0%
they have a fixed length if you want to
be<00:58:02.559><c> able</c><00:58:02.720><c> to</c><00:58:02.880><c> add</c><00:58:03.200><c> or</c><00:58:03.359><c> remove</c><00:58:03.760><c> additional</c>

00:58:04.150 --> 00:58:04.160 align:start position:0%
be able to add or remove additional
 

00:58:04.160 --> 00:58:05.349 align:start position:0%
be able to add or remove additional
items<00:58:04.480><c> from</c><00:58:04.640><c> an</c><00:58:04.799><c> array</c>

00:58:05.349 --> 00:58:05.359 align:start position:0%
items from an array
 

00:58:05.359 --> 00:58:06.710 align:start position:0%
items from an array
you<00:58:05.520><c> should</c><00:58:05.680><c> use</c><00:58:05.839><c> one</c><00:58:06.000><c> of</c><00:58:06.079><c> the</c><00:58:06.240><c> collection</c>

00:58:06.710 --> 00:58:06.720 align:start position:0%
you should use one of the collection
 

00:58:06.720 --> 00:58:08.470 align:start position:0%
you should use one of the collection
classes<00:58:07.200><c> that</c><00:58:07.359><c> we'll</c><00:58:07.520><c> talk</c><00:58:07.760><c> about</c><00:58:08.079><c> later</c><00:58:08.400><c> in</c>

00:58:08.470 --> 00:58:08.480 align:start position:0%
classes that we'll talk about later in
 

00:58:08.480 --> 00:58:09.510 align:start position:0%
classes that we'll talk about later in
the<00:58:08.640><c> course</c>

00:58:09.510 --> 00:58:09.520 align:start position:0%
the course
 

00:58:09.520 --> 00:58:11.349 align:start position:0%
the course
for<00:58:09.760><c> now</c><00:58:10.160><c> all</c><00:58:10.319><c> i</c><00:58:10.480><c> want</c><00:58:10.559><c> you</c><00:58:10.720><c> to</c><00:58:10.799><c> remember</c><00:58:11.200><c> is</c>

00:58:11.349 --> 00:58:11.359 align:start position:0%
for now all i want you to remember is
 

00:58:11.359 --> 00:58:12.950 align:start position:0%
for now all i want you to remember is
that<00:58:11.520><c> arrays</c><00:58:12.079><c> have</c><00:58:12.319><c> a</c><00:58:12.400><c> fixed</c>

00:58:12.950 --> 00:58:12.960 align:start position:0%
that arrays have a fixed
 

00:58:12.960 --> 00:58:15.349 align:start position:0%
that arrays have a fixed
length<00:58:13.920><c> now</c><00:58:14.160><c> currently</c><00:58:14.480><c> our</c><00:58:14.640><c> array</c><00:58:14.960><c> is</c><00:58:15.119><c> not</c>

00:58:15.349 --> 00:58:15.359 align:start position:0%
length now currently our array is not
 

00:58:15.359 --> 00:58:16.950 align:start position:0%
length now currently our array is not
sorted<00:58:15.920><c> these</c><00:58:16.160><c> numbers</c><00:58:16.640><c> are</c>

00:58:16.950 --> 00:58:16.960 align:start position:0%
sorted these numbers are
 

00:58:16.960 --> 00:58:19.030 align:start position:0%
sorted these numbers are
in<00:58:17.119><c> some</c><00:58:17.280><c> kind</c><00:58:17.440><c> of</c><00:58:17.599><c> random</c><00:58:17.920><c> order</c><00:58:18.640><c> we</c><00:58:18.799><c> can</c>

00:58:19.030 --> 00:58:19.040 align:start position:0%
in some kind of random order we can
 

00:58:19.040 --> 00:58:21.190 align:start position:0%
in some kind of random order we can
easily<00:58:19.440><c> sort</c><00:58:19.680><c> this</c><00:58:19.920><c> array</c><00:58:20.319><c> using</c><00:58:20.640><c> the</c><00:58:20.799><c> sort</c>

00:58:21.190 --> 00:58:21.200 align:start position:0%
easily sort this array using the sort
 

00:58:21.200 --> 00:58:21.750 align:start position:0%
easily sort this array using the sort
method

00:58:21.750 --> 00:58:21.760 align:start position:0%
method
 

00:58:21.760 --> 00:58:24.549 align:start position:0%
method
of<00:58:21.920><c> the</c><00:58:22.079><c> arrays</c><00:58:22.559><c> class</c><00:58:22.880><c> let</c><00:58:22.960><c> me</c><00:58:23.119><c> show</c><00:58:23.280><c> you</c><00:58:23.920><c> so</c>

00:58:24.549 --> 00:58:24.559 align:start position:0%
of the arrays class let me show you so
 

00:58:24.559 --> 00:58:26.710 align:start position:0%
of the arrays class let me show you so
i'm<00:58:24.720><c> going</c><00:58:24.799><c> to</c><00:58:24.880><c> remove</c><00:58:25.119><c> this</c><00:58:25.280><c> line</c>

00:58:26.710 --> 00:58:26.720 align:start position:0%
i'm going to remove this line
 

00:58:26.720 --> 00:58:29.910 align:start position:0%
i'm going to remove this line
and<00:58:26.960><c> call</c><00:58:27.440><c> arrays</c><00:58:28.319><c> dot</c><00:58:28.960><c> sort</c>

00:58:29.910 --> 00:58:29.920 align:start position:0%
and call arrays dot sort
 

00:58:29.920 --> 00:58:31.670 align:start position:0%
and call arrays dot sort
once<00:58:30.160><c> again</c><00:58:30.480><c> you</c><00:58:30.559><c> can</c><00:58:30.720><c> see</c><00:58:30.880><c> this</c><00:58:31.040><c> method</c><00:58:31.440><c> is</c>

00:58:31.670 --> 00:58:31.680 align:start position:0%
once again you can see this method is
 

00:58:31.680 --> 00:58:33.109 align:start position:0%
once again you can see this method is
overloaded<00:58:32.559><c> because</c>

00:58:33.109 --> 00:58:33.119 align:start position:0%
overloaded because
 

00:58:33.119 --> 00:58:34.630 align:start position:0%
overloaded because
it's<00:58:33.440><c> implemented</c><00:58:34.160><c> with</c><00:58:34.319><c> different</c>

00:58:34.630 --> 00:58:34.640 align:start position:0%
it's implemented with different
 

00:58:34.640 --> 00:58:36.230 align:start position:0%
it's implemented with different
parameter<00:58:35.200><c> types</c>

00:58:36.230 --> 00:58:36.240 align:start position:0%
parameter types
 

00:58:36.240 --> 00:58:39.030 align:start position:0%
parameter types
so<00:58:36.720><c> recall</c><00:58:37.040><c> this</c><00:58:37.200><c> method</c><00:58:37.599><c> and</c><00:58:37.839><c> pass</c><00:58:38.880><c> our</c>

00:58:39.030 --> 00:58:39.040 align:start position:0%
so recall this method and pass our
 

00:58:39.040 --> 00:58:41.349 align:start position:0%
so recall this method and pass our
numbers<00:58:39.440><c> array</c>

00:58:41.349 --> 00:58:41.359 align:start position:0%
numbers array
 

00:58:41.359 --> 00:58:43.430 align:start position:0%
numbers array
now<00:58:41.599><c> when</c><00:58:41.760><c> we</c><00:58:41.920><c> run</c><00:58:42.079><c> this</c><00:58:42.240><c> program</c><00:58:42.880><c> we</c><00:58:43.040><c> can</c><00:58:43.200><c> see</c>

00:58:43.430 --> 00:58:43.440 align:start position:0%
now when we run this program we can see
 

00:58:43.440 --> 00:58:48.829 align:start position:0%
now when we run this program we can see
our<00:58:43.599><c> array</c><00:58:44.079><c> is</c><00:58:44.240><c> sorted</c>

00:58:48.829 --> 00:58:48.839 align:start position:0%
 
 

00:58:48.839 --> 00:58:51.430 align:start position:0%
 
beautiful

00:58:51.430 --> 00:58:51.440 align:start position:0%
beautiful
 

00:58:51.440 --> 00:58:52.870 align:start position:0%
beautiful
so<00:58:51.599><c> you</c><00:58:51.760><c> have</c><00:58:51.839><c> learned</c><00:58:52.079><c> that</c><00:58:52.160><c> we</c><00:58:52.240><c> use</c><00:58:52.480><c> arrays</c>

00:58:52.870 --> 00:58:52.880 align:start position:0%
so you have learned that we use arrays
 

00:58:52.880 --> 00:58:55.030 align:start position:0%
so you have learned that we use arrays
to<00:58:53.040><c> store</c><00:58:53.440><c> a</c><00:58:53.599><c> list</c><00:58:53.839><c> of</c><00:58:54.000><c> objects</c>

00:58:55.030 --> 00:58:55.040 align:start position:0%
to store a list of objects
 

00:58:55.040 --> 00:58:56.710 align:start position:0%
to store a list of objects
in<00:58:55.200><c> java</c><00:58:55.520><c> we</c><00:58:55.680><c> can</c><00:58:55.839><c> also</c><00:58:56.079><c> create</c>

00:58:56.710 --> 00:58:56.720 align:start position:0%
in java we can also create
 

00:58:56.720 --> 00:58:58.230 align:start position:0%
in java we can also create
multi-dimensional<00:58:57.599><c> arrays</c>

00:58:58.230 --> 00:58:58.240 align:start position:0%
multi-dimensional arrays
 

00:58:58.240 --> 00:58:59.750 align:start position:0%
multi-dimensional arrays
for<00:58:58.480><c> example</c><00:58:58.880><c> we</c><00:58:59.040><c> can</c><00:58:59.200><c> create</c><00:58:59.599><c> a</c>

00:58:59.750 --> 00:58:59.760 align:start position:0%
for example we can create a
 

00:58:59.760 --> 00:59:02.710 align:start position:0%
for example we can create a
two-dimensional<00:59:00.559><c> array</c><00:59:01.200><c> to</c><00:59:01.440><c> store</c><00:59:01.760><c> a</c><00:59:01.839><c> matrix</c>

00:59:02.710 --> 00:59:02.720 align:start position:0%
two-dimensional array to store a matrix
 

00:59:02.720 --> 00:59:04.390 align:start position:0%
two-dimensional array to store a matrix
or<00:59:02.880><c> we</c><00:59:03.040><c> can</c><00:59:03.200><c> create</c><00:59:03.520><c> a</c><00:59:03.680><c> three-dimensional</c>

00:59:04.390 --> 00:59:04.400 align:start position:0%
or we can create a three-dimensional
 

00:59:04.400 --> 00:59:06.710 align:start position:0%
or we can create a three-dimensional
array<00:59:04.880><c> to</c><00:59:05.119><c> store</c><00:59:05.440><c> data</c><00:59:05.760><c> for</c><00:59:05.920><c> a</c><00:59:06.079><c> cube</c>

00:59:06.710 --> 00:59:06.720 align:start position:0%
array to store data for a cube
 

00:59:06.720 --> 00:59:08.230 align:start position:0%
array to store data for a cube
these<00:59:06.960><c> are</c><00:59:07.040><c> useful</c><00:59:07.440><c> in</c><00:59:07.599><c> scientific</c>

00:59:08.230 --> 00:59:08.240 align:start position:0%
these are useful in scientific
 

00:59:08.240 --> 00:59:10.230 align:start position:0%
these are useful in scientific
computations<00:59:09.200><c> let</c><00:59:09.359><c> me</c><00:59:09.520><c> show</c><00:59:09.680><c> you</c>

00:59:10.230 --> 00:59:10.240 align:start position:0%
computations let me show you
 

00:59:10.240 --> 00:59:11.750 align:start position:0%
computations let me show you
so<00:59:10.400><c> here</c><00:59:10.559><c> we</c><00:59:10.640><c> have</c><00:59:10.799><c> a</c><00:59:10.880><c> single</c><00:59:11.200><c> dimensional</c>

00:59:11.750 --> 00:59:11.760 align:start position:0%
so here we have a single dimensional
 

00:59:11.760 --> 00:59:13.589 align:start position:0%
so here we have a single dimensional
array<00:59:12.559><c> to</c><00:59:12.720><c> convert</c><00:59:13.119><c> this</c><00:59:13.280><c> to</c><00:59:13.440><c> a</c>

00:59:13.589 --> 00:59:13.599 align:start position:0%
array to convert this to a
 

00:59:13.599 --> 00:59:14.789 align:start position:0%
array to convert this to a
two-dimensional<00:59:14.240><c> array</c>

00:59:14.789 --> 00:59:14.799 align:start position:0%
two-dimensional array
 

00:59:14.799 --> 00:59:17.270 align:start position:0%
two-dimensional array
we<00:59:14.960><c> need</c><00:59:15.040><c> to</c><00:59:15.200><c> add</c><00:59:16.000><c> another</c><00:59:16.400><c> pair</c><00:59:16.799><c> of</c><00:59:16.960><c> square</c>

00:59:17.270 --> 00:59:17.280 align:start position:0%
we need to add another pair of square
 

00:59:17.280 --> 00:59:18.309 align:start position:0%
we need to add another pair of square
brackets

00:59:18.309 --> 00:59:18.319 align:start position:0%
brackets
 

00:59:18.319 --> 00:59:19.990 align:start position:0%
brackets
now<00:59:18.559><c> we</c><00:59:18.640><c> have</c><00:59:18.720><c> a</c><00:59:18.799><c> compilation</c><00:59:19.359><c> error</c><00:59:19.680><c> because</c>

00:59:19.990 --> 00:59:20.000 align:start position:0%
now we have a compilation error because
 

00:59:20.000 --> 00:59:21.510 align:start position:0%
now we have a compilation error because
we<00:59:20.079><c> need</c><00:59:20.240><c> to</c><00:59:20.319><c> repeat</c><00:59:20.640><c> these</c><00:59:20.799><c> brackets</c>

00:59:21.510 --> 00:59:21.520 align:start position:0%
we need to repeat these brackets
 

00:59:21.520 --> 00:59:23.829 align:start position:0%
we need to repeat these brackets
on<00:59:21.599><c> the</c><00:59:21.760><c> other</c><00:59:22.000><c> side</c><00:59:22.799><c> so</c><00:59:23.280><c> let's</c><00:59:23.440><c> say</c><00:59:23.599><c> we</c><00:59:23.680><c> want</c>

00:59:23.829 --> 00:59:23.839 align:start position:0%
on the other side so let's say we want
 

00:59:23.839 --> 00:59:26.390 align:start position:0%
on the other side so let's say we want
to<00:59:23.920><c> create</c><00:59:24.480><c> a</c><00:59:24.720><c> two</c><00:59:25.040><c> by</c><00:59:25.280><c> three</c><00:59:25.680><c> matrix</c>

00:59:26.390 --> 00:59:26.400 align:start position:0%
to create a two by three matrix
 

00:59:26.400 --> 00:59:30.150 align:start position:0%
to create a two by three matrix
so<00:59:26.559><c> two</c><00:59:26.799><c> rows</c><00:59:27.440><c> and</c><00:59:27.680><c> three</c><00:59:27.920><c> columns</c><00:59:28.960><c> we</c><00:59:29.200><c> add</c>

00:59:30.150 --> 00:59:30.160 align:start position:0%
so two rows and three columns we add
 

00:59:30.160 --> 00:59:32.710 align:start position:0%
so two rows and three columns we add
in<00:59:30.319><c> other</c><00:59:30.480><c> brackets</c><00:59:30.880><c> here</c><00:59:31.839><c> and</c><00:59:32.160><c> change</c><00:59:32.480><c> these</c>

00:59:32.710 --> 00:59:32.720 align:start position:0%
in other brackets here and change these
 

00:59:32.720 --> 00:59:33.430 align:start position:0%
in other brackets here and change these
lengths<00:59:33.119><c> to</c>

00:59:33.430 --> 00:59:33.440 align:start position:0%
lengths to
 

00:59:33.440 --> 00:59:36.549 align:start position:0%
lengths to
two<00:59:34.000><c> and</c><00:59:34.240><c> three</c><00:59:34.880><c> so</c><00:59:35.040><c> now</c><00:59:35.200><c> we</c><00:59:35.359><c> have</c><00:59:35.760><c> two</c><00:59:36.000><c> rows</c>

00:59:36.549 --> 00:59:36.559 align:start position:0%
two and three so now we have two rows
 

00:59:36.559 --> 00:59:38.870 align:start position:0%
two and three so now we have two rows
and<00:59:36.720><c> three</c><00:59:37.040><c> columns</c><00:59:38.079><c> now</c><00:59:38.319><c> to</c><00:59:38.480><c> access</c>

00:59:38.870 --> 00:59:38.880 align:start position:0%
and three columns now to access
 

00:59:38.880 --> 00:59:40.630 align:start position:0%
and three columns now to access
individual<00:59:39.359><c> items</c><00:59:39.599><c> in</c><00:59:39.760><c> this</c><00:59:39.920><c> array</c>

00:59:40.630 --> 00:59:40.640 align:start position:0%
individual items in this array
 

00:59:40.640 --> 00:59:43.750 align:start position:0%
individual items in this array
we<00:59:40.799><c> need</c><00:59:40.960><c> to</c><00:59:41.040><c> supply</c><00:59:41.760><c> two</c><00:59:42.000><c> indexes</c><00:59:43.200><c> first</c>

00:59:43.750 --> 00:59:43.760 align:start position:0%
we need to supply two indexes first
 

00:59:43.760 --> 00:59:45.910 align:start position:0%
we need to supply two indexes first
the<00:59:43.920><c> index</c><00:59:44.240><c> of</c><00:59:44.319><c> the</c><00:59:44.480><c> row</c><00:59:45.200><c> so</c><00:59:45.359><c> we</c><00:59:45.440><c> can</c><00:59:45.599><c> go</c><00:59:45.680><c> to</c><00:59:45.839><c> the</c>

00:59:45.910 --> 00:59:45.920 align:start position:0%
the index of the row so we can go to the
 

00:59:45.920 --> 00:59:47.430 align:start position:0%
the index of the row so we can go to the
first<00:59:46.160><c> row</c><00:59:46.720><c> and</c><00:59:46.960><c> then</c>

00:59:47.430 --> 00:59:47.440 align:start position:0%
first row and then
 

00:59:47.440 --> 00:59:50.470 align:start position:0%
first row and then
the<00:59:47.599><c> first</c><00:59:47.920><c> column</c><00:59:48.799><c> and</c><00:59:49.119><c> initialize</c><00:59:49.680><c> that</c><00:59:50.319><c> to</c>

00:59:50.470 --> 00:59:50.480 align:start position:0%
the first column and initialize that to
 

00:59:50.480 --> 00:59:51.829 align:start position:0%
the first column and initialize that to
1.

00:59:51.829 --> 00:59:51.839 align:start position:0%
1.
 

00:59:51.839 --> 00:59:55.589 align:start position:0%
1.
now<00:59:52.000><c> let's</c><00:59:52.319><c> print</c><00:59:52.559><c> this</c><00:59:53.280><c> so</c><00:59:53.680><c> srut</c><00:59:54.720><c> tab</c>

00:59:55.589 --> 00:59:55.599 align:start position:0%
now let's print this so srut tab
 

00:59:55.599 --> 00:59:58.549 align:start position:0%
now let's print this so srut tab
once<00:59:55.839><c> again</c><00:59:56.079><c> we</c><00:59:56.160><c> use</c><00:59:56.319><c> our</c><00:59:56.480><c> arrays</c><00:59:56.880><c> class</c><00:59:57.760><c> dot</c>

00:59:58.549 --> 00:59:58.559 align:start position:0%
once again we use our arrays class dot
 

00:59:58.559 --> 00:59:59.510 align:start position:0%
once again we use our arrays class dot
tostring

00:59:59.510 --> 00:59:59.520 align:start position:0%
tostring
 

00:59:59.520 --> 01:00:04.230 align:start position:0%
tostring
and<00:59:59.760><c> pass</c><01:00:00.640><c> this</c><01:00:00.960><c> object</c><01:00:02.079><c> take</c><01:00:02.319><c> a</c><01:00:02.400><c> look</c>

01:00:04.230 --> 01:00:04.240 align:start position:0%
and pass this object take a look
 

01:00:04.240 --> 01:00:06.470 align:start position:0%
and pass this object take a look
once<01:00:04.480><c> again</c><01:00:04.720><c> we</c><01:00:04.880><c> get</c><01:00:05.280><c> this</c><01:00:05.520><c> weird</c><01:00:05.839><c> string</c>

01:00:06.470 --> 01:00:06.480 align:start position:0%
once again we get this weird string
 

01:00:06.480 --> 01:00:07.750 align:start position:0%
once again we get this weird string
because<01:00:06.720><c> here</c><01:00:06.880><c> we're</c><01:00:07.040><c> dealing</c><01:00:07.359><c> with</c><01:00:07.599><c> a</c>

01:00:07.750 --> 01:00:07.760 align:start position:0%
because here we're dealing with a
 

01:00:07.760 --> 01:00:09.349 align:start position:0%
because here we're dealing with a
multi-dimensional<01:00:08.640><c> array</c>

01:00:09.349 --> 01:00:09.359 align:start position:0%
multi-dimensional array
 

01:00:09.359 --> 01:00:11.910 align:start position:0%
multi-dimensional array
to<01:00:09.520><c> solve</c><01:00:09.760><c> this</c><01:00:10.000><c> problem</c><01:00:10.880><c> we</c><01:00:11.040><c> need</c><01:00:11.200><c> to</c><01:00:11.280><c> use</c>

01:00:11.910 --> 01:00:11.920 align:start position:0%
to solve this problem we need to use
 

01:00:11.920 --> 01:00:13.349 align:start position:0%
to solve this problem we need to use
another<01:00:12.240><c> method</c><01:00:12.559><c> in</c><01:00:12.640><c> this</c><01:00:12.799><c> class</c>

01:00:13.349 --> 01:00:13.359 align:start position:0%
another method in this class
 

01:00:13.359 --> 01:00:17.030 align:start position:0%
another method in this class
called<01:00:14.160><c> deep</c><01:00:15.040><c> tostring</c><01:00:16.319><c> we</c><01:00:16.480><c> use</c><01:00:16.640><c> this</c><01:00:16.799><c> for</c>

01:00:17.030 --> 01:00:17.040 align:start position:0%
called deep tostring we use this for
 

01:00:17.040 --> 01:00:17.670 align:start position:0%
called deep tostring we use this for
printing

01:00:17.670 --> 01:00:17.680 align:start position:0%
printing
 

01:00:17.680 --> 01:00:21.349 align:start position:0%
printing
multi-dimensional<01:00:18.559><c> arrays</c><01:00:19.440><c> take</c><01:00:19.680><c> a</c><01:00:19.760><c> look</c>

01:00:21.349 --> 01:00:21.359 align:start position:0%
multi-dimensional arrays take a look
 

01:00:21.359 --> 01:00:23.910 align:start position:0%
multi-dimensional arrays take a look
now<01:00:21.599><c> we</c><01:00:21.760><c> have</c><01:00:21.839><c> this</c><01:00:22.079><c> matrix</c><01:00:22.880><c> which</c><01:00:23.119><c> has</c><01:00:23.680><c> two</c>

01:00:23.910 --> 01:00:23.920 align:start position:0%
now we have this matrix which has two
 

01:00:23.920 --> 01:00:24.710 align:start position:0%
now we have this matrix which has two
rows

01:00:24.710 --> 01:00:24.720 align:start position:0%
rows
 

01:00:24.720 --> 01:00:28.069 align:start position:0%
rows
and<01:00:25.119><c> in</c><01:00:25.200><c> each</c><01:00:25.440><c> row</c><01:00:25.680><c> we</c><01:00:25.839><c> have</c><01:00:26.319><c> three</c><01:00:26.839><c> columns</c><01:00:27.920><c> we</c>

01:00:28.069 --> 01:00:28.079 align:start position:0%
and in each row we have three columns we
 

01:00:28.079 --> 01:00:29.589 align:start position:0%
and in each row we have three columns we
can<01:00:28.240><c> also</c><01:00:28.480><c> create</c><01:00:28.799><c> a</c><01:00:28.880><c> three</c><01:00:29.119><c> dimensional</c>

01:00:29.589 --> 01:00:29.599 align:start position:0%
can also create a three dimensional
 

01:00:29.599 --> 01:00:30.150 align:start position:0%
can also create a three dimensional
array

01:00:30.150 --> 01:00:30.160 align:start position:0%
array
 

01:00:30.160 --> 01:00:32.789 align:start position:0%
array
all<01:00:30.319><c> we</c><01:00:30.480><c> have</c><01:00:30.640><c> to</c><01:00:30.720><c> do</c><01:00:30.880><c> is</c><01:00:31.040><c> to</c><01:00:31.200><c> add</c><01:00:31.839><c> another</c><01:00:32.640><c> pair</c>

01:00:32.789 --> 01:00:32.799 align:start position:0%
all we have to do is to add another pair
 

01:00:32.799 --> 01:00:33.670 align:start position:0%
all we have to do is to add another pair
of<01:00:32.960><c> brackets</c>

01:00:33.670 --> 01:00:33.680 align:start position:0%
of brackets
 

01:00:33.680 --> 01:00:37.510 align:start position:0%
of brackets
and<01:00:34.319><c> specify</c><01:00:35.280><c> the</c><01:00:35.520><c> length</c><01:00:36.079><c> of</c><01:00:36.240><c> that</c><01:00:36.400><c> dimension</c>

01:00:37.510 --> 01:00:37.520 align:start position:0%
and specify the length of that dimension
 

01:00:37.520 --> 01:00:39.589 align:start position:0%
and specify the length of that dimension
pretty<01:00:37.760><c> easy</c><01:00:38.640><c> now</c><01:00:38.799><c> what</c><01:00:38.960><c> about</c><01:00:39.200><c> the</c><01:00:39.280><c> curly</c>

01:00:39.589 --> 01:00:39.599 align:start position:0%
pretty easy now what about the curly
 

01:00:39.599 --> 01:00:40.710 align:start position:0%
pretty easy now what about the curly
brace<01:00:39.839><c> syntax</c>

01:00:40.710 --> 01:00:40.720 align:start position:0%
brace syntax
 

01:00:40.720 --> 01:00:43.750 align:start position:0%
brace syntax
let<01:00:40.880><c> me</c><01:00:41.040><c> show</c><01:00:41.200><c> you</c><01:00:42.000><c> so</c><01:00:43.040><c> let's</c><01:00:43.200><c> revert</c><01:00:43.599><c> this</c>

01:00:43.750 --> 01:00:43.760 align:start position:0%
let me show you so let's revert this
 

01:00:43.760 --> 01:00:44.309 align:start position:0%
let me show you so let's revert this
back

01:00:44.309 --> 01:00:44.319 align:start position:0%
back
 

01:00:44.319 --> 01:00:46.470 align:start position:0%
back
to<01:00:44.480><c> a</c><01:00:44.640><c> two-dimensional</c><01:00:45.280><c> array</c><01:00:46.240><c> we're</c><01:00:46.400><c> going</c>

01:00:46.470 --> 01:00:46.480 align:start position:0%
to a two-dimensional array we're going
 

01:00:46.480 --> 01:00:47.990 align:start position:0%
to a two-dimensional array we're going
to<01:00:46.559><c> get</c><01:00:46.720><c> rid</c><01:00:46.880><c> of</c><01:00:46.960><c> the</c><01:00:47.040><c> new</c><01:00:47.280><c> operator</c>

01:00:47.990 --> 01:00:48.000 align:start position:0%
to get rid of the new operator
 

01:00:48.000 --> 01:00:51.030 align:start position:0%
to get rid of the new operator
and<01:00:48.160><c> use</c><01:00:48.799><c> curly</c><01:00:49.119><c> braces</c>

01:00:51.030 --> 01:00:51.040 align:start position:0%
and use curly braces
 

01:00:51.040 --> 01:00:52.470 align:start position:0%
and use curly braces
now<01:00:51.200><c> let's</c><01:00:51.359><c> say</c><01:00:51.599><c> in</c><01:00:51.680><c> this</c><01:00:51.839><c> matrix</c><01:00:52.160><c> we're</c><01:00:52.319><c> going</c>

01:00:52.470 --> 01:00:52.480 align:start position:0%
now let's say in this matrix we're going
 

01:00:52.480 --> 01:00:55.190 align:start position:0%
now let's say in this matrix we're going
to<01:00:52.559><c> have</c><01:00:52.960><c> two</c><01:00:53.200><c> rows</c><01:00:54.000><c> and</c><01:00:54.160><c> three</c><01:00:54.400><c> columns</c>

01:00:55.190 --> 01:00:55.200 align:start position:0%
to have two rows and three columns
 

01:00:55.200 --> 01:00:57.430 align:start position:0%
to have two rows and three columns
so<01:00:55.440><c> each</c><01:00:55.680><c> row</c><01:00:56.079><c> is</c><01:00:56.240><c> an</c><01:00:56.400><c> array</c><01:00:56.720><c> itself</c><01:00:57.200><c> because</c>

01:00:57.430 --> 01:00:57.440 align:start position:0%
so each row is an array itself because
 

01:00:57.440 --> 01:00:59.430 align:start position:0%
so each row is an array itself because
it's<01:00:57.680><c> a</c><01:00:57.760><c> list</c><01:00:58.000><c> of</c><01:00:58.079><c> items</c><01:00:58.559><c> right</c>

01:00:59.430 --> 01:00:59.440 align:start position:0%
it's a list of items right
 

01:00:59.440 --> 01:01:02.470 align:start position:0%
it's a list of items right
so<01:01:00.000><c> we</c><01:01:00.160><c> add</c><01:01:00.799><c> another</c><01:01:01.119><c> array</c><01:01:01.440><c> here</c>

01:01:02.470 --> 01:01:02.480 align:start position:0%
so we add another array here
 

01:01:02.480 --> 01:01:06.069 align:start position:0%
so we add another array here
let's<01:01:02.640><c> say</c><01:01:02.880><c> one</c><01:01:03.440><c> two</c><01:01:04.079><c> three</c><01:01:04.880><c> then</c><01:01:05.200><c> comma</c>

01:01:06.069 --> 01:01:06.079 align:start position:0%
let's say one two three then comma
 

01:01:06.079 --> 01:01:08.549 align:start position:0%
let's say one two three then comma
now<01:01:06.319><c> we</c><01:01:06.480><c> add</c><01:01:06.880><c> the</c><01:01:07.040><c> second</c><01:01:07.359><c> row</c><01:01:07.839><c> which</c><01:01:08.079><c> is</c>

01:01:08.549 --> 01:01:08.559 align:start position:0%
now we add the second row which is
 

01:01:08.559 --> 01:01:10.710 align:start position:0%
now we add the second row which is
another<01:01:08.960><c> array</c><01:01:09.920><c> in</c><01:01:10.079><c> this</c><01:01:10.240><c> row</c><01:01:10.400><c> we're</c><01:01:10.559><c> gonna</c>

01:01:10.710 --> 01:01:10.720 align:start position:0%
another array in this row we're gonna
 

01:01:10.720 --> 01:01:11.109 align:start position:0%
another array in this row we're gonna
have

01:01:11.109 --> 01:01:11.119 align:start position:0%
have
 

01:01:11.119 --> 01:01:14.150 align:start position:0%
have
three<01:01:11.359><c> numbers</c><01:01:11.920><c> four</c><01:01:12.559><c> five</c><01:01:13.040><c> and</c><01:01:13.280><c> six</c>

01:01:14.150 --> 01:01:14.160 align:start position:0%
three numbers four five and six
 

01:01:14.160 --> 01:01:15.670 align:start position:0%
three numbers four five and six
now<01:01:14.400><c> let's</c><01:01:14.640><c> remove</c><01:01:14.880><c> this</c><01:01:15.040><c> line</c><01:01:15.280><c> we</c><01:01:15.359><c> don't</c><01:01:15.520><c> need</c>

01:01:15.670 --> 01:01:15.680 align:start position:0%
now let's remove this line we don't need
 

01:01:15.680 --> 01:01:19.910 align:start position:0%
now let's remove this line we don't need
it<01:01:15.839><c> anymore</c><01:01:17.040><c> and</c><01:01:17.280><c> print</c><01:01:17.599><c> this</c><01:01:17.760><c> array</c>

01:01:19.910 --> 01:01:19.920 align:start position:0%
it anymore and print this array
 

01:01:19.920 --> 01:01:27.670 align:start position:0%
it anymore and print this array
so<01:01:20.720><c> here's</c><01:01:20.960><c> the</c><01:01:21.040><c> end</c><01:01:22.839><c> result</c>

01:01:27.670 --> 01:01:27.680 align:start position:0%
 
 

01:01:27.680 --> 01:01:29.430 align:start position:0%
 
you<01:01:27.839><c> have</c><01:01:28.000><c> learned</c><01:01:28.240><c> a</c><01:01:28.319><c> lot</c><01:01:28.559><c> about</c><01:01:28.799><c> variables</c>

01:01:29.430 --> 01:01:29.440 align:start position:0%
you have learned a lot about variables
 

01:01:29.440 --> 01:01:30.630 align:start position:0%
you have learned a lot about variables
you<01:01:29.599><c> have</c><01:01:29.680><c> learned</c><01:01:29.920><c> that</c><01:01:30.000><c> when</c><01:01:30.160><c> declaring</c>

01:01:30.630 --> 01:01:30.640 align:start position:0%
you have learned that when declaring
 

01:01:30.640 --> 01:01:32.309 align:start position:0%
you have learned that when declaring
them<01:01:30.799><c> we</c><01:01:30.960><c> need</c><01:01:31.040><c> to</c><01:01:31.200><c> initialize</c><01:01:31.760><c> them</c>

01:01:32.309 --> 01:01:32.319 align:start position:0%
them we need to initialize them
 

01:01:32.319 --> 01:01:33.910 align:start position:0%
them we need to initialize them
and<01:01:32.400><c> we</c><01:01:32.559><c> can</c><01:01:32.720><c> always</c><01:01:33.040><c> change</c><01:01:33.280><c> their</c><01:01:33.520><c> value</c>

01:01:33.910 --> 01:01:33.920 align:start position:0%
and we can always change their value
 

01:01:33.920 --> 01:01:35.990 align:start position:0%
and we can always change their value
later<01:01:34.319><c> on</c><01:01:34.720><c> throughout</c><01:01:35.119><c> the</c><01:01:35.200><c> lifetime</c><01:01:35.680><c> of</c><01:01:35.920><c> our</c>

01:01:35.990 --> 01:01:36.000 align:start position:0%
later on throughout the lifetime of our
 

01:01:36.000 --> 01:01:36.950 align:start position:0%
later on throughout the lifetime of our
programs

01:01:36.950 --> 01:01:36.960 align:start position:0%
programs
 

01:01:36.960 --> 01:01:38.630 align:start position:0%
programs
however<01:01:37.760><c> there</c><01:01:37.920><c> are</c><01:01:38.000><c> times</c><01:01:38.240><c> that</c><01:01:38.400><c> we</c><01:01:38.480><c> don't</c>

01:01:38.630 --> 01:01:38.640 align:start position:0%
however there are times that we don't
 

01:01:38.640 --> 01:01:40.870 align:start position:0%
however there are times that we don't
want<01:01:38.799><c> the</c><01:01:38.960><c> value</c><01:01:39.200><c> of</c><01:01:39.359><c> a</c><01:01:39.440><c> variable</c><01:01:39.839><c> to</c><01:01:40.000><c> change</c>

01:01:40.870 --> 01:01:40.880 align:start position:0%
want the value of a variable to change
 

01:01:40.880 --> 01:01:43.109 align:start position:0%
want the value of a variable to change
for<01:01:41.119><c> example</c><01:01:41.440><c> let's</c><01:01:41.680><c> declare</c><01:01:42.079><c> a</c><01:01:42.160><c> variable</c>

01:01:43.109 --> 01:01:43.119 align:start position:0%
for example let's declare a variable
 

01:01:43.119 --> 01:01:44.230 align:start position:0%
for example let's declare a variable
called<01:01:43.520><c> pi</c>

01:01:44.230 --> 01:01:44.240 align:start position:0%
called pi
 

01:01:44.240 --> 01:01:47.589 align:start position:0%
called pi
and<01:01:44.480><c> set</c><01:01:44.640><c> it</c><01:01:44.720><c> to</c><01:01:45.240><c> 3.14</c><01:01:46.960><c> now</c><01:01:47.119><c> here</c><01:01:47.280><c> we</c><01:01:47.359><c> need</c><01:01:47.440><c> to</c>

01:01:47.589 --> 01:01:47.599 align:start position:0%
and set it to 3.14 now here we need to
 

01:01:47.599 --> 01:01:48.069 align:start position:0%
and set it to 3.14 now here we need to
add

01:01:48.069 --> 01:01:48.079 align:start position:0%
add
 

01:01:48.079 --> 01:01:50.309 align:start position:0%
add
an<01:01:48.319><c> f</c><01:01:48.720><c> to</c><01:01:48.880><c> represent</c><01:01:49.440><c> this</c><01:01:49.599><c> as</c><01:01:49.680><c> a</c><01:01:49.760><c> float</c>

01:01:50.309 --> 01:01:50.319 align:start position:0%
an f to represent this as a float
 

01:01:50.319 --> 01:01:51.670 align:start position:0%
an f to represent this as a float
because<01:01:50.720><c> by</c><01:01:50.960><c> default</c>

01:01:51.670 --> 01:01:51.680 align:start position:0%
because by default
 

01:01:51.680 --> 01:01:53.750 align:start position:0%
because by default
java<01:01:52.000><c> compiler</c><01:01:52.720><c> sees</c><01:01:52.960><c> this</c><01:01:53.200><c> number</c><01:01:53.520><c> as</c><01:01:53.680><c> a</c>

01:01:53.750 --> 01:01:53.760 align:start position:0%
java compiler sees this number as a
 

01:01:53.760 --> 01:01:55.510 align:start position:0%
java compiler sees this number as a
decimal<01:01:54.559><c> okay</c>

01:01:55.510 --> 01:01:55.520 align:start position:0%
decimal okay
 

01:01:55.520 --> 01:01:57.829 align:start position:0%
decimal okay
now<01:01:56.079><c> you</c><01:01:56.160><c> know</c><01:01:56.319><c> that</c><01:01:56.480><c> we</c><01:01:56.559><c> use</c><01:01:56.799><c> pi</c><01:01:57.039><c> to</c><01:01:57.280><c> calculate</c>

01:01:57.829 --> 01:01:57.839 align:start position:0%
now you know that we use pi to calculate
 

01:01:57.839 --> 01:01:59.510 align:start position:0%
now you know that we use pi to calculate
the<01:01:58.000><c> area</c><01:01:58.240><c> of</c><01:01:58.319><c> a</c><01:01:58.400><c> circle</c>

01:01:59.510 --> 01:01:59.520 align:start position:0%
the area of a circle
 

01:01:59.520 --> 01:02:01.270 align:start position:0%
the area of a circle
what<01:01:59.760><c> if</c><01:01:59.839><c> before</c><01:02:00.160><c> we</c><01:02:00.400><c> calculate</c><01:02:00.799><c> the</c><01:02:00.960><c> area</c><01:02:01.119><c> of</c>

01:02:01.270 --> 01:02:01.280 align:start position:0%
what if before we calculate the area of
 

01:02:01.280 --> 01:02:03.430 align:start position:0%
what if before we calculate the area of
a<01:02:01.359><c> circle</c><01:02:02.400><c> i</c><01:02:02.559><c> come</c><01:02:02.720><c> here</c><01:02:02.880><c> and</c><01:02:03.039><c> type</c>

01:02:03.430 --> 01:02:03.440 align:start position:0%
a circle i come here and type
 

01:02:03.440 --> 01:02:06.390 align:start position:0%
a circle i come here and type
pi<01:02:03.760><c> equals</c><01:02:04.480><c> 1.</c><01:02:05.119><c> then</c><01:02:05.440><c> all</c><01:02:05.599><c> our</c><01:02:05.760><c> calculations</c>

01:02:06.390 --> 01:02:06.400 align:start position:0%
pi equals 1. then all our calculations
 

01:02:06.400 --> 01:02:07.829 align:start position:0%
pi equals 1. then all our calculations
are<01:02:06.480><c> going</c><01:02:06.559><c> to</c><01:02:06.720><c> get</c><01:02:06.880><c> messed</c><01:02:07.200><c> up</c><01:02:07.440><c> we</c><01:02:07.599><c> don't</c><01:02:07.680><c> want</c>

01:02:07.829 --> 01:02:07.839 align:start position:0%
are going to get messed up we don't want
 

01:02:07.839 --> 01:02:08.950 align:start position:0%
are going to get messed up we don't want
this<01:02:08.000><c> to</c><01:02:08.079><c> happen</c>

01:02:08.950 --> 01:02:08.960 align:start position:0%
this to happen
 

01:02:08.960 --> 01:02:12.069 align:start position:0%
this to happen
that's<01:02:09.280><c> when</c><01:02:09.520><c> we</c><01:02:09.680><c> use</c><01:02:10.079><c> constants</c><01:02:11.440><c> so</c><01:02:11.760><c> if</c><01:02:11.839><c> we</c>

01:02:12.069 --> 01:02:12.079 align:start position:0%
that's when we use constants so if we
 

01:02:12.079 --> 01:02:12.789 align:start position:0%
that's when we use constants so if we
type

01:02:12.789 --> 01:02:12.799 align:start position:0%
type
 

01:02:12.799 --> 01:02:15.829 align:start position:0%
type
final<01:02:13.280><c> here</c><01:02:14.079><c> java</c><01:02:14.400><c> compiler</c><01:02:14.960><c> will</c><01:02:15.200><c> treat</c><01:02:15.440><c> this</c>

01:02:15.829 --> 01:02:15.839 align:start position:0%
final here java compiler will treat this
 

01:02:15.839 --> 01:02:18.870 align:start position:0%
final here java compiler will treat this
as<01:02:16.079><c> a</c><01:02:16.240><c> constant</c><01:02:17.200><c> so</c><01:02:17.440><c> once</c><01:02:17.680><c> we</c><01:02:17.920><c> initialize</c><01:02:18.559><c> this</c>

01:02:18.870 --> 01:02:18.880 align:start position:0%
as a constant so once we initialize this
 

01:02:18.880 --> 01:02:21.109 align:start position:0%
as a constant so once we initialize this
we<01:02:19.039><c> cannot</c><01:02:19.440><c> change</c><01:02:19.760><c> its</c><01:02:20.000><c> value</c><01:02:20.400><c> later</c><01:02:20.720><c> on</c><01:02:21.039><c> you</c>

01:02:21.109 --> 01:02:21.119 align:start position:0%
we cannot change its value later on you
 

01:02:21.119 --> 01:02:22.069 align:start position:0%
we cannot change its value later on you
can<01:02:21.280><c> see</c><01:02:21.440><c> here</c><01:02:21.599><c> we</c><01:02:21.680><c> have</c>

01:02:22.069 --> 01:02:22.079 align:start position:0%
can see here we have
 

01:02:22.079 --> 01:02:25.029 align:start position:0%
can see here we have
a<01:02:22.240><c> compilation</c><01:02:22.880><c> error</c><01:02:23.839><c> and</c><01:02:24.079><c> it</c><01:02:24.240><c> says</c><01:02:24.640><c> cannot</c>

01:02:25.029 --> 01:02:25.039 align:start position:0%
a compilation error and it says cannot
 

01:02:25.039 --> 01:02:28.069 align:start position:0%
a compilation error and it says cannot
assign<01:02:25.359><c> a</c><01:02:25.520><c> value</c><01:02:25.839><c> to</c><01:02:26.079><c> final</c><01:02:26.559><c> variable</c><01:02:27.119><c> pi</c>

01:02:28.069 --> 01:02:28.079 align:start position:0%
assign a value to final variable pi
 

01:02:28.079 --> 01:02:31.589 align:start position:0%
assign a value to final variable pi
so<01:02:28.400><c> pi</c><01:02:28.720><c> is</c><01:02:28.799><c> a</c><01:02:28.880><c> final</c><01:02:29.280><c> variable</c><01:02:29.760><c> or</c><01:02:30.160><c> a</c><01:02:30.319><c> constant</c>

01:02:31.589 --> 01:02:31.599 align:start position:0%
so pi is a final variable or a constant
 

01:02:31.599 --> 01:02:33.510 align:start position:0%
so pi is a final variable or a constant
now<01:02:31.760><c> by</c><01:02:32.000><c> convention</c><01:02:32.400><c> we</c><01:02:32.559><c> use</c><01:02:32.880><c> all</c><01:02:33.119><c> capital</c>

01:02:33.510 --> 01:02:33.520 align:start position:0%
now by convention we use all capital
 

01:02:33.520 --> 01:02:35.190 align:start position:0%
now by convention we use all capital
letters<01:02:33.920><c> to</c><01:02:34.079><c> name</c><01:02:34.400><c> constants</c>

01:02:35.190 --> 01:02:35.200 align:start position:0%
letters to name constants
 

01:02:35.200 --> 01:02:38.710 align:start position:0%
letters to name constants
so<01:02:35.520><c> this</c><01:02:35.760><c> should</c><01:02:35.920><c> be</c><01:02:36.640><c> pi</c>

01:02:38.710 --> 01:02:38.720 align:start position:0%
so this should be pi
 

01:02:38.720 --> 01:02:40.789 align:start position:0%
so this should be pi
beautiful<01:02:39.680><c> now</c><01:02:39.839><c> i</c><01:02:39.920><c> tell</c><01:02:40.079><c> you</c><01:02:40.160><c> a</c><01:02:40.240><c> little</c><01:02:40.480><c> side</c>

01:02:40.789 --> 01:02:40.799 align:start position:0%
beautiful now i tell you a little side
 

01:02:40.799 --> 01:02:42.789 align:start position:0%
beautiful now i tell you a little side
story<01:02:41.359><c> in</c><01:02:41.520><c> one</c><01:02:41.680><c> of</c><01:02:41.760><c> my</c><01:02:41.920><c> early</c><01:02:42.160><c> courses</c><01:02:42.480><c> that</c><01:02:42.640><c> i</c>

01:02:42.789 --> 01:02:42.799 align:start position:0%
story in one of my early courses that i
 

01:02:42.799 --> 01:02:44.390 align:start position:0%
story in one of my early courses that i
created<01:02:43.200><c> years</c><01:02:43.520><c> ago</c><01:02:43.839><c> that</c><01:02:44.000><c> was</c>

01:02:44.390 --> 01:02:44.400 align:start position:0%
created years ago that was
 

01:02:44.400 --> 01:02:46.870 align:start position:0%
created years ago that was
c<01:02:44.559><c> sharp</c><01:02:44.880><c> basics</c><01:02:45.280><c> for</c><01:02:45.599><c> beginners</c><01:02:46.559><c> there</c><01:02:46.799><c> i</c>

01:02:46.870 --> 01:02:46.880 align:start position:0%
c sharp basics for beginners there i
 

01:02:46.880 --> 01:02:48.549 align:start position:0%
c sharp basics for beginners there i
used<01:02:47.119><c> the</c><01:02:47.200><c> same</c><01:02:47.440><c> example</c><01:02:47.920><c> to</c><01:02:48.079><c> teach</c><01:02:48.400><c> the</c>

01:02:48.549 --> 01:02:48.559 align:start position:0%
used the same example to teach the
 

01:02:48.559 --> 01:02:50.549 align:start position:0%
used the same example to teach the
concept<01:02:49.039><c> of</c><01:02:49.200><c> constants</c><01:02:49.839><c> but</c><01:02:50.000><c> i</c><01:02:50.160><c> pronounce</c>

01:02:50.549 --> 01:02:50.559 align:start position:0%
concept of constants but i pronounce
 

01:02:50.559 --> 01:02:51.270 align:start position:0%
concept of constants but i pronounce
this<01:02:50.720><c> word</c><01:02:51.039><c> as</c>

01:02:51.270 --> 01:02:51.280 align:start position:0%
this word as
 

01:02:51.280 --> 01:02:54.630 align:start position:0%
this word as
p<01:02:51.839><c> instead</c><01:02:52.240><c> of</c><01:02:52.400><c> pi</c><01:02:53.039><c> and</c><01:02:53.920><c> believe</c><01:02:54.160><c> it</c><01:02:54.319><c> or</c><01:02:54.400><c> not</c><01:02:54.559><c> to</c>

01:02:54.630 --> 01:02:54.640 align:start position:0%
p instead of pi and believe it or not to
 

01:02:54.640 --> 01:02:56.230 align:start position:0%
p instead of pi and believe it or not to
this<01:02:54.799><c> date</c><01:02:55.039><c> people</c><01:02:55.359><c> make</c><01:02:55.520><c> fun</c><01:02:55.680><c> of</c><01:02:55.839><c> me</c>

01:02:56.230 --> 01:02:56.240 align:start position:0%
this date people make fun of me
 

01:02:56.240 --> 01:02:59.510 align:start position:0%
this date people make fun of me
for<01:02:56.480><c> saying</c><01:02:56.799><c> p</c><01:02:57.039><c> instead</c><01:02:57.359><c> of</c><01:02:57.520><c> pi</c><01:02:58.319><c> but</c>

01:02:59.510 --> 01:02:59.520 align:start position:0%
for saying p instead of pi but
 

01:02:59.520 --> 01:03:01.349 align:start position:0%
for saying p instead of pi but
that's<01:02:59.760><c> how</c><01:02:59.920><c> we</c><01:03:00.079><c> learned</c><01:03:00.240><c> this</c><01:03:00.480><c> back</c><01:03:00.720><c> in</c><01:03:00.880><c> iran</c>

01:03:01.349 --> 01:03:01.359 align:start position:0%
that's how we learned this back in iran
 

01:03:01.359 --> 01:03:02.789 align:start position:0%
that's how we learned this back in iran
we<01:03:01.760><c> pronounce</c><01:03:02.240><c> it</c><01:03:02.319><c> as</c><01:03:02.559><c> p</c>

01:03:02.789 --> 01:03:02.799 align:start position:0%
we pronounce it as p
 

01:03:02.799 --> 01:03:05.510 align:start position:0%
we pronounce it as p
and<01:03:02.880><c> i</c><01:03:03.039><c> think</c><01:03:03.520><c> greek</c><01:03:03.839><c> people</c><01:03:04.079><c> also</c><01:03:04.400><c> say</c><01:03:04.640><c> p</c><01:03:05.200><c> but</c>

01:03:05.510 --> 01:03:05.520 align:start position:0%
and i think greek people also say p but
 

01:03:05.520 --> 01:03:06.710 align:start position:0%
and i think greek people also say p but
anyway<01:03:05.839><c> i</c><01:03:05.920><c> just</c><01:03:06.079><c> thought</c><01:03:06.240><c> to</c><01:03:06.400><c> share</c><01:03:06.559><c> this</c>

01:03:06.710 --> 01:03:06.720 align:start position:0%
anyway i just thought to share this
 

01:03:06.720 --> 01:03:08.390 align:start position:0%
anyway i just thought to share this
video<01:03:07.119><c> to</c><01:03:07.280><c> change</c><01:03:07.520><c> the</c><01:03:07.680><c> mood</c>

01:03:08.390 --> 01:03:08.400 align:start position:0%
video to change the mood
 

01:03:08.400 --> 01:03:10.950 align:start position:0%
video to change the mood
now<01:03:09.039><c> we're</c><01:03:09.280><c> done</c><01:03:09.520><c> with</c><01:03:09.680><c> constants</c><01:03:10.559><c> next</c><01:03:10.799><c> we're</c>

01:03:10.950 --> 01:03:10.960 align:start position:0%
now we're done with constants next we're
 

01:03:10.960 --> 01:03:11.829 align:start position:0%
now we're done with constants next we're
going<01:03:11.039><c> to</c><01:03:11.119><c> talk</c><01:03:11.359><c> about</c>

01:03:11.829 --> 01:03:11.839 align:start position:0%
going to talk about
 

01:03:11.839 --> 01:03:19.670 align:start position:0%
going to talk about
arithmetic<01:03:14.839><c> expressions</c>

01:03:19.670 --> 01:03:19.680 align:start position:0%
 
 

01:03:19.680 --> 01:03:20.710 align:start position:0%
 
in<01:03:19.760><c> this</c><01:03:19.920><c> tutorial</c><01:03:20.240><c> we're</c><01:03:20.400><c> going</c><01:03:20.480><c> to</c><01:03:20.559><c> talk</c>

01:03:20.710 --> 01:03:20.720 align:start position:0%
in this tutorial we're going to talk
 

01:03:20.720 --> 01:03:23.349 align:start position:0%
in this tutorial we're going to talk
about<01:03:21.039><c> arithmetic</c><01:03:21.680><c> expressions</c><01:03:22.319><c> in</c><01:03:22.640><c> java</c>

01:03:23.349 --> 01:03:23.359 align:start position:0%
about arithmetic expressions in java
 

01:03:23.359 --> 01:03:25.430 align:start position:0%
about arithmetic expressions in java
so<01:03:23.599><c> in</c><01:03:23.680><c> java</c><01:03:24.000><c> we</c><01:03:24.160><c> have</c><01:03:24.319><c> the</c><01:03:24.480><c> same</c><01:03:24.720><c> arithmetic</c>

01:03:25.430 --> 01:03:25.440 align:start position:0%
so in java we have the same arithmetic
 

01:03:25.440 --> 01:03:27.190 align:start position:0%
so in java we have the same arithmetic
operators<01:03:25.920><c> that</c><01:03:26.079><c> we</c><01:03:26.240><c> have</c><01:03:26.480><c> in</c><01:03:26.640><c> math</c>

01:03:27.190 --> 01:03:27.200 align:start position:0%
operators that we have in math
 

01:03:27.200 --> 01:03:29.670 align:start position:0%
operators that we have in math
we<01:03:27.359><c> have</c><01:03:27.680><c> addition</c><01:03:28.480><c> subtraction</c>

01:03:29.670 --> 01:03:29.680 align:start position:0%
we have addition subtraction
 

01:03:29.680 --> 01:03:31.029 align:start position:0%
we have addition subtraction
multiplication

01:03:31.029 --> 01:03:31.039 align:start position:0%
multiplication
 

01:03:31.039 --> 01:03:33.349 align:start position:0%
multiplication
division<01:03:31.920><c> and</c><01:03:32.240><c> modulus</c><01:03:32.799><c> which</c><01:03:33.039><c> is</c><01:03:33.119><c> the</c>

01:03:33.349 --> 01:03:33.359 align:start position:0%
division and modulus which is the
 

01:03:33.359 --> 01:03:34.150 align:start position:0%
division and modulus which is the
remainder

01:03:34.150 --> 01:03:34.160 align:start position:0%
remainder
 

01:03:34.160 --> 01:03:35.829 align:start position:0%
remainder
of<01:03:34.319><c> a</c><01:03:34.400><c> division</c><01:03:35.119><c> let's</c><01:03:35.280><c> look</c><01:03:35.440><c> at</c><01:03:35.599><c> a</c><01:03:35.680><c> few</c>

01:03:35.829 --> 01:03:35.839 align:start position:0%
of a division let's look at a few
 

01:03:35.839 --> 01:03:37.750 align:start position:0%
of a division let's look at a few
examples<01:03:36.880><c> so</c><01:03:37.039><c> i'm</c><01:03:37.200><c> going</c><01:03:37.280><c> to</c><01:03:37.359><c> declare</c><01:03:37.599><c> an</c>

01:03:37.750 --> 01:03:37.760 align:start position:0%
examples so i'm going to declare an
 

01:03:37.760 --> 01:03:38.549 align:start position:0%
examples so i'm going to declare an
integer

01:03:38.549 --> 01:03:38.559 align:start position:0%
integer
 

01:03:38.559 --> 01:03:41.430 align:start position:0%
integer
called<01:03:39.039><c> result</c><01:03:40.000><c> and</c><01:03:40.160><c> here</c><01:03:40.319><c> we</c><01:03:40.400><c> can</c><01:03:40.559><c> type</c><01:03:40.880><c> 10</c>

01:03:41.430 --> 01:03:41.440 align:start position:0%
called result and here we can type 10
 

01:03:41.440 --> 01:03:42.069 align:start position:0%
called result and here we can type 10
plus

01:03:42.069 --> 01:03:42.079 align:start position:0%
plus
 

01:03:42.079 --> 01:03:44.789 align:start position:0%
plus
3.<01:03:43.200><c> now</c><01:03:43.359><c> when</c><01:03:43.520><c> we</c><01:03:43.680><c> print</c><01:03:44.000><c> result</c><01:03:44.480><c> it's</c><01:03:44.720><c> going</c>

01:03:44.789 --> 01:03:44.799 align:start position:0%
3. now when we print result it's going
 

01:03:44.799 --> 01:03:46.069 align:start position:0%
3. now when we print result it's going
to<01:03:44.880><c> be</c><01:03:45.039><c> 13.</c>

01:03:46.069 --> 01:03:46.079 align:start position:0%
to be 13.
 

01:03:46.079 --> 01:03:48.549 align:start position:0%
to be 13.
pretty<01:03:46.319><c> straightforward</c><01:03:47.119><c> there</c><01:03:47.280><c> you</c><01:03:47.440><c> go</c><01:03:48.400><c> so</c>

01:03:48.549 --> 01:03:48.559 align:start position:0%
pretty straightforward there you go so
 

01:03:48.559 --> 01:03:50.309 align:start position:0%
pretty straightforward there you go so
this<01:03:48.720><c> is</c><01:03:48.880><c> addition</c><01:03:49.280><c> we</c><01:03:49.440><c> also</c><01:03:49.760><c> have</c>

01:03:50.309 --> 01:03:50.319 align:start position:0%
this is addition we also have
 

01:03:50.319 --> 01:03:53.750 align:start position:0%
this is addition we also have
subtraction<01:03:51.599><c> multiplication</c><01:03:53.119><c> division</c><01:03:53.599><c> is</c>

01:03:53.750 --> 01:03:53.760 align:start position:0%
subtraction multiplication division is
 

01:03:53.760 --> 01:03:57.349 align:start position:0%
subtraction multiplication division is
an<01:03:53.839><c> interesting</c><01:03:54.319><c> one</c><01:03:54.559><c> let's</c><01:03:54.720><c> take</c><01:03:54.960><c> a</c><01:03:55.039><c> look</c>

01:03:57.349 --> 01:03:57.359 align:start position:0%
 
 

01:03:57.359 --> 01:03:59.430 align:start position:0%
 
so<01:03:57.520><c> here</c><01:03:57.760><c> the</c><01:03:57.920><c> result</c><01:03:58.319><c> is</c><01:03:58.400><c> a</c><01:03:58.480><c> whole</c><01:03:58.720><c> number</c>

01:03:59.430 --> 01:03:59.440 align:start position:0%
so here the result is a whole number
 

01:03:59.440 --> 01:04:00.470 align:start position:0%
so here the result is a whole number
because<01:03:59.760><c> in</c><01:04:00.000><c> java</c>

01:04:00.470 --> 01:04:00.480 align:start position:0%
because in java
 

01:04:00.480 --> 01:04:02.470 align:start position:0%
because in java
the<01:04:00.640><c> division</c><01:04:01.119><c> of</c><01:04:01.200><c> two</c><01:04:01.440><c> whole</c><01:04:01.680><c> numbers</c><01:04:02.240><c> is</c><01:04:02.400><c> a</c>

01:04:02.470 --> 01:04:02.480 align:start position:0%
the division of two whole numbers is a
 

01:04:02.480 --> 01:04:03.510 align:start position:0%
the division of two whole numbers is a
whole<01:04:02.720><c> number</c>

01:04:03.510 --> 01:04:03.520 align:start position:0%
whole number
 

01:04:03.520 --> 01:04:04.710 align:start position:0%
whole number
if<01:04:03.680><c> you</c><01:04:03.760><c> want</c><01:04:03.839><c> to</c><01:04:03.920><c> get</c><01:04:04.079><c> a</c><01:04:04.160><c> floating</c><01:04:04.559><c> point</c>

01:04:04.710 --> 01:04:04.720 align:start position:0%
if you want to get a floating point
 

01:04:04.720 --> 01:04:06.549 align:start position:0%
if you want to get a floating point
number<01:04:05.039><c> here</c><01:04:05.440><c> you</c><01:04:05.599><c> need</c><01:04:05.760><c> to</c><01:04:05.920><c> convert</c>

01:04:06.549 --> 01:04:06.559 align:start position:0%
number here you need to convert
 

01:04:06.559 --> 01:04:09.430 align:start position:0%
number here you need to convert
these<01:04:06.880><c> numbers</c><01:04:07.599><c> to</c><01:04:07.839><c> a</c><01:04:07.920><c> float</c><01:04:08.400><c> or</c><01:04:08.559><c> a</c><01:04:08.720><c> double</c><01:04:09.280><c> let</c>

01:04:09.430 --> 01:04:09.440 align:start position:0%
these numbers to a float or a double let
 

01:04:09.440 --> 01:04:10.309 align:start position:0%
these numbers to a float or a double let
me<01:04:09.599><c> show</c><01:04:09.760><c> you</c>

01:04:10.309 --> 01:04:10.319 align:start position:0%
me show you
 

01:04:10.319 --> 01:04:14.069 align:start position:0%
me show you
so<01:04:11.280><c> we</c><01:04:11.520><c> prefixed</c><01:04:12.160><c> this</c><01:04:12.319><c> number</c>

01:04:14.069 --> 01:04:14.079 align:start position:0%
so we prefixed this number
 

01:04:14.079 --> 01:04:15.990 align:start position:0%
so we prefixed this number
with<01:04:14.319><c> parentheses</c><01:04:15.039><c> and</c><01:04:15.200><c> in</c><01:04:15.280><c> parenthesis</c><01:04:15.760><c> we</c>

01:04:15.990 --> 01:04:16.000 align:start position:0%
with parentheses and in parenthesis we
 

01:04:16.000 --> 01:04:17.670 align:start position:0%
with parentheses and in parenthesis we
type<01:04:16.640><c> double</c>

01:04:17.670 --> 01:04:17.680 align:start position:0%
type double
 

01:04:17.680 --> 01:04:20.230 align:start position:0%
type double
now<01:04:17.839><c> we</c><01:04:18.000><c> are</c><01:04:18.319><c> casting</c><01:04:19.200><c> or</c><01:04:19.440><c> converting</c><01:04:20.000><c> this</c>

01:04:20.230 --> 01:04:20.240 align:start position:0%
now we are casting or converting this
 

01:04:20.240 --> 01:04:20.950 align:start position:0%
now we are casting or converting this
number

01:04:20.950 --> 01:04:20.960 align:start position:0%
number
 

01:04:20.960 --> 01:04:23.190 align:start position:0%
number
to<01:04:21.119><c> a</c><01:04:21.200><c> double</c><01:04:22.240><c> similarly</c><01:04:22.640><c> we</c><01:04:22.720><c> should</c><01:04:22.880><c> do</c><01:04:23.039><c> that</c>

01:04:23.190 --> 01:04:23.200 align:start position:0%
to a double similarly we should do that
 

01:04:23.200 --> 01:04:24.950 align:start position:0%
to a double similarly we should do that
here

01:04:24.950 --> 01:04:24.960 align:start position:0%
here
 

01:04:24.960 --> 01:04:26.710 align:start position:0%
here
and<01:04:25.119><c> now</c><01:04:25.359><c> we</c><01:04:25.440><c> have</c><01:04:25.520><c> a</c><01:04:25.599><c> compilation</c><01:04:26.079><c> error</c>

01:04:26.710 --> 01:04:26.720 align:start position:0%
and now we have a compilation error
 

01:04:26.720 --> 01:04:28.230 align:start position:0%
and now we have a compilation error
because<01:04:27.039><c> on</c><01:04:27.200><c> the</c><01:04:27.359><c> left</c><01:04:27.599><c> side</c>

01:04:28.230 --> 01:04:28.240 align:start position:0%
because on the left side
 

01:04:28.240 --> 01:04:30.710 align:start position:0%
because on the left side
we<01:04:28.400><c> declared</c><01:04:28.880><c> an</c><01:04:29.039><c> integer</c><01:04:29.760><c> but</c><01:04:30.000><c> here</c><01:04:30.480><c> the</c>

01:04:30.710 --> 01:04:30.720 align:start position:0%
we declared an integer but here the
 

01:04:30.720 --> 01:04:32.390 align:start position:0%
we declared an integer but here the
result<01:04:31.200><c> of</c><01:04:31.280><c> this</c><01:04:31.520><c> expression</c>

01:04:32.390 --> 01:04:32.400 align:start position:0%
result of this expression
 

01:04:32.400 --> 01:04:34.870 align:start position:0%
result of this expression
is<01:04:32.640><c> a</c><01:04:32.799><c> double</c><01:04:33.520><c> and</c><01:04:33.680><c> by</c><01:04:33.920><c> the</c><01:04:34.000><c> way</c><01:04:34.160><c> an</c><01:04:34.319><c> expression</c>

01:04:34.870 --> 01:04:34.880 align:start position:0%
is a double and by the way an expression
 

01:04:34.880 --> 01:04:37.190 align:start position:0%
is a double and by the way an expression
is<01:04:35.039><c> a</c><01:04:35.119><c> piece</c><01:04:35.359><c> of</c><01:04:35.520><c> code</c><01:04:35.680><c> that</c><01:04:35.920><c> produces</c><01:04:36.400><c> a</c><01:04:36.559><c> value</c>

01:04:37.190 --> 01:04:37.200 align:start position:0%
is a piece of code that produces a value
 

01:04:37.200 --> 01:04:39.670 align:start position:0%
is a piece of code that produces a value
so<01:04:37.680><c> what</c><01:04:37.839><c> we</c><01:04:38.000><c> have</c><01:04:38.160><c> here</c><01:04:38.720><c> is</c><01:04:38.880><c> an</c><01:04:39.039><c> expression</c>

01:04:39.670 --> 01:04:39.680 align:start position:0%
so what we have here is an expression
 

01:04:39.680 --> 01:04:41.910 align:start position:0%
so what we have here is an expression
because<01:04:40.000><c> it</c><01:04:40.240><c> produces</c><01:04:40.720><c> a</c><01:04:40.880><c> value</c>

01:04:41.910 --> 01:04:41.920 align:start position:0%
because it produces a value
 

01:04:41.920 --> 01:04:43.589 align:start position:0%
because it produces a value
so<01:04:42.160><c> to</c><01:04:42.240><c> fix</c><01:04:42.480><c> this</c><01:04:42.640><c> problem</c><01:04:42.960><c> we</c><01:04:43.119><c> need</c><01:04:43.280><c> to</c><01:04:43.359><c> change</c>

01:04:43.589 --> 01:04:43.599 align:start position:0%
so to fix this problem we need to change
 

01:04:43.599 --> 01:04:44.950 align:start position:0%
so to fix this problem we need to change
this<01:04:43.760><c> to</c><01:04:44.000><c> double</c>

01:04:44.950 --> 01:04:44.960 align:start position:0%
this to double
 

01:04:44.960 --> 01:04:47.109 align:start position:0%
this to double
now<01:04:45.200><c> when</c><01:04:45.280><c> we</c><01:04:45.440><c> run</c><01:04:45.599><c> this</c><01:04:45.760><c> program</c><01:04:46.240><c> we</c><01:04:46.400><c> get</c><01:04:46.880><c> this</c>

01:04:47.109 --> 01:04:47.119 align:start position:0%
now when we run this program we get this
 

01:04:47.119 --> 01:04:48.309 align:start position:0%
now when we run this program we get this
floating<01:04:47.520><c> point</c><01:04:47.760><c> number</c>

01:04:48.309 --> 01:04:48.319 align:start position:0%
floating point number
 

01:04:48.319 --> 01:04:51.349 align:start position:0%
floating point number
beautiful<01:04:50.000><c> so</c><01:04:50.160><c> these</c><01:04:50.400><c> are</c><01:04:50.480><c> the</c><01:04:50.559><c> arithmetic</c>

01:04:51.349 --> 01:04:51.359 align:start position:0%
beautiful so these are the arithmetic
 

01:04:51.359 --> 01:04:52.150 align:start position:0%
beautiful so these are the arithmetic
operators

01:04:52.150 --> 01:04:52.160 align:start position:0%
operators
 

01:04:52.160 --> 01:04:53.589 align:start position:0%
operators
and<01:04:52.319><c> these</c><01:04:52.480><c> numbers</c><01:04:52.880><c> that</c><01:04:52.960><c> we</c><01:04:53.039><c> have</c><01:04:53.200><c> here</c><01:04:53.440><c> are</c>

01:04:53.589 --> 01:04:53.599 align:start position:0%
and these numbers that we have here are
 

01:04:53.599 --> 01:04:55.190 align:start position:0%
and these numbers that we have here are
called<01:04:54.160><c> operands</c>

01:04:55.190 --> 01:04:55.200 align:start position:0%
called operands
 

01:04:55.200 --> 01:04:57.430 align:start position:0%
called operands
we<01:04:55.440><c> also</c><01:04:55.680><c> have</c><01:04:56.079><c> increment</c><01:04:56.720><c> and</c><01:04:56.880><c> decrement</c>

01:04:57.430 --> 01:04:57.440 align:start position:0%
we also have increment and decrement
 

01:04:57.440 --> 01:04:59.190 align:start position:0%
we also have increment and decrement
operators<01:04:58.000><c> let</c><01:04:58.160><c> me</c><01:04:58.319><c> show</c><01:04:58.480><c> you</c>

01:04:59.190 --> 01:04:59.200 align:start position:0%
operators let me show you
 

01:04:59.200 --> 01:05:02.150 align:start position:0%
operators let me show you
so<01:04:59.680><c> i'm</c><01:04:59.839><c> going</c><01:05:00.000><c> to</c><01:05:00.079><c> declare</c><01:05:00.799><c> a</c><01:05:00.880><c> new</c><01:05:01.119><c> variable</c>

01:05:02.150 --> 01:05:02.160 align:start position:0%
so i'm going to declare a new variable
 

01:05:02.160 --> 01:05:02.789 align:start position:0%
so i'm going to declare a new variable
and

01:05:02.789 --> 01:05:02.799 align:start position:0%
and
 

01:05:02.799 --> 01:05:05.029 align:start position:0%
and
x<01:05:03.039><c> we</c><01:05:03.200><c> set</c><01:05:03.359><c> it</c><01:05:03.440><c> to</c><01:05:03.599><c> 1.</c><01:05:04.480><c> now</c><01:05:04.640><c> if</c><01:05:04.720><c> you</c><01:05:04.799><c> want</c><01:05:04.880><c> to</c>

01:05:05.029 --> 01:05:05.039 align:start position:0%
x we set it to 1. now if you want to
 

01:05:05.039 --> 01:05:06.470 align:start position:0%
x we set it to 1. now if you want to
increase<01:05:05.359><c> the</c><01:05:05.520><c> value</c><01:05:05.839><c> of</c><01:05:06.000><c> x</c>

01:05:06.470 --> 01:05:06.480 align:start position:0%
increase the value of x
 

01:05:06.480 --> 01:05:09.829 align:start position:0%
increase the value of x
by<01:05:06.720><c> 1</c><01:05:07.200><c> we</c><01:05:07.359><c> use</c><01:05:07.520><c> the</c><01:05:07.839><c> increment</c><01:05:08.799><c> operator</c>

01:05:09.829 --> 01:05:09.839 align:start position:0%
by 1 we use the increment operator
 

01:05:09.839 --> 01:05:12.630 align:start position:0%
by 1 we use the increment operator
now<01:05:10.079><c> let's</c><01:05:10.319><c> print</c><01:05:10.640><c> this</c><01:05:10.720><c> on</c><01:05:10.880><c> the</c><01:05:11.039><c> terminal</c><01:05:12.319><c> so</c>

01:05:12.630 --> 01:05:12.640 align:start position:0%
now let's print this on the terminal so
 

01:05:12.640 --> 01:05:13.589 align:start position:0%
now let's print this on the terminal so
we<01:05:12.799><c> get</c>

01:05:13.589 --> 01:05:13.599 align:start position:0%
we get
 

01:05:13.599 --> 01:05:16.069 align:start position:0%
we get
two<01:05:14.000><c> there</c><01:05:14.240><c> you</c><01:05:14.319><c> go</c><01:05:15.200><c> we</c><01:05:15.359><c> can</c><01:05:15.520><c> apply</c><01:05:15.760><c> this</c>

01:05:16.069 --> 01:05:16.079 align:start position:0%
two there you go we can apply this
 

01:05:16.079 --> 01:05:17.829 align:start position:0%
two there you go we can apply this
operator<01:05:16.640><c> as</c><01:05:16.799><c> a</c><01:05:16.960><c> postfix</c>

01:05:17.829 --> 01:05:17.839 align:start position:0%
operator as a postfix
 

01:05:17.839 --> 01:05:20.710 align:start position:0%
operator as a postfix
or<01:05:18.880><c> as</c><01:05:19.039><c> a</c><01:05:19.119><c> prefix</c><01:05:19.839><c> and</c><01:05:19.920><c> we</c><01:05:20.079><c> get</c><01:05:20.240><c> the</c><01:05:20.400><c> same</c>

01:05:20.710 --> 01:05:20.720 align:start position:0%
or as a prefix and we get the same
 

01:05:20.720 --> 01:05:21.589 align:start position:0%
or as a prefix and we get the same
result

01:05:21.589 --> 01:05:21.599 align:start position:0%
result
 

01:05:21.599 --> 01:05:24.710 align:start position:0%
result
take<01:05:21.839><c> a</c><01:05:21.920><c> look</c><01:05:22.400><c> too</c><01:05:23.200><c> however</c><01:05:24.000><c> if</c><01:05:24.160><c> we</c><01:05:24.240><c> use</c><01:05:24.480><c> this</c>

01:05:24.710 --> 01:05:24.720 align:start position:0%
take a look too however if we use this
 

01:05:24.720 --> 01:05:26.230 align:start position:0%
take a look too however if we use this
on<01:05:24.880><c> the</c><01:05:25.039><c> right</c><01:05:25.280><c> side</c><01:05:25.520><c> of</c><01:05:25.599><c> an</c><01:05:25.760><c> assignment</c>

01:05:26.230 --> 01:05:26.240 align:start position:0%
on the right side of an assignment
 

01:05:26.240 --> 01:05:26.950 align:start position:0%
on the right side of an assignment
operator

01:05:26.950 --> 01:05:26.960 align:start position:0%
operator
 

01:05:26.960 --> 01:05:29.349 align:start position:0%
operator
we<01:05:27.119><c> get</c><01:05:27.280><c> different</c><01:05:27.680><c> results</c><01:05:28.400><c> let</c><01:05:28.559><c> me</c><01:05:28.720><c> show</c><01:05:28.880><c> you</c>

01:05:29.349 --> 01:05:29.359 align:start position:0%
we get different results let me show you
 

01:05:29.359 --> 01:05:30.390 align:start position:0%
we get different results let me show you
so<01:05:29.599><c> i'm</c><01:05:29.680><c> going</c><01:05:29.760><c> to</c><01:05:29.839><c> declare</c>

01:05:30.390 --> 01:05:30.400 align:start position:0%
so i'm going to declare
 

01:05:30.400 --> 01:05:33.589 align:start position:0%
so i'm going to declare
another<01:05:30.799><c> variable</c><01:05:31.680><c> y</c><01:05:32.319><c> we</c><01:05:32.480><c> set</c><01:05:32.720><c> it</c><01:05:32.799><c> to</c><01:05:33.039><c> x</c>

01:05:33.589 --> 01:05:33.599 align:start position:0%
another variable y we set it to x
 

01:05:33.599 --> 01:05:36.069 align:start position:0%
another variable y we set it to x
plus<01:05:33.920><c> plus</c><01:05:34.960><c> in</c><01:05:35.039><c> this</c><01:05:35.200><c> case</c><01:05:35.520><c> because</c><01:05:35.760><c> we</c><01:05:35.920><c> have</c>

01:05:36.069 --> 01:05:36.079 align:start position:0%
plus plus in this case because we have
 

01:05:36.079 --> 01:05:37.910 align:start position:0%
plus plus in this case because we have
applied<01:05:36.480><c> the</c><01:05:36.640><c> increment</c><01:05:37.280><c> operator</c>

01:05:37.910 --> 01:05:37.920 align:start position:0%
applied the increment operator
 

01:05:37.920 --> 01:05:40.950 align:start position:0%
applied the increment operator
as<01:05:38.079><c> a</c><01:05:38.240><c> postfix</c><01:05:39.599><c> first</c><01:05:39.920><c> the</c><01:05:40.079><c> value</c><01:05:40.319><c> of</c><01:05:40.559><c> x</c><01:05:40.799><c> will</c>

01:05:40.950 --> 01:05:40.960 align:start position:0%
as a postfix first the value of x will
 

01:05:40.960 --> 01:05:41.270 align:start position:0%
as a postfix first the value of x will
get

01:05:41.270 --> 01:05:41.280 align:start position:0%
get
 

01:05:41.280 --> 01:05:44.309 align:start position:0%
get
copied<01:05:41.680><c> to</c><01:05:41.839><c> y</c><01:05:42.319><c> so</c><01:05:42.559><c> y</c><01:05:42.799><c> will</c><01:05:42.960><c> be</c><01:05:43.200><c> one</c><01:05:43.920><c> and</c>

01:05:44.309 --> 01:05:44.319 align:start position:0%
copied to y so y will be one and
 

01:05:44.319 --> 01:05:47.349 align:start position:0%
copied to y so y will be one and
then<01:05:45.039><c> x</c><01:05:45.280><c> will</c><01:05:45.359><c> be</c><01:05:45.599><c> incremented</c><01:05:46.240><c> by</c><01:05:46.480><c> one</c>

01:05:47.349 --> 01:05:47.359 align:start position:0%
then x will be incremented by one
 

01:05:47.359 --> 01:05:51.109 align:start position:0%
then x will be incremented by one
so<01:05:48.079><c> if</c><01:05:48.160><c> we</c><01:05:48.400><c> print</c><01:05:49.119><c> x</c><01:05:49.599><c> and</c><01:05:49.760><c> y</c>

01:05:51.109 --> 01:05:51.119 align:start position:0%
so if we print x and y
 

01:05:51.119 --> 01:05:53.270 align:start position:0%
so if we print x and y
x<01:05:51.359><c> is</c><01:05:51.440><c> going</c><01:05:51.520><c> to</c><01:05:51.599><c> be</c><01:05:51.760><c> 2</c><01:05:52.480><c> and</c><01:05:52.640><c> y</c><01:05:52.880><c> is</c><01:05:52.960><c> going</c><01:05:53.039><c> to</c><01:05:53.119><c> be</c>

01:05:53.270 --> 01:05:53.280 align:start position:0%
x is going to be 2 and y is going to be
 

01:05:53.280 --> 01:05:55.829 align:start position:0%
x is going to be 2 and y is going to be
1.<01:05:53.920><c> take</c><01:05:54.160><c> a</c><01:05:54.240><c> look</c>

01:05:55.829 --> 01:05:55.839 align:start position:0%
1. take a look
 

01:05:55.839 --> 01:05:59.029 align:start position:0%
1. take a look
so<01:05:56.079><c> x</c><01:05:56.240><c> is</c><01:05:56.400><c> 2</c><01:05:56.720><c> and</c><01:05:57.200><c> y</c><01:05:57.520><c> is</c><01:05:57.680><c> 1.</c><01:05:58.000><c> beautiful</c>

01:05:59.029 --> 01:05:59.039 align:start position:0%
so x is 2 and y is 1. beautiful
 

01:05:59.039 --> 01:06:03.750 align:start position:0%
so x is 2 and y is 1. beautiful
however<01:05:59.920><c> if</c><01:06:00.079><c> we</c><01:06:00.319><c> apply</c><01:06:00.640><c> this</c><01:06:01.520><c> as</c><01:06:01.680><c> a</c><01:06:01.839><c> prefix</c>

01:06:03.750 --> 01:06:03.760 align:start position:0%
however if we apply this as a prefix
 

01:06:03.760 --> 01:06:06.309 align:start position:0%
however if we apply this as a prefix
first<01:06:04.480><c> x</c><01:06:04.640><c> will</c><01:06:04.799><c> be</c><01:06:05.039><c> incremented</c><01:06:05.599><c> by</c><01:06:05.839><c> one</c><01:06:06.000><c> so</c><01:06:06.160><c> it</c>

01:06:06.309 --> 01:06:06.319 align:start position:0%
first x will be incremented by one so it
 

01:06:06.319 --> 01:06:07.349 align:start position:0%
first x will be incremented by one so it
will<01:06:06.480><c> be</c><01:06:06.640><c> two</c>

01:06:07.349 --> 01:06:07.359 align:start position:0%
will be two
 

01:06:07.359 --> 01:06:09.670 align:start position:0%
will be two
and<01:06:07.680><c> then</c><01:06:07.920><c> it</c><01:06:08.000><c> will</c><01:06:08.160><c> be</c><01:06:08.319><c> copied</c><01:06:08.720><c> to</c><01:06:08.960><c> y</c><01:06:09.359><c> so</c><01:06:09.520><c> in</c>

01:06:09.670 --> 01:06:09.680 align:start position:0%
and then it will be copied to y so in
 

01:06:09.680 --> 01:06:11.510 align:start position:0%
and then it will be copied to y so in
this<01:06:09.839><c> case</c><01:06:10.319><c> both</c><01:06:10.640><c> x</c><01:06:10.880><c> and</c><01:06:11.039><c> y</c>

01:06:11.510 --> 01:06:11.520 align:start position:0%
this case both x and y
 

01:06:11.520 --> 01:06:15.270 align:start position:0%
this case both x and y
will<01:06:11.680><c> be</c><01:06:11.839><c> two</c><01:06:12.400><c> take</c><01:06:12.640><c> a</c><01:06:12.720><c> look</c>

01:06:15.270 --> 01:06:15.280 align:start position:0%
 
 

01:06:15.280 --> 01:06:18.390 align:start position:0%
 
so<01:06:15.520><c> we</c><01:06:15.599><c> get</c><01:06:15.839><c> two</c><01:06:16.079><c> and</c><01:06:16.240><c> two</c><01:06:17.440><c> now</c><01:06:18.000><c> what</c><01:06:18.240><c> if</c><01:06:18.319><c> you</c>

01:06:18.390 --> 01:06:18.400 align:start position:0%
so we get two and two now what if you
 

01:06:18.400 --> 01:06:19.270 align:start position:0%
so we get two and two now what if you
want<01:06:18.559><c> to</c><01:06:18.720><c> increment</c>

01:06:19.270 --> 01:06:19.280 align:start position:0%
want to increment
 

01:06:19.280 --> 01:06:22.309 align:start position:0%
want to increment
x<01:06:19.760><c> by</c><01:06:20.000><c> more</c><01:06:20.240><c> than</c><01:06:20.480><c> one</c><01:06:20.799><c> let's</c><01:06:20.960><c> say</c><01:06:21.280><c> by</c><01:06:21.520><c> 2</c>

01:06:22.309 --> 01:06:22.319 align:start position:0%
x by more than one let's say by 2
 

01:06:22.319 --> 01:06:24.630 align:start position:0%
x by more than one let's say by 2
well<01:06:22.799><c> there</c><01:06:22.960><c> are</c><01:06:23.039><c> two</c><01:06:23.200><c> ways</c><01:06:23.359><c> to</c><01:06:23.520><c> do</c><01:06:23.680><c> this</c><01:06:24.400><c> let's</c>

01:06:24.630 --> 01:06:24.640 align:start position:0%
well there are two ways to do this let's
 

01:06:24.640 --> 01:06:25.349 align:start position:0%
well there are two ways to do this let's
remove<01:06:25.039><c> y</c>

01:06:25.349 --> 01:06:25.359 align:start position:0%
remove y
 

01:06:25.359 --> 01:06:27.589 align:start position:0%
remove y
we<01:06:25.520><c> don't</c><01:06:25.680><c> really</c><01:06:25.839><c> need</c><01:06:26.079><c> it</c><01:06:26.160><c> anymore</c><01:06:27.200><c> we</c><01:06:27.359><c> can</c>

01:06:27.589 --> 01:06:27.599 align:start position:0%
we don't really need it anymore we can
 

01:06:27.599 --> 01:06:28.789 align:start position:0%
we don't really need it anymore we can
write<01:06:28.000><c> x</c>

01:06:28.789 --> 01:06:28.799 align:start position:0%
write x
 

01:06:28.799 --> 01:06:32.309 align:start position:0%
write x
equals<01:06:29.520><c> x</c><01:06:30.079><c> plus</c><01:06:30.480><c> 2.</c><01:06:31.440><c> so</c><01:06:31.599><c> first</c>

01:06:32.309 --> 01:06:32.319 align:start position:0%
equals x plus 2. so first
 

01:06:32.319 --> 01:06:34.870 align:start position:0%
equals x plus 2. so first
we<01:06:32.559><c> add</c><01:06:32.799><c> 2</c><01:06:33.039><c> to</c><01:06:33.280><c> x</c><01:06:33.760><c> the</c><01:06:33.920><c> result</c><01:06:34.319><c> will</c><01:06:34.400><c> be</c><01:06:34.559><c> 3</c><01:06:34.799><c> and</c>

01:06:34.870 --> 01:06:34.880 align:start position:0%
we add 2 to x the result will be 3 and
 

01:06:34.880 --> 01:06:36.390 align:start position:0%
we add 2 to x the result will be 3 and
then<01:06:35.119><c> 3</c><01:06:35.280><c> will</c><01:06:35.440><c> be</c><01:06:35.680><c> copied</c>

01:06:36.390 --> 01:06:36.400 align:start position:0%
then 3 will be copied
 

01:06:36.400 --> 01:06:39.029 align:start position:0%
then 3 will be copied
into<01:06:36.720><c> x</c><01:06:37.520><c> the</c><01:06:37.680><c> other</c><01:06:37.839><c> way</c><01:06:38.079><c> is</c><01:06:38.160><c> to</c><01:06:38.319><c> use</c><01:06:38.799><c> the</c>

01:06:39.029 --> 01:06:39.039 align:start position:0%
into x the other way is to use the
 

01:06:39.039 --> 01:06:40.069 align:start position:0%
into x the other way is to use the
augmented<01:06:39.760><c> or</c>

01:06:40.069 --> 01:06:40.079 align:start position:0%
augmented or
 

01:06:40.079 --> 01:06:43.430 align:start position:0%
augmented or
compound<01:06:41.039><c> assignment</c><01:06:41.760><c> operator</c><01:06:42.799><c> so</c>

01:06:43.430 --> 01:06:43.440 align:start position:0%
compound assignment operator so
 

01:06:43.440 --> 01:06:46.870 align:start position:0%
compound assignment operator so
we<01:06:43.599><c> can</c><01:06:43.839><c> write</c><01:06:44.160><c> x</c><01:06:44.799><c> plus</c><01:06:45.440><c> equals</c><01:06:46.079><c> two</c>

01:06:46.870 --> 01:06:46.880 align:start position:0%
we can write x plus equals two
 

01:06:46.880 --> 01:06:48.710 align:start position:0%
we can write x plus equals two
what<01:06:47.039><c> we</c><01:06:47.200><c> have</c><01:06:47.359><c> on</c><01:06:47.440><c> line</c><01:06:47.680><c> eight</c><01:06:48.000><c> is</c><01:06:48.160><c> exactly</c>

01:06:48.710 --> 01:06:48.720 align:start position:0%
what we have on line eight is exactly
 

01:06:48.720 --> 01:06:49.990 align:start position:0%
what we have on line eight is exactly
identical<01:06:49.200><c> to</c><01:06:49.359><c> what</c><01:06:49.520><c> we</c><01:06:49.680><c> have</c>

01:06:49.990 --> 01:06:50.000 align:start position:0%
identical to what we have
 

01:06:50.000 --> 01:06:51.750 align:start position:0%
identical to what we have
on<01:06:50.160><c> line</c><01:06:50.400><c> seven</c><01:06:50.720><c> but</c><01:06:50.960><c> as</c><01:06:51.039><c> you</c><01:06:51.119><c> can</c><01:06:51.280><c> see</c><01:06:51.520><c> it's</c>

01:06:51.750 --> 01:06:51.760 align:start position:0%
on line seven but as you can see it's
 

01:06:51.760 --> 01:06:53.510 align:start position:0%
on line seven but as you can see it's
shorter<01:06:52.720><c> so</c>

01:06:53.510 --> 01:06:53.520 align:start position:0%
shorter so
 

01:06:53.520 --> 01:06:54.950 align:start position:0%
shorter so
this<01:06:53.760><c> is</c><01:06:53.839><c> a</c><01:06:53.920><c> better</c><01:06:54.160><c> way</c><01:06:54.319><c> to</c><01:06:54.400><c> write</c><01:06:54.640><c> the</c><01:06:54.720><c> same</c>

01:06:54.950 --> 01:06:54.960 align:start position:0%
this is a better way to write the same
 

01:06:54.960 --> 01:06:57.589 align:start position:0%
this is a better way to write the same
code<01:06:55.760><c> now</c><01:06:55.920><c> this</c><01:06:56.079><c> is</c><01:06:56.160><c> one</c><01:06:56.319><c> of</c><01:06:56.400><c> the</c><01:06:56.559><c> augmented</c>

01:06:57.589 --> 01:06:57.599 align:start position:0%
code now this is one of the augmented
 

01:06:57.599 --> 01:06:59.430 align:start position:0%
code now this is one of the augmented
assignment<01:06:58.160><c> operators</c><01:06:59.039><c> we</c><01:06:59.200><c> have</c><01:06:59.359><c> the</c>

01:06:59.430 --> 01:06:59.440 align:start position:0%
assignment operators we have the
 

01:06:59.440 --> 01:07:00.950 align:start position:0%
assignment operators we have the
augmented<01:06:59.839><c> assignment</c><01:07:00.319><c> operator</c><01:07:00.640><c> for</c>

01:07:00.950 --> 01:07:00.960 align:start position:0%
augmented assignment operator for
 

01:07:00.960 --> 01:07:04.069 align:start position:0%
augmented assignment operator for
other<01:07:01.520><c> arithmetic</c><01:07:02.240><c> operators</c><01:07:03.119><c> so</c><01:07:03.680><c> we</c><01:07:03.839><c> can</c>

01:07:04.069 --> 01:07:04.079 align:start position:0%
other arithmetic operators so we can
 

01:07:04.079 --> 01:07:04.789 align:start position:0%
other arithmetic operators so we can
type

01:07:04.789 --> 01:07:04.799 align:start position:0%
type
 

01:07:04.799 --> 01:07:07.029 align:start position:0%
type
x<01:07:05.280><c> minus</c><01:07:05.680><c> equals</c><01:07:06.000><c> two</c><01:07:06.240><c> and</c><01:07:06.319><c> this</c><01:07:06.480><c> will</c><01:07:06.720><c> reduce</c>

01:07:07.029 --> 01:07:07.039 align:start position:0%
x minus equals two and this will reduce
 

01:07:07.039 --> 01:07:07.990 align:start position:0%
x minus equals two and this will reduce
the<01:07:07.200><c> value</c><01:07:07.440><c> of</c><01:07:07.599><c> x</c>

01:07:07.990 --> 01:07:08.000 align:start position:0%
the value of x
 

01:07:08.000 --> 01:07:11.270 align:start position:0%
the value of x
by<01:07:08.240><c> two</c><01:07:09.039><c> we</c><01:07:09.280><c> also</c><01:07:09.520><c> have</c><01:07:09.920><c> multiply</c><01:07:10.799><c> and</c>

01:07:11.270 --> 01:07:11.280 align:start position:0%
by two we also have multiply and
 

01:07:11.280 --> 01:07:14.549 align:start position:0%
by two we also have multiply and
divide<01:07:12.640><c> so</c><01:07:12.799><c> these</c><01:07:13.039><c> are</c><01:07:13.119><c> the</c><01:07:13.280><c> augmented</c><01:07:14.079><c> or</c>

01:07:14.549 --> 01:07:14.559 align:start position:0%
divide so these are the augmented or
 

01:07:14.559 --> 01:07:22.710 align:start position:0%
divide so these are the augmented or
compound<01:07:15.359><c> assignment</c><01:07:16.000><c> operators</c>

01:07:22.710 --> 01:07:22.720 align:start position:0%
 
 

01:07:22.720 --> 01:07:23.910 align:start position:0%
 
all<01:07:22.799><c> right</c><01:07:22.960><c> now</c><01:07:23.119><c> i've</c><01:07:23.200><c> got</c><01:07:23.359><c> a</c><01:07:23.440><c> question</c><01:07:23.760><c> for</c>

01:07:23.910 --> 01:07:23.920 align:start position:0%
all right now i've got a question for
 

01:07:23.920 --> 01:07:25.910 align:start position:0%
all right now i've got a question for
you<01:07:24.559><c> here</c><01:07:24.720><c> we</c><01:07:24.799><c> have</c><01:07:24.960><c> declared</c><01:07:25.280><c> this</c><01:07:25.440><c> variable</c>

01:07:25.910 --> 01:07:25.920 align:start position:0%
you here we have declared this variable
 

01:07:25.920 --> 01:07:29.029 align:start position:0%
you here we have declared this variable
x<01:07:26.319><c> equals</c><01:07:26.720><c> to</c><01:07:26.880><c> 10</c><01:07:27.200><c> plus</c><01:07:27.520><c> 3</c><01:07:27.839><c> times</c><01:07:28.240><c> 2.</c>

01:07:29.029 --> 01:07:29.039 align:start position:0%
x equals to 10 plus 3 times 2.
 

01:07:29.039 --> 01:07:30.870 align:start position:0%
x equals to 10 plus 3 times 2.
what<01:07:29.200><c> do</c><01:07:29.359><c> you</c><01:07:29.440><c> think</c><01:07:29.680><c> is</c><01:07:29.760><c> the</c><01:07:30.000><c> result</c><01:07:30.480><c> of</c><01:07:30.640><c> this</c>

01:07:30.870 --> 01:07:30.880 align:start position:0%
what do you think is the result of this
 

01:07:30.880 --> 01:07:32.549 align:start position:0%
what do you think is the result of this
expression

01:07:32.549 --> 01:07:32.559 align:start position:0%
expression
 

01:07:32.559 --> 01:07:35.670 align:start position:0%
expression
the<01:07:32.799><c> result</c><01:07:33.520><c> is</c><01:07:33.680><c> 16.</c><01:07:34.720><c> let's</c><01:07:34.960><c> run</c><01:07:35.119><c> this</c><01:07:35.280><c> program</c>

01:07:35.670 --> 01:07:35.680 align:start position:0%
the result is 16. let's run this program
 

01:07:35.680 --> 01:07:36.789 align:start position:0%
the result is 16. let's run this program
and<01:07:35.839><c> find</c><01:07:36.160><c> out</c>

01:07:36.789 --> 01:07:36.799 align:start position:0%
and find out
 

01:07:36.799 --> 01:07:40.549 align:start position:0%
and find out
so<01:07:37.119><c> run</c><01:07:37.680><c> there</c><01:07:37.920><c> you</c><01:07:38.079><c> go</c><01:07:38.240><c> we</c><01:07:38.400><c> got</c><01:07:38.640><c> 16.</c><01:07:39.440><c> but</c><01:07:39.680><c> why</c>

01:07:40.549 --> 01:07:40.559 align:start position:0%
so run there you go we got 16. but why
 

01:07:40.559 --> 01:07:42.630 align:start position:0%
so run there you go we got 16. but why
well<01:07:40.720><c> this</c><01:07:40.880><c> is</c><01:07:40.960><c> a</c><01:07:41.039><c> very</c><01:07:41.280><c> basic</c><01:07:41.760><c> math</c><01:07:42.079><c> concept</c>

01:07:42.630 --> 01:07:42.640 align:start position:0%
well this is a very basic math concept
 

01:07:42.640 --> 01:07:44.309 align:start position:0%
well this is a very basic math concept
that<01:07:42.880><c> unfortunately</c><01:07:43.520><c> a</c><01:07:43.520><c> lot</c><01:07:43.680><c> of</c><01:07:43.760><c> people</c><01:07:44.079><c> don't</c>

01:07:44.309 --> 01:07:44.319 align:start position:0%
that unfortunately a lot of people don't
 

01:07:44.319 --> 01:07:45.270 align:start position:0%
that unfortunately a lot of people don't
know

01:07:45.270 --> 01:07:45.280 align:start position:0%
know
 

01:07:45.280 --> 01:07:48.230 align:start position:0%
know
in<01:07:45.520><c> math</c><01:07:46.240><c> the</c><01:07:46.400><c> multiplication</c><01:07:47.359><c> and</c><01:07:47.680><c> division</c>

01:07:48.230 --> 01:07:48.240 align:start position:0%
in math the multiplication and division
 

01:07:48.240 --> 01:07:50.710 align:start position:0%
in math the multiplication and division
operators<01:07:48.880><c> have</c><01:07:49.119><c> a</c><01:07:49.280><c> higher</c><01:07:49.680><c> priority</c>

01:07:50.710 --> 01:07:50.720 align:start position:0%
operators have a higher priority
 

01:07:50.720 --> 01:07:52.789 align:start position:0%
operators have a higher priority
so<01:07:50.880><c> they</c><01:07:51.039><c> get</c><01:07:51.200><c> applied</c><01:07:51.839><c> first</c><01:07:52.480><c> in</c><01:07:52.559><c> this</c>

01:07:52.789 --> 01:07:52.799 align:start position:0%
so they get applied first in this
 

01:07:52.799 --> 01:07:54.870 align:start position:0%
so they get applied first in this
example<01:07:53.680><c> this</c><01:07:54.000><c> expression</c>

01:07:54.870 --> 01:07:54.880 align:start position:0%
example this expression
 

01:07:54.880 --> 01:07:57.829 align:start position:0%
example this expression
3<01:07:55.119><c> times</c><01:07:55.440><c> 2</c><01:07:55.680><c> is</c><01:07:55.920><c> evaluated</c><01:07:56.559><c> first</c><01:07:57.280><c> the</c><01:07:57.440><c> result</c>

01:07:57.829 --> 01:07:57.839 align:start position:0%
3 times 2 is evaluated first the result
 

01:07:57.839 --> 01:07:58.470 align:start position:0%
3 times 2 is evaluated first the result
is<01:07:58.000><c> 6</c>

01:07:58.470 --> 01:07:58.480 align:start position:0%
is 6
 

01:07:58.480 --> 01:08:00.950 align:start position:0%
is 6
and<01:07:58.640><c> then</c><01:07:58.880><c> 6</c><01:07:59.200><c> is</c><01:07:59.359><c> added</c><01:07:59.920><c> to</c><01:08:00.160><c> 10.</c><01:08:00.480><c> that's</c><01:08:00.640><c> why</c><01:08:00.880><c> we</c>

01:08:00.950 --> 01:08:00.960 align:start position:0%
and then 6 is added to 10. that's why we
 

01:08:00.960 --> 01:08:02.309 align:start position:0%
and then 6 is added to 10. that's why we
get<01:08:01.200><c> 16.</c>

01:08:02.309 --> 01:08:02.319 align:start position:0%
get 16.
 

01:08:02.319 --> 01:08:03.829 align:start position:0%
get 16.
now<01:08:02.480><c> if</c><01:08:02.559><c> you</c><01:08:02.640><c> want</c><01:08:02.799><c> to</c><01:08:02.880><c> change</c><01:08:03.200><c> the</c><01:08:03.440><c> order</c><01:08:03.760><c> of</c>

01:08:03.829 --> 01:08:03.839 align:start position:0%
now if you want to change the order of
 

01:08:03.839 --> 01:08:05.589 align:start position:0%
now if you want to change the order of
these<01:08:04.160><c> operators</c><01:08:04.799><c> you</c><01:08:04.880><c> can</c><01:08:05.039><c> always</c><01:08:05.359><c> use</c>

01:08:05.589 --> 01:08:05.599 align:start position:0%
these operators you can always use
 

01:08:05.599 --> 01:08:06.710 align:start position:0%
these operators you can always use
parentheses

01:08:06.710 --> 01:08:06.720 align:start position:0%
parentheses
 

01:08:06.720 --> 01:08:08.549 align:start position:0%
parentheses
for<01:08:06.880><c> example</c><01:08:07.520><c> if</c><01:08:07.680><c> you</c><01:08:07.760><c> want</c><01:08:07.920><c> this</c><01:08:08.079><c> expression</c>

01:08:08.549 --> 01:08:08.559 align:start position:0%
for example if you want this expression
 

01:08:08.559 --> 01:08:10.069 align:start position:0%
for example if you want this expression
to<01:08:08.640><c> be</c><01:08:08.799><c> evaluated</c><01:08:09.440><c> first</c>

01:08:10.069 --> 01:08:10.079 align:start position:0%
to be evaluated first
 

01:08:10.079 --> 01:08:14.870 align:start position:0%
to be evaluated first
we<01:08:10.400><c> wrap</c><01:08:10.640><c> it</c><01:08:10.880><c> in</c><01:08:10.960><c> parenthesis</c><01:08:11.920><c> so</c><01:08:12.960><c> like</c><01:08:13.200><c> this</c>

01:08:14.870 --> 01:08:14.880 align:start position:0%
we wrap it in parenthesis so like this
 

01:08:14.880 --> 01:08:17.510 align:start position:0%
we wrap it in parenthesis so like this
now<01:08:15.440><c> java</c><01:08:15.760><c> compiler</c><01:08:16.319><c> will</c><01:08:16.560><c> first</c><01:08:17.040><c> evaluate</c>

01:08:17.510 --> 01:08:17.520 align:start position:0%
now java compiler will first evaluate
 

01:08:17.520 --> 01:08:19.990 align:start position:0%
now java compiler will first evaluate
this<01:08:17.759><c> expression</c><01:08:18.239><c> the</c><01:08:18.400><c> result</c><01:08:18.880><c> will</c><01:08:19.040><c> be</c><01:08:19.279><c> 13</c>

01:08:19.990 --> 01:08:20.000 align:start position:0%
this expression the result will be 13
 

01:08:20.000 --> 01:08:22.470 align:start position:0%
this expression the result will be 13
and<01:08:20.080><c> then</c><01:08:20.319><c> 13</c><01:08:20.799><c> is</c><01:08:20.880><c> multiplied</c><01:08:21.600><c> by</c><01:08:21.839><c> 2.</c><01:08:22.159><c> so</c><01:08:22.319><c> we</c>

01:08:22.470 --> 01:08:22.480 align:start position:0%
and then 13 is multiplied by 2. so we
 

01:08:22.480 --> 01:08:23.349 align:start position:0%
and then 13 is multiplied by 2. so we
get<01:08:22.640><c> 26.</c>

01:08:23.349 --> 01:08:23.359 align:start position:0%
get 26.
 

01:08:23.359 --> 01:08:27.189 align:start position:0%
get 26.
take<01:08:23.520><c> a</c><01:08:23.600><c> look</c><01:08:25.679><c> there</c><01:08:25.920><c> you</c><01:08:26.000><c> go</c>

01:08:27.189 --> 01:08:27.199 align:start position:0%
take a look there you go
 

01:08:27.199 --> 01:08:28.950 align:start position:0%
take a look there you go
so<01:08:27.440><c> be</c><01:08:27.600><c> aware</c><01:08:28.000><c> of</c><01:08:28.080><c> the</c><01:08:28.319><c> order</c><01:08:28.640><c> of</c><01:08:28.719><c> these</c>

01:08:28.950 --> 01:08:28.960 align:start position:0%
so be aware of the order of these
 

01:08:28.960 --> 01:08:30.709 align:start position:0%
so be aware of the order of these
operations<01:08:29.920><c> parentheses</c>

01:08:30.709 --> 01:08:30.719 align:start position:0%
operations parentheses
 

01:08:30.719 --> 01:08:33.189 align:start position:0%
operations parentheses
always<01:08:31.040><c> have</c><01:08:31.440><c> the</c><01:08:31.600><c> highest</c><01:08:31.920><c> priority</c><01:08:32.880><c> then</c><01:08:33.040><c> we</c>

01:08:33.189 --> 01:08:33.199 align:start position:0%
always have the highest priority then we
 

01:08:33.199 --> 01:08:33.749 align:start position:0%
always have the highest priority then we
have

01:08:33.749 --> 01:08:33.759 align:start position:0%
have
 

01:08:33.759 --> 01:08:36.070 align:start position:0%
have
multiplication<01:08:34.640><c> and</c><01:08:34.799><c> division</c><01:08:35.520><c> and</c><01:08:35.679><c> finally</c>

01:08:36.070 --> 01:08:36.080 align:start position:0%
multiplication and division and finally
 

01:08:36.080 --> 01:08:36.789 align:start position:0%
multiplication and division and finally
we<01:08:36.159><c> have</c>

01:08:36.789 --> 01:08:36.799 align:start position:0%
we have
 

01:08:36.799 --> 01:08:44.630 align:start position:0%
we have
addition<01:08:37.359><c> and</c><01:08:37.679><c> subtraction</c>

01:08:44.630 --> 01:08:44.640 align:start position:0%
 
 

01:08:44.640 --> 01:08:45.749 align:start position:0%
 
in<01:08:44.799><c> this</c><01:08:44.880><c> tutorial</c><01:08:45.279><c> we're</c><01:08:45.359><c> going</c><01:08:45.520><c> to</c><01:08:45.600><c> talk</c>

01:08:45.749 --> 01:08:45.759 align:start position:0%
in this tutorial we're going to talk
 

01:08:45.759 --> 01:08:48.630 align:start position:0%
in this tutorial we're going to talk
about<01:08:46.159><c> casting</c><01:08:46.719><c> and</c><01:08:47.199><c> type</c><01:08:47.440><c> conversion</c>

01:08:48.630 --> 01:08:48.640 align:start position:0%
about casting and type conversion
 

01:08:48.640 --> 01:08:51.110 align:start position:0%
about casting and type conversion
so<01:08:48.880><c> i'm</c><01:08:49.040><c> going</c><01:08:49.120><c> to</c><01:08:49.199><c> declare</c><01:08:49.759><c> a</c><01:08:49.920><c> short</c><01:08:50.239><c> variable</c>

01:08:51.110 --> 01:08:51.120 align:start position:0%
so i'm going to declare a short variable
 

01:08:51.120 --> 01:08:52.070 align:start position:0%
so i'm going to declare a short variable
called<01:08:51.440><c> x</c>

01:08:52.070 --> 01:08:52.080 align:start position:0%
called x
 

01:08:52.080 --> 01:08:54.070 align:start position:0%
called x
and<01:08:52.239><c> set</c><01:08:52.480><c> it</c><01:08:52.560><c> to</c><01:08:52.719><c> 1</c><01:08:53.600><c> and</c><01:08:53.679><c> then</c><01:08:53.839><c> i'm</c><01:08:53.920><c> going</c><01:08:54.000><c> to</c>

01:08:54.070 --> 01:08:54.080 align:start position:0%
and set it to 1 and then i'm going to
 

01:08:54.080 --> 01:08:55.189 align:start position:0%
and set it to 1 and then i'm going to
declare<01:08:54.400><c> an</c><01:08:54.560><c> integer</c>

01:08:55.189 --> 01:08:55.199 align:start position:0%
declare an integer
 

01:08:55.199 --> 01:08:58.309 align:start position:0%
declare an integer
called<01:08:55.600><c> y</c><01:08:56.400><c> and</c><01:08:56.560><c> set</c><01:08:56.719><c> it</c><01:08:56.799><c> to</c><01:08:57.040><c> x</c><01:08:57.679><c> plus</c>

01:08:58.309 --> 01:08:58.319 align:start position:0%
called y and set it to x plus
 

01:08:58.319 --> 01:09:01.990 align:start position:0%
called y and set it to x plus
2.<01:08:59.440><c> in</c><01:08:59.520><c> this</c><01:08:59.759><c> example</c><01:09:00.159><c> we're</c><01:09:00.400><c> adding</c><01:09:00.799><c> a</c><01:09:01.040><c> short</c>

01:09:01.990 --> 01:09:02.000 align:start position:0%
2. in this example we're adding a short
 

01:09:02.000 --> 01:09:03.910 align:start position:0%
2. in this example we're adding a short
to<01:09:02.159><c> an</c><01:09:02.400><c> integer</c><01:09:03.279><c> what</c><01:09:03.440><c> do</c><01:09:03.520><c> you</c><01:09:03.600><c> think</c><01:09:03.759><c> the</c>

01:09:03.910 --> 01:09:03.920 align:start position:0%
to an integer what do you think the
 

01:09:03.920 --> 01:09:05.430 align:start position:0%
to an integer what do you think the
result<01:09:04.239><c> is</c><01:09:04.319><c> going</c><01:09:04.480><c> to</c><01:09:04.560><c> be</c><01:09:04.960><c> well</c>

01:09:05.430 --> 01:09:05.440 align:start position:0%
result is going to be well
 

01:09:05.440 --> 01:09:09.829 align:start position:0%
result is going to be well
let's<01:09:05.600><c> take</c><01:09:05.839><c> a</c><01:09:05.920><c> look</c><01:09:06.719><c> so</c><01:09:07.040><c> srut</c><01:09:08.239><c> let's</c><01:09:08.560><c> print</c><01:09:08.880><c> y</c>

01:09:09.829 --> 01:09:09.839 align:start position:0%
let's take a look so srut let's print y
 

01:09:09.839 --> 01:09:12.950 align:start position:0%
let's take a look so srut let's print y
we<01:09:10.080><c> get</c><01:09:11.520><c> 3.</c><01:09:12.239><c> that</c><01:09:12.400><c> is</c><01:09:12.480><c> what</c><01:09:12.719><c> you</c><01:09:12.799><c> were</c>

01:09:12.950 --> 01:09:12.960 align:start position:0%
we get 3. that is what you were
 

01:09:12.960 --> 01:09:13.990 align:start position:0%
we get 3. that is what you were
expecting

01:09:13.990 --> 01:09:14.000 align:start position:0%
expecting
 

01:09:14.000 --> 01:09:16.149 align:start position:0%
expecting
but<01:09:14.159><c> let</c><01:09:14.319><c> me</c><01:09:14.480><c> explain</c><01:09:15.120><c> what</c><01:09:15.359><c> happens</c><01:09:15.839><c> under</c>

01:09:16.149 --> 01:09:16.159 align:start position:0%
but let me explain what happens under
 

01:09:16.159 --> 01:09:17.990 align:start position:0%
but let me explain what happens under
the<01:09:16.239><c> hood</c><01:09:16.799><c> for</c><01:09:16.960><c> this</c><01:09:17.199><c> expression</c>

01:09:17.990 --> 01:09:18.000 align:start position:0%
the hood for this expression
 

01:09:18.000 --> 01:09:20.229 align:start position:0%
the hood for this expression
to<01:09:18.080><c> get</c><01:09:18.319><c> executed</c><01:09:19.600><c> because</c><01:09:19.759><c> we're</c><01:09:20.000><c> dealing</c>

01:09:20.229 --> 01:09:20.239 align:start position:0%
to get executed because we're dealing
 

01:09:20.239 --> 01:09:21.829 align:start position:0%
to get executed because we're dealing
with<01:09:20.480><c> two</c><01:09:20.640><c> different</c><01:09:20.960><c> types</c><01:09:21.199><c> of</c><01:09:21.359><c> values</c>

01:09:21.829 --> 01:09:21.839 align:start position:0%
with two different types of values
 

01:09:21.839 --> 01:09:24.470 align:start position:0%
with two different types of values
one<01:09:22.080><c> is</c><01:09:22.239><c> a</c><01:09:22.400><c> short</c><01:09:22.960><c> the</c><01:09:23.120><c> other</c><01:09:23.359><c> is</c><01:09:23.520><c> an</c><01:09:23.679><c> integer</c>

01:09:24.470 --> 01:09:24.480 align:start position:0%
one is a short the other is an integer
 

01:09:24.480 --> 01:09:26.229 align:start position:0%
one is a short the other is an integer
one<01:09:24.719><c> of</c><01:09:24.799><c> these</c><01:09:24.960><c> values</c><01:09:25.440><c> should</c><01:09:25.600><c> be</c><01:09:25.759><c> converted</c>

01:09:26.229 --> 01:09:26.239 align:start position:0%
one of these values should be converted
 

01:09:26.239 --> 01:09:27.110 align:start position:0%
one of these values should be converted
to<01:09:26.319><c> the</c><01:09:26.480><c> other</c><01:09:26.719><c> type</c>

01:09:27.110 --> 01:09:27.120 align:start position:0%
to the other type
 

01:09:27.120 --> 01:09:29.349 align:start position:0%
to the other type
so<01:09:27.359><c> they</c><01:09:27.520><c> are</c><01:09:27.759><c> equal</c><01:09:28.560><c> now</c><01:09:28.719><c> i</c><01:09:28.799><c> got</c><01:09:28.960><c> a</c><01:09:29.040><c> question</c>

01:09:29.349 --> 01:09:29.359 align:start position:0%
so they are equal now i got a question
 

01:09:29.359 --> 01:09:31.269 align:start position:0%
so they are equal now i got a question
for<01:09:29.520><c> you</c><01:09:29.920><c> how</c><01:09:30.080><c> many</c><01:09:30.239><c> bytes</c><01:09:30.480><c> do</c><01:09:30.640><c> we</c><01:09:30.799><c> have</c><01:09:31.040><c> in</c><01:09:31.199><c> a</c>

01:09:31.269 --> 01:09:31.279 align:start position:0%
for you how many bytes do we have in a
 

01:09:31.279 --> 01:09:32.309 align:start position:0%
for you how many bytes do we have in a
short<01:09:31.520><c> variable</c>

01:09:32.309 --> 01:09:32.319 align:start position:0%
short variable
 

01:09:32.319 --> 01:09:34.390 align:start position:0%
short variable
we<01:09:32.480><c> have</c><01:09:32.640><c> two</c><01:09:32.880><c> bytes</c><01:09:33.600><c> how</c><01:09:33.759><c> many</c><01:09:33.920><c> bytes</c><01:09:34.159><c> do</c><01:09:34.239><c> we</c>

01:09:34.390 --> 01:09:34.400 align:start position:0%
we have two bytes how many bytes do we
 

01:09:34.400 --> 01:09:35.669 align:start position:0%
we have two bytes how many bytes do we
have<01:09:34.560><c> in</c><01:09:34.640><c> an</c><01:09:34.799><c> integer</c>

01:09:35.669 --> 01:09:35.679 align:start position:0%
have in an integer
 

01:09:35.679 --> 01:09:38.149 align:start position:0%
have in an integer
four<01:09:36.000><c> bytes</c><01:09:36.640><c> so</c><01:09:36.880><c> any</c><01:09:37.120><c> values</c><01:09:37.440><c> that</c><01:09:37.600><c> we</c><01:09:37.759><c> store</c>

01:09:38.149 --> 01:09:38.159 align:start position:0%
four bytes so any values that we store
 

01:09:38.159 --> 01:09:39.269 align:start position:0%
four bytes so any values that we store
in<01:09:38.239><c> a</c><01:09:38.400><c> short</c><01:09:38.640><c> variable</c>

01:09:39.269 --> 01:09:39.279 align:start position:0%
in a short variable
 

01:09:39.279 --> 01:09:41.030 align:start position:0%
in a short variable
can<01:09:39.520><c> also</c><01:09:39.759><c> be</c><01:09:39.920><c> stored</c><01:09:40.319><c> in</c><01:09:40.480><c> an</c><01:09:40.640><c> integer</c>

01:09:41.030 --> 01:09:41.040 align:start position:0%
can also be stored in an integer
 

01:09:41.040 --> 01:09:42.470 align:start position:0%
can also be stored in an integer
variable<01:09:41.679><c> right</c>

01:09:42.470 --> 01:09:42.480 align:start position:0%
variable right
 

01:09:42.480 --> 01:09:44.470 align:start position:0%
variable right
so<01:09:43.199><c> when</c><01:09:43.359><c> this</c><01:09:43.600><c> piece</c><01:09:43.839><c> of</c><01:09:43.920><c> code</c><01:09:44.159><c> is</c><01:09:44.319><c> going</c><01:09:44.400><c> to</c>

01:09:44.470 --> 01:09:44.480 align:start position:0%
so when this piece of code is going to
 

01:09:44.480 --> 01:09:45.990 align:start position:0%
so when this piece of code is going to
get<01:09:44.640><c> executed</c><01:09:45.359><c> this</c><01:09:45.520><c> is</c><01:09:45.600><c> what's</c><01:09:45.839><c> going</c><01:09:45.920><c> to</c>

01:09:45.990 --> 01:09:46.000 align:start position:0%
get executed this is what's going to
 

01:09:46.000 --> 01:09:47.189 align:start position:0%
get executed this is what's going to
happen

01:09:47.189 --> 01:09:47.199 align:start position:0%
happen
 

01:09:47.199 --> 01:09:49.590 align:start position:0%
happen
first<01:09:47.759><c> java</c><01:09:48.080><c> looks</c><01:09:48.319><c> at</c><01:09:48.640><c> the</c><01:09:48.880><c> value</c><01:09:49.279><c> in</c><01:09:49.359><c> this</c>

01:09:49.590 --> 01:09:49.600 align:start position:0%
first java looks at the value in this
 

01:09:49.600 --> 01:09:50.229 align:start position:0%
first java looks at the value in this
variable

01:09:50.229 --> 01:09:50.239 align:start position:0%
variable
 

01:09:50.239 --> 01:09:53.590 align:start position:0%
variable
it's<01:09:50.560><c> one</c><01:09:51.040><c> right</c><01:09:51.920><c> it's</c><01:09:52.080><c> going</c><01:09:52.319><c> to</c><01:09:52.560><c> allocate</c>

01:09:53.590 --> 01:09:53.600 align:start position:0%
it's one right it's going to allocate
 

01:09:53.600 --> 01:09:55.990 align:start position:0%
it's one right it's going to allocate
another<01:09:54.080><c> variable</c><01:09:54.719><c> an</c><01:09:54.960><c> anonymous</c><01:09:55.520><c> variable</c>

01:09:55.990 --> 01:09:56.000 align:start position:0%
another variable an anonymous variable
 

01:09:56.000 --> 01:09:57.669 align:start position:0%
another variable an anonymous variable
somewhere<01:09:56.320><c> in</c><01:09:56.480><c> memory</c><01:09:56.960><c> we</c><01:09:57.120><c> don't</c><01:09:57.280><c> know</c><01:09:57.440><c> where</c>

01:09:57.669 --> 01:09:57.679 align:start position:0%
somewhere in memory we don't know where
 

01:09:57.679 --> 01:09:59.110 align:start position:0%
somewhere in memory we don't know where
that<01:09:57.920><c> is</c><01:09:58.080><c> we</c><01:09:58.159><c> don't</c><01:09:58.320><c> know</c><01:09:58.480><c> the</c><01:09:58.560><c> name</c><01:09:58.800><c> of</c><01:09:58.880><c> that</c>

01:09:59.110 --> 01:09:59.120 align:start position:0%
that is we don't know the name of that
 

01:09:59.120 --> 01:09:59.750 align:start position:0%
that is we don't know the name of that
variable

01:09:59.750 --> 01:09:59.760 align:start position:0%
variable
 

01:09:59.760 --> 01:10:01.990 align:start position:0%
variable
it<01:09:59.840><c> doesn't</c><01:10:00.080><c> have</c><01:10:00.239><c> a</c><01:10:00.320><c> name</c><01:10:00.800><c> it's</c><01:10:01.040><c> anonymous</c>

01:10:01.990 --> 01:10:02.000 align:start position:0%
it doesn't have a name it's anonymous
 

01:10:02.000 --> 01:10:03.189 align:start position:0%
it doesn't have a name it's anonymous
that<01:10:02.239><c> variable</c><01:10:02.640><c> is</c><01:10:02.719><c> going</c><01:10:02.800><c> to</c><01:10:02.880><c> be</c><01:10:02.960><c> an</c>

01:10:03.189 --> 01:10:03.199 align:start position:0%
that variable is going to be an
 

01:10:03.199 --> 01:10:05.830 align:start position:0%
that variable is going to be an
integer<01:10:04.000><c> then</c><01:10:04.320><c> java</c><01:10:04.640><c> is</c><01:10:04.719><c> going</c><01:10:04.800><c> to</c><01:10:04.960><c> copy</c><01:10:05.600><c> the</c>

01:10:05.830 --> 01:10:05.840 align:start position:0%
integer then java is going to copy the
 

01:10:05.840 --> 01:10:06.870 align:start position:0%
integer then java is going to copy the
value<01:10:06.159><c> of</c><01:10:06.320><c> x</c>

01:10:06.870 --> 01:10:06.880 align:start position:0%
value of x
 

01:10:06.880 --> 01:10:09.030 align:start position:0%
value of x
into<01:10:07.120><c> that</c><01:10:07.280><c> memory</c><01:10:07.760><c> space</c><01:10:08.480><c> and</c><01:10:08.560><c> then</c><01:10:08.719><c> it</c><01:10:08.880><c> will</c>

01:10:09.030 --> 01:10:09.040 align:start position:0%
into that memory space and then it will
 

01:10:09.040 --> 01:10:10.790 align:start position:0%
into that memory space and then it will
add<01:10:09.199><c> these</c><01:10:09.440><c> two</c><01:10:09.600><c> numbers</c><01:10:09.920><c> together</c>

01:10:10.790 --> 01:10:10.800 align:start position:0%
add these two numbers together
 

01:10:10.800 --> 01:10:13.590 align:start position:0%
add these two numbers together
this<01:10:11.040><c> is</c><01:10:11.120><c> what</c><01:10:11.280><c> we</c><01:10:11.440><c> call</c><01:10:12.080><c> implicit</c><01:10:12.800><c> casting</c>

01:10:13.590 --> 01:10:13.600 align:start position:0%
this is what we call implicit casting
 

01:10:13.600 --> 01:10:15.189 align:start position:0%
this is what we call implicit casting
let<01:10:13.760><c> me</c><01:10:13.920><c> type</c><01:10:14.159><c> it</c><01:10:14.239><c> here</c>

01:10:15.189 --> 01:10:15.199 align:start position:0%
let me type it here
 

01:10:15.199 --> 01:10:18.310 align:start position:0%
let me type it here
implicit<01:10:16.719><c> casting</c><01:10:17.199><c> that</c><01:10:17.360><c> means</c><01:10:17.760><c> automatic</c>

01:10:18.310 --> 01:10:18.320 align:start position:0%
implicit casting that means automatic
 

01:10:18.320 --> 01:10:20.550 align:start position:0%
implicit casting that means automatic
casting<01:10:18.880><c> or</c><01:10:19.120><c> automatic</c><01:10:19.600><c> conversion</c><01:10:20.239><c> we</c><01:10:20.400><c> don't</c>

01:10:20.550 --> 01:10:20.560 align:start position:0%
casting or automatic conversion we don't
 

01:10:20.560 --> 01:10:21.830 align:start position:0%
casting or automatic conversion we don't
have<01:10:20.719><c> to</c><01:10:20.800><c> worry</c><01:10:21.040><c> about</c><01:10:21.280><c> it</c>

01:10:21.830 --> 01:10:21.840 align:start position:0%
have to worry about it
 

01:10:21.840 --> 01:10:23.430 align:start position:0%
have to worry about it
whenever<01:10:22.159><c> we</c><01:10:22.320><c> have</c><01:10:22.480><c> a</c><01:10:22.560><c> value</c><01:10:22.880><c> and</c><01:10:23.040><c> that</c><01:10:23.199><c> value</c>

01:10:23.430 --> 01:10:23.440 align:start position:0%
whenever we have a value and that value
 

01:10:23.440 --> 01:10:25.350 align:start position:0%
whenever we have a value and that value
can<01:10:23.600><c> be</c><01:10:23.760><c> converted</c><01:10:24.159><c> to</c><01:10:24.320><c> a</c><01:10:24.400><c> data</c><01:10:24.719><c> type</c><01:10:24.960><c> that</c><01:10:25.120><c> is</c>

01:10:25.350 --> 01:10:25.360 align:start position:0%
can be converted to a data type that is
 

01:10:25.360 --> 01:10:26.149 align:start position:0%
can be converted to a data type that is
bigger

01:10:26.149 --> 01:10:26.159 align:start position:0%
bigger
 

01:10:26.159 --> 01:10:29.030 align:start position:0%
bigger
casting<01:10:26.640><c> or</c><01:10:27.040><c> conversion</c><01:10:27.600><c> happens</c><01:10:28.320><c> implicitly</c>

01:10:29.030 --> 01:10:29.040 align:start position:0%
casting or conversion happens implicitly
 

01:10:29.040 --> 01:10:29.430 align:start position:0%
casting or conversion happens implicitly
or

01:10:29.430 --> 01:10:29.440 align:start position:0%
or
 

01:10:29.440 --> 01:10:32.149 align:start position:0%
or
automatically<01:10:30.719><c> so</c><01:10:31.360><c> byte</c><01:10:31.840><c> can</c><01:10:32.000><c> be</c>

01:10:32.149 --> 01:10:32.159 align:start position:0%
automatically so byte can be
 

01:10:32.159 --> 01:10:34.149 align:start position:0%
automatically so byte can be
automatically<01:10:32.640><c> converted</c><01:10:33.120><c> to</c><01:10:33.280><c> short</c>

01:10:34.149 --> 01:10:34.159 align:start position:0%
automatically converted to short
 

01:10:34.159 --> 01:10:36.390 align:start position:0%
automatically converted to short
and<01:10:34.320><c> this</c><01:10:34.480><c> can</c><01:10:34.640><c> be</c><01:10:34.800><c> converted</c><01:10:35.199><c> to</c><01:10:35.440><c> int</c><01:10:35.760><c> and</c>

01:10:36.390 --> 01:10:36.400 align:start position:0%
and this can be converted to int and
 

01:10:36.400 --> 01:10:38.070 align:start position:0%
and this can be converted to int and
long<01:10:36.960><c> okay</c>

01:10:38.070 --> 01:10:38.080 align:start position:0%
long okay
 

01:10:38.080 --> 01:10:40.229 align:start position:0%
long okay
now<01:10:38.239><c> what</c><01:10:38.480><c> about</c><01:10:38.719><c> floating</c><01:10:39.120><c> point</c><01:10:39.360><c> numbers</c>

01:10:40.229 --> 01:10:40.239 align:start position:0%
now what about floating point numbers
 

01:10:40.239 --> 01:10:41.669 align:start position:0%
now what about floating point numbers
let's<01:10:40.400><c> look</c><01:10:40.560><c> at</c><01:10:40.719><c> an</c><01:10:40.880><c> example</c>

01:10:41.669 --> 01:10:41.679 align:start position:0%
let's look at an example
 

01:10:41.679 --> 01:10:45.830 align:start position:0%
let's look at an example
i'm<01:10:41.840><c> going</c><01:10:42.000><c> to</c><01:10:42.080><c> change</c><01:10:42.400><c> this</c><01:10:42.640><c> to</c><01:10:42.800><c> a</c><01:10:42.960><c> double</c><01:10:44.280><c> 1.1</c>

01:10:45.830 --> 01:10:45.840 align:start position:0%
i'm going to change this to a double 1.1
 

01:10:45.840 --> 01:10:47.350 align:start position:0%
i'm going to change this to a double 1.1
now<01:10:46.000><c> here</c><01:10:46.159><c> we</c><01:10:46.320><c> have</c><01:10:46.400><c> a</c><01:10:46.480><c> compilation</c><01:10:47.040><c> error</c>

01:10:47.350 --> 01:10:47.360 align:start position:0%
now here we have a compilation error
 

01:10:47.360 --> 01:10:48.550 align:start position:0%
now here we have a compilation error
because<01:10:47.679><c> on</c><01:10:47.760><c> the</c><01:10:47.920><c> right</c><01:10:48.159><c> side</c><01:10:48.320><c> of</c><01:10:48.400><c> the</c>

01:10:48.550 --> 01:10:48.560 align:start position:0%
because on the right side of the
 

01:10:48.560 --> 01:10:50.310 align:start position:0%
because on the right side of the
assignment<01:10:49.040><c> operator</c><01:10:49.440><c> we</c><01:10:49.679><c> have</c>

01:10:50.310 --> 01:10:50.320 align:start position:0%
assignment operator we have
 

01:10:50.320 --> 01:10:52.630 align:start position:0%
assignment operator we have
a<01:10:50.480><c> floating</c><01:10:50.880><c> point</c><01:10:51.120><c> number</c><01:10:51.440><c> a</c><01:10:51.679><c> double</c><01:10:52.480><c> on</c><01:10:52.560><c> the</c>

01:10:52.630 --> 01:10:52.640 align:start position:0%
a floating point number a double on the
 

01:10:52.640 --> 01:10:54.310 align:start position:0%
a floating point number a double on the
left<01:10:52.880><c> side</c><01:10:53.040><c> we</c><01:10:53.199><c> have</c><01:10:53.280><c> an</c><01:10:53.440><c> integer</c>

01:10:54.310 --> 01:10:54.320 align:start position:0%
left side we have an integer
 

01:10:54.320 --> 01:10:57.350 align:start position:0%
left side we have an integer
so<01:10:54.480><c> we</c><01:10:54.640><c> need</c><01:10:54.800><c> to</c><01:10:54.960><c> change</c><01:10:55.199><c> this</c><01:10:55.920><c> to</c><01:10:56.159><c> double</c><01:10:57.199><c> now</c>

01:10:57.350 --> 01:10:57.360 align:start position:0%
so we need to change this to double now
 

01:10:57.360 --> 01:10:58.709 align:start position:0%
so we need to change this to double now
when<01:10:57.520><c> we</c><01:10:57.679><c> execute</c><01:10:58.080><c> this</c><01:10:58.239><c> code</c>

01:10:58.709 --> 01:10:58.719 align:start position:0%
when we execute this code
 

01:10:58.719 --> 01:11:02.950 align:start position:0%
when we execute this code
we're<01:10:58.880><c> going</c><01:10:58.960><c> to</c><01:10:59.040><c> get</c><01:10:59.600><c> 3.1</c><01:11:00.880><c> let's</c><01:11:01.199><c> verify</c><01:11:01.679><c> this</c>

01:11:02.950 --> 01:11:02.960 align:start position:0%
we're going to get 3.1 let's verify this
 

01:11:02.960 --> 01:11:05.590 align:start position:0%
we're going to get 3.1 let's verify this
there<01:11:03.199><c> you</c><01:11:03.360><c> go</c><01:11:04.080><c> now</c><01:11:04.320><c> let's</c><01:11:04.480><c> see</c><01:11:04.880><c> how</c><01:11:05.120><c> casting</c>

01:11:05.590 --> 01:11:05.600 align:start position:0%
there you go now let's see how casting
 

01:11:05.600 --> 01:11:07.910 align:start position:0%
there you go now let's see how casting
happens<01:11:06.000><c> here</c>

01:11:07.910 --> 01:11:07.920 align:start position:0%
happens here
 

01:11:07.920 --> 01:11:10.149 align:start position:0%
happens here
in<01:11:08.000><c> this</c><01:11:08.159><c> case</c><01:11:08.400><c> we're</c><01:11:08.560><c> dealing</c><01:11:09.280><c> with</c><01:11:09.520><c> a</c><01:11:09.600><c> double</c>

01:11:10.149 --> 01:11:10.159 align:start position:0%
in this case we're dealing with a double
 

01:11:10.159 --> 01:11:12.149 align:start position:0%
in this case we're dealing with a double
and<01:11:10.880><c> an</c><01:11:11.120><c> integer</c>

01:11:12.149 --> 01:11:12.159 align:start position:0%
and an integer
 

01:11:12.159 --> 01:11:15.350 align:start position:0%
and an integer
an<01:11:12.400><c> integer</c><01:11:13.120><c> is</c><01:11:13.360><c> less</c><01:11:13.679><c> precise</c><01:11:14.400><c> than</c><01:11:14.640><c> a</c><01:11:14.800><c> double</c>

01:11:15.350 --> 01:11:15.360 align:start position:0%
an integer is less precise than a double
 

01:11:15.360 --> 01:11:17.510 align:start position:0%
an integer is less precise than a double
because<01:11:15.679><c> in</c><01:11:15.760><c> a</c><01:11:15.920><c> double</c><01:11:16.239><c> we</c><01:11:16.400><c> can</c><01:11:16.480><c> have</c><01:11:16.719><c> digits</c>

01:11:17.510 --> 01:11:17.520 align:start position:0%
because in a double we can have digits
 

01:11:17.520 --> 01:11:19.590 align:start position:0%
because in a double we can have digits
after<01:11:17.920><c> the</c><01:11:18.159><c> decimal</c><01:11:18.640><c> point</c>

01:11:19.590 --> 01:11:19.600 align:start position:0%
after the decimal point
 

01:11:19.600 --> 01:11:22.070 align:start position:0%
after the decimal point
so<01:11:20.239><c> in</c><01:11:20.320><c> this</c><01:11:20.560><c> example</c><01:11:21.280><c> java</c><01:11:21.679><c> is</c><01:11:21.760><c> going</c><01:11:21.920><c> to</c>

01:11:22.070 --> 01:11:22.080 align:start position:0%
so in this example java is going to
 

01:11:22.080 --> 01:11:23.510 align:start position:0%
so in this example java is going to
automatically<01:11:22.800><c> cast</c>

01:11:23.510 --> 01:11:23.520 align:start position:0%
automatically cast
 

01:11:23.520 --> 01:11:26.790 align:start position:0%
automatically cast
this<01:11:23.760><c> integer</c><01:11:24.560><c> to</c><01:11:24.719><c> a</c><01:11:24.880><c> double</c><01:11:25.760><c> so</c><01:11:25.920><c> that</c><01:11:26.080><c> will</c><01:11:26.239><c> be</c>

01:11:26.790 --> 01:11:26.800 align:start position:0%
this integer to a double so that will be
 

01:11:26.800 --> 01:11:30.149 align:start position:0%
this integer to a double so that will be
2.0<01:11:28.320><c> and</c><01:11:28.400><c> then</c><01:11:28.640><c> 2.0</c><01:11:29.199><c> will</c><01:11:29.360><c> be</c><01:11:29.440><c> added</c><01:11:29.760><c> to</c>

01:11:30.149 --> 01:11:30.159 align:start position:0%
2.0 and then 2.0 will be added to
 

01:11:30.159 --> 01:11:34.149 align:start position:0%
2.0 and then 2.0 will be added to
1.1<01:11:31.199><c> okay</c><01:11:32.000><c> so</c><01:11:32.719><c> back</c><01:11:32.880><c> to</c><01:11:33.040><c> this</c><01:11:33.280><c> chain</c>

01:11:34.149 --> 01:11:34.159 align:start position:0%
1.1 okay so back to this chain
 

01:11:34.159 --> 01:11:37.350 align:start position:0%
1.1 okay so back to this chain
here<01:11:34.320><c> we're</c><01:11:34.480><c> going</c><01:11:34.560><c> to</c><01:11:34.640><c> have</c><01:11:35.440><c> float</c><01:11:36.400><c> and</c><01:11:36.640><c> then</c>

01:11:37.350 --> 01:11:37.360 align:start position:0%
here we're going to have float and then
 

01:11:37.360 --> 01:11:40.630 align:start position:0%
here we're going to have float and then
double<01:11:38.719><c> so</c><01:11:38.960><c> as</c><01:11:39.120><c> a</c><01:11:39.280><c> general</c><01:11:39.600><c> rule</c><01:11:39.840><c> of</c><01:11:40.000><c> thumb</c>

01:11:40.630 --> 01:11:40.640 align:start position:0%
double so as a general rule of thumb
 

01:11:40.640 --> 01:11:43.030 align:start position:0%
double so as a general rule of thumb
implicit<01:11:41.199><c> casting</c><01:11:41.600><c> happens</c><01:11:42.080><c> whenever</c><01:11:42.800><c> we're</c>

01:11:43.030 --> 01:11:43.040 align:start position:0%
implicit casting happens whenever we're
 

01:11:43.040 --> 01:11:43.830 align:start position:0%
implicit casting happens whenever we're
not<01:11:43.199><c> going</c><01:11:43.280><c> to</c><01:11:43.440><c> lose</c>

01:11:43.830 --> 01:11:43.840 align:start position:0%
not going to lose
 

01:11:43.840 --> 01:11:46.709 align:start position:0%
not going to lose
data<01:11:44.320><c> there</c><01:11:44.560><c> is</c><01:11:44.640><c> no</c><01:11:44.880><c> chance</c><01:11:45.199><c> for</c><01:11:45.360><c> data</c><01:11:45.679><c> loss</c>

01:11:46.709 --> 01:11:46.719 align:start position:0%
data there is no chance for data loss
 

01:11:46.719 --> 01:11:47.430 align:start position:0%
data there is no chance for data loss
now

01:11:47.430 --> 01:11:47.440 align:start position:0%
now
 

01:11:47.440 --> 01:11:50.229 align:start position:0%
now
what<01:11:47.679><c> if</c><01:11:47.760><c> we</c><01:11:47.920><c> want</c><01:11:48.159><c> y</c><01:11:48.880><c> to</c><01:11:49.040><c> be</c><01:11:49.199><c> an</c><01:11:49.440><c> integer</c><01:11:49.920><c> so</c><01:11:50.159><c> in</c>

01:11:50.229 --> 01:11:50.239 align:start position:0%
what if we want y to be an integer so in
 

01:11:50.239 --> 01:11:51.990 align:start position:0%
what if we want y to be an integer so in
this<01:11:50.400><c> example</c><01:11:50.960><c> we</c><01:11:51.120><c> don't</c><01:11:51.280><c> care</c><01:11:51.600><c> about</c><01:11:51.840><c> the</c>

01:11:51.990 --> 01:11:52.000 align:start position:0%
this example we don't care about the
 

01:11:52.000 --> 01:11:53.669 align:start position:0%
this example we don't care about the
digits<01:11:52.400><c> after</c><01:11:52.640><c> the</c><01:11:52.800><c> decimal</c><01:11:53.280><c> point</c>

01:11:53.669 --> 01:11:53.679 align:start position:0%
digits after the decimal point
 

01:11:53.679 --> 01:11:55.990 align:start position:0%
digits after the decimal point
you<01:11:53.760><c> want</c><01:11:53.920><c> to</c><01:11:54.000><c> see</c><01:11:54.480><c> 3</c><01:11:54.719><c> on</c><01:11:54.800><c> the</c><01:11:54.960><c> terminal</c><01:11:55.760><c> how</c>

01:11:55.990 --> 01:11:56.000 align:start position:0%
you want to see 3 on the terminal how
 

01:11:56.000 --> 01:11:56.790 align:start position:0%
you want to see 3 on the terminal how
should<01:11:56.159><c> we</c><01:11:56.239><c> do</c><01:11:56.480><c> this</c>

01:11:56.790 --> 01:11:56.800 align:start position:0%
should we do this
 

01:11:56.800 --> 01:11:59.350 align:start position:0%
should we do this
this<01:11:57.040><c> is</c><01:11:57.199><c> where</c><01:11:57.600><c> we</c><01:11:57.760><c> should</c><01:11:58.000><c> explicitly</c><01:11:58.960><c> cast</c>

01:11:59.350 --> 01:11:59.360 align:start position:0%
this is where we should explicitly cast
 

01:11:59.360 --> 01:12:00.470 align:start position:0%
this is where we should explicitly cast
the<01:11:59.520><c> result</c>

01:12:00.470 --> 01:12:00.480 align:start position:0%
the result
 

01:12:00.480 --> 01:12:03.110 align:start position:0%
the result
so<01:12:00.719><c> we</c><01:12:00.880><c> should</c><01:12:01.120><c> cast</c><01:12:01.520><c> x</c><01:12:01.920><c> to</c><01:12:02.080><c> an</c><01:12:02.239><c> integer</c><01:12:02.880><c> like</c>

01:12:03.110 --> 01:12:03.120 align:start position:0%
so we should cast x to an integer like
 

01:12:03.120 --> 01:12:03.830 align:start position:0%
so we should cast x to an integer like
this

01:12:03.830 --> 01:12:03.840 align:start position:0%
this
 

01:12:03.840 --> 01:12:06.870 align:start position:0%
this
parenthesis<01:12:04.960><c> int</c>

01:12:06.870 --> 01:12:06.880 align:start position:0%
parenthesis int
 

01:12:06.880 --> 01:12:09.910 align:start position:0%
parenthesis int
this<01:12:07.120><c> is</c><01:12:07.360><c> explicit</c><01:12:08.000><c> casting</c><01:12:08.800><c> we</c><01:12:08.960><c> convert</c><01:12:09.520><c> x</c>

01:12:09.910 --> 01:12:09.920 align:start position:0%
this is explicit casting we convert x
 

01:12:09.920 --> 01:12:12.070 align:start position:0%
this is explicit casting we convert x
to<01:12:10.080><c> an</c><01:12:10.239><c> integer</c><01:12:10.640><c> so</c><01:12:10.800><c> the</c><01:12:10.960><c> result</c><01:12:11.280><c> will</c><01:12:11.440><c> be</c><01:12:11.679><c> one</c>

01:12:12.070 --> 01:12:12.080 align:start position:0%
to an integer so the result will be one
 

01:12:12.080 --> 01:12:13.910 align:start position:0%
to an integer so the result will be one
without<01:12:12.480><c> a</c><01:12:12.640><c> decimal</c><01:12:13.120><c> point</c>

01:12:13.910 --> 01:12:13.920 align:start position:0%
without a decimal point
 

01:12:13.920 --> 01:12:16.229 align:start position:0%
without a decimal point
one<01:12:14.080><c> will</c><01:12:14.239><c> be</c><01:12:14.400><c> added</c><01:12:14.640><c> to</c><01:12:14.800><c> two</c><01:12:15.440><c> and</c><01:12:15.679><c> y</c><01:12:15.920><c> will</c><01:12:16.080><c> be</c>

01:12:16.229 --> 01:12:16.239 align:start position:0%
one will be added to two and y will be
 

01:12:16.239 --> 01:12:19.110 align:start position:0%
one will be added to two and y will be
three<01:12:16.880><c> take</c><01:12:17.120><c> a</c><01:12:17.199><c> look</c>

01:12:19.110 --> 01:12:19.120 align:start position:0%
three take a look
 

01:12:19.120 --> 01:12:21.910 align:start position:0%
three take a look
there<01:12:19.360><c> you</c><01:12:19.440><c> go</c><01:12:20.960><c> so</c><01:12:21.120><c> this</c><01:12:21.280><c> is</c><01:12:21.440><c> all</c><01:12:21.520><c> about</c>

01:12:21.910 --> 01:12:21.920 align:start position:0%
there you go so this is all about
 

01:12:21.920 --> 01:12:23.030 align:start position:0%
there you go so this is all about
implicit<01:12:22.560><c> and</c>

01:12:23.030 --> 01:12:23.040 align:start position:0%
implicit and
 

01:12:23.040 --> 01:12:25.750 align:start position:0%
implicit and
explicit<01:12:23.600><c> casting</c><01:12:24.719><c> now</c><01:12:24.960><c> this</c><01:12:25.199><c> explicit</c>

01:12:25.750 --> 01:12:25.760 align:start position:0%
explicit casting now this explicit
 

01:12:25.760 --> 01:12:27.830 align:start position:0%
explicit casting now this explicit
casting<01:12:26.239><c> can</c><01:12:26.480><c> only</c><01:12:26.800><c> happen</c><01:12:27.199><c> between</c>

01:12:27.830 --> 01:12:27.840 align:start position:0%
casting can only happen between
 

01:12:27.840 --> 01:12:30.310 align:start position:0%
casting can only happen between
compatible<01:12:28.560><c> types</c><01:12:29.280><c> so</c><01:12:29.440><c> all</c><01:12:29.600><c> these</c><01:12:29.760><c> types</c><01:12:30.239><c> are</c>

01:12:30.310 --> 01:12:30.320 align:start position:0%
compatible types so all these types are
 

01:12:30.320 --> 01:12:32.310 align:start position:0%
compatible types so all these types are
compatible<01:12:30.960><c> because</c><01:12:31.199><c> they're</c><01:12:31.360><c> all</c><01:12:31.600><c> numbers</c>

01:12:32.310 --> 01:12:32.320 align:start position:0%
compatible because they're all numbers
 

01:12:32.320 --> 01:12:35.189 align:start position:0%
compatible because they're all numbers
but<01:12:32.560><c> we</c><01:12:32.640><c> cannot</c><01:12:33.040><c> cast</c><01:12:33.360><c> a</c><01:12:33.600><c> string</c><01:12:34.080><c> to</c><01:12:34.239><c> a</c><01:12:34.320><c> number</c>

01:12:35.189 --> 01:12:35.199 align:start position:0%
but we cannot cast a string to a number
 

01:12:35.199 --> 01:12:36.149 align:start position:0%
but we cannot cast a string to a number
in<01:12:35.360><c> other</c><01:12:35.520><c> words</c>

01:12:36.149 --> 01:12:36.159 align:start position:0%
in other words
 

01:12:36.159 --> 01:12:40.950 align:start position:0%
in other words
if<01:12:36.480><c> x</c><01:12:36.880><c> was</c><01:12:37.440><c> a</c><01:12:37.679><c> string</c><01:12:38.800><c> like</c><01:12:39.040><c> this</c>

01:12:40.950 --> 01:12:40.960 align:start position:0%
if x was a string like this
 

01:12:40.960 --> 01:12:44.070 align:start position:0%
if x was a string like this
let's<01:12:41.199><c> say</c><01:12:41.760><c> one</c><01:12:43.120><c> we</c><01:12:43.280><c> cannot</c><01:12:43.679><c> cast</c>

01:12:44.070 --> 01:12:44.080 align:start position:0%
let's say one we cannot cast
 

01:12:44.080 --> 01:12:46.310 align:start position:0%
let's say one we cannot cast
x<01:12:44.560><c> to</c><01:12:44.719><c> an</c><01:12:44.880><c> integer</c><01:12:45.520><c> because</c><01:12:45.760><c> they</c><01:12:45.920><c> are</c><01:12:46.080><c> not</c>

01:12:46.310 --> 01:12:46.320 align:start position:0%
x to an integer because they are not
 

01:12:46.320 --> 01:12:47.350 align:start position:0%
x to an integer because they are not
compatible

01:12:47.350 --> 01:12:47.360 align:start position:0%
compatible
 

01:12:47.360 --> 01:12:49.910 align:start position:0%
compatible
so<01:12:47.520><c> how</c><01:12:47.679><c> do</c><01:12:47.760><c> we</c><01:12:47.840><c> do</c><01:12:48.080><c> this</c><01:12:48.719><c> well</c><01:12:49.360><c> for</c><01:12:49.600><c> all</c><01:12:49.679><c> these</c>

01:12:49.910 --> 01:12:49.920 align:start position:0%
so how do we do this well for all these
 

01:12:49.920 --> 01:12:51.430 align:start position:0%
so how do we do this well for all these
primitive<01:12:50.400><c> types</c><01:12:50.640><c> you</c><01:12:50.719><c> have</c><01:12:50.880><c> learned</c>

01:12:51.430 --> 01:12:51.440 align:start position:0%
primitive types you have learned
 

01:12:51.440 --> 01:12:54.470 align:start position:0%
primitive types you have learned
you<01:12:51.600><c> have</c><01:12:52.239><c> wrapper</c><01:12:52.640><c> classes</c><01:12:53.600><c> so</c><01:12:53.840><c> in</c><01:12:54.000><c> java</c><01:12:54.320><c> we</c>

01:12:54.470 --> 01:12:54.480 align:start position:0%
you have wrapper classes so in java we
 

01:12:54.480 --> 01:12:56.630 align:start position:0%
you have wrapper classes so in java we
have<01:12:54.640><c> a</c><01:12:54.719><c> class</c><01:12:55.199><c> which</c><01:12:55.440><c> is</c><01:12:55.520><c> a</c><01:12:55.600><c> reference</c><01:12:56.000><c> type</c>

01:12:56.630 --> 01:12:56.640 align:start position:0%
have a class which is a reference type
 

01:12:56.640 --> 01:12:59.590 align:start position:0%
have a class which is a reference type
called<01:12:57.199><c> integer</c><01:12:58.080><c> this</c><01:12:58.320><c> class</c><01:12:58.640><c> is</c><01:12:58.800><c> defined</c><01:12:59.440><c> in</c>

01:12:59.590 --> 01:12:59.600 align:start position:0%
called integer this class is defined in
 

01:12:59.600 --> 01:13:00.950 align:start position:0%
called integer this class is defined in
java.lang

01:13:00.950 --> 01:13:00.960 align:start position:0%
java.lang
 

01:13:00.960 --> 01:13:03.990 align:start position:0%
java.lang
package<01:13:02.960><c> and</c><01:13:03.120><c> in</c><01:13:03.199><c> this</c><01:13:03.360><c> class</c><01:13:03.679><c> we</c><01:13:03.760><c> have</c>

01:13:03.990 --> 01:13:04.000 align:start position:0%
package and in this class we have
 

01:13:04.000 --> 01:13:07.510 align:start position:0%
package and in this class we have
a<01:13:04.080><c> method</c><01:13:04.480><c> called</c><01:13:05.120><c> pars</c><01:13:06.000><c> int</c><01:13:06.800><c> so</c><01:13:06.960><c> this</c><01:13:07.199><c> method</c>

01:13:07.510 --> 01:13:07.520 align:start position:0%
a method called pars int so this method
 

01:13:07.520 --> 01:13:08.390 align:start position:0%
a method called pars int so this method
takes<01:13:07.760><c> a</c><01:13:07.920><c> string</c>

01:13:08.390 --> 01:13:08.400 align:start position:0%
takes a string
 

01:13:08.400 --> 01:13:11.430 align:start position:0%
takes a string
and<01:13:08.560><c> returns</c><01:13:09.280><c> an</c><01:13:09.520><c> integer</c><01:13:10.480><c> so</c><01:13:10.800><c> integer</c>

01:13:11.430 --> 01:13:11.440 align:start position:0%
and returns an integer so integer
 

01:13:11.440 --> 01:13:13.910 align:start position:0%
and returns an integer so integer
is<01:13:11.600><c> the</c><01:13:11.760><c> wrapper</c><01:13:12.159><c> class</c><01:13:12.800><c> for</c><01:13:12.960><c> the</c><01:13:13.199><c> int</c>

01:13:13.910 --> 01:13:13.920 align:start position:0%
is the wrapper class for the int
 

01:13:13.920 --> 01:13:15.189 align:start position:0%
is the wrapper class for the int
primitive<01:13:14.400><c> type</c>

01:13:15.189 --> 01:13:15.199 align:start position:0%
primitive type
 

01:13:15.199 --> 01:13:17.990 align:start position:0%
primitive type
we<01:13:15.440><c> also</c><01:13:15.679><c> have</c><01:13:16.320><c> short</c><01:13:17.120><c> and</c><01:13:17.360><c> in</c><01:13:17.440><c> this</c><01:13:17.600><c> class</c><01:13:17.840><c> we</c>

01:13:17.990 --> 01:13:18.000 align:start position:0%
we also have short and in this class we
 

01:13:18.000 --> 01:13:18.550 align:start position:0%
we also have short and in this class we
have

01:13:18.550 --> 01:13:18.560 align:start position:0%
have
 

01:13:18.560 --> 01:13:21.030 align:start position:0%
have
parse<01:13:19.199><c> short</c><01:13:20.000><c> so</c><01:13:20.159><c> it</c><01:13:20.239><c> takes</c><01:13:20.480><c> a</c><01:13:20.640><c> string</c><01:13:20.960><c> and</c>

01:13:21.030 --> 01:13:21.040 align:start position:0%
parse short so it takes a string and
 

01:13:21.040 --> 01:13:23.189 align:start position:0%
parse short so it takes a string and
returns<01:13:21.520><c> a</c><01:13:21.679><c> short</c>

01:13:23.189 --> 01:13:23.199 align:start position:0%
returns a short
 

01:13:23.199 --> 01:13:26.229 align:start position:0%
returns a short
similarly<01:13:23.600><c> we</c><01:13:23.840><c> have</c><01:13:24.400><c> float</c><01:13:25.199><c> and</c><01:13:25.440><c> double</c>

01:13:26.229 --> 01:13:26.239 align:start position:0%
similarly we have float and double
 

01:13:26.239 --> 01:13:27.750 align:start position:0%
similarly we have float and double
and<01:13:26.480><c> obviously</c><01:13:26.880><c> the</c><01:13:26.960><c> name</c><01:13:27.120><c> of</c><01:13:27.199><c> these</c><01:13:27.360><c> methods</c>

01:13:27.750 --> 01:13:27.760 align:start position:0%
and obviously the name of these methods
 

01:13:27.760 --> 01:13:29.430 align:start position:0%
and obviously the name of these methods
are<01:13:27.920><c> different</c><01:13:28.480><c> so</c><01:13:28.640><c> here</c><01:13:28.880><c> we</c><01:13:28.960><c> have</c>

01:13:29.430 --> 01:13:29.440 align:start position:0%
are different so here we have
 

01:13:29.440 --> 01:13:33.030 align:start position:0%
are different so here we have
parse<01:13:30.080><c> float</c><01:13:31.679><c> so</c>

01:13:33.030 --> 01:13:33.040 align:start position:0%
parse float so
 

01:13:33.040 --> 01:13:35.750 align:start position:0%
parse float so
back<01:13:33.280><c> to</c><01:13:33.360><c> this</c><01:13:33.600><c> example</c><01:13:34.640><c> let's</c><01:13:34.800><c> say</c><01:13:34.960><c> we</c><01:13:35.120><c> get</c><01:13:35.440><c> x</c>

01:13:35.750 --> 01:13:35.760 align:start position:0%
back to this example let's say we get x
 

01:13:35.760 --> 01:13:37.350 align:start position:0%
back to this example let's say we get x
as<01:13:36.000><c> a</c><01:13:36.080><c> string</c><01:13:36.400><c> and</c><01:13:36.560><c> we</c><01:13:36.640><c> want</c><01:13:36.719><c> to</c><01:13:36.800><c> convert</c><01:13:37.120><c> it</c><01:13:37.199><c> to</c>

01:13:37.350 --> 01:13:37.360 align:start position:0%
as a string and we want to convert it to
 

01:13:37.360 --> 01:13:38.310 align:start position:0%
as a string and we want to convert it to
an<01:13:37.520><c> integer</c>

01:13:38.310 --> 01:13:38.320 align:start position:0%
an integer
 

01:13:38.320 --> 01:13:41.750 align:start position:0%
an integer
this<01:13:38.560><c> is</c><01:13:38.640><c> how</c><01:13:38.800><c> we</c><01:13:38.960><c> do</c><01:13:39.120><c> it</c><01:13:39.840><c> integer</c><01:13:40.960><c> dot</c>

01:13:41.750 --> 01:13:41.760 align:start position:0%
this is how we do it integer dot
 

01:13:41.760 --> 01:13:44.790 align:start position:0%
this is how we do it integer dot
parse<01:13:42.239><c> int</c><01:13:42.880><c> we</c><01:13:43.120><c> pass</c><01:13:43.440><c> x</c><01:13:43.679><c> here</c><01:13:44.000><c> and</c><01:13:44.159><c> then</c><01:13:44.560><c> add</c><01:13:44.719><c> it</c>

01:13:44.790 --> 01:13:44.800 align:start position:0%
parse int we pass x here and then add it
 

01:13:44.800 --> 01:13:45.750 align:start position:0%
parse int we pass x here and then add it
to

01:13:45.750 --> 01:13:45.760 align:start position:0%
to
 

01:13:45.760 --> 01:13:49.430 align:start position:0%
to
take<01:13:46.000><c> a</c><01:13:46.080><c> look</c><01:13:47.360><c> so</c><01:13:47.679><c> we</c><01:13:47.840><c> get</c><01:13:48.640><c> three</c>

01:13:49.430 --> 01:13:49.440 align:start position:0%
take a look so we get three
 

01:13:49.440 --> 01:13:51.189 align:start position:0%
take a look so we get three
now<01:13:49.679><c> you</c><01:13:49.760><c> might</c><01:13:49.920><c> be</c><01:13:50.080><c> curious</c><01:13:50.719><c> why</c><01:13:50.960><c> this</c>

01:13:51.189 --> 01:13:51.199 align:start position:0%
now you might be curious why this
 

01:13:51.199 --> 01:13:53.590 align:start position:0%
now you might be curious why this
matters<01:13:51.760><c> why</c><01:13:52.000><c> should</c><01:13:52.159><c> we</c><01:13:52.400><c> parse</c><01:13:52.719><c> or</c><01:13:52.960><c> convert</c><01:13:53.360><c> a</c>

01:13:53.590 --> 01:13:53.600 align:start position:0%
matters why should we parse or convert a
 

01:13:53.600 --> 01:13:54.630 align:start position:0%
matters why should we parse or convert a
string<01:13:53.840><c> to</c><01:13:54.000><c> a</c><01:13:54.080><c> number</c>

01:13:54.630 --> 01:13:54.640 align:start position:0%
string to a number
 

01:13:54.640 --> 01:13:56.790 align:start position:0%
string to a number
to<01:13:54.800><c> add</c><01:13:54.960><c> it</c><01:13:55.040><c> to</c><01:13:55.199><c> something</c><01:13:55.520><c> else</c><01:13:55.920><c> well</c><01:13:56.560><c> pretty</c>

01:13:56.790 --> 01:13:56.800 align:start position:0%
to add it to something else well pretty
 

01:13:56.800 --> 01:13:58.310 align:start position:0%
to add it to something else well pretty
much<01:13:57.040><c> in</c><01:13:57.199><c> most</c><01:13:57.600><c> frameworks</c>

01:13:58.310 --> 01:13:58.320 align:start position:0%
much in most frameworks
 

01:13:58.320 --> 01:14:00.550 align:start position:0%
much in most frameworks
for<01:13:58.880><c> building</c><01:13:59.360><c> user</c><01:13:59.760><c> interfaces</c><01:14:00.320><c> whether</c>

01:14:00.550 --> 01:14:00.560 align:start position:0%
for building user interfaces whether
 

01:14:00.560 --> 01:14:02.310 align:start position:0%
for building user interfaces whether
you're<01:14:00.800><c> building</c><01:14:01.120><c> a</c><01:14:01.280><c> desktop</c><01:14:01.760><c> or</c><01:14:01.920><c> a</c><01:14:02.000><c> mobile</c>

01:14:02.310 --> 01:14:02.320 align:start position:0%
you're building a desktop or a mobile
 

01:14:02.320 --> 01:14:04.310 align:start position:0%
you're building a desktop or a mobile
application<01:14:02.880><c> or</c><01:14:03.040><c> web</c><01:14:03.280><c> application</c>

01:14:04.310 --> 01:14:04.320 align:start position:0%
application or web application
 

01:14:04.320 --> 01:14:06.550 align:start position:0%
application or web application
we<01:14:04.560><c> always</c><01:14:04.880><c> receive</c><01:14:05.360><c> input</c><01:14:05.600><c> from</c><01:14:05.760><c> the</c><01:14:05.920><c> user</c><01:14:06.320><c> as</c>

01:14:06.550 --> 01:14:06.560 align:start position:0%
we always receive input from the user as
 

01:14:06.560 --> 01:14:07.430 align:start position:0%
we always receive input from the user as
a<01:14:06.640><c> string</c>

01:14:07.430 --> 01:14:07.440 align:start position:0%
a string
 

01:14:07.440 --> 01:14:09.030 align:start position:0%
a string
so<01:14:07.600><c> if</c><01:14:07.760><c> you</c><01:14:07.840><c> have</c><01:14:08.000><c> a</c><01:14:08.080><c> form</c><01:14:08.400><c> with</c><01:14:08.560><c> a</c><01:14:08.640><c> bunch</c><01:14:08.880><c> of</c>

01:14:09.030 --> 01:14:09.040 align:start position:0%
so if you have a form with a bunch of
 

01:14:09.040 --> 01:14:10.470 align:start position:0%
so if you have a form with a bunch of
text<01:14:09.360><c> boxes</c><01:14:10.080><c> or</c>

01:14:10.470 --> 01:14:10.480 align:start position:0%
text boxes or
 

01:14:10.480 --> 01:14:13.030 align:start position:0%
text boxes or
drop<01:14:10.800><c> down</c><01:14:11.040><c> lists</c><01:14:11.520><c> almost</c><01:14:12.080><c> always</c><01:14:12.640><c> we</c><01:14:12.800><c> get</c>

01:14:13.030 --> 01:14:13.040 align:start position:0%
drop down lists almost always we get
 

01:14:13.040 --> 01:14:14.550 align:start position:0%
drop down lists almost always we get
values<01:14:13.520><c> as</c><01:14:13.679><c> a</c><01:14:13.760><c> strings</c>

01:14:14.550 --> 01:14:14.560 align:start position:0%
values as a strings
 

01:14:14.560 --> 01:14:16.550 align:start position:0%
values as a strings
so<01:14:15.120><c> that's</c><01:14:15.360><c> why</c><01:14:15.520><c> we</c><01:14:15.679><c> need</c><01:14:15.840><c> to</c><01:14:15.920><c> convert</c><01:14:16.320><c> these</c>

01:14:16.550 --> 01:14:16.560 align:start position:0%
so that's why we need to convert these
 

01:14:16.560 --> 01:14:19.189 align:start position:0%
so that's why we need to convert these
strings<01:14:16.960><c> to</c><01:14:17.360><c> their</c><01:14:17.600><c> numeric</c><01:14:18.000><c> representation</c>

01:14:19.189 --> 01:14:19.199 align:start position:0%
strings to their numeric representation
 

01:14:19.199 --> 01:14:22.709 align:start position:0%
strings to their numeric representation
okay<01:14:20.320><c> now</c><01:14:21.040><c> what</c><01:14:21.199><c> if</c><01:14:21.440><c> x</c><01:14:21.920><c> is</c>

01:14:22.709 --> 01:14:22.719 align:start position:0%
okay now what if x is
 

01:14:22.719 --> 01:14:25.189 align:start position:0%
okay now what if x is
a<01:14:22.880><c> floating</c><01:14:23.360><c> point</c><01:14:23.600><c> number</c><01:14:23.920><c> here</c><01:14:24.800><c> what</c><01:14:24.960><c> will</c>

01:14:25.189 --> 01:14:25.199 align:start position:0%
a floating point number here what will
 

01:14:25.199 --> 01:14:27.110 align:start position:0%
a floating point number here what will
happen<01:14:25.440><c> when</c><01:14:25.600><c> we</c><01:14:25.760><c> try</c><01:14:25.920><c> to</c><01:14:26.159><c> parse</c><01:14:26.560><c> this</c>

01:14:27.110 --> 01:14:27.120 align:start position:0%
happen when we try to parse this
 

01:14:27.120 --> 01:14:31.110 align:start position:0%
happen when we try to parse this
as<01:14:27.360><c> an</c><01:14:27.520><c> integer</c><01:14:28.000><c> let's</c><01:14:28.159><c> take</c><01:14:28.320><c> a</c><01:14:28.400><c> look</c>

01:14:31.110 --> 01:14:31.120 align:start position:0%
 
 

01:14:31.120 --> 01:14:33.750 align:start position:0%
 
once<01:14:31.360><c> again</c><01:14:31.600><c> we</c><01:14:31.760><c> get</c><01:14:32.239><c> an</c><01:14:32.480><c> exception</c><01:14:33.280><c> which</c><01:14:33.520><c> is</c>

01:14:33.750 --> 01:14:33.760 align:start position:0%
once again we get an exception which is
 

01:14:33.760 --> 01:14:34.310 align:start position:0%
once again we get an exception which is
how

01:14:34.310 --> 01:14:34.320 align:start position:0%
how
 

01:14:34.320 --> 01:14:36.870 align:start position:0%
how
java<01:14:34.640><c> reports</c><01:14:35.120><c> errors</c><01:14:35.440><c> to</c><01:14:35.600><c> our</c><01:14:35.760><c> programs</c>

01:14:36.870 --> 01:14:36.880 align:start position:0%
java reports errors to our programs
 

01:14:36.880 --> 01:14:38.149 align:start position:0%
java reports errors to our programs
we're<01:14:37.040><c> going</c><01:14:37.120><c> to</c><01:14:37.199><c> talk</c><01:14:37.360><c> about</c><01:14:37.600><c> exceptions</c><01:14:38.080><c> in</c>

01:14:38.149 --> 01:14:38.159 align:start position:0%
we're going to talk about exceptions in
 

01:14:38.159 --> 01:14:38.709 align:start position:0%
we're going to talk about exceptions in
detail

01:14:38.709 --> 01:14:38.719 align:start position:0%
detail
 

01:14:38.719 --> 01:14:42.390 align:start position:0%
detail
in<01:14:38.880><c> the</c><01:14:38.960><c> future</c><01:14:39.920><c> so</c><01:14:40.880><c> if</c><01:14:41.120><c> the</c><01:14:41.280><c> user</c><01:14:41.840><c> enters</c>

01:14:42.390 --> 01:14:42.400 align:start position:0%
in the future so if the user enters
 

01:14:42.400 --> 01:14:45.430 align:start position:0%
in the future so if the user enters
1.1<01:14:43.360><c> we</c><01:14:43.520><c> cannot</c><01:14:43.840><c> use</c><01:14:44.000><c> this</c><01:14:44.159><c> method</c><01:14:44.880><c> instead</c><01:14:45.280><c> we</c>

01:14:45.430 --> 01:14:45.440 align:start position:0%
1.1 we cannot use this method instead we
 

01:14:45.440 --> 01:14:46.390 align:start position:0%
1.1 we cannot use this method instead we
should<01:14:45.600><c> use</c>

01:14:46.390 --> 01:14:46.400 align:start position:0%
should use
 

01:14:46.400 --> 01:14:48.870 align:start position:0%
should use
float<01:14:46.800><c> or</c><01:14:47.120><c> double</c><01:14:47.840><c> let's</c><01:14:48.000><c> say</c><01:14:48.239><c> double</c><01:14:48.640><c> because</c>

01:14:48.870 --> 01:14:48.880 align:start position:0%
float or double let's say double because
 

01:14:48.880 --> 01:14:50.070 align:start position:0%
float or double let's say double because
that's<01:14:49.120><c> easier</c>

01:14:50.070 --> 01:14:50.080 align:start position:0%
that's easier
 

01:14:50.080 --> 01:14:53.189 align:start position:0%
that's easier
double<01:14:50.480><c> parse</c><01:14:51.440><c> double</c><01:14:52.400><c> so</c><01:14:52.560><c> we</c><01:14:52.719><c> parse</c><01:14:53.040><c> this</c>

01:14:53.189 --> 01:14:53.199 align:start position:0%
double parse double so we parse this
 

01:14:53.199 --> 01:14:54.470 align:start position:0%
double parse double so we parse this
number<01:14:53.520><c> as</c><01:14:53.679><c> a</c><01:14:53.760><c> double</c>

01:14:54.470 --> 01:14:54.480 align:start position:0%
number as a double
 

01:14:54.480 --> 01:14:57.189 align:start position:0%
number as a double
at<01:14:54.719><c> 2</c><01:14:54.960><c> to</c><01:14:55.199><c> it</c><01:14:55.520><c> and</c><01:14:55.679><c> then</c><01:14:56.080><c> store</c><01:14:56.320><c> the</c><01:14:56.480><c> result</c><01:14:57.040><c> in</c>

01:14:57.189 --> 01:14:57.199 align:start position:0%
at 2 to it and then store the result in
 

01:14:57.199 --> 01:14:58.149 align:start position:0%
at 2 to it and then store the result in
a<01:14:57.280><c> double</c>

01:14:58.149 --> 01:14:58.159 align:start position:0%
a double
 

01:14:58.159 --> 01:15:02.229 align:start position:0%
a double
and<01:14:58.239><c> then</c><01:14:58.480><c> we</c><01:14:58.640><c> will</c><01:14:58.800><c> get</c><01:14:59.920><c> 3.1</c><01:15:01.040><c> beautiful</c>

01:15:02.229 --> 01:15:02.239 align:start position:0%
and then we will get 3.1 beautiful
 

01:15:02.239 --> 01:15:03.510 align:start position:0%
and then we will get 3.1 beautiful
next<01:15:02.480><c> we're</c><01:15:02.640><c> going</c><01:15:02.719><c> to</c><01:15:02.800><c> look</c><01:15:02.960><c> at</c><01:15:03.040><c> the</c><01:15:03.199><c> math</c>

01:15:03.510 --> 01:15:03.520 align:start position:0%
next we're going to look at the math
 

01:15:03.520 --> 01:15:08.830 align:start position:0%
next we're going to look at the math
class<01:15:03.840><c> for</c><01:15:04.080><c> performing</c><01:15:04.560><c> mathematical</c>

01:15:08.830 --> 01:15:08.840 align:start position:0%
 
 

01:15:08.840 --> 01:15:11.910 align:start position:0%
 
operations

01:15:11.910 --> 01:15:11.920 align:start position:0%
 
 

01:15:11.920 --> 01:15:13.030 align:start position:0%
 
in<01:15:12.000><c> this</c><01:15:12.159><c> tutorial</c><01:15:12.560><c> we're</c><01:15:12.640><c> going</c><01:15:12.719><c> to</c><01:15:12.800><c> look</c><01:15:12.960><c> at</c>

01:15:13.030 --> 01:15:13.040 align:start position:0%
in this tutorial we're going to look at
 

01:15:13.040 --> 01:15:14.630 align:start position:0%
in this tutorial we're going to look at
the<01:15:13.280><c> math</c><01:15:13.600><c> class</c><01:15:13.920><c> for</c><01:15:14.159><c> performing</c>

01:15:14.630 --> 01:15:14.640 align:start position:0%
the math class for performing
 

01:15:14.640 --> 01:15:16.470 align:start position:0%
the math class for performing
mathematical<01:15:15.360><c> operations</c>

01:15:16.470 --> 01:15:16.480 align:start position:0%
mathematical operations
 

01:15:16.480 --> 01:15:18.630 align:start position:0%
mathematical operations
so<01:15:16.640><c> in</c><01:15:16.719><c> java</c><01:15:17.040><c> we</c><01:15:17.199><c> have</c><01:15:17.360><c> this</c><01:15:17.679><c> math</c><01:15:18.000><c> class</c><01:15:18.400><c> that</c>

01:15:18.630 --> 01:15:18.640 align:start position:0%
so in java we have this math class that
 

01:15:18.640 --> 01:15:19.750 align:start position:0%
so in java we have this math class that
is<01:15:18.719><c> defined</c><01:15:19.440><c> in</c>

01:15:19.750 --> 01:15:19.760 align:start position:0%
is defined in
 

01:15:19.760 --> 01:15:22.229 align:start position:0%
is defined in
java.lang<01:15:20.719><c> package</c><01:15:21.440><c> so</c><01:15:21.600><c> it's</c><01:15:21.760><c> always</c><01:15:22.080><c> there</c>

01:15:22.229 --> 01:15:22.239 align:start position:0%
java.lang package so it's always there
 

01:15:22.239 --> 01:15:24.310 align:start position:0%
java.lang package so it's always there
we<01:15:22.400><c> don't</c><01:15:22.480><c> need</c><01:15:22.640><c> to</c><01:15:22.800><c> explicitly</c><01:15:23.440><c> import</c><01:15:23.760><c> it</c>

01:15:24.310 --> 01:15:24.320 align:start position:0%
we don't need to explicitly import it
 

01:15:24.320 --> 01:15:25.910 align:start position:0%
we don't need to explicitly import it
now<01:15:24.560><c> this</c><01:15:24.719><c> class</c><01:15:24.960><c> has</c><01:15:25.120><c> a</c><01:15:25.199><c> number</c><01:15:25.360><c> of</c><01:15:25.520><c> useful</c>

01:15:25.910 --> 01:15:25.920 align:start position:0%
now this class has a number of useful
 

01:15:25.920 --> 01:15:27.590 align:start position:0%
now this class has a number of useful
methods<01:15:26.560><c> the</c><01:15:26.719><c> first</c><01:15:26.960><c> method</c><01:15:27.280><c> i'm</c><01:15:27.360><c> going</c><01:15:27.520><c> to</c>

01:15:27.590 --> 01:15:27.600 align:start position:0%
methods the first method i'm going to
 

01:15:27.600 --> 01:15:28.630 align:start position:0%
methods the first method i'm going to
show<01:15:27.760><c> you</c><01:15:28.000><c> is</c>

01:15:28.630 --> 01:15:28.640 align:start position:0%
show you is
 

01:15:28.640 --> 01:15:30.709 align:start position:0%
show you is
the<01:15:28.800><c> round</c><01:15:29.120><c> method</c><01:15:29.920><c> and</c><01:15:30.080><c> with</c><01:15:30.239><c> this</c><01:15:30.400><c> we</c><01:15:30.560><c> can</c>

01:15:30.709 --> 01:15:30.719 align:start position:0%
the round method and with this we can
 

01:15:30.719 --> 01:15:32.630 align:start position:0%
the round method and with this we can
round<01:15:31.040><c> a</c><01:15:31.120><c> floating</c><01:15:31.520><c> point</c><01:15:31.760><c> number</c><01:15:32.159><c> to</c><01:15:32.320><c> a</c><01:15:32.400><c> whole</c>

01:15:32.630 --> 01:15:32.640 align:start position:0%
round a floating point number to a whole
 

01:15:32.640 --> 01:15:33.270 align:start position:0%
round a floating point number to a whole
number

01:15:33.270 --> 01:15:33.280 align:start position:0%
number
 

01:15:33.280 --> 01:15:34.790 align:start position:0%
number
so<01:15:33.520><c> as</c><01:15:33.600><c> you</c><01:15:33.679><c> can</c><01:15:33.840><c> see</c><01:15:34.000><c> this</c><01:15:34.239><c> method</c><01:15:34.560><c> is</c>

01:15:34.790 --> 01:15:34.800 align:start position:0%
so as you can see this method is
 

01:15:34.800 --> 01:15:36.950 align:start position:0%
so as you can see this method is
overloaded<01:15:35.520><c> which</c><01:15:35.760><c> means</c><01:15:36.080><c> it's</c><01:15:36.320><c> implemented</c>

01:15:36.950 --> 01:15:36.960 align:start position:0%
overloaded which means it's implemented
 

01:15:36.960 --> 01:15:37.510 align:start position:0%
overloaded which means it's implemented
twice

01:15:37.510 --> 01:15:37.520 align:start position:0%
twice
 

01:15:37.520 --> 01:15:39.270 align:start position:0%
twice
in<01:15:37.679><c> the</c><01:15:37.760><c> first</c><01:15:38.000><c> implementation</c><01:15:38.640><c> it</c><01:15:38.719><c> takes</c><01:15:39.120><c> a</c>

01:15:39.270 --> 01:15:39.280 align:start position:0%
in the first implementation it takes a
 

01:15:39.280 --> 01:15:40.709 align:start position:0%
in the first implementation it takes a
float<01:15:39.840><c> and</c><01:15:40.000><c> returns</c><01:15:40.480><c> an</c>

01:15:40.709 --> 01:15:40.719 align:start position:0%
float and returns an
 

01:15:40.719 --> 01:15:42.790 align:start position:0%
float and returns an
int<01:15:41.360><c> in</c><01:15:41.520><c> the</c><01:15:41.600><c> second</c><01:15:41.920><c> implementation</c><01:15:42.560><c> it</c>

01:15:42.790 --> 01:15:42.800 align:start position:0%
int in the second implementation it
 

01:15:42.800 --> 01:15:43.990 align:start position:0%
int in the second implementation it
takes<01:15:43.280><c> a</c><01:15:43.520><c> double</c>

01:15:43.990 --> 01:15:44.000 align:start position:0%
takes a double
 

01:15:44.000 --> 01:15:47.110 align:start position:0%
takes a double
and<01:15:44.080><c> returns</c><01:15:44.719><c> a</c><01:15:44.880><c> long</c><01:15:45.679><c> so</c><01:15:46.239><c> let's</c><01:15:46.560><c> pass</c>

01:15:47.110 --> 01:15:47.120 align:start position:0%
and returns a long so let's pass
 

01:15:47.120 --> 01:15:50.709 align:start position:0%
and returns a long so let's pass
1.1<01:15:48.400><c> as</c><01:15:48.640><c> a</c><01:15:48.719><c> float</c><01:15:49.120><c> to</c><01:15:49.280><c> this</c><01:15:49.440><c> method</c><01:15:49.920><c> and</c>

01:15:50.709 --> 01:15:50.719 align:start position:0%
1.1 as a float to this method and
 

01:15:50.719 --> 01:15:53.750 align:start position:0%
1.1 as a float to this method and
store<01:15:50.960><c> the</c><01:15:51.120><c> result</c><01:15:52.000><c> in</c><01:15:52.159><c> an</c><01:15:52.320><c> integer</c>

01:15:53.750 --> 01:15:53.760 align:start position:0%
store the result in an integer
 

01:15:53.760 --> 01:15:57.110 align:start position:0%
store the result in an integer
like<01:15:54.000><c> this</c><01:15:55.040><c> now</c><01:15:55.280><c> we</c><01:15:55.520><c> print</c><01:15:55.760><c> the</c><01:15:55.920><c> result</c>

01:15:57.110 --> 01:15:57.120 align:start position:0%
like this now we print the result
 

01:15:57.120 --> 01:16:00.310 align:start position:0%
like this now we print the result
and<01:15:59.120><c> we</c><01:15:59.360><c> get</c><01:15:59.840><c> one</c>

01:16:00.310 --> 01:16:00.320 align:start position:0%
and we get one
 

01:16:00.320 --> 01:16:04.470 align:start position:0%
and we get one
beautiful<01:16:01.679><c> another</c><01:16:02.000><c> useful</c><01:16:02.400><c> method</c><01:16:02.800><c> is</c><01:16:02.960><c> seal</c>

01:16:04.470 --> 01:16:04.480 align:start position:0%
beautiful another useful method is seal
 

01:16:04.480 --> 01:16:06.709 align:start position:0%
beautiful another useful method is seal
or<01:16:04.719><c> ceiling</c><01:16:05.199><c> which</c><01:16:05.440><c> returns</c><01:16:06.000><c> the</c><01:16:06.239><c> smallest</c>

01:16:06.709 --> 01:16:06.719 align:start position:0%
or ceiling which returns the smallest
 

01:16:06.719 --> 01:16:08.709 align:start position:0%
or ceiling which returns the smallest
integer<01:16:07.360><c> that</c><01:16:07.600><c> is</c><01:16:07.840><c> greater</c><01:16:08.239><c> than</c>

01:16:08.709 --> 01:16:08.719 align:start position:0%
integer that is greater than
 

01:16:08.719 --> 01:16:11.030 align:start position:0%
integer that is greater than
or<01:16:09.040><c> equal</c><01:16:09.440><c> to</c><01:16:09.520><c> this</c><01:16:09.760><c> number</c><01:16:10.320><c> so</c><01:16:10.480><c> the</c><01:16:10.640><c> ceiling</c>

01:16:11.030 --> 01:16:11.040 align:start position:0%
or equal to this number so the ceiling
 

01:16:11.040 --> 01:16:12.149 align:start position:0%
or equal to this number so the ceiling
of<01:16:11.199><c> 1.1</c>

01:16:12.149 --> 01:16:12.159 align:start position:0%
of 1.1
 

01:16:12.159 --> 01:16:14.390 align:start position:0%
of 1.1
is<01:16:12.400><c> 2.</c><01:16:13.199><c> now</c><01:16:13.360><c> here</c><01:16:13.520><c> we</c><01:16:13.600><c> have</c><01:16:13.760><c> a</c><01:16:13.840><c> compilation</c>

01:16:14.390 --> 01:16:14.400 align:start position:0%
is 2. now here we have a compilation
 

01:16:14.400 --> 01:16:16.630 align:start position:0%
is 2. now here we have a compilation
error<01:16:14.960><c> because</c><01:16:15.199><c> this</c><01:16:15.440><c> method</c><01:16:15.760><c> returns</c><01:16:16.320><c> a</c>

01:16:16.630 --> 01:16:16.640 align:start position:0%
error because this method returns a
 

01:16:16.640 --> 01:16:17.350 align:start position:0%
error because this method returns a
double

01:16:17.350 --> 01:16:17.360 align:start position:0%
double
 

01:16:17.360 --> 01:16:19.990 align:start position:0%
double
but<01:16:17.520><c> restoring</c><01:16:18.080><c> the</c><01:16:18.239><c> result</c><01:16:18.880><c> in</c><01:16:19.040><c> an</c><01:16:19.199><c> integer</c>

01:16:19.990 --> 01:16:20.000 align:start position:0%
but restoring the result in an integer
 

01:16:20.000 --> 01:16:22.229 align:start position:0%
but restoring the result in an integer
so<01:16:20.159><c> here</c><01:16:20.320><c> we</c><01:16:20.480><c> need</c><01:16:20.560><c> to</c><01:16:20.800><c> explicitly</c>

01:16:22.229 --> 01:16:22.239 align:start position:0%
so here we need to explicitly
 

01:16:22.239 --> 01:16:25.430 align:start position:0%
so here we need to explicitly
cast<01:16:22.560><c> this</c><01:16:22.719><c> to</c><01:16:22.880><c> an</c><01:16:23.040><c> integer</c><01:16:24.159><c> and</c><01:16:24.400><c> now</c>

01:16:25.430 --> 01:16:25.440 align:start position:0%
cast this to an integer and now
 

01:16:25.440 --> 01:16:27.189 align:start position:0%
cast this to an integer and now
you<01:16:25.520><c> can</c><01:16:25.679><c> see</c><01:16:25.920><c> the</c><01:16:26.080><c> ceiling</c><01:16:26.480><c> of</c><01:16:26.560><c> this</c><01:16:26.719><c> number</c>

01:16:27.189 --> 01:16:27.199 align:start position:0%
you can see the ceiling of this number
 

01:16:27.199 --> 01:16:28.470 align:start position:0%
you can see the ceiling of this number
is<01:16:27.440><c> 2.</c>

01:16:28.470 --> 01:16:28.480 align:start position:0%
is 2.
 

01:16:28.480 --> 01:16:30.390 align:start position:0%
is 2.
we<01:16:28.640><c> have</c><01:16:29.040><c> another</c><01:16:29.360><c> useful</c><01:16:29.760><c> method</c><01:16:30.080><c> that</c><01:16:30.239><c> is</c>

01:16:30.390 --> 01:16:30.400 align:start position:0%
we have another useful method that is
 

01:16:30.400 --> 01:16:32.070 align:start position:0%
we have another useful method that is
floor

01:16:32.070 --> 01:16:32.080 align:start position:0%
floor
 

01:16:32.080 --> 01:16:34.550 align:start position:0%
floor
so<01:16:32.239><c> the</c><01:16:32.400><c> floor</c><01:16:32.640><c> of</c><01:16:32.800><c> a</c><01:16:32.880><c> number</c><01:16:33.679><c> is</c><01:16:33.920><c> the</c><01:16:34.080><c> largest</c>

01:16:34.550 --> 01:16:34.560 align:start position:0%
so the floor of a number is the largest
 

01:16:34.560 --> 01:16:35.990 align:start position:0%
so the floor of a number is the largest
integer<01:16:35.040><c> that</c><01:16:35.280><c> is</c><01:16:35.360><c> smaller</c>

01:16:35.990 --> 01:16:36.000 align:start position:0%
integer that is smaller
 

01:16:36.000 --> 01:16:38.149 align:start position:0%
integer that is smaller
or<01:16:36.239><c> equal</c><01:16:36.560><c> to</c><01:16:36.719><c> this</c><01:16:36.880><c> number</c><01:16:37.520><c> in</c><01:16:37.600><c> this</c><01:16:37.840><c> case</c>

01:16:38.149 --> 01:16:38.159 align:start position:0%
or equal to this number in this case
 

01:16:38.159 --> 01:16:39.270 align:start position:0%
or equal to this number in this case
it's<01:16:38.320><c> going</c><01:16:38.400><c> to</c><01:16:38.480><c> be</c><01:16:38.719><c> 1.</c>

01:16:39.270 --> 01:16:39.280 align:start position:0%
it's going to be 1.
 

01:16:39.280 --> 01:16:43.669 align:start position:0%
it's going to be 1.
let's<01:16:39.520><c> take</c><01:16:39.679><c> a</c><01:16:39.760><c> look</c><01:16:41.679><c> there</c><01:16:41.920><c> you</c><01:16:42.000><c> go</c>

01:16:43.669 --> 01:16:43.679 align:start position:0%
let's take a look there you go
 

01:16:43.679 --> 01:16:46.070 align:start position:0%
let's take a look there you go
another<01:16:44.000><c> useful</c><01:16:44.400><c> method</c><01:16:44.800><c> is</c><01:16:45.360><c> max</c><01:16:45.840><c> which</c>

01:16:46.070 --> 01:16:46.080 align:start position:0%
another useful method is max which
 

01:16:46.080 --> 01:16:46.709 align:start position:0%
another useful method is max which
returns

01:16:46.709 --> 01:16:46.719 align:start position:0%
returns
 

01:16:46.719 --> 01:16:49.110 align:start position:0%
returns
the<01:16:46.960><c> greater</c><01:16:47.360><c> of</c><01:16:47.440><c> two</c><01:16:47.760><c> values</c><01:16:48.480><c> and</c><01:16:48.640><c> once</c><01:16:48.880><c> again</c>

01:16:49.110 --> 01:16:49.120 align:start position:0%
the greater of two values and once again
 

01:16:49.120 --> 01:16:50.790 align:start position:0%
the greater of two values and once again
this<01:16:49.280><c> method</c><01:16:49.679><c> is</c><01:16:49.840><c> overloaded</c>

01:16:50.790 --> 01:16:50.800 align:start position:0%
this method is overloaded
 

01:16:50.800 --> 01:16:52.229 align:start position:0%
this method is overloaded
so<01:16:50.960><c> in</c><01:16:51.040><c> the</c><01:16:51.120><c> first</c><01:16:51.360><c> implementation</c><01:16:51.920><c> we</c><01:16:52.080><c> get</c>

01:16:52.229 --> 01:16:52.239 align:start position:0%
so in the first implementation we get
 

01:16:52.239 --> 01:16:53.910 align:start position:0%
so in the first implementation we get
two<01:16:52.480><c> integers</c><01:16:53.199><c> we</c><01:16:53.360><c> have</c><01:16:53.679><c> other</c>

01:16:53.910 --> 01:16:53.920 align:start position:0%
two integers we have other
 

01:16:53.920 --> 01:16:55.430 align:start position:0%
two integers we have other
implementations<01:16:54.640><c> for</c><01:16:54.800><c> longs</c>

01:16:55.430 --> 01:16:55.440 align:start position:0%
implementations for longs
 

01:16:55.440 --> 01:16:58.149 align:start position:0%
implementations for longs
floats<01:16:56.080><c> and</c><01:16:56.239><c> doubles</c><01:16:57.199><c> so</c><01:16:57.520><c> let's</c><01:16:57.760><c> pass</c><01:16:58.000><c> two</c>

01:16:58.149 --> 01:16:58.159 align:start position:0%
floats and doubles so let's pass two
 

01:16:58.159 --> 01:16:59.189 align:start position:0%
floats and doubles so let's pass two
integers<01:16:58.640><c> here</c>

01:16:59.189 --> 01:16:59.199 align:start position:0%
integers here
 

01:16:59.199 --> 01:17:02.790 align:start position:0%
integers here
one<01:16:59.520><c> and</c><01:16:59.679><c> two</c><01:17:01.360><c> this</c><01:17:01.600><c> will</c><01:17:01.760><c> return</c><01:17:02.239><c> the</c><01:17:02.400><c> greater</c>

01:17:02.790 --> 01:17:02.800 align:start position:0%
one and two this will return the greater
 

01:17:02.800 --> 01:17:03.910 align:start position:0%
one and two this will return the greater
number<01:17:03.120><c> which</c><01:17:03.440><c> is</c>

01:17:03.910 --> 01:17:03.920 align:start position:0%
number which is
 

01:17:03.920 --> 01:17:08.229 align:start position:0%
number which is
2.<01:17:05.199><c> there</c><01:17:05.440><c> you</c><01:17:05.600><c> go</c><01:17:06.880><c> similar</c><01:17:07.199><c> to</c><01:17:07.360><c> this</c><01:17:07.520><c> we</c><01:17:07.679><c> have</c>

01:17:08.229 --> 01:17:08.239 align:start position:0%
2. there you go similar to this we have
 

01:17:08.239 --> 01:17:10.470 align:start position:0%
2. there you go similar to this we have
min<01:17:08.880><c> that's</c><01:17:09.120><c> pretty</c><01:17:09.360><c> straightforward</c>

01:17:10.470 --> 01:17:10.480 align:start position:0%
min that's pretty straightforward
 

01:17:10.480 --> 01:17:12.070 align:start position:0%
min that's pretty straightforward
another<01:17:10.800><c> useful</c><01:17:11.120><c> method</c><01:17:11.520><c> is</c>

01:17:12.070 --> 01:17:12.080 align:start position:0%
another useful method is
 

01:17:12.080 --> 01:17:14.950 align:start position:0%
another useful method is
random<01:17:13.199><c> for</c><01:17:13.440><c> generating</c><01:17:14.000><c> a</c><01:17:14.159><c> random</c><01:17:14.640><c> value</c>

01:17:14.950 --> 01:17:14.960 align:start position:0%
random for generating a random value
 

01:17:14.960 --> 01:17:16.790 align:start position:0%
random for generating a random value
between<01:17:15.360><c> 0</c><01:17:15.920><c> and</c><01:17:16.159><c> 1.</c>

01:17:16.790 --> 01:17:16.800 align:start position:0%
between 0 and 1.
 

01:17:16.800 --> 01:17:18.709 align:start position:0%
between 0 and 1.
once<01:17:17.040><c> again</c><01:17:17.280><c> we</c><01:17:17.360><c> get</c><01:17:17.600><c> a</c><01:17:17.679><c> compilation</c><01:17:18.239><c> error</c>

01:17:18.709 --> 01:17:18.719 align:start position:0%
once again we get a compilation error
 

01:17:18.719 --> 01:17:20.149 align:start position:0%
once again we get a compilation error
because<01:17:18.960><c> this</c><01:17:19.199><c> method</c><01:17:19.520><c> returns</c>

01:17:20.149 --> 01:17:20.159 align:start position:0%
because this method returns
 

01:17:20.159 --> 01:17:23.830 align:start position:0%
because this method returns
a<01:17:20.480><c> double</c><01:17:21.199><c> so</c><01:17:22.000><c> let's</c><01:17:22.400><c> change</c><01:17:22.640><c> that</c><01:17:22.800><c> to</c><01:17:23.040><c> double</c>

01:17:23.830 --> 01:17:23.840 align:start position:0%
a double so let's change that to double
 

01:17:23.840 --> 01:17:26.630 align:start position:0%
a double so let's change that to double
now<01:17:24.159><c> every</c><01:17:24.480><c> time</c><01:17:24.640><c> we</c><01:17:24.800><c> run</c><01:17:24.960><c> this</c><01:17:25.199><c> program</c><01:17:26.400><c> we</c>

01:17:26.630 --> 01:17:26.640 align:start position:0%
now every time we run this program we
 

01:17:26.640 --> 01:17:27.430 align:start position:0%
now every time we run this program we
get

01:17:27.430 --> 01:17:27.440 align:start position:0%
get
 

01:17:27.440 --> 01:17:29.910 align:start position:0%
get
a<01:17:27.600><c> different</c><01:17:27.920><c> number</c><01:17:29.040><c> and</c><01:17:29.120><c> this</c><01:17:29.360><c> number</c><01:17:29.679><c> is</c><01:17:29.760><c> a</c>

01:17:29.910 --> 01:17:29.920 align:start position:0%
a different number and this number is a
 

01:17:29.920 --> 01:17:31.669 align:start position:0%
a different number and this number is a
floating<01:17:30.239><c> point</c><01:17:30.480><c> number</c><01:17:30.800><c> between</c><01:17:31.199><c> zero</c><01:17:31.520><c> to</c>

01:17:31.669 --> 01:17:31.679 align:start position:0%
floating point number between zero to
 

01:17:31.679 --> 01:17:32.630 align:start position:0%
floating point number between zero to
one

01:17:32.630 --> 01:17:32.640 align:start position:0%
one
 

01:17:32.640 --> 01:17:34.149 align:start position:0%
one
now<01:17:32.800><c> what</c><01:17:33.040><c> if</c><01:17:33.120><c> we</c><01:17:33.199><c> want</c><01:17:33.360><c> a</c><01:17:33.440><c> number</c><01:17:33.760><c> between</c>

01:17:34.149 --> 01:17:34.159 align:start position:0%
now what if we want a number between
 

01:17:34.159 --> 01:17:36.709 align:start position:0%
now what if we want a number between
zero<01:17:34.480><c> to</c><01:17:34.800><c> let's</c><01:17:34.960><c> say</c><01:17:35.199><c> 100</c><01:17:35.840><c> instead</c><01:17:36.080><c> of</c><01:17:36.239><c> zero</c><01:17:36.560><c> to</c>

01:17:36.709 --> 01:17:36.719 align:start position:0%
zero to let's say 100 instead of zero to
 

01:17:36.719 --> 01:17:37.430 align:start position:0%
zero to let's say 100 instead of zero to
one

01:17:37.430 --> 01:17:37.440 align:start position:0%
one
 

01:17:37.440 --> 01:17:40.790 align:start position:0%
one
well<01:17:37.679><c> we</c><01:17:37.920><c> simply</c><01:17:38.320><c> multiply</c><01:17:38.960><c> this</c><01:17:40.159><c> by</c>

01:17:40.790 --> 01:17:40.800 align:start position:0%
well we simply multiply this by
 

01:17:40.800 --> 01:17:43.990 align:start position:0%
well we simply multiply this by
hundred<01:17:41.760><c> take</c><01:17:42.000><c> a</c><01:17:42.080><c> look</c><01:17:43.440><c> so</c><01:17:43.600><c> every</c><01:17:43.760><c> time</c>

01:17:43.990 --> 01:17:44.000 align:start position:0%
hundred take a look so every time
 

01:17:44.000 --> 01:17:45.910 align:start position:0%
hundred take a look so every time
we<01:17:44.080><c> run</c><01:17:44.239><c> this</c><01:17:44.400><c> we</c><01:17:44.560><c> get</c><01:17:45.120><c> a</c><01:17:45.280><c> different</c><01:17:45.600><c> number</c>

01:17:45.910 --> 01:17:45.920 align:start position:0%
we run this we get a different number
 

01:17:45.920 --> 01:17:48.229 align:start position:0%
we run this we get a different number
between<01:17:46.320><c> 0</c><01:17:46.800><c> to</c><01:17:46.960><c> 100.</c>

01:17:48.229 --> 01:17:48.239 align:start position:0%
between 0 to 100.
 

01:17:48.239 --> 01:17:50.070 align:start position:0%
between 0 to 100.
now<01:17:48.480><c> if</c><01:17:48.560><c> we</c><01:17:48.640><c> don't</c><01:17:48.880><c> want</c><01:17:49.040><c> these</c><01:17:49.280><c> digits</c><01:17:49.840><c> after</c>

01:17:50.070 --> 01:17:50.080 align:start position:0%
now if we don't want these digits after
 

01:17:50.080 --> 01:17:52.070 align:start position:0%
now if we don't want these digits after
the<01:17:50.159><c> decimal</c><01:17:50.640><c> point</c><01:17:51.040><c> we</c><01:17:51.199><c> can</c><01:17:51.440><c> either</c><01:17:51.760><c> round</c>

01:17:52.070 --> 01:17:52.080 align:start position:0%
the decimal point we can either round
 

01:17:52.080 --> 01:17:53.189 align:start position:0%
the decimal point we can either round
this<01:17:52.239><c> number</c><01:17:52.640><c> or</c>

01:17:53.189 --> 01:17:53.199 align:start position:0%
this number or
 

01:17:53.199 --> 01:17:56.550 align:start position:0%
this number or
cast<01:17:53.520><c> it</c><01:17:53.679><c> to</c><01:17:53.760><c> an</c><01:17:53.920><c> integer</c><01:17:54.239><c> let</c><01:17:54.400><c> me</c><01:17:54.560><c> show</c><01:17:54.719><c> you</c><01:17:55.280><c> so</c>

01:17:56.550 --> 01:17:56.560 align:start position:0%
cast it to an integer let me show you so
 

01:17:56.560 --> 01:17:59.830 align:start position:0%
cast it to an integer let me show you so
we<01:17:56.719><c> can</c><01:17:56.960><c> call</c><01:17:57.480><c> math.round</c><01:17:58.880><c> and</c><01:17:59.199><c> pass</c>

01:17:59.830 --> 01:17:59.840 align:start position:0%
we can call math.round and pass
 

01:17:59.840 --> 01:18:01.910 align:start position:0%
we can call math.round and pass
the<01:18:00.080><c> result</c><01:18:00.480><c> of</c><01:18:00.560><c> this</c><01:18:00.800><c> expression</c><01:18:01.679><c> so</c><01:18:01.840><c> i'm</c>

01:18:01.910 --> 01:18:01.920 align:start position:0%
the result of this expression so i'm
 

01:18:01.920 --> 01:18:03.270 align:start position:0%
the result of this expression so i'm
going<01:18:02.080><c> to</c><01:18:02.159><c> cut</c><01:18:02.400><c> this</c>

01:18:03.270 --> 01:18:03.280 align:start position:0%
going to cut this
 

01:18:03.280 --> 01:18:05.350 align:start position:0%
going to cut this
add<01:18:03.520><c> parenthesis</c><01:18:04.239><c> to</c><01:18:04.400><c> call</c><01:18:04.640><c> the</c><01:18:04.800><c> round</c><01:18:05.040><c> method</c>

01:18:05.350 --> 01:18:05.360 align:start position:0%
add parenthesis to call the round method
 

01:18:05.360 --> 01:18:06.470 align:start position:0%
add parenthesis to call the round method
and<01:18:05.520><c> then</c><01:18:05.760><c> paste</c>

01:18:06.470 --> 01:18:06.480 align:start position:0%
and then paste
 

01:18:06.480 --> 01:18:11.030 align:start position:0%
and then paste
that<01:18:06.719><c> expression</c><01:18:08.080><c> now</c><01:18:08.320><c> let's</c><01:18:08.560><c> run</c><01:18:08.719><c> this</c><01:18:08.880><c> code</c>

01:18:11.030 --> 01:18:11.040 align:start position:0%
that expression now let's run this code
 

01:18:11.040 --> 01:18:14.550 align:start position:0%
that expression now let's run this code
so<01:18:11.280><c> every</c><01:18:11.600><c> time</c><01:18:12.960><c> we</c><01:18:13.120><c> get</c><01:18:13.679><c> a</c><01:18:13.840><c> double</c><01:18:14.159><c> we</c><01:18:14.320><c> still</c>

01:18:14.550 --> 01:18:14.560 align:start position:0%
so every time we get a double we still
 

01:18:14.560 --> 01:18:16.070 align:start position:0%
so every time we get a double we still
have<01:18:14.719><c> the</c><01:18:14.880><c> fraction</c><01:18:15.360><c> here</c>

01:18:16.070 --> 01:18:16.080 align:start position:0%
have the fraction here
 

01:18:16.080 --> 01:18:19.510 align:start position:0%
have the fraction here
so<01:18:16.880><c> we</c><01:18:17.040><c> can</c><01:18:17.199><c> change</c><01:18:17.440><c> the</c><01:18:17.600><c> type</c><01:18:18.080><c> to</c><01:18:18.320><c> an</c><01:18:18.560><c> int</c>

01:18:19.510 --> 01:18:19.520 align:start position:0%
so we can change the type to an int
 

01:18:19.520 --> 01:18:21.350 align:start position:0%
so we can change the type to an int
now<01:18:19.760><c> we</c><01:18:19.920><c> have</c><01:18:20.239><c> a</c><01:18:20.320><c> compilation</c><01:18:20.880><c> error</c><01:18:21.120><c> because</c>

01:18:21.350 --> 01:18:21.360 align:start position:0%
now we have a compilation error because
 

01:18:21.360 --> 01:18:23.110 align:start position:0%
now we have a compilation error because
the<01:18:21.520><c> round</c><01:18:21.760><c> method</c><01:18:22.080><c> returns</c><01:18:22.560><c> a</c><01:18:22.640><c> long</c>

01:18:23.110 --> 01:18:23.120 align:start position:0%
the round method returns a long
 

01:18:23.120 --> 01:18:25.030 align:start position:0%
the round method returns a long
but<01:18:23.280><c> here</c><01:18:23.520><c> we</c><01:18:23.600><c> have</c><01:18:23.679><c> declared</c><01:18:24.159><c> an</c><01:18:24.320><c> integer</c>

01:18:25.030 --> 01:18:25.040 align:start position:0%
but here we have declared an integer
 

01:18:25.040 --> 01:18:26.709 align:start position:0%
but here we have declared an integer
this<01:18:25.280><c> is</c><01:18:25.360><c> one</c><01:18:25.520><c> of</c><01:18:25.600><c> those</c><01:18:25.760><c> cases</c><01:18:26.159><c> where</c>

01:18:26.709 --> 01:18:26.719 align:start position:0%
this is one of those cases where
 

01:18:26.719 --> 01:18:29.270 align:start position:0%
this is one of those cases where
implicit<01:18:27.280><c> casting</c><01:18:27.760><c> cannot</c><01:18:28.239><c> happen</c><01:18:29.040><c> because</c>

01:18:29.270 --> 01:18:29.280 align:start position:0%
implicit casting cannot happen because
 

01:18:29.280 --> 01:18:31.270 align:start position:0%
implicit casting cannot happen because
we<01:18:29.440><c> have</c><01:18:29.600><c> a</c><01:18:29.679><c> value</c><01:18:30.159><c> that</c><01:18:30.400><c> is</c><01:18:30.480><c> represented</c><01:18:31.120><c> in</c>

01:18:31.270 --> 01:18:31.280 align:start position:0%
we have a value that is represented in
 

01:18:31.280 --> 01:18:32.550 align:start position:0%
we have a value that is represented in
eight<01:18:31.520><c> bytes</c><01:18:31.840><c> of</c><01:18:31.920><c> memory</c>

01:18:32.550 --> 01:18:32.560 align:start position:0%
eight bytes of memory
 

01:18:32.560 --> 01:18:34.149 align:start position:0%
eight bytes of memory
and<01:18:32.719><c> we</c><01:18:32.800><c> want</c><01:18:32.960><c> to</c><01:18:33.040><c> store</c><01:18:33.280><c> that</c><01:18:33.520><c> in</c><01:18:33.600><c> a</c><01:18:33.760><c> variable</c>

01:18:34.149 --> 01:18:34.159 align:start position:0%
and we want to store that in a variable
 

01:18:34.159 --> 01:18:36.310 align:start position:0%
and we want to store that in a variable
that<01:18:34.320><c> has</c><01:18:34.640><c> only</c><01:18:34.960><c> four</c><01:18:35.199><c> bytes</c><01:18:35.440><c> of</c><01:18:35.600><c> memory</c>

01:18:36.310 --> 01:18:36.320 align:start position:0%
that has only four bytes of memory
 

01:18:36.320 --> 01:18:38.709 align:start position:0%
that has only four bytes of memory
so<01:18:36.560><c> implicit</c><01:18:36.960><c> casting</c><01:18:37.360><c> doesn't</c><01:18:37.679><c> work</c><01:18:38.400><c> but</c><01:18:38.560><c> we</c>

01:18:38.709 --> 01:18:38.719 align:start position:0%
so implicit casting doesn't work but we
 

01:18:38.719 --> 01:18:40.870 align:start position:0%
so implicit casting doesn't work but we
can<01:18:38.800><c> use</c><01:18:39.120><c> explicit</c><01:18:39.760><c> casting</c><01:18:40.239><c> because</c><01:18:40.560><c> we</c><01:18:40.640><c> know</c>

01:18:40.870 --> 01:18:40.880 align:start position:0%
can use explicit casting because we know
 

01:18:40.880 --> 01:18:42.470 align:start position:0%
can use explicit casting because we know
the<01:18:41.040><c> result</c><01:18:41.440><c> of</c><01:18:41.520><c> this</c><01:18:41.760><c> expression</c>

01:18:42.470 --> 01:18:42.480 align:start position:0%
the result of this expression
 

01:18:42.480 --> 01:18:45.189 align:start position:0%
the result of this expression
is<01:18:42.640><c> a</c><01:18:42.719><c> number</c><01:18:43.120><c> between</c><01:18:43.520><c> 0</c><01:18:43.920><c> to</c><01:18:44.159><c> 100</c><01:18:44.800><c> so</c><01:18:44.960><c> we</c><01:18:45.040><c> can</c>

01:18:45.189 --> 01:18:45.199 align:start position:0%
is a number between 0 to 100 so we can
 

01:18:45.199 --> 01:18:46.310 align:start position:0%
is a number between 0 to 100 so we can
definitely<01:18:45.679><c> store</c><01:18:46.000><c> it</c>

01:18:46.310 --> 01:18:46.320 align:start position:0%
definitely store it
 

01:18:46.320 --> 01:18:49.510 align:start position:0%
definitely store it
in<01:18:46.480><c> an</c><01:18:46.640><c> integer</c><01:18:47.360><c> so</c><01:18:47.600><c> let's</c><01:18:47.840><c> add</c><01:18:48.080><c> in</c><01:18:48.320><c> here</c>

01:18:49.510 --> 01:18:49.520 align:start position:0%
in an integer so let's add in here
 

01:18:49.520 --> 01:18:54.950 align:start position:0%
in an integer so let's add in here
now<01:18:50.080><c> let's</c><01:18:50.320><c> run</c><01:18:50.480><c> this</c><01:18:50.640><c> again</c><01:18:51.920><c> there</c><01:18:52.159><c> you</c><01:18:52.840><c> go</c>

01:18:54.950 --> 01:18:54.960 align:start position:0%
now let's run this again there you go
 

01:18:54.960 --> 01:18:56.310 align:start position:0%
now let's run this again there you go
now<01:18:55.120><c> what</c><01:18:55.360><c> if</c><01:18:55.440><c> we</c><01:18:55.520><c> don't</c><01:18:55.760><c> use</c><01:18:55.920><c> the</c><01:18:56.080><c> round</c>

01:18:56.310 --> 01:18:56.320 align:start position:0%
now what if we don't use the round
 

01:18:56.320 --> 01:18:58.310 align:start position:0%
now what if we don't use the round
method<01:18:56.640><c> here</c><01:18:56.960><c> let's</c><01:18:57.120><c> see</c><01:18:57.280><c> what</c><01:18:57.520><c> happens</c>

01:18:58.310 --> 01:18:58.320 align:start position:0%
method here let's see what happens
 

01:18:58.320 --> 01:19:00.950 align:start position:0%
method here let's see what happens
so<01:18:58.960><c> i'm</c><01:18:59.199><c> going</c><01:18:59.280><c> to</c><01:18:59.440><c> remove</c><01:19:00.159><c> the</c><01:19:00.400><c> call</c><01:19:00.719><c> to</c><01:19:00.880><c> the</c>

01:19:00.950 --> 01:19:00.960 align:start position:0%
so i'm going to remove the call to the
 

01:19:00.960 --> 01:19:03.430 align:start position:0%
so i'm going to remove the call to the
round<01:19:01.199><c> method</c>

01:19:03.430 --> 01:19:03.440 align:start position:0%
round method
 

01:19:03.440 --> 01:19:05.669 align:start position:0%
round method
and<01:19:03.600><c> simply</c><01:19:03.920><c> apply</c><01:19:04.320><c> this</c><01:19:04.480><c> casting</c><01:19:04.960><c> over</c><01:19:05.199><c> here</c>

01:19:05.669 --> 01:19:05.679 align:start position:0%
and simply apply this casting over here
 

01:19:05.679 --> 01:19:08.070 align:start position:0%
and simply apply this casting over here
let's<01:19:05.840><c> see</c><01:19:06.000><c> what</c><01:19:06.159><c> we</c><01:19:06.840><c> get</c>

01:19:08.070 --> 01:19:08.080 align:start position:0%
let's see what we get
 

01:19:08.080 --> 01:19:09.830 align:start position:0%
let's see what we get
now<01:19:08.320><c> every</c><01:19:08.480><c> time</c><01:19:08.640><c> we</c><01:19:08.800><c> run</c><01:19:08.960><c> this</c><01:19:09.120><c> program</c><01:19:09.679><c> we</c>

01:19:09.830 --> 01:19:09.840 align:start position:0%
now every time we run this program we
 

01:19:09.840 --> 01:19:11.990 align:start position:0%
now every time we run this program we
get<01:19:10.000><c> zero</c><01:19:10.560><c> do</c><01:19:10.640><c> you</c><01:19:10.719><c> know</c><01:19:10.880><c> why</c>

01:19:11.990 --> 01:19:12.000 align:start position:0%
get zero do you know why
 

01:19:12.000 --> 01:19:14.390 align:start position:0%
get zero do you know why
because<01:19:12.320><c> here</c><01:19:12.480><c> we're</c><01:19:12.719><c> applying</c><01:19:13.120><c> this</c><01:19:13.360><c> casting</c>

01:19:14.390 --> 01:19:14.400 align:start position:0%
because here we're applying this casting
 

01:19:14.400 --> 01:19:15.990 align:start position:0%
because here we're applying this casting
to<01:19:14.560><c> the</c><01:19:14.800><c> result</c>

01:19:15.990 --> 01:19:16.000 align:start position:0%
to the result
 

01:19:16.000 --> 01:19:18.149 align:start position:0%
to the result
of<01:19:16.159><c> this</c><01:19:16.400><c> method</c><01:19:16.719><c> call</c><01:19:17.199><c> not</c><01:19:17.440><c> this</c><01:19:17.679><c> entire</c>

01:19:18.149 --> 01:19:18.159 align:start position:0%
of this method call not this entire
 

01:19:18.159 --> 01:19:19.189 align:start position:0%
of this method call not this entire
expression

01:19:19.189 --> 01:19:19.199 align:start position:0%
expression
 

01:19:19.199 --> 01:19:21.669 align:start position:0%
expression
as<01:19:19.440><c> you</c><01:19:19.520><c> saw</c><01:19:19.679><c> earlier</c><01:19:20.560><c> every</c><01:19:20.800><c> time</c><01:19:21.040><c> we</c><01:19:21.199><c> call</c>

01:19:21.669 --> 01:19:21.679 align:start position:0%
as you saw earlier every time we call
 

01:19:21.679 --> 01:19:23.830 align:start position:0%
as you saw earlier every time we call
the<01:19:21.920><c> random</c><01:19:22.239><c> method</c><01:19:22.640><c> it</c><01:19:22.800><c> generates</c><01:19:23.280><c> a</c><01:19:23.520><c> number</c>

01:19:23.830 --> 01:19:23.840 align:start position:0%
the random method it generates a number
 

01:19:23.840 --> 01:19:24.790 align:start position:0%
the random method it generates a number
between<01:19:24.320><c> zero</c>

01:19:24.790 --> 01:19:24.800 align:start position:0%
between zero
 

01:19:24.800 --> 01:19:27.750 align:start position:0%
between zero
to<01:19:25.040><c> one</c><01:19:25.840><c> so</c><01:19:26.000><c> when</c><01:19:26.159><c> we</c><01:19:26.400><c> cast</c><01:19:26.640><c> that</c><01:19:26.880><c> number</c><01:19:27.360><c> to</c><01:19:27.520><c> an</c>

01:19:27.750 --> 01:19:27.760 align:start position:0%
to one so when we cast that number to an
 

01:19:27.760 --> 01:19:29.590 align:start position:0%
to one so when we cast that number to an
integer<01:19:28.239><c> we'll</c><01:19:28.480><c> lose</c><01:19:28.719><c> the</c><01:19:28.880><c> fraction</c>

01:19:29.590 --> 01:19:29.600 align:start position:0%
integer we'll lose the fraction
 

01:19:29.600 --> 01:19:33.189 align:start position:0%
integer we'll lose the fraction
we<01:19:29.840><c> always</c><01:19:30.080><c> get</c><01:19:30.320><c> zero</c><01:19:30.960><c> and</c><01:19:31.199><c> zero</c><01:19:31.600><c> times</c><01:19:32.080><c> 100</c><01:19:32.719><c> is</c>

01:19:33.189 --> 01:19:33.199 align:start position:0%
we always get zero and zero times 100 is
 

01:19:33.199 --> 01:19:35.750 align:start position:0%
we always get zero and zero times 100 is
zero<01:19:34.080><c> to</c><01:19:34.239><c> solve</c><01:19:34.480><c> this</c><01:19:34.640><c> problem</c><01:19:35.280><c> we</c><01:19:35.440><c> need</c><01:19:35.600><c> to</c>

01:19:35.750 --> 01:19:35.760 align:start position:0%
zero to solve this problem we need to
 

01:19:35.760 --> 01:19:36.470 align:start position:0%
zero to solve this problem we need to
wrap<01:19:36.159><c> this</c>

01:19:36.470 --> 01:19:36.480 align:start position:0%
wrap this
 

01:19:36.480 --> 01:19:39.590 align:start position:0%
wrap this
entire<01:19:36.800><c> expression</c><01:19:37.360><c> in</c><01:19:37.440><c> parenthesis</c><01:19:38.960><c> so</c>

01:19:39.590 --> 01:19:39.600 align:start position:0%
entire expression in parenthesis so
 

01:19:39.600 --> 01:19:43.990 align:start position:0%
entire expression in parenthesis so
we<01:19:39.760><c> add</c><01:19:39.920><c> parenthesis</c><01:19:40.960><c> around</c><01:19:41.360><c> this</c><01:19:42.320><c> and</c><01:19:42.560><c> now</c>

01:19:43.990 --> 01:19:44.000 align:start position:0%
we add parenthesis around this and now
 

01:19:44.000 --> 01:19:46.390 align:start position:0%
we add parenthesis around this and now
when<01:19:44.159><c> we</c><01:19:44.320><c> run</c><01:19:44.480><c> this</c><01:19:44.719><c> we</c><01:19:44.880><c> get</c><01:19:45.840><c> an</c><01:19:46.000><c> integer</c>

01:19:46.390 --> 01:19:46.400 align:start position:0%
when we run this we get an integer
 

01:19:46.400 --> 01:19:47.350 align:start position:0%
when we run this we get an integer
between<01:19:46.800><c> 0</c>

01:19:47.350 --> 01:19:47.360 align:start position:0%
between 0
 

01:19:47.360 --> 01:19:54.310 align:start position:0%
between 0
and<01:19:48.840><c> 100.</c>

01:19:54.310 --> 01:19:54.320 align:start position:0%
 
 

01:19:54.320 --> 01:19:56.070 align:start position:0%
 
quite<01:19:54.560><c> often</c><01:19:54.800><c> when</c><01:19:54.960><c> we</c><01:19:55.040><c> work</c><01:19:55.280><c> with</c><01:19:55.440><c> numbers</c><01:19:55.920><c> we</c>

01:19:56.070 --> 01:19:56.080 align:start position:0%
quite often when we work with numbers we
 

01:19:56.080 --> 01:19:58.310 align:start position:0%
quite often when we work with numbers we
need<01:19:56.239><c> to</c><01:19:56.400><c> format</c><01:19:56.719><c> them</c><01:19:56.880><c> as</c><01:19:57.040><c> currency</c><01:19:57.520><c> values</c>

01:19:58.310 --> 01:19:58.320 align:start position:0%
need to format them as currency values
 

01:19:58.320 --> 01:19:59.830 align:start position:0%
need to format them as currency values
for<01:19:58.560><c> example</c><01:19:58.880><c> we</c><01:19:59.040><c> might</c><01:19:59.199><c> have</c><01:19:59.280><c> a</c><01:19:59.360><c> number</c><01:19:59.679><c> like</c>

01:19:59.830 --> 01:19:59.840 align:start position:0%
for example we might have a number like
 

01:19:59.840 --> 01:20:01.669 align:start position:0%
for example we might have a number like
this<01:20:00.400><c> imagine</c><01:20:00.800><c> this</c><01:20:00.960><c> is</c><01:20:01.040><c> the</c><01:20:01.199><c> price</c><01:20:01.440><c> of</c><01:20:01.600><c> a</c>

01:20:01.669 --> 01:20:01.679 align:start position:0%
this imagine this is the price of a
 

01:20:01.679 --> 01:20:02.550 align:start position:0%
this imagine this is the price of a
product

01:20:02.550 --> 01:20:02.560 align:start position:0%
product
 

01:20:02.560 --> 01:20:04.149 align:start position:0%
product
to<01:20:02.719><c> display</c><01:20:03.040><c> this</c><01:20:03.199><c> to</c><01:20:03.360><c> the</c><01:20:03.440><c> user</c><01:20:03.840><c> you</c><01:20:03.920><c> want</c><01:20:04.000><c> to</c>

01:20:04.149 --> 01:20:04.159 align:start position:0%
to display this to the user you want to
 

01:20:04.159 --> 01:20:05.669 align:start position:0%
to display this to the user you want to
add<01:20:04.320><c> a</c><01:20:04.400><c> dollar</c><01:20:04.719><c> sign</c><01:20:05.040><c> here</c>

01:20:05.669 --> 01:20:05.679 align:start position:0%
add a dollar sign here
 

01:20:05.679 --> 01:20:07.910 align:start position:0%
add a dollar sign here
and<01:20:05.920><c> separate</c><01:20:06.480><c> every</c><01:20:06.719><c> three</c><01:20:06.960><c> digits</c><01:20:07.600><c> with</c><01:20:07.840><c> a</c>

01:20:07.910 --> 01:20:07.920 align:start position:0%
and separate every three digits with a
 

01:20:07.920 --> 01:20:09.350 align:start position:0%
and separate every three digits with a
comma

01:20:09.350 --> 01:20:09.360 align:start position:0%
comma
 

01:20:09.360 --> 01:20:12.229 align:start position:0%
comma
or<01:20:09.600><c> you</c><01:20:09.679><c> might</c><01:20:09.840><c> have</c><01:20:10.000><c> a</c><01:20:10.080><c> number</c><01:20:10.400><c> like</c><01:20:10.560><c> 0.1</c><01:20:11.920><c> and</c>

01:20:12.229 --> 01:20:12.239 align:start position:0%
or you might have a number like 0.1 and
 

01:20:12.239 --> 01:20:13.590 align:start position:0%
or you might have a number like 0.1 and
we<01:20:12.400><c> want</c><01:20:12.560><c> to</c><01:20:12.639><c> represent</c><01:20:13.120><c> this</c><01:20:13.360><c> as</c><01:20:13.520><c> a</c>

01:20:13.590 --> 01:20:13.600 align:start position:0%
we want to represent this as a
 

01:20:13.600 --> 01:20:15.110 align:start position:0%
we want to represent this as a
percentage<01:20:14.320><c> value</c>

01:20:15.110 --> 01:20:15.120 align:start position:0%
percentage value
 

01:20:15.120 --> 01:20:18.709 align:start position:0%
percentage value
so<01:20:15.440><c> instead</c><01:20:15.679><c> of</c><01:20:15.840><c> 0.1</c><01:20:16.480><c> you</c><01:20:16.639><c> want</c><01:20:16.719><c> to</c><01:20:16.800><c> display</c><01:20:17.600><c> 10</c>

01:20:18.709 --> 01:20:18.719 align:start position:0%
so instead of 0.1 you want to display 10
 

01:20:18.719 --> 01:20:19.990 align:start position:0%
so instead of 0.1 you want to display 10
so<01:20:18.880><c> in</c><01:20:18.960><c> this</c><01:20:19.120><c> tutorial</c><01:20:19.520><c> i'm</c><01:20:19.679><c> going</c><01:20:19.760><c> to</c><01:20:19.840><c> show</c>

01:20:19.990 --> 01:20:20.000 align:start position:0%
so in this tutorial i'm going to show
 

01:20:20.000 --> 01:20:22.870 align:start position:0%
so in this tutorial i'm going to show
you<01:20:20.400><c> how</c><01:20:20.560><c> to</c><01:20:20.719><c> format</c><01:20:21.199><c> numbers</c><01:20:21.600><c> in</c><01:20:21.840><c> java</c>

01:20:22.870 --> 01:20:22.880 align:start position:0%
you how to format numbers in java
 

01:20:22.880 --> 01:20:25.510 align:start position:0%
you how to format numbers in java
we<01:20:23.120><c> have</c><01:20:23.199><c> this</c><01:20:23.360><c> class</c><01:20:24.000><c> number</c><01:20:24.800><c> format</c><01:20:25.280><c> that</c><01:20:25.440><c> is</c>

01:20:25.510 --> 01:20:25.520 align:start position:0%
we have this class number format that is
 

01:20:25.520 --> 01:20:26.310 align:start position:0%
we have this class number format that is
defined

01:20:26.310 --> 01:20:26.320 align:start position:0%
defined
 

01:20:26.320 --> 01:20:29.270 align:start position:0%
defined
in<01:20:26.639><c> java.txt</c><01:20:27.600><c> package</c><01:20:28.480><c> in</c><01:20:28.639><c> this</c><01:20:28.800><c> package</c><01:20:29.120><c> we</c>

01:20:29.270 --> 01:20:29.280 align:start position:0%
in java.txt package in this package we
 

01:20:29.280 --> 01:20:31.510 align:start position:0%
in java.txt package in this package we
have<01:20:29.360><c> a</c><01:20:29.440><c> lot</c><01:20:29.520><c> of</c><01:20:29.679><c> classes</c><01:20:30.080><c> for</c><01:20:30.320><c> handling</c><01:20:30.800><c> text</c>

01:20:31.510 --> 01:20:31.520 align:start position:0%
have a lot of classes for handling text
 

01:20:31.520 --> 01:20:34.390 align:start position:0%
have a lot of classes for handling text
dates<01:20:32.239><c> numbers</c><01:20:32.719><c> and</c><01:20:32.800><c> so</c><01:20:32.960><c> on</c><01:20:33.679><c> so</c><01:20:33.920><c> let's</c><01:20:34.159><c> press</c>

01:20:34.390 --> 01:20:34.400 align:start position:0%
dates numbers and so on so let's press
 

01:20:34.400 --> 01:20:35.270 align:start position:0%
dates numbers and so on so let's press
enter<01:20:34.719><c> here</c>

01:20:35.270 --> 01:20:35.280 align:start position:0%
enter here
 

01:20:35.280 --> 01:20:37.830 align:start position:0%
enter here
it's<01:20:35.520><c> important</c><01:20:35.920><c> on</c><01:20:36.000><c> the</c><01:20:36.080><c> top</c><01:20:36.480><c> beautiful</c><01:20:37.600><c> now</c>

01:20:37.830 --> 01:20:37.840 align:start position:0%
it's important on the top beautiful now
 

01:20:37.840 --> 01:20:39.030 align:start position:0%
it's important on the top beautiful now
we<01:20:37.920><c> want</c><01:20:38.000><c> to</c><01:20:38.080><c> declare</c><01:20:38.400><c> a</c><01:20:38.480><c> variable</c>

01:20:39.030 --> 01:20:39.040 align:start position:0%
we want to declare a variable
 

01:20:39.040 --> 01:20:40.950 align:start position:0%
we want to declare a variable
so<01:20:39.520><c> let's</c><01:20:39.679><c> give</c><01:20:39.840><c> this</c><01:20:40.000><c> variable</c><01:20:40.400><c> a</c><01:20:40.480><c> name</c>

01:20:40.950 --> 01:20:40.960 align:start position:0%
so let's give this variable a name
 

01:20:40.960 --> 01:20:42.070 align:start position:0%
so let's give this variable a name
currency

01:20:42.070 --> 01:20:42.080 align:start position:0%
currency
 

01:20:42.080 --> 01:20:44.950 align:start position:0%
currency
now<01:20:42.239><c> we</c><01:20:42.400><c> need</c><01:20:42.480><c> to</c><01:20:42.639><c> instantiate</c><01:20:43.199><c> this</c><01:20:43.440><c> so</c><01:20:44.159><c> new</c>

01:20:44.950 --> 01:20:44.960 align:start position:0%
now we need to instantiate this so new
 

01:20:44.960 --> 01:20:45.990 align:start position:0%
now we need to instantiate this so new
number

01:20:45.990 --> 01:20:46.000 align:start position:0%
number
 

01:20:46.000 --> 01:20:48.470 align:start position:0%
number
format<01:20:47.120><c> however</c><01:20:47.679><c> we</c><01:20:47.840><c> get</c><01:20:47.920><c> a</c><01:20:48.000><c> compilation</c>

01:20:48.470 --> 01:20:48.480 align:start position:0%
format however we get a compilation
 

01:20:48.480 --> 01:20:49.110 align:start position:0%
format however we get a compilation
error<01:20:48.719><c> here</c>

01:20:49.110 --> 01:20:49.120 align:start position:0%
error here
 

01:20:49.120 --> 01:20:51.350 align:start position:0%
error here
let's<01:20:49.280><c> take</c><01:20:49.440><c> a</c><01:20:49.520><c> look</c><01:20:50.400><c> number</c><01:20:50.719><c> format</c><01:20:51.120><c> is</c>

01:20:51.350 --> 01:20:51.360 align:start position:0%
let's take a look number format is
 

01:20:51.360 --> 01:20:54.229 align:start position:0%
let's take a look number format is
abstract<01:20:52.080><c> it</c><01:20:52.239><c> cannot</c><01:20:52.639><c> be</c><01:20:52.800><c> instantiated</c>

01:20:54.229 --> 01:20:54.239 align:start position:0%
abstract it cannot be instantiated
 

01:20:54.239 --> 01:20:55.990 align:start position:0%
abstract it cannot be instantiated
so<01:20:54.400><c> in</c><01:20:54.560><c> java</c><01:20:54.880><c> we</c><01:20:54.960><c> have</c><01:20:55.120><c> this</c><01:20:55.280><c> concept</c><01:20:55.760><c> of</c>

01:20:55.990 --> 01:20:56.000 align:start position:0%
so in java we have this concept of
 

01:20:56.000 --> 01:20:58.149 align:start position:0%
so in java we have this concept of
abstract<01:20:56.480><c> classes</c><01:20:57.199><c> so</c><01:20:57.360><c> some</c><01:20:57.600><c> classes</c><01:20:58.000><c> are</c>

01:20:58.149 --> 01:20:58.159 align:start position:0%
abstract classes so some classes are
 

01:20:58.159 --> 01:20:59.910 align:start position:0%
abstract classes so some classes are
abstract<01:20:58.719><c> and</c><01:20:58.960><c> they're</c><01:20:59.199><c> basically</c><01:20:59.600><c> like</c><01:20:59.760><c> a</c>

01:20:59.910 --> 01:20:59.920 align:start position:0%
abstract and they're basically like a
 

01:20:59.920 --> 01:21:01.110 align:start position:0%
abstract and they're basically like a
half-baked<01:21:00.560><c> cake</c>

01:21:01.110 --> 01:21:01.120 align:start position:0%
half-baked cake
 

01:21:01.120 --> 01:21:02.950 align:start position:0%
half-baked cake
we<01:21:01.199><c> cannot</c><01:21:01.520><c> use</c><01:21:01.679><c> the</c><01:21:01.840><c> new</c><01:21:02.080><c> operator</c><01:21:02.560><c> to</c><01:21:02.719><c> create</c>

01:21:02.950 --> 01:21:02.960 align:start position:0%
we cannot use the new operator to create
 

01:21:02.960 --> 01:21:04.310 align:start position:0%
we cannot use the new operator to create
an<01:21:03.199><c> instance</c><01:21:03.679><c> of</c><01:21:03.760><c> them</c>

01:21:04.310 --> 01:21:04.320 align:start position:0%
an instance of them
 

01:21:04.320 --> 01:21:05.590 align:start position:0%
an instance of them
we're<01:21:04.480><c> going</c><01:21:04.560><c> to</c><01:21:04.719><c> talk</c><01:21:04.880><c> about</c><01:21:05.120><c> abstract</c>

01:21:05.590 --> 01:21:05.600 align:start position:0%
we're going to talk about abstract
 

01:21:05.600 --> 01:21:07.510 align:start position:0%
we're going to talk about abstract
classes<01:21:06.000><c> and</c><01:21:06.159><c> why</c><01:21:06.400><c> they</c><01:21:06.560><c> exist</c><01:21:06.960><c> later</c><01:21:07.280><c> in</c><01:21:07.360><c> the</c>

01:21:07.510 --> 01:21:07.520 align:start position:0%
classes and why they exist later in the
 

01:21:07.520 --> 01:21:08.070 align:start position:0%
classes and why they exist later in the
course

01:21:08.070 --> 01:21:08.080 align:start position:0%
course
 

01:21:08.080 --> 01:21:09.830 align:start position:0%
course
for<01:21:08.239><c> now</c><01:21:08.480><c> remember</c><01:21:08.800><c> that</c><01:21:08.960><c> we</c><01:21:09.120><c> cannot</c><01:21:09.520><c> create</c>

01:21:09.830 --> 01:21:09.840 align:start position:0%
for now remember that we cannot create
 

01:21:09.840 --> 01:21:11.750 align:start position:0%
for now remember that we cannot create
an<01:21:10.000><c> instance</c><01:21:10.480><c> of</c><01:21:10.560><c> the</c><01:21:10.719><c> number</c><01:21:11.040><c> format</c><01:21:11.440><c> class</c>

01:21:11.750 --> 01:21:11.760 align:start position:0%
an instance of the number format class
 

01:21:11.760 --> 01:21:12.390 align:start position:0%
an instance of the number format class
because

01:21:12.390 --> 01:21:12.400 align:start position:0%
because
 

01:21:12.400 --> 01:21:15.430 align:start position:0%
because
it's<01:21:12.840><c> abstract</c><01:21:13.920><c> so</c><01:21:14.480><c> there</c><01:21:14.719><c> is</c><01:21:14.880><c> another</c><01:21:15.120><c> way</c>

01:21:15.430 --> 01:21:15.440 align:start position:0%
it's abstract so there is another way
 

01:21:15.440 --> 01:21:16.950 align:start position:0%
it's abstract so there is another way
let<01:21:15.600><c> me</c><01:21:15.760><c> show</c><01:21:15.920><c> you</c>

01:21:16.950 --> 01:21:16.960 align:start position:0%
let me show you
 

01:21:16.960 --> 01:21:19.750 align:start position:0%
let me show you
this<01:21:17.199><c> class</c><01:21:17.600><c> has</c><01:21:18.159><c> a</c><01:21:18.320><c> bunch</c><01:21:18.560><c> of</c><01:21:18.800><c> methods</c><01:21:19.520><c> that</c>

01:21:19.750 --> 01:21:19.760 align:start position:0%
this class has a bunch of methods that
 

01:21:19.760 --> 01:21:20.310 align:start position:0%
this class has a bunch of methods that
start

01:21:20.310 --> 01:21:20.320 align:start position:0%
start
 

01:21:20.320 --> 01:21:23.030 align:start position:0%
start
with<01:21:20.639><c> get</c><01:21:21.440><c> so</c><01:21:21.679><c> we</c><01:21:21.840><c> have</c><01:21:22.320><c> get</c><01:21:22.560><c> currency</c>

01:21:23.030 --> 01:21:23.040 align:start position:0%
with get so we have get currency
 

01:21:23.040 --> 01:21:23.910 align:start position:0%
with get so we have get currency
instance

01:21:23.910 --> 01:21:23.920 align:start position:0%
instance
 

01:21:23.920 --> 01:21:25.590 align:start position:0%
instance
and<01:21:24.080><c> when</c><01:21:24.239><c> we</c><01:21:24.480><c> call</c><01:21:24.639><c> this</c><01:21:24.880><c> method</c><01:21:25.199><c> this</c><01:21:25.360><c> will</c>

01:21:25.590 --> 01:21:25.600 align:start position:0%
and when we call this method this will
 

01:21:25.600 --> 01:21:27.669 align:start position:0%
and when we call this method this will
create<01:21:26.000><c> an</c><01:21:26.320><c> instance</c><01:21:26.719><c> of</c><01:21:26.880><c> the</c><01:21:26.960><c> number</c><01:21:27.280><c> format</c>

01:21:27.669 --> 01:21:27.679 align:start position:0%
create an instance of the number format
 

01:21:27.679 --> 01:21:28.229 align:start position:0%
create an instance of the number format
class

01:21:28.229 --> 01:21:28.239 align:start position:0%
class
 

01:21:28.239 --> 01:21:30.550 align:start position:0%
class
and<01:21:28.719><c> return</c><01:21:29.120><c> it</c><01:21:29.679><c> so</c><01:21:29.840><c> instead</c><01:21:30.080><c> of</c><01:21:30.159><c> using</c><01:21:30.400><c> the</c>

01:21:30.550 --> 01:21:30.560 align:start position:0%
and return it so instead of using the
 

01:21:30.560 --> 01:21:32.149 align:start position:0%
and return it so instead of using the
new<01:21:30.880><c> operator</c><01:21:31.360><c> we're</c><01:21:31.520><c> going</c><01:21:31.600><c> to</c><01:21:31.679><c> use</c>

01:21:32.149 --> 01:21:32.159 align:start position:0%
new operator we're going to use
 

01:21:32.159 --> 01:21:34.550 align:start position:0%
new operator we're going to use
this<01:21:32.400><c> method</c><01:21:32.719><c> here</c><01:21:33.360><c> this</c><01:21:33.600><c> is</c><01:21:33.679><c> what</c><01:21:33.840><c> we</c><01:21:34.000><c> call</c><01:21:34.320><c> a</c>

01:21:34.550 --> 01:21:34.560 align:start position:0%
this method here this is what we call a
 

01:21:34.560 --> 01:21:35.590 align:start position:0%
this method here this is what we call a
factory<01:21:35.040><c> method</c>

01:21:35.590 --> 01:21:35.600 align:start position:0%
factory method
 

01:21:35.600 --> 01:21:37.669 align:start position:0%
factory method
because<01:21:35.920><c> it's</c><01:21:36.000><c> like</c><01:21:36.239><c> a</c><01:21:36.320><c> factory</c><01:21:36.960><c> it</c><01:21:37.120><c> creates</c>

01:21:37.669 --> 01:21:37.679 align:start position:0%
because it's like a factory it creates
 

01:21:37.679 --> 01:21:38.950 align:start position:0%
because it's like a factory it creates
new<01:21:38.000><c> objects</c>

01:21:38.950 --> 01:21:38.960 align:start position:0%
new objects
 

01:21:38.960 --> 01:21:40.310 align:start position:0%
new objects
now<01:21:39.120><c> look</c><01:21:39.280><c> at</c><01:21:39.360><c> the</c><01:21:39.440><c> return</c><01:21:39.840><c> type</c><01:21:40.000><c> of</c><01:21:40.159><c> this</c>

01:21:40.310 --> 01:21:40.320 align:start position:0%
now look at the return type of this
 

01:21:40.320 --> 01:21:41.990 align:start position:0%
now look at the return type of this
method<01:21:40.880><c> it's</c><01:21:41.120><c> a</c><01:21:41.199><c> number</c><01:21:41.520><c> format</c>

01:21:41.990 --> 01:21:42.000 align:start position:0%
method it's a number format
 

01:21:42.000 --> 01:21:45.669 align:start position:0%
method it's a number format
object<01:21:42.639><c> okay</c><01:21:43.440><c> so</c><01:21:43.600><c> we</c><01:21:43.760><c> call</c><01:21:43.920><c> this</c><01:21:44.080><c> method</c>

01:21:45.669 --> 01:21:45.679 align:start position:0%
object okay so we call this method
 

01:21:45.679 --> 01:21:48.070 align:start position:0%
object okay so we call this method
now<01:21:46.080><c> we</c><01:21:46.239><c> get</c><01:21:46.400><c> the</c><01:21:46.480><c> return</c><01:21:46.800><c> value</c><01:21:47.199><c> and</c><01:21:47.360><c> store</c><01:21:47.679><c> it</c>

01:21:48.070 --> 01:21:48.080 align:start position:0%
now we get the return value and store it
 

01:21:48.080 --> 01:21:49.189 align:start position:0%
now we get the return value and store it
in<01:21:48.159><c> a</c><01:21:48.239><c> variable</c>

01:21:49.189 --> 01:21:49.199 align:start position:0%
in a variable
 

01:21:49.199 --> 01:21:52.229 align:start position:0%
in a variable
of<01:21:49.440><c> type</c><01:21:50.080><c> number</c><01:21:50.480><c> format</c><01:21:51.679><c> called</c>

01:21:52.229 --> 01:21:52.239 align:start position:0%
of type number format called
 

01:21:52.239 --> 01:21:55.430 align:start position:0%
of type number format called
currency<01:21:53.360><c> okay</c><01:21:54.239><c> let</c><01:21:54.400><c> me</c><01:21:54.560><c> temporarily</c><01:21:55.199><c> zoom</c>

01:21:55.430 --> 01:21:55.440 align:start position:0%
currency okay let me temporarily zoom
 

01:21:55.440 --> 01:21:56.950 align:start position:0%
currency okay let me temporarily zoom
out<01:21:55.600><c> so</c><01:21:55.760><c> you</c><01:21:55.840><c> can</c><01:21:55.920><c> see</c><01:21:56.159><c> all</c><01:21:56.320><c> the</c><01:21:56.480><c> code</c>

01:21:56.950 --> 01:21:56.960 align:start position:0%
out so you can see all the code
 

01:21:56.960 --> 01:21:59.110 align:start position:0%
out so you can see all the code
there<01:21:57.199><c> you</c><01:21:57.280><c> go</c><01:21:58.080><c> so</c><01:21:58.320><c> on</c><01:21:58.400><c> the</c><01:21:58.560><c> right</c><01:21:58.800><c> side</c><01:21:58.960><c> of</c><01:21:59.040><c> the</c>

01:21:59.110 --> 01:21:59.120 align:start position:0%
there you go so on the right side of the
 

01:21:59.120 --> 01:22:00.950 align:start position:0%
there you go so on the right side of the
assignment<01:21:59.600><c> operator</c><01:22:00.000><c> we're</c><01:22:00.239><c> calling</c>

01:22:00.950 --> 01:22:00.960 align:start position:0%
assignment operator we're calling
 

01:22:00.960 --> 01:22:03.270 align:start position:0%
assignment operator we're calling
the<01:22:01.120><c> get</c><01:22:01.360><c> currency</c><01:22:01.840><c> instance</c><01:22:02.320><c> method</c><01:22:02.960><c> we</c><01:22:03.120><c> get</c>

01:22:03.270 --> 01:22:03.280 align:start position:0%
the get currency instance method we get
 

01:22:03.280 --> 01:22:04.870 align:start position:0%
the get currency instance method we get
the<01:22:03.440><c> result</c><01:22:03.760><c> which</c><01:22:04.000><c> is</c><01:22:04.080><c> a</c><01:22:04.159><c> number</c><01:22:04.400><c> format</c>

01:22:04.870 --> 01:22:04.880 align:start position:0%
the result which is a number format
 

01:22:04.880 --> 01:22:05.750 align:start position:0%
the result which is a number format
object<01:22:05.280><c> and</c>

01:22:05.750 --> 01:22:05.760 align:start position:0%
object and
 

01:22:05.760 --> 01:22:09.030 align:start position:0%
object and
store<01:22:06.080><c> it</c><01:22:06.400><c> in</c><01:22:06.480><c> this</c><01:22:06.719><c> variable</c><01:22:07.360><c> okay</c><01:22:08.639><c> now</c>

01:22:09.030 --> 01:22:09.040 align:start position:0%
store it in this variable okay now
 

01:22:09.040 --> 01:22:11.590 align:start position:0%
store it in this variable okay now
i'm<01:22:09.199><c> going</c><01:22:09.280><c> to</c><01:22:09.440><c> zoom</c><01:22:09.679><c> in</c><01:22:10.800><c> so</c><01:22:11.120><c> you</c><01:22:11.199><c> can</c><01:22:11.360><c> see</c>

01:22:11.590 --> 01:22:11.600 align:start position:0%
i'm going to zoom in so you can see
 

01:22:11.600 --> 01:22:13.350 align:start position:0%
i'm going to zoom in so you can see
clearly

01:22:13.350 --> 01:22:13.360 align:start position:0%
clearly
 

01:22:13.360 --> 01:22:17.270 align:start position:0%
clearly
all<01:22:13.520><c> right</c><01:22:13.679><c> that's</c><01:22:13.920><c> better</c><01:22:15.760><c> now</c><01:22:15.920><c> this</c><01:22:16.320><c> object</c>

01:22:17.270 --> 01:22:17.280 align:start position:0%
all right that's better now this object
 

01:22:17.280 --> 01:22:20.709 align:start position:0%
all right that's better now this object
has<01:22:18.320><c> a</c><01:22:18.560><c> method</c><01:22:18.880><c> for</c><01:22:19.199><c> formatting</c><01:22:19.840><c> values</c>

01:22:20.709 --> 01:22:20.719 align:start position:0%
has a method for formatting values
 

01:22:20.719 --> 01:22:22.229 align:start position:0%
has a method for formatting values
once<01:22:20.960><c> again</c><01:22:21.199><c> you</c><01:22:21.280><c> can</c><01:22:21.360><c> see</c><01:22:21.520><c> this</c><01:22:21.679><c> method</c><01:22:22.000><c> is</c>

01:22:22.229 --> 01:22:22.239 align:start position:0%
once again you can see this method is
 

01:22:22.239 --> 01:22:23.830 align:start position:0%
once again you can see this method is
overloaded<01:22:22.880><c> we</c><01:22:23.040><c> have</c><01:22:23.440><c> multiple</c>

01:22:23.830 --> 01:22:23.840 align:start position:0%
overloaded we have multiple
 

01:22:23.840 --> 01:22:24.950 align:start position:0%
overloaded we have multiple
implementations

01:22:24.950 --> 01:22:24.960 align:start position:0%
implementations
 

01:22:24.960 --> 01:22:26.709 align:start position:0%
implementations
we<01:22:25.120><c> can</c><01:22:25.199><c> give</c><01:22:25.360><c> it</c><01:22:25.520><c> a</c><01:22:25.600><c> long</c><01:22:25.920><c> or</c><01:22:26.080><c> a</c><01:22:26.159><c> double</c><01:22:26.560><c> or</c>

01:22:26.709 --> 01:22:26.719 align:start position:0%
we can give it a long or a double or
 

01:22:26.719 --> 01:22:28.149 align:start position:0%
we can give it a long or a double or
whatever<01:22:27.679><c> so</c>

01:22:28.149 --> 01:22:28.159 align:start position:0%
whatever so
 

01:22:28.159 --> 01:22:30.390 align:start position:0%
whatever so
i'm<01:22:28.320><c> going</c><01:22:28.400><c> to</c><01:22:28.480><c> call</c><01:22:28.719><c> this</c><01:22:28.880><c> method</c><01:22:29.760><c> and</c><01:22:30.000><c> pass</c><01:22:30.239><c> a</c>

01:22:30.390 --> 01:22:30.400 align:start position:0%
i'm going to call this method and pass a
 

01:22:30.400 --> 01:22:31.430 align:start position:0%
i'm going to call this method and pass a
value<01:22:30.800><c> like</c>

01:22:31.430 --> 01:22:31.440 align:start position:0%
value like
 

01:22:31.440 --> 01:22:34.709 align:start position:0%
value like
one<01:22:31.679><c> two</c><01:22:31.840><c> three</c><01:22:32.080><c> four</c><01:22:32.560><c> five</c><01:22:32.880><c> six</c><01:22:33.520><c> seven</c><01:22:34.080><c> point</c>

01:22:34.709 --> 01:22:34.719 align:start position:0%
one two three four five six seven point
 

01:22:34.719 --> 01:22:37.590 align:start position:0%
one two three four five six seven point
eight<01:22:35.440><c> nine</c><01:22:35.920><c> one</c><01:22:36.719><c> so</c><01:22:36.880><c> we</c><01:22:36.960><c> have</c><01:22:37.120><c> three</c><01:22:37.280><c> digits</c>

01:22:37.590 --> 01:22:37.600 align:start position:0%
eight nine one so we have three digits
 

01:22:37.600 --> 01:22:39.110 align:start position:0%
eight nine one so we have three digits
after<01:22:37.920><c> decimal</c><01:22:38.480><c> and</c>

01:22:39.110 --> 01:22:39.120 align:start position:0%
after decimal and
 

01:22:39.120 --> 01:22:41.510 align:start position:0%
after decimal and
a<01:22:39.199><c> few</c><01:22:39.360><c> other</c><01:22:39.520><c> digits</c><01:22:39.920><c> here</c><01:22:40.800><c> now</c><01:22:41.040><c> this</c><01:22:41.199><c> method</c>

01:22:41.510 --> 01:22:41.520 align:start position:0%
a few other digits here now this method
 

01:22:41.520 --> 01:22:42.149 align:start position:0%
a few other digits here now this method
will<01:22:41.679><c> return</c>

01:22:42.149 --> 01:22:42.159 align:start position:0%
will return
 

01:22:42.159 --> 01:22:44.390 align:start position:0%
will return
a<01:22:42.320><c> string</c><01:22:42.719><c> representation</c><01:22:43.440><c> of</c><01:22:43.520><c> this</c><01:22:43.679><c> number</c>

01:22:44.390 --> 01:22:44.400 align:start position:0%
a string representation of this number
 

01:22:44.400 --> 01:22:46.390 align:start position:0%
a string representation of this number
formatted<01:22:44.960><c> as</c><01:22:45.120><c> a</c><01:22:45.280><c> currency</c>

01:22:46.390 --> 01:22:46.400 align:start position:0%
formatted as a currency
 

01:22:46.400 --> 01:22:49.430 align:start position:0%
formatted as a currency
so<01:22:47.280><c> let's</c><01:22:47.520><c> get</c><01:22:47.679><c> that</c><01:22:47.920><c> stored</c><01:22:48.880><c> in</c><01:22:49.040><c> a</c><01:22:49.120><c> string</c>

01:22:49.430 --> 01:22:49.440 align:start position:0%
so let's get that stored in a string
 

01:22:49.440 --> 01:22:50.390 align:start position:0%
so let's get that stored in a string
variable<01:22:49.920><c> like</c>

01:22:50.390 --> 01:22:50.400 align:start position:0%
variable like
 

01:22:50.400 --> 01:22:54.149 align:start position:0%
variable like
result<01:22:51.679><c> and</c><01:22:51.920><c> then</c><01:22:53.360><c> we're</c><01:22:53.520><c> going</c><01:22:53.679><c> to</c><01:22:53.760><c> print</c>

01:22:54.149 --> 01:22:54.159 align:start position:0%
result and then we're going to print
 

01:22:54.159 --> 01:22:56.310 align:start position:0%
result and then we're going to print
result<01:22:54.719><c> on</c><01:22:54.880><c> the</c><01:22:54.960><c> terminal</c>

01:22:56.310 --> 01:22:56.320 align:start position:0%
result on the terminal
 

01:22:56.320 --> 01:22:59.830 align:start position:0%
result on the terminal
see<01:22:56.480><c> what</c><01:22:56.639><c> we</c><01:22:56.800><c> get</c><01:22:59.040><c> so</c>

01:22:59.830 --> 01:22:59.840 align:start position:0%
see what we get so
 

01:22:59.840 --> 01:23:01.669 align:start position:0%
see what we get so
we<01:23:00.000><c> get</c><01:23:00.080><c> this</c><01:23:00.320><c> dollar</c><01:23:00.639><c> sign</c><01:23:01.280><c> every</c><01:23:01.520><c> three</c>

01:23:01.669 --> 01:23:01.679 align:start position:0%
we get this dollar sign every three
 

01:23:01.679 --> 01:23:03.990 align:start position:0%
we get this dollar sign every three
digits<01:23:02.080><c> are</c><01:23:02.159><c> separated</c><01:23:02.719><c> using</c><01:23:02.960><c> a</c><01:23:03.120><c> comma</c>

01:23:03.990 --> 01:23:04.000 align:start position:0%
digits are separated using a comma
 

01:23:04.000 --> 01:23:06.070 align:start position:0%
digits are separated using a comma
and<01:23:04.239><c> we</c><01:23:04.480><c> only</c><01:23:04.719><c> have</c><01:23:05.040><c> two</c><01:23:05.280><c> digits</c><01:23:05.679><c> after</c>

01:23:06.070 --> 01:23:06.080 align:start position:0%
and we only have two digits after
 

01:23:06.080 --> 01:23:07.270 align:start position:0%
and we only have two digits after
decimal<01:23:06.560><c> point</c>

01:23:07.270 --> 01:23:07.280 align:start position:0%
decimal point
 

01:23:07.280 --> 01:23:08.950 align:start position:0%
decimal point
so<01:23:07.440><c> this</c><01:23:07.679><c> class</c><01:23:08.000><c> is</c><01:23:08.159><c> very</c><01:23:08.480><c> handy</c><01:23:08.800><c> in</c>

01:23:08.950 --> 01:23:08.960 align:start position:0%
so this class is very handy in
 

01:23:08.960 --> 01:23:11.110 align:start position:0%
so this class is very handy in
formatting<01:23:09.440><c> numbers</c><01:23:09.840><c> as</c><01:23:10.000><c> currencies</c>

01:23:11.110 --> 01:23:11.120 align:start position:0%
formatting numbers as currencies
 

01:23:11.120 --> 01:23:12.950 align:start position:0%
formatting numbers as currencies
we<01:23:11.280><c> have</c><01:23:11.600><c> another</c><01:23:11.920><c> method</c><01:23:12.239><c> for</c><01:23:12.400><c> formatting</c><01:23:12.880><c> a</c>

01:23:12.950 --> 01:23:12.960 align:start position:0%
we have another method for formatting a
 

01:23:12.960 --> 01:23:15.430 align:start position:0%
we have another method for formatting a
number<01:23:13.360><c> as</c><01:23:13.520><c> a</c><01:23:13.600><c> percent</c>

01:23:15.430 --> 01:23:15.440 align:start position:0%
number as a percent
 

01:23:15.440 --> 01:23:19.030 align:start position:0%
number as a percent
and<01:23:15.679><c> that</c><01:23:15.920><c> is</c><01:23:16.159><c> get</c><01:23:16.880><c> percent</c><01:23:17.840><c> instance</c>

01:23:19.030 --> 01:23:19.040 align:start position:0%
and that is get percent instance
 

01:23:19.040 --> 01:23:21.750 align:start position:0%
and that is get percent instance
right<01:23:19.920><c> now</c><01:23:20.159><c> it</c><01:23:20.320><c> returns</c><01:23:20.719><c> an</c><01:23:21.040><c> instance</c><01:23:21.520><c> of</c><01:23:21.600><c> the</c>

01:23:21.750 --> 01:23:21.760 align:start position:0%
right now it returns an instance of the
 

01:23:21.760 --> 01:23:23.189 align:start position:0%
right now it returns an instance of the
number<01:23:22.080><c> format</c><01:23:22.480><c> class</c>

01:23:23.189 --> 01:23:23.199 align:start position:0%
number format class
 

01:23:23.199 --> 01:23:25.270 align:start position:0%
number format class
specialized<01:23:23.920><c> for</c><01:23:24.080><c> formatting</c><01:23:24.560><c> numbers</c><01:23:25.040><c> as</c><01:23:25.199><c> a</c>

01:23:25.270 --> 01:23:25.280 align:start position:0%
specialized for formatting numbers as a
 

01:23:25.280 --> 01:23:27.189 align:start position:0%
specialized for formatting numbers as a
percent<01:23:26.159><c> so</c><01:23:26.320><c> we</c><01:23:26.480><c> need</c><01:23:26.639><c> to</c><01:23:26.719><c> rename</c><01:23:27.040><c> this</c>

01:23:27.189 --> 01:23:27.199 align:start position:0%
percent so we need to rename this
 

01:23:27.199 --> 01:23:27.750 align:start position:0%
percent so we need to rename this
variable

01:23:27.750 --> 01:23:27.760 align:start position:0%
variable
 

01:23:27.760 --> 01:23:29.830 align:start position:0%
variable
from<01:23:28.000><c> currency</c><01:23:28.480><c> to</c><01:23:28.639><c> percent</c><01:23:29.440><c> now</c><01:23:29.600><c> we</c><01:23:29.679><c> don't</c>

01:23:29.830 --> 01:23:29.840 align:start position:0%
from currency to percent now we don't
 

01:23:29.840 --> 01:23:31.350 align:start position:0%
from currency to percent now we don't
want<01:23:29.920><c> to</c><01:23:30.080><c> manually</c><01:23:30.560><c> change</c><01:23:30.800><c> this</c><01:23:31.120><c> because</c>

01:23:31.350 --> 01:23:31.360 align:start position:0%
want to manually change this because
 

01:23:31.360 --> 01:23:32.950 align:start position:0%
want to manually change this because
there<01:23:31.520><c> are</c><01:23:31.600><c> multiple</c><01:23:32.080><c> references</c><01:23:32.639><c> to</c><01:23:32.800><c> this</c>

01:23:32.950 --> 01:23:32.960 align:start position:0%
there are multiple references to this
 

01:23:32.960 --> 01:23:33.510 align:start position:0%
there are multiple references to this
variable

01:23:33.510 --> 01:23:33.520 align:start position:0%
variable
 

01:23:33.520 --> 01:23:35.590 align:start position:0%
variable
this<01:23:33.840><c> other</c><01:23:34.000><c> reference</c><01:23:34.400><c> was</c><01:23:34.560><c> not</c><01:23:34.800><c> updated</c><01:23:35.440><c> so</c>

01:23:35.590 --> 01:23:35.600 align:start position:0%
this other reference was not updated so
 

01:23:35.600 --> 01:23:37.270 align:start position:0%
this other reference was not updated so
let<01:23:35.760><c> me</c><01:23:35.840><c> show</c><01:23:36.000><c> you</c><01:23:36.080><c> the</c><01:23:36.239><c> proper</c><01:23:36.639><c> way</c><01:23:36.800><c> to</c><01:23:36.880><c> rename</c>

01:23:37.270 --> 01:23:37.280 align:start position:0%
let me show you the proper way to rename
 

01:23:37.280 --> 01:23:37.990 align:start position:0%
let me show you the proper way to rename
objects<01:23:37.760><c> in</c>

01:23:37.990 --> 01:23:38.000 align:start position:0%
objects in
 

01:23:38.000 --> 01:23:41.189 align:start position:0%
objects in
intellij<01:23:39.120><c> if</c><01:23:39.199><c> you</c><01:23:39.360><c> right</c><01:23:39.600><c> click</c><01:23:39.840><c> here</c><01:23:40.800><c> you</c><01:23:40.960><c> can</c>

01:23:41.189 --> 01:23:41.199 align:start position:0%
intellij if you right click here you can
 

01:23:41.199 --> 01:23:41.669 align:start position:0%
intellij if you right click here you can
see

01:23:41.669 --> 01:23:41.679 align:start position:0%
see
 

01:23:41.679 --> 01:23:43.910 align:start position:0%
see
this<01:23:41.920><c> refactor</c><01:23:42.560><c> menu</c><01:23:43.360><c> and</c><01:23:43.440><c> here</c><01:23:43.679><c> we</c><01:23:43.760><c> have</c>

01:23:43.910 --> 01:23:43.920 align:start position:0%
this refactor menu and here we have
 

01:23:43.920 --> 01:23:44.709 align:start position:0%
this refactor menu and here we have
rename

01:23:44.709 --> 01:23:44.719 align:start position:0%
rename
 

01:23:44.719 --> 01:23:46.310 align:start position:0%
rename
now<01:23:44.880><c> look</c><01:23:45.040><c> at</c><01:23:45.120><c> the</c><01:23:45.360><c> shortcut</c><01:23:45.840><c> on</c><01:23:45.920><c> the</c><01:23:46.080><c> right</c>

01:23:46.310 --> 01:23:46.320 align:start position:0%
now look at the shortcut on the right
 

01:23:46.320 --> 01:23:48.070 align:start position:0%
now look at the shortcut on the right
side<01:23:46.639><c> unfortunately</c><01:23:47.120><c> it's</c><01:23:47.280><c> not</c><01:23:47.600><c> visible</c>

01:23:48.070 --> 01:23:48.080 align:start position:0%
side unfortunately it's not visible
 

01:23:48.080 --> 01:23:50.470 align:start position:0%
side unfortunately it's not visible
in<01:23:48.159><c> my</c><01:23:48.320><c> recording</c><01:23:48.719><c> window</c><01:23:49.440><c> but</c><01:23:49.600><c> on</c><01:23:49.840><c> mac</c><01:23:50.159><c> is</c>

01:23:50.470 --> 01:23:50.480 align:start position:0%
in my recording window but on mac is
 

01:23:50.480 --> 01:23:51.270 align:start position:0%
in my recording window but on mac is
shift

01:23:51.270 --> 01:23:51.280 align:start position:0%
shift
 

01:23:51.280 --> 01:23:53.910 align:start position:0%
shift
and<01:23:51.520><c> f6</c><01:23:52.320><c> i</c><01:23:52.639><c> always</c><01:23:52.960><c> use</c><01:23:53.199><c> shortcuts</c><01:23:53.679><c> because</c>

01:23:53.910 --> 01:23:53.920 align:start position:0%
and f6 i always use shortcuts because
 

01:23:53.920 --> 01:23:55.110 align:start position:0%
and f6 i always use shortcuts because
they're<01:23:54.159><c> faster</c>

01:23:55.110 --> 01:23:55.120 align:start position:0%
they're faster
 

01:23:55.120 --> 01:23:58.790 align:start position:0%
they're faster
so<01:23:55.760><c> let's</c><01:23:56.000><c> press</c><01:23:56.639><c> shift</c><01:23:57.280><c> and</c><01:23:57.520><c> f6</c>

01:23:58.790 --> 01:23:58.800 align:start position:0%
so let's press shift and f6
 

01:23:58.800 --> 01:24:01.030 align:start position:0%
so let's press shift and f6
now<01:23:59.040><c> we</c><01:23:59.120><c> get</c><01:23:59.280><c> this</c><01:23:59.440><c> red</c><01:23:59.679><c> box</c><01:24:00.239><c> and</c><01:24:00.560><c> below</c><01:24:00.880><c> this</c>

01:24:01.030 --> 01:24:01.040 align:start position:0%
now we get this red box and below this
 

01:24:01.040 --> 01:24:02.870 align:start position:0%
now we get this red box and below this
we<01:24:01.199><c> can</c><01:24:01.280><c> see</c><01:24:01.440><c> a</c><01:24:01.520><c> few</c><01:24:01.760><c> suggestions</c><01:24:02.400><c> for</c>

01:24:02.870 --> 01:24:02.880 align:start position:0%
we can see a few suggestions for
 

01:24:02.880 --> 01:24:04.870 align:start position:0%
we can see a few suggestions for
a<01:24:03.040><c> better</c><01:24:03.360><c> name</c><01:24:03.920><c> we</c><01:24:04.000><c> can</c><01:24:04.159><c> choose</c><01:24:04.400><c> one</c><01:24:04.560><c> of</c><01:24:04.639><c> these</c>

01:24:04.870 --> 01:24:04.880 align:start position:0%
a better name we can choose one of these
 

01:24:04.880 --> 01:24:06.629 align:start position:0%
a better name we can choose one of these
or<01:24:05.360><c> pick</c><01:24:05.600><c> our</c><01:24:05.840><c> own</c><01:24:06.000><c> name</c>

01:24:06.629 --> 01:24:06.639 align:start position:0%
or pick our own name
 

01:24:06.639 --> 01:24:10.390 align:start position:0%
or pick our own name
i'm<01:24:06.800><c> going</c><01:24:06.880><c> to</c><01:24:07.040><c> change</c><01:24:07.360><c> this</c><01:24:07.679><c> to</c><01:24:09.520><c> percent</c>

01:24:10.390 --> 01:24:10.400 align:start position:0%
i'm going to change this to percent
 

01:24:10.400 --> 01:24:12.229 align:start position:0%
i'm going to change this to percent
and<01:24:10.560><c> note</c><01:24:10.800><c> that</c><01:24:11.040><c> as</c><01:24:11.199><c> i'm</c><01:24:11.360><c> typing</c><01:24:11.760><c> this</c><01:24:12.080><c> the</c>

01:24:12.229 --> 01:24:12.239 align:start position:0%
and note that as i'm typing this the
 

01:24:12.239 --> 01:24:13.590 align:start position:0%
and note that as i'm typing this the
other<01:24:12.480><c> reference</c><01:24:12.880><c> gets</c><01:24:13.120><c> updated</c>

01:24:13.590 --> 01:24:13.600 align:start position:0%
other reference gets updated
 

01:24:13.600 --> 01:24:14.470 align:start position:0%
other reference gets updated
automatically

01:24:14.470 --> 01:24:14.480 align:start position:0%
automatically
 

01:24:14.480 --> 01:24:16.629 align:start position:0%
automatically
so<01:24:14.639><c> this</c><01:24:14.800><c> is</c><01:24:14.960><c> very</c><01:24:15.120><c> helpful</c><01:24:15.840><c> now</c><01:24:16.080><c> let's</c><01:24:16.239><c> press</c>

01:24:16.629 --> 01:24:16.639 align:start position:0%
so this is very helpful now let's press
 

01:24:16.639 --> 01:24:17.750 align:start position:0%
so this is very helpful now let's press
enter

01:24:17.750 --> 01:24:17.760 align:start position:0%
enter
 

01:24:17.760 --> 01:24:20.950 align:start position:0%
enter
okay<01:24:18.159><c> we're</c><01:24:18.400><c> done</c><01:24:18.639><c> with</c><01:24:18.880><c> renaming</c><01:24:20.320><c> now</c><01:24:20.719><c> let's</c>

01:24:20.950 --> 01:24:20.960 align:start position:0%
okay we're done with renaming now let's
 

01:24:20.960 --> 01:24:22.950 align:start position:0%
okay we're done with renaming now let's
pass<01:24:21.280><c> a</c><01:24:21.440><c> different</c><01:24:21.679><c> value</c><01:24:22.080><c> here</c>

01:24:22.950 --> 01:24:22.960 align:start position:0%
pass a different value here
 

01:24:22.960 --> 01:24:26.870 align:start position:0%
pass a different value here
so<01:24:23.679><c> let's</c><01:24:23.840><c> say</c><01:24:24.000><c> we</c><01:24:24.080><c> have</c><01:24:24.239><c> a</c><01:24:24.320><c> number</c><01:24:24.719><c> like</c><01:24:25.639><c> 0.1</c>

01:24:26.870 --> 01:24:26.880 align:start position:0%
so let's say we have a number like 0.1
 

01:24:26.880 --> 01:24:28.870 align:start position:0%
so let's say we have a number like 0.1
we<01:24:27.040><c> want</c><01:24:27.199><c> to</c><01:24:27.280><c> format</c><01:24:27.600><c> this</c><01:24:27.760><c> as</c><01:24:27.920><c> a</c><01:24:28.000><c> percent</c>

01:24:28.870 --> 01:24:28.880 align:start position:0%
we want to format this as a percent
 

01:24:28.880 --> 01:24:31.270 align:start position:0%
we want to format this as a percent
let's<01:24:29.120><c> run</c><01:24:29.280><c> the</c><01:24:29.440><c> program</c>

01:24:31.270 --> 01:24:31.280 align:start position:0%
let's run the program
 

01:24:31.280 --> 01:24:34.550 align:start position:0%
let's run the program
there<01:24:31.440><c> you</c><01:24:31.520><c> go</c><01:24:31.679><c> we</c><01:24:31.840><c> get</c><01:24:31.920><c> 10</c><01:24:32.639><c> beautiful</c><01:24:34.239><c> now</c><01:24:34.400><c> let</c>

01:24:34.550 --> 01:24:34.560 align:start position:0%
there you go we get 10 beautiful now let
 

01:24:34.560 --> 01:24:36.229 align:start position:0%
there you go we get 10 beautiful now let
me<01:24:34.639><c> show</c><01:24:34.800><c> you</c><01:24:34.880><c> a</c><01:24:35.040><c> cool</c><01:24:35.280><c> technique</c>

01:24:36.229 --> 01:24:36.239 align:start position:0%
me show you a cool technique
 

01:24:36.239 --> 01:24:37.510 align:start position:0%
me show you a cool technique
in<01:24:36.320><c> this</c><01:24:36.560><c> program</c><01:24:36.880><c> we</c><01:24:37.040><c> don't</c><01:24:37.199><c> really</c><01:24:37.360><c> need</c>

01:24:37.510 --> 01:24:37.520 align:start position:0%
in this program we don't really need
 

01:24:37.520 --> 01:24:39.830 align:start position:0%
in this program we don't really need
this<01:24:37.679><c> percent</c><01:24:38.159><c> object</c><01:24:38.960><c> because</c><01:24:39.199><c> we</c><01:24:39.360><c> have</c><01:24:39.520><c> used</c>

01:24:39.830 --> 01:24:39.840 align:start position:0%
this percent object because we have used
 

01:24:39.840 --> 01:24:41.590 align:start position:0%
this percent object because we have used
it<01:24:40.000><c> in</c><01:24:40.159><c> a</c><01:24:40.320><c> single</c><01:24:40.719><c> place</c>

01:24:41.590 --> 01:24:41.600 align:start position:0%
it in a single place
 

01:24:41.600 --> 01:24:43.110 align:start position:0%
it in a single place
it<01:24:41.760><c> would</c><01:24:41.920><c> make</c><01:24:42.159><c> sense</c><01:24:42.400><c> to</c><01:24:42.560><c> have</c><01:24:42.719><c> this</c><01:24:42.960><c> as</c><01:24:43.040><c> a</c>

01:24:43.110 --> 01:24:43.120 align:start position:0%
it would make sense to have this as a
 

01:24:43.120 --> 01:24:45.030 align:start position:0%
it would make sense to have this as a
separate<01:24:43.520><c> variable</c><01:24:44.080><c> if</c><01:24:44.159><c> we</c><01:24:44.320><c> have</c><01:24:44.560><c> multiple</c>

01:24:45.030 --> 01:24:45.040 align:start position:0%
separate variable if we have multiple
 

01:24:45.040 --> 01:24:46.390 align:start position:0%
separate variable if we have multiple
references<01:24:45.600><c> to</c><01:24:45.840><c> it</c>

01:24:46.390 --> 01:24:46.400 align:start position:0%
references to it
 

01:24:46.400 --> 01:24:48.550 align:start position:0%
references to it
so<01:24:46.560><c> what</c><01:24:46.719><c> can</c><01:24:46.880><c> we</c><01:24:47.040><c> do</c><01:24:47.199><c> here</c><01:24:47.760><c> we</c><01:24:47.920><c> can</c><01:24:48.080><c> completely</c>

01:24:48.550 --> 01:24:48.560 align:start position:0%
so what can we do here we can completely
 

01:24:48.560 --> 01:24:49.910 align:start position:0%
so what can we do here we can completely
get<01:24:48.719><c> rid</c><01:24:48.880><c> of</c><01:24:49.040><c> this</c><01:24:49.199><c> object</c>

01:24:49.910 --> 01:24:49.920 align:start position:0%
get rid of this object
 

01:24:49.920 --> 01:24:52.870 align:start position:0%
get rid of this object
so<01:24:50.400><c> let's</c><01:24:50.560><c> delete</c><01:24:50.880><c> this</c><01:24:51.040><c> piece</c><01:24:51.280><c> of</c><01:24:51.440><c> code</c><01:24:52.639><c> we're</c>

01:24:52.870 --> 01:24:52.880 align:start position:0%
so let's delete this piece of code we're
 

01:24:52.880 --> 01:24:54.390 align:start position:0%
so let's delete this piece of code we're
basically<01:24:53.280><c> calling</c><01:24:53.600><c> this</c><01:24:53.760><c> method</c><01:24:54.159><c> of</c><01:24:54.239><c> the</c>

01:24:54.390 --> 01:24:54.400 align:start position:0%
basically calling this method of the
 

01:24:54.400 --> 01:24:55.750 align:start position:0%
basically calling this method of the
number<01:24:54.800><c> format</c><01:24:55.199><c> class</c>

01:24:55.750 --> 01:24:55.760 align:start position:0%
number format class
 

01:24:55.760 --> 01:24:58.070 align:start position:0%
number format class
as<01:24:55.920><c> you</c><01:24:56.080><c> know</c><01:24:56.320><c> this</c><01:24:56.560><c> method</c><01:24:56.880><c> returns</c><01:24:57.440><c> a</c><01:24:57.679><c> number</c>

01:24:58.070 --> 01:24:58.080 align:start position:0%
as you know this method returns a number
 

01:24:58.080 --> 01:24:59.590 align:start position:0%
as you know this method returns a number
format<01:24:58.560><c> object</c>

01:24:59.590 --> 01:24:59.600 align:start position:0%
format object
 

01:24:59.600 --> 01:25:01.590 align:start position:0%
format object
so<01:24:59.920><c> right</c><01:25:00.159><c> after</c><01:25:00.480><c> calling</c><01:25:00.800><c> this</c><01:25:00.960><c> method</c><01:25:01.360><c> and</c>

01:25:01.590 --> 01:25:01.600 align:start position:0%
so right after calling this method and
 

01:25:01.600 --> 01:25:02.950 align:start position:0%
so right after calling this method and
before<01:25:01.920><c> the</c><01:25:02.080><c> semicolon</c>

01:25:02.950 --> 01:25:02.960 align:start position:0%
before the semicolon
 

01:25:02.960 --> 01:25:05.350 align:start position:0%
before the semicolon
we<01:25:03.120><c> can</c><01:25:03.280><c> use</c><01:25:03.440><c> the</c><01:25:03.600><c> dot</c><01:25:04.000><c> operator</c><01:25:04.480><c> to</c><01:25:04.639><c> access</c>

01:25:05.350 --> 01:25:05.360 align:start position:0%
we can use the dot operator to access
 

01:25:05.360 --> 01:25:06.229 align:start position:0%
we can use the dot operator to access
the<01:25:05.600><c> methods</c>

01:25:06.229 --> 01:25:06.239 align:start position:0%
the methods
 

01:25:06.239 --> 01:25:08.629 align:start position:0%
the methods
or<01:25:06.400><c> members</c><01:25:06.800><c> of</c><01:25:06.960><c> the</c><01:25:07.120><c> number</c><01:25:07.440><c> format</c><01:25:07.840><c> object</c>

01:25:08.629 --> 01:25:08.639 align:start position:0%
or members of the number format object
 

01:25:08.639 --> 01:25:10.470 align:start position:0%
or members of the number format object
so<01:25:08.800><c> here</c><01:25:08.960><c> we</c><01:25:09.040><c> call</c><01:25:09.280><c> the</c><01:25:09.440><c> format</c><01:25:09.840><c> method</c>

01:25:10.470 --> 01:25:10.480 align:start position:0%
so here we call the format method
 

01:25:10.480 --> 01:25:13.590 align:start position:0%
so here we call the format method
straight<01:25:10.800><c> away</c><01:25:11.199><c> and</c><01:25:11.440><c> pass</c><01:25:12.480><c> our</c><01:25:12.719><c> value</c>

01:25:13.590 --> 01:25:13.600 align:start position:0%
straight away and pass our value
 

01:25:13.600 --> 01:25:16.149 align:start position:0%
straight away and pass our value
this<01:25:13.840><c> is</c><01:25:13.920><c> what</c><01:25:14.080><c> we</c><01:25:14.239><c> call</c><01:25:14.719><c> meta</c><01:25:15.120><c> chaining</c><01:25:15.840><c> we're</c>

01:25:16.149 --> 01:25:16.159 align:start position:0%
this is what we call meta chaining we're
 

01:25:16.159 --> 01:25:18.070 align:start position:0%
this is what we call meta chaining we're
chaining<01:25:16.639><c> multiple</c><01:25:17.040><c> methods</c><01:25:17.440><c> together</c>

01:25:18.070 --> 01:25:18.080 align:start position:0%
chaining multiple methods together
 

01:25:18.080 --> 01:25:20.629 align:start position:0%
chaining multiple methods together
so<01:25:18.239><c> here's</c><01:25:18.560><c> one</c><01:25:18.800><c> method</c><01:25:19.440><c> and</c><01:25:19.840><c> here's</c><01:25:20.239><c> another</c>

01:25:20.629 --> 01:25:20.639 align:start position:0%
so here's one method and here's another
 

01:25:20.639 --> 01:25:21.910 align:start position:0%
so here's one method and here's another
method

01:25:21.910 --> 01:25:21.920 align:start position:0%
method
 

01:25:21.920 --> 01:25:23.669 align:start position:0%
method
now<01:25:22.159><c> this</c><01:25:22.320><c> returns</c><01:25:22.719><c> a</c><01:25:22.880><c> string</c><01:25:23.199><c> so</c><01:25:23.440><c> we</c><01:25:23.520><c> can</c>

01:25:23.669 --> 01:25:23.679 align:start position:0%
now this returns a string so we can
 

01:25:23.679 --> 01:25:26.149 align:start position:0%
now this returns a string so we can
store<01:25:24.080><c> it</c><01:25:24.480><c> in</c><01:25:24.560><c> this</c><01:25:24.800><c> result</c><01:25:25.199><c> variable</c>

01:25:26.149 --> 01:25:26.159 align:start position:0%
store it in this result variable
 

01:25:26.159 --> 01:25:29.510 align:start position:0%
store it in this result variable
let<01:25:26.320><c> me</c><01:25:26.560><c> cut</c><01:25:27.040><c> this</c><01:25:27.280><c> expression</c><01:25:27.760><c> from</c><01:25:28.000><c> here</c><01:25:28.480><c> and</c>

01:25:29.510 --> 01:25:29.520 align:start position:0%
let me cut this expression from here and
 

01:25:29.520 --> 01:25:32.870 align:start position:0%
let me cut this expression from here and
put<01:25:29.679><c> it</c><01:25:29.840><c> over</c><01:25:30.080><c> here</c><01:25:32.239><c> now</c><01:25:32.400><c> we</c><01:25:32.480><c> have</c><01:25:32.639><c> double</c>

01:25:32.870 --> 01:25:32.880 align:start position:0%
put it over here now we have double
 

01:25:32.880 --> 01:25:34.390 align:start position:0%
put it over here now we have double
semicolon<01:25:33.520><c> so</c><01:25:33.600><c> i'm</c><01:25:33.679><c> going</c><01:25:33.760><c> to</c><01:25:33.840><c> delete</c><01:25:34.080><c> one</c><01:25:34.239><c> of</c>

01:25:34.390 --> 01:25:34.400 align:start position:0%
semicolon so i'm going to delete one of
 

01:25:34.400 --> 01:25:36.229 align:start position:0%
semicolon so i'm going to delete one of
them

01:25:36.229 --> 01:25:36.239 align:start position:0%
them
 

01:25:36.239 --> 01:25:43.830 align:start position:0%
them
all<01:25:36.480><c> right</c><01:25:38.840><c> beautiful</c>

01:25:43.830 --> 01:25:43.840 align:start position:0%
 
 

01:25:43.840 --> 01:25:45.030 align:start position:0%
 
in<01:25:44.000><c> this</c><01:25:44.080><c> tutorial</c><01:25:44.480><c> i'm</c><01:25:44.560><c> going</c><01:25:44.639><c> to</c><01:25:44.719><c> show</c><01:25:44.880><c> you</c>

01:25:45.030 --> 01:25:45.040 align:start position:0%
in this tutorial i'm going to show you
 

01:25:45.040 --> 01:25:47.270 align:start position:0%
in this tutorial i'm going to show you
how<01:25:45.199><c> to</c><01:25:45.360><c> read</c><01:25:45.679><c> input</c><01:25:46.000><c> from</c><01:25:46.159><c> the</c><01:25:46.320><c> user</c>

01:25:47.270 --> 01:25:47.280 align:start position:0%
how to read input from the user
 

01:25:47.280 --> 01:25:49.510 align:start position:0%
how to read input from the user
in<01:25:47.520><c> java</c><01:25:47.920><c> we</c><01:25:48.080><c> have</c><01:25:48.239><c> this</c><01:25:48.639><c> scanner</c><01:25:49.040><c> class</c><01:25:49.360><c> that</c>

01:25:49.510 --> 01:25:49.520 align:start position:0%
in java we have this scanner class that
 

01:25:49.520 --> 01:25:50.390 align:start position:0%
in java we have this scanner class that
is<01:25:49.679><c> defined</c>

01:25:50.390 --> 01:25:50.400 align:start position:0%
is defined
 

01:25:50.400 --> 01:25:53.990 align:start position:0%
is defined
in<01:25:50.639><c> java.util</c><01:25:51.520><c> package</c><01:25:52.560><c> let's</c><01:25:52.800><c> import</c><01:25:53.120><c> this</c>

01:25:53.990 --> 01:25:54.000 align:start position:0%
in java.util package let's import this
 

01:25:54.000 --> 01:25:57.189 align:start position:0%
in java.util package let's import this
and<01:25:54.159><c> create</c><01:25:54.560><c> a</c><01:25:54.719><c> scanner</c><01:25:55.600><c> object</c>

01:25:57.189 --> 01:25:57.199 align:start position:0%
and create a scanner object
 

01:25:57.199 --> 01:26:00.149 align:start position:0%
and create a scanner object
so<01:25:57.440><c> new</c><01:25:57.760><c> scanner</c><01:25:59.040><c> now</c><01:25:59.280><c> here</c><01:25:59.600><c> inside</c><01:25:59.920><c> this</c>

01:26:00.149 --> 01:26:00.159 align:start position:0%
so new scanner now here inside this
 

01:26:00.159 --> 01:26:00.950 align:start position:0%
so new scanner now here inside this
parenthesis

01:26:00.950 --> 01:26:00.960 align:start position:0%
parenthesis
 

01:26:00.960 --> 01:26:02.550 align:start position:0%
parenthesis
we<01:26:01.120><c> need</c><01:26:01.280><c> to</c><01:26:01.440><c> specify</c><01:26:02.000><c> where</c><01:26:02.239><c> we're</c><01:26:02.400><c> going</c><01:26:02.480><c> to</c>

01:26:02.550 --> 01:26:02.560 align:start position:0%
we need to specify where we're going to
 

01:26:02.560 --> 01:26:04.070 align:start position:0%
we need to specify where we're going to
read<01:26:02.719><c> data</c><01:26:03.040><c> from</c><01:26:03.440><c> are</c><01:26:03.600><c> we</c><01:26:03.679><c> going</c><01:26:03.760><c> to</c><01:26:03.840><c> read</c><01:26:04.000><c> it</c>

01:26:04.070 --> 01:26:04.080 align:start position:0%
read data from are we going to read it
 

01:26:04.080 --> 01:26:05.350 align:start position:0%
read data from are we going to read it
from<01:26:04.239><c> the</c><01:26:04.320><c> terminal</c><01:26:04.719><c> window</c>

01:26:05.350 --> 01:26:05.360 align:start position:0%
from the terminal window
 

01:26:05.360 --> 01:26:06.870 align:start position:0%
from the terminal window
are<01:26:05.520><c> we</c><01:26:05.600><c> going</c><01:26:05.679><c> to</c><01:26:05.760><c> read</c><01:26:05.920><c> it</c><01:26:06.000><c> from</c><01:26:06.239><c> a</c><01:26:06.400><c> file</c><01:26:06.719><c> or</c>

01:26:06.870 --> 01:26:06.880 align:start position:0%
are we going to read it from a file or
 

01:26:06.880 --> 01:26:09.270 align:start position:0%
are we going to read it from a file or
what<01:26:07.679><c> to</c><01:26:07.840><c> work</c><01:26:08.000><c> with</c><01:26:08.159><c> the</c><01:26:08.239><c> terminal</c><01:26:08.639><c> window</c>

01:26:09.270 --> 01:26:09.280 align:start position:0%
what to work with the terminal window
 

01:26:09.280 --> 01:26:12.950 align:start position:0%
what to work with the terminal window
we<01:26:09.520><c> type</c><01:26:10.000><c> system</c><01:26:10.719><c> dot</c><01:26:11.360><c> in</c><01:26:12.080><c> this</c><01:26:12.320><c> is</c><01:26:12.400><c> one</c><01:26:12.639><c> of</c><01:26:12.719><c> the</c>

01:26:12.950 --> 01:26:12.960 align:start position:0%
we type system dot in this is one of the
 

01:26:12.960 --> 01:26:13.669 align:start position:0%
we type system dot in this is one of the
fields

01:26:13.669 --> 01:26:13.679 align:start position:0%
fields
 

01:26:13.679 --> 01:26:15.830 align:start position:0%
fields
in<01:26:13.760><c> the</c><01:26:13.920><c> system</c><01:26:14.320><c> class</c><01:26:14.960><c> a</c><01:26:15.199><c> field</c><01:26:15.440><c> as</c><01:26:15.600><c> i</c><01:26:15.679><c> told</c>

01:26:15.830 --> 01:26:15.840 align:start position:0%
in the system class a field as i told
 

01:26:15.840 --> 01:26:17.430 align:start position:0%
in the system class a field as i told
you<01:26:16.000><c> before</c><01:26:16.320><c> is</c><01:26:16.480><c> like</c><01:26:16.719><c> a</c><01:26:16.800><c> variable</c><01:26:17.120><c> that</c><01:26:17.280><c> we</c>

01:26:17.430 --> 01:26:17.440 align:start position:0%
you before is like a variable that we
 

01:26:17.440 --> 01:26:18.870 align:start position:0%
you before is like a variable that we
defined<01:26:17.840><c> in</c><01:26:17.920><c> the</c><01:26:18.080><c> class</c>

01:26:18.870 --> 01:26:18.880 align:start position:0%
defined in the class
 

01:26:18.880 --> 01:26:21.430 align:start position:0%
defined in the class
so<01:26:19.360><c> we</c><01:26:19.520><c> have</c><01:26:19.679><c> system</c><01:26:20.000><c> that</c><01:26:20.320><c> in</c><01:26:20.800><c> we</c><01:26:21.040><c> also</c><01:26:21.280><c> have</c>

01:26:21.430 --> 01:26:21.440 align:start position:0%
so we have system that in we also have
 

01:26:21.440 --> 01:26:23.270 align:start position:0%
so we have system that in we also have
system.out<01:26:22.320><c> which</c><01:26:22.480><c> we</c><01:26:22.639><c> use</c><01:26:22.800><c> to</c><01:26:22.960><c> print</c>

01:26:23.270 --> 01:26:23.280 align:start position:0%
system.out which we use to print
 

01:26:23.280 --> 01:26:24.390 align:start position:0%
system.out which we use to print
something<01:26:23.600><c> on</c><01:26:23.679><c> the</c><01:26:23.840><c> terminal</c>

01:26:24.390 --> 01:26:24.400 align:start position:0%
something on the terminal
 

01:26:24.400 --> 01:26:27.910 align:start position:0%
something on the terminal
right<01:26:25.440><c> now</c><01:26:26.080><c> let's</c><01:26:26.400><c> use</c><01:26:26.800><c> system.in</c>

01:26:27.910 --> 01:26:27.920 align:start position:0%
right now let's use system.in
 

01:26:27.920 --> 01:26:29.910 align:start position:0%
right now let's use system.in
and<01:26:28.480><c> terminate</c><01:26:28.880><c> this</c><01:26:29.040><c> statement</c><01:26:29.520><c> with</c><01:26:29.760><c> a</c>

01:26:29.910 --> 01:26:29.920 align:start position:0%
and terminate this statement with a
 

01:26:29.920 --> 01:26:31.350 align:start position:0%
and terminate this statement with a
semicolon

01:26:31.350 --> 01:26:31.360 align:start position:0%
semicolon
 

01:26:31.360 --> 01:26:33.189 align:start position:0%
semicolon
now<01:26:31.600><c> this</c><01:26:31.920><c> object</c><01:26:32.239><c> has</c><01:26:32.400><c> a</c><01:26:32.480><c> bunch</c><01:26:32.719><c> of</c><01:26:32.800><c> methods</c>

01:26:33.189 --> 01:26:33.199 align:start position:0%
now this object has a bunch of methods
 

01:26:33.199 --> 01:26:34.390 align:start position:0%
now this object has a bunch of methods
for<01:26:33.280><c> reading</c><01:26:33.600><c> data</c>

01:26:34.390 --> 01:26:34.400 align:start position:0%
for reading data
 

01:26:34.400 --> 01:26:37.590 align:start position:0%
for reading data
and<01:26:34.719><c> all</c><01:26:34.880><c> these</c><01:26:35.280><c> methods</c><01:26:35.920><c> start</c><01:26:36.639><c> with</c><01:26:36.960><c> next</c>

01:26:37.590 --> 01:26:37.600 align:start position:0%
and all these methods start with next
 

01:26:37.600 --> 01:26:40.229 align:start position:0%
and all these methods start with next
so<01:26:37.840><c> we</c><01:26:38.000><c> have</c><01:26:38.159><c> next</c><01:26:38.560><c> byte</c><01:26:39.040><c> for</c><01:26:39.199><c> reading</c><01:26:39.520><c> a</c><01:26:39.600><c> byte</c>

01:26:40.229 --> 01:26:40.239 align:start position:0%
so we have next byte for reading a byte
 

01:26:40.239 --> 01:26:41.430 align:start position:0%
so we have next byte for reading a byte
we<01:26:40.400><c> have</c><01:26:40.560><c> next</c><01:26:40.880><c> line</c>

01:26:41.430 --> 01:26:41.440 align:start position:0%
we have next line
 

01:26:41.440 --> 01:26:43.669 align:start position:0%
we have next line
for<01:26:41.600><c> reading</c><01:26:41.920><c> a</c><01:26:42.080><c> line</c><01:26:42.639><c> we</c><01:26:42.800><c> have</c><01:26:42.880><c> nyx</c><01:26:43.199><c> boolean</c>

01:26:43.669 --> 01:26:43.679 align:start position:0%
for reading a line we have nyx boolean
 

01:26:43.679 --> 01:26:45.510 align:start position:0%
for reading a line we have nyx boolean
for<01:26:43.840><c> writing</c><01:26:44.080><c> a</c><01:26:44.159><c> boolean</c><01:26:44.560><c> and</c><01:26:44.639><c> so</c><01:26:44.800><c> on</c>

01:26:45.510 --> 01:26:45.520 align:start position:0%
for writing a boolean and so on
 

01:26:45.520 --> 01:26:47.910 align:start position:0%
for writing a boolean and so on
so<01:26:45.760><c> let's</c><01:26:45.920><c> call</c><01:26:46.159><c> the</c><01:26:46.320><c> next</c><01:26:46.639><c> byte</c><01:26:46.960><c> method</c><01:26:47.840><c> and</c>

01:26:47.910 --> 01:26:47.920 align:start position:0%
so let's call the next byte method and
 

01:26:47.920 --> 01:26:49.110 align:start position:0%
so let's call the next byte method and
see<01:26:48.080><c> what</c><01:26:48.239><c> we</c><01:26:48.400><c> get</c>

01:26:49.110 --> 01:26:49.120 align:start position:0%
see what we get
 

01:26:49.120 --> 01:26:51.030 align:start position:0%
see what we get
this<01:26:49.360><c> returns</c><01:26:49.760><c> a</c><01:26:49.920><c> byte</c><01:26:50.239><c> value</c><01:26:50.560><c> so</c><01:26:50.719><c> we</c><01:26:50.880><c> can</c>

01:26:51.030 --> 01:26:51.040 align:start position:0%
this returns a byte value so we can
 

01:26:51.040 --> 01:26:52.950 align:start position:0%
this returns a byte value so we can
store<01:26:51.360><c> it</c><01:26:52.000><c> in</c><01:26:52.159><c> a</c><01:26:52.320><c> byte</c>

01:26:52.950 --> 01:26:52.960 align:start position:0%
store it in a byte
 

01:26:52.960 --> 01:26:55.750 align:start position:0%
store it in a byte
variable<01:26:53.760><c> let's</c><01:26:53.920><c> say</c><01:26:54.080><c> someone's</c><01:26:54.480><c> age</c><01:26:55.600><c> and</c>

01:26:55.750 --> 01:26:55.760 align:start position:0%
variable let's say someone's age and
 

01:26:55.760 --> 01:26:56.149 align:start position:0%
variable let's say someone's age and
then

01:26:56.149 --> 01:26:56.159 align:start position:0%
then
 

01:26:56.159 --> 01:27:00.149 align:start position:0%
then
we<01:26:56.400><c> print</c><01:26:56.719><c> it</c><01:26:56.800><c> on</c><01:26:56.960><c> a</c><01:26:57.040><c> terminal</c><01:26:57.600><c> saying</c><01:26:58.480><c> u</c><01:26:58.800><c> r</c>

01:27:00.149 --> 01:27:00.159 align:start position:0%
we print it on a terminal saying u r
 

01:27:00.159 --> 01:27:03.510 align:start position:0%
we print it on a terminal saying u r
plus<01:27:00.800><c> h</c><01:27:01.840><c> so</c><01:27:02.000><c> here</c><01:27:02.159><c> we're</c><01:27:02.400><c> concatenating</c>

01:27:03.510 --> 01:27:03.520 align:start position:0%
plus h so here we're concatenating
 

01:27:03.520 --> 01:27:06.149 align:start position:0%
plus h so here we're concatenating
a<01:27:03.840><c> string</c><01:27:04.800><c> with</c><01:27:05.040><c> a</c><01:27:05.199><c> byte</c><01:27:05.760><c> and</c><01:27:05.920><c> in</c><01:27:06.080><c> this</c>

01:27:06.149 --> 01:27:06.159 align:start position:0%
a string with a byte and in this
 

01:27:06.159 --> 01:27:07.430 align:start position:0%
a string with a byte and in this
scenario<01:27:06.560><c> we're</c><01:27:06.639><c> going</c><01:27:06.800><c> to</c><01:27:06.880><c> have</c>

01:27:07.430 --> 01:27:07.440 align:start position:0%
scenario we're going to have
 

01:27:07.440 --> 01:27:09.590 align:start position:0%
scenario we're going to have
implicit<01:27:08.159><c> casting</c><01:27:08.560><c> or</c><01:27:08.800><c> implicit</c><01:27:09.360><c> type</c>

01:27:09.590 --> 01:27:09.600 align:start position:0%
implicit casting or implicit type
 

01:27:09.600 --> 01:27:10.709 align:start position:0%
implicit casting or implicit type
conversion

01:27:10.709 --> 01:27:10.719 align:start position:0%
conversion
 

01:27:10.719 --> 01:27:13.110 align:start position:0%
conversion
so<01:27:10.960><c> java</c><01:27:11.360><c> will</c><01:27:11.600><c> automatically</c><01:27:12.159><c> convert</c><01:27:12.800><c> this</c>

01:27:13.110 --> 01:27:13.120 align:start position:0%
so java will automatically convert this
 

01:27:13.120 --> 01:27:14.550 align:start position:0%
so java will automatically convert this
byte<01:27:13.360><c> variable</c><01:27:13.840><c> here</c>

01:27:14.550 --> 01:27:14.560 align:start position:0%
byte variable here
 

01:27:14.560 --> 01:27:16.790 align:start position:0%
byte variable here
to<01:27:14.719><c> a</c><01:27:14.880><c> string</c><01:27:15.360><c> so</c><01:27:16.000><c> they</c><01:27:16.159><c> can</c><01:27:16.320><c> be</c><01:27:16.480><c> added</c>

01:27:16.790 --> 01:27:16.800 align:start position:0%
to a string so they can be added
 

01:27:16.800 --> 01:27:18.310 align:start position:0%
to a string so they can be added
together<01:27:17.520><c> okay</c>

01:27:18.310 --> 01:27:18.320 align:start position:0%
together okay
 

01:27:18.320 --> 01:27:19.669 align:start position:0%
together okay
now<01:27:18.480><c> let's</c><01:27:18.639><c> run</c><01:27:18.800><c> this</c><01:27:18.960><c> program</c><01:27:19.280><c> and</c><01:27:19.360><c> see</c><01:27:19.520><c> what</c>

01:27:19.669 --> 01:27:19.679 align:start position:0%
now let's run this program and see what
 

01:27:19.679 --> 01:27:22.709 align:start position:0%
now let's run this program and see what
happens<01:27:21.280><c> so</c><01:27:21.440><c> here</c><01:27:21.600><c> in</c><01:27:21.679><c> the</c><01:27:21.760><c> terminal</c><01:27:22.159><c> window</c>

01:27:22.709 --> 01:27:22.719 align:start position:0%
happens so here in the terminal window
 

01:27:22.719 --> 01:27:25.750 align:start position:0%
happens so here in the terminal window
we<01:27:22.880><c> can</c><01:27:23.040><c> type</c><01:27:23.520><c> 20</c><01:27:24.239><c> enter</c><01:27:24.880><c> and</c><01:27:25.120><c> it</c><01:27:25.280><c> says</c><01:27:25.520><c> you're</c>

01:27:25.750 --> 01:27:25.760 align:start position:0%
we can type 20 enter and it says you're
 

01:27:25.760 --> 01:27:26.149 align:start position:0%
we can type 20 enter and it says you're
20.

01:27:26.149 --> 01:27:26.159 align:start position:0%
20.
 

01:27:26.159 --> 01:27:28.229 align:start position:0%
20.
beautiful<01:27:26.960><c> but</c><01:27:27.120><c> this</c><01:27:27.280><c> is</c><01:27:27.440><c> pretty</c><01:27:27.679><c> boring</c>

01:27:28.229 --> 01:27:28.239 align:start position:0%
beautiful but this is pretty boring
 

01:27:28.239 --> 01:27:30.070 align:start position:0%
beautiful but this is pretty boring
let's<01:27:28.480><c> add</c><01:27:28.639><c> a</c><01:27:28.719><c> label</c><01:27:29.040><c> here</c><01:27:29.199><c> and</c><01:27:29.440><c> ask</c><01:27:29.600><c> the</c><01:27:29.760><c> user</c>

01:27:30.070 --> 01:27:30.080 align:start position:0%
let's add a label here and ask the user
 

01:27:30.080 --> 01:27:31.350 align:start position:0%
let's add a label here and ask the user
to<01:27:30.239><c> type</c><01:27:30.480><c> something</c>

01:27:31.350 --> 01:27:31.360 align:start position:0%
to type something
 

01:27:31.360 --> 01:27:33.830 align:start position:0%
to type something
for<01:27:31.520><c> example</c><01:27:32.159><c> before</c><01:27:32.480><c> reading</c><01:27:32.800><c> data</c><01:27:33.679><c> we're</c>

01:27:33.830 --> 01:27:33.840 align:start position:0%
for example before reading data we're
 

01:27:33.840 --> 01:27:35.189 align:start position:0%
for example before reading data we're
going<01:27:34.000><c> to</c><01:27:34.080><c> call</c>

01:27:35.189 --> 01:27:35.199 align:start position:0%
going to call
 

01:27:35.199 --> 01:27:38.950 align:start position:0%
going to call
the<01:27:35.360><c> print</c><01:27:35.600><c> line</c><01:27:35.840><c> method</c><01:27:36.400><c> and</c><01:27:36.719><c> say</c><01:27:37.520><c> age</c><01:27:38.000><c> colon</c>

01:27:38.950 --> 01:27:38.960 align:start position:0%
the print line method and say age colon
 

01:27:38.960 --> 01:27:41.590 align:start position:0%
the print line method and say age colon
now<01:27:39.120><c> let's</c><01:27:39.360><c> run</c><01:27:39.520><c> the</c><01:27:39.679><c> program</c><01:27:40.960><c> so</c><01:27:41.199><c> we</c><01:27:41.280><c> get</c><01:27:41.440><c> this</c>

01:27:41.590 --> 01:27:41.600 align:start position:0%
now let's run the program so we get this
 

01:27:41.600 --> 01:27:42.870 align:start position:0%
now let's run the program so we get this
label<01:27:41.920><c> here</c>

01:27:42.870 --> 01:27:42.880 align:start position:0%
label here
 

01:27:42.880 --> 01:27:45.590 align:start position:0%
label here
however<01:27:43.840><c> whatever</c><01:27:44.239><c> we</c><01:27:44.400><c> type</c><01:27:44.960><c> will</c><01:27:45.199><c> appear</c><01:27:45.440><c> on</c>

01:27:45.590 --> 01:27:45.600 align:start position:0%
however whatever we type will appear on
 

01:27:45.600 --> 01:27:45.990 align:start position:0%
however whatever we type will appear on
the<01:27:45.679><c> next</c>

01:27:45.990 --> 01:27:46.000 align:start position:0%
the next
 

01:27:46.000 --> 01:27:48.149 align:start position:0%
the next
line<01:27:46.639><c> this</c><01:27:46.880><c> is</c><01:27:47.040><c> because</c><01:27:47.360><c> the</c><01:27:47.520><c> print</c><01:27:47.920><c> line</c>

01:27:48.149 --> 01:27:48.159 align:start position:0%
line this is because the print line
 

01:27:48.159 --> 01:27:50.149 align:start position:0%
line this is because the print line
method<01:27:48.719><c> adds</c><01:27:49.040><c> a</c><01:27:49.199><c> new</c><01:27:49.520><c> line</c>

01:27:50.149 --> 01:27:50.159 align:start position:0%
method adds a new line
 

01:27:50.159 --> 01:27:53.430 align:start position:0%
method adds a new line
after<01:27:50.960><c> this</c><01:27:51.280><c> label</c><01:27:52.000><c> to</c><01:27:52.159><c> solve</c><01:27:52.400><c> this</c><01:27:52.560><c> issue</c>

01:27:53.430 --> 01:27:53.440 align:start position:0%
after this label to solve this issue
 

01:27:53.440 --> 01:27:56.550 align:start position:0%
after this label to solve this issue
we<01:27:53.600><c> call</c><01:27:53.840><c> the</c><01:27:54.000><c> print</c><01:27:54.320><c> method</c><01:27:56.000><c> now</c><01:27:56.159><c> let's</c><01:27:56.400><c> run</c>

01:27:56.550 --> 01:27:56.560 align:start position:0%
we call the print method now let's run
 

01:27:56.560 --> 01:27:57.990 align:start position:0%
we call the print method now let's run
the<01:27:56.639><c> program</c><01:27:56.960><c> one</c><01:27:57.120><c> more</c><01:27:57.280><c> time</c>

01:27:57.990 --> 01:27:58.000 align:start position:0%
the program one more time
 

01:27:58.000 --> 01:27:59.669 align:start position:0%
the program one more time
we<01:27:58.159><c> get</c><01:27:58.320><c> this</c><01:27:58.560><c> pop-up</c><01:27:58.960><c> box</c><01:27:59.280><c> because</c><01:27:59.520><c> our</c>

01:27:59.669 --> 01:27:59.679 align:start position:0%
we get this pop-up box because our
 

01:27:59.679 --> 01:28:01.750 align:start position:0%
we get this pop-up box because our
program<01:28:00.080><c> hasn't</c><01:28:00.400><c> finished</c><01:28:00.719><c> execution</c>

01:28:01.750 --> 01:28:01.760 align:start position:0%
program hasn't finished execution
 

01:28:01.760 --> 01:28:03.430 align:start position:0%
program hasn't finished execution
so<01:28:01.920><c> we</c><01:28:02.080><c> need</c><01:28:02.159><c> to</c><01:28:02.239><c> tell</c><01:28:02.480><c> intellij</c><01:28:03.040><c> that</c><01:28:03.199><c> we</c><01:28:03.280><c> want</c>

01:28:03.430 --> 01:28:03.440 align:start position:0%
so we need to tell intellij that we want
 

01:28:03.440 --> 01:28:06.390 align:start position:0%
so we need to tell intellij that we want
to<01:28:03.600><c> stop</c><01:28:04.080><c> and</c><01:28:04.320><c> rerun</c><01:28:04.800><c> this</c><01:28:05.040><c> program</c>

01:28:06.390 --> 01:28:06.400 align:start position:0%
to stop and rerun this program
 

01:28:06.400 --> 01:28:09.990 align:start position:0%
to stop and rerun this program
all<01:28:06.639><c> right</c><01:28:08.000><c> now</c><01:28:08.880><c> whatever</c><01:28:09.280><c> we</c><01:28:09.440><c> type</c>

01:28:09.990 --> 01:28:10.000 align:start position:0%
all right now whatever we type
 

01:28:10.000 --> 01:28:12.470 align:start position:0%
all right now whatever we type
appears<01:28:11.040><c> right</c><01:28:11.520><c> in</c><01:28:11.600><c> front</c><01:28:11.840><c> of</c><01:28:11.920><c> this</c><01:28:12.159><c> label</c>

01:28:12.470 --> 01:28:12.480 align:start position:0%
appears right in front of this label
 

01:28:12.480 --> 01:28:13.350 align:start position:0%
appears right in front of this label
beautiful

01:28:13.350 --> 01:28:13.360 align:start position:0%
beautiful
 

01:28:13.360 --> 01:28:17.189 align:start position:0%
beautiful
enter<01:28:14.159><c> you</c><01:28:14.320><c> are</c><01:28:14.560><c> 20.</c><01:28:15.360><c> now</c><01:28:15.520><c> what</c><01:28:15.760><c> if</c><01:28:15.840><c> we</c><01:28:16.080><c> type</c>

01:28:17.189 --> 01:28:17.199 align:start position:0%
enter you are 20. now what if we type
 

01:28:17.199 --> 01:28:20.629 align:start position:0%
enter you are 20. now what if we type
a<01:28:17.360><c> floating</c><01:28:17.840><c> point</c><01:28:18.000><c> number</c><01:28:18.400><c> like</c><01:28:18.760><c> 20.1</c>

01:28:20.629 --> 01:28:20.639 align:start position:0%
a floating point number like 20.1
 

01:28:20.639 --> 01:28:23.189 align:start position:0%
a floating point number like 20.1
we<01:28:20.800><c> get</c><01:28:21.360><c> an</c><01:28:21.520><c> exception</c><01:28:22.400><c> because</c><01:28:22.639><c> this</c><01:28:22.880><c> method</c>

01:28:23.189 --> 01:28:23.199 align:start position:0%
we get an exception because this method
 

01:28:23.199 --> 01:28:23.669 align:start position:0%
we get an exception because this method
can

01:28:23.669 --> 01:28:23.679 align:start position:0%
can
 

01:28:23.679 --> 01:28:26.390 align:start position:0%
can
only<01:28:24.159><c> parse</c><01:28:24.960><c> byte</c><01:28:25.280><c> values</c><01:28:26.000><c> if</c><01:28:26.159><c> you</c><01:28:26.239><c> want</c><01:28:26.320><c> to</c>

01:28:26.390 --> 01:28:26.400 align:start position:0%
only parse byte values if you want to
 

01:28:26.400 --> 01:28:27.990 align:start position:0%
only parse byte values if you want to
get<01:28:26.639><c> a</c><01:28:26.719><c> floating</c><01:28:27.120><c> point</c><01:28:27.360><c> number</c><01:28:27.600><c> we</c><01:28:27.760><c> need</c><01:28:27.920><c> to</c>

01:28:27.990 --> 01:28:28.000 align:start position:0%
get a floating point number we need to
 

01:28:28.000 --> 01:28:28.629 align:start position:0%
get a floating point number we need to
call

01:28:28.629 --> 01:28:28.639 align:start position:0%
call
 

01:28:28.639 --> 01:28:32.709 align:start position:0%
call
next<01:28:29.760><c> float</c><01:28:30.480><c> or</c><01:28:31.040><c> next</c><01:28:31.600><c> double</c>

01:28:32.709 --> 01:28:32.719 align:start position:0%
next float or next double
 

01:28:32.719 --> 01:28:34.310 align:start position:0%
next float or next double
what<01:28:32.960><c> if</c><01:28:33.040><c> you</c><01:28:33.120><c> want</c><01:28:33.199><c> to</c><01:28:33.280><c> read</c><01:28:33.520><c> a</c><01:28:33.600><c> string</c><01:28:34.159><c> we</c>

01:28:34.310 --> 01:28:34.320 align:start position:0%
what if you want to read a string we
 

01:28:34.320 --> 01:28:36.390 align:start position:0%
what if you want to read a string we
don't<01:28:34.480><c> have</c><01:28:35.040><c> next</c><01:28:35.600><c> string</c>

01:28:36.390 --> 01:28:36.400 align:start position:0%
don't have next string
 

01:28:36.400 --> 01:28:39.350 align:start position:0%
don't have next string
we<01:28:36.560><c> have</c><01:28:36.880><c> next</c><01:28:37.440><c> and</c><01:28:38.000><c> next</c><01:28:38.400><c> line</c><01:28:38.960><c> let's</c><01:28:39.120><c> look</c><01:28:39.280><c> at</c>

01:28:39.350 --> 01:28:39.360 align:start position:0%
we have next and next line let's look at
 

01:28:39.360 --> 01:28:40.470 align:start position:0%
we have next and next line let's look at
the<01:28:39.440><c> differences</c>

01:28:40.470 --> 01:28:40.480 align:start position:0%
the differences
 

01:28:40.480 --> 01:28:41.750 align:start position:0%
the differences
so<01:28:40.639><c> first</c><01:28:40.880><c> i'm</c><01:28:40.960><c> going</c><01:28:41.040><c> to</c><01:28:41.120><c> call</c><01:28:41.360><c> the</c><01:28:41.440><c> next</c>

01:28:41.750 --> 01:28:41.760 align:start position:0%
so first i'm going to call the next
 

01:28:41.760 --> 01:28:43.990 align:start position:0%
so first i'm going to call the next
method<01:28:42.480><c> here</c><01:28:42.719><c> we</c><01:28:42.800><c> have</c><01:28:42.960><c> a</c><01:28:43.040><c> compilation</c><01:28:43.600><c> issue</c>

01:28:43.990 --> 01:28:44.000 align:start position:0%
method here we have a compilation issue
 

01:28:44.000 --> 01:28:46.550 align:start position:0%
method here we have a compilation issue
because<01:28:44.480><c> this</c><01:28:44.719><c> method</c><01:28:45.040><c> returns</c><01:28:45.440><c> a</c><01:28:45.679><c> string</c>

01:28:46.550 --> 01:28:46.560 align:start position:0%
because this method returns a string
 

01:28:46.560 --> 01:28:48.950 align:start position:0%
because this method returns a string
i'm<01:28:46.719><c> going</c><01:28:46.800><c> to</c><01:28:46.960><c> change</c><01:28:47.120><c> this</c><01:28:47.280><c> to</c><01:28:47.440><c> a</c><01:28:47.520><c> string</c><01:28:48.639><c> let</c>

01:28:48.950 --> 01:28:48.960 align:start position:0%
i'm going to change this to a string let
 

01:28:48.960 --> 01:28:49.910 align:start position:0%
i'm going to change this to a string let
me<01:28:49.120><c> collapse</c><01:28:49.600><c> this</c>

01:28:49.910 --> 01:28:49.920 align:start position:0%
me collapse this
 

01:28:49.920 --> 01:28:51.830 align:start position:0%
me collapse this
that's<01:28:50.159><c> better</c><01:28:50.880><c> we</c><01:28:51.040><c> should</c><01:28:51.199><c> also</c><01:28:51.360><c> rename</c><01:28:51.679><c> this</c>

01:28:51.830 --> 01:28:51.840 align:start position:0%
that's better we should also rename this
 

01:28:51.840 --> 01:28:53.990 align:start position:0%
that's better we should also rename this
variable<01:28:52.480><c> so</c><01:28:52.719><c> what</c><01:28:52.800><c> was</c><01:28:53.040><c> the</c><01:28:53.120><c> shortcut</c>

01:28:53.990 --> 01:28:54.000 align:start position:0%
variable so what was the shortcut
 

01:28:54.000 --> 01:28:57.430 align:start position:0%
variable so what was the shortcut
shift<01:28:54.639><c> and</c><01:28:54.880><c> f6</c><01:28:56.400><c> now</c><01:28:56.560><c> let's</c><01:28:56.800><c> rename</c><01:28:57.120><c> this</c><01:28:57.280><c> to</c>

01:28:57.430 --> 01:28:57.440 align:start position:0%
shift and f6 now let's rename this to
 

01:28:57.440 --> 01:28:57.990 align:start position:0%
shift and f6 now let's rename this to
name

01:28:57.990 --> 01:28:58.000 align:start position:0%
name
 

01:28:58.000 --> 01:29:01.270 align:start position:0%
name
enter<01:28:58.800><c> beautiful</c><01:29:00.080><c> and</c><01:29:00.320><c> one</c><01:29:00.480><c> last</c><01:29:00.719><c> time</c><01:29:01.120><c> we</c>

01:29:01.270 --> 01:29:01.280 align:start position:0%
enter beautiful and one last time we
 

01:29:01.280 --> 01:29:02.470 align:start position:0%
enter beautiful and one last time we
should<01:29:01.600><c> also</c>

01:29:02.470 --> 01:29:02.480 align:start position:0%
should also
 

01:29:02.480 --> 01:29:06.629 align:start position:0%
should also
update<01:29:02.800><c> the</c><01:29:02.960><c> label</c><01:29:03.520><c> name</c><01:29:04.719><c> run</c><01:29:04.960><c> the</c><01:29:05.120><c> program</c>

01:29:06.629 --> 01:29:06.639 align:start position:0%
update the label name run the program
 

01:29:06.639 --> 01:29:09.189 align:start position:0%
update the label name run the program
so<01:29:07.199><c> i'm</c><01:29:07.360><c> going</c><01:29:07.440><c> to</c><01:29:07.520><c> type</c><01:29:07.760><c> my</c><01:29:07.920><c> name</c><01:29:08.080><c> here</c><01:29:08.400><c> mosh</c>

01:29:09.189 --> 01:29:09.199 align:start position:0%
so i'm going to type my name here mosh
 

01:29:09.199 --> 01:29:11.189 align:start position:0%
so i'm going to type my name here mosh
it<01:29:09.280><c> says</c><01:29:09.520><c> yoramosh</c><01:29:10.159><c> beautiful</c>

01:29:11.189 --> 01:29:11.199 align:start position:0%
it says yoramosh beautiful
 

01:29:11.199 --> 01:29:13.030 align:start position:0%
it says yoramosh beautiful
one<01:29:11.360><c> more</c><01:29:11.520><c> time</c><01:29:12.320><c> this</c><01:29:12.480><c> time</c><01:29:12.719><c> i'm</c><01:29:12.800><c> going</c><01:29:12.880><c> to</c>

01:29:13.030 --> 01:29:13.040 align:start position:0%
one more time this time i'm going to
 

01:29:13.040 --> 01:29:16.229 align:start position:0%
one more time this time i'm going to
type<01:29:13.280><c> my</c><01:29:13.520><c> full</c><01:29:13.760><c> name</c><01:29:14.159><c> mash</c><01:29:14.480><c> hamadani</c>

01:29:16.229 --> 01:29:16.239 align:start position:0%
type my full name mash hamadani
 

01:29:16.239 --> 01:29:18.310 align:start position:0%
type my full name mash hamadani
but<01:29:16.400><c> we</c><01:29:16.560><c> don't</c><01:29:16.639><c> get</c><01:29:16.800><c> the</c><01:29:16.880><c> last</c><01:29:17.120><c> name</c><01:29:18.080><c> here's</c>

01:29:18.310 --> 01:29:18.320 align:start position:0%
but we don't get the last name here's
 

01:29:18.320 --> 01:29:19.270 align:start position:0%
but we don't get the last name here's
the<01:29:18.480><c> reason</c>

01:29:19.270 --> 01:29:19.280 align:start position:0%
the reason
 

01:29:19.280 --> 01:29:21.510 align:start position:0%
the reason
these<01:29:19.600><c> words</c><01:29:19.920><c> that</c><01:29:20.000><c> we</c><01:29:20.159><c> have</c><01:29:20.320><c> here</c><01:29:21.120><c> these</c><01:29:21.360><c> are</c>

01:29:21.510 --> 01:29:21.520 align:start position:0%
these words that we have here these are
 

01:29:21.520 --> 01:29:22.950 align:start position:0%
these words that we have here these are
called<01:29:21.840><c> tokens</c>

01:29:22.950 --> 01:29:22.960 align:start position:0%
called tokens
 

01:29:22.960 --> 01:29:24.790 align:start position:0%
called tokens
every<01:29:23.199><c> time</c><01:29:23.360><c> we</c><01:29:23.520><c> call</c><01:29:23.679><c> the</c><01:29:23.920><c> next</c><01:29:24.239><c> method</c><01:29:24.639><c> it</c>

01:29:24.790 --> 01:29:24.800 align:start position:0%
every time we call the next method it
 

01:29:24.800 --> 01:29:26.550 align:start position:0%
every time we call the next method it
reads<01:29:25.360><c> one</c><01:29:25.679><c> token</c>

01:29:26.550 --> 01:29:26.560 align:start position:0%
reads one token
 

01:29:26.560 --> 01:29:28.310 align:start position:0%
reads one token
so<01:29:26.719><c> here</c><01:29:26.880><c> we</c><01:29:27.040><c> have</c><01:29:27.120><c> a</c><01:29:27.280><c> space</c><01:29:27.840><c> we</c><01:29:28.000><c> have</c><01:29:28.080><c> two</c>

01:29:28.310 --> 01:29:28.320 align:start position:0%
so here we have a space we have two
 

01:29:28.320 --> 01:29:30.229 align:start position:0%
so here we have a space we have two
tokens<01:29:28.960><c> and</c><01:29:29.120><c> we</c><01:29:29.280><c> need</c><01:29:29.440><c> to</c><01:29:29.520><c> call</c><01:29:29.760><c> the</c><01:29:29.920><c> next</c>

01:29:30.229 --> 01:29:30.239 align:start position:0%
tokens and we need to call the next
 

01:29:30.239 --> 01:29:32.790 align:start position:0%
tokens and we need to call the next
method<01:29:30.560><c> two</c><01:29:30.880><c> times</c><01:29:31.280><c> to</c><01:29:31.440><c> get</c><01:29:31.600><c> the</c><01:29:31.760><c> full</c><01:29:32.000><c> name</c>

01:29:32.790 --> 01:29:32.800 align:start position:0%
method two times to get the full name
 

01:29:32.800 --> 01:29:34.229 align:start position:0%
method two times to get the full name
the<01:29:32.960><c> first</c><01:29:33.120><c> time</c><01:29:33.360><c> we</c><01:29:33.440><c> call</c><01:29:33.600><c> it</c><01:29:33.679><c> it</c><01:29:33.840><c> returns</c>

01:29:34.229 --> 01:29:34.239 align:start position:0%
the first time we call it it returns
 

01:29:34.239 --> 01:29:35.669 align:start position:0%
the first time we call it it returns
mosh<01:29:34.560><c> the</c><01:29:34.719><c> second</c><01:29:34.960><c> time</c><01:29:35.199><c> we</c><01:29:35.280><c> call</c><01:29:35.520><c> it</c><01:29:35.600><c> it</c>

01:29:35.669 --> 01:29:35.679 align:start position:0%
mosh the second time we call it it
 

01:29:35.679 --> 01:29:36.229 align:start position:0%
mosh the second time we call it it
returns

01:29:36.229 --> 01:29:36.239 align:start position:0%
returns
 

01:29:36.239 --> 01:29:38.149 align:start position:0%
returns
hamidani<01:29:37.120><c> then</c><01:29:37.360><c> we</c><01:29:37.440><c> need</c><01:29:37.600><c> to</c><01:29:37.679><c> combine</c><01:29:38.000><c> these</c>

01:29:38.149 --> 01:29:38.159 align:start position:0%
hamidani then we need to combine these
 

01:29:38.159 --> 01:29:40.629 align:start position:0%
hamidani then we need to combine these
two<01:29:38.400><c> together</c><01:29:38.960><c> this</c><01:29:39.199><c> is</c><01:29:39.280><c> not</c><01:29:39.440><c> ideal</c>

01:29:40.629 --> 01:29:40.639 align:start position:0%
two together this is not ideal
 

01:29:40.639 --> 01:29:42.790 align:start position:0%
two together this is not ideal
so<01:29:40.800><c> that's</c><01:29:41.040><c> when</c><01:29:41.199><c> we</c><01:29:41.360><c> use</c><01:29:41.760><c> the</c><01:29:41.920><c> next</c><01:29:42.480><c> line</c>

01:29:42.790 --> 01:29:42.800 align:start position:0%
so that's when we use the next line
 

01:29:42.800 --> 01:29:44.709 align:start position:0%
so that's when we use the next line
method<01:29:43.520><c> with</c><01:29:43.679><c> this</c><01:29:43.840><c> method</c><01:29:44.159><c> we</c><01:29:44.320><c> get</c><01:29:44.480><c> the</c>

01:29:44.709 --> 01:29:44.719 align:start position:0%
method with this method we get the
 

01:29:44.719 --> 01:29:46.470 align:start position:0%
method with this method we get the
entire<01:29:45.120><c> line</c><01:29:45.360><c> that</c><01:29:45.440><c> the</c><01:29:45.600><c> user</c><01:29:45.920><c> enters</c><01:29:46.400><c> no</c>

01:29:46.470 --> 01:29:46.480 align:start position:0%
entire line that the user enters no
 

01:29:46.480 --> 01:29:49.110 align:start position:0%
entire line that the user enters no
matter<01:29:46.719><c> how</c><01:29:46.880><c> many</c><01:29:47.040><c> spaces</c><01:29:47.520><c> or</c><01:29:47.760><c> tabs</c><01:29:48.080><c> are</c><01:29:48.239><c> there</c>

01:29:49.110 --> 01:29:49.120 align:start position:0%
matter how many spaces or tabs are there
 

01:29:49.120 --> 01:29:52.310 align:start position:0%
matter how many spaces or tabs are there
take<01:29:49.280><c> a</c><01:29:49.360><c> look</c><01:29:50.840><c> so</c>

01:29:52.310 --> 01:29:52.320 align:start position:0%
take a look so
 

01:29:52.320 --> 01:29:55.669 align:start position:0%
take a look so
hamadani<01:29:53.920><c> and</c><01:29:54.239><c> we</c><01:29:54.400><c> get</c><01:29:54.560><c> the</c><01:29:54.639><c> full</c><01:29:54.880><c> name</c>

01:29:55.669 --> 01:29:55.679 align:start position:0%
hamadani and we get the full name
 

01:29:55.679 --> 01:29:58.950 align:start position:0%
hamadani and we get the full name
now<01:29:56.000><c> what</c><01:29:56.239><c> if</c><01:29:57.199><c> i</c><01:29:57.440><c> type</c><01:29:57.840><c> a</c><01:29:58.000><c> few</c><01:29:58.239><c> spaces</c><01:29:58.719><c> before</c>

01:29:58.950 --> 01:29:58.960 align:start position:0%
now what if i type a few spaces before
 

01:29:58.960 --> 01:29:59.830 align:start position:0%
now what if i type a few spaces before
my<01:29:59.120><c> name</c>

01:29:59.830 --> 01:29:59.840 align:start position:0%
my name
 

01:29:59.840 --> 01:30:03.030 align:start position:0%
my name
let's<01:30:00.000><c> see</c><01:30:00.159><c> what</c><01:30:00.320><c> happens</c><01:30:02.080><c> so</c><01:30:02.320><c> those</c><01:30:02.560><c> spaces</c>

01:30:03.030 --> 01:30:03.040 align:start position:0%
let's see what happens so those spaces
 

01:30:03.040 --> 01:30:04.149 align:start position:0%
let's see what happens so those spaces
also<01:30:03.280><c> appear</c><01:30:03.600><c> here</c>

01:30:04.149 --> 01:30:04.159 align:start position:0%
also appear here
 

01:30:04.159 --> 01:30:05.910 align:start position:0%
also appear here
and<01:30:04.239><c> this</c><01:30:04.400><c> looks</c><01:30:04.639><c> a</c><01:30:04.719><c> little</c><01:30:04.960><c> bit</c><01:30:05.120><c> odd</c><01:30:05.679><c> this</c><01:30:05.840><c> is</c>

01:30:05.910 --> 01:30:05.920 align:start position:0%
and this looks a little bit odd this is
 

01:30:05.920 --> 01:30:07.990 align:start position:0%
and this looks a little bit odd this is
where<01:30:06.080><c> we</c><01:30:06.239><c> use</c><01:30:06.400><c> the</c><01:30:06.560><c> trim</c><01:30:06.800><c> method</c><01:30:07.280><c> remember</c>

01:30:07.990 --> 01:30:08.000 align:start position:0%
where we use the trim method remember
 

01:30:08.000 --> 01:30:09.830 align:start position:0%
where we use the trim method remember
with<01:30:08.239><c> trim</c><01:30:08.560><c> we</c><01:30:08.719><c> can</c><01:30:08.800><c> get</c><01:30:09.040><c> rid</c><01:30:09.199><c> of</c><01:30:09.440><c> all</c><01:30:09.600><c> these</c>

01:30:09.830 --> 01:30:09.840 align:start position:0%
with trim we can get rid of all these
 

01:30:09.840 --> 01:30:11.430 align:start position:0%
with trim we can get rid of all these
white<01:30:10.080><c> spaces</c><01:30:10.639><c> before</c>

01:30:11.430 --> 01:30:11.440 align:start position:0%
white spaces before
 

01:30:11.440 --> 01:30:15.110 align:start position:0%
white spaces before
or<01:30:11.679><c> after</c><01:30:12.000><c> a</c><01:30:12.239><c> string</c><01:30:13.120><c> so</c><01:30:14.400><c> this</c><01:30:14.639><c> next</c><01:30:14.880><c> line</c>

01:30:15.110 --> 01:30:15.120 align:start position:0%
or after a string so this next line
 

01:30:15.120 --> 01:30:16.629 align:start position:0%
or after a string so this next line
method<01:30:15.440><c> returns</c><01:30:15.840><c> a</c><01:30:16.000><c> string</c><01:30:16.239><c> that</c><01:30:16.400><c> we</c><01:30:16.560><c> are</c>

01:30:16.629 --> 01:30:16.639 align:start position:0%
method returns a string that we are
 

01:30:16.639 --> 01:30:17.430 align:start position:0%
method returns a string that we are
storing

01:30:17.430 --> 01:30:17.440 align:start position:0%
storing
 

01:30:17.440 --> 01:30:19.910 align:start position:0%
storing
in<01:30:17.520><c> this</c><01:30:17.679><c> variable</c><01:30:18.159><c> right</c><01:30:18.960><c> now</c><01:30:19.280><c> just</c><01:30:19.520><c> before</c>

01:30:19.910 --> 01:30:19.920 align:start position:0%
in this variable right now just before
 

01:30:19.920 --> 01:30:20.950 align:start position:0%
in this variable right now just before
storing<01:30:20.239><c> the</c><01:30:20.400><c> result</c>

01:30:20.950 --> 01:30:20.960 align:start position:0%
storing the result
 

01:30:20.960 --> 01:30:23.510 align:start position:0%
storing the result
in<01:30:21.040><c> this</c><01:30:21.280><c> variable</c><01:30:22.400><c> here</c><01:30:22.560><c> we</c><01:30:22.639><c> can</c><01:30:22.800><c> use</c><01:30:22.960><c> the</c><01:30:23.120><c> dot</c>

01:30:23.510 --> 01:30:23.520 align:start position:0%
in this variable here we can use the dot
 

01:30:23.520 --> 01:30:24.790 align:start position:0%
in this variable here we can use the dot
operator<01:30:23.920><c> to</c><01:30:24.080><c> access</c>

01:30:24.790 --> 01:30:24.800 align:start position:0%
operator to access
 

01:30:24.800 --> 01:30:27.830 align:start position:0%
operator to access
the<01:30:25.040><c> members</c><01:30:25.440><c> of</c><01:30:25.520><c> this</c><01:30:25.840><c> string</c><01:30:26.239><c> object</c><01:30:27.360><c> so</c><01:30:27.600><c> we</c>

01:30:27.830 --> 01:30:27.840 align:start position:0%
the members of this string object so we
 

01:30:27.840 --> 01:30:28.229 align:start position:0%
the members of this string object so we
call

01:30:28.229 --> 01:30:28.239 align:start position:0%
call
 

01:30:28.239 --> 01:30:30.709 align:start position:0%
call
the<01:30:28.480><c> trim</c><01:30:28.800><c> method</c><01:30:29.760><c> and</c><01:30:30.000><c> then</c><01:30:30.320><c> store</c><01:30:30.560><c> the</c>

01:30:30.709 --> 01:30:30.719 align:start position:0%
the trim method and then store the
 

01:30:30.719 --> 01:30:31.430 align:start position:0%
the trim method and then store the
result

01:30:31.430 --> 01:30:31.440 align:start position:0%
result
 

01:30:31.440 --> 01:30:33.189 align:start position:0%
result
in<01:30:31.520><c> this</c><01:30:31.760><c> variable</c><01:30:32.480><c> once</c><01:30:32.719><c> again</c><01:30:32.960><c> we're</c>

01:30:33.189 --> 01:30:33.199 align:start position:0%
in this variable once again we're
 

01:30:33.199 --> 01:30:35.270 align:start position:0%
in this variable once again we're
chaining<01:30:33.679><c> multiple</c><01:30:34.080><c> methods</c><01:30:34.480><c> here</c>

01:30:35.270 --> 01:30:35.280 align:start position:0%
chaining multiple methods here
 

01:30:35.280 --> 01:30:38.550 align:start position:0%
chaining multiple methods here
let's<01:30:35.440><c> run</c><01:30:35.679><c> the</c><01:30:35.840><c> program</c><01:30:38.000><c> so</c>

01:30:38.550 --> 01:30:38.560 align:start position:0%
let's run the program so
 

01:30:38.560 --> 01:30:41.910 align:start position:0%
let's run the program so
a<01:30:38.719><c> few</c><01:30:38.880><c> spaces</c><01:30:39.360><c> mosh</c><01:30:39.600><c> haradani</c><01:30:41.040><c> and</c>

01:30:41.910 --> 01:30:41.920 align:start position:0%
a few spaces mosh haradani and
 

01:30:41.920 --> 01:30:49.430 align:start position:0%
a few spaces mosh haradani and
we<01:30:42.080><c> get</c><01:30:42.239><c> this</c><01:30:42.400><c> beautiful</c><01:30:46.840><c> output</c>

01:30:49.430 --> 01:30:49.440 align:start position:0%
we get this beautiful output
 

01:30:49.440 --> 01:30:51.430 align:start position:0%
we get this beautiful output
all<01:30:49.520><c> right</c><01:30:49.679><c> now</c><01:30:49.840><c> it's</c><01:30:50.000><c> time</c><01:30:50.239><c> for</c><01:30:50.320><c> a</c><01:30:50.480><c> project</c><01:30:51.280><c> i</c>

01:30:51.430 --> 01:30:51.440 align:start position:0%
all right now it's time for a project i
 

01:30:51.440 --> 01:30:52.709 align:start position:0%
all right now it's time for a project i
want<01:30:51.600><c> you</c><01:30:51.679><c> to</c><01:30:51.760><c> use</c><01:30:52.000><c> what</c><01:30:52.159><c> you</c><01:30:52.239><c> have</c><01:30:52.400><c> learned</c><01:30:52.639><c> in</c>

01:30:52.709 --> 01:30:52.719 align:start position:0%
want you to use what you have learned in
 

01:30:52.719 --> 01:30:53.669 align:start position:0%
want you to use what you have learned in
a<01:30:52.880><c> section</c>

01:30:53.669 --> 01:30:53.679 align:start position:0%
a section
 

01:30:53.679 --> 01:30:55.669 align:start position:0%
a section
and<01:30:53.920><c> build</c><01:30:54.239><c> a</c><01:30:54.400><c> mortgage</c><01:30:54.880><c> calculator</c><01:30:55.520><c> like</c>

01:30:55.669 --> 01:30:55.679 align:start position:0%
and build a mortgage calculator like
 

01:30:55.679 --> 01:30:58.149 align:start position:0%
and build a mortgage calculator like
this<01:30:56.400><c> so</c><01:30:56.719><c> when</c><01:30:56.880><c> we</c><01:30:57.040><c> run</c><01:30:57.199><c> this</c><01:30:57.360><c> program</c><01:30:57.760><c> we</c><01:30:57.920><c> get</c>

01:30:58.149 --> 01:30:58.159 align:start position:0%
this so when we run this program we get
 

01:30:58.159 --> 01:30:59.270 align:start position:0%
this so when we run this program we get
a<01:30:58.239><c> few</c><01:30:58.480><c> questions</c>

01:30:59.270 --> 01:30:59.280 align:start position:0%
a few questions
 

01:30:59.280 --> 01:31:01.350 align:start position:0%
a few questions
the<01:30:59.440><c> first</c><01:30:59.679><c> question</c><01:31:00.000><c> is</c><01:31:00.159><c> the</c><01:31:00.320><c> principal</c><01:31:00.960><c> or</c>

01:31:01.350 --> 01:31:01.360 align:start position:0%
the first question is the principal or
 

01:31:01.360 --> 01:31:03.510 align:start position:0%
the first question is the principal or
the<01:31:01.600><c> amount</c><01:31:02.000><c> of</c><01:31:02.159><c> loan</c><01:31:02.400><c> we</c><01:31:02.560><c> want</c><01:31:02.719><c> to</c><01:31:02.800><c> get</c>

01:31:03.510 --> 01:31:03.520 align:start position:0%
the amount of loan we want to get
 

01:31:03.520 --> 01:31:06.550 align:start position:0%
the amount of loan we want to get
let's<01:31:03.760><c> say</c><01:31:03.920><c> a</c><01:31:04.000><c> hundred</c><01:31:04.880><c> thousand</c><01:31:05.280><c> dollars</c><01:31:06.400><c> the</c>

01:31:06.550 --> 01:31:06.560 align:start position:0%
let's say a hundred thousand dollars the
 

01:31:06.560 --> 01:31:08.390 align:start position:0%
let's say a hundred thousand dollars the
second<01:31:06.880><c> question</c><01:31:07.280><c> is</c><01:31:07.440><c> the</c><01:31:07.679><c> annual</c>

01:31:08.390 --> 01:31:08.400 align:start position:0%
second question is the annual
 

01:31:08.400 --> 01:31:12.950 align:start position:0%
second question is the annual
interest<01:31:08.880><c> rate</c><01:31:09.600><c> let's</c><01:31:09.760><c> say</c><01:31:11.000><c> 3.92</c><01:31:12.000><c> percent</c>

01:31:12.950 --> 01:31:12.960 align:start position:0%
interest rate let's say 3.92 percent
 

01:31:12.960 --> 01:31:14.790 align:start position:0%
interest rate let's say 3.92 percent
and<01:31:13.120><c> the</c><01:31:13.199><c> third</c><01:31:13.440><c> question</c><01:31:13.840><c> is</c><01:31:14.000><c> period</c><01:31:14.560><c> in</c>

01:31:14.790 --> 01:31:14.800 align:start position:0%
and the third question is period in
 

01:31:14.800 --> 01:31:16.790 align:start position:0%
and the third question is period in
years<01:31:15.600><c> let's</c><01:31:15.760><c> say</c><01:31:15.920><c> we</c><01:31:16.080><c> want</c><01:31:16.159><c> to</c><01:31:16.239><c> get</c><01:31:16.400><c> a</c><01:31:16.560><c> loan</c>

01:31:16.790 --> 01:31:16.800 align:start position:0%
years let's say we want to get a loan
 

01:31:16.800 --> 01:31:18.149 align:start position:0%
years let's say we want to get a loan
for<01:31:17.040><c> 30</c><01:31:17.360><c> years</c>

01:31:18.149 --> 01:31:18.159 align:start position:0%
for 30 years
 

01:31:18.159 --> 01:31:20.070 align:start position:0%
for 30 years
so<01:31:18.480><c> this</c><01:31:18.639><c> program</c><01:31:19.040><c> calculates</c><01:31:19.520><c> our</c><01:31:19.679><c> monthly</c>

01:31:20.070 --> 01:31:20.080 align:start position:0%
so this program calculates our monthly
 

01:31:20.080 --> 01:31:21.830 align:start position:0%
so this program calculates our monthly
payments<01:31:20.560><c> and</c><01:31:21.120><c> displays</c><01:31:21.600><c> it</c>

01:31:21.830 --> 01:31:21.840 align:start position:0%
payments and displays it
 

01:31:21.840 --> 01:31:24.310 align:start position:0%
payments and displays it
as<01:31:22.000><c> a</c><01:31:22.080><c> currency</c><01:31:23.120><c> this</c><01:31:23.360><c> is</c><01:31:23.440><c> a</c><01:31:23.600><c> great</c><01:31:23.920><c> exercise</c>

01:31:24.310 --> 01:31:24.320 align:start position:0%
as a currency this is a great exercise
 

01:31:24.320 --> 01:31:26.070 align:start position:0%
as a currency this is a great exercise
for<01:31:24.480><c> you</c><01:31:24.639><c> to</c><01:31:24.800><c> practice</c><01:31:25.360><c> all</c><01:31:25.440><c> the</c><01:31:25.600><c> materials</c>

01:31:26.070 --> 01:31:26.080 align:start position:0%
for you to practice all the materials
 

01:31:26.080 --> 01:31:27.510 align:start position:0%
for you to practice all the materials
you<01:31:26.159><c> learn</c><01:31:26.400><c> in</c><01:31:26.480><c> the</c><01:31:26.560><c> section</c>

01:31:27.510 --> 01:31:27.520 align:start position:0%
you learn in the section
 

01:31:27.520 --> 01:31:28.870 align:start position:0%
you learn in the section
now<01:31:27.760><c> before</c><01:31:28.000><c> we</c><01:31:28.080><c> get</c><01:31:28.239><c> started</c><01:31:28.560><c> i</c><01:31:28.639><c> want</c><01:31:28.719><c> to</c><01:31:28.800><c> give</c>

01:31:28.870 --> 01:31:28.880 align:start position:0%
now before we get started i want to give
 

01:31:28.880 --> 01:31:31.510 align:start position:0%
now before we get started i want to give
you<01:31:29.040><c> a</c><01:31:29.120><c> few</c><01:31:29.360><c> hints</c><01:31:30.320><c> here's</c><01:31:30.639><c> the</c><01:31:30.800><c> formula</c><01:31:31.280><c> for</c>

01:31:31.510 --> 01:31:31.520 align:start position:0%
you a few hints here's the formula for
 

01:31:31.520 --> 01:31:33.030 align:start position:0%
you a few hints here's the formula for
calculating<01:31:32.159><c> the</c><01:31:32.320><c> mortgage</c>

01:31:33.030 --> 01:31:33.040 align:start position:0%
calculating the mortgage
 

01:31:33.040 --> 01:31:35.110 align:start position:0%
calculating the mortgage
or<01:31:33.120><c> the</c><01:31:33.280><c> monthly</c><01:31:33.760><c> payments</c><01:31:34.560><c> i</c><01:31:34.719><c> found</c><01:31:34.960><c> this</c>

01:31:35.110 --> 01:31:35.120 align:start position:0%
or the monthly payments i found this
 

01:31:35.120 --> 01:31:36.709 align:start position:0%
or the monthly payments i found this
page<01:31:35.360><c> on</c><01:31:35.560><c> wikihow.com</c>

01:31:36.709 --> 01:31:36.719 align:start position:0%
page on wikihow.com
 

01:31:36.719 --> 01:31:39.510 align:start position:0%
page on wikihow.com
it's<01:31:36.880><c> called</c><01:31:37.280><c> calculate</c><01:31:38.000><c> mortgage</c><01:31:38.560><c> payments</c>

01:31:39.510 --> 01:31:39.520 align:start position:0%
it's called calculate mortgage payments
 

01:31:39.520 --> 01:31:41.350 align:start position:0%
it's called calculate mortgage payments
so<01:31:39.679><c> let's</c><01:31:39.840><c> see</c><01:31:40.000><c> how</c><01:31:40.239><c> this</c><01:31:40.480><c> works</c>

01:31:41.350 --> 01:31:41.360 align:start position:0%
so let's see how this works
 

01:31:41.360 --> 01:31:43.910 align:start position:0%
so let's see how this works
mortgage<01:31:41.920><c> equals</c><01:31:42.560><c> p</c><01:31:42.800><c> or</c><01:31:43.040><c> principal</c><01:31:43.600><c> or</c><01:31:43.760><c> the</c>

01:31:43.910 --> 01:31:43.920 align:start position:0%
mortgage equals p or principal or the
 

01:31:43.920 --> 01:31:45.270 align:start position:0%
mortgage equals p or principal or the
amount<01:31:44.239><c> we're</c><01:31:44.400><c> going</c><01:31:44.560><c> to</c><01:31:44.719><c> loan</c>

01:31:45.270 --> 01:31:45.280 align:start position:0%
amount we're going to loan
 

01:31:45.280 --> 01:31:48.470 align:start position:0%
amount we're going to loan
multiplied<01:31:45.840><c> by</c><01:31:46.159><c> r</c><01:31:46.800><c> which</c><01:31:47.120><c> is</c><01:31:47.679><c> our</c><01:31:47.920><c> monthly</c>

01:31:48.470 --> 01:31:48.480 align:start position:0%
multiplied by r which is our monthly
 

01:31:48.480 --> 01:31:50.790 align:start position:0%
multiplied by r which is our monthly
interest<01:31:48.960><c> rate</c><01:31:49.280><c> this</c><01:31:49.520><c> is</c><01:31:49.760><c> very</c><01:31:50.000><c> important</c>

01:31:50.790 --> 01:31:50.800 align:start position:0%
interest rate this is very important
 

01:31:50.800 --> 01:31:52.870 align:start position:0%
interest rate this is very important
so<01:31:50.960><c> this</c><01:31:51.120><c> number</c><01:31:51.360><c> that</c><01:31:51.520><c> we</c><01:31:51.600><c> get</c><01:31:51.840><c> here</c><01:31:52.480><c> is</c><01:31:52.639><c> our</c>

01:31:52.870 --> 01:31:52.880 align:start position:0%
so this number that we get here is our
 

01:31:52.880 --> 01:31:54.229 align:start position:0%
so this number that we get here is our
annual<01:31:53.280><c> interest</c><01:31:53.679><c> rate</c>

01:31:54.229 --> 01:31:54.239 align:start position:0%
annual interest rate
 

01:31:54.239 --> 01:31:56.790 align:start position:0%
annual interest rate
we<01:31:54.400><c> need</c><01:31:54.480><c> to</c><01:31:54.639><c> divide</c><01:31:54.960><c> this</c><01:31:55.120><c> by</c><01:31:55.360><c> 12.</c><01:31:56.239><c> also</c><01:31:56.639><c> take</c>

01:31:56.790 --> 01:31:56.800 align:start position:0%
we need to divide this by 12. also take
 

01:31:56.800 --> 01:31:57.990 align:start position:0%
we need to divide this by 12. also take
into<01:31:56.960><c> account</c><01:31:57.280><c> that</c><01:31:57.360><c> this</c><01:31:57.520><c> number</c><01:31:57.920><c> is</c>

01:31:57.990 --> 01:31:58.000 align:start position:0%
into account that this number is
 

01:31:58.000 --> 01:31:59.669 align:start position:0%
into account that this number is
represented<01:31:58.639><c> as</c><01:31:58.719><c> a</c><01:31:58.800><c> percent</c>

01:31:59.669 --> 01:31:59.679 align:start position:0%
represented as a percent
 

01:31:59.679 --> 01:32:01.510 align:start position:0%
represented as a percent
to<01:31:59.840><c> calculate</c><01:32:00.320><c> the</c><01:32:00.560><c> actual</c><01:32:00.960><c> interest</c><01:32:01.280><c> rate</c>

01:32:01.510 --> 01:32:01.520 align:start position:0%
to calculate the actual interest rate
 

01:32:01.520 --> 01:32:02.950 align:start position:0%
to calculate the actual interest rate
you<01:32:01.600><c> need</c><01:32:01.760><c> to</c><01:32:01.840><c> divide</c><01:32:02.239><c> this</c><01:32:02.400><c> number</c>

01:32:02.950 --> 01:32:02.960 align:start position:0%
you need to divide this number
 

01:32:02.960 --> 01:32:06.149 align:start position:0%
you need to divide this number
by<01:32:03.199><c> 100</c><01:32:04.239><c> so</c><01:32:04.560><c> in</c><01:32:04.639><c> this</c><01:32:04.880><c> example</c><01:32:05.600><c> the</c><01:32:05.840><c> interest</c>

01:32:06.149 --> 01:32:06.159 align:start position:0%
by 100 so in this example the interest
 

01:32:06.159 --> 01:32:09.830 align:start position:0%
by 100 so in this example the interest
rate<01:32:06.400><c> is</c><01:32:08.280><c> 0.0392</c>

01:32:09.830 --> 01:32:09.840 align:start position:0%
rate is 0.0392
 

01:32:09.840 --> 01:32:11.910 align:start position:0%
rate is 0.0392
so<01:32:10.000><c> whatever</c><01:32:10.400><c> the</c><01:32:10.480><c> user</c><01:32:10.800><c> enters</c><01:32:11.360><c> divided</c><01:32:11.760><c> by</c>

01:32:11.910 --> 01:32:11.920 align:start position:0%
so whatever the user enters divided by
 

01:32:11.920 --> 01:32:13.030 align:start position:0%
so whatever the user enters divided by
100<01:32:12.480><c> and</c><01:32:12.639><c> then</c>

01:32:13.030 --> 01:32:13.040 align:start position:0%
100 and then
 

01:32:13.040 --> 01:32:15.189 align:start position:0%
100 and then
divided<01:32:13.440><c> by</c><01:32:13.600><c> 12</c><01:32:14.159><c> to</c><01:32:14.320><c> get</c><01:32:14.480><c> to</c><01:32:14.639><c> the</c><01:32:14.719><c> monthly</c>

01:32:15.189 --> 01:32:15.199 align:start position:0%
divided by 12 to get to the monthly
 

01:32:15.199 --> 01:32:16.709 align:start position:0%
divided by 12 to get to the monthly
interest<01:32:15.600><c> rate</c>

01:32:16.709 --> 01:32:16.719 align:start position:0%
interest rate
 

01:32:16.719 --> 01:32:18.149 align:start position:0%
interest rate
now<01:32:16.880><c> we</c><01:32:17.040><c> have</c><01:32:17.120><c> this</c><01:32:17.280><c> monthly</c><01:32:17.600><c> interest</c><01:32:18.000><c> rate</c>

01:32:18.149 --> 01:32:18.159 align:start position:0%
now we have this monthly interest rate
 

01:32:18.159 --> 01:32:19.910 align:start position:0%
now we have this monthly interest rate
we<01:32:18.320><c> need</c><01:32:18.400><c> to</c><01:32:18.480><c> multiply</c><01:32:19.040><c> this</c><01:32:19.520><c> by</c><01:32:19.679><c> this</c>

01:32:19.910 --> 01:32:19.920 align:start position:0%
we need to multiply this by this
 

01:32:19.920 --> 01:32:21.030 align:start position:0%
we need to multiply this by this
expression

01:32:21.030 --> 01:32:21.040 align:start position:0%
expression
 

01:32:21.040 --> 01:32:23.110 align:start position:0%
expression
here<01:32:21.280><c> we</c><01:32:21.360><c> need</c><01:32:21.520><c> to</c><01:32:21.600><c> add</c><01:32:22.159><c> 1</c><01:32:22.400><c> to</c><01:32:22.560><c> this</c><01:32:22.719><c> interest</c>

01:32:23.110 --> 01:32:23.120 align:start position:0%
here we need to add 1 to this interest
 

01:32:23.120 --> 01:32:24.229 align:start position:0%
here we need to add 1 to this interest
rate<01:32:23.920><c> and</c>

01:32:24.229 --> 01:32:24.239 align:start position:0%
rate and
 

01:32:24.239 --> 01:32:26.950 align:start position:0%
rate and
raise<01:32:24.480><c> it</c><01:32:24.560><c> to</c><01:32:24.719><c> the</c><01:32:24.880><c> power</c><01:32:25.120><c> of</c><01:32:25.440><c> n</c><01:32:26.080><c> where</c><01:32:26.560><c> n</c><01:32:26.800><c> is</c>

01:32:26.950 --> 01:32:26.960 align:start position:0%
raise it to the power of n where n is
 

01:32:26.960 --> 01:32:28.629 align:start position:0%
raise it to the power of n where n is
the<01:32:27.120><c> number</c><01:32:27.360><c> of</c><01:32:27.600><c> payments</c>

01:32:28.629 --> 01:32:28.639 align:start position:0%
the number of payments
 

01:32:28.639 --> 01:32:31.110 align:start position:0%
the number of payments
so<01:32:28.880><c> we</c><01:32:28.960><c> need</c><01:32:29.120><c> to</c><01:32:29.280><c> multiply</c><01:32:29.760><c> this</c><01:32:29.920><c> number</c><01:32:30.400><c> by</c><01:32:30.639><c> 12</c>

01:32:31.110 --> 01:32:31.120 align:start position:0%
so we need to multiply this number by 12
 

01:32:31.120 --> 01:32:32.149 align:start position:0%
so we need to multiply this number by 12
or<01:32:31.280><c> 12</c><01:32:31.600><c> months</c>

01:32:32.149 --> 01:32:32.159 align:start position:0%
or 12 months
 

01:32:32.159 --> 01:32:34.870 align:start position:0%
or 12 months
to<01:32:32.400><c> calculate</c><01:32:32.880><c> the</c><01:32:33.040><c> number</c><01:32:33.280><c> of</c><01:32:33.440><c> payments</c><01:32:34.639><c> now</c>

01:32:34.870 --> 01:32:34.880 align:start position:0%
to calculate the number of payments now
 

01:32:34.880 --> 01:32:35.990 align:start position:0%
to calculate the number of payments now
to<01:32:35.040><c> raise</c><01:32:35.280><c> this</c><01:32:35.440><c> number</c>

01:32:35.990 --> 01:32:36.000 align:start position:0%
to raise this number
 

01:32:36.000 --> 01:32:38.149 align:start position:0%
to raise this number
to<01:32:36.159><c> the</c><01:32:36.320><c> power</c><01:32:36.639><c> of</c><01:32:36.800><c> n</c><01:32:37.360><c> you</c><01:32:37.520><c> need</c><01:32:37.679><c> to</c><01:32:37.760><c> use</c><01:32:37.920><c> the</c>

01:32:38.149 --> 01:32:38.159 align:start position:0%
to the power of n you need to use the
 

01:32:38.159 --> 01:32:39.030 align:start position:0%
to the power of n you need to use the
power<01:32:38.480><c> method</c>

01:32:39.030 --> 01:32:39.040 align:start position:0%
power method
 

01:32:39.040 --> 01:32:42.310 align:start position:0%
power method
of<01:32:39.120><c> the</c><01:32:39.360><c> math</c><01:32:39.600><c> class</c><01:32:40.960><c> so</c><01:32:41.199><c> this</c><01:32:41.440><c> math</c><01:32:41.760><c> class</c>

01:32:42.310 --> 01:32:42.320 align:start position:0%
of the math class so this math class
 

01:32:42.320 --> 01:32:44.790 align:start position:0%
of the math class so this math class
has<01:32:42.480><c> this</c><01:32:42.800><c> pow</c><01:32:43.199><c> or</c><01:32:43.440><c> power</c><01:32:43.760><c> method</c><01:32:44.400><c> that</c><01:32:44.560><c> takes</c>

01:32:44.790 --> 01:32:44.800 align:start position:0%
has this pow or power method that takes
 

01:32:44.800 --> 01:32:46.390 align:start position:0%
has this pow or power method that takes
two<01:32:45.040><c> arguments</c><01:32:45.440><c> or</c><01:32:45.520><c> two</c><01:32:45.679><c> values</c>

01:32:46.390 --> 01:32:46.400 align:start position:0%
two arguments or two values
 

01:32:46.400 --> 01:32:49.910 align:start position:0%
two arguments or two values
a<01:32:46.639><c> and</c><01:32:46.800><c> b</c><01:32:48.000><c> so</c><01:32:48.159><c> go</c><01:32:48.320><c> ahead</c><01:32:48.560><c> and</c><01:32:48.639><c> spend</c><01:32:49.199><c> 10</c><01:32:49.440><c> to</c><01:32:49.600><c> 15</c>

01:32:49.910 --> 01:32:49.920 align:start position:0%
a and b so go ahead and spend 10 to 15
 

01:32:49.920 --> 01:32:51.270 align:start position:0%
a and b so go ahead and spend 10 to 15
minutes<01:32:50.239><c> on</c><01:32:50.320><c> this</c><01:32:50.480><c> exercise</c>

01:32:51.270 --> 01:32:51.280 align:start position:0%
minutes on this exercise
 

01:32:51.280 --> 01:32:52.830 align:start position:0%
minutes on this exercise
when<01:32:51.440><c> you're</c><01:32:51.600><c> done</c><01:32:52.000><c> come</c><01:32:52.159><c> back</c><01:32:52.400><c> see</c><01:32:52.560><c> my</c>

01:32:52.830 --> 01:32:52.840 align:start position:0%
when you're done come back see my
 

01:32:52.840 --> 01:32:59.669 align:start position:0%
when you're done come back see my
solution

01:32:59.669 --> 01:32:59.679 align:start position:0%
 
 

01:32:59.679 --> 01:33:00.950 align:start position:0%
 
all<01:32:59.840><c> right</c><01:32:59.920><c> let's</c><01:33:00.080><c> see</c><01:33:00.239><c> what</c><01:33:00.320><c> i've</c><01:33:00.480><c> done</c><01:33:00.719><c> here</c>

01:33:00.950 --> 01:33:00.960 align:start position:0%
all right let's see what i've done here
 

01:33:00.960 --> 01:33:02.470 align:start position:0%
all right let's see what i've done here
and<01:33:01.120><c> by</c><01:33:01.280><c> the</c><01:33:01.360><c> way</c><01:33:01.600><c> don't</c><01:33:01.760><c> worry</c><01:33:01.920><c> if</c><01:33:02.080><c> your</c><01:33:02.159><c> code</c>

01:33:02.470 --> 01:33:02.480 align:start position:0%
and by the way don't worry if your code
 

01:33:02.480 --> 01:33:03.590 align:start position:0%
and by the way don't worry if your code
is<01:33:02.560><c> different</c><01:33:02.880><c> from</c><01:33:03.120><c> mine</c>

01:33:03.590 --> 01:33:03.600 align:start position:0%
is different from mine
 

01:33:03.600 --> 01:33:05.590 align:start position:0%
is different from mine
we<01:33:03.760><c> all</c><01:33:04.000><c> think</c><01:33:04.239><c> and</c><01:33:04.400><c> code</c><01:33:04.719><c> differently</c><01:33:05.440><c> so</c>

01:33:05.590 --> 01:33:05.600 align:start position:0%
we all think and code differently so
 

01:33:05.600 --> 01:33:07.030 align:start position:0%
we all think and code differently so
it's<01:33:05.760><c> perfectly</c><01:33:06.159><c> fine</c><01:33:06.400><c> if</c><01:33:06.560><c> your</c><01:33:06.639><c> code</c><01:33:06.880><c> is</c>

01:33:07.030 --> 01:33:07.040 align:start position:0%
it's perfectly fine if your code is
 

01:33:07.040 --> 01:33:07.590 align:start position:0%
it's perfectly fine if your code is
different

01:33:07.590 --> 01:33:07.600 align:start position:0%
different
 

01:33:07.600 --> 01:33:09.110 align:start position:0%
different
just<01:33:07.760><c> look</c><01:33:07.920><c> at</c><01:33:08.000><c> my</c><01:33:08.159><c> code</c><01:33:08.480><c> see</c><01:33:08.639><c> what</c><01:33:08.800><c> i've</c><01:33:08.960><c> done</c>

01:33:09.110 --> 01:33:09.120 align:start position:0%
just look at my code see what i've done
 

01:33:09.120 --> 01:33:10.950 align:start position:0%
just look at my code see what i've done
here<01:33:09.440><c> and</c><01:33:09.760><c> see</c><01:33:09.920><c> if</c><01:33:10.000><c> there</c><01:33:10.159><c> are</c><01:33:10.320><c> ways</c><01:33:10.560><c> you</c><01:33:10.639><c> can</c>

01:33:10.950 --> 01:33:10.960 align:start position:0%
here and see if there are ways you can
 

01:33:10.960 --> 01:33:13.189 align:start position:0%
here and see if there are ways you can
improve<01:33:11.280><c> your</c><01:33:11.520><c> code</c><01:33:12.080><c> that's</c><01:33:12.320><c> what</c><01:33:12.560><c> matters</c>

01:33:13.189 --> 01:33:13.199 align:start position:0%
improve your code that's what matters
 

01:33:13.199 --> 01:33:14.070 align:start position:0%
improve your code that's what matters
okay

01:33:14.070 --> 01:33:14.080 align:start position:0%
okay
 

01:33:14.080 --> 01:33:16.470 align:start position:0%
okay
so<01:33:14.880><c> here</c><01:33:15.120><c> in</c><01:33:15.280><c> our</c><01:33:15.440><c> main</c><01:33:15.679><c> method</c><01:33:16.000><c> first</c><01:33:16.320><c> i</c><01:33:16.400><c> have</c>

01:33:16.470 --> 01:33:16.480 align:start position:0%
so here in our main method first i have
 

01:33:16.480 --> 01:33:17.430 align:start position:0%
so here in our main method first i have
declared

01:33:17.430 --> 01:33:17.440 align:start position:0%
declared
 

01:33:17.440 --> 01:33:20.070 align:start position:0%
declared
two<01:33:17.679><c> final</c><01:33:18.080><c> variables</c><01:33:18.560><c> or</c><01:33:19.040><c> constants</c><01:33:19.920><c> the</c>

01:33:20.070 --> 01:33:20.080 align:start position:0%
two final variables or constants the
 

01:33:20.080 --> 01:33:21.910 align:start position:0%
two final variables or constants the
first<01:33:20.320><c> one</c><01:33:20.480><c> is</c><01:33:20.639><c> months</c><01:33:20.960><c> in</c><01:33:21.120><c> year</c><01:33:21.520><c> which</c><01:33:21.760><c> i've</c>

01:33:21.910 --> 01:33:21.920 align:start position:0%
first one is months in year which i've
 

01:33:21.920 --> 01:33:22.950 align:start position:0%
first one is months in year which i've
set<01:33:22.080><c> to</c><01:33:22.239><c> 12</c>

01:33:22.950 --> 01:33:22.960 align:start position:0%
set to 12
 

01:33:22.960 --> 01:33:24.629 align:start position:0%
set to 12
and<01:33:23.120><c> the</c><01:33:23.199><c> second</c><01:33:23.520><c> one</c><01:33:23.679><c> is</c><01:33:23.840><c> percent</c><01:33:24.239><c> which</c><01:33:24.400><c> i've</c>

01:33:24.629 --> 01:33:24.639 align:start position:0%
and the second one is percent which i've
 

01:33:24.639 --> 01:33:26.870 align:start position:0%
and the second one is percent which i've
set<01:33:24.800><c> to</c><01:33:24.960><c> 100.</c><01:33:25.760><c> the</c><01:33:25.920><c> reason</c><01:33:26.159><c> i</c><01:33:26.320><c> declared</c><01:33:26.639><c> this</c>

01:33:26.870 --> 01:33:26.880 align:start position:0%
set to 100. the reason i declared this
 

01:33:26.880 --> 01:33:27.669 align:start position:0%
set to 100. the reason i declared this
constant

01:33:27.669 --> 01:33:27.679 align:start position:0%
constant
 

01:33:27.679 --> 01:33:29.510 align:start position:0%
constant
is<01:33:27.840><c> that</c><01:33:28.000><c> i</c><01:33:28.080><c> didn't</c><01:33:28.320><c> want</c><01:33:28.480><c> to</c><01:33:28.560><c> have</c><01:33:29.120><c> magic</c>

01:33:29.510 --> 01:33:29.520 align:start position:0%
is that i didn't want to have magic
 

01:33:29.520 --> 01:33:31.030 align:start position:0%
is that i didn't want to have magic
numbers<01:33:29.920><c> in</c><01:33:30.080><c> this</c><01:33:30.239><c> code</c>

01:33:31.030 --> 01:33:31.040 align:start position:0%
numbers in this code
 

01:33:31.040 --> 01:33:33.510 align:start position:0%
numbers in this code
so<01:33:31.440><c> over</c><01:33:31.679><c> here</c><01:33:32.560><c> where</c><01:33:32.719><c> we</c><01:33:32.960><c> calculate</c><01:33:33.360><c> the</c>

01:33:33.510 --> 01:33:33.520 align:start position:0%
so over here where we calculate the
 

01:33:33.520 --> 01:33:34.709 align:start position:0%
so over here where we calculate the
monthly<01:33:34.000><c> interest</c>

01:33:34.709 --> 01:33:34.719 align:start position:0%
monthly interest
 

01:33:34.719 --> 01:33:36.870 align:start position:0%
monthly interest
we<01:33:34.880><c> get</c><01:33:35.040><c> the</c><01:33:35.120><c> annual</c><01:33:35.520><c> interest</c><01:33:36.320><c> and</c><01:33:36.560><c> divide</c><01:33:36.800><c> it</c>

01:33:36.870 --> 01:33:36.880 align:start position:0%
we get the annual interest and divide it
 

01:33:36.880 --> 01:33:37.830 align:start position:0%
we get the annual interest and divide it
by<01:33:37.040><c> percent</c>

01:33:37.830 --> 01:33:37.840 align:start position:0%
by percent
 

01:33:37.840 --> 01:33:40.229 align:start position:0%
by percent
and<01:33:38.000><c> then</c><01:33:38.560><c> months</c><01:33:38.880><c> in</c><01:33:39.040><c> year</c><01:33:39.520><c> this</c><01:33:39.760><c> code</c><01:33:40.080><c> is</c>

01:33:40.229 --> 01:33:40.239 align:start position:0%
and then months in year this code is
 

01:33:40.239 --> 01:33:41.830 align:start position:0%
and then months in year this code is
very<01:33:40.520><c> self-explanatory</c>

01:33:41.830 --> 01:33:41.840 align:start position:0%
very self-explanatory
 

01:33:41.840 --> 01:33:43.430 align:start position:0%
very self-explanatory
someone<01:33:42.159><c> else</c><01:33:42.320><c> reading</c><01:33:42.560><c> this</c><01:33:42.719><c> code</c><01:33:43.040><c> will</c><01:33:43.280><c> have</c>

01:33:43.430 --> 01:33:43.440 align:start position:0%
someone else reading this code will have
 

01:33:43.440 --> 01:33:45.189 align:start position:0%
someone else reading this code will have
no<01:33:43.760><c> problem</c><01:33:44.080><c> understanding</c><01:33:44.560><c> what's</c><01:33:44.800><c> going</c><01:33:45.040><c> on</c>

01:33:45.189 --> 01:33:45.199 align:start position:0%
no problem understanding what's going on
 

01:33:45.199 --> 01:33:45.750 align:start position:0%
no problem understanding what's going on
here

01:33:45.750 --> 01:33:45.760 align:start position:0%
here
 

01:33:45.760 --> 01:33:47.910 align:start position:0%
here
in<01:33:45.920><c> contrast</c><01:33:46.800><c> if</c><01:33:46.960><c> you</c><01:33:47.040><c> had</c><01:33:47.199><c> a</c><01:33:47.280><c> magic</c><01:33:47.600><c> number</c>

01:33:47.910 --> 01:33:47.920 align:start position:0%
in contrast if you had a magic number
 

01:33:47.920 --> 01:33:50.149 align:start position:0%
in contrast if you had a magic number
here<01:33:48.159><c> like</c><01:33:48.719><c> divide</c><01:33:49.120><c> by</c><01:33:49.360><c> 12</c><01:33:49.760><c> and</c><01:33:49.840><c> then</c>

01:33:50.149 --> 01:33:50.159 align:start position:0%
here like divide by 12 and then
 

01:33:50.159 --> 01:33:52.310 align:start position:0%
here like divide by 12 and then
4<01:33:50.560><c> whatever</c><01:33:51.440><c> someone</c><01:33:51.840><c> else</c><01:33:51.920><c> reading</c><01:33:52.239><c> this</c>

01:33:52.310 --> 01:33:52.320 align:start position:0%
4 whatever someone else reading this
 

01:33:52.320 --> 01:33:53.270 align:start position:0%
4 whatever someone else reading this
code<01:33:52.560><c> would</c><01:33:52.800><c> wonder</c>

01:33:53.270 --> 01:33:53.280 align:start position:0%
code would wonder
 

01:33:53.280 --> 01:33:55.669 align:start position:0%
code would wonder
what<01:33:53.520><c> is</c><01:33:53.600><c> this</c><01:33:53.760><c> 4</c><01:33:54.000><c> doing</c><01:33:54.239><c> here</c><01:33:54.400><c> what</c><01:33:54.639><c> is</c><01:33:54.800><c> 12</c><01:33:55.520><c> now</c>

01:33:55.669 --> 01:33:55.679 align:start position:0%
what is this 4 doing here what is 12 now
 

01:33:55.679 --> 01:33:57.430 align:start position:0%
what is this 4 doing here what is 12 now
it's<01:33:55.920><c> quite</c><01:33:56.239><c> obvious</c><01:33:56.560><c> to</c><01:33:56.639><c> you</c><01:33:56.800><c> that</c><01:33:56.880><c> 12</c><01:33:57.199><c> is</c><01:33:57.360><c> the</c>

01:33:57.430 --> 01:33:57.440 align:start position:0%
it's quite obvious to you that 12 is the
 

01:33:57.440 --> 01:33:59.510 align:start position:0%
it's quite obvious to you that 12 is the
number<01:33:57.600><c> of</c><01:33:57.760><c> months</c><01:33:58.080><c> in</c><01:33:58.159><c> a</c><01:33:58.320><c> year</c><01:33:58.639><c> but</c><01:33:58.880><c> trust</c><01:33:59.199><c> me</c>

01:33:59.510 --> 01:33:59.520 align:start position:0%
number of months in a year but trust me
 

01:33:59.520 --> 01:34:01.189 align:start position:0%
number of months in a year but trust me
sometimes<01:34:00.000><c> other</c><01:34:00.159><c> people</c><01:34:00.400><c> cannot</c><01:34:00.800><c> see</c><01:34:00.960><c> this</c>

01:34:01.189 --> 01:34:01.199 align:start position:0%
sometimes other people cannot see this
 

01:34:01.199 --> 01:34:02.709 align:start position:0%
sometimes other people cannot see this
straight<01:34:01.520><c> away</c><01:34:02.239><c> so</c>

01:34:02.709 --> 01:34:02.719 align:start position:0%
straight away so
 

01:34:02.719 --> 01:34:05.510 align:start position:0%
straight away so
as<01:34:02.960><c> a</c><01:34:03.040><c> best</c><01:34:03.360><c> practice</c><01:34:04.239><c> avoid</c><01:34:04.719><c> magic</c><01:34:05.120><c> numbers</c>

01:34:05.510 --> 01:34:05.520 align:start position:0%
as a best practice avoid magic numbers
 

01:34:05.520 --> 01:34:06.470 align:start position:0%
as a best practice avoid magic numbers
in<01:34:05.600><c> your</c><01:34:05.760><c> code</c>

01:34:06.470 --> 01:34:06.480 align:start position:0%
in your code
 

01:34:06.480 --> 01:34:09.110 align:start position:0%
in your code
always<01:34:06.800><c> use</c><01:34:07.120><c> constants</c><01:34:07.840><c> or</c><01:34:08.320><c> final</c><01:34:08.639><c> variables</c>

01:34:09.110 --> 01:34:09.120 align:start position:0%
always use constants or final variables
 

01:34:09.120 --> 01:34:11.189 align:start position:0%
always use constants or final variables
to<01:34:09.280><c> describe</c><01:34:09.760><c> them</c>

01:34:11.189 --> 01:34:11.199 align:start position:0%
to describe them
 

01:34:11.199 --> 01:34:14.629 align:start position:0%
to describe them
so<01:34:11.520><c> let's</c><01:34:11.760><c> revert</c><01:34:12.080><c> this</c><01:34:12.320><c> back</c><01:34:13.280><c> all</c><01:34:13.440><c> right</c>

01:34:14.629 --> 01:34:14.639 align:start position:0%
so let's revert this back all right
 

01:34:14.639 --> 01:34:16.550 align:start position:0%
so let's revert this back all right
so<01:34:14.880><c> after</c><01:34:15.199><c> declaring</c><01:34:15.600><c> this</c><01:34:15.840><c> constant</c><01:34:16.320><c> i</c><01:34:16.400><c> have</c>

01:34:16.550 --> 01:34:16.560 align:start position:0%
so after declaring this constant i have
 

01:34:16.560 --> 01:34:18.709 align:start position:0%
so after declaring this constant i have
created<01:34:16.880><c> this</c><01:34:17.040><c> scanner</c><01:34:17.520><c> object</c>

01:34:18.709 --> 01:34:18.719 align:start position:0%
created this scanner object
 

01:34:18.719 --> 01:34:21.350 align:start position:0%
created this scanner object
here<01:34:18.880><c> we</c><01:34:19.040><c> ask</c><01:34:19.280><c> the</c><01:34:19.360><c> first</c><01:34:19.679><c> question</c><01:34:20.159><c> principle</c>

01:34:21.350 --> 01:34:21.360 align:start position:0%
here we ask the first question principle
 

01:34:21.360 --> 01:34:21.830 align:start position:0%
here we ask the first question principle
and

01:34:21.830 --> 01:34:21.840 align:start position:0%
and
 

01:34:21.840 --> 01:34:24.310 align:start position:0%
and
we<01:34:22.000><c> read</c><01:34:22.239><c> the</c><01:34:22.320><c> answer</c><01:34:23.120><c> as</c><01:34:23.280><c> an</c><01:34:23.440><c> integer</c><01:34:24.159><c> i</c>

01:34:24.310 --> 01:34:24.320 align:start position:0%
we read the answer as an integer i
 

01:34:24.320 --> 01:34:26.310 align:start position:0%
we read the answer as an integer i
thought<01:34:24.560><c> integer</c><01:34:24.960><c> is</c><01:34:25.040><c> a</c><01:34:25.120><c> good</c><01:34:25.280><c> data</c><01:34:25.600><c> type</c><01:34:25.840><c> for</c>

01:34:26.310 --> 01:34:26.320 align:start position:0%
thought integer is a good data type for
 

01:34:26.320 --> 01:34:29.030 align:start position:0%
thought integer is a good data type for
storing<01:34:26.719><c> the</c><01:34:26.880><c> principle</c><01:34:27.920><c> because</c><01:34:28.320><c> short</c><01:34:28.880><c> is</c>

01:34:29.030 --> 01:34:29.040 align:start position:0%
storing the principle because short is
 

01:34:29.040 --> 01:34:30.870 align:start position:0%
storing the principle because short is
not<01:34:29.280><c> enough</c><01:34:29.600><c> with</c><01:34:29.760><c> short</c><01:34:30.080><c> we</c><01:34:30.159><c> can</c><01:34:30.320><c> store</c>

01:34:30.870 --> 01:34:30.880 align:start position:0%
not enough with short we can store
 

01:34:30.880 --> 01:34:33.510 align:start position:0%
not enough with short we can store
a<01:34:31.040><c> maximum</c><01:34:31.520><c> of</c><01:34:31.920><c> thirty</c><01:34:32.239><c> two</c><01:34:32.480><c> thousand</c><01:34:32.880><c> dollars</c>

01:34:33.510 --> 01:34:33.520 align:start position:0%
a maximum of thirty two thousand dollars
 

01:34:33.520 --> 01:34:34.470 align:start position:0%
a maximum of thirty two thousand dollars
that's<01:34:33.840><c> not</c><01:34:34.080><c> enough</c>

01:34:34.470 --> 01:34:34.480 align:start position:0%
that's not enough
 

01:34:34.480 --> 01:34:36.149 align:start position:0%
that's not enough
what<01:34:34.719><c> if</c><01:34:34.800><c> someone</c><01:34:35.120><c> wants</c><01:34:35.280><c> to</c><01:34:35.440><c> find</c><01:34:35.679><c> us</c><01:34:35.920><c> one</c>

01:34:36.149 --> 01:34:36.159 align:start position:0%
what if someone wants to find us one
 

01:34:36.159 --> 01:34:38.149 align:start position:0%
what if someone wants to find us one
million<01:34:36.480><c> dollars</c><01:34:37.040><c> so</c><01:34:37.199><c> it</c><01:34:37.440><c> is</c><01:34:37.600><c> good</c><01:34:37.920><c> and</c><01:34:38.000><c> it</c>

01:34:38.149 --> 01:34:38.159 align:start position:0%
million dollars so it is good and it
 

01:34:38.159 --> 01:34:40.149 align:start position:0%
million dollars so it is good and it
allows<01:34:38.560><c> us</c><01:34:38.639><c> to</c><01:34:38.880><c> store</c><01:34:39.199><c> a</c><01:34:39.360><c> value</c><01:34:39.679><c> up</c><01:34:39.760><c> to</c><01:34:39.920><c> two</c>

01:34:40.149 --> 01:34:40.159 align:start position:0%
allows us to store a value up to two
 

01:34:40.159 --> 01:34:41.430 align:start position:0%
allows us to store a value up to two
billion

01:34:41.430 --> 01:34:41.440 align:start position:0%
billion
 

01:34:41.440 --> 01:34:43.669 align:start position:0%
billion
next<01:34:41.679><c> we</c><01:34:41.920><c> ask</c><01:34:42.080><c> the</c><01:34:42.159><c> second</c><01:34:42.480><c> question</c><01:34:43.280><c> annual</c>

01:34:43.669 --> 01:34:43.679 align:start position:0%
next we ask the second question annual
 

01:34:43.679 --> 01:34:44.790 align:start position:0%
next we ask the second question annual
interest<01:34:44.080><c> rate</c>

01:34:44.790 --> 01:34:44.800 align:start position:0%
interest rate
 

01:34:44.800 --> 01:34:47.109 align:start position:0%
interest rate
we<01:34:45.040><c> read</c><01:34:45.199><c> this</c><01:34:45.440><c> as</c><01:34:45.520><c> a</c><01:34:45.679><c> float</c><01:34:46.320><c> here</c><01:34:46.560><c> i</c><01:34:46.639><c> could</c><01:34:46.800><c> use</c>

01:34:47.109 --> 01:34:47.119 align:start position:0%
we read this as a float here i could use
 

01:34:47.119 --> 01:34:49.270 align:start position:0%
we read this as a float here i could use
double<01:34:47.679><c> but</c><01:34:47.840><c> the</c><01:34:48.080><c> interest</c><01:34:48.480><c> rate</c><01:34:48.719><c> is</c><01:34:48.880><c> a</c><01:34:48.960><c> small</c>

01:34:49.270 --> 01:34:49.280 align:start position:0%
double but the interest rate is a small
 

01:34:49.280 --> 01:34:51.109 align:start position:0%
double but the interest rate is a small
number<01:34:49.679><c> so</c><01:34:49.920><c> float</c><01:34:50.239><c> is</c><01:34:50.320><c> sufficient</c><01:34:50.800><c> for</c><01:34:50.960><c> that</c>

01:34:51.109 --> 01:34:51.119 align:start position:0%
number so float is sufficient for that
 

01:34:51.119 --> 01:34:52.709 align:start position:0%
number so float is sufficient for that
we<01:34:51.280><c> don't</c><01:34:51.440><c> really</c><01:34:51.679><c> need</c><01:34:51.840><c> double</c>

01:34:52.709 --> 01:34:52.719 align:start position:0%
we don't really need double
 

01:34:52.719 --> 01:34:55.270 align:start position:0%
we don't really need double
so<01:34:52.880><c> we</c><01:34:53.040><c> get</c><01:34:53.199><c> the</c><01:34:53.280><c> annual</c><01:34:53.760><c> interest</c><01:34:54.400><c> and</c><01:34:54.560><c> then</c>

01:34:55.270 --> 01:34:55.280 align:start position:0%
so we get the annual interest and then
 

01:34:55.280 --> 01:34:56.229 align:start position:0%
so we get the annual interest and then
based<01:34:55.520><c> on</c><01:34:55.679><c> that</c>

01:34:56.229 --> 01:34:56.239 align:start position:0%
based on that
 

01:34:56.239 --> 01:34:58.870 align:start position:0%
based on that
we<01:34:56.480><c> calculate</c><01:34:56.960><c> the</c><01:34:57.119><c> monthly</c><01:34:57.520><c> interest</c><01:34:58.480><c> also</c>

01:34:58.870 --> 01:34:58.880 align:start position:0%
we calculate the monthly interest also
 

01:34:58.880 --> 01:35:00.550 align:start position:0%
we calculate the monthly interest also
see<01:34:59.040><c> how</c><01:34:59.199><c> i</c><01:34:59.280><c> have</c><01:34:59.440><c> named</c><01:34:59.679><c> my</c><01:34:59.920><c> variables</c>

01:35:00.550 --> 01:35:00.560 align:start position:0%
see how i have named my variables
 

01:35:00.560 --> 01:35:03.350 align:start position:0%
see how i have named my variables
all<01:35:00.800><c> variables</c><01:35:01.360><c> have</c><01:35:01.679><c> a</c><01:35:02.000><c> proper</c><01:35:02.800><c> meaningful</c>

01:35:03.350 --> 01:35:03.360 align:start position:0%
all variables have a proper meaningful
 

01:35:03.360 --> 01:35:03.830 align:start position:0%
all variables have a proper meaningful
names

01:35:03.830 --> 01:35:03.840 align:start position:0%
names
 

01:35:03.840 --> 01:35:06.390 align:start position:0%
names
there<01:35:04.000><c> are</c><01:35:04.080><c> no</c><01:35:04.320><c> magic</c><01:35:04.719><c> words</c><01:35:04.960><c> here</c><01:35:05.280><c> like</c><01:35:05.679><c> mi</c><01:35:06.239><c> as</c>

01:35:06.390 --> 01:35:06.400 align:start position:0%
there are no magic words here like mi as
 

01:35:06.400 --> 01:35:07.270 align:start position:0%
there are no magic words here like mi as
in<01:35:06.560><c> short</c><01:35:06.800><c> for</c>

01:35:07.270 --> 01:35:07.280 align:start position:0%
in short for
 

01:35:07.280 --> 01:35:10.550 align:start position:0%
in short for
monthly<01:35:07.679><c> interest</c><01:35:08.159><c> or</c><01:35:08.719><c> m1</c><01:35:09.360><c> or</c><01:35:09.760><c> m2</c>

01:35:10.550 --> 01:35:10.560 align:start position:0%
monthly interest or m1 or m2
 

01:35:10.560 --> 01:35:12.070 align:start position:0%
monthly interest or m1 or m2
do<01:35:10.800><c> not</c><01:35:10.960><c> use</c><01:35:11.199><c> magic</c><01:35:11.520><c> names</c><01:35:11.840><c> for</c><01:35:11.920><c> your</c>

01:35:12.070 --> 01:35:12.080 align:start position:0%
do not use magic names for your
 

01:35:12.080 --> 01:35:14.229 align:start position:0%
do not use magic names for your
variables<01:35:12.639><c> always</c><01:35:13.040><c> use</c><01:35:13.520><c> meaningful</c>

01:35:14.229 --> 01:35:14.239 align:start position:0%
variables always use meaningful
 

01:35:14.239 --> 01:35:17.750 align:start position:0%
variables always use meaningful
and<01:35:14.480><c> descriptive</c><01:35:15.119><c> names</c><01:35:16.719><c> all</c><01:35:16.880><c> right</c>

01:35:17.750 --> 01:35:17.760 align:start position:0%
and descriptive names all right
 

01:35:17.760 --> 01:35:21.189 align:start position:0%
and descriptive names all right
next<01:35:18.639><c> we</c><01:35:18.880><c> get</c><01:35:19.360><c> the</c><01:35:19.600><c> period</c><01:35:20.480><c> we</c><01:35:20.639><c> read</c><01:35:20.800><c> this</c><01:35:20.960><c> as</c><01:35:21.119><c> a</c>

01:35:21.189 --> 01:35:21.199 align:start position:0%
next we get the period we read this as a
 

01:35:21.199 --> 01:35:22.950 align:start position:0%
next we get the period we read this as a
byte<01:35:21.520><c> because</c><01:35:21.760><c> the</c><01:35:22.000><c> maximum</c><01:35:22.400><c> number</c><01:35:22.719><c> we</c><01:35:22.800><c> want</c>

01:35:22.950 --> 01:35:22.960 align:start position:0%
byte because the maximum number we want
 

01:35:22.960 --> 01:35:24.229 align:start position:0%
byte because the maximum number we want
to<01:35:23.040><c> support</c><01:35:23.360><c> is</c><01:35:23.520><c> 30.</c>

01:35:24.229 --> 01:35:24.239 align:start position:0%
to support is 30.
 

01:35:24.239 --> 01:35:26.310 align:start position:0%
to support is 30.
so<01:35:24.400><c> one</c><01:35:24.639><c> byte</c><01:35:24.880><c> is</c><01:35:25.040><c> sufficient</c><01:35:25.520><c> to</c><01:35:25.679><c> store</c><01:35:26.159><c> the</c>

01:35:26.310 --> 01:35:26.320 align:start position:0%
so one byte is sufficient to store the
 

01:35:26.320 --> 01:35:27.430 align:start position:0%
so one byte is sufficient to store the
number<01:35:26.639><c> 30</c><01:35:27.040><c> or</c>

01:35:27.430 --> 01:35:27.440 align:start position:0%
number 30 or
 

01:35:27.440 --> 01:35:29.510 align:start position:0%
number 30 or
anything<01:35:27.760><c> smaller</c><01:35:28.719><c> now</c><01:35:28.880><c> based</c><01:35:29.119><c> on</c><01:35:29.280><c> the</c><01:35:29.360><c> number</c>

01:35:29.510 --> 01:35:29.520 align:start position:0%
anything smaller now based on the number
 

01:35:29.520 --> 01:35:30.790 align:start position:0%
anything smaller now based on the number
of<01:35:29.600><c> years</c><01:35:29.840><c> we</c><01:35:30.080><c> calculate</c>

01:35:30.790 --> 01:35:30.800 align:start position:0%
of years we calculate
 

01:35:30.800 --> 01:35:33.109 align:start position:0%
of years we calculate
the<01:35:30.960><c> number</c><01:35:31.280><c> of</c><01:35:31.440><c> payments</c><01:35:32.400><c> note</c><01:35:32.639><c> the</c><01:35:32.800><c> camel</c>

01:35:33.109 --> 01:35:33.119 align:start position:0%
the number of payments note the camel
 

01:35:33.119 --> 01:35:34.070 align:start position:0%
the number of payments note the camel
notation<01:35:33.600><c> here</c>

01:35:34.070 --> 01:35:34.080 align:start position:0%
notation here
 

01:35:34.080 --> 01:35:35.750 align:start position:0%
notation here
i've<01:35:34.320><c> capitalized</c><01:35:35.040><c> the</c><01:35:35.119><c> first</c><01:35:35.360><c> letter</c><01:35:35.600><c> of</c>

01:35:35.750 --> 01:35:35.760 align:start position:0%
i've capitalized the first letter of
 

01:35:35.760 --> 01:35:37.189 align:start position:0%
i've capitalized the first letter of
every<01:35:36.000><c> word</c><01:35:36.560><c> except</c>

01:35:37.189 --> 01:35:37.199 align:start position:0%
every word except
 

01:35:37.199 --> 01:35:39.669 align:start position:0%
every word except
the<01:35:37.360><c> first</c><01:35:37.679><c> word</c><01:35:38.560><c> so</c><01:35:38.719><c> we</c><01:35:38.880><c> get</c><01:35:39.119><c> years</c><01:35:39.520><c> and</c>

01:35:39.669 --> 01:35:39.679 align:start position:0%
the first word so we get years and
 

01:35:39.679 --> 01:35:40.790 align:start position:0%
the first word so we get years and
multiplied<01:35:40.239><c> by</c>

01:35:40.790 --> 01:35:40.800 align:start position:0%
multiplied by
 

01:35:40.800 --> 01:35:42.910 align:start position:0%
multiplied by
months<01:35:41.119><c> in</c><01:35:41.280><c> here</c><01:35:41.600><c> again</c><01:35:41.920><c> the</c><01:35:42.000><c> code</c><01:35:42.239><c> is</c><01:35:42.480><c> very</c>

01:35:42.910 --> 01:35:42.920 align:start position:0%
months in here again the code is very
 

01:35:42.920 --> 01:35:44.950 align:start position:0%
months in here again the code is very
self-explanatory

01:35:44.950 --> 01:35:44.960 align:start position:0%
self-explanatory
 

01:35:44.960 --> 01:35:47.189 align:start position:0%
self-explanatory
once<01:35:45.199><c> we</c><01:35:45.360><c> collect</c><01:35:45.760><c> all</c><01:35:45.840><c> this</c><01:35:46.080><c> data</c><01:35:46.800><c> then</c><01:35:47.040><c> we</c>

01:35:47.189 --> 01:35:47.199 align:start position:0%
once we collect all this data then we
 

01:35:47.199 --> 01:35:49.109 align:start position:0%
once we collect all this data then we
calculate<01:35:47.920><c> the</c><01:35:48.080><c> mortgage</c>

01:35:49.109 --> 01:35:49.119 align:start position:0%
calculate the mortgage
 

01:35:49.119 --> 01:35:51.990 align:start position:0%
calculate the mortgage
so<01:35:49.280><c> we</c><01:35:49.440><c> get</c><01:35:49.600><c> a</c><01:35:49.679><c> principle</c><01:35:50.719><c> multiplied</c><01:35:51.360><c> by</c><01:35:51.760><c> this</c>

01:35:51.990 --> 01:35:52.000 align:start position:0%
so we get a principle multiplied by this
 

01:35:52.000 --> 01:35:53.030 align:start position:0%
so we get a principle multiplied by this
expression

01:35:53.030 --> 01:35:53.040 align:start position:0%
expression
 

01:35:53.040 --> 01:35:54.790 align:start position:0%
expression
and<01:35:53.119><c> then</c><01:35:53.280><c> divided</c><01:35:53.840><c> by</c><01:35:54.320><c> this</c><01:35:54.560><c> other</c>

01:35:54.790 --> 01:35:54.800 align:start position:0%
and then divided by this other
 

01:35:54.800 --> 01:35:57.350 align:start position:0%
and then divided by this other
expression<01:35:55.600><c> let's</c><01:35:55.840><c> have</c><01:35:55.920><c> a</c><01:35:56.000><c> quick</c><01:35:56.239><c> look</c><01:35:56.400><c> here</c>

01:35:57.350 --> 01:35:57.360 align:start position:0%
expression let's have a quick look here
 

01:35:57.360 --> 01:35:59.030 align:start position:0%
expression let's have a quick look here
now<01:35:57.520><c> this</c><01:35:57.679><c> looks</c><01:35:57.920><c> a</c><01:35:58.000><c> little</c><01:35:58.159><c> bit</c><01:35:58.320><c> complicated</c>

01:35:59.030 --> 01:35:59.040 align:start position:0%
now this looks a little bit complicated
 

01:35:59.040 --> 01:36:00.470 align:start position:0%
now this looks a little bit complicated
so<01:35:59.199><c> if</c><01:35:59.360><c> you</c><01:35:59.440><c> want</c><01:35:59.520><c> to</c><01:35:59.679><c> download</c><01:36:00.000><c> my</c><01:36:00.239><c> source</c>

01:36:00.470 --> 01:36:00.480 align:start position:0%
so if you want to download my source
 

01:36:00.480 --> 01:36:00.950 align:start position:0%
so if you want to download my source
code

01:36:00.950 --> 01:36:00.960 align:start position:0%
code
 

01:36:00.960 --> 01:36:02.550 align:start position:0%
code
look<01:36:01.199><c> below</c><01:36:01.520><c> this</c><01:36:01.679><c> video</c><01:36:01.920><c> i've</c><01:36:02.080><c> attached</c><01:36:02.480><c> it</c>

01:36:02.550 --> 01:36:02.560 align:start position:0%
look below this video i've attached it
 

01:36:02.560 --> 01:36:04.229 align:start position:0%
look below this video i've attached it
for<01:36:02.719><c> you</c><01:36:02.880><c> to</c><01:36:02.960><c> download</c>

01:36:04.229 --> 01:36:04.239 align:start position:0%
for you to download
 

01:36:04.239 --> 01:36:05.910 align:start position:0%
for you to download
and<01:36:04.480><c> finally</c><01:36:04.960><c> after</c><01:36:05.199><c> we</c><01:36:05.360><c> calculate</c><01:36:05.840><c> the</c>

01:36:05.910 --> 01:36:05.920 align:start position:0%
and finally after we calculate the
 

01:36:05.920 --> 01:36:08.629 align:start position:0%
and finally after we calculate the
mortgage<01:36:06.800><c> we</c><01:36:06.960><c> use</c><01:36:07.119><c> the</c><01:36:07.280><c> number</c><01:36:07.600><c> format</c><01:36:08.000><c> class</c>

01:36:08.629 --> 01:36:08.639 align:start position:0%
mortgage we use the number format class
 

01:36:08.639 --> 01:36:11.750 align:start position:0%
mortgage we use the number format class
to<01:36:08.800><c> format</c><01:36:09.199><c> this</c><01:36:09.440><c> value</c><01:36:09.920><c> as</c><01:36:10.400><c> a</c><01:36:10.560><c> currency</c>

01:36:11.750 --> 01:36:11.760 align:start position:0%
to format this value as a currency
 

01:36:11.760 --> 01:36:14.310 align:start position:0%
to format this value as a currency
so<01:36:12.480><c> we</c><01:36:12.639><c> get</c><01:36:12.800><c> the</c><01:36:12.960><c> result</c><01:36:13.440><c> store</c><01:36:13.760><c> it</c><01:36:14.000><c> in</c><01:36:14.159><c> this</c>

01:36:14.310 --> 01:36:14.320 align:start position:0%
so we get the result store it in this
 

01:36:14.320 --> 01:36:14.790 align:start position:0%
so we get the result store it in this
string

01:36:14.790 --> 01:36:14.800 align:start position:0%
string
 

01:36:14.800 --> 01:36:18.310 align:start position:0%
string
mortgage<01:36:15.280><c> format</c><01:36:16.000><c> and</c><01:36:16.560><c> print</c><01:36:16.880><c> it</c><01:36:17.040><c> over</c><01:36:17.199><c> here</c>

01:36:18.310 --> 01:36:18.320 align:start position:0%
mortgage format and print it over here
 

01:36:18.320 --> 01:36:20.229 align:start position:0%
mortgage format and print it over here
now<01:36:18.480><c> here</c><01:36:18.639><c> we</c><01:36:18.719><c> could</c><01:36:18.960><c> also</c><01:36:19.199><c> avoid</c><01:36:19.760><c> declaring</c>

01:36:20.229 --> 01:36:20.239 align:start position:0%
now here we could also avoid declaring
 

01:36:20.239 --> 01:36:21.350 align:start position:0%
now here we could also avoid declaring
this<01:36:20.400><c> variable</c><01:36:20.880><c> and</c>

01:36:21.350 --> 01:36:21.360 align:start position:0%
this variable and
 

01:36:21.360 --> 01:36:24.229 align:start position:0%
this variable and
simply<01:36:21.760><c> add</c><01:36:22.000><c> this</c><01:36:22.159><c> expression</c><01:36:23.040><c> over</c><01:36:23.360><c> here</c><01:36:24.080><c> but</c>

01:36:24.229 --> 01:36:24.239 align:start position:0%
simply add this expression over here but
 

01:36:24.239 --> 01:36:25.910 align:start position:0%
simply add this expression over here but
i<01:36:24.320><c> decided</c><01:36:24.719><c> to</c><01:36:24.800><c> do</c><01:36:24.960><c> this</c><01:36:25.199><c> to</c><01:36:25.440><c> increase</c><01:36:25.760><c> the</c>

01:36:25.910 --> 01:36:25.920 align:start position:0%
i decided to do this to increase the
 

01:36:25.920 --> 01:36:27.350 align:start position:0%
i decided to do this to increase the
readability<01:36:26.480><c> of</c><01:36:26.560><c> this</c><01:36:26.800><c> code</c>

01:36:27.350 --> 01:36:27.360 align:start position:0%
readability of this code
 

01:36:27.360 --> 01:36:29.430 align:start position:0%
readability of this code
otherwise<01:36:27.840><c> this</c><01:36:28.080><c> line</c><01:36:28.239><c> would</c><01:36:28.400><c> be</c><01:36:28.560><c> so</c><01:36:28.800><c> long</c><01:36:29.280><c> but</c>

01:36:29.430 --> 01:36:29.440 align:start position:0%
otherwise this line would be so long but
 

01:36:29.440 --> 01:36:30.950 align:start position:0%
otherwise this line would be so long but
that's<01:36:29.600><c> just</c><01:36:29.760><c> my</c><01:36:29.920><c> personal</c><01:36:30.320><c> preference</c><01:36:30.800><c> you</c>

01:36:30.950 --> 01:36:30.960 align:start position:0%
that's just my personal preference you
 

01:36:30.960 --> 01:36:32.709 align:start position:0%
that's just my personal preference you
don't<01:36:31.119><c> have</c><01:36:31.199><c> to</c><01:36:31.360><c> follow</c><01:36:31.679><c> this</c>

01:36:32.709 --> 01:36:32.719 align:start position:0%
don't have to follow this
 

01:36:32.719 --> 01:36:34.310 align:start position:0%
don't have to follow this
all<01:36:32.880><c> right</c><01:36:32.960><c> so</c><01:36:33.119><c> this</c><01:36:33.280><c> was</c><01:36:33.440><c> my</c><01:36:33.679><c> implementation</c>

01:36:34.310 --> 01:36:34.320 align:start position:0%
all right so this was my implementation
 

01:36:34.320 --> 01:36:36.310 align:start position:0%
all right so this was my implementation
of<01:36:34.400><c> the</c><01:36:34.480><c> mortgage</c><01:36:34.960><c> calculator</c>

01:36:36.310 --> 01:36:36.320 align:start position:0%
of the mortgage calculator
 

01:36:36.320 --> 01:36:38.550 align:start position:0%
of the mortgage calculator
however<01:36:36.719><c> this</c><01:36:36.960><c> program</c><01:36:37.440><c> has</c><01:36:38.000><c> a</c><01:36:38.159><c> number</c><01:36:38.400><c> of</c>

01:36:38.550 --> 01:36:38.560 align:start position:0%
however this program has a number of
 

01:36:38.560 --> 01:36:39.350 align:start position:0%
however this program has a number of
problems

01:36:39.350 --> 01:36:39.360 align:start position:0%
problems
 

01:36:39.360 --> 01:36:42.629 align:start position:0%
problems
the<01:36:39.520><c> first</c><01:36:39.760><c> problem</c><01:36:40.159><c> is</c><01:36:40.719><c> input</c><01:36:41.040><c> validation</c><01:36:42.159><c> so</c>

01:36:42.629 --> 01:36:42.639 align:start position:0%
the first problem is input validation so
 

01:36:42.639 --> 01:36:45.830 align:start position:0%
the first problem is input validation so
if<01:36:42.719><c> we</c><01:36:42.880><c> run</c><01:36:43.119><c> this</c><01:36:43.760><c> and</c>

01:36:45.830 --> 01:36:45.840 align:start position:0%
if we run this and
 

01:36:45.840 --> 01:36:49.350 align:start position:0%
if we run this and
enter<01:36:46.239><c> a</c><01:36:46.400><c> non-numeric</c><01:36:47.119><c> value</c><01:36:47.840><c> like</c><01:36:48.239><c> x</c><01:36:48.480><c> y</c><01:36:48.719><c> z</c>

01:36:49.350 --> 01:36:49.360 align:start position:0%
enter a non-numeric value like x y z
 

01:36:49.360 --> 01:36:52.229 align:start position:0%
enter a non-numeric value like x y z
our<01:36:49.520><c> program</c><01:36:49.920><c> crashes</c><01:36:51.119><c> or</c><01:36:51.600><c> as</c><01:36:51.920><c> another</c>

01:36:52.229 --> 01:36:52.239 align:start position:0%
our program crashes or as another
 

01:36:52.239 --> 01:36:54.070 align:start position:0%
our program crashes or as another
example<01:36:52.719><c> if</c><01:36:52.800><c> we</c><01:36:52.960><c> enter</c><01:36:53.280><c> a</c><01:36:53.360><c> negative</c><01:36:53.760><c> value</c>

01:36:54.070 --> 01:36:54.080 align:start position:0%
example if we enter a negative value
 

01:36:54.080 --> 01:36:54.550 align:start position:0%
example if we enter a negative value
here

01:36:54.550 --> 01:36:54.560 align:start position:0%
here
 

01:36:54.560 --> 01:36:55.830 align:start position:0%
here
our<01:36:54.719><c> program</c><01:36:55.119><c> is</c><01:36:55.199><c> not</c><01:36:55.280><c> going</c><01:36:55.440><c> to</c><01:36:55.520><c> behave</c>

01:36:55.830 --> 01:36:55.840 align:start position:0%
our program is not going to behave
 

01:36:55.840 --> 01:36:57.990 align:start position:0%
our program is not going to behave
properly<01:36:56.639><c> so</c><01:36:56.800><c> that's</c><01:36:57.040><c> where</c><01:36:57.440><c> conditional</c>

01:36:57.990 --> 01:36:58.000 align:start position:0%
properly so that's where conditional
 

01:36:58.000 --> 01:36:59.669 align:start position:0%
properly so that's where conditional
statements<01:36:58.480><c> come</c><01:36:58.639><c> to</c><01:36:58.800><c> the</c><01:36:58.880><c> rescue</c>

01:36:59.669 --> 01:36:59.679 align:start position:0%
statements come to the rescue
 

01:36:59.679 --> 01:37:00.790 align:start position:0%
statements come to the rescue
in<01:36:59.760><c> the</c><01:36:59.840><c> next</c><01:37:00.000><c> section</c><01:37:00.320><c> we're</c><01:37:00.400><c> going</c><01:37:00.480><c> to</c><01:37:00.560><c> talk</c>

01:37:00.790 --> 01:37:00.800 align:start position:0%
in the next section we're going to talk
 

01:37:00.800 --> 01:37:02.629 align:start position:0%
in the next section we're going to talk
about<01:37:01.040><c> conditional</c><01:37:01.600><c> statements</c><01:37:02.400><c> you</c><01:37:02.560><c> will</c>

01:37:02.629 --> 01:37:02.639 align:start position:0%
about conditional statements you will
 

01:37:02.639 --> 01:37:04.229 align:start position:0%
about conditional statements you will
learn<01:37:02.880><c> how</c><01:37:03.040><c> to</c><01:37:03.199><c> use</c><01:37:03.360><c> these</c><01:37:03.600><c> statements</c>

01:37:04.229 --> 01:37:04.239 align:start position:0%
learn how to use these statements
 

01:37:04.239 --> 01:37:06.470 align:start position:0%
learn how to use these statements
to<01:37:04.560><c> validate</c><01:37:05.040><c> the</c><01:37:05.199><c> values</c><01:37:05.840><c> entered</c><01:37:06.239><c> by</c><01:37:06.400><c> the</c>

01:37:06.470 --> 01:37:06.480 align:start position:0%
to validate the values entered by the
 

01:37:06.480 --> 01:37:07.750 align:start position:0%
to validate the values entered by the
user

01:37:07.750 --> 01:37:07.760 align:start position:0%
user
 

01:37:07.760 --> 01:37:09.030 align:start position:0%
user
so<01:37:07.920><c> that</c><01:37:08.159><c> brings</c><01:37:08.400><c> us</c><01:37:08.480><c> to</c><01:37:08.560><c> the</c><01:37:08.639><c> end</c><01:37:08.800><c> of</c><01:37:08.880><c> this</c>

01:37:09.030 --> 01:37:09.040 align:start position:0%
so that brings us to the end of this
 

01:37:09.040 --> 01:37:10.629 align:start position:0%
so that brings us to the end of this
section<01:37:09.440><c> i</c><01:37:09.520><c> hope</c><01:37:09.760><c> you</c><01:37:09.840><c> learned</c><01:37:10.000><c> a</c><01:37:10.080><c> lot</c><01:37:10.400><c> and</c>

01:37:10.629 --> 01:37:10.639 align:start position:0%
section i hope you learned a lot and
 

01:37:10.639 --> 01:37:17.830 align:start position:0%
section i hope you learned a lot and
thank<01:37:10.800><c> you</c><01:37:10.960><c> for</c><01:37:11.119><c> watching</c>

01:37:17.830 --> 01:37:17.840 align:start position:0%
 
 

01:37:17.840 --> 01:37:19.350 align:start position:0%
 
so<01:37:18.080><c> in</c><01:37:18.159><c> this</c><01:37:18.239><c> section</c><01:37:18.560><c> you</c><01:37:18.639><c> learn</c><01:37:18.960><c> all</c><01:37:19.119><c> about</c>

01:37:19.350 --> 01:37:19.360 align:start position:0%
so in this section you learn all about
 

01:37:19.360 --> 01:37:21.430 align:start position:0%
so in this section you learn all about
variables<01:37:19.840><c> and</c><01:37:20.000><c> constants</c><01:37:20.800><c> you</c><01:37:20.960><c> learn</c><01:37:21.119><c> about</c>

01:37:21.430 --> 01:37:21.440 align:start position:0%
variables and constants you learn about
 

01:37:21.440 --> 01:37:22.870 align:start position:0%
variables and constants you learn about
primitive<01:37:21.840><c> and</c><01:37:22.000><c> reference</c><01:37:22.400><c> types</c>

01:37:22.870 --> 01:37:22.880 align:start position:0%
primitive and reference types
 

01:37:22.880 --> 01:37:24.550 align:start position:0%
primitive and reference types
you<01:37:23.040><c> learn</c><01:37:23.199><c> that</c><01:37:23.360><c> primitive</c><01:37:23.760><c> types</c><01:37:24.080><c> store</c>

01:37:24.550 --> 01:37:24.560 align:start position:0%
you learn that primitive types store
 

01:37:24.560 --> 01:37:26.790 align:start position:0%
you learn that primitive types store
simple<01:37:24.960><c> values</c><01:37:25.520><c> but</c><01:37:25.679><c> reference</c><01:37:26.080><c> types</c><01:37:26.480><c> hold</c>

01:37:26.790 --> 01:37:26.800 align:start position:0%
simple values but reference types hold
 

01:37:26.800 --> 01:37:29.109 align:start position:0%
simple values but reference types hold
references<01:37:27.520><c> to</c><01:37:27.760><c> complex</c><01:37:28.320><c> objects</c><01:37:28.719><c> that's</c><01:37:28.960><c> why</c>

01:37:29.109 --> 01:37:29.119 align:start position:0%
references to complex objects that's why
 

01:37:29.119 --> 01:37:29.990 align:start position:0%
references to complex objects that's why
we<01:37:29.280><c> call</c><01:37:29.440><c> them</c>

01:37:29.990 --> 01:37:30.000 align:start position:0%
we call them
 

01:37:30.000 --> 01:37:32.070 align:start position:0%
we call them
reference<01:37:30.400><c> types</c><01:37:31.199><c> you</c><01:37:31.360><c> also</c><01:37:31.600><c> learn</c><01:37:31.760><c> about</c>

01:37:32.070 --> 01:37:32.080 align:start position:0%
reference types you also learn about
 

01:37:32.080 --> 01:37:33.750 align:start position:0%
reference types you also learn about
casting<01:37:32.560><c> and</c><01:37:32.719><c> type</c><01:37:32.960><c> conversion</c>

01:37:33.750 --> 01:37:33.760 align:start position:0%
casting and type conversion
 

01:37:33.760 --> 01:37:35.590 align:start position:0%
casting and type conversion
you<01:37:33.920><c> learn</c><01:37:34.159><c> about</c><01:37:34.320><c> two</c><01:37:34.560><c> types</c><01:37:34.800><c> of</c><01:37:34.960><c> casting</c>

01:37:35.590 --> 01:37:35.600 align:start position:0%
you learn about two types of casting
 

01:37:35.600 --> 01:37:37.109 align:start position:0%
you learn about two types of casting
implicit<01:37:36.239><c> and</c><01:37:36.320><c> explicit</c>

01:37:37.109 --> 01:37:37.119 align:start position:0%
implicit and explicit
 

01:37:37.119 --> 01:37:38.870 align:start position:0%
implicit and explicit
you<01:37:37.280><c> learn</c><01:37:37.440><c> how</c><01:37:37.600><c> to</c><01:37:37.760><c> work</c><01:37:38.000><c> with</c><01:37:38.159><c> numbers</c>

01:37:38.870 --> 01:37:38.880 align:start position:0%
you learn how to work with numbers
 

01:37:38.880 --> 01:37:40.470 align:start position:0%
you learn how to work with numbers
strings<01:37:39.520><c> and</c><01:37:39.760><c> arrays</c>

01:37:40.470 --> 01:37:40.480 align:start position:0%
strings and arrays
 

01:37:40.480 --> 01:37:42.149 align:start position:0%
strings and arrays
and<01:37:40.719><c> finally</c><01:37:41.119><c> you</c><01:37:41.280><c> learned</c><01:37:41.520><c> how</c><01:37:41.679><c> to</c><01:37:41.840><c> read</c>

01:37:42.149 --> 01:37:42.159 align:start position:0%
and finally you learned how to read
 

01:37:42.159 --> 01:37:43.669 align:start position:0%
and finally you learned how to read
input<01:37:42.480><c> from</c><01:37:42.639><c> the</c><01:37:42.719><c> terminal</c>

01:37:43.669 --> 01:37:43.679 align:start position:0%
input from the terminal
 

01:37:43.679 --> 01:37:44.870 align:start position:0%
input from the terminal
i<01:37:43.840><c> hope</c><01:37:44.000><c> you</c><01:37:44.080><c> learned</c><01:37:44.320><c> a</c><01:37:44.400><c> lot</c><01:37:44.639><c> and</c><01:37:44.719><c> been</c>

01:37:44.870 --> 01:37:44.880 align:start position:0%
i hope you learned a lot and been
 

01:37:44.880 --> 01:37:46.550 align:start position:0%
i hope you learned a lot and been
enjoying<01:37:45.199><c> the</c><01:37:45.280><c> course</c><01:37:45.520><c> so</c><01:37:45.760><c> far</c><01:37:46.159><c> in</c><01:37:46.320><c> the</c><01:37:46.400><c> next</c>

01:37:46.550 --> 01:37:46.560 align:start position:0%
enjoying the course so far in the next
 

01:37:46.560 --> 01:37:47.430 align:start position:0%
enjoying the course so far in the next
section<01:37:46.800><c> we're</c><01:37:46.960><c> going</c><01:37:47.040><c> to</c><01:37:47.119><c> look</c><01:37:47.280><c> at</c>

01:37:47.430 --> 01:37:47.440 align:start position:0%
section we're going to look at
 

01:37:47.440 --> 01:37:48.070 align:start position:0%
section we're going to look at
conditional

01:37:48.070 --> 01:37:48.080 align:start position:0%
conditional
 

01:37:48.080 --> 01:37:50.149 align:start position:0%
conditional
statements<01:37:48.560><c> for</c><01:37:49.040><c> controlling</c><01:37:49.600><c> the</c><01:37:49.679><c> flow</c><01:37:50.000><c> of</c>

01:37:50.149 --> 01:37:50.159 align:start position:0%
statements for controlling the flow of
 

01:37:50.159 --> 01:37:52.810 align:start position:0%
statements for controlling the flow of
our<01:37:50.320><c> programs</c><01:37:51.040><c> so</c><01:37:51.280><c> i'll</c><01:37:51.520><c> see</c><01:37:51.600><c> you</c><01:37:51.679><c> in</c><01:37:51.760><c> the</c><01:37:51.840><c> next</c>

01:37:52.810 --> 01:37:52.820 align:start position:0%
our programs so i'll see you in the next
 

01:37:52.820 --> 01:38:00.830 align:start position:0%
our programs so i'll see you in the next
[Music]

01:38:00.830 --> 01:38:00.840 align:start position:0%
[Music]
 

01:38:00.840 --> 01:38:02.950 align:start position:0%
[Music]
section<01:38:01.920><c> hey</c><01:38:02.239><c> mosh</c><01:38:02.560><c> here</c>

01:38:02.950 --> 01:38:02.960 align:start position:0%
section hey mosh here
 

01:38:02.960 --> 01:38:04.790 align:start position:0%
section hey mosh here
i<01:38:03.119><c> just</c><01:38:03.199><c> want</c><01:38:03.360><c> to</c><01:38:03.520><c> make</c><01:38:03.679><c> a</c><01:38:03.760><c> quick</c><01:38:04.000><c> announcement</c>

01:38:04.790 --> 01:38:04.800 align:start position:0%
i just want to make a quick announcement
 

01:38:04.800 --> 01:38:06.310 align:start position:0%
i just want to make a quick announcement
this<01:38:05.040><c> course</c><01:38:05.280><c> you've</c><01:38:05.440><c> been</c><01:38:05.600><c> watching</c><01:38:06.080><c> is</c>

01:38:06.310 --> 01:38:06.320 align:start position:0%
this course you've been watching is
 

01:38:06.320 --> 01:38:08.550 align:start position:0%
this course you've been watching is
actually<01:38:06.639><c> the</c><01:38:06.880><c> beginning</c><01:38:07.360><c> of</c><01:38:07.520><c> my</c><01:38:07.760><c> complete</c>

01:38:08.550 --> 01:38:08.560 align:start position:0%
actually the beginning of my complete
 

01:38:08.560 --> 01:38:10.790 align:start position:0%
actually the beginning of my complete
java<01:38:08.960><c> series</c><01:38:09.760><c> in</c><01:38:09.920><c> this</c><01:38:10.080><c> course</c><01:38:10.239><c> we</c><01:38:10.400><c> only</c><01:38:10.560><c> talk</c>

01:38:10.790 --> 01:38:10.800 align:start position:0%
java series in this course we only talk
 

01:38:10.800 --> 01:38:12.709 align:start position:0%
java series in this course we only talk
about<01:38:11.040><c> the</c><01:38:11.199><c> basics</c><01:38:11.840><c> but</c><01:38:12.000><c> in</c><01:38:12.080><c> my</c><01:38:12.239><c> complete</c>

01:38:12.709 --> 01:38:12.719 align:start position:0%
about the basics but in my complete
 

01:38:12.719 --> 01:38:13.189 align:start position:0%
about the basics but in my complete
series

01:38:13.189 --> 01:38:13.199 align:start position:0%
series
 

01:38:13.199 --> 01:38:15.270 align:start position:0%
series
we<01:38:13.360><c> go</c><01:38:13.600><c> way</c><01:38:13.760><c> beyond</c><01:38:14.159><c> that</c><01:38:14.800><c> so</c><01:38:14.960><c> if</c><01:38:15.119><c> you're</c>

01:38:15.270 --> 01:38:15.280 align:start position:0%
we go way beyond that so if you're
 

01:38:15.280 --> 01:38:16.950 align:start position:0%
we go way beyond that so if you're
serious<01:38:15.600><c> about</c><01:38:15.920><c> java</c><01:38:16.320><c> if</c><01:38:16.400><c> you're</c><01:38:16.560><c> looking</c><01:38:16.800><c> for</c>

01:38:16.950 --> 01:38:16.960 align:start position:0%
serious about java if you're looking for
 

01:38:16.960 --> 01:38:18.870 align:start position:0%
serious about java if you're looking for
a<01:38:17.040><c> job</c><01:38:17.360><c> as</c><01:38:17.520><c> a</c><01:38:17.600><c> java</c><01:38:18.000><c> developer</c>

01:38:18.870 --> 01:38:18.880 align:start position:0%
a job as a java developer
 

01:38:18.880 --> 01:38:20.470 align:start position:0%
a job as a java developer
i<01:38:19.040><c> highly</c><01:38:19.280><c> encourage</c><01:38:19.600><c> you</c><01:38:19.760><c> to</c><01:38:19.840><c> enroll</c><01:38:20.159><c> in</c><01:38:20.239><c> my</c>

01:38:20.470 --> 01:38:20.480 align:start position:0%
i highly encourage you to enroll in my
 

01:38:20.480 --> 01:38:22.709 align:start position:0%
i highly encourage you to enroll in my
complete<01:38:21.199><c> java</c><01:38:21.520><c> series</c><01:38:21.920><c> it's</c><01:38:22.159><c> exactly</c><01:38:22.560><c> the</c>

01:38:22.709 --> 01:38:22.719 align:start position:0%
complete java series it's exactly the
 

01:38:22.719 --> 01:38:23.030 align:start position:0%
complete java series it's exactly the
same

01:38:23.030 --> 01:38:23.040 align:start position:0%
same
 

01:38:23.040 --> 01:38:25.590 align:start position:0%
same
structure<01:38:23.520><c> the</c><01:38:23.679><c> same</c><01:38:24.000><c> quality</c><01:38:24.800><c> but</c><01:38:25.040><c> it</c><01:38:25.119><c> has</c>

01:38:25.590 --> 01:38:25.600 align:start position:0%
structure the same quality but it has
 

01:38:25.600 --> 01:38:26.950 align:start position:0%
structure the same quality but it has
way<01:38:25.840><c> more</c><01:38:26.080><c> content</c>

01:38:26.950 --> 01:38:26.960 align:start position:0%
way more content
 

01:38:26.960 --> 01:38:28.709 align:start position:0%
way more content
plus<01:38:27.600><c> you</c><01:38:27.679><c> will</c><01:38:27.840><c> get</c><01:38:28.000><c> a</c><01:38:28.080><c> certificate</c><01:38:28.560><c> of</c>

01:38:28.709 --> 01:38:28.719 align:start position:0%
plus you will get a certificate of
 

01:38:28.719 --> 01:38:29.910 align:start position:0%
plus you will get a certificate of
compilation<01:38:29.199><c> that</c><01:38:29.360><c> you</c><01:38:29.440><c> can</c><01:38:29.520><c> add</c><01:38:29.679><c> to</c><01:38:29.840><c> your</c>

01:38:29.910 --> 01:38:29.920 align:start position:0%
compilation that you can add to your
 

01:38:29.920 --> 01:38:31.030 align:start position:0%
compilation that you can add to your
resume

01:38:31.030 --> 01:38:31.040 align:start position:0%
resume
 

01:38:31.040 --> 01:38:32.709 align:start position:0%
resume
so<01:38:31.360><c> if</c><01:38:31.520><c> you're</c><01:38:31.679><c> interested</c><01:38:32.080><c> i</c><01:38:32.159><c> put</c><01:38:32.320><c> the</c><01:38:32.480><c> link</c>

01:38:32.709 --> 01:38:32.719 align:start position:0%
so if you're interested i put the link
 

01:38:32.719 --> 01:38:34.310 align:start position:0%
so if you're interested i put the link
down<01:38:32.960><c> below</c><01:38:33.280><c> you</c><01:38:33.440><c> can</c><01:38:33.520><c> get</c><01:38:33.679><c> the</c><01:38:33.760><c> course</c><01:38:34.080><c> with</c><01:38:34.239><c> a</c>

01:38:34.310 --> 01:38:34.320 align:start position:0%
down below you can get the course with a
 

01:38:34.320 --> 01:38:35.030 align:start position:0%
down below you can get the course with a
discount

01:38:35.030 --> 01:38:35.040 align:start position:0%
discount
 

01:38:35.040 --> 01:38:37.270 align:start position:0%
discount
and<01:38:35.440><c> if</c><01:38:35.600><c> you're</c><01:38:35.679><c> not</c><01:38:35.920><c> happy</c><01:38:36.159><c> for</c><01:38:36.400><c> any</c><01:38:36.639><c> reasons</c>

01:38:37.270 --> 01:38:37.280 align:start position:0%
and if you're not happy for any reasons
 

01:38:37.280 --> 01:38:38.709 align:start position:0%
and if you're not happy for any reasons
you<01:38:37.360><c> can</c><01:38:37.600><c> ask</c><01:38:37.760><c> for</c><01:38:37.920><c> a</c><01:38:38.000><c> refund</c><01:38:38.320><c> within</c><01:38:38.639><c> the</c>

01:38:38.709 --> 01:38:38.719 align:start position:0%
you can ask for a refund within the
 

01:38:38.719 --> 01:38:39.270 align:start position:0%
you can ask for a refund within the
first

01:38:39.270 --> 01:38:39.280 align:start position:0%
first
 

01:38:39.280 --> 01:38:42.830 align:start position:0%
first
30<01:38:39.600><c> days</c><01:38:40.159><c> so</c><01:38:40.560><c> i</c><01:38:40.719><c> hope</c><01:38:40.800><c> to</c><01:38:40.960><c> see</c><01:38:41.040><c> you</c><01:38:41.119><c> in</c><01:38:41.199><c> the</c>

01:38:42.830 --> 01:38:42.840 align:start position:0%
30 days so i hope to see you in the
 

01:38:42.840 --> 01:38:43.990 align:start position:0%
30 days so i hope to see you in the
course

01:38:43.990 --> 01:38:44.000 align:start position:0%
course
 

01:38:44.000 --> 01:38:45.030 align:start position:0%
course
this<01:38:44.080><c> lecture</c><01:38:44.480><c> we're</c><01:38:44.560><c> going</c><01:38:44.639><c> to</c><01:38:44.719><c> look</c><01:38:44.880><c> at</c>

01:38:45.030 --> 01:38:45.040 align:start position:0%
this lecture we're going to look at
 

01:38:45.040 --> 01:38:47.830 align:start position:0%
this lecture we're going to look at
control<01:38:45.440><c> flow</c><01:38:45.840><c> or</c><01:38:46.400><c> controlling</c><01:38:46.960><c> the</c><01:38:47.119><c> flow</c><01:38:47.600><c> of</c>

01:38:47.830 --> 01:38:47.840 align:start position:0%
control flow or controlling the flow of
 

01:38:47.840 --> 01:38:49.750 align:start position:0%
control flow or controlling the flow of
execution<01:38:48.560><c> of</c><01:38:48.719><c> our</c><01:38:48.880><c> programs</c>

01:38:49.750 --> 01:38:49.760 align:start position:0%
execution of our programs
 

01:38:49.760 --> 01:38:51.030 align:start position:0%
execution of our programs
we're<01:38:49.920><c> going</c><01:38:50.080><c> to</c><01:38:50.159><c> start</c><01:38:50.400><c> off</c><01:38:50.480><c> by</c><01:38:50.719><c> talking</c>

01:38:51.030 --> 01:38:51.040 align:start position:0%
we're going to start off by talking
 

01:38:51.040 --> 01:38:52.870 align:start position:0%
we're going to start off by talking
about<01:38:51.280><c> comparison</c><01:38:52.000><c> operators</c><01:38:52.480><c> for</c>

01:38:52.870 --> 01:38:52.880 align:start position:0%
about comparison operators for
 

01:38:52.880 --> 01:38:54.629 align:start position:0%
about comparison operators for
comparing<01:38:53.360><c> values</c><01:38:54.080><c> then</c><01:38:54.320><c> we're</c><01:38:54.400><c> going</c><01:38:54.560><c> to</c>

01:38:54.629 --> 01:38:54.639 align:start position:0%
comparing values then we're going to
 

01:38:54.639 --> 01:38:56.709 align:start position:0%
comparing values then we're going to
talk<01:38:54.800><c> about</c><01:38:55.440><c> logical</c><01:38:55.920><c> operators</c>

01:38:56.709 --> 01:38:56.719 align:start position:0%
talk about logical operators
 

01:38:56.719 --> 01:38:59.030 align:start position:0%
talk about logical operators
like<01:38:56.880><c> the</c><01:38:57.040><c> logical</c><01:38:57.520><c> and</c><01:38:58.000><c> logical</c><01:38:58.480><c> or</c><01:38:58.880><c> and</c>

01:38:59.030 --> 01:38:59.040 align:start position:0%
like the logical and logical or and
 

01:38:59.040 --> 01:39:00.070 align:start position:0%
like the logical and logical or and
logical<01:38:59.520><c> not</c>

01:39:00.070 --> 01:39:00.080 align:start position:0%
logical not
 

01:39:00.080 --> 01:39:02.470 align:start position:0%
logical not
we<01:39:00.239><c> use</c><01:39:00.480><c> these</c><01:39:00.719><c> operators</c><01:39:01.199><c> for</c><01:39:01.520><c> implementing</c>

01:39:02.470 --> 01:39:02.480 align:start position:0%
we use these operators for implementing
 

01:39:02.480 --> 01:39:03.830 align:start position:0%
we use these operators for implementing
real-world<01:39:03.040><c> rules</c>

01:39:03.830 --> 01:39:03.840 align:start position:0%
real-world rules
 

01:39:03.840 --> 01:39:05.590 align:start position:0%
real-world rules
and<01:39:03.920><c> then</c><01:39:04.080><c> we're</c><01:39:04.239><c> going</c><01:39:04.320><c> to</c><01:39:04.400><c> talk</c><01:39:04.639><c> about</c><01:39:05.360><c> three</c>

01:39:05.590 --> 01:39:05.600 align:start position:0%
and then we're going to talk about three
 

01:39:05.600 --> 01:39:07.030 align:start position:0%
and then we're going to talk about three
different<01:39:05.920><c> types</c><01:39:06.159><c> of</c><01:39:06.320><c> control</c><01:39:06.719><c> flow</c>

01:39:07.030 --> 01:39:07.040 align:start position:0%
different types of control flow
 

01:39:07.040 --> 01:39:07.669 align:start position:0%
different types of control flow
statements

01:39:07.669 --> 01:39:07.679 align:start position:0%
statements
 

01:39:07.679 --> 01:39:09.350 align:start position:0%
statements
we're<01:39:07.840><c> going</c><01:39:07.920><c> to</c><01:39:08.000><c> talk</c><01:39:08.239><c> about</c><01:39:08.800><c> conditional</c>

01:39:09.350 --> 01:39:09.360 align:start position:0%
we're going to talk about conditional
 

01:39:09.360 --> 01:39:11.510 align:start position:0%
we're going to talk about conditional
statements<01:39:09.920><c> for</c><01:39:10.320><c> making</c><01:39:10.719><c> decisions</c><01:39:11.280><c> in</c><01:39:11.360><c> our</c>

01:39:11.510 --> 01:39:11.520 align:start position:0%
statements for making decisions in our
 

01:39:11.520 --> 01:39:12.310 align:start position:0%
statements for making decisions in our
programs

01:39:12.310 --> 01:39:12.320 align:start position:0%
programs
 

01:39:12.320 --> 01:39:14.229 align:start position:0%
programs
then<01:39:12.560><c> we're</c><01:39:12.639><c> going</c><01:39:12.719><c> to</c><01:39:12.880><c> talk</c><01:39:13.040><c> about</c><01:39:13.440><c> loops</c><01:39:14.000><c> for</c>

01:39:14.229 --> 01:39:14.239 align:start position:0%
then we're going to talk about loops for
 

01:39:14.239 --> 01:39:16.149 align:start position:0%
then we're going to talk about loops for
executing<01:39:14.880><c> code</c><01:39:15.119><c> repeatedly</c>

01:39:16.149 --> 01:39:16.159 align:start position:0%
executing code repeatedly
 

01:39:16.159 --> 01:39:17.830 align:start position:0%
executing code repeatedly
and<01:39:16.400><c> finally</c><01:39:16.800><c> we're</c><01:39:16.880><c> going</c><01:39:17.040><c> to</c><01:39:17.119><c> revisit</c><01:39:17.679><c> our</c>

01:39:17.830 --> 01:39:17.840 align:start position:0%
and finally we're going to revisit our
 

01:39:17.840 --> 01:39:19.590 align:start position:0%
and finally we're going to revisit our
mortgage<01:39:18.320><c> calculator</c><01:39:19.119><c> and</c>

01:39:19.590 --> 01:39:19.600 align:start position:0%
mortgage calculator and
 

01:39:19.600 --> 01:39:22.229 align:start position:0%
mortgage calculator and
add<01:39:19.840><c> error</c><01:39:20.159><c> handling</c><01:39:20.560><c> to</c><01:39:20.800><c> it</c><01:39:21.520><c> so</c><01:39:21.679><c> if</c><01:39:21.760><c> the</c><01:39:21.920><c> user</c>

01:39:22.229 --> 01:39:22.239 align:start position:0%
add error handling to it so if the user
 

01:39:22.239 --> 01:39:23.830 align:start position:0%
add error handling to it so if the user
enters<01:39:22.639><c> an</c><01:39:22.800><c> invalid</c><01:39:23.280><c> value</c>

01:39:23.830 --> 01:39:23.840 align:start position:0%
enters an invalid value
 

01:39:23.840 --> 01:39:26.310 align:start position:0%
enters an invalid value
we<01:39:24.000><c> keep</c><01:39:24.239><c> asking</c><01:39:24.639><c> them</c><01:39:24.960><c> to</c><01:39:25.119><c> try</c><01:39:25.360><c> again</c><01:39:26.239><c> all</c>

01:39:26.310 --> 01:39:26.320 align:start position:0%
we keep asking them to try again all
 

01:39:26.320 --> 01:39:34.629 align:start position:0%
we keep asking them to try again all
right<01:39:26.480><c> now</c><01:39:26.719><c> let's</c><01:39:26.960><c> jump</c><01:39:27.199><c> in</c><01:39:27.440><c> and</c><01:39:27.679><c> get</c><01:39:27.920><c> started</c>

01:39:34.629 --> 01:39:34.639 align:start position:0%
 
 

01:39:34.639 --> 01:39:35.910 align:start position:0%
 
we're<01:39:34.800><c> going</c><01:39:34.960><c> to</c><01:39:35.040><c> start</c><01:39:35.199><c> this</c><01:39:35.360><c> section</c><01:39:35.760><c> by</c>

01:39:35.910 --> 01:39:35.920 align:start position:0%
we're going to start this section by
 

01:39:35.920 --> 01:39:38.310 align:start position:0%
we're going to start this section by
talking<01:39:36.239><c> about</c><01:39:36.639><c> comparison</c><01:39:37.360><c> operators</c>

01:39:38.310 --> 01:39:38.320 align:start position:0%
talking about comparison operators
 

01:39:38.320 --> 01:39:40.149 align:start position:0%
talking about comparison operators
we<01:39:38.480><c> use</c><01:39:38.639><c> these</c><01:39:38.880><c> operators</c><01:39:39.520><c> to</c><01:39:39.679><c> compare</c>

01:39:40.149 --> 01:39:40.159 align:start position:0%
we use these operators to compare
 

01:39:40.159 --> 01:39:41.510 align:start position:0%
we use these operators to compare
primitive<01:39:40.719><c> values</c>

01:39:41.510 --> 01:39:41.520 align:start position:0%
primitive values
 

01:39:41.520 --> 01:39:44.870 align:start position:0%
primitive values
for<01:39:41.679><c> example</c><01:39:42.400><c> are</c><01:39:42.639><c> x</c><01:39:42.880><c> and</c><01:39:43.040><c> y</c><01:39:43.360><c> equal</c><01:39:43.760><c> or</c><01:39:43.920><c> not</c>

01:39:44.870 --> 01:39:44.880 align:start position:0%
for example are x and y equal or not
 

01:39:44.880 --> 01:39:48.550 align:start position:0%
for example are x and y equal or not
so<01:39:45.280><c> i'm</c><01:39:45.360><c> going</c><01:39:45.520><c> to</c><01:39:45.600><c> declare</c><01:39:46.400><c> two</c><01:39:46.719><c> integers</c><01:39:47.600><c> x</c>

01:39:48.550 --> 01:39:48.560 align:start position:0%
so i'm going to declare two integers x
 

01:39:48.560 --> 01:39:52.149 align:start position:0%
so i'm going to declare two integers x
and<01:39:49.360><c> y</c><01:39:50.880><c> now</c><01:39:51.040><c> let's</c><01:39:51.280><c> compare</c><01:39:51.600><c> this</c><01:39:51.760><c> to</c><01:39:51.920><c> see</c><01:39:52.000><c> if</c>

01:39:52.149 --> 01:39:52.159 align:start position:0%
and y now let's compare this to see if
 

01:39:52.159 --> 01:39:53.669 align:start position:0%
and y now let's compare this to see if
they're<01:39:52.400><c> equal</c><01:39:52.719><c> or</c><01:39:52.800><c> not</c>

01:39:53.669 --> 01:39:53.679 align:start position:0%
they're equal or not
 

01:39:53.679 --> 01:39:55.910 align:start position:0%
they're equal or not
so<01:39:54.239><c> first</c><01:39:54.639><c> i'm</c><01:39:54.800><c> going</c><01:39:54.880><c> to</c><01:39:55.040><c> add</c><01:39:55.360><c> this</c><01:39:55.600><c> print</c>

01:39:55.910 --> 01:39:55.920 align:start position:0%
so first i'm going to add this print
 

01:39:55.920 --> 01:39:57.750 align:start position:0%
so first i'm going to add this print
line<01:39:56.400><c> statement</c>

01:39:57.750 --> 01:39:57.760 align:start position:0%
line statement
 

01:39:57.760 --> 01:40:00.470 align:start position:0%
line statement
now<01:39:58.000><c> to</c><01:39:58.159><c> compare</c><01:39:58.480><c> these</c><01:39:58.639><c> variables</c><01:39:59.040><c> we</c><01:39:59.199><c> type</c><01:39:59.679><c> x</c>

01:40:00.470 --> 01:40:00.480 align:start position:0%
now to compare these variables we type x
 

01:40:00.480 --> 01:40:01.270 align:start position:0%
now to compare these variables we type x
equals

01:40:01.270 --> 01:40:01.280 align:start position:0%
equals
 

01:40:01.280 --> 01:40:03.669 align:start position:0%
equals
y<01:40:01.840><c> so</c><01:40:02.000><c> here</c><01:40:02.159><c> we</c><01:40:02.320><c> have</c><01:40:02.560><c> two</c><01:40:02.800><c> equal</c><01:40:03.119><c> signs</c><01:40:03.600><c> and</c>

01:40:03.669 --> 01:40:03.679 align:start position:0%
y so here we have two equal signs and
 

01:40:03.679 --> 01:40:05.590 align:start position:0%
y so here we have two equal signs and
this<01:40:03.920><c> is</c><01:40:04.000><c> the</c><01:40:04.159><c> equality</c><01:40:04.800><c> operator</c>

01:40:05.590 --> 01:40:05.600 align:start position:0%
this is the equality operator
 

01:40:05.600 --> 01:40:08.070 align:start position:0%
this is the equality operator
don't<01:40:05.840><c> confuse</c><01:40:06.320><c> this</c><01:40:06.480><c> with</c><01:40:06.639><c> the</c><01:40:06.880><c> single</c><01:40:07.600><c> equal</c>

01:40:08.070 --> 01:40:08.080 align:start position:0%
don't confuse this with the single equal
 

01:40:08.080 --> 01:40:09.669 align:start position:0%
don't confuse this with the single equal
sign<01:40:08.320><c> that</c><01:40:08.400><c> we</c><01:40:08.560><c> use</c><01:40:08.719><c> for</c><01:40:08.880><c> assignment</c>

01:40:09.669 --> 01:40:09.679 align:start position:0%
sign that we use for assignment
 

01:40:09.679 --> 01:40:12.950 align:start position:0%
sign that we use for assignment
that<01:40:09.840><c> is</c><01:40:10.000><c> the</c><01:40:10.159><c> operator</c><01:40:10.800><c> used</c><01:40:11.360><c> over</c><01:40:11.600><c> here</c><01:40:12.159><c> okay</c>

01:40:12.950 --> 01:40:12.960 align:start position:0%
that is the operator used over here okay
 

01:40:12.960 --> 01:40:15.109 align:start position:0%
that is the operator used over here okay
so<01:40:13.440><c> two</c><01:40:13.679><c> equal</c><01:40:14.000><c> signs</c><01:40:14.480><c> represents</c><01:40:14.960><c> the</c>

01:40:15.109 --> 01:40:15.119 align:start position:0%
so two equal signs represents the
 

01:40:15.119 --> 01:40:16.629 align:start position:0%
so two equal signs represents the
equality<01:40:15.679><c> operator</c>

01:40:16.629 --> 01:40:16.639 align:start position:0%
equality operator
 

01:40:16.639 --> 01:40:20.070 align:start position:0%
equality operator
now<01:40:16.800><c> when</c><01:40:16.960><c> we</c><01:40:17.119><c> run</c><01:40:17.280><c> this</c><01:40:17.440><c> program</c><01:40:18.480><c> we</c><01:40:18.719><c> get</c><01:40:19.600><c> true</c>

01:40:20.070 --> 01:40:20.080 align:start position:0%
now when we run this program we get true
 

01:40:20.080 --> 01:40:22.950 align:start position:0%
now when we run this program we get true
because<01:40:20.400><c> these</c><01:40:20.639><c> values</c><01:40:21.040><c> are</c><01:40:21.199><c> equal</c><01:40:22.719><c> this</c>

01:40:22.950 --> 01:40:22.960 align:start position:0%
because these values are equal this
 

01:40:22.960 --> 01:40:24.709 align:start position:0%
because these values are equal this
expression<01:40:23.360><c> that</c><01:40:23.520><c> we</c><01:40:23.679><c> have</c><01:40:23.840><c> here</c><01:40:24.080><c> is</c><01:40:24.239><c> called</c>

01:40:24.709 --> 01:40:24.719 align:start position:0%
expression that we have here is called
 

01:40:24.719 --> 01:40:27.109 align:start position:0%
expression that we have here is called
a<01:40:24.960><c> boolean</c><01:40:25.520><c> expression</c><01:40:26.320><c> so</c><01:40:26.560><c> earlier</c><01:40:26.880><c> i</c><01:40:26.960><c> told</c>

01:40:27.109 --> 01:40:27.119 align:start position:0%
a boolean expression so earlier i told
 

01:40:27.119 --> 01:40:28.229 align:start position:0%
a boolean expression so earlier i told
you<01:40:27.280><c> that</c><01:40:27.360><c> an</c><01:40:27.520><c> expression</c>

01:40:28.229 --> 01:40:28.239 align:start position:0%
you that an expression
 

01:40:28.239 --> 01:40:31.030 align:start position:0%
you that an expression
is<01:40:28.400><c> a</c><01:40:28.480><c> piece</c><01:40:28.800><c> of</c><01:40:28.960><c> code</c><01:40:29.280><c> that</c><01:40:29.600><c> produces</c><01:40:30.159><c> a</c><01:40:30.320><c> value</c>

01:40:31.030 --> 01:40:31.040 align:start position:0%
is a piece of code that produces a value
 

01:40:31.040 --> 01:40:32.870 align:start position:0%
is a piece of code that produces a value
this<01:40:31.280><c> piece</c><01:40:31.520><c> of</c><01:40:31.600><c> code</c><01:40:31.840><c> produces</c><01:40:32.400><c> a</c><01:40:32.560><c> boolean</c>

01:40:32.870 --> 01:40:32.880 align:start position:0%
this piece of code produces a boolean
 

01:40:32.880 --> 01:40:33.350 align:start position:0%
this piece of code produces a boolean
value

01:40:33.350 --> 01:40:33.360 align:start position:0%
value
 

01:40:33.360 --> 01:40:35.669 align:start position:0%
value
true<01:40:33.600><c> or</c><01:40:33.840><c> false</c><01:40:34.320><c> that's</c><01:40:34.639><c> why</c><01:40:34.880><c> we</c><01:40:35.040><c> refer</c><01:40:35.280><c> to</c><01:40:35.520><c> it</c>

01:40:35.669 --> 01:40:35.679 align:start position:0%
true or false that's why we refer to it
 

01:40:35.679 --> 01:40:37.590 align:start position:0%
true or false that's why we refer to it
as<01:40:35.840><c> a</c><01:40:36.000><c> boolean</c><01:40:36.400><c> expression</c>

01:40:37.590 --> 01:40:37.600 align:start position:0%
as a boolean expression
 

01:40:37.600 --> 01:40:40.629 align:start position:0%
as a boolean expression
we<01:40:37.840><c> also</c><01:40:38.159><c> have</c><01:40:38.639><c> the</c><01:40:38.960><c> inequality</c><01:40:39.840><c> operator</c>

01:40:40.629 --> 01:40:40.639 align:start position:0%
we also have the inequality operator
 

01:40:40.639 --> 01:40:41.990 align:start position:0%
we also have the inequality operator
so<01:40:40.800><c> when</c><01:40:40.960><c> we</c><01:40:41.040><c> run</c><01:40:41.199><c> this</c><01:40:41.360><c> program</c><01:40:41.760><c> we're</c><01:40:41.920><c> going</c>

01:40:41.990 --> 01:40:42.000 align:start position:0%
so when we run this program we're going
 

01:40:42.000 --> 01:40:45.030 align:start position:0%
so when we run this program we're going
to<01:40:42.080><c> see</c><01:40:42.639><c> false</c><01:40:43.600><c> let's</c><01:40:43.840><c> take</c><01:40:44.000><c> a</c><01:40:44.080><c> look</c>

01:40:45.030 --> 01:40:45.040 align:start position:0%
to see false let's take a look
 

01:40:45.040 --> 01:40:46.950 align:start position:0%
to see false let's take a look
we<01:40:45.199><c> get</c><01:40:45.360><c> false</c><01:40:45.920><c> because</c><01:40:46.159><c> these</c><01:40:46.320><c> two</c><01:40:46.480><c> variables</c>

01:40:46.950 --> 01:40:46.960 align:start position:0%
we get false because these two variables
 

01:40:46.960 --> 01:40:48.070 align:start position:0%
we get false because these two variables
are<01:40:47.119><c> equal</c>

01:40:48.070 --> 01:40:48.080 align:start position:0%
are equal
 

01:40:48.080 --> 01:40:51.990 align:start position:0%
are equal
so<01:40:48.639><c> the</c><01:40:48.880><c> expression</c><01:40:49.600><c> x</c><01:40:50.239><c> is</c><01:40:50.400><c> not</c><01:40:50.800><c> equal</c><01:40:51.119><c> to</c><01:40:51.360><c> y</c>

01:40:51.990 --> 01:40:52.000 align:start position:0%
so the expression x is not equal to y
 

01:40:52.000 --> 01:40:56.070 align:start position:0%
so the expression x is not equal to y
returns<01:40:52.960><c> false</c><01:40:53.840><c> we</c><01:40:54.080><c> also</c><01:40:54.400><c> have</c><01:40:54.880><c> greater</c><01:40:55.360><c> than</c>

01:40:56.070 --> 01:40:56.080 align:start position:0%
returns false we also have greater than
 

01:40:56.080 --> 01:40:59.430 align:start position:0%
returns false we also have greater than
greater<01:40:56.480><c> than</c><01:40:56.960><c> or</c><01:40:57.199><c> equal</c><01:40:57.520><c> to</c><01:40:58.560><c> less</c><01:40:58.800><c> than</c>

01:40:59.430 --> 01:40:59.440 align:start position:0%
greater than or equal to less than
 

01:40:59.440 --> 01:41:02.310 align:start position:0%
greater than or equal to less than
and<01:41:00.000><c> less</c><01:41:00.159><c> than</c><01:41:00.400><c> or</c><01:41:00.560><c> equal</c><01:41:00.880><c> to</c><01:41:01.520><c> so</c><01:41:01.679><c> if</c><01:41:01.840><c> i</c><01:41:01.920><c> change</c>

01:41:02.310 --> 01:41:02.320 align:start position:0%
and less than or equal to so if i change
 

01:41:02.320 --> 01:41:02.950 align:start position:0%
and less than or equal to so if i change
y

01:41:02.950 --> 01:41:02.960 align:start position:0%
y
 

01:41:02.960 --> 01:41:04.790 align:start position:0%
y
to<01:41:03.199><c> 2</c><01:41:03.760><c> this</c><01:41:04.000><c> expression</c><01:41:04.480><c> is</c><01:41:04.639><c> going</c><01:41:04.719><c> to</c>

01:41:04.790 --> 01:41:04.800 align:start position:0%
to 2 this expression is going to
 

01:41:04.800 --> 01:41:06.149 align:start position:0%
to 2 this expression is going to
evaluate<01:41:05.280><c> to</c><01:41:05.440><c> true</c><01:41:05.760><c> because</c>

01:41:06.149 --> 01:41:06.159 align:start position:0%
evaluate to true because
 

01:41:06.159 --> 01:41:10.550 align:start position:0%
evaluate to true because
x<01:41:06.400><c> is</c><01:41:06.560><c> less</c><01:41:06.800><c> than</c><01:41:07.040><c> or</c><01:41:07.520><c> equal</c><01:41:07.840><c> to</c><01:41:08.000><c> y</c><01:41:08.480><c> take</c><01:41:08.719><c> a</c><01:41:08.800><c> look</c>

01:41:10.550 --> 01:41:10.560 align:start position:0%
x is less than or equal to y take a look
 

01:41:10.560 --> 01:41:12.629 align:start position:0%
x is less than or equal to y take a look
there<01:41:10.800><c> you</c><01:41:10.960><c> go</c><01:41:11.840><c> next</c><01:41:12.080><c> we're</c><01:41:12.239><c> going</c><01:41:12.400><c> to</c><01:41:12.480><c> talk</c>

01:41:12.629 --> 01:41:12.639 align:start position:0%
there you go next we're going to talk
 

01:41:12.639 --> 01:41:20.390 align:start position:0%
there you go next we're going to talk
about<01:41:13.199><c> logical</c><01:41:16.840><c> operators</c>

01:41:20.390 --> 01:41:20.400 align:start position:0%
 
 

01:41:20.400 --> 01:41:21.910 align:start position:0%
 
in<01:41:20.480><c> the</c><01:41:20.560><c> last</c><01:41:20.800><c> tutorial</c><01:41:21.280><c> you</c><01:41:21.360><c> learned</c><01:41:21.600><c> that</c><01:41:21.760><c> a</c>

01:41:21.910 --> 01:41:21.920 align:start position:0%
in the last tutorial you learned that a
 

01:41:21.920 --> 01:41:24.070 align:start position:0%
in the last tutorial you learned that a
boolean<01:41:22.320><c> expression</c><01:41:22.880><c> produces</c><01:41:23.440><c> a</c><01:41:23.600><c> boolean</c>

01:41:24.070 --> 01:41:24.080 align:start position:0%
boolean expression produces a boolean
 

01:41:24.080 --> 01:41:25.030 align:start position:0%
boolean expression produces a boolean
value

01:41:25.030 --> 01:41:25.040 align:start position:0%
value
 

01:41:25.040 --> 01:41:26.790 align:start position:0%
value
now<01:41:25.199><c> there</c><01:41:25.360><c> are</c><01:41:25.520><c> times</c><01:41:25.760><c> we</c><01:41:25.840><c> want</c><01:41:26.000><c> to</c><01:41:26.080><c> combine</c>

01:41:26.790 --> 01:41:26.800 align:start position:0%
now there are times we want to combine
 

01:41:26.800 --> 01:41:28.390 align:start position:0%
now there are times we want to combine
multiple<01:41:27.280><c> boolean</c><01:41:27.679><c> expressions</c>

01:41:28.390 --> 01:41:28.400 align:start position:0%
multiple boolean expressions
 

01:41:28.400 --> 01:41:30.390 align:start position:0%
multiple boolean expressions
let<01:41:28.639><c> me</c><01:41:28.719><c> show</c><01:41:28.880><c> you</c><01:41:29.520><c> so</c><01:41:29.679><c> i'm</c><01:41:29.760><c> going</c><01:41:29.840><c> to</c><01:41:29.920><c> declare</c>

01:41:30.390 --> 01:41:30.400 align:start position:0%
let me show you so i'm going to declare
 

01:41:30.400 --> 01:41:31.510 align:start position:0%
let me show you so i'm going to declare
an<01:41:30.560><c> integer</c>

01:41:31.510 --> 01:41:31.520 align:start position:0%
an integer
 

01:41:31.520 --> 01:41:35.430 align:start position:0%
an integer
called<01:41:32.159><c> temperature</c><01:41:33.440><c> and</c><01:41:33.600><c> set</c><01:41:33.840><c> it</c><01:41:33.920><c> to</c><01:41:34.080><c> 22.</c>

01:41:35.430 --> 01:41:35.440 align:start position:0%
called temperature and set it to 22.
 

01:41:35.440 --> 01:41:38.229 align:start position:0%
called temperature and set it to 22.
next<01:41:35.679><c> we</c><01:41:35.840><c> declare</c><01:41:36.480><c> a</c><01:41:36.639><c> boolean</c><01:41:37.040><c> variable</c><01:41:38.000><c> is</c>

01:41:38.229 --> 01:41:38.239 align:start position:0%
next we declare a boolean variable is
 

01:41:38.239 --> 01:41:39.350 align:start position:0%
next we declare a boolean variable is
warm

01:41:39.350 --> 01:41:39.360 align:start position:0%
warm
 

01:41:39.360 --> 01:41:40.629 align:start position:0%
warm
now<01:41:39.520><c> we</c><01:41:39.679><c> want</c><01:41:39.760><c> to</c><01:41:39.840><c> check</c><01:41:40.000><c> to</c><01:41:40.159><c> see</c><01:41:40.400><c> if</c>

01:41:40.629 --> 01:41:40.639 align:start position:0%
now we want to check to see if
 

01:41:40.639 --> 01:41:42.870 align:start position:0%
now we want to check to see if
temperature<01:41:41.199><c> is</c><01:41:41.360><c> greater</c><01:41:41.760><c> than</c><01:41:42.000><c> 20</c>

01:41:42.870 --> 01:41:42.880 align:start position:0%
temperature is greater than 20
 

01:41:42.880 --> 01:41:45.669 align:start position:0%
temperature is greater than 20
and<01:41:43.040><c> less</c><01:41:43.280><c> than</c><01:41:43.600><c> 30.</c><01:41:44.480><c> so</c><01:41:44.639><c> we</c><01:41:44.880><c> write</c><01:41:45.119><c> a</c><01:41:45.280><c> boolean</c>

01:41:45.669 --> 01:41:45.679 align:start position:0%
and less than 30. so we write a boolean
 

01:41:45.679 --> 01:41:46.870 align:start position:0%
and less than 30. so we write a boolean
expression<01:41:46.080><c> like</c><01:41:46.320><c> this</c>

01:41:46.870 --> 01:41:46.880 align:start position:0%
expression like this
 

01:41:46.880 --> 01:41:49.750 align:start position:0%
expression like this
temperature<01:41:47.840><c> greater</c><01:41:48.239><c> than</c><01:41:48.480><c> 20.</c><01:41:49.440><c> here</c><01:41:49.600><c> we</c>

01:41:49.750 --> 01:41:49.760 align:start position:0%
temperature greater than 20. here we
 

01:41:49.760 --> 01:41:50.470 align:start position:0%
temperature greater than 20. here we
need<01:41:49.840><c> to</c><01:41:50.000><c> use</c>

01:41:50.470 --> 01:41:50.480 align:start position:0%
need to use
 

01:41:50.480 --> 01:41:53.430 align:start position:0%
need to use
the<01:41:50.800><c> and</c><01:41:51.119><c> operator</c><01:41:52.000><c> so</c><01:41:52.159><c> these</c><01:41:52.400><c> two</c><01:41:52.560><c> ampersands</c>

01:41:53.430 --> 01:41:53.440 align:start position:0%
the and operator so these two ampersands
 

01:41:53.440 --> 01:41:54.790 align:start position:0%
the and operator so these two ampersands
represent<01:41:54.000><c> the</c><01:41:54.159><c> logical</c>

01:41:54.790 --> 01:41:54.800 align:start position:0%
represent the logical
 

01:41:54.800 --> 01:41:57.750 align:start position:0%
represent the logical
and<01:41:55.119><c> operator</c><01:41:55.600><c> in</c><01:41:55.840><c> java</c><01:41:56.800><c> after</c><01:41:57.119><c> this</c><01:41:57.280><c> we</c><01:41:57.520><c> add</c>

01:41:57.750 --> 01:41:57.760 align:start position:0%
and operator in java after this we add
 

01:41:57.760 --> 01:41:59.270 align:start position:0%
and operator in java after this we add
our<01:41:58.000><c> second</c><01:41:58.320><c> condition</c>

01:41:59.270 --> 01:41:59.280 align:start position:0%
our second condition
 

01:41:59.280 --> 01:42:02.470 align:start position:0%
our second condition
temperature<01:42:00.560><c> less</c><01:42:00.800><c> than</c><01:42:01.440><c> 30.</c>

01:42:02.470 --> 01:42:02.480 align:start position:0%
temperature less than 30.
 

01:42:02.480 --> 01:42:04.629 align:start position:0%
temperature less than 30.
now<01:42:02.719><c> if</c><01:42:02.960><c> both</c><01:42:03.119><c> these</c><01:42:03.280><c> conditions</c><01:42:03.840><c> are</c><01:42:04.000><c> true</c>

01:42:04.629 --> 01:42:04.639 align:start position:0%
now if both these conditions are true
 

01:42:04.639 --> 01:42:06.550 align:start position:0%
now if both these conditions are true
the<01:42:04.800><c> result</c><01:42:05.280><c> of</c><01:42:05.360><c> this</c><01:42:05.520><c> boolean</c><01:42:05.840><c> expression</c><01:42:06.400><c> is</c>

01:42:06.550 --> 01:42:06.560 align:start position:0%
the result of this boolean expression is
 

01:42:06.560 --> 01:42:07.510 align:start position:0%
the result of this boolean expression is
going<01:42:06.639><c> to</c><01:42:06.719><c> be</c><01:42:06.960><c> true</c>

01:42:07.510 --> 01:42:07.520 align:start position:0%
going to be true
 

01:42:07.520 --> 01:42:09.270 align:start position:0%
going to be true
otherwise<01:42:08.080><c> if</c><01:42:08.320><c> at</c><01:42:08.400><c> least</c><01:42:08.639><c> one</c><01:42:08.800><c> of</c><01:42:08.880><c> these</c><01:42:09.119><c> is</c>

01:42:09.270 --> 01:42:09.280 align:start position:0%
otherwise if at least one of these is
 

01:42:09.280 --> 01:42:11.270 align:start position:0%
otherwise if at least one of these is
false<01:42:09.920><c> the</c><01:42:10.080><c> result</c><01:42:10.480><c> will</c><01:42:10.639><c> be</c><01:42:10.800><c> false</c>

01:42:11.270 --> 01:42:11.280 align:start position:0%
false the result will be false
 

01:42:11.280 --> 01:42:13.910 align:start position:0%
false the result will be false
let's<01:42:11.520><c> take</c><01:42:11.679><c> a</c><01:42:11.760><c> look</c><01:42:12.320><c> so</c><01:42:12.480><c> i'm</c><01:42:12.639><c> going</c><01:42:12.719><c> to</c><01:42:12.880><c> print</c>

01:42:13.910 --> 01:42:13.920 align:start position:0%
let's take a look so i'm going to print
 

01:42:13.920 --> 01:42:14.790 align:start position:0%
let's take a look so i'm going to print
is<01:42:14.159><c> warm</c>

01:42:14.790 --> 01:42:14.800 align:start position:0%
is warm
 

01:42:14.800 --> 01:42:18.470 align:start position:0%
is warm
on<01:42:14.880><c> the</c><01:42:15.040><c> terminal</c>

01:42:18.470 --> 01:42:18.480 align:start position:0%
 
 

01:42:18.480 --> 01:42:20.870 align:start position:0%
 
the<01:42:18.639><c> result</c><01:42:19.040><c> is</c><01:42:19.199><c> true</c><01:42:20.080><c> but</c><01:42:20.320><c> if</c><01:42:20.400><c> you</c><01:42:20.560><c> change</c><01:42:20.800><c> the</c>

01:42:20.870 --> 01:42:20.880 align:start position:0%
the result is true but if you change the
 

01:42:20.880 --> 01:42:21.830 align:start position:0%
the result is true but if you change the
temperature<01:42:21.440><c> to</c>

01:42:21.830 --> 01:42:21.840 align:start position:0%
temperature to
 

01:42:21.840 --> 01:42:25.430 align:start position:0%
temperature to
let's<01:42:22.080><c> say</c><01:42:22.400><c> 12.</c>

01:42:25.430 --> 01:42:25.440 align:start position:0%
 
 

01:42:25.440 --> 01:42:27.510 align:start position:0%
 
the<01:42:25.600><c> result</c><01:42:25.920><c> is</c><01:42:26.000><c> going</c><01:42:26.080><c> to</c><01:42:26.159><c> be</c><01:42:26.400><c> false</c><01:42:27.199><c> and</c><01:42:27.280><c> this</c>

01:42:27.510 --> 01:42:27.520 align:start position:0%
the result is going to be false and this
 

01:42:27.520 --> 01:42:28.950 align:start position:0%
the result is going to be false and this
is<01:42:27.600><c> how</c><01:42:27.840><c> this</c><01:42:28.080><c> works</c>

01:42:28.950 --> 01:42:28.960 align:start position:0%
is how this works
 

01:42:28.960 --> 01:42:30.950 align:start position:0%
is how this works
java<01:42:29.280><c> will</c><01:42:29.600><c> evaluate</c><01:42:30.000><c> this</c><01:42:30.239><c> expression</c><01:42:30.800><c> from</c>

01:42:30.950 --> 01:42:30.960 align:start position:0%
java will evaluate this expression from
 

01:42:30.960 --> 01:42:32.070 align:start position:0%
java will evaluate this expression from
left<01:42:31.199><c> to</c><01:42:31.360><c> right</c>

01:42:32.070 --> 01:42:32.080 align:start position:0%
left to right
 

01:42:32.080 --> 01:42:33.990 align:start position:0%
left to right
first<01:42:32.320><c> it</c><01:42:32.400><c> looks</c><01:42:32.639><c> at</c><01:42:32.800><c> the</c><01:42:32.880><c> first</c><01:42:33.119><c> condition</c>

01:42:33.990 --> 01:42:34.000 align:start position:0%
first it looks at the first condition
 

01:42:34.000 --> 01:42:35.669 align:start position:0%
first it looks at the first condition
the<01:42:34.159><c> first</c><01:42:34.400><c> condition</c><01:42:34.800><c> is</c><01:42:35.040><c> false</c><01:42:35.360><c> because</c>

01:42:35.669 --> 01:42:35.679 align:start position:0%
the first condition is false because
 

01:42:35.679 --> 01:42:36.310 align:start position:0%
the first condition is false because
temperature

01:42:36.310 --> 01:42:36.320 align:start position:0%
temperature
 

01:42:36.320 --> 01:42:38.790 align:start position:0%
temperature
is<01:42:36.560><c> not</c><01:42:36.800><c> greater</c><01:42:37.199><c> than</c><01:42:37.360><c> 20.</c><01:42:38.080><c> so</c><01:42:38.320><c> because</c><01:42:38.560><c> this</c>

01:42:38.790 --> 01:42:38.800 align:start position:0%
is not greater than 20. so because this
 

01:42:38.800 --> 01:42:39.990 align:start position:0%
is not greater than 20. so because this
expression<01:42:39.360><c> is</c><01:42:39.520><c> false</c>

01:42:39.990 --> 01:42:40.000 align:start position:0%
expression is false
 

01:42:40.000 --> 01:42:42.950 align:start position:0%
expression is false
it<01:42:40.239><c> doesn't</c><01:42:40.560><c> matter</c><01:42:41.199><c> what</c><01:42:41.440><c> we</c><01:42:41.600><c> have</c><01:42:42.080><c> after</c><01:42:42.719><c> the</c>

01:42:42.950 --> 01:42:42.960 align:start position:0%
it doesn't matter what we have after the
 

01:42:42.960 --> 01:42:43.430 align:start position:0%
it doesn't matter what we have after the
and

01:42:43.430 --> 01:42:43.440 align:start position:0%
and
 

01:42:43.440 --> 01:42:45.830 align:start position:0%
and
operator<01:42:44.480><c> java</c><01:42:44.800><c> will</c><01:42:44.960><c> ignore</c><01:42:45.440><c> the</c><01:42:45.679><c> other</c>

01:42:45.830 --> 01:42:45.840 align:start position:0%
operator java will ignore the other
 

01:42:45.840 --> 01:42:46.629 align:start position:0%
operator java will ignore the other
expressions

01:42:46.629 --> 01:42:46.639 align:start position:0%
expressions
 

01:42:46.639 --> 01:42:48.310 align:start position:0%
expressions
because<01:42:46.880><c> the</c><01:42:47.119><c> and</c><01:42:47.360><c> operator</c><01:42:47.840><c> will</c><01:42:48.000><c> return</c>

01:42:48.310 --> 01:42:48.320 align:start position:0%
because the and operator will return
 

01:42:48.320 --> 01:42:50.870 align:start position:0%
because the and operator will return
true<01:42:48.800><c> if</c><01:42:49.119><c> both</c><01:42:49.440><c> conditions</c><01:42:50.000><c> are</c><01:42:50.159><c> true</c>

01:42:50.870 --> 01:42:50.880 align:start position:0%
true if both conditions are true
 

01:42:50.880 --> 01:42:53.430 align:start position:0%
true if both conditions are true
okay<01:42:51.600><c> now</c><01:42:51.840><c> let's</c><01:42:52.000><c> look</c><01:42:52.239><c> at</c><01:42:52.480><c> another</c><01:42:52.880><c> operator</c>

01:42:53.430 --> 01:42:53.440 align:start position:0%
okay now let's look at another operator
 

01:42:53.440 --> 01:42:55.030 align:start position:0%
okay now let's look at another operator
that<01:42:53.679><c> is</c><01:42:53.760><c> the</c><01:42:53.920><c> or</c><01:42:54.239><c> operator</c>

01:42:55.030 --> 01:42:55.040 align:start position:0%
that is the or operator
 

01:42:55.040 --> 01:42:57.189 align:start position:0%
that is the or operator
so<01:42:55.199><c> i'm</c><01:42:55.360><c> going</c><01:42:55.440><c> to</c><01:42:55.520><c> delete</c><01:42:55.760><c> all</c><01:42:55.920><c> this</c><01:42:56.159><c> code</c><01:42:56.560><c> and</c>

01:42:57.189 --> 01:42:57.199 align:start position:0%
so i'm going to delete all this code and
 

01:42:57.199 --> 01:42:59.030 align:start position:0%
so i'm going to delete all this code and
start<01:42:57.520><c> with</c><01:42:57.679><c> a</c><01:42:57.760><c> new</c><01:42:57.920><c> example</c>

01:42:59.030 --> 01:42:59.040 align:start position:0%
start with a new example
 

01:42:59.040 --> 01:43:02.950 align:start position:0%
start with a new example
let's<01:42:59.280><c> declare</c><01:42:59.679><c> a</c><01:42:59.760><c> boolean</c><01:43:01.040><c> has</c><01:43:01.679><c> high</c><01:43:02.000><c> income</c>

01:43:02.950 --> 01:43:02.960 align:start position:0%
let's declare a boolean has high income
 

01:43:02.960 --> 01:43:06.709 align:start position:0%
let's declare a boolean has high income
we<01:43:03.119><c> set</c><01:43:03.280><c> it</c><01:43:03.360><c> to</c><01:43:03.520><c> true</c><01:43:04.480><c> and</c><01:43:05.119><c> another</c><01:43:05.520><c> boolean</c>

01:43:06.709 --> 01:43:06.719 align:start position:0%
we set it to true and another boolean
 

01:43:06.719 --> 01:43:10.070 align:start position:0%
we set it to true and another boolean
has<01:43:07.280><c> good</c><01:43:08.000><c> credit</c><01:43:08.560><c> we</c><01:43:08.800><c> set</c><01:43:08.960><c> this</c><01:43:09.199><c> to</c><01:43:09.360><c> true</c><01:43:09.840><c> as</c>

01:43:10.070 --> 01:43:10.080 align:start position:0%
has good credit we set this to true as
 

01:43:10.080 --> 01:43:10.870 align:start position:0%
has good credit we set this to true as
well

01:43:10.870 --> 01:43:10.880 align:start position:0%
well
 

01:43:10.880 --> 01:43:12.070 align:start position:0%
well
so<01:43:11.040><c> let's</c><01:43:11.199><c> say</c><01:43:11.360><c> we're</c><01:43:11.600><c> building</c><01:43:11.920><c> an</c>

01:43:12.070 --> 01:43:12.080 align:start position:0%
so let's say we're building an
 

01:43:12.080 --> 01:43:13.990 align:start position:0%
so let's say we're building an
application<01:43:12.560><c> for</c><01:43:12.800><c> processing</c><01:43:13.360><c> loans</c>

01:43:13.990 --> 01:43:14.000 align:start position:0%
application for processing loans
 

01:43:14.000 --> 01:43:15.750 align:start position:0%
application for processing loans
we<01:43:14.159><c> want</c><01:43:14.239><c> to</c><01:43:14.320><c> see</c><01:43:14.560><c> if</c><01:43:14.719><c> a</c><01:43:14.800><c> new</c><01:43:15.040><c> applicant</c><01:43:15.600><c> is</c>

01:43:15.750 --> 01:43:15.760 align:start position:0%
we want to see if a new applicant is
 

01:43:15.760 --> 01:43:17.750 align:start position:0%
we want to see if a new applicant is
eligible<01:43:16.239><c> for</c><01:43:16.400><c> a</c><01:43:16.480><c> loan</c><01:43:16.800><c> or</c><01:43:16.960><c> not</c>

01:43:17.750 --> 01:43:17.760 align:start position:0%
eligible for a loan or not
 

01:43:17.760 --> 01:43:21.510 align:start position:0%
eligible for a loan or not
so<01:43:17.920><c> we</c><01:43:18.080><c> declare</c><01:43:19.280><c> another</c><01:43:19.679><c> boolean</c><01:43:20.719><c> is</c>

01:43:21.510 --> 01:43:21.520 align:start position:0%
so we declare another boolean is
 

01:43:21.520 --> 01:43:23.910 align:start position:0%
so we declare another boolean is
eligible<01:43:22.960><c> and</c><01:43:23.119><c> by</c><01:43:23.280><c> the</c><01:43:23.360><c> way</c><01:43:23.520><c> look</c><01:43:23.679><c> at</c><01:43:23.760><c> the</c>

01:43:23.910 --> 01:43:23.920 align:start position:0%
eligible and by the way look at the
 

01:43:23.920 --> 01:43:25.669 align:start position:0%
eligible and by the way look at the
names<01:43:24.239><c> i</c><01:43:24.320><c> have</c><01:43:24.480><c> used</c><01:43:24.719><c> for</c><01:43:24.880><c> these</c><01:43:25.119><c> variables</c>

01:43:25.669 --> 01:43:25.679 align:start position:0%
names i have used for these variables
 

01:43:25.679 --> 01:43:28.310 align:start position:0%
names i have used for these variables
they're<01:43:26.000><c> very</c><01:43:26.239><c> meaningful</c><01:43:26.800><c> and</c><01:43:26.960><c> descriptive</c>

01:43:28.310 --> 01:43:28.320 align:start position:0%
they're very meaningful and descriptive
 

01:43:28.320 --> 01:43:28.950 align:start position:0%
they're very meaningful and descriptive
so

01:43:28.950 --> 01:43:28.960 align:start position:0%
so
 

01:43:28.960 --> 01:43:31.669 align:start position:0%
so
here's<01:43:29.280><c> the</c><01:43:29.440><c> rule</c><01:43:30.080><c> an</c><01:43:30.320><c> applicant</c><01:43:30.800><c> is</c><01:43:30.960><c> eligible</c>

01:43:31.669 --> 01:43:31.679 align:start position:0%
here's the rule an applicant is eligible
 

01:43:31.679 --> 01:43:32.950 align:start position:0%
here's the rule an applicant is eligible
if<01:43:31.840><c> they</c><01:43:32.000><c> have</c><01:43:32.159><c> high</c><01:43:32.480><c> income</c>

01:43:32.950 --> 01:43:32.960 align:start position:0%
if they have high income
 

01:43:32.960 --> 01:43:35.030 align:start position:0%
if they have high income
or<01:43:33.520><c> good</c><01:43:33.760><c> credit</c><01:43:34.400><c> if</c><01:43:34.639><c> one</c><01:43:34.800><c> of</c><01:43:34.880><c> these</c>

01:43:35.030 --> 01:43:35.040 align:start position:0%
or good credit if one of these
 

01:43:35.040 --> 01:43:36.470 align:start position:0%
or good credit if one of these
conditions<01:43:35.600><c> is</c><01:43:35.840><c> true</c>

01:43:36.470 --> 01:43:36.480 align:start position:0%
conditions is true
 

01:43:36.480 --> 01:43:39.750 align:start position:0%
conditions is true
they<01:43:36.719><c> are</c><01:43:37.040><c> eligible</c><01:43:38.159><c> so</c><01:43:38.400><c> we</c><01:43:38.560><c> write</c><01:43:39.360><c> has</c>

01:43:39.750 --> 01:43:39.760 align:start position:0%
they are eligible so we write has
 

01:43:39.760 --> 01:43:43.590 align:start position:0%
they are eligible so we write has
high<01:43:40.000><c> income</c><01:43:42.080><c> or</c><01:43:42.639><c> so</c><01:43:42.800><c> these</c><01:43:42.960><c> two</c><01:43:43.119><c> vertical</c>

01:43:43.590 --> 01:43:43.600 align:start position:0%
high income or so these two vertical
 

01:43:43.600 --> 01:43:46.229 align:start position:0%
high income or so these two vertical
bars<01:43:43.920><c> represent</c><01:43:44.400><c> the</c><01:43:44.639><c> or</c><01:43:44.960><c> operator</c>

01:43:46.229 --> 01:43:46.239 align:start position:0%
bars represent the or operator
 

01:43:46.239 --> 01:43:49.270 align:start position:0%
bars represent the or operator
so<01:43:46.400><c> if</c><01:43:46.560><c> they</c><01:43:46.719><c> have</c><01:43:46.880><c> high</c><01:43:47.119><c> income</c><01:43:47.600><c> or</c><01:43:48.800><c> good</c>

01:43:49.270 --> 01:43:49.280 align:start position:0%
so if they have high income or good
 

01:43:49.280 --> 01:43:52.470 align:start position:0%
so if they have high income or good
credit<01:43:50.400><c> then</c><01:43:50.639><c> they</c><01:43:50.880><c> are</c><01:43:51.040><c> eligible</c><01:43:52.159><c> so</c><01:43:52.320><c> with</c>

01:43:52.470 --> 01:43:52.480 align:start position:0%
credit then they are eligible so with
 

01:43:52.480 --> 01:43:53.590 align:start position:0%
credit then they are eligible so with
the<01:43:52.639><c> or</c><01:43:52.960><c> operator</c>

01:43:53.590 --> 01:43:53.600 align:start position:0%
the or operator
 

01:43:53.600 --> 01:43:56.229 align:start position:0%
the or operator
if<01:43:53.920><c> at</c><01:43:54.080><c> least</c><01:43:54.560><c> one</c><01:43:54.800><c> condition</c><01:43:55.360><c> is</c><01:43:55.600><c> true</c><01:43:56.080><c> the</c>

01:43:56.229 --> 01:43:56.239 align:start position:0%
if at least one condition is true the
 

01:43:56.239 --> 01:43:57.990 align:start position:0%
if at least one condition is true the
result<01:43:56.639><c> will</c><01:43:56.800><c> be</c><01:43:57.040><c> true</c>

01:43:57.990 --> 01:43:58.000 align:start position:0%
result will be true
 

01:43:58.000 --> 01:44:00.310 align:start position:0%
result will be true
in<01:43:58.080><c> this</c><01:43:58.320><c> example</c><01:43:58.960><c> when</c><01:43:59.199><c> java</c><01:43:59.600><c> evaluates</c><01:44:00.159><c> this</c>

01:44:00.310 --> 01:44:00.320 align:start position:0%
in this example when java evaluates this
 

01:44:00.320 --> 01:44:01.189 align:start position:0%
in this example when java evaluates this
expression

01:44:01.189 --> 01:44:01.199 align:start position:0%
expression
 

01:44:01.199 --> 01:44:03.189 align:start position:0%
expression
it<01:44:01.360><c> starts</c><01:44:01.760><c> from</c><01:44:01.920><c> the</c><01:44:02.000><c> left</c><01:44:02.320><c> side</c><01:44:02.960><c> this</c>

01:44:03.189 --> 01:44:03.199 align:start position:0%
it starts from the left side this
 

01:44:03.199 --> 01:44:05.270 align:start position:0%
it starts from the left side this
boolean<01:44:03.600><c> variable</c><01:44:04.080><c> is</c><01:44:04.320><c> true</c><01:44:04.719><c> so</c><01:44:04.960><c> it</c><01:44:05.040><c> doesn't</c>

01:44:05.270 --> 01:44:05.280 align:start position:0%
boolean variable is true so it doesn't
 

01:44:05.280 --> 01:44:06.709 align:start position:0%
boolean variable is true so it doesn't
matter<01:44:05.600><c> what</c><01:44:05.760><c> we</c><01:44:05.920><c> have</c><01:44:06.159><c> after</c>

01:44:06.709 --> 01:44:06.719 align:start position:0%
matter what we have after
 

01:44:06.719 --> 01:44:09.109 align:start position:0%
matter what we have after
java<01:44:07.119><c> will</c><01:44:07.280><c> not</c><01:44:07.600><c> evaluate</c><01:44:08.320><c> the</c><01:44:08.480><c> rest</c><01:44:08.800><c> of</c><01:44:08.880><c> this</c>

01:44:09.109 --> 01:44:09.119 align:start position:0%
java will not evaluate the rest of this
 

01:44:09.119 --> 01:44:09.910 align:start position:0%
java will not evaluate the rest of this
expression

01:44:09.910 --> 01:44:09.920 align:start position:0%
expression
 

01:44:09.920 --> 01:44:12.790 align:start position:0%
expression
it<01:44:10.080><c> simply</c><01:44:10.400><c> returns</c><01:44:10.960><c> true</c><01:44:11.760><c> however</c><01:44:12.400><c> if</c><01:44:12.560><c> this</c>

01:44:12.790 --> 01:44:12.800 align:start position:0%
it simply returns true however if this
 

01:44:12.800 --> 01:44:15.350 align:start position:0%
it simply returns true however if this
variable<01:44:13.199><c> was</c><01:44:13.440><c> false</c>

01:44:15.350 --> 01:44:15.360 align:start position:0%
variable was false
 

01:44:15.360 --> 01:44:17.030 align:start position:0%
variable was false
java<01:44:15.679><c> would</c><01:44:15.840><c> continue</c><01:44:16.239><c> evaluating</c><01:44:16.800><c> this</c>

01:44:17.030 --> 01:44:17.040 align:start position:0%
java would continue evaluating this
 

01:44:17.040 --> 01:44:18.550 align:start position:0%
java would continue evaluating this
expression<01:44:17.920><c> hoping</c>

01:44:18.550 --> 01:44:18.560 align:start position:0%
expression hoping
 

01:44:18.560 --> 01:44:20.629 align:start position:0%
expression hoping
that<01:44:18.719><c> the</c><01:44:18.880><c> next</c><01:44:19.199><c> boolean</c><01:44:19.600><c> value</c><01:44:20.000><c> or</c><01:44:20.320><c> the</c><01:44:20.400><c> next</c>

01:44:20.629 --> 01:44:20.639 align:start position:0%
that the next boolean value or the next
 

01:44:20.639 --> 01:44:22.390 align:start position:0%
that the next boolean value or the next
boolean<01:44:21.040><c> expression</c><01:44:21.440><c> is</c><01:44:21.679><c> true</c>

01:44:22.390 --> 01:44:22.400 align:start position:0%
boolean expression is true
 

01:44:22.400 --> 01:44:24.870 align:start position:0%
boolean expression is true
so<01:44:22.560><c> this</c><01:44:22.800><c> is</c><01:44:22.880><c> the</c><01:44:23.040><c> or</c><01:44:23.360><c> operator</c><01:44:24.320><c> and</c><01:44:24.480><c> finally</c>

01:44:24.870 --> 01:44:24.880 align:start position:0%
so this is the or operator and finally
 

01:44:24.880 --> 01:44:25.430 align:start position:0%
so this is the or operator and finally
we<01:44:25.040><c> have</c>

01:44:25.430 --> 01:44:25.440 align:start position:0%
we have
 

01:44:25.440 --> 01:44:27.669 align:start position:0%
we have
the<01:44:25.679><c> not</c><01:44:26.000><c> operator</c><01:44:26.480><c> that</c><01:44:26.560><c> we</c><01:44:26.719><c> use</c><01:44:26.960><c> to</c><01:44:27.119><c> reverse</c>

01:44:27.669 --> 01:44:27.679 align:start position:0%
the not operator that we use to reverse
 

01:44:27.679 --> 01:44:30.070 align:start position:0%
the not operator that we use to reverse
a<01:44:27.840><c> value</c><01:44:28.320><c> let</c><01:44:28.560><c> me</c><01:44:28.639><c> show</c><01:44:28.800><c> you</c><01:44:28.880><c> how</c><01:44:29.040><c> that</c><01:44:29.199><c> works</c>

01:44:30.070 --> 01:44:30.080 align:start position:0%
a value let me show you how that works
 

01:44:30.080 --> 01:44:32.830 align:start position:0%
a value let me show you how that works
so<01:44:30.880><c> let's</c><01:44:31.119><c> declare</c><01:44:31.760><c> another</c><01:44:32.159><c> boolean</c>

01:44:32.830 --> 01:44:32.840 align:start position:0%
so let's declare another boolean
 

01:44:32.840 --> 01:44:34.709 align:start position:0%
so let's declare another boolean
variable<01:44:33.920><c> has</c>

01:44:34.709 --> 01:44:34.719 align:start position:0%
variable has
 

01:44:34.719 --> 01:44:38.310 align:start position:0%
variable has
criminal<01:44:35.600><c> record</c><01:44:36.639><c> we</c><01:44:36.800><c> set</c><01:44:36.960><c> this</c><01:44:37.119><c> to</c><01:44:37.360><c> false</c>

01:44:38.310 --> 01:44:38.320 align:start position:0%
criminal record we set this to false
 

01:44:38.320 --> 01:44:40.149 align:start position:0%
criminal record we set this to false
so<01:44:38.480><c> here's</c><01:44:38.719><c> the</c><01:44:38.800><c> rule</c><01:44:39.040><c> we</c><01:44:39.199><c> want</c><01:44:39.280><c> to</c><01:44:39.360><c> implement</c>

01:44:40.149 --> 01:44:40.159 align:start position:0%
so here's the rule we want to implement
 

01:44:40.159 --> 01:44:42.070 align:start position:0%
so here's the rule we want to implement
in<01:44:40.320><c> order</c><01:44:40.639><c> for</c><01:44:40.800><c> someone</c><01:44:41.119><c> to</c><01:44:41.280><c> be</c><01:44:41.440><c> eligible</c><01:44:41.920><c> for</c>

01:44:42.070 --> 01:44:42.080 align:start position:0%
in order for someone to be eligible for
 

01:44:42.080 --> 01:44:42.950 align:start position:0%
in order for someone to be eligible for
a<01:44:42.239><c> loan</c>

01:44:42.950 --> 01:44:42.960 align:start position:0%
a loan
 

01:44:42.960 --> 01:44:45.510 align:start position:0%
a loan
they<01:44:43.119><c> should</c><01:44:43.360><c> either</c><01:44:43.679><c> have</c><01:44:44.320><c> high</c><01:44:44.639><c> income</c><01:44:45.119><c> or</c>

01:44:45.510 --> 01:44:45.520 align:start position:0%
they should either have high income or
 

01:44:45.520 --> 01:44:46.550 align:start position:0%
they should either have high income or
good<01:44:45.760><c> credit</c>

01:44:46.550 --> 01:44:46.560 align:start position:0%
good credit
 

01:44:46.560 --> 01:44:48.870 align:start position:0%
good credit
and<01:44:46.719><c> they</c><01:44:46.880><c> should</c><01:44:47.199><c> not</c><01:44:47.440><c> have</c><01:44:48.239><c> any</c><01:44:48.480><c> criminal</c>

01:44:48.870 --> 01:44:48.880 align:start position:0%
and they should not have any criminal
 

01:44:48.880 --> 01:44:49.990 align:start position:0%
and they should not have any criminal
records

01:44:49.990 --> 01:44:50.000 align:start position:0%
records
 

01:44:50.000 --> 01:44:51.590 align:start position:0%
records
so<01:44:50.239><c> let's</c><01:44:50.400><c> see</c><01:44:50.560><c> how</c><01:44:50.719><c> we</c><01:44:50.800><c> can</c><01:44:51.040><c> implement</c><01:44:51.440><c> this</c>

01:44:51.590 --> 01:44:51.600 align:start position:0%
so let's see how we can implement this
 

01:44:51.600 --> 01:44:54.149 align:start position:0%
so let's see how we can implement this
rule<01:44:52.400><c> we</c><01:44:52.560><c> have</c><01:44:52.719><c> implemented</c><01:44:53.199><c> the</c><01:44:53.360><c> first</c><01:44:53.600><c> part</c>

01:44:54.149 --> 01:44:54.159 align:start position:0%
rule we have implemented the first part
 

01:44:54.159 --> 01:44:55.990 align:start position:0%
rule we have implemented the first part
they<01:44:54.320><c> should</c><01:44:54.480><c> either</c><01:44:54.719><c> have</c><01:44:54.880><c> high</c><01:44:55.119><c> income</c><01:44:55.520><c> or</c>

01:44:55.990 --> 01:44:56.000 align:start position:0%
they should either have high income or
 

01:44:56.000 --> 01:44:57.270 align:start position:0%
they should either have high income or
good<01:44:56.320><c> credit</c>

01:44:57.270 --> 01:44:57.280 align:start position:0%
good credit
 

01:44:57.280 --> 01:44:59.109 align:start position:0%
good credit
now<01:44:57.440><c> we</c><01:44:57.600><c> want</c><01:44:57.679><c> to</c><01:44:57.760><c> make</c><01:44:58.000><c> sure</c><01:44:58.320><c> that</c><01:44:58.560><c> they</c><01:44:58.880><c> don't</c>

01:44:59.109 --> 01:44:59.119 align:start position:0%
now we want to make sure that they don't
 

01:44:59.119 --> 01:45:00.950 align:start position:0%
now we want to make sure that they don't
have<01:44:59.440><c> any</c><01:44:59.600><c> criminal</c><01:45:00.080><c> records</c>

01:45:00.950 --> 01:45:00.960 align:start position:0%
have any criminal records
 

01:45:00.960 --> 01:45:02.870 align:start position:0%
have any criminal records
so<01:45:01.119><c> we</c><01:45:01.280><c> need</c><01:45:01.440><c> to</c><01:45:01.520><c> combine</c><01:45:02.000><c> the</c><01:45:02.159><c> result</c><01:45:02.560><c> of</c><01:45:02.639><c> this</c>

01:45:02.870 --> 01:45:02.880 align:start position:0%
so we need to combine the result of this
 

01:45:02.880 --> 01:45:05.189 align:start position:0%
so we need to combine the result of this
expression<01:45:03.840><c> with</c><01:45:04.080><c> this</c><01:45:04.239><c> boolean</c><01:45:04.639><c> value</c>

01:45:05.189 --> 01:45:05.199 align:start position:0%
expression with this boolean value
 

01:45:05.199 --> 01:45:08.550 align:start position:0%
expression with this boolean value
using<01:45:05.520><c> the</c><01:45:05.760><c> and</c><01:45:06.080><c> operator</c><01:45:07.199><c> so</c><01:45:07.520><c> first</c><01:45:07.760><c> we</c><01:45:08.000><c> wrap</c>

01:45:08.550 --> 01:45:08.560 align:start position:0%
using the and operator so first we wrap
 

01:45:08.560 --> 01:45:11.590 align:start position:0%
using the and operator so first we wrap
this<01:45:08.800><c> expression</c><01:45:09.440><c> in</c><01:45:09.600><c> parenthesis</c><01:45:11.199><c> then</c><01:45:11.360><c> we</c>

01:45:11.590 --> 01:45:11.600 align:start position:0%
this expression in parenthesis then we
 

01:45:11.600 --> 01:45:12.149 align:start position:0%
this expression in parenthesis then we
apply

01:45:12.149 --> 01:45:12.159 align:start position:0%
apply
 

01:45:12.159 --> 01:45:15.590 align:start position:0%
apply
the<01:45:12.320><c> and</c><01:45:12.719><c> operator</c><01:45:13.760><c> and</c><01:45:13.920><c> here</c><01:45:14.080><c> we</c><01:45:14.239><c> add</c><01:45:14.960><c> has</c>

01:45:15.590 --> 01:45:15.600 align:start position:0%
the and operator and here we add has
 

01:45:15.600 --> 01:45:17.830 align:start position:0%
the and operator and here we add has
criminal<01:45:16.080><c> record</c><01:45:17.119><c> now</c><01:45:17.280><c> we</c><01:45:17.360><c> want</c><01:45:17.520><c> to</c><01:45:17.600><c> make</c><01:45:17.679><c> sure</c>

01:45:17.830 --> 01:45:17.840 align:start position:0%
criminal record now we want to make sure
 

01:45:17.840 --> 01:45:19.590 align:start position:0%
criminal record now we want to make sure
they<01:45:18.080><c> don't</c><01:45:18.320><c> have</c><01:45:18.480><c> criminal</c><01:45:18.880><c> record</c><01:45:19.360><c> and</c><01:45:19.440><c> this</c>

01:45:19.590 --> 01:45:19.600 align:start position:0%
they don't have criminal record and this
 

01:45:19.600 --> 01:45:20.629 align:start position:0%
they don't have criminal record and this
is<01:45:19.760><c> where</c><01:45:20.000><c> we</c><01:45:20.159><c> use</c>

01:45:20.629 --> 01:45:20.639 align:start position:0%
is where we use
 

01:45:20.639 --> 01:45:23.750 align:start position:0%
is where we use
the<01:45:20.960><c> not</c><01:45:21.360><c> operator</c><01:45:22.400><c> so</c><01:45:22.719><c> the</c><01:45:22.960><c> not</c><01:45:23.360><c> operator</c>

01:45:23.750 --> 01:45:23.760 align:start position:0%
the not operator so the not operator
 

01:45:23.760 --> 01:45:25.189 align:start position:0%
the not operator so the not operator
will<01:45:23.920><c> reverse</c><01:45:24.400><c> the</c><01:45:24.560><c> value</c>

01:45:25.189 --> 01:45:25.199 align:start position:0%
will reverse the value
 

01:45:25.199 --> 01:45:27.590 align:start position:0%
will reverse the value
of<01:45:25.360><c> this</c><01:45:25.520><c> boolean</c><01:45:25.920><c> variable</c><01:45:26.400><c> or</c><01:45:26.560><c> expression</c>

01:45:27.590 --> 01:45:27.600 align:start position:0%
of this boolean variable or expression
 

01:45:27.600 --> 01:45:28.470 align:start position:0%
of this boolean variable or expression
in<01:45:27.679><c> this</c><01:45:27.920><c> case</c>

01:45:28.470 --> 01:45:28.480 align:start position:0%
in this case
 

01:45:28.480 --> 01:45:31.109 align:start position:0%
in this case
this<01:45:28.800><c> variable</c><01:45:29.199><c> is</c><01:45:29.360><c> set</c><01:45:29.600><c> to</c><01:45:29.840><c> false</c><01:45:30.560><c> so</c><01:45:30.800><c> when</c><01:45:30.960><c> we</c>

01:45:31.109 --> 01:45:31.119 align:start position:0%
this variable is set to false so when we
 

01:45:31.119 --> 01:45:31.910 align:start position:0%
this variable is set to false so when we
apply<01:45:31.360><c> the</c><01:45:31.600><c> not</c>

01:45:31.910 --> 01:45:31.920 align:start position:0%
apply the not
 

01:45:31.920 --> 01:45:34.229 align:start position:0%
apply the not
operator<01:45:32.320><c> to</c><01:45:32.480><c> it</c><01:45:32.560><c> the</c><01:45:32.719><c> result</c><01:45:33.040><c> would</c><01:45:33.199><c> be</c><01:45:33.360><c> true</c>

01:45:34.229 --> 01:45:34.239 align:start position:0%
operator to it the result would be true
 

01:45:34.239 --> 01:45:35.830 align:start position:0%
operator to it the result would be true
so<01:45:34.400><c> if</c><01:45:34.560><c> the</c><01:45:34.639><c> first</c><01:45:34.880><c> condition</c>

01:45:35.830 --> 01:45:35.840 align:start position:0%
so if the first condition
 

01:45:35.840 --> 01:45:39.189 align:start position:0%
so if the first condition
is<01:45:36.080><c> true</c><01:45:36.800><c> and</c><01:45:37.280><c> the</c><01:45:37.440><c> second</c><01:45:37.760><c> condition</c><01:45:38.239><c> is</c><01:45:38.400><c> true</c>

01:45:39.189 --> 01:45:39.199 align:start position:0%
is true and the second condition is true
 

01:45:39.199 --> 01:45:41.830 align:start position:0%
is true and the second condition is true
then<01:45:39.840><c> that</c><01:45:40.080><c> person</c><01:45:40.560><c> is</c><01:45:40.719><c> eligible</c><01:45:41.360><c> for</c><01:45:41.520><c> a</c><01:45:41.600><c> new</c>

01:45:41.830 --> 01:45:41.840 align:start position:0%
then that person is eligible for a new
 

01:45:41.840 --> 01:45:42.629 align:start position:0%
then that person is eligible for a new
loan

01:45:42.629 --> 01:45:42.639 align:start position:0%
loan
 

01:45:42.639 --> 01:45:44.470 align:start position:0%
loan
so<01:45:42.880><c> as</c><01:45:43.040><c> you</c><01:45:43.119><c> can</c><01:45:43.280><c> see</c><01:45:43.679><c> these</c><01:45:43.920><c> logical</c>

01:45:44.470 --> 01:45:44.480 align:start position:0%
so as you can see these logical
 

01:45:44.480 --> 01:45:46.310 align:start position:0%
so as you can see these logical
operators<01:45:45.040><c> are</c><01:45:45.280><c> very</c><01:45:45.520><c> useful</c><01:45:46.000><c> in</c>

01:45:46.310 --> 01:45:46.320 align:start position:0%
operators are very useful in
 

01:45:46.320 --> 01:45:48.709 align:start position:0%
operators are very useful in
implementing<01:45:46.880><c> real-world</c><01:45:47.440><c> rules</c><01:45:48.320><c> next</c><01:45:48.560><c> we're</c>

01:45:48.709 --> 01:45:48.719 align:start position:0%
implementing real-world rules next we're
 

01:45:48.719 --> 01:45:49.669 align:start position:0%
implementing real-world rules next we're
going<01:45:48.800><c> to</c><01:45:48.880><c> talk</c><01:45:49.119><c> about</c>

01:45:49.669 --> 01:45:49.679 align:start position:0%
going to talk about
 

01:45:49.679 --> 01:45:56.629 align:start position:0%
going to talk about
if<01:45:49.920><c> statements</c>

01:45:56.629 --> 01:45:56.639 align:start position:0%
 
 

01:45:56.639 --> 01:45:57.830 align:start position:0%
 
in<01:45:56.719><c> this</c><01:45:56.880><c> tutorial</c><01:45:57.280><c> we're</c><01:45:57.440><c> going</c><01:45:57.520><c> to</c><01:45:57.600><c> look</c><01:45:57.760><c> at</c>

01:45:57.830 --> 01:45:57.840 align:start position:0%
in this tutorial we're going to look at
 

01:45:57.840 --> 01:45:59.910 align:start position:0%
in this tutorial we're going to look at
if<01:45:58.080><c> statements</c><01:45:58.719><c> in</c><01:45:59.040><c> java</c>

01:45:59.910 --> 01:45:59.920 align:start position:0%
if statements in java
 

01:45:59.920 --> 01:46:01.830 align:start position:0%
if statements in java
if<01:46:00.159><c> statements</c><01:46:00.639><c> are</c><01:46:00.800><c> extremely</c><01:46:01.280><c> important</c>

01:46:01.830 --> 01:46:01.840 align:start position:0%
if statements are extremely important
 

01:46:01.840 --> 01:46:03.590 align:start position:0%
if statements are extremely important
because<01:46:02.080><c> they</c><01:46:02.239><c> allow</c><01:46:02.480><c> us</c><01:46:02.639><c> to</c><01:46:02.719><c> build</c><01:46:03.040><c> programs</c>

01:46:03.590 --> 01:46:03.600 align:start position:0%
because they allow us to build programs
 

01:46:03.600 --> 01:46:04.950 align:start position:0%
because they allow us to build programs
that<01:46:03.760><c> can</c><01:46:03.920><c> make</c><01:46:04.239><c> decisions</c>

01:46:04.950 --> 01:46:04.960 align:start position:0%
that can make decisions
 

01:46:04.960 --> 01:46:07.350 align:start position:0%
that can make decisions
based<01:46:05.440><c> on</c><01:46:05.679><c> certain</c><01:46:06.000><c> conditions</c><01:46:06.960><c> here's</c><01:46:07.199><c> an</c>

01:46:07.350 --> 01:46:07.360 align:start position:0%
based on certain conditions here's an
 

01:46:07.360 --> 01:46:08.870 align:start position:0%
based on certain conditions here's an
example

01:46:08.870 --> 01:46:08.880 align:start position:0%
example
 

01:46:08.880 --> 01:46:10.229 align:start position:0%
example
in<01:46:09.040><c> this</c><01:46:09.199><c> file</c><01:46:09.440><c> we</c><01:46:09.600><c> have</c><01:46:09.760><c> a</c><01:46:09.840><c> bunch</c><01:46:10.080><c> of</c>

01:46:10.229 --> 01:46:10.239 align:start position:0%
in this file we have a bunch of
 

01:46:10.239 --> 01:46:12.470 align:start position:0%
in this file we have a bunch of
conditions<01:46:11.199><c> if</c><01:46:11.360><c> temperature</c><01:46:11.920><c> is</c><01:46:12.080><c> greater</c>

01:46:12.470 --> 01:46:12.480 align:start position:0%
conditions if temperature is greater
 

01:46:12.480 --> 01:46:13.270 align:start position:0%
conditions if temperature is greater
than<01:46:12.639><c> 30</c>

01:46:13.270 --> 01:46:13.280 align:start position:0%
than 30
 

01:46:13.280 --> 01:46:15.270 align:start position:0%
than 30
perhaps<01:46:13.679><c> you</c><01:46:13.760><c> want</c><01:46:13.920><c> to</c><01:46:14.000><c> display</c><01:46:14.639><c> two</c><01:46:14.880><c> messages</c>

01:46:15.270 --> 01:46:15.280 align:start position:0%
perhaps you want to display two messages
 

01:46:15.280 --> 01:46:17.030 align:start position:0%
perhaps you want to display two messages
to<01:46:15.440><c> the</c><01:46:15.520><c> user</c><01:46:15.920><c> it's</c><01:46:16.080><c> a</c><01:46:16.159><c> hot</c><01:46:16.400><c> day</c>

01:46:17.030 --> 01:46:17.040 align:start position:0%
to the user it's a hot day
 

01:46:17.040 --> 01:46:20.229 align:start position:0%
to the user it's a hot day
drink<01:46:17.520><c> plenty</c><01:46:17.840><c> of</c><01:46:18.000><c> water</c><01:46:18.960><c> otherwise</c><01:46:19.920><c> if</c><01:46:20.080><c> it's</c>

01:46:20.229 --> 01:46:20.239 align:start position:0%
drink plenty of water otherwise if it's
 

01:46:20.239 --> 01:46:21.750 align:start position:0%
drink plenty of water otherwise if it's
between<01:46:20.719><c> 20</c><01:46:20.960><c> and</c><01:46:21.119><c> 30</c>

01:46:21.750 --> 01:46:21.760 align:start position:0%
between 20 and 30
 

01:46:21.760 --> 01:46:24.229 align:start position:0%
between 20 and 30
you<01:46:21.840><c> want</c><01:46:22.000><c> to</c><01:46:22.080><c> print</c><01:46:22.560><c> it's</c><01:46:22.800><c> a</c><01:46:22.880><c> nice</c><01:46:23.199><c> day</c><01:46:23.920><c> and</c>

01:46:24.229 --> 01:46:24.239 align:start position:0%
you want to print it's a nice day and
 

01:46:24.239 --> 01:46:25.510 align:start position:0%
you want to print it's a nice day and
otherwise<01:46:24.639><c> we</c><01:46:24.719><c> want</c><01:46:24.880><c> to</c><01:46:24.960><c> print</c>

01:46:25.510 --> 01:46:25.520 align:start position:0%
otherwise we want to print
 

01:46:25.520 --> 01:46:27.910 align:start position:0%
otherwise we want to print
it's<01:46:25.679><c> a</c><01:46:25.840><c> call</c><01:46:26.080><c> day</c><01:46:26.880><c> so</c><01:46:27.040><c> let's</c><01:46:27.199><c> see</c><01:46:27.360><c> how</c><01:46:27.520><c> we</c><01:46:27.679><c> can</c>

01:46:27.910 --> 01:46:27.920 align:start position:0%
it's a call day so let's see how we can
 

01:46:27.920 --> 01:46:28.629 align:start position:0%
it's a call day so let's see how we can
implement

01:46:28.629 --> 01:46:28.639 align:start position:0%
implement
 

01:46:28.639 --> 01:46:31.430 align:start position:0%
implement
these<01:46:28.960><c> rules</c><01:46:29.360><c> in</c><01:46:29.520><c> a</c><01:46:29.679><c> java</c><01:46:30.080><c> program</c><01:46:31.119><c> back</c><01:46:31.360><c> to</c>

01:46:31.430 --> 01:46:31.440 align:start position:0%
these rules in a java program back to
 

01:46:31.440 --> 01:46:32.709 align:start position:0%
these rules in a java program back to
our<01:46:31.600><c> main</c><01:46:31.840><c> file</c>

01:46:32.709 --> 01:46:32.719 align:start position:0%
our main file
 

01:46:32.719 --> 01:46:35.189 align:start position:0%
our main file
we<01:46:32.880><c> start</c><01:46:33.119><c> by</c><01:46:33.280><c> declaring</c><01:46:33.920><c> a</c><01:46:34.000><c> variable</c>

01:46:35.189 --> 01:46:35.199 align:start position:0%
we start by declaring a variable
 

01:46:35.199 --> 01:46:36.310 align:start position:0%
we start by declaring a variable
temperature

01:46:36.310 --> 01:46:36.320 align:start position:0%
temperature
 

01:46:36.320 --> 01:46:39.350 align:start position:0%
temperature
we<01:46:36.480><c> set</c><01:46:36.719><c> it</c><01:46:36.800><c> to</c><01:46:36.960><c> 32.</c><01:46:38.480><c> now</c><01:46:38.719><c> we</c><01:46:38.880><c> use</c><01:46:39.040><c> an</c><01:46:39.199><c> if</c>

01:46:39.350 --> 01:46:39.360 align:start position:0%
we set it to 32. now we use an if
 

01:46:39.360 --> 01:46:40.149 align:start position:0%
we set it to 32. now we use an if
statement

01:46:40.149 --> 01:46:40.159 align:start position:0%
statement
 

01:46:40.159 --> 01:46:42.550 align:start position:0%
statement
followed<01:46:40.480><c> by</c><01:46:40.639><c> a</c><01:46:40.800><c> pair</c><01:46:40.960><c> of</c><01:46:41.040><c> parentheses</c><01:46:42.239><c> inside</c>

01:46:42.550 --> 01:46:42.560 align:start position:0%
followed by a pair of parentheses inside
 

01:46:42.560 --> 01:46:43.830 align:start position:0%
followed by a pair of parentheses inside
this<01:46:42.719><c> parenthesis</c><01:46:43.280><c> we</c><01:46:43.440><c> type</c>

01:46:43.830 --> 01:46:43.840 align:start position:0%
this parenthesis we type
 

01:46:43.840 --> 01:46:46.790 align:start position:0%
this parenthesis we type
a<01:46:44.000><c> boolean</c><01:46:44.480><c> expression</c><01:46:45.040><c> or</c><01:46:45.119><c> a</c><01:46:45.280><c> boolean</c><01:46:45.760><c> value</c>

01:46:46.790 --> 01:46:46.800 align:start position:0%
a boolean expression or a boolean value
 

01:46:46.800 --> 01:46:47.189 align:start position:0%
a boolean expression or a boolean value
so

01:46:47.189 --> 01:46:47.199 align:start position:0%
so
 

01:46:47.199 --> 01:46:51.109 align:start position:0%
so
let's<01:46:47.440><c> say</c><01:46:47.679><c> temp</c><01:46:48.639><c> is</c><01:46:48.800><c> greater</c><01:46:49.280><c> than</c><01:46:49.920><c> 30.</c>

01:46:51.109 --> 01:46:51.119 align:start position:0%
let's say temp is greater than 30.
 

01:46:51.119 --> 01:46:53.669 align:start position:0%
let's say temp is greater than 30.
now<01:46:51.760><c> if</c><01:46:51.920><c> this</c><01:46:52.080><c> condition</c><01:46:52.560><c> is</c><01:46:52.719><c> true</c><01:46:53.440><c> the</c>

01:46:53.669 --> 01:46:53.679 align:start position:0%
now if this condition is true the
 

01:46:53.679 --> 01:46:55.270 align:start position:0%
now if this condition is true the
statement<01:46:54.080><c> that</c><01:46:54.239><c> we</c><01:46:54.400><c> add</c><01:46:54.719><c> after</c>

01:46:55.270 --> 01:46:55.280 align:start position:0%
statement that we add after
 

01:46:55.280 --> 01:46:57.510 align:start position:0%
statement that we add after
this<01:46:55.600><c> if</c><01:46:55.760><c> statement</c><01:46:56.159><c> will</c><01:46:56.320><c> be</c><01:46:56.480><c> executed</c><01:46:57.360><c> so</c>

01:46:57.510 --> 01:46:57.520 align:start position:0%
this if statement will be executed so
 

01:46:57.520 --> 01:46:59.590 align:start position:0%
this if statement will be executed so
let's<01:46:57.920><c> print</c>

01:46:59.590 --> 01:46:59.600 align:start position:0%
let's print
 

01:46:59.600 --> 01:47:04.790 align:start position:0%
let's print
it's<01:46:59.840><c> a</c><01:47:00.000><c> hot</c><01:47:01.040><c> day</c><01:47:02.000><c> let's</c><01:47:02.239><c> run</c><01:47:02.400><c> the</c><01:47:02.560><c> program</c>

01:47:04.790 --> 01:47:04.800 align:start position:0%
it's a hot day let's run the program
 

01:47:04.800 --> 01:47:06.390 align:start position:0%
it's a hot day let's run the program
we<01:47:04.960><c> get</c><01:47:05.119><c> this</c><01:47:05.280><c> message</c><01:47:05.600><c> because</c><01:47:05.920><c> temperature</c>

01:47:06.390 --> 01:47:06.400 align:start position:0%
we get this message because temperature
 

01:47:06.400 --> 01:47:08.149 align:start position:0%
we get this message because temperature
is<01:47:06.560><c> greater</c><01:47:06.960><c> than</c><01:47:07.199><c> 30.</c>

01:47:08.149 --> 01:47:08.159 align:start position:0%
is greater than 30.
 

01:47:08.159 --> 01:47:09.990 align:start position:0%
is greater than 30.
now<01:47:08.400><c> what</c><01:47:08.560><c> if</c><01:47:08.639><c> we</c><01:47:08.800><c> want</c><01:47:08.880><c> to</c><01:47:08.960><c> print</c><01:47:09.600><c> another</c>

01:47:09.990 --> 01:47:10.000 align:start position:0%
now what if we want to print another
 

01:47:10.000 --> 01:47:11.990 align:start position:0%
now what if we want to print another
message<01:47:10.400><c> like</c><01:47:10.560><c> drink</c><01:47:10.880><c> plenty</c><01:47:11.119><c> of</c><01:47:11.199><c> water</c>

01:47:11.990 --> 01:47:12.000 align:start position:0%
message like drink plenty of water
 

01:47:12.000 --> 01:47:14.390 align:start position:0%
message like drink plenty of water
here<01:47:12.159><c> we</c><01:47:12.320><c> should</c><01:47:12.560><c> add</c><01:47:13.040><c> curly</c><01:47:13.360><c> braces</c><01:47:14.159><c> to</c>

01:47:14.390 --> 01:47:14.400 align:start position:0%
here we should add curly braces to
 

01:47:14.400 --> 01:47:16.229 align:start position:0%
here we should add curly braces to
define<01:47:14.800><c> a</c><01:47:15.040><c> code</c><01:47:15.360><c> block</c>

01:47:16.229 --> 01:47:16.239 align:start position:0%
define a code block
 

01:47:16.239 --> 01:47:18.870 align:start position:0%
define a code block
so<01:47:16.400><c> if</c><01:47:16.560><c> this</c><01:47:16.719><c> condition</c><01:47:17.199><c> is</c><01:47:17.360><c> true</c><01:47:18.480><c> all</c><01:47:18.719><c> the</c>

01:47:18.870 --> 01:47:18.880 align:start position:0%
so if this condition is true all the
 

01:47:18.880 --> 01:47:19.750 align:start position:0%
so if this condition is true all the
code<01:47:19.119><c> that</c><01:47:19.199><c> we</c><01:47:19.360><c> have</c>

01:47:19.750 --> 01:47:19.760 align:start position:0%
code that we have
 

01:47:19.760 --> 01:47:22.070 align:start position:0%
code that we have
inside<01:47:20.239><c> of</c><01:47:20.320><c> this</c><01:47:20.480><c> block</c><01:47:20.800><c> will</c><01:47:20.960><c> be</c><01:47:21.040><c> executed</c>

01:47:22.070 --> 01:47:22.080 align:start position:0%
inside of this block will be executed
 

01:47:22.080 --> 01:47:23.350 align:start position:0%
inside of this block will be executed
let's<01:47:22.400><c> add</c>

01:47:23.350 --> 01:47:23.360 align:start position:0%
let's add
 

01:47:23.360 --> 01:47:26.550 align:start position:0%
let's add
another<01:47:23.679><c> message</c><01:47:24.000><c> here</c><01:47:24.960><c> drink</c><01:47:25.840><c> water</c>

01:47:26.550 --> 01:47:26.560 align:start position:0%
another message here drink water
 

01:47:26.560 --> 01:47:29.510 align:start position:0%
another message here drink water
okay<01:47:27.440><c> so</c><01:47:27.600><c> this</c><01:47:27.760><c> was</c><01:47:28.000><c> our</c><01:47:28.159><c> first</c><01:47:28.400><c> condition</c><01:47:29.280><c> now</c>

01:47:29.510 --> 01:47:29.520 align:start position:0%
okay so this was our first condition now
 

01:47:29.520 --> 01:47:31.430 align:start position:0%
okay so this was our first condition now
let's<01:47:29.760><c> add</c><01:47:30.080><c> the</c><01:47:30.239><c> second</c><01:47:30.560><c> condition</c>

01:47:31.430 --> 01:47:31.440 align:start position:0%
let's add the second condition
 

01:47:31.440 --> 01:47:34.470 align:start position:0%
let's add the second condition
so<01:47:31.679><c> after</c><01:47:32.000><c> the</c><01:47:32.159><c> right</c><01:47:32.480><c> brace</c><01:47:33.040><c> we</c><01:47:33.280><c> type</c><01:47:33.840><c> else</c>

01:47:34.470 --> 01:47:34.480 align:start position:0%
so after the right brace we type else
 

01:47:34.480 --> 01:47:37.669 align:start position:0%
so after the right brace we type else
if<01:47:35.280><c> once</c><01:47:35.520><c> again</c><01:47:35.760><c> we</c><01:47:36.000><c> add</c><01:47:36.320><c> our</c><01:47:36.560><c> parentheses</c><01:47:37.280><c> and</c>

01:47:37.669 --> 01:47:37.679 align:start position:0%
if once again we add our parentheses and
 

01:47:37.679 --> 01:47:39.350 align:start position:0%
if once again we add our parentheses and
inside<01:47:37.920><c> this</c><01:47:38.159><c> parenthesis</c><01:47:38.639><c> we</c><01:47:38.800><c> type</c><01:47:39.199><c> a</c>

01:47:39.350 --> 01:47:39.360 align:start position:0%
inside this parenthesis we type a
 

01:47:39.360 --> 01:47:40.709 align:start position:0%
inside this parenthesis we type a
boolean<01:47:39.760><c> expression</c>

01:47:40.709 --> 01:47:40.719 align:start position:0%
boolean expression
 

01:47:40.719 --> 01:47:44.790 align:start position:0%
boolean expression
if<01:47:40.960><c> temp</c><01:47:42.000><c> is</c><01:47:42.159><c> greater</c><01:47:42.480><c> than</c><01:47:42.719><c> 20</c><01:47:43.679><c> and</c>

01:47:44.790 --> 01:47:44.800 align:start position:0%
if temp is greater than 20 and
 

01:47:44.800 --> 01:47:47.990 align:start position:0%
if temp is greater than 20 and
it's<01:47:45.040><c> less</c><01:47:45.280><c> than</c><01:47:45.600><c> or</c><01:47:46.239><c> equal</c><01:47:46.560><c> to</c><01:47:46.800><c> 30</c>

01:47:47.990 --> 01:47:48.000 align:start position:0%
it's less than or equal to 30
 

01:47:48.000 --> 01:47:50.709 align:start position:0%
it's less than or equal to 30
you<01:47:48.159><c> want</c><01:47:48.320><c> to</c><01:47:48.400><c> print</c><01:47:48.719><c> a</c><01:47:48.880><c> different</c><01:47:49.199><c> message</c>

01:47:50.709 --> 01:47:50.719 align:start position:0%
you want to print a different message
 

01:47:50.719 --> 01:47:51.350 align:start position:0%
you want to print a different message
like

01:47:51.350 --> 01:47:51.360 align:start position:0%
like
 

01:47:51.360 --> 01:47:54.709 align:start position:0%
like
beautiful<01:47:52.560><c> day</c><01:47:53.679><c> now</c><01:47:53.840><c> here</c><01:47:54.080><c> i</c><01:47:54.159><c> haven't</c><01:47:54.480><c> added</c>

01:47:54.709 --> 01:47:54.719 align:start position:0%
beautiful day now here i haven't added
 

01:47:54.719 --> 01:47:56.550 align:start position:0%
beautiful day now here i haven't added
the<01:47:54.880><c> braces</c><01:47:55.520><c> because</c><01:47:55.760><c> we</c><01:47:55.840><c> have</c><01:47:56.000><c> a</c><01:47:56.159><c> single</c>

01:47:56.550 --> 01:47:56.560 align:start position:0%
the braces because we have a single
 

01:47:56.560 --> 01:47:57.270 align:start position:0%
the braces because we have a single
statement

01:47:57.270 --> 01:47:57.280 align:start position:0%
statement
 

01:47:57.280 --> 01:47:59.590 align:start position:0%
statement
so<01:47:57.440><c> braces</c><01:47:57.920><c> are</c><01:47:58.159><c> only</c><01:47:58.480><c> required</c><01:47:59.199><c> if</c><01:47:59.280><c> we</c><01:47:59.440><c> have</c>

01:47:59.590 --> 01:47:59.600 align:start position:0%
so braces are only required if we have
 

01:47:59.600 --> 01:48:01.109 align:start position:0%
so braces are only required if we have
multiple<01:48:00.080><c> statements</c>

01:48:01.109 --> 01:48:01.119 align:start position:0%
multiple statements
 

01:48:01.119 --> 01:48:02.950 align:start position:0%
multiple statements
now<01:48:01.280><c> this</c><01:48:01.440><c> is</c><01:48:01.600><c> a</c><01:48:01.679><c> little</c><01:48:01.840><c> bit</c><01:48:02.080><c> controversial</c>

01:48:02.950 --> 01:48:02.960 align:start position:0%
now this is a little bit controversial
 

01:48:02.960 --> 01:48:04.709 align:start position:0%
now this is a little bit controversial
some<01:48:03.199><c> people</c><01:48:03.440><c> believe</c><01:48:03.840><c> we</c><01:48:04.000><c> should</c><01:48:04.239><c> always</c><01:48:04.560><c> add</c>

01:48:04.709 --> 01:48:04.719 align:start position:0%
some people believe we should always add
 

01:48:04.719 --> 01:48:05.430 align:start position:0%
some people believe we should always add
braces

01:48:05.430 --> 01:48:05.440 align:start position:0%
braces
 

01:48:05.440 --> 01:48:06.870 align:start position:0%
braces
whether<01:48:05.679><c> we</c><01:48:05.840><c> have</c><01:48:05.920><c> a</c><01:48:06.000><c> single</c><01:48:06.320><c> statement</c><01:48:06.719><c> or</c>

01:48:06.870 --> 01:48:06.880 align:start position:0%
whether we have a single statement or
 

01:48:06.880 --> 01:48:09.109 align:start position:0%
whether we have a single statement or
not<01:48:07.520><c> other</c><01:48:07.760><c> people</c><01:48:08.080><c> like</c><01:48:08.239><c> myself</c><01:48:08.639><c> believe</c>

01:48:09.109 --> 01:48:09.119 align:start position:0%
not other people like myself believe
 

01:48:09.119 --> 01:48:11.030 align:start position:0%
not other people like myself believe
this<01:48:09.360><c> creates</c><01:48:09.760><c> unnecessary</c><01:48:10.480><c> noise</c><01:48:10.800><c> in</c><01:48:10.880><c> the</c>

01:48:11.030 --> 01:48:11.040 align:start position:0%
this creates unnecessary noise in the
 

01:48:11.040 --> 01:48:12.870 align:start position:0%
this creates unnecessary noise in the
code<01:48:11.760><c> in</c><01:48:11.840><c> this</c><01:48:12.000><c> tutorial</c><01:48:12.480><c> i'm</c><01:48:12.560><c> going</c><01:48:12.639><c> to</c><01:48:12.719><c> add</c>

01:48:12.870 --> 01:48:12.880 align:start position:0%
code in this tutorial i'm going to add
 

01:48:12.880 --> 01:48:13.990 align:start position:0%
code in this tutorial i'm going to add
the<01:48:13.040><c> braces</c><01:48:13.520><c> first</c>

01:48:13.990 --> 01:48:14.000 align:start position:0%
the braces first
 

01:48:14.000 --> 01:48:15.510 align:start position:0%
the braces first
and<01:48:14.080><c> then</c><01:48:14.320><c> remove</c><01:48:14.639><c> them</c><01:48:14.880><c> so</c><01:48:15.040><c> you</c><01:48:15.119><c> can</c><01:48:15.199><c> see</c><01:48:15.360><c> the</c>

01:48:15.510 --> 01:48:15.520 align:start position:0%
and then remove them so you can see the
 

01:48:15.520 --> 01:48:18.310 align:start position:0%
and then remove them so you can see the
difference<01:48:16.639><c> so</c><01:48:16.880><c> let's</c><01:48:17.199><c> add</c>

01:48:18.310 --> 01:48:18.320 align:start position:0%
difference so let's add
 

01:48:18.320 --> 01:48:20.870 align:start position:0%
difference so let's add
a<01:48:18.480><c> pair</c><01:48:18.719><c> of</c><01:48:18.800><c> curly</c><01:48:19.119><c> braces</c><01:48:19.520><c> here</c><01:48:20.239><c> and</c><01:48:20.480><c> finally</c>

01:48:20.870 --> 01:48:20.880 align:start position:0%
a pair of curly braces here and finally
 

01:48:20.880 --> 01:48:22.149 align:start position:0%
a pair of curly braces here and finally
our<01:48:21.040><c> last</c><01:48:21.360><c> condition</c>

01:48:22.149 --> 01:48:22.159 align:start position:0%
our last condition
 

01:48:22.159 --> 01:48:24.229 align:start position:0%
our last condition
so<01:48:22.400><c> if</c><01:48:22.639><c> none</c><01:48:22.800><c> of</c><01:48:22.880><c> these</c><01:48:23.119><c> two</c><01:48:23.280><c> conditions</c><01:48:24.000><c> are</c>

01:48:24.229 --> 01:48:24.239 align:start position:0%
so if none of these two conditions are
 

01:48:24.239 --> 01:48:26.149 align:start position:0%
so if none of these two conditions are
true<01:48:24.960><c> then</c><01:48:25.199><c> we</c><01:48:25.360><c> want</c><01:48:25.440><c> to</c><01:48:25.520><c> print</c><01:48:25.760><c> a</c><01:48:25.840><c> different</c>

01:48:26.149 --> 01:48:26.159 align:start position:0%
true then we want to print a different
 

01:48:26.159 --> 01:48:26.709 align:start position:0%
true then we want to print a different
message

01:48:26.709 --> 01:48:26.719 align:start position:0%
message
 

01:48:26.719 --> 01:48:29.109 align:start position:0%
message
so<01:48:26.880><c> here</c><01:48:27.040><c> we</c><01:48:27.199><c> simply</c><01:48:27.520><c> type</c><01:48:27.920><c> else</c><01:48:28.719><c> we</c><01:48:28.960><c> don't</c>

01:48:29.109 --> 01:48:29.119 align:start position:0%
so here we simply type else we don't
 

01:48:29.119 --> 01:48:30.790 align:start position:0%
so here we simply type else we don't
have<01:48:29.440><c> any</c><01:48:29.600><c> more</c><01:48:29.840><c> conditions</c>

01:48:30.790 --> 01:48:30.800 align:start position:0%
have any more conditions
 

01:48:30.800 --> 01:48:35.350 align:start position:0%
have any more conditions
so<01:48:31.040><c> let's</c><01:48:31.280><c> add</c><01:48:31.520><c> a</c><01:48:31.600><c> code</c><01:48:31.920><c> block</c><01:48:32.400><c> and</c><01:48:32.719><c> print</c>

01:48:35.350 --> 01:48:35.360 align:start position:0%
 
 

01:48:35.360 --> 01:48:39.109 align:start position:0%
 
called<01:48:36.080><c> day</c><01:48:37.199><c> now</c><01:48:37.360><c> let</c><01:48:37.520><c> me</c><01:48:37.679><c> define</c><01:48:38.000><c> a</c><01:48:38.080><c> few</c><01:48:38.320><c> terms</c>

01:48:39.109 --> 01:48:39.119 align:start position:0%
called day now let me define a few terms
 

01:48:39.119 --> 01:48:41.830 align:start position:0%
called day now let me define a few terms
here<01:48:39.360><c> we</c><01:48:39.520><c> have</c><01:48:40.080><c> an</c><01:48:40.320><c> if</c><01:48:40.480><c> statement</c><01:48:41.440><c> and</c><01:48:41.600><c> this</c>

01:48:41.830 --> 01:48:41.840 align:start position:0%
here we have an if statement and this
 

01:48:41.840 --> 01:48:42.950 align:start position:0%
here we have an if statement and this
statement<01:48:42.320><c> has</c>

01:48:42.950 --> 01:48:42.960 align:start position:0%
statement has
 

01:48:42.960 --> 01:48:46.070 align:start position:0%
statement has
three<01:48:43.280><c> clauses</c><01:48:43.920><c> or</c><01:48:44.400><c> three</c><01:48:44.840><c> sections</c><01:48:45.760><c> here's</c>

01:48:46.070 --> 01:48:46.080 align:start position:0%
three clauses or three sections here's
 

01:48:46.080 --> 01:48:47.430 align:start position:0%
three clauses or three sections here's
the<01:48:46.159><c> first</c><01:48:46.480><c> clause</c>

01:48:47.430 --> 01:48:47.440 align:start position:0%
the first clause
 

01:48:47.440 --> 01:48:50.070 align:start position:0%
the first clause
here's<01:48:47.760><c> the</c><01:48:47.840><c> second</c><01:48:48.159><c> clause</c><01:48:49.119><c> and</c><01:48:49.679><c> here's</c><01:48:49.920><c> the</c>

01:48:50.070 --> 01:48:50.080 align:start position:0%
here's the second clause and here's the
 

01:48:50.080 --> 01:48:51.350 align:start position:0%
here's the second clause and here's the
third<01:48:50.320><c> clause</c>

01:48:51.350 --> 01:48:51.360 align:start position:0%
third clause
 

01:48:51.360 --> 01:48:53.109 align:start position:0%
third clause
pay<01:48:51.520><c> attention</c><01:48:51.920><c> to</c><01:48:52.080><c> how</c><01:48:52.320><c> i</c><01:48:52.480><c> have</c><01:48:52.639><c> formatted</c>

01:48:53.109 --> 01:48:53.119 align:start position:0%
pay attention to how i have formatted
 

01:48:53.119 --> 01:48:54.550 align:start position:0%
pay attention to how i have formatted
this<01:48:53.360><c> if</c><01:48:53.600><c> statement</c>

01:48:54.550 --> 01:48:54.560 align:start position:0%
this if statement
 

01:48:54.560 --> 01:48:57.590 align:start position:0%
this if statement
so<01:48:54.800><c> first</c><01:48:55.040><c> we</c><01:48:55.199><c> have</c><01:48:55.679><c> the</c><01:48:55.840><c> if</c><01:48:56.080><c> clause</c><01:48:56.960><c> the</c><01:48:57.199><c> else</c>

01:48:57.590 --> 01:48:57.600 align:start position:0%
so first we have the if clause the else
 

01:48:57.600 --> 01:48:58.149 align:start position:0%
so first we have the if clause the else
if

01:48:58.149 --> 01:48:58.159 align:start position:0%
if
 

01:48:58.159 --> 01:49:01.270 align:start position:0%
if
and<01:48:58.400><c> else</c><01:48:58.719><c> clauses</c><01:48:59.199><c> are</c><01:48:59.679><c> placed</c><01:49:00.320><c> after</c>

01:49:01.270 --> 01:49:01.280 align:start position:0%
and else clauses are placed after
 

01:49:01.280 --> 01:49:03.430 align:start position:0%
and else clauses are placed after
these<01:49:01.600><c> right</c><01:49:01.840><c> braces</c><01:49:02.639><c> so</c><01:49:02.800><c> we</c><01:49:02.960><c> have</c><01:49:03.119><c> some</c><01:49:03.280><c> kind</c>

01:49:03.430 --> 01:49:03.440 align:start position:0%
these right braces so we have some kind
 

01:49:03.440 --> 01:49:05.189 align:start position:0%
these right braces so we have some kind
of<01:49:03.679><c> hierarchy</c><01:49:04.400><c> here</c>

01:49:05.189 --> 01:49:05.199 align:start position:0%
of hierarchy here
 

01:49:05.199 --> 01:49:07.189 align:start position:0%
of hierarchy here
here<01:49:05.440><c> we</c><01:49:05.520><c> have</c><01:49:05.679><c> a</c><01:49:05.760><c> parent</c><01:49:06.480><c> followed</c><01:49:06.800><c> by</c><01:49:06.960><c> two</c>

01:49:07.189 --> 01:49:07.199 align:start position:0%
here we have a parent followed by two
 

01:49:07.199 --> 01:49:08.229 align:start position:0%
here we have a parent followed by two
children

01:49:08.229 --> 01:49:08.239 align:start position:0%
children
 

01:49:08.239 --> 01:49:09.910 align:start position:0%
children
now<01:49:08.480><c> let's</c><01:49:08.639><c> get</c><01:49:08.800><c> rid</c><01:49:08.960><c> of</c><01:49:09.040><c> these</c><01:49:09.360><c> unnecessary</c>

01:49:09.910 --> 01:49:09.920 align:start position:0%
now let's get rid of these unnecessary
 

01:49:09.920 --> 01:49:12.390 align:start position:0%
now let's get rid of these unnecessary
braces<01:49:10.480><c> and</c><01:49:10.960><c> reformat</c><01:49:11.520><c> our</c><01:49:11.679><c> code</c><01:49:11.920><c> to</c><01:49:12.080><c> see</c><01:49:12.239><c> the</c>

01:49:12.390 --> 01:49:12.400 align:start position:0%
braces and reformat our code to see the
 

01:49:12.400 --> 01:49:13.350 align:start position:0%
braces and reformat our code to see the
difference

01:49:13.350 --> 01:49:13.360 align:start position:0%
difference
 

01:49:13.360 --> 01:49:16.229 align:start position:0%
difference
so<01:49:14.239><c> i'm</c><01:49:14.400><c> going</c><01:49:14.560><c> to</c><01:49:14.639><c> remove</c><01:49:15.199><c> the</c><01:49:15.440><c> braces</c><01:49:16.080><c> for</c>

01:49:16.229 --> 01:49:16.239 align:start position:0%
so i'm going to remove the braces for
 

01:49:16.239 --> 01:49:17.270 align:start position:0%
so i'm going to remove the braces for
the<01:49:16.400><c> else</c><01:49:16.719><c> clause</c>

01:49:17.270 --> 01:49:17.280 align:start position:0%
the else clause
 

01:49:17.280 --> 01:49:20.310 align:start position:0%
the else clause
and<01:49:17.520><c> also</c><01:49:18.000><c> one</c><01:49:18.159><c> more</c><01:49:18.320><c> time</c><01:49:18.639><c> here</c>

01:49:20.310 --> 01:49:20.320 align:start position:0%
and also one more time here
 

01:49:20.320 --> 01:49:23.109 align:start position:0%
and also one more time here
that's<01:49:20.639><c> better</c><01:49:21.520><c> now</c><01:49:21.679><c> we</c><01:49:21.840><c> can</c><01:49:22.000><c> simplify</c><01:49:22.880><c> this</c>

01:49:23.109 --> 01:49:23.119 align:start position:0%
that's better now we can simplify this
 

01:49:23.119 --> 01:49:24.550 align:start position:0%
that's better now we can simplify this
boolean<01:49:23.520><c> expression</c>

01:49:24.550 --> 01:49:24.560 align:start position:0%
boolean expression
 

01:49:24.560 --> 01:49:26.550 align:start position:0%
boolean expression
basically<01:49:24.960><c> we</c><01:49:25.119><c> don't</c><01:49:25.280><c> need</c><01:49:26.000><c> this</c><01:49:26.239><c> piece</c><01:49:26.480><c> of</c>

01:49:26.550 --> 01:49:26.560 align:start position:0%
basically we don't need this piece of
 

01:49:26.560 --> 01:49:28.709 align:start position:0%
basically we don't need this piece of
code<01:49:26.800><c> here</c><01:49:27.280><c> here's</c><01:49:27.520><c> the</c><01:49:27.599><c> reason</c>

01:49:28.709 --> 01:49:28.719 align:start position:0%
code here here's the reason
 

01:49:28.719 --> 01:49:31.189 align:start position:0%
code here here's the reason
if<01:49:28.880><c> the</c><01:49:28.960><c> first</c><01:49:29.199><c> condition</c><01:49:30.239><c> is</c><01:49:30.400><c> not</c><01:49:30.639><c> true</c><01:49:31.040><c> what</c>

01:49:31.189 --> 01:49:31.199 align:start position:0%
if the first condition is not true what
 

01:49:31.199 --> 01:49:31.990 align:start position:0%
if the first condition is not true what
does<01:49:31.440><c> it</c><01:49:31.520><c> mean</c>

01:49:31.990 --> 01:49:32.000 align:start position:0%
does it mean
 

01:49:32.000 --> 01:49:33.750 align:start position:0%
does it mean
that<01:49:32.239><c> means</c><01:49:32.400><c> the</c><01:49:32.560><c> temperature</c><01:49:33.119><c> is</c><01:49:33.280><c> less</c><01:49:33.520><c> than</c>

01:49:33.750 --> 01:49:33.760 align:start position:0%
that means the temperature is less than
 

01:49:33.760 --> 01:49:35.270 align:start position:0%
that means the temperature is less than
or<01:49:34.080><c> equal</c><01:49:34.400><c> to</c><01:49:34.560><c> 30.</c>

01:49:35.270 --> 01:49:35.280 align:start position:0%
or equal to 30.
 

01:49:35.280 --> 01:49:38.629 align:start position:0%
or equal to 30.
so<01:49:36.080><c> this</c><01:49:36.320><c> expression</c><01:49:36.800><c> here</c><01:49:37.119><c> is</c><01:49:37.360><c> unnecessary</c>

01:49:38.629 --> 01:49:38.639 align:start position:0%
so this expression here is unnecessary
 

01:49:38.639 --> 01:49:40.390 align:start position:0%
so this expression here is unnecessary
let's<01:49:38.880><c> delete</c><01:49:39.119><c> this</c><01:49:39.280><c> and</c><01:49:39.440><c> simplify</c><01:49:39.920><c> our</c><01:49:40.000><c> code</c>

01:49:40.390 --> 01:49:40.400 align:start position:0%
let's delete this and simplify our code
 

01:49:40.400 --> 01:49:43.109 align:start position:0%
let's delete this and simplify our code
that's<01:49:40.719><c> better</c><01:49:41.599><c> now</c><01:49:41.760><c> look</c><01:49:42.000><c> at</c><01:49:42.080><c> how</c><01:49:42.320><c> this</c><01:49:42.560><c> code</c>

01:49:43.109 --> 01:49:43.119 align:start position:0%
that's better now look at how this code
 

01:49:43.119 --> 01:49:45.830 align:start position:0%
that's better now look at how this code
is<01:49:43.280><c> formatted</c><01:49:44.000><c> on</c><01:49:44.159><c> the</c><01:49:44.239><c> top</c><01:49:44.480><c> we</c><01:49:44.560><c> have</c><01:49:44.800><c> if</c><01:49:45.599><c> the</c>

01:49:45.830 --> 01:49:45.840 align:start position:0%
is formatted on the top we have if the
 

01:49:45.840 --> 01:49:47.750 align:start position:0%
is formatted on the top we have if the
else<01:49:46.159><c> if</c><01:49:46.400><c> clause</c><01:49:46.800><c> is</c><01:49:47.119><c> a</c><01:49:47.199><c> little</c><01:49:47.440><c> bit</c>

01:49:47.750 --> 01:49:47.760 align:start position:0%
else if clause is a little bit
 

01:49:47.760 --> 01:49:50.149 align:start position:0%
else if clause is a little bit
indented<01:49:48.639><c> but</c><01:49:48.800><c> the</c><01:49:48.960><c> else</c><01:49:49.280><c> clause</c><01:49:49.679><c> is</c><01:49:49.920><c> not</c>

01:49:50.149 --> 01:49:50.159 align:start position:0%
indented but the else clause is not
 

01:49:50.159 --> 01:49:52.229 align:start position:0%
indented but the else clause is not
indented<01:49:50.800><c> it's</c><01:49:51.040><c> at</c><01:49:51.199><c> the</c><01:49:51.280><c> same</c><01:49:51.599><c> level</c>

01:49:52.229 --> 01:49:52.239 align:start position:0%
indented it's at the same level
 

01:49:52.239 --> 01:49:54.229 align:start position:0%
indented it's at the same level
as<01:49:52.400><c> the</c><01:49:52.560><c> if</c><01:49:52.800><c> clause</c><01:49:53.360><c> and</c><01:49:53.520><c> this</c><01:49:53.679><c> looks</c><01:49:53.920><c> a</c><01:49:54.000><c> little</c>

01:49:54.229 --> 01:49:54.239 align:start position:0%
as the if clause and this looks a little
 

01:49:54.239 --> 01:49:55.990 align:start position:0%
as the if clause and this looks a little
bit<01:49:54.480><c> ugly</c><01:49:55.040><c> the</c><01:49:55.199><c> code</c><01:49:55.520><c> is</c><01:49:55.679><c> not</c>

01:49:55.990 --> 01:49:56.000 align:start position:0%
bit ugly the code is not
 

01:49:56.000 --> 01:49:58.629 align:start position:0%
bit ugly the code is not
symmetrical<01:49:57.280><c> so</c><01:49:57.760><c> if</c><01:49:57.920><c> you</c><01:49:58.000><c> want</c><01:49:58.080><c> to</c><01:49:58.159><c> get</c><01:49:58.320><c> rid</c><01:49:58.480><c> of</c>

01:49:58.629 --> 01:49:58.639 align:start position:0%
symmetrical so if you want to get rid of
 

01:49:58.639 --> 01:49:59.750 align:start position:0%
symmetrical so if you want to get rid of
the<01:49:58.719><c> curly</c><01:49:59.040><c> braces</c>

01:49:59.750 --> 01:49:59.760 align:start position:0%
the curly braces
 

01:49:59.760 --> 01:50:02.470 align:start position:0%
the curly braces
a<01:50:00.080><c> better</c><01:50:00.320><c> way</c><01:50:00.480><c> to</c><01:50:00.719><c> format</c><01:50:01.119><c> this</c><01:50:01.280><c> code</c><01:50:01.679><c> is</c><01:50:01.920><c> like</c>

01:50:02.470 --> 01:50:02.480 align:start position:0%
a better way to format this code is like
 

01:50:02.480 --> 01:50:04.229 align:start position:0%
a better way to format this code is like
this

01:50:04.229 --> 01:50:04.239 align:start position:0%
this
 

01:50:04.239 --> 01:50:06.870 align:start position:0%
this
so<01:50:04.480><c> instead</c><01:50:04.719><c> of</c><01:50:04.880><c> adding</c><01:50:05.119><c> the</c><01:50:05.360><c> else</c><01:50:05.760><c> if</c><01:50:06.080><c> or</c><01:50:06.560><c> else</c>

01:50:06.870 --> 01:50:06.880 align:start position:0%
so instead of adding the else if or else
 

01:50:06.880 --> 01:50:07.669 align:start position:0%
so instead of adding the else if or else
clauses

01:50:07.669 --> 01:50:07.679 align:start position:0%
clauses
 

01:50:07.679 --> 01:50:10.149 align:start position:0%
clauses
after<01:50:08.000><c> curly</c><01:50:08.320><c> braces</c><01:50:08.880><c> we</c><01:50:09.119><c> add</c><01:50:09.280><c> them</c><01:50:09.679><c> on</c><01:50:09.840><c> a</c><01:50:09.920><c> new</c>

01:50:10.149 --> 01:50:10.159 align:start position:0%
after curly braces we add them on a new
 

01:50:10.159 --> 01:50:10.870 align:start position:0%
after curly braces we add them on a new
line

01:50:10.870 --> 01:50:10.880 align:start position:0%
line
 

01:50:10.880 --> 01:50:13.589 align:start position:0%
line
now<01:50:11.599><c> all</c><01:50:11.760><c> these</c><01:50:11.920><c> clauses</c><01:50:12.560><c> are</c><01:50:12.960><c> at</c><01:50:13.119><c> the</c><01:50:13.360><c> same</c>

01:50:13.589 --> 01:50:13.599 align:start position:0%
now all these clauses are at the same
 

01:50:13.599 --> 01:50:14.310 align:start position:0%
now all these clauses are at the same
level

01:50:14.310 --> 01:50:14.320 align:start position:0%
level
 

01:50:14.320 --> 01:50:21.910 align:start position:0%
level
the<01:50:14.480><c> code</c><01:50:14.800><c> is</c><01:50:14.960><c> easier</c><01:50:15.280><c> to</c><01:50:15.440><c> read</c>

01:50:21.910 --> 01:50:21.920 align:start position:0%
 
 

01:50:21.920 --> 01:50:23.430 align:start position:0%
 
in<01:50:22.000><c> this</c><01:50:22.159><c> tutorial</c><01:50:22.639><c> i'm</c><01:50:22.800><c> going</c><01:50:22.880><c> to</c><01:50:22.960><c> show</c><01:50:23.119><c> you</c><01:50:23.280><c> a</c>

01:50:23.430 --> 01:50:23.440 align:start position:0%
in this tutorial i'm going to show you a
 

01:50:23.440 --> 01:50:25.990 align:start position:0%
in this tutorial i'm going to show you a
very<01:50:23.679><c> cool</c><01:50:24.000><c> technique</c><01:50:24.800><c> for</c><01:50:25.040><c> simplifying</c><01:50:25.760><c> if</c>

01:50:25.990 --> 01:50:26.000 align:start position:0%
very cool technique for simplifying if
 

01:50:26.000 --> 01:50:27.189 align:start position:0%
very cool technique for simplifying if
statements

01:50:27.189 --> 01:50:27.199 align:start position:0%
statements
 

01:50:27.199 --> 01:50:29.830 align:start position:0%
statements
so<01:50:27.440><c> let's</c><01:50:27.599><c> start</c><01:50:27.840><c> by</c><01:50:28.000><c> declaring</c><01:50:29.199><c> a</c><01:50:29.360><c> variable</c>

01:50:29.830 --> 01:50:29.840 align:start position:0%
so let's start by declaring a variable
 

01:50:29.840 --> 01:50:30.229 align:start position:0%
so let's start by declaring a variable
called

01:50:30.229 --> 01:50:30.239 align:start position:0%
called
 

01:50:30.239 --> 01:50:33.910 align:start position:0%
called
income<01:50:31.440><c> and</c><01:50:31.760><c> set</c><01:50:31.920><c> it</c><01:50:32.000><c> to</c><01:50:32.360><c> 120</c>

01:50:33.910 --> 01:50:33.920 align:start position:0%
income and set it to 120
 

01:50:33.920 --> 01:50:37.030 align:start position:0%
income and set it to 120
000.<01:50:34.880><c> now</c><01:50:35.040><c> here</c><01:50:35.199><c> we</c><01:50:35.360><c> can</c><01:50:35.440><c> use</c><01:50:35.599><c> an</c><01:50:35.920><c> underscore</c>

01:50:37.030 --> 01:50:37.040 align:start position:0%
000. now here we can use an underscore
 

01:50:37.040 --> 01:50:38.709 align:start position:0%
000. now here we can use an underscore
in<01:50:37.199><c> between</c><01:50:37.520><c> these</c><01:50:37.679><c> three</c><01:50:38.000><c> digits</c><01:50:38.400><c> to</c><01:50:38.560><c> make</c>

01:50:38.709 --> 01:50:38.719 align:start position:0%
in between these three digits to make
 

01:50:38.719 --> 01:50:40.390 align:start position:0%
in between these three digits to make
our<01:50:38.880><c> code</c><01:50:39.119><c> more</c><01:50:39.280><c> readable</c>

01:50:40.390 --> 01:50:40.400 align:start position:0%
our code more readable
 

01:50:40.400 --> 01:50:42.070 align:start position:0%
our code more readable
now<01:50:40.560><c> let's</c><01:50:40.719><c> say</c><01:50:40.800><c> we</c><01:50:40.880><c> want</c><01:50:40.960><c> to</c><01:50:41.040><c> declare</c><01:50:41.920><c> a</c>

01:50:42.070 --> 01:50:42.080 align:start position:0%
now let's say we want to declare a
 

01:50:42.080 --> 01:50:43.430 align:start position:0%
now let's say we want to declare a
boolean<01:50:42.480><c> variable</c><01:50:42.960><c> called</c>

01:50:43.430 --> 01:50:43.440 align:start position:0%
boolean variable called
 

01:50:43.440 --> 01:50:47.109 align:start position:0%
boolean variable called
has<01:50:44.159><c> high</c><01:50:44.639><c> income</c><01:50:46.000><c> if</c><01:50:46.159><c> the</c><01:50:46.320><c> income</c><01:50:46.719><c> is</c><01:50:46.880><c> more</c>

01:50:47.109 --> 01:50:47.119 align:start position:0%
has high income if the income is more
 

01:50:47.119 --> 01:50:47.430 align:start position:0%
has high income if the income is more
than

01:50:47.430 --> 01:50:47.440 align:start position:0%
than
 

01:50:47.440 --> 01:50:49.189 align:start position:0%
than
one<01:50:47.599><c> hundred</c><01:50:47.920><c> thousand</c><01:50:48.239><c> dollars</c><01:50:48.800><c> you</c><01:50:48.960><c> want</c><01:50:49.119><c> to</c>

01:50:49.189 --> 01:50:49.199 align:start position:0%
one hundred thousand dollars you want to
 

01:50:49.199 --> 01:50:50.709 align:start position:0%
one hundred thousand dollars you want to
set<01:50:49.360><c> this</c><01:50:49.520><c> to</c><01:50:49.760><c> true</c><01:50:50.080><c> otherwise</c><01:50:50.400><c> we</c><01:50:50.560><c> want</c><01:50:50.639><c> to</c>

01:50:50.709 --> 01:50:50.719 align:start position:0%
set this to true otherwise we want to
 

01:50:50.719 --> 01:50:52.310 align:start position:0%
set this to true otherwise we want to
set<01:50:50.880><c> this</c><01:50:51.119><c> to</c><01:50:51.360><c> false</c>

01:50:52.310 --> 01:50:52.320 align:start position:0%
set this to false
 

01:50:52.320 --> 01:50:54.709 align:start position:0%
set this to false
so<01:50:52.880><c> here</c><01:50:53.040><c> we</c><01:50:53.199><c> can</c><01:50:53.360><c> write</c><01:50:53.920><c> an</c><01:50:54.080><c> if</c><01:50:54.239><c> statement</c>

01:50:54.709 --> 01:50:54.719 align:start position:0%
so here we can write an if statement
 

01:50:54.719 --> 01:50:55.910 align:start position:0%
so here we can write an if statement
like<01:50:54.880><c> this</c>

01:50:55.910 --> 01:50:55.920 align:start position:0%
like this
 

01:50:55.920 --> 01:50:58.950 align:start position:0%
like this
if<01:50:56.880><c> income</c><01:50:57.599><c> is</c><01:50:57.760><c> greater</c><01:50:58.239><c> than</c>

01:50:58.950 --> 01:50:58.960 align:start position:0%
if income is greater than
 

01:50:58.960 --> 01:51:03.109 align:start position:0%
if income is greater than
100<01:51:00.000><c> 000</c><01:51:00.560><c> dollars</c><01:51:01.599><c> we</c><01:51:01.760><c> want</c><01:51:01.920><c> to</c><01:51:02.080><c> set</c>

01:51:03.109 --> 01:51:03.119 align:start position:0%
100 000 dollars we want to set
 

01:51:03.119 --> 01:51:06.390 align:start position:0%
100 000 dollars we want to set
has<01:51:03.440><c> high</c><01:51:03.760><c> income</c><01:51:05.040><c> to</c><01:51:05.280><c> true</c>

01:51:06.390 --> 01:51:06.400 align:start position:0%
has high income to true
 

01:51:06.400 --> 01:51:08.790 align:start position:0%
has high income to true
however<01:51:07.119><c> we</c><01:51:07.280><c> get</c><01:51:07.440><c> a</c><01:51:07.520><c> compilation</c><01:51:08.080><c> error</c><01:51:08.400><c> here</c>

01:51:08.790 --> 01:51:08.800 align:start position:0%
however we get a compilation error here
 

01:51:08.800 --> 01:51:10.149 align:start position:0%
however we get a compilation error here
let's<01:51:08.960><c> take</c><01:51:09.199><c> a</c><01:51:09.280><c> look</c>

01:51:10.149 --> 01:51:10.159 align:start position:0%
let's take a look
 

01:51:10.159 --> 01:51:12.550 align:start position:0%
let's take a look
declaration<01:51:10.880><c> not</c><01:51:11.199><c> allowed</c><01:51:11.599><c> here</c><01:51:12.320><c> so</c><01:51:12.480><c> we</c>

01:51:12.550 --> 01:51:12.560 align:start position:0%
declaration not allowed here so we
 

01:51:12.560 --> 01:51:14.229 align:start position:0%
declaration not allowed here so we
cannot<01:51:12.880><c> declare</c><01:51:13.280><c> a</c><01:51:13.360><c> variable</c><01:51:13.840><c> here</c>

01:51:14.229 --> 01:51:14.239 align:start position:0%
cannot declare a variable here
 

01:51:14.239 --> 01:51:16.629 align:start position:0%
cannot declare a variable here
we<01:51:14.400><c> can</c><01:51:14.639><c> only</c><01:51:14.960><c> declare</c><01:51:15.280><c> variables</c><01:51:16.080><c> inside</c>

01:51:16.629 --> 01:51:16.639 align:start position:0%
we can only declare variables inside
 

01:51:16.639 --> 01:51:17.589 align:start position:0%
we can only declare variables inside
code<01:51:16.960><c> blocks</c>

01:51:17.589 --> 01:51:17.599 align:start position:0%
code blocks
 

01:51:17.599 --> 01:51:20.550 align:start position:0%
code blocks
like<01:51:17.760><c> this</c><01:51:18.000><c> code</c><01:51:18.239><c> block</c><01:51:19.040><c> over</c><01:51:19.280><c> here</c><01:51:20.159><c> so</c><01:51:20.400><c> to</c>

01:51:20.550 --> 01:51:20.560 align:start position:0%
like this code block over here so to
 

01:51:20.560 --> 01:51:21.830 align:start position:0%
like this code block over here so to
declare<01:51:20.960><c> this</c><01:51:21.119><c> variable</c>

01:51:21.830 --> 01:51:21.840 align:start position:0%
declare this variable
 

01:51:21.840 --> 01:51:24.790 align:start position:0%
declare this variable
we<01:51:22.000><c> need</c><01:51:22.159><c> to</c><01:51:22.320><c> add</c><01:51:23.119><c> curly</c><01:51:23.440><c> braces</c><01:51:23.920><c> to</c><01:51:24.080><c> define</c><01:51:24.719><c> a</c>

01:51:24.790 --> 01:51:24.800 align:start position:0%
we need to add curly braces to define a
 

01:51:24.800 --> 01:51:26.070 align:start position:0%
we need to add curly braces to define a
new<01:51:25.040><c> code</c><01:51:25.280><c> block</c>

01:51:26.070 --> 01:51:26.080 align:start position:0%
new code block
 

01:51:26.080 --> 01:51:28.070 align:start position:0%
new code block
now<01:51:26.320><c> we</c><01:51:26.400><c> have</c><01:51:26.480><c> a</c><01:51:26.639><c> different</c><01:51:26.880><c> problem</c><01:51:27.840><c> this</c>

01:51:28.070 --> 01:51:28.080 align:start position:0%
now we have a different problem this
 

01:51:28.080 --> 01:51:29.589 align:start position:0%
now we have a different problem this
variable<01:51:28.400><c> that</c><01:51:28.560><c> we</c><01:51:28.719><c> have</c><01:51:28.880><c> defined</c>

01:51:29.589 --> 01:51:29.599 align:start position:0%
variable that we have defined
 

01:51:29.599 --> 01:51:32.149 align:start position:0%
variable that we have defined
is<01:51:29.920><c> scoped</c><01:51:30.639><c> to</c><01:51:30.800><c> this</c><01:51:31.040><c> code</c><01:51:31.280><c> block</c><01:51:31.760><c> so</c><01:51:31.920><c> it's</c>

01:51:32.149 --> 01:51:32.159 align:start position:0%
is scoped to this code block so it's
 

01:51:32.159 --> 01:51:33.589 align:start position:0%
is scoped to this code block so it's
only<01:51:32.480><c> available</c><01:51:33.040><c> here</c>

01:51:33.589 --> 01:51:33.599 align:start position:0%
only available here
 

01:51:33.599 --> 01:51:35.750 align:start position:0%
only available here
we<01:51:33.760><c> cannot</c><01:51:34.320><c> access</c><01:51:34.719><c> it</c><01:51:35.119><c> outside</c><01:51:35.520><c> of</c><01:51:35.599><c> this</c>

01:51:35.750 --> 01:51:35.760 align:start position:0%
we cannot access it outside of this
 

01:51:35.760 --> 01:51:37.350 align:start position:0%
we cannot access it outside of this
block<01:51:36.320><c> let</c><01:51:36.480><c> me</c><01:51:36.639><c> show</c><01:51:36.800><c> you</c>

01:51:37.350 --> 01:51:37.360 align:start position:0%
block let me show you
 

01:51:37.360 --> 01:51:40.390 align:start position:0%
block let me show you
so<01:51:37.679><c> if</c><01:51:37.840><c> we</c><01:51:38.080><c> print</c><01:51:39.760><c> has</c>

01:51:40.390 --> 01:51:40.400 align:start position:0%
so if we print has
 

01:51:40.400 --> 01:51:43.189 align:start position:0%
so if we print has
high<01:51:41.360><c> income</c><01:51:42.480><c> you</c><01:51:42.560><c> can</c><01:51:42.719><c> see</c><01:51:42.880><c> we</c><01:51:43.040><c> have</c><01:51:43.119><c> a</c>

01:51:43.189 --> 01:51:43.199 align:start position:0%
high income you can see we have a
 

01:51:43.199 --> 01:51:44.390 align:start position:0%
high income you can see we have a
compilation<01:51:43.840><c> error</c>

01:51:44.390 --> 01:51:44.400 align:start position:0%
compilation error
 

01:51:44.400 --> 01:51:47.109 align:start position:0%
compilation error
cannot<01:51:44.800><c> resolve</c><01:51:45.280><c> symbol</c><01:51:45.840><c> has</c><01:51:46.159><c> high</c><01:51:46.480><c> income</c>

01:51:47.109 --> 01:51:47.119 align:start position:0%
cannot resolve symbol has high income
 

01:51:47.119 --> 01:51:48.070 align:start position:0%
cannot resolve symbol has high income
because<01:51:47.360><c> this</c><01:51:47.599><c> variable</c>

01:51:48.070 --> 01:51:48.080 align:start position:0%
because this variable
 

01:51:48.080 --> 01:51:50.470 align:start position:0%
because this variable
is<01:51:48.159><c> not</c><01:51:48.320><c> available</c><01:51:49.199><c> outside</c><01:51:49.760><c> of</c><01:51:49.840><c> the</c><01:51:50.000><c> block</c><01:51:50.400><c> in</c>

01:51:50.470 --> 01:51:50.480 align:start position:0%
is not available outside of the block in
 

01:51:50.480 --> 01:51:51.910 align:start position:0%
is not available outside of the block in
which<01:51:50.800><c> it's</c><01:51:50.960><c> declared</c>

01:51:51.910 --> 01:51:51.920 align:start position:0%
which it's declared
 

01:51:51.920 --> 01:51:54.149 align:start position:0%
which it's declared
so<01:51:52.080><c> to</c><01:51:52.239><c> solve</c><01:51:52.480><c> this</c><01:51:52.639><c> problem</c><01:51:53.440><c> we</c><01:51:53.599><c> can</c><01:51:53.760><c> declare</c>

01:51:54.149 --> 01:51:54.159 align:start position:0%
so to solve this problem we can declare
 

01:51:54.159 --> 01:51:54.950 align:start position:0%
so to solve this problem we can declare
this<01:51:54.320><c> variable</c>

01:51:54.950 --> 01:51:54.960 align:start position:0%
this variable
 

01:51:54.960 --> 01:51:58.870 align:start position:0%
this variable
outside<01:51:55.360><c> of</c><01:51:55.520><c> this</c><01:51:55.679><c> block</c><01:51:57.360><c> boolean</c>

01:51:58.870 --> 01:51:58.880 align:start position:0%
outside of this block boolean
 

01:51:58.880 --> 01:52:01.669 align:start position:0%
outside of this block boolean
has<01:51:59.199><c> high</c><01:51:59.440><c> income</c><01:52:00.639><c> and</c><01:52:00.800><c> then</c><01:52:00.960><c> we</c><01:52:01.119><c> can</c><01:52:01.360><c> simply</c>

01:52:01.669 --> 01:52:01.679 align:start position:0%
has high income and then we can simply
 

01:52:01.679 --> 01:52:02.950 align:start position:0%
has high income and then we can simply
set<01:52:01.920><c> it</c><01:52:02.000><c> to</c><01:52:02.159><c> true</c>

01:52:02.950 --> 01:52:02.960 align:start position:0%
set it to true
 

01:52:02.960 --> 01:52:05.030 align:start position:0%
set it to true
in<01:52:03.040><c> this</c><01:52:03.280><c> block</c><01:52:04.239><c> now</c><01:52:04.480><c> we</c><01:52:04.560><c> don't</c><01:52:04.719><c> need</c><01:52:04.880><c> these</c>

01:52:05.030 --> 01:52:05.040 align:start position:0%
in this block now we don't need these
 

01:52:05.040 --> 01:52:06.149 align:start position:0%
in this block now we don't need these
braces<01:52:05.520><c> anymore</c>

01:52:06.149 --> 01:52:06.159 align:start position:0%
braces anymore
 

01:52:06.159 --> 01:52:09.350 align:start position:0%
braces anymore
so<01:52:06.400><c> let's</c><01:52:06.639><c> simplify</c><01:52:07.119><c> the</c><01:52:07.280><c> code</c><01:52:08.639><c> we</c><01:52:08.800><c> add</c><01:52:09.119><c> an</c>

01:52:09.350 --> 01:52:09.360 align:start position:0%
so let's simplify the code we add an
 

01:52:09.360 --> 01:52:12.310 align:start position:0%
so let's simplify the code we add an
else<01:52:09.599><c> clause</c><01:52:10.719><c> otherwise</c><01:52:11.280><c> we</c><01:52:11.440><c> set</c><01:52:11.760><c> has</c><01:52:12.000><c> high</c>

01:52:12.310 --> 01:52:12.320 align:start position:0%
else clause otherwise we set has high
 

01:52:12.320 --> 01:52:13.430 align:start position:0%
else clause otherwise we set has high
income<01:52:12.719><c> to</c>

01:52:13.430 --> 01:52:13.440 align:start position:0%
income to
 

01:52:13.440 --> 01:52:15.990 align:start position:0%
income to
false<01:52:14.560><c> let's</c><01:52:14.800><c> remove</c><01:52:15.040><c> this</c><01:52:15.199><c> print</c><01:52:15.520><c> method</c><01:52:15.920><c> we</c>

01:52:15.990 --> 01:52:16.000 align:start position:0%
false let's remove this print method we
 

01:52:16.000 --> 01:52:17.270 align:start position:0%
false let's remove this print method we
don't<01:52:16.159><c> need</c><01:52:16.320><c> it</c><01:52:16.400><c> anymore</c>

01:52:17.270 --> 01:52:17.280 align:start position:0%
don't need it anymore
 

01:52:17.280 --> 01:52:19.430 align:start position:0%
don't need it anymore
so<01:52:17.440><c> this</c><01:52:17.679><c> is</c><01:52:17.840><c> one</c><01:52:18.080><c> way</c><01:52:18.560><c> to</c><01:52:18.880><c> implement</c><01:52:19.280><c> this</c>

01:52:19.430 --> 01:52:19.440 align:start position:0%
so this is one way to implement this
 

01:52:19.440 --> 01:52:21.350 align:start position:0%
so this is one way to implement this
scenario<01:52:20.159><c> but</c><01:52:20.320><c> this</c><01:52:20.480><c> code</c><01:52:20.800><c> looks</c><01:52:21.040><c> very</c>

01:52:21.350 --> 01:52:21.360 align:start position:0%
scenario but this code looks very
 

01:52:21.360 --> 01:52:22.390 align:start position:0%
scenario but this code looks very
amateurish

01:52:22.390 --> 01:52:22.400 align:start position:0%
amateurish
 

01:52:22.400 --> 01:52:24.149 align:start position:0%
amateurish
a<01:52:22.560><c> professional</c><01:52:23.040><c> programmer</c><01:52:23.679><c> doesn't</c><01:52:23.920><c> write</c>

01:52:24.149 --> 01:52:24.159 align:start position:0%
a professional programmer doesn't write
 

01:52:24.159 --> 01:52:25.589 align:start position:0%
a professional programmer doesn't write
code<01:52:24.400><c> like</c><01:52:24.639><c> this</c>

01:52:25.589 --> 01:52:25.599 align:start position:0%
code like this
 

01:52:25.599 --> 01:52:28.310 align:start position:0%
code like this
let's<01:52:25.840><c> improve</c><01:52:26.239><c> it</c><01:52:26.320><c> step</c><01:52:26.639><c> by</c><01:52:26.800><c> step</c><01:52:27.760><c> one</c><01:52:28.000><c> way</c><01:52:28.159><c> to</c>

01:52:28.310 --> 01:52:28.320 align:start position:0%
let's improve it step by step one way to
 

01:52:28.320 --> 01:52:29.189 align:start position:0%
let's improve it step by step one way to
improve<01:52:28.639><c> this</c>

01:52:29.189 --> 01:52:29.199 align:start position:0%
improve this
 

01:52:29.199 --> 01:52:31.189 align:start position:0%
improve this
is<01:52:29.360><c> to</c><01:52:29.520><c> give</c><01:52:29.679><c> this</c><01:52:29.920><c> boolean</c><01:52:30.320><c> variable</c><01:52:30.960><c> an</c>

01:52:31.189 --> 01:52:31.199 align:start position:0%
is to give this boolean variable an
 

01:52:31.199 --> 01:52:32.310 align:start position:0%
is to give this boolean variable an
initial<01:52:31.679><c> value</c>

01:52:32.310 --> 01:52:32.320 align:start position:0%
initial value
 

01:52:32.320 --> 01:52:34.870 align:start position:0%
initial value
for<01:52:32.560><c> example</c><01:52:32.880><c> we</c><01:52:33.040><c> can</c><01:52:33.199><c> set</c><01:52:33.440><c> it</c><01:52:33.599><c> to</c><01:52:34.480><c> false</c>

01:52:34.870 --> 01:52:34.880 align:start position:0%
for example we can set it to false
 

01:52:34.880 --> 01:52:35.990 align:start position:0%
for example we can set it to false
initially

01:52:35.990 --> 01:52:36.000 align:start position:0%
initially
 

01:52:36.000 --> 01:52:38.870 align:start position:0%
initially
and<01:52:36.159><c> then</c><01:52:36.320><c> we</c><01:52:36.560><c> implement</c><01:52:37.360><c> this</c><01:52:37.599><c> condition</c><01:52:38.639><c> so</c>

01:52:38.870 --> 01:52:38.880 align:start position:0%
and then we implement this condition so
 

01:52:38.880 --> 01:52:40.310 align:start position:0%
and then we implement this condition so
if<01:52:38.960><c> the</c><01:52:39.119><c> income</c><01:52:39.440><c> is</c><01:52:39.599><c> more</c><01:52:39.760><c> than</c><01:52:39.920><c> one</c><01:52:40.080><c> hundred</c>

01:52:40.310 --> 01:52:40.320 align:start position:0%
if the income is more than one hundred
 

01:52:40.320 --> 01:52:41.510 align:start position:0%
if the income is more than one hundred
thousand<01:52:40.719><c> dollars</c>

01:52:41.510 --> 01:52:41.520 align:start position:0%
thousand dollars
 

01:52:41.520 --> 01:52:44.070 align:start position:0%
thousand dollars
then<01:52:42.080><c> we</c><01:52:42.239><c> set</c><01:52:42.400><c> this</c><01:52:42.560><c> variable</c><01:52:42.960><c> to</c><01:52:43.119><c> true</c><01:52:43.920><c> with</c>

01:52:44.070 --> 01:52:44.080 align:start position:0%
then we set this variable to true with
 

01:52:44.080 --> 01:52:45.750 align:start position:0%
then we set this variable to true with
this<01:52:44.320><c> we</c><01:52:44.560><c> no</c><01:52:44.800><c> longer</c><01:52:45.199><c> need</c>

01:52:45.750 --> 01:52:45.760 align:start position:0%
this we no longer need
 

01:52:45.760 --> 01:52:48.629 align:start position:0%
this we no longer need
this<01:52:46.080><c> else</c><01:52:46.400><c> clause</c><01:52:47.920><c> so</c><01:52:48.080><c> that</c><01:52:48.239><c> was</c><01:52:48.480><c> one</c>

01:52:48.629 --> 01:52:48.639 align:start position:0%
this else clause so that was one
 

01:52:48.639 --> 01:52:49.510 align:start position:0%
this else clause so that was one
improvement

01:52:49.510 --> 01:52:49.520 align:start position:0%
improvement
 

01:52:49.520 --> 01:52:51.750 align:start position:0%
improvement
but<01:52:49.679><c> it's</c><01:52:49.760><c> still</c><01:52:50.000><c> not</c><01:52:50.239><c> ideal</c><01:52:51.119><c> in</c><01:52:51.280><c> situations</c>

01:52:51.750 --> 01:52:51.760 align:start position:0%
but it's still not ideal in situations
 

01:52:51.760 --> 01:52:53.830 align:start position:0%
but it's still not ideal in situations
like<01:52:52.000><c> this</c><01:52:52.400><c> we</c><01:52:52.560><c> can</c><01:52:52.880><c> completely</c>

01:52:53.830 --> 01:52:53.840 align:start position:0%
like this we can completely
 

01:52:53.840 --> 01:52:55.910 align:start position:0%
like this we can completely
get<01:52:54.080><c> rid</c><01:52:54.239><c> of</c><01:52:54.320><c> this</c><01:52:54.480><c> if</c><01:52:54.719><c> statement</c><01:52:55.119><c> here</c><01:52:55.599><c> let</c><01:52:55.760><c> me</c>

01:52:55.910 --> 01:52:55.920 align:start position:0%
get rid of this if statement here let me
 

01:52:55.920 --> 01:52:58.149 align:start position:0%
get rid of this if statement here let me
show<01:52:56.840><c> you</c>

01:52:58.149 --> 01:52:58.159 align:start position:0%
show you
 

01:52:58.159 --> 01:53:00.709 align:start position:0%
show you
instead<01:52:58.480><c> of</c><01:52:58.639><c> hard</c><01:52:58.880><c> coding</c><01:52:59.280><c> false</c><01:52:59.599><c> here</c><01:53:00.560><c> we</c>

01:53:00.709 --> 01:53:00.719 align:start position:0%
instead of hard coding false here we
 

01:53:00.719 --> 01:53:02.229 align:start position:0%
instead of hard coding false here we
type<01:53:00.960><c> our</c><01:53:01.199><c> expression</c>

01:53:02.229 --> 01:53:02.239 align:start position:0%
type our expression
 

01:53:02.239 --> 01:53:06.470 align:start position:0%
type our expression
income<01:53:02.960><c> is</c><01:53:03.199><c> greater</c><01:53:03.520><c> than</c><01:53:04.080><c> 100</c><01:53:04.960><c> 000</c>

01:53:06.470 --> 01:53:06.480 align:start position:0%
income is greater than 100 000
 

01:53:06.480 --> 01:53:08.709 align:start position:0%
income is greater than 100 000
so<01:53:06.639><c> here</c><01:53:06.800><c> we</c><01:53:06.960><c> have</c><01:53:07.040><c> a</c><01:53:07.199><c> boolean</c><01:53:07.520><c> expression</c><01:53:08.560><c> if</c>

01:53:08.709 --> 01:53:08.719 align:start position:0%
so here we have a boolean expression if
 

01:53:08.719 --> 01:53:10.229 align:start position:0%
so here we have a boolean expression if
this<01:53:08.880><c> boolean</c><01:53:09.280><c> expression</c>

01:53:10.229 --> 01:53:10.239 align:start position:0%
this boolean expression
 

01:53:10.239 --> 01:53:12.950 align:start position:0%
this boolean expression
evaluates<01:53:10.880><c> to</c><01:53:11.119><c> true</c><01:53:12.000><c> this</c><01:53:12.239><c> boolean</c><01:53:12.560><c> variable</c>

01:53:12.950 --> 01:53:12.960 align:start position:0%
evaluates to true this boolean variable
 

01:53:12.960 --> 01:53:14.550 align:start position:0%
evaluates to true this boolean variable
is<01:53:13.040><c> going</c><01:53:13.119><c> to</c><01:53:13.199><c> be</c><01:53:13.440><c> true</c><01:53:13.760><c> otherwise</c><01:53:14.239><c> it's</c><01:53:14.400><c> going</c>

01:53:14.550 --> 01:53:14.560 align:start position:0%
is going to be true otherwise it's going
 

01:53:14.560 --> 01:53:15.990 align:start position:0%
is going to be true otherwise it's going
to<01:53:14.719><c> be</c><01:53:14.880><c> false</c>

01:53:15.990 --> 01:53:16.000 align:start position:0%
to be false
 

01:53:16.000 --> 01:53:18.629 align:start position:0%
to be false
so<01:53:16.239><c> this</c><01:53:16.400><c> is</c><01:53:16.560><c> the</c><01:53:16.639><c> simplest</c><01:53:17.440><c> the</c><01:53:17.599><c> most</c><01:53:17.920><c> elegant</c>

01:53:18.629 --> 01:53:18.639 align:start position:0%
so this is the simplest the most elegant
 

01:53:18.639 --> 01:53:20.390 align:start position:0%
so this is the simplest the most elegant
and<01:53:18.800><c> the</c><01:53:18.960><c> most</c><01:53:19.199><c> professional</c><01:53:19.840><c> way</c><01:53:20.080><c> to</c>

01:53:20.390 --> 01:53:20.400 align:start position:0%
and the most professional way to
 

01:53:20.400 --> 01:53:22.790 align:start position:0%
and the most professional way to
implement<01:53:20.800><c> this</c><01:53:20.960><c> scenario</c><01:53:22.159><c> now</c><01:53:22.400><c> one</c><01:53:22.560><c> more</c>

01:53:22.790 --> 01:53:22.800 align:start position:0%
implement this scenario now one more
 

01:53:22.800 --> 01:53:23.990 align:start position:0%
implement this scenario now one more
improvement<01:53:23.280><c> before</c><01:53:23.520><c> we</c><01:53:23.599><c> finish</c><01:53:23.840><c> this</c>

01:53:23.990 --> 01:53:24.000 align:start position:0%
improvement before we finish this
 

01:53:24.000 --> 01:53:25.109 align:start position:0%
improvement before we finish this
tutorial

01:53:25.109 --> 01:53:25.119 align:start position:0%
tutorial
 

01:53:25.119 --> 01:53:27.109 align:start position:0%
tutorial
i<01:53:25.360><c> personally</c><01:53:25.840><c> prefer</c><01:53:26.480><c> to</c><01:53:26.719><c> wrap</c><01:53:26.960><c> this</c>

01:53:27.109 --> 01:53:27.119 align:start position:0%
i personally prefer to wrap this
 

01:53:27.119 --> 01:53:28.629 align:start position:0%
i personally prefer to wrap this
expression<01:53:27.679><c> in</c><01:53:27.840><c> parenthesis</c>

01:53:28.629 --> 01:53:28.639 align:start position:0%
expression in parenthesis
 

01:53:28.639 --> 01:53:29.990 align:start position:0%
expression in parenthesis
even<01:53:28.800><c> though</c><01:53:29.040><c> technically</c><01:53:29.440><c> we</c><01:53:29.599><c> don't</c><01:53:29.760><c> need</c>

01:53:29.990 --> 01:53:30.000 align:start position:0%
even though technically we don't need
 

01:53:30.000 --> 01:53:32.390 align:start position:0%
even though technically we don't need
parentheses<01:53:30.560><c> here</c><01:53:31.119><c> but</c><01:53:31.280><c> these</c><01:53:31.520><c> parentheses</c>

01:53:32.390 --> 01:53:32.400 align:start position:0%
parentheses here but these parentheses
 

01:53:32.400 --> 01:53:34.470 align:start position:0%
parentheses here but these parentheses
make<01:53:32.639><c> our</c><01:53:32.800><c> code</c><01:53:33.119><c> more</c><01:53:33.360><c> clear</c><01:53:33.840><c> more</c><01:53:34.000><c> readable</c>

01:53:34.470 --> 01:53:34.480 align:start position:0%
make our code more clear more readable
 

01:53:34.480 --> 01:53:36.149 align:start position:0%
make our code more clear more readable
let<01:53:34.639><c> me</c><01:53:34.800><c> show</c><01:53:34.960><c> you</c>

01:53:36.149 --> 01:53:36.159 align:start position:0%
let me show you
 

01:53:36.159 --> 01:53:38.149 align:start position:0%
let me show you
so<01:53:36.320><c> i'm</c><01:53:36.400><c> going</c><01:53:36.560><c> to</c><01:53:36.639><c> wrap</c><01:53:36.960><c> this</c><01:53:37.520><c> inside</c><01:53:37.920><c> this</c>

01:53:38.149 --> 01:53:38.159 align:start position:0%
so i'm going to wrap this inside this
 

01:53:38.159 --> 01:53:39.350 align:start position:0%
so i'm going to wrap this inside this
parenthesis

01:53:39.350 --> 01:53:39.360 align:start position:0%
parenthesis
 

01:53:39.360 --> 01:53:41.350 align:start position:0%
parenthesis
now<01:53:39.599><c> it's</c><01:53:39.760><c> very</c><01:53:40.000><c> clear</c><01:53:40.320><c> very</c><01:53:40.639><c> obvious</c><01:53:41.040><c> that</c><01:53:41.280><c> on</c>

01:53:41.350 --> 01:53:41.360 align:start position:0%
now it's very clear very obvious that on
 

01:53:41.360 --> 01:53:42.629 align:start position:0%
now it's very clear very obvious that on
the<01:53:41.520><c> right</c><01:53:41.760><c> side</c><01:53:41.920><c> of</c><01:53:42.000><c> this</c><01:53:42.159><c> assignment</c>

01:53:42.629 --> 01:53:42.639 align:start position:0%
the right side of this assignment
 

01:53:42.639 --> 01:53:43.589 align:start position:0%
the right side of this assignment
operator<01:53:43.040><c> we</c><01:53:43.199><c> have</c>

01:53:43.589 --> 01:53:43.599 align:start position:0%
operator we have
 

01:53:43.599 --> 01:53:51.109 align:start position:0%
operator we have
a<01:53:43.840><c> boolean</c><01:53:44.239><c> expression</c>

01:53:51.109 --> 01:53:51.119 align:start position:0%
 
 

01:53:51.119 --> 01:53:52.390 align:start position:0%
 
in<01:53:51.199><c> this</c><01:53:51.360><c> tutorial</c><01:53:51.840><c> we're</c><01:53:52.000><c> going</c><01:53:52.080><c> to</c><01:53:52.159><c> look</c><01:53:52.320><c> at</c>

01:53:52.390 --> 01:53:52.400 align:start position:0%
in this tutorial we're going to look at
 

01:53:52.400 --> 01:53:54.870 align:start position:0%
in this tutorial we're going to look at
the<01:53:52.560><c> ternary</c><01:53:53.119><c> operator</c><01:53:53.679><c> in</c><01:53:54.000><c> java</c>

01:53:54.870 --> 01:53:54.880 align:start position:0%
the ternary operator in java
 

01:53:54.880 --> 01:53:56.070 align:start position:0%
the ternary operator in java
so<01:53:55.119><c> we're</c><01:53:55.280><c> going</c><01:53:55.360><c> to</c><01:53:55.440><c> continue</c><01:53:55.760><c> with</c><01:53:55.920><c> the</c>

01:53:56.070 --> 01:53:56.080 align:start position:0%
so we're going to continue with the
 

01:53:56.080 --> 01:53:57.910 align:start position:0%
so we're going to continue with the
example<01:53:56.560><c> from</c><01:53:56.719><c> the</c><01:53:56.800><c> last</c><01:53:57.040><c> tutorial</c>

01:53:57.910 --> 01:53:57.920 align:start position:0%
example from the last tutorial
 

01:53:57.920 --> 01:54:00.070 align:start position:0%
example from the last tutorial
we<01:53:58.080><c> have</c><01:53:58.239><c> this</c><01:53:58.560><c> income</c><01:53:58.880><c> variable</c><01:53:59.679><c> imagine</c>

01:54:00.070 --> 01:54:00.080 align:start position:0%
we have this income variable imagine
 

01:54:00.080 --> 01:54:02.229 align:start position:0%
we have this income variable imagine
this<01:54:00.239><c> is</c><01:54:00.320><c> the</c><01:54:00.560><c> income</c><01:54:00.960><c> of</c><01:54:01.040><c> our</c><01:54:01.199><c> customers</c>

01:54:02.229 --> 01:54:02.239 align:start position:0%
this is the income of our customers
 

01:54:02.239 --> 01:54:03.990 align:start position:0%
this is the income of our customers
now<01:54:02.400><c> depending</c><01:54:02.800><c> on</c><01:54:02.960><c> their</c><01:54:03.199><c> income</c><01:54:03.679><c> we</c><01:54:03.840><c> want</c><01:54:03.920><c> to</c>

01:54:03.990 --> 01:54:04.000 align:start position:0%
now depending on their income we want to
 

01:54:04.000 --> 01:54:06.310 align:start position:0%
now depending on their income we want to
put<01:54:04.159><c> these</c><01:54:04.320><c> customers</c><01:54:04.880><c> in</c><01:54:04.960><c> different</c><01:54:05.280><c> classes</c>

01:54:06.310 --> 01:54:06.320 align:start position:0%
put these customers in different classes
 

01:54:06.320 --> 01:54:07.990 align:start position:0%
put these customers in different classes
if<01:54:06.400><c> their</c><01:54:06.639><c> income</c><01:54:06.960><c> is</c><01:54:07.119><c> more</c><01:54:07.280><c> than</c><01:54:07.520><c> one</c><01:54:07.679><c> hundred</c>

01:54:07.990 --> 01:54:08.000 align:start position:0%
if their income is more than one hundred
 

01:54:08.000 --> 01:54:09.750 align:start position:0%
if their income is more than one hundred
thousand<01:54:08.400><c> dollars</c><01:54:08.960><c> you</c><01:54:09.119><c> want</c><01:54:09.199><c> to</c><01:54:09.280><c> put</c><01:54:09.440><c> them</c><01:54:09.679><c> in</c>

01:54:09.750 --> 01:54:09.760 align:start position:0%
thousand dollars you want to put them in
 

01:54:09.760 --> 01:54:10.790 align:start position:0%
thousand dollars you want to put them in
the<01:54:09.920><c> first</c><01:54:10.239><c> class</c>

01:54:10.790 --> 01:54:10.800 align:start position:0%
the first class
 

01:54:10.800 --> 01:54:11.910 align:start position:0%
the first class
otherwise<01:54:11.119><c> we</c><01:54:11.280><c> want</c><01:54:11.360><c> to</c><01:54:11.440><c> put</c><01:54:11.599><c> them</c><01:54:11.760><c> in</c><01:54:11.840><c> the</c>

01:54:11.910 --> 01:54:11.920 align:start position:0%
otherwise we want to put them in the
 

01:54:11.920 --> 01:54:14.149 align:start position:0%
otherwise we want to put them in the
economy<01:54:12.480><c> class</c><01:54:13.440><c> so</c>

01:54:14.149 --> 01:54:14.159 align:start position:0%
economy class so
 

01:54:14.159 --> 01:54:16.470 align:start position:0%
economy class so
here's<01:54:14.400><c> one</c><01:54:14.560><c> way</c><01:54:14.800><c> to</c><01:54:14.960><c> implement</c><01:54:15.280><c> the</c><01:54:15.440><c> scenario</c>

01:54:16.470 --> 01:54:16.480 align:start position:0%
here's one way to implement the scenario
 

01:54:16.480 --> 01:54:19.109 align:start position:0%
here's one way to implement the scenario
we<01:54:16.639><c> declare</c><01:54:17.040><c> this</c><01:54:17.280><c> string</c><01:54:17.599><c> variable</c>

01:54:19.109 --> 01:54:19.119 align:start position:0%
we declare this string variable
 

01:54:19.119 --> 01:54:21.990 align:start position:0%
we declare this string variable
class<01:54:19.920><c> name</c><01:54:20.719><c> note</c><01:54:21.040><c> that</c><01:54:21.199><c> we</c><01:54:21.280><c> cannot</c><01:54:21.599><c> call</c><01:54:21.760><c> this</c>

01:54:21.990 --> 01:54:22.000 align:start position:0%
class name note that we cannot call this
 

01:54:22.000 --> 01:54:23.589 align:start position:0%
class name note that we cannot call this
class<01:54:22.400><c> because</c><01:54:22.719><c> class</c><01:54:23.040><c> is</c><01:54:23.119><c> a</c><01:54:23.199><c> reserved</c>

01:54:23.589 --> 01:54:23.599 align:start position:0%
class because class is a reserved
 

01:54:23.599 --> 01:54:24.390 align:start position:0%
class because class is a reserved
keyword

01:54:24.390 --> 01:54:24.400 align:start position:0%
keyword
 

01:54:24.400 --> 01:54:27.750 align:start position:0%
keyword
so<01:54:24.639><c> class</c><01:54:25.040><c> name</c><01:54:26.000><c> now</c><01:54:27.040><c> we</c><01:54:27.199><c> write</c><01:54:27.440><c> our</c><01:54:27.520><c> first</c>

01:54:27.750 --> 01:54:27.760 align:start position:0%
so class name now we write our first
 

01:54:27.760 --> 01:54:28.709 align:start position:0%
so class name now we write our first
condition

01:54:28.709 --> 01:54:28.719 align:start position:0%
condition
 

01:54:28.719 --> 01:54:31.189 align:start position:0%
condition
if<01:54:29.040><c> income</c><01:54:29.360><c> is</c><01:54:29.520><c> greater</c><01:54:29.920><c> than</c><01:54:30.400><c> one</c><01:54:30.639><c> hundred</c>

01:54:31.189 --> 01:54:31.199 align:start position:0%
if income is greater than one hundred
 

01:54:31.199 --> 01:54:32.709 align:start position:0%
if income is greater than one hundred
thousand<01:54:31.599><c> dollars</c>

01:54:32.709 --> 01:54:32.719 align:start position:0%
thousand dollars
 

01:54:32.719 --> 01:54:36.390 align:start position:0%
thousand dollars
we<01:54:32.880><c> set</c><01:54:33.119><c> class</c><01:54:33.440><c> name</c><01:54:34.320><c> to</c><01:54:34.880><c> first</c>

01:54:36.390 --> 01:54:36.400 align:start position:0%
we set class name to first
 

01:54:36.400 --> 01:54:42.070 align:start position:0%
we set class name to first
otherwise<01:54:37.920><c> we</c><01:54:38.159><c> set</c><01:54:38.400><c> it</c><01:54:38.480><c> to</c><01:54:39.040><c> economy</c>

01:54:42.070 --> 01:54:42.080 align:start position:0%
 
 

01:54:42.080 --> 01:54:44.070 align:start position:0%
 
now<01:54:42.320><c> as</c><01:54:42.480><c> you</c><01:54:42.560><c> learned</c><01:54:42.800><c> in</c><01:54:42.880><c> the</c><01:54:42.960><c> last</c><01:54:43.199><c> tutorial</c>

01:54:44.070 --> 01:54:44.080 align:start position:0%
now as you learned in the last tutorial
 

01:54:44.080 --> 01:54:45.910 align:start position:0%
now as you learned in the last tutorial
this<01:54:44.320><c> code</c><01:54:44.560><c> looks</c><01:54:44.800><c> very</c><01:54:45.040><c> amateurish</c><01:54:45.760><c> a</c>

01:54:45.910 --> 01:54:45.920 align:start position:0%
this code looks very amateurish a
 

01:54:45.920 --> 01:54:47.510 align:start position:0%
this code looks very amateurish a
professional<01:54:46.480><c> programmer</c><01:54:46.960><c> doesn't</c><01:54:47.280><c> write</c>

01:54:47.510 --> 01:54:47.520 align:start position:0%
professional programmer doesn't write
 

01:54:47.520 --> 01:54:48.709 align:start position:0%
professional programmer doesn't write
code<01:54:47.760><c> like</c><01:54:47.920><c> this</c>

01:54:48.709 --> 01:54:48.719 align:start position:0%
code like this
 

01:54:48.719 --> 01:54:51.030 align:start position:0%
code like this
so<01:54:48.960><c> one</c><01:54:49.119><c> way</c><01:54:49.280><c> to</c><01:54:49.360><c> simplify</c><01:54:49.920><c> this</c><01:54:50.239><c> is</c><01:54:50.719><c> to</c><01:54:50.880><c> give</c>

01:54:51.030 --> 01:54:51.040 align:start position:0%
so one way to simplify this is to give
 

01:54:51.040 --> 01:54:51.990 align:start position:0%
so one way to simplify this is to give
this<01:54:51.199><c> variable</c><01:54:51.679><c> an</c>

01:54:51.990 --> 01:54:52.000 align:start position:0%
this variable an
 

01:54:52.000 --> 01:54:55.189 align:start position:0%
this variable an
initial<01:54:52.480><c> value</c><01:54:53.440><c> so</c><01:54:53.679><c> we</c><01:54:53.840><c> assume</c><01:54:54.239><c> they</c><01:54:54.480><c> are</c>

01:54:55.189 --> 01:54:55.199 align:start position:0%
initial value so we assume they are
 

01:54:55.199 --> 01:54:57.510 align:start position:0%
initial value so we assume they are
in<01:54:55.280><c> the</c><01:54:55.440><c> economy</c><01:54:56.000><c> class</c><01:54:56.960><c> and</c><01:54:57.040><c> then</c><01:54:57.199><c> we</c><01:54:57.360><c> check</c>

01:54:57.510 --> 01:54:57.520 align:start position:0%
in the economy class and then we check
 

01:54:57.520 --> 01:54:58.390 align:start position:0%
in the economy class and then we check
this<01:54:57.679><c> condition</c>

01:54:58.390 --> 01:54:58.400 align:start position:0%
this condition
 

01:54:58.400 --> 01:55:00.310 align:start position:0%
this condition
if<01:54:58.480><c> this</c><01:54:58.639><c> condition</c><01:54:59.119><c> is</c><01:54:59.280><c> true</c><01:54:59.440><c> we</c><01:54:59.679><c> put</c><01:54:59.840><c> them</c><01:55:00.159><c> in</c>

01:55:00.310 --> 01:55:00.320 align:start position:0%
if this condition is true we put them in
 

01:55:00.320 --> 01:55:02.390 align:start position:0%
if this condition is true we put them in
the<01:55:00.400><c> first</c><01:55:00.719><c> class</c><01:55:01.360><c> so</c><01:55:01.599><c> with</c><01:55:01.760><c> this</c><01:55:01.920><c> we</c><01:55:02.080><c> can</c><01:55:02.239><c> get</c>

01:55:02.390 --> 01:55:02.400 align:start position:0%
the first class so with this we can get
 

01:55:02.400 --> 01:55:03.030 align:start position:0%
the first class so with this we can get
rid<01:55:02.639><c> of</c><01:55:02.719><c> this</c>

01:55:03.030 --> 01:55:03.040 align:start position:0%
rid of this
 

01:55:03.040 --> 01:55:05.990 align:start position:0%
rid of this
else<01:55:03.520><c> clause</c><01:55:04.400><c> that</c><01:55:04.639><c> is</c><01:55:04.719><c> better</c><01:55:05.599><c> now</c><01:55:05.840><c> in</c><01:55:05.920><c> the</c>

01:55:05.990 --> 01:55:06.000 align:start position:0%
else clause that is better now in the
 

01:55:06.000 --> 01:55:06.950 align:start position:0%
else clause that is better now in the
last<01:55:06.239><c> tutorial</c>

01:55:06.950 --> 01:55:06.960 align:start position:0%
last tutorial
 

01:55:06.960 --> 01:55:09.030 align:start position:0%
last tutorial
i<01:55:07.199><c> showed</c><01:55:07.440><c> you</c><01:55:07.760><c> how</c><01:55:07.920><c> to</c><01:55:08.080><c> simplify</c><01:55:08.560><c> this</c><01:55:08.719><c> even</c>

01:55:09.030 --> 01:55:09.040 align:start position:0%
i showed you how to simplify this even
 

01:55:09.040 --> 01:55:10.790 align:start position:0%
i showed you how to simplify this even
further<01:55:09.760><c> but</c><01:55:09.920><c> the</c><01:55:10.080><c> technique</c><01:55:10.480><c> you</c><01:55:10.560><c> learned</c>

01:55:10.790 --> 01:55:10.800 align:start position:0%
further but the technique you learned
 

01:55:10.800 --> 01:55:11.189 align:start position:0%
further but the technique you learned
there

01:55:11.189 --> 01:55:11.199 align:start position:0%
there
 

01:55:11.199 --> 01:55:13.669 align:start position:0%
there
cannot<01:55:11.599><c> be</c><01:55:11.760><c> used</c><01:55:12.080><c> here</c><01:55:12.880><c> in</c><01:55:13.040><c> other</c><01:55:13.199><c> words</c><01:55:13.520><c> we</c>

01:55:13.669 --> 01:55:13.679 align:start position:0%
cannot be used here in other words we
 

01:55:13.679 --> 01:55:16.229 align:start position:0%
cannot be used here in other words we
cannot<01:55:14.239><c> add</c>

01:55:16.229 --> 01:55:16.239 align:start position:0%
cannot add
 

01:55:16.239 --> 01:55:19.350 align:start position:0%
cannot add
income<01:55:16.880><c> greater</c><01:55:17.280><c> than</c><01:55:18.159><c> 100</c><01:55:18.719><c> 000</c>

01:55:19.350 --> 01:55:19.360 align:start position:0%
income greater than 100 000
 

01:55:19.360 --> 01:55:21.750 align:start position:0%
income greater than 100 000
here<01:55:20.080><c> because</c><01:55:20.400><c> here</c><01:55:20.560><c> we</c><01:55:20.719><c> have</c><01:55:21.119><c> a</c><01:55:21.280><c> boolean</c>

01:55:21.750 --> 01:55:21.760 align:start position:0%
here because here we have a boolean
 

01:55:21.760 --> 01:55:22.550 align:start position:0%
here because here we have a boolean
expression

01:55:22.550 --> 01:55:22.560 align:start position:0%
expression
 

01:55:22.560 --> 01:55:24.550 align:start position:0%
expression
but<01:55:22.719><c> on</c><01:55:22.880><c> the</c><01:55:22.960><c> left</c><01:55:23.119><c> side</c><01:55:23.360><c> we</c><01:55:23.520><c> have</c><01:55:23.599><c> declared</c><01:55:24.320><c> a</c>

01:55:24.550 --> 01:55:24.560 align:start position:0%
but on the left side we have declared a
 

01:55:24.560 --> 01:55:25.830 align:start position:0%
but on the left side we have declared a
string<01:55:24.880><c> variable</c>

01:55:25.830 --> 01:55:25.840 align:start position:0%
string variable
 

01:55:25.840 --> 01:55:27.350 align:start position:0%
string variable
so<01:55:26.000><c> we</c><01:55:26.080><c> want</c><01:55:26.239><c> to</c><01:55:26.320><c> set</c><01:55:26.560><c> this</c><01:55:26.719><c> to</c><01:55:26.880><c> a</c><01:55:26.960><c> different</c>

01:55:27.350 --> 01:55:27.360 align:start position:0%
so we want to set this to a different
 

01:55:27.360 --> 01:55:29.910 align:start position:0%
so we want to set this to a different
string<01:55:28.080><c> depending</c><01:55:28.639><c> on</c><01:55:28.800><c> the</c><01:55:28.960><c> result</c><01:55:29.520><c> of</c><01:55:29.679><c> this</c>

01:55:29.910 --> 01:55:29.920 align:start position:0%
string depending on the result of this
 

01:55:29.920 --> 01:55:30.950 align:start position:0%
string depending on the result of this
expression

01:55:30.950 --> 01:55:30.960 align:start position:0%
expression
 

01:55:30.960 --> 01:55:32.790 align:start position:0%
expression
and<01:55:31.040><c> this</c><01:55:31.280><c> is</c><01:55:31.360><c> where</c><01:55:31.599><c> we</c><01:55:31.679><c> use</c><01:55:32.080><c> the</c><01:55:32.320><c> ternary</c>

01:55:32.790 --> 01:55:32.800 align:start position:0%
and this is where we use the ternary
 

01:55:32.800 --> 01:55:34.790 align:start position:0%
and this is where we use the ternary
operator<01:55:33.920><c> so</c><01:55:34.080><c> we</c><01:55:34.320><c> start</c>

01:55:34.790 --> 01:55:34.800 align:start position:0%
operator so we start
 

01:55:34.800 --> 01:55:37.109 align:start position:0%
operator so we start
with<01:55:35.040><c> our</c><01:55:35.199><c> condition</c><01:55:36.159><c> then</c><01:55:36.400><c> we</c><01:55:36.560><c> type</c><01:55:36.960><c> a</c>

01:55:37.109 --> 01:55:37.119 align:start position:0%
with our condition then we type a
 

01:55:37.119 --> 01:55:38.310 align:start position:0%
with our condition then we type a
question<01:55:37.520><c> mark</c>

01:55:38.310 --> 01:55:38.320 align:start position:0%
question mark
 

01:55:38.320 --> 01:55:41.350 align:start position:0%
question mark
if<01:55:38.480><c> this</c><01:55:38.719><c> condition</c><01:55:39.119><c> is</c><01:55:39.280><c> true</c><01:55:39.760><c> we</c><01:55:40.080><c> add</c>

01:55:41.350 --> 01:55:41.360 align:start position:0%
if this condition is true we add
 

01:55:41.360 --> 01:55:44.550 align:start position:0%
if this condition is true we add
this<01:55:41.599><c> value</c><01:55:41.920><c> here</c><01:55:42.880><c> otherwise</c><01:55:43.920><c> we</c><01:55:44.159><c> add</c>

01:55:44.550 --> 01:55:44.560 align:start position:0%
this value here otherwise we add
 

01:55:44.560 --> 01:55:47.830 align:start position:0%
this value here otherwise we add
the<01:55:44.800><c> other</c><01:55:45.040><c> value</c><01:55:46.239><c> so</c><01:55:46.480><c> this</c><01:55:46.719><c> question</c><01:55:47.119><c> mark</c>

01:55:47.830 --> 01:55:47.840 align:start position:0%
the other value so this question mark
 

01:55:47.840 --> 01:55:50.229 align:start position:0%
the other value so this question mark
and<01:55:48.080><c> colon</c><01:55:48.800><c> is</c><01:55:48.960><c> the</c><01:55:49.119><c> ternary</c><01:55:49.599><c> operator</c><01:55:50.080><c> in</c>

01:55:50.229 --> 01:55:50.239 align:start position:0%
and colon is the ternary operator in
 

01:55:50.239 --> 01:55:51.109 align:start position:0%
and colon is the ternary operator in
java

01:55:51.109 --> 01:55:51.119 align:start position:0%
java
 

01:55:51.119 --> 01:55:53.750 align:start position:0%
java
it<01:55:51.280><c> has</c><01:55:51.520><c> three</c><01:55:51.760><c> pieces</c><01:55:52.719><c> first</c><01:55:53.360><c> we</c><01:55:53.520><c> have</c><01:55:53.679><c> a</c>

01:55:53.750 --> 01:55:53.760 align:start position:0%
it has three pieces first we have a
 

01:55:53.760 --> 01:55:54.709 align:start position:0%
it has three pieces first we have a
condition

01:55:54.709 --> 01:55:54.719 align:start position:0%
condition
 

01:55:54.719 --> 01:55:56.790 align:start position:0%
condition
if<01:55:54.800><c> this</c><01:55:54.960><c> condition</c><01:55:55.440><c> is</c><01:55:55.599><c> true</c><01:55:56.239><c> this</c><01:55:56.480><c> value</c>

01:55:56.790 --> 01:55:56.800 align:start position:0%
if this condition is true this value
 

01:55:56.800 --> 01:55:58.390 align:start position:0%
if this condition is true this value
will<01:55:56.880><c> be</c><01:55:57.040><c> returned</c><01:55:57.520><c> and</c><01:55:57.760><c> assigned</c>

01:55:58.390 --> 01:55:58.400 align:start position:0%
will be returned and assigned
 

01:55:58.400 --> 01:56:01.189 align:start position:0%
will be returned and assigned
to<01:55:58.560><c> our</c><01:55:58.719><c> class</c><01:55:59.040><c> name</c><01:55:59.280><c> variable</c><01:56:00.400><c> otherwise</c>

01:56:01.189 --> 01:56:01.199 align:start position:0%
to our class name variable otherwise
 

01:56:01.199 --> 01:56:03.669 align:start position:0%
to our class name variable otherwise
this<01:56:01.520><c> other</c><01:56:01.840><c> value</c><01:56:02.159><c> will</c><01:56:02.239><c> be</c><01:56:02.400><c> returned</c>

01:56:03.669 --> 01:56:03.679 align:start position:0%
this other value will be returned
 

01:56:03.679 --> 01:56:06.229 align:start position:0%
this other value will be returned
now<01:56:03.840><c> we</c><01:56:04.000><c> can</c><01:56:04.239><c> completely</c><01:56:04.719><c> get</c><01:56:04.960><c> rid</c><01:56:05.119><c> of</c><01:56:05.280><c> this</c><01:56:05.679><c> if</c>

01:56:06.229 --> 01:56:06.239 align:start position:0%
now we can completely get rid of this if
 

01:56:06.239 --> 01:56:07.750 align:start position:0%
now we can completely get rid of this if
statement

01:56:07.750 --> 01:56:07.760 align:start position:0%
statement
 

01:56:07.760 --> 01:56:09.750 align:start position:0%
statement
so<01:56:08.320><c> put</c><01:56:08.560><c> the</c><01:56:08.639><c> ternary</c><01:56:09.119><c> operator</c><01:56:09.520><c> in</c><01:56:09.599><c> your</c>

01:56:09.750 --> 01:56:09.760 align:start position:0%
so put the ternary operator in your
 

01:56:09.760 --> 01:56:11.830 align:start position:0%
so put the ternary operator in your
toolbox<01:56:10.320><c> it's</c><01:56:10.639><c> very</c><01:56:10.880><c> helpful</c>

01:56:11.830 --> 01:56:11.840 align:start position:0%
toolbox it's very helpful
 

01:56:11.840 --> 01:56:13.030 align:start position:0%
toolbox it's very helpful
next<01:56:12.080><c> we're</c><01:56:12.239><c> going</c><01:56:12.320><c> to</c><01:56:12.400><c> look</c><01:56:12.560><c> at</c><01:56:12.719><c> switch</c>

01:56:13.030 --> 01:56:13.040 align:start position:0%
next we're going to look at switch
 

01:56:13.040 --> 01:56:20.310 align:start position:0%
next we're going to look at switch
statements<01:56:13.599><c> in</c><01:56:13.840><c> java</c>

01:56:20.310 --> 01:56:20.320 align:start position:0%
 
 

01:56:20.320 --> 01:56:21.589 align:start position:0%
 
in<01:56:20.480><c> this</c><01:56:20.560><c> tutorial</c><01:56:21.040><c> we're</c><01:56:21.119><c> going</c><01:56:21.199><c> to</c><01:56:21.280><c> look</c><01:56:21.440><c> at</c>

01:56:21.589 --> 01:56:21.599 align:start position:0%
in this tutorial we're going to look at
 

01:56:21.599 --> 01:56:23.510 align:start position:0%
in this tutorial we're going to look at
switch<01:56:21.920><c> statements</c><01:56:22.480><c> in</c><01:56:22.719><c> java</c>

01:56:23.510 --> 01:56:23.520 align:start position:0%
switch statements in java
 

01:56:23.520 --> 01:56:25.270 align:start position:0%
switch statements in java
we<01:56:23.679><c> use</c><01:56:23.840><c> three</c><01:56:24.080><c> statements</c><01:56:24.639><c> to</c><01:56:24.800><c> execute</c>

01:56:25.270 --> 01:56:25.280 align:start position:0%
we use three statements to execute
 

01:56:25.280 --> 01:56:27.350 align:start position:0%
we use three statements to execute
different<01:56:25.599><c> parts</c><01:56:25.840><c> of</c><01:56:26.000><c> code</c><01:56:26.480><c> depending</c><01:56:27.040><c> on</c><01:56:27.119><c> the</c>

01:56:27.350 --> 01:56:27.360 align:start position:0%
different parts of code depending on the
 

01:56:27.360 --> 01:56:28.709 align:start position:0%
different parts of code depending on the
value<01:56:27.679><c> of</c><01:56:27.760><c> an</c><01:56:27.920><c> expression</c>

01:56:28.709 --> 01:56:28.719 align:start position:0%
value of an expression
 

01:56:28.719 --> 01:56:30.709 align:start position:0%
value of an expression
kind<01:56:28.960><c> of</c><01:56:29.040><c> similar</c><01:56:29.360><c> to</c><01:56:29.520><c> if</c><01:56:29.760><c> statements</c><01:56:30.400><c> let</c><01:56:30.560><c> me</c>

01:56:30.709 --> 01:56:30.719 align:start position:0%
kind of similar to if statements let me
 

01:56:30.719 --> 01:56:32.229 align:start position:0%
kind of similar to if statements let me
show<01:56:30.880><c> you</c><01:56:31.520><c> so</c><01:56:31.679><c> let's</c><01:56:31.840><c> say</c><01:56:32.000><c> we're</c><01:56:32.159><c> going</c><01:56:32.159><c> to</c>

01:56:32.229 --> 01:56:32.239 align:start position:0%
show you so let's say we're going to
 

01:56:32.239 --> 01:56:33.109 align:start position:0%
show you so let's say we're going to
write<01:56:32.480><c> a</c><01:56:32.639><c> program</c>

01:56:33.109 --> 01:56:33.119 align:start position:0%
write a program
 

01:56:33.119 --> 01:56:35.189 align:start position:0%
write a program
and<01:56:33.360><c> check</c><01:56:33.599><c> the</c><01:56:33.760><c> role</c><01:56:34.080><c> of</c><01:56:34.159><c> the</c><01:56:34.320><c> current</c><01:56:34.639><c> user</c>

01:56:35.189 --> 01:56:35.199 align:start position:0%
and check the role of the current user
 

01:56:35.199 --> 01:56:36.390 align:start position:0%
and check the role of the current user
and<01:56:35.280><c> then</c><01:56:35.440><c> we're</c><01:56:35.599><c> going</c><01:56:35.679><c> to</c><01:56:35.760><c> print</c><01:56:36.000><c> different</c>

01:56:36.390 --> 01:56:36.400 align:start position:0%
and then we're going to print different
 

01:56:36.400 --> 01:56:37.030 align:start position:0%
and then we're going to print different
messages

01:56:37.030 --> 01:56:37.040 align:start position:0%
messages
 

01:56:37.040 --> 01:56:38.550 align:start position:0%
messages
or<01:56:37.199><c> give</c><01:56:37.440><c> them</c><01:56:37.599><c> different</c><01:56:37.920><c> features</c>

01:56:38.550 --> 01:56:38.560 align:start position:0%
or give them different features
 

01:56:38.560 --> 01:56:40.229 align:start position:0%
or give them different features
depending<01:56:39.119><c> on</c><01:56:39.199><c> the</c><01:56:39.360><c> role</c>

01:56:40.229 --> 01:56:40.239 align:start position:0%
depending on the role
 

01:56:40.239 --> 01:56:43.669 align:start position:0%
depending on the role
so<01:56:41.199><c> let's</c><01:56:41.440><c> declare</c><01:56:41.840><c> a</c><01:56:41.920><c> string</c><01:56:42.239><c> variable</c>

01:56:43.669 --> 01:56:43.679 align:start position:0%
so let's declare a string variable
 

01:56:43.679 --> 01:56:46.070 align:start position:0%
so let's declare a string variable
called<01:56:44.080><c> role</c><01:56:44.480><c> and</c><01:56:44.639><c> here</c><01:56:44.800><c> we</c><01:56:44.960><c> set</c><01:56:45.119><c> this</c><01:56:45.360><c> to</c>

01:56:46.070 --> 01:56:46.080 align:start position:0%
called role and here we set this to
 

01:56:46.080 --> 01:56:47.510 align:start position:0%
called role and here we set this to
admin

01:56:47.510 --> 01:56:47.520 align:start position:0%
admin
 

01:56:47.520 --> 01:56:49.109 align:start position:0%
admin
now<01:56:47.760><c> to</c><01:56:47.920><c> check</c><01:56:48.080><c> the</c><01:56:48.159><c> role</c><01:56:48.400><c> of</c><01:56:48.480><c> the</c><01:56:48.560><c> user</c><01:56:48.880><c> we</c><01:56:48.960><c> can</c>

01:56:49.109 --> 01:56:49.119 align:start position:0%
now to check the role of the user we can
 

01:56:49.119 --> 01:56:50.870 align:start position:0%
now to check the role of the user we can
write<01:56:49.360><c> an</c><01:56:49.520><c> if</c><01:56:49.679><c> statement</c><01:56:50.159><c> like</c><01:56:50.320><c> this</c>

01:56:50.870 --> 01:56:50.880 align:start position:0%
write an if statement like this
 

01:56:50.880 --> 01:56:54.390 align:start position:0%
write an if statement like this
if<01:56:51.760><c> role</c><01:56:52.560><c> equals</c><01:56:53.280><c> admin</c>

01:56:54.390 --> 01:56:54.400 align:start position:0%
if role equals admin
 

01:56:54.400 --> 01:56:57.350 align:start position:0%
if role equals admin
then<01:56:54.719><c> perhaps</c><01:56:55.360><c> you</c><01:56:55.520><c> want</c><01:56:55.599><c> to</c><01:56:55.679><c> print</c><01:56:56.800><c> you</c><01:56:57.040><c> are</c>

01:56:57.350 --> 01:56:57.360 align:start position:0%
then perhaps you want to print you are
 

01:56:57.360 --> 01:56:58.629 align:start position:0%
then perhaps you want to print you are
an<01:56:57.599><c> admin</c>

01:56:58.629 --> 01:56:58.639 align:start position:0%
an admin
 

01:56:58.639 --> 01:57:00.470 align:start position:0%
an admin
now<01:56:58.880><c> you</c><01:56:58.960><c> might</c><01:56:59.119><c> be</c><01:56:59.280><c> wondering</c><01:56:59.679><c> why</c><01:57:00.159><c> we</c><01:57:00.320><c> have</c>

01:57:00.470 --> 01:57:00.480 align:start position:0%
now you might be wondering why we have
 

01:57:00.480 --> 01:57:02.070 align:start position:0%
now you might be wondering why we have
this<01:57:00.639><c> condition</c><01:57:01.119><c> here</c><01:57:01.280><c> it's</c><01:57:01.599><c> obvious</c><01:57:01.920><c> that</c>

01:57:02.070 --> 01:57:02.080 align:start position:0%
this condition here it's obvious that
 

01:57:02.080 --> 01:57:02.790 align:start position:0%
this condition here it's obvious that
this<01:57:02.239><c> condition</c>

01:57:02.790 --> 01:57:02.800 align:start position:0%
this condition
 

01:57:02.800 --> 01:57:05.109 align:start position:0%
this condition
is<01:57:03.119><c> always</c><01:57:03.520><c> true</c><01:57:03.840><c> because</c><01:57:04.080><c> we</c><01:57:04.239><c> have</c><01:57:04.320><c> set</c><01:57:04.639><c> role</c>

01:57:05.109 --> 01:57:05.119 align:start position:0%
is always true because we have set role
 

01:57:05.119 --> 01:57:05.990 align:start position:0%
is always true because we have set role
to<01:57:05.280><c> admin</c>

01:57:05.990 --> 01:57:06.000 align:start position:0%
to admin
 

01:57:06.000 --> 01:57:08.229 align:start position:0%
to admin
but<01:57:06.159><c> this</c><01:57:06.320><c> is</c><01:57:06.400><c> just</c><01:57:06.639><c> for</c><01:57:06.800><c> demonstration</c><01:57:08.000><c> in</c><01:57:08.159><c> a</c>

01:57:08.229 --> 01:57:08.239 align:start position:0%
but this is just for demonstration in a
 

01:57:08.239 --> 01:57:10.470 align:start position:0%
but this is just for demonstration in a
real<01:57:08.480><c> program</c><01:57:08.800><c> we</c><01:57:08.960><c> are</c><01:57:09.119><c> not</c><01:57:09.280><c> gonna</c><01:57:09.599><c> hard</c><01:57:09.920><c> code</c>

01:57:10.470 --> 01:57:10.480 align:start position:0%
real program we are not gonna hard code
 

01:57:10.480 --> 01:57:12.790 align:start position:0%
real program we are not gonna hard code
this<01:57:10.800><c> admin</c><01:57:11.280><c> here</c><01:57:11.840><c> so</c><01:57:12.000><c> we're</c><01:57:12.159><c> gonna</c><01:57:12.320><c> read</c><01:57:12.639><c> the</c>

01:57:12.790 --> 01:57:12.800 align:start position:0%
this admin here so we're gonna read the
 

01:57:12.800 --> 01:57:14.229 align:start position:0%
this admin here so we're gonna read the
role<01:57:13.040><c> of</c><01:57:13.119><c> the</c><01:57:13.199><c> current</c><01:57:13.440><c> user</c>

01:57:14.229 --> 01:57:14.239 align:start position:0%
role of the current user
 

01:57:14.239 --> 01:57:15.910 align:start position:0%
role of the current user
from<01:57:14.480><c> somewhere</c><01:57:14.960><c> else</c><01:57:15.199><c> we</c><01:57:15.360><c> don't</c><01:57:15.520><c> know</c><01:57:15.679><c> what</c>

01:57:15.910 --> 01:57:15.920 align:start position:0%
from somewhere else we don't know what
 

01:57:15.920 --> 01:57:17.669 align:start position:0%
from somewhere else we don't know what
it<01:57:16.080><c> is</c><01:57:16.239><c> at</c><01:57:16.320><c> the</c><01:57:16.480><c> time</c><01:57:16.639><c> of</c><01:57:16.800><c> writing</c><01:57:17.199><c> code</c>

01:57:17.669 --> 01:57:17.679 align:start position:0%
it is at the time of writing code
 

01:57:17.679 --> 01:57:20.790 align:start position:0%
it is at the time of writing code
okay<01:57:18.400><c> so</c><01:57:19.040><c> here</c><01:57:19.199><c> we</c><01:57:19.360><c> have</c><01:57:19.520><c> one</c><01:57:19.679><c> condition</c><01:57:20.480><c> let's</c>

01:57:20.790 --> 01:57:20.800 align:start position:0%
okay so here we have one condition let's
 

01:57:20.800 --> 01:57:21.910 align:start position:0%
okay so here we have one condition let's
write

01:57:21.910 --> 01:57:21.920 align:start position:0%
write
 

01:57:21.920 --> 01:57:25.109 align:start position:0%
write
another<01:57:22.239><c> condition</c><01:57:22.800><c> else</c><01:57:23.119><c> if</c><01:57:23.760><c> role</c><01:57:24.239><c> equals</c>

01:57:25.109 --> 01:57:25.119 align:start position:0%
another condition else if role equals
 

01:57:25.119 --> 01:57:27.510 align:start position:0%
another condition else if role equals
moderator<01:57:26.400><c> perhaps</c><01:57:26.800><c> we</c><01:57:26.880><c> want</c><01:57:27.040><c> to</c><01:57:27.119><c> display</c><01:57:27.440><c> a</c>

01:57:27.510 --> 01:57:27.520 align:start position:0%
moderator perhaps we want to display a
 

01:57:27.520 --> 01:57:29.830 align:start position:0%
moderator perhaps we want to display a
different<01:57:27.840><c> message</c>

01:57:29.830 --> 01:57:29.840 align:start position:0%
different message
 

01:57:29.840 --> 01:57:32.870 align:start position:0%
different message
so<01:57:30.000><c> you</c><01:57:30.239><c> are</c><01:57:30.960><c> a</c><01:57:31.119><c> moderator</c>

01:57:32.870 --> 01:57:32.880 align:start position:0%
so you are a moderator
 

01:57:32.880 --> 01:57:35.030 align:start position:0%
so you are a moderator
and<01:57:33.199><c> finally</c><01:57:33.599><c> if</c><01:57:33.760><c> the</c><01:57:34.000><c> role</c><01:57:34.320><c> is</c><01:57:34.480><c> none</c><01:57:34.719><c> of</c><01:57:34.800><c> these</c>

01:57:35.030 --> 01:57:35.040 align:start position:0%
and finally if the role is none of these
 

01:57:35.040 --> 01:57:37.350 align:start position:0%
and finally if the role is none of these
values<01:57:35.440><c> you</c><01:57:35.599><c> want</c><01:57:35.760><c> to</c><01:57:35.840><c> print</c>

01:57:37.350 --> 01:57:37.360 align:start position:0%
values you want to print
 

01:57:37.360 --> 01:57:40.550 align:start position:0%
values you want to print
you<01:57:37.599><c> are</c><01:57:38.239><c> a</c><01:57:38.480><c> guest</c><01:57:39.360><c> so</c><01:57:39.520><c> this</c><01:57:39.679><c> is</c><01:57:39.840><c> one</c><01:57:40.080><c> way</c><01:57:40.320><c> to</c>

01:57:40.550 --> 01:57:40.560 align:start position:0%
you are a guest so this is one way to
 

01:57:40.560 --> 01:57:41.189 align:start position:0%
you are a guest so this is one way to
implement

01:57:41.189 --> 01:57:41.199 align:start position:0%
implement
 

01:57:41.199 --> 01:57:43.589 align:start position:0%
implement
this<01:57:41.360><c> scenario</c><01:57:41.840><c> using</c><01:57:42.159><c> an</c><01:57:42.320><c> if</c><01:57:42.560><c> statement</c><01:57:43.440><c> we</c>

01:57:43.589 --> 01:57:43.599 align:start position:0%
this scenario using an if statement we
 

01:57:43.599 --> 01:57:45.350 align:start position:0%
this scenario using an if statement we
can<01:57:43.760><c> also</c><01:57:44.080><c> implement</c><01:57:44.480><c> this</c><01:57:44.639><c> using</c><01:57:44.880><c> a</c><01:57:44.960><c> switch</c>

01:57:45.350 --> 01:57:45.360 align:start position:0%
can also implement this using a switch
 

01:57:45.360 --> 01:57:46.470 align:start position:0%
can also implement this using a switch
statement<01:57:45.920><c> and</c>

01:57:46.470 --> 01:57:46.480 align:start position:0%
statement and
 

01:57:46.480 --> 01:57:48.070 align:start position:0%
statement and
sometimes<01:57:46.960><c> that</c><01:57:47.199><c> looks</c><01:57:47.599><c> a</c><01:57:47.679><c> little</c><01:57:47.840><c> bit</c>

01:57:48.070 --> 01:57:48.080 align:start position:0%
sometimes that looks a little bit
 

01:57:48.080 --> 01:57:49.669 align:start position:0%
sometimes that looks a little bit
cleaner<01:57:48.480><c> let</c><01:57:48.639><c> me</c><01:57:48.800><c> show</c><01:57:48.960><c> you</c>

01:57:49.669 --> 01:57:49.679 align:start position:0%
cleaner let me show you
 

01:57:49.679 --> 01:57:53.669 align:start position:0%
cleaner let me show you
so<01:57:50.560><c> we</c><01:57:50.800><c> start</c><01:57:51.520><c> with</c><01:57:51.760><c> a</c><01:57:51.840><c> switch</c><01:57:52.639><c> statement</c>

01:57:53.669 --> 01:57:53.679 align:start position:0%
so we start with a switch statement
 

01:57:53.679 --> 01:57:55.750 align:start position:0%
so we start with a switch statement
then<01:57:53.920><c> we</c><01:57:54.000><c> add</c><01:57:54.159><c> parentheses</c><01:57:55.040><c> and</c><01:57:55.280><c> inside</c><01:57:55.599><c> this</c>

01:57:55.750 --> 01:57:55.760 align:start position:0%
then we add parentheses and inside this
 

01:57:55.760 --> 01:57:56.709 align:start position:0%
then we add parentheses and inside this
parenthesis<01:57:56.239><c> we</c><01:57:56.400><c> add</c>

01:57:56.709 --> 01:57:56.719 align:start position:0%
parenthesis we add
 

01:57:56.719 --> 01:57:59.830 align:start position:0%
parenthesis we add
our<01:57:56.880><c> variable</c><01:57:57.520><c> in</c><01:57:57.599><c> this</c><01:57:57.840><c> case</c><01:57:58.159><c> row</c><01:57:59.119><c> next</c><01:57:59.679><c> we</c>

01:57:59.830 --> 01:57:59.840 align:start position:0%
our variable in this case row next we
 

01:57:59.840 --> 01:58:00.550 align:start position:0%
our variable in this case row next we
define

01:58:00.550 --> 01:58:00.560 align:start position:0%
define
 

01:58:00.560 --> 01:58:03.510 align:start position:0%
define
a<01:58:00.719><c> block</c><01:58:01.040><c> of</c><01:58:01.199><c> code</c><01:58:01.920><c> and</c><01:58:02.159><c> in</c><01:58:02.320><c> this</c><01:58:02.480><c> block</c><01:58:03.119><c> we</c><01:58:03.280><c> add</c>

01:58:03.510 --> 01:58:03.520 align:start position:0%
a block of code and in this block we add
 

01:58:03.520 --> 01:58:05.669 align:start position:0%
a block of code and in this block we add
one<01:58:03.760><c> or</c><01:58:04.000><c> more</c><01:58:04.239><c> case</c><01:58:04.639><c> clauses</c>

01:58:05.669 --> 01:58:05.679 align:start position:0%
one or more case clauses
 

01:58:05.679 --> 01:58:09.030 align:start position:0%
one or more case clauses
so<01:58:06.159><c> we</c><01:58:06.320><c> have</c><01:58:06.480><c> a</c><01:58:06.639><c> case</c><01:58:07.440><c> for</c><01:58:07.599><c> an</c><01:58:07.920><c> admin</c><01:58:08.639><c> we</c><01:58:08.880><c> had</c><01:58:08.960><c> a</c>

01:58:09.030 --> 01:58:09.040 align:start position:0%
so we have a case for an admin we had a
 

01:58:09.040 --> 01:58:10.229 align:start position:0%
so we have a case for an admin we had a
colon<01:58:09.440><c> here</c>

01:58:10.229 --> 01:58:10.239 align:start position:0%
colon here
 

01:58:10.239 --> 01:58:11.589 align:start position:0%
colon here
now<01:58:10.400><c> what</c><01:58:10.560><c> do</c><01:58:10.639><c> we</c><01:58:10.719><c> want</c><01:58:10.800><c> to</c><01:58:10.960><c> do</c><01:58:11.119><c> here</c><01:58:11.280><c> if</c><01:58:11.440><c> the</c>

01:58:11.589 --> 01:58:11.599 align:start position:0%
now what do we want to do here if the
 

01:58:11.599 --> 01:58:13.990 align:start position:0%
now what do we want to do here if the
role<01:58:12.000><c> is</c><01:58:12.320><c> admin</c><01:58:12.960><c> you</c><01:58:13.119><c> want</c><01:58:13.280><c> to</c><01:58:13.440><c> print</c>

01:58:13.990 --> 01:58:14.000 align:start position:0%
role is admin you want to print
 

01:58:14.000 --> 01:58:16.550 align:start position:0%
role is admin you want to print
you<01:58:14.159><c> are</c><01:58:14.320><c> an</c><01:58:14.480><c> admin</c><01:58:15.280><c> so</c><01:58:15.520><c> i'm</c><01:58:15.599><c> going</c><01:58:15.760><c> to</c><01:58:15.920><c> copy</c>

01:58:16.550 --> 01:58:16.560 align:start position:0%
you are an admin so i'm going to copy
 

01:58:16.560 --> 01:58:18.149 align:start position:0%
you are an admin so i'm going to copy
this<01:58:16.880><c> line</c><01:58:17.119><c> from</c><01:58:17.360><c> here</c>

01:58:18.149 --> 01:58:18.159 align:start position:0%
this line from here
 

01:58:18.159 --> 01:58:20.870 align:start position:0%
this line from here
and<01:58:18.320><c> then</c><01:58:18.480><c> paste</c><01:58:18.800><c> it</c><01:58:18.960><c> over</c><01:58:19.199><c> here</c><01:58:20.239><c> now</c><01:58:20.560><c> after</c>

01:58:20.870 --> 01:58:20.880 align:start position:0%
and then paste it over here now after
 

01:58:20.880 --> 01:58:22.229 align:start position:0%
and then paste it over here now after
this<01:58:21.040><c> line</c><01:58:21.280><c> we</c><01:58:21.360><c> need</c><01:58:21.520><c> to</c><01:58:21.679><c> add</c>

01:58:22.229 --> 01:58:22.239 align:start position:0%
this line we need to add
 

01:58:22.239 --> 01:58:24.709 align:start position:0%
this line we need to add
a<01:58:22.480><c> brick</c><01:58:22.880><c> statement</c><01:58:23.679><c> to</c><01:58:23.920><c> jump</c><01:58:24.320><c> out</c><01:58:24.480><c> of</c><01:58:24.560><c> this</c>

01:58:24.709 --> 01:58:24.719 align:start position:0%
a brick statement to jump out of this
 

01:58:24.719 --> 01:58:25.830 align:start position:0%
a brick statement to jump out of this
switch<01:58:25.119><c> block</c>

01:58:25.830 --> 01:58:25.840 align:start position:0%
switch block
 

01:58:25.840 --> 01:58:28.950 align:start position:0%
switch block
okay<01:58:26.719><c> then</c><01:58:26.960><c> we</c><01:58:27.119><c> add</c><01:58:27.520><c> another</c><01:58:27.840><c> case</c><01:58:28.159><c> class</c><01:58:28.639><c> so</c>

01:58:28.950 --> 01:58:28.960 align:start position:0%
okay then we add another case class so
 

01:58:28.960 --> 01:58:29.750 align:start position:0%
okay then we add another case class so
case

01:58:29.750 --> 01:58:29.760 align:start position:0%
case
 

01:58:29.760 --> 01:58:33.030 align:start position:0%
case
moderator<01:58:30.880><c> once</c><01:58:31.119><c> again</c><01:58:31.360><c> we</c><01:58:31.440><c> have</c><01:58:31.599><c> a</c><01:58:31.679><c> colon</c>

01:58:33.030 --> 01:58:33.040 align:start position:0%
moderator once again we have a colon
 

01:58:33.040 --> 01:58:35.589 align:start position:0%
moderator once again we have a colon
and<01:58:33.920><c> here</c><01:58:34.080><c> we're</c><01:58:34.239><c> going</c><01:58:34.320><c> to</c><01:58:34.400><c> print</c><01:58:35.119><c> this</c><01:58:35.360><c> other</c>

01:58:35.589 --> 01:58:35.599 align:start position:0%
and here we're going to print this other
 

01:58:35.599 --> 01:58:36.470 align:start position:0%
and here we're going to print this other
message

01:58:36.470 --> 01:58:36.480 align:start position:0%
message
 

01:58:36.480 --> 01:58:39.030 align:start position:0%
message
so<01:58:36.719><c> we</c><01:58:36.960><c> paste</c><01:58:37.199><c> it</c><01:58:37.360><c> here</c><01:58:38.159><c> and</c><01:58:38.320><c> then</c><01:58:38.719><c> we're</c><01:58:38.880><c> going</c>

01:58:39.030 --> 01:58:39.040 align:start position:0%
so we paste it here and then we're going
 

01:58:39.040 --> 01:58:40.870 align:start position:0%
so we paste it here and then we're going
to<01:58:39.119><c> break</c>

01:58:40.870 --> 01:58:40.880 align:start position:0%
to break
 

01:58:40.880 --> 01:58:43.350 align:start position:0%
to break
now<01:58:41.199><c> optionally</c><01:58:41.599><c> we</c><01:58:41.760><c> can</c><01:58:41.920><c> have</c><01:58:42.800><c> a</c><01:58:42.960><c> default</c>

01:58:43.350 --> 01:58:43.360 align:start position:0%
now optionally we can have a default
 

01:58:43.360 --> 01:58:44.149 align:start position:0%
now optionally we can have a default
clause<01:58:43.679><c> here</c>

01:58:44.149 --> 01:58:44.159 align:start position:0%
clause here
 

01:58:44.159 --> 01:58:46.470 align:start position:0%
clause here
so<01:58:44.400><c> if</c><01:58:44.560><c> none</c><01:58:44.719><c> of</c><01:58:44.800><c> these</c><01:58:44.960><c> previous</c><01:58:45.360><c> cases</c><01:58:45.760><c> apply</c>

01:58:46.470 --> 01:58:46.480 align:start position:0%
so if none of these previous cases apply
 

01:58:46.480 --> 01:58:47.910 align:start position:0%
so if none of these previous cases apply
the<01:58:46.719><c> code</c><01:58:46.880><c> that</c><01:58:47.040><c> we</c><01:58:47.199><c> write</c><01:58:47.440><c> in</c><01:58:47.520><c> this</c><01:58:47.679><c> section</c>

01:58:47.910 --> 01:58:47.920 align:start position:0%
the code that we write in this section
 

01:58:47.920 --> 01:58:49.030 align:start position:0%
the code that we write in this section
will<01:58:48.080><c> be</c><01:58:48.239><c> executed</c>

01:58:49.030 --> 01:58:49.040 align:start position:0%
will be executed
 

01:58:49.040 --> 01:58:53.030 align:start position:0%
will be executed
so<01:58:49.199><c> here</c><01:58:49.360><c> we</c><01:58:49.520><c> want</c><01:58:49.599><c> to</c><01:58:49.760><c> print</c><01:58:51.360><c> you</c><01:58:51.599><c> are</c><01:58:51.840><c> a</c><01:58:52.080><c> guest</c>

01:58:53.030 --> 01:58:53.040 align:start position:0%
so here we want to print you are a guest
 

01:58:53.040 --> 01:58:54.629 align:start position:0%
so here we want to print you are a guest
now<01:58:53.280><c> here</c><01:58:53.440><c> we</c><01:58:53.520><c> don't</c><01:58:53.679><c> need</c><01:58:53.840><c> to</c><01:58:53.920><c> use</c><01:58:54.159><c> a</c><01:58:54.239><c> brick</c>

01:58:54.629 --> 01:58:54.639 align:start position:0%
now here we don't need to use a brick
 

01:58:54.639 --> 01:58:56.390 align:start position:0%
now here we don't need to use a brick
statement<01:58:55.360><c> because</c><01:58:55.599><c> we're</c><01:58:55.840><c> at</c><01:58:55.920><c> the</c><01:58:56.159><c> end</c><01:58:56.320><c> of</c>

01:58:56.390 --> 01:58:56.400 align:start position:0%
statement because we're at the end of
 

01:58:56.400 --> 01:58:57.589 align:start position:0%
statement because we're at the end of
the<01:58:56.560><c> switch</c><01:58:56.880><c> block</c>

01:58:57.589 --> 01:58:57.599 align:start position:0%
the switch block
 

01:58:57.599 --> 01:58:59.669 align:start position:0%
the switch block
so<01:58:57.840><c> we'll</c><01:58:58.159><c> automatically</c><01:58:58.800><c> jump</c><01:58:59.199><c> out</c><01:58:59.360><c> of</c><01:58:59.440><c> this</c>

01:58:59.669 --> 01:58:59.679 align:start position:0%
so we'll automatically jump out of this
 

01:58:59.679 --> 01:59:00.629 align:start position:0%
so we'll automatically jump out of this
block

01:59:00.629 --> 01:59:00.639 align:start position:0%
block
 

01:59:00.639 --> 01:59:03.030 align:start position:0%
block
in<01:59:00.800><c> contrast</c><01:59:01.679><c> if</c><01:59:01.840><c> we</c><01:59:02.000><c> didn't</c><01:59:02.239><c> use</c><01:59:02.560><c> this</c><01:59:02.719><c> break</c>

01:59:03.030 --> 01:59:03.040 align:start position:0%
in contrast if we didn't use this break
 

01:59:03.040 --> 01:59:04.149 align:start position:0%
in contrast if we didn't use this break
statement<01:59:03.520><c> here</c>

01:59:04.149 --> 01:59:04.159 align:start position:0%
statement here
 

01:59:04.159 --> 01:59:06.229 align:start position:0%
statement here
java<01:59:04.480><c> will</c><01:59:04.639><c> continue</c><01:59:05.199><c> executing</c><01:59:05.679><c> these</c><01:59:06.000><c> other</c>

01:59:06.229 --> 01:59:06.239 align:start position:0%
java will continue executing these other
 

01:59:06.239 --> 01:59:08.070 align:start position:0%
java will continue executing these other
lines<01:59:06.480><c> here</c><01:59:06.719><c> so</c><01:59:06.880><c> if</c><01:59:06.960><c> the</c><01:59:07.119><c> role</c><01:59:07.280><c> is</c><01:59:07.520><c> admin</c>

01:59:08.070 --> 01:59:08.080 align:start position:0%
lines here so if the role is admin
 

01:59:08.080 --> 01:59:10.149 align:start position:0%
lines here so if the role is admin
first<01:59:08.400><c> it</c><01:59:08.560><c> will</c><01:59:08.719><c> execute</c><01:59:09.119><c> this</c><01:59:09.360><c> line</c><01:59:09.840><c> and</c><01:59:09.920><c> then</c>

01:59:10.149 --> 01:59:10.159 align:start position:0%
first it will execute this line and then
 

01:59:10.159 --> 01:59:12.070 align:start position:0%
first it will execute this line and then
it<01:59:10.239><c> will</c><01:59:10.480><c> jump</c><01:59:10.880><c> to</c><01:59:11.040><c> this</c><01:59:11.199><c> case</c><01:59:11.520><c> block</c>

01:59:12.070 --> 01:59:12.080 align:start position:0%
it will jump to this case block
 

01:59:12.080 --> 01:59:14.229 align:start position:0%
it will jump to this case block
it<01:59:12.239><c> will</c><01:59:12.480><c> execute</c><01:59:12.800><c> this</c><01:59:13.040><c> other</c><01:59:13.280><c> line</c><01:59:13.520><c> and</c><01:59:13.679><c> then</c>

01:59:14.229 --> 01:59:14.239 align:start position:0%
it will execute this other line and then
 

01:59:14.239 --> 01:59:16.229 align:start position:0%
it will execute this other line and then
after<01:59:14.639><c> it</c><01:59:14.800><c> executes</c><01:59:15.280><c> this</c><01:59:15.440><c> break</c><01:59:15.760><c> statement</c>

01:59:16.229 --> 01:59:16.239 align:start position:0%
after it executes this break statement
 

01:59:16.239 --> 01:59:18.149 align:start position:0%
after it executes this break statement
it<01:59:16.320><c> will</c><01:59:16.560><c> jump</c><01:59:16.880><c> out</c><01:59:17.040><c> of</c><01:59:17.119><c> the</c><01:59:17.280><c> switch</c><01:59:17.599><c> block</c>

01:59:18.149 --> 01:59:18.159 align:start position:0%
it will jump out of the switch block
 

01:59:18.159 --> 01:59:21.669 align:start position:0%
it will jump out of the switch block
okay<01:59:19.199><c> so</c><01:59:19.760><c> this</c><01:59:20.000><c> is</c><01:59:20.159><c> how</c><01:59:20.719><c> we</c><01:59:20.880><c> use</c><01:59:21.199><c> a</c><01:59:21.360><c> switch</c>

01:59:21.669 --> 01:59:21.679 align:start position:0%
okay so this is how we use a switch
 

01:59:21.679 --> 01:59:22.709 align:start position:0%
okay so this is how we use a switch
statement

01:59:22.709 --> 01:59:22.719 align:start position:0%
statement
 

01:59:22.719 --> 01:59:26.390 align:start position:0%
statement
now<01:59:22.960><c> compare</c><01:59:23.440><c> this</c><01:59:23.840><c> with</c><01:59:25.280><c> the</c><01:59:25.360><c> if</c><01:59:25.599><c> statement</c>

01:59:26.390 --> 01:59:26.400 align:start position:0%
now compare this with the if statement
 

01:59:26.400 --> 01:59:28.229 align:start position:0%
now compare this with the if statement
some<01:59:26.639><c> people</c><01:59:26.880><c> prefer</c><01:59:27.199><c> to</c><01:59:27.280><c> use</c><01:59:27.440><c> if</c><01:59:27.679><c> statements</c>

01:59:28.229 --> 01:59:28.239 align:start position:0%
some people prefer to use if statements
 

01:59:28.239 --> 01:59:29.510 align:start position:0%
some people prefer to use if statements
others<01:59:28.639><c> prefer</c><01:59:28.960><c> to</c><01:59:29.119><c> use</c>

01:59:29.510 --> 01:59:29.520 align:start position:0%
others prefer to use
 

01:59:29.520 --> 01:59:31.990 align:start position:0%
others prefer to use
a<01:59:29.679><c> sweet</c><01:59:29.920><c> statement</c><01:59:31.280><c> now</c><01:59:31.520><c> one</c><01:59:31.679><c> more</c><01:59:31.840><c> thing</c>

01:59:31.990 --> 01:59:32.000 align:start position:0%
a sweet statement now one more thing
 

01:59:32.000 --> 01:59:33.510 align:start position:0%
a sweet statement now one more thing
before<01:59:32.159><c> i</c><01:59:32.239><c> finish</c><01:59:32.480><c> this</c><01:59:32.639><c> tutorial</c>

01:59:33.510 --> 01:59:33.520 align:start position:0%
before i finish this tutorial
 

01:59:33.520 --> 01:59:35.430 align:start position:0%
before i finish this tutorial
here<01:59:33.679><c> we're</c><01:59:33.920><c> comparing</c><01:59:34.320><c> the</c><01:59:34.480><c> value</c><01:59:34.800><c> of</c><01:59:34.960><c> roll</c>

01:59:35.430 --> 01:59:35.440 align:start position:0%
here we're comparing the value of roll
 

01:59:35.440 --> 01:59:37.510 align:start position:0%
here we're comparing the value of roll
with<01:59:35.760><c> strings</c><01:59:36.400><c> but</c><01:59:36.560><c> we</c><01:59:36.719><c> could</c><01:59:36.960><c> also</c><01:59:37.199><c> use</c>

01:59:37.510 --> 01:59:37.520 align:start position:0%
with strings but we could also use
 

01:59:37.520 --> 01:59:39.270 align:start position:0%
with strings but we could also use
integers<01:59:38.159><c> other</c><01:59:38.400><c> than</c><01:59:38.639><c> the</c><01:59:38.880><c> long</c>

01:59:39.270 --> 01:59:39.280 align:start position:0%
integers other than the long
 

01:59:39.280 --> 01:59:42.550 align:start position:0%
integers other than the long
type<01:59:39.840><c> so</c><01:59:40.080><c> if</c><01:59:40.239><c> roll</c><01:59:40.480><c> was</c><01:59:40.639><c> a</c><01:59:40.800><c> byte</c><01:59:41.440><c> a</c><01:59:41.599><c> short</c><01:59:42.080><c> or</c><01:59:42.320><c> an</c>

01:59:42.550 --> 01:59:42.560 align:start position:0%
type so if roll was a byte a short or an
 

01:59:42.560 --> 01:59:45.109 align:start position:0%
type so if roll was a byte a short or an
integer<01:59:43.199><c> our</c><01:59:43.440><c> cases</c><01:59:43.840><c> would</c><01:59:44.000><c> look</c><01:59:44.159><c> like</c><01:59:44.400><c> this</c>

01:59:45.109 --> 01:59:45.119 align:start position:0%
integer our cases would look like this
 

01:59:45.119 --> 01:59:46.149 align:start position:0%
integer our cases would look like this
case<01:59:45.520><c> 1</c>

01:59:46.149 --> 01:59:46.159 align:start position:0%
case 1
 

01:59:46.159 --> 01:59:49.589 align:start position:0%
case 1
case<01:59:46.560><c> 2</c><01:59:47.599><c> and</c><01:59:48.639><c> so</c><01:59:48.800><c> on</c>

01:59:49.589 --> 01:59:49.599 align:start position:0%
case 2 and so on
 

01:59:49.599 --> 01:59:50.950 align:start position:0%
case 2 and so on
now<01:59:49.760><c> here</c><01:59:49.920><c> we</c><01:59:50.080><c> have</c><01:59:50.159><c> a</c><01:59:50.239><c> compilation</c><01:59:50.719><c> error</c>

01:59:50.950 --> 01:59:50.960 align:start position:0%
now here we have a compilation error
 

01:59:50.960 --> 01:59:52.709 align:start position:0%
now here we have a compilation error
because<01:59:51.360><c> roll</c><01:59:51.760><c> is</c><01:59:51.920><c> a</c><01:59:52.080><c> string</c>

01:59:52.709 --> 01:59:52.719 align:start position:0%
because roll is a string
 

01:59:52.719 --> 01:59:55.990 align:start position:0%
because roll is a string
let's<01:59:53.040><c> change</c><01:59:53.360><c> this</c><01:59:53.679><c> to</c><01:59:54.560><c> an</c><01:59:54.800><c> integer</c>

01:59:55.990 --> 01:59:56.000 align:start position:0%
let's change this to an integer
 

01:59:56.000 --> 01:59:59.350 align:start position:0%
let's change this to an integer
and<01:59:56.080><c> we</c><01:59:56.239><c> can</c><01:59:56.400><c> initialize</c><01:59:56.960><c> this</c><01:59:57.360><c> to</c><01:59:57.840><c> one</c><01:59:58.960><c> so</c><01:59:59.199><c> as</c>

01:59:59.350 --> 01:59:59.360 align:start position:0%
and we can initialize this to one so as
 

01:59:59.360 --> 02:00:00.070 align:start position:0%
and we can initialize this to one so as
you<01:59:59.440><c> can</c><01:59:59.599><c> see</c>

02:00:00.070 --> 02:00:00.080 align:start position:0%
you can see
 

02:00:00.080 --> 02:00:01.910 align:start position:0%
you can see
with<02:00:00.320><c> sweet</c><02:00:00.639><c> statements</c><02:00:01.119><c> we</c><02:00:01.280><c> can</c><02:00:01.440><c> execute</c>

02:00:01.910 --> 02:00:01.920 align:start position:0%
with sweet statements we can execute
 

02:00:01.920 --> 02:00:04.149 align:start position:0%
with sweet statements we can execute
different<02:00:02.239><c> code</c><02:00:02.800><c> depending</c><02:00:03.440><c> on</c><02:00:03.520><c> the</c><02:00:03.760><c> value</c><02:00:04.080><c> of</c>

02:00:04.149 --> 02:00:04.159 align:start position:0%
different code depending on the value of
 

02:00:04.159 --> 02:00:11.030 align:start position:0%
different code depending on the value of
an<02:00:04.320><c> expression</c>

02:00:11.030 --> 02:00:11.040 align:start position:0%
 
 

02:00:11.040 --> 02:00:12.950 align:start position:0%
 
all<02:00:11.199><c> right</c><02:00:11.280><c> now</c><02:00:11.440><c> it's</c><02:00:11.599><c> time</c><02:00:11.760><c> for</c><02:00:11.920><c> an</c><02:00:12.000><c> exercise</c>

02:00:12.950 --> 02:00:12.960 align:start position:0%
all right now it's time for an exercise
 

02:00:12.960 --> 02:00:14.709 align:start position:0%
all right now it's time for an exercise
this<02:00:13.199><c> exercise</c><02:00:13.679><c> i'm</c><02:00:13.760><c> going</c><02:00:13.840><c> to</c><02:00:13.920><c> give</c><02:00:14.080><c> you</c><02:00:14.320><c> is</c><02:00:14.480><c> a</c>

02:00:14.709 --> 02:00:14.719 align:start position:0%
this exercise i'm going to give you is a
 

02:00:14.719 --> 02:00:15.350 align:start position:0%
this exercise i'm going to give you is a
popular

02:00:15.350 --> 02:00:15.360 align:start position:0%
popular
 

02:00:15.360 --> 02:00:17.430 align:start position:0%
popular
interview<02:00:15.920><c> question</c><02:00:16.800><c> so</c><02:00:16.960><c> i</c><02:00:17.040><c> want</c><02:00:17.199><c> you</c><02:00:17.360><c> to</c>

02:00:17.430 --> 02:00:17.440 align:start position:0%
interview question so i want you to
 

02:00:17.440 --> 02:00:19.750 align:start position:0%
interview question so i want you to
write<02:00:17.679><c> a</c><02:00:17.760><c> program</c><02:00:18.159><c> that</c><02:00:18.400><c> behaves</c><02:00:18.800><c> like</c><02:00:19.040><c> this</c>

02:00:19.750 --> 02:00:19.760 align:start position:0%
write a program that behaves like this
 

02:00:19.760 --> 02:00:21.750 align:start position:0%
write a program that behaves like this
here<02:00:19.920><c> we</c><02:00:20.080><c> should</c><02:00:20.320><c> enter</c><02:00:20.560><c> a</c><02:00:20.639><c> number</c><02:00:21.440><c> if</c><02:00:21.599><c> this</c>

02:00:21.750 --> 02:00:21.760 align:start position:0%
here we should enter a number if this
 

02:00:21.760 --> 02:00:23.189 align:start position:0%
here we should enter a number if this
number<02:00:22.080><c> is</c><02:00:22.320><c> divisible</c><02:00:22.880><c> by</c>

02:00:23.189 --> 02:00:23.199 align:start position:0%
number is divisible by
 

02:00:23.199 --> 02:00:26.470 align:start position:0%
number is divisible by
5<02:00:24.719><c> we</c><02:00:24.880><c> get</c><02:00:25.119><c> fizz</c><02:00:26.000><c> so</c>

02:00:26.470 --> 02:00:26.480 align:start position:0%
5 we get fizz so
 

02:00:26.480 --> 02:00:29.350 align:start position:0%
5 we get fizz so
if<02:00:26.560><c> you</c><02:00:26.719><c> run</c><02:00:26.880><c> the</c><02:00:26.960><c> program</c><02:00:27.360><c> again</c><02:00:27.840><c> and</c><02:00:28.639><c> enter</c>

02:00:29.350 --> 02:00:29.360 align:start position:0%
if you run the program again and enter
 

02:00:29.360 --> 02:00:30.070 align:start position:0%
if you run the program again and enter
10

02:00:30.070 --> 02:00:30.080 align:start position:0%
10
 

02:00:30.080 --> 02:00:32.790 align:start position:0%
10
once<02:00:30.320><c> again</c><02:00:30.560><c> we</c><02:00:30.719><c> get</c><02:00:30.960><c> fit</c><02:00:31.920><c> now</c><02:00:32.159><c> if</c><02:00:32.320><c> this</c><02:00:32.480><c> number</c>

02:00:32.790 --> 02:00:32.800 align:start position:0%
once again we get fit now if this number
 

02:00:32.800 --> 02:00:34.870 align:start position:0%
once again we get fit now if this number
is<02:00:32.960><c> divisible</c><02:00:33.440><c> by</c><02:00:33.760><c> 3</c>

02:00:34.870 --> 02:00:34.880 align:start position:0%
is divisible by 3
 

02:00:34.880 --> 02:00:37.669 align:start position:0%
is divisible by 3
we<02:00:35.040><c> get</c><02:00:35.360><c> buzz</c><02:00:36.480><c> if</c><02:00:36.639><c> this</c><02:00:36.800><c> number</c><02:00:37.119><c> is</c><02:00:37.199><c> divisible</c>

02:00:37.669 --> 02:00:37.679 align:start position:0%
we get buzz if this number is divisible
 

02:00:37.679 --> 02:00:38.390 align:start position:0%
we get buzz if this number is divisible
by<02:00:38.000><c> both</c>

02:00:38.390 --> 02:00:38.400 align:start position:0%
by both
 

02:00:38.400 --> 02:00:42.310 align:start position:0%
by both
5<02:00:38.719><c> and</c><02:00:38.960><c> 3</c><02:00:39.599><c> like</c><02:00:39.840><c> 15</c><02:00:40.400><c> or</c><02:00:40.800><c> 30</c><02:00:41.199><c> or</c><02:00:41.360><c> whatever</c>

02:00:42.310 --> 02:00:42.320 align:start position:0%
5 and 3 like 15 or 30 or whatever
 

02:00:42.320 --> 02:00:45.750 align:start position:0%
5 and 3 like 15 or 30 or whatever
we<02:00:42.480><c> get</c><02:00:42.719><c> fizz</c><02:00:43.040><c> buzz</c><02:00:43.760><c> and</c><02:00:44.880><c> if</c><02:00:45.040><c> this</c><02:00:45.199><c> number</c><02:00:45.520><c> is</c>

02:00:45.750 --> 02:00:45.760 align:start position:0%
we get fizz buzz and if this number is
 

02:00:45.760 --> 02:00:48.149 align:start position:0%
we get fizz buzz and if this number is
not<02:00:46.000><c> divisible</c><02:00:46.480><c> by</c><02:00:46.800><c> 5</c><02:00:47.119><c> or</c><02:00:47.360><c> 3</c>

02:00:48.149 --> 02:00:48.159 align:start position:0%
not divisible by 5 or 3
 

02:00:48.159 --> 02:00:51.350 align:start position:0%
not divisible by 5 or 3
like<02:00:48.400><c> 2</c><02:00:49.920><c> we</c><02:00:50.080><c> get</c><02:00:50.239><c> the</c><02:00:50.400><c> same</c><02:00:50.719><c> number</c>

02:00:51.350 --> 02:00:51.360 align:start position:0%
like 2 we get the same number
 

02:00:51.360 --> 02:00:53.589 align:start position:0%
like 2 we get the same number
printed<02:00:51.840><c> on</c><02:00:51.920><c> the</c><02:00:52.000><c> terminal</c><02:00:52.960><c> so</c><02:00:53.119><c> go</c><02:00:53.280><c> ahead</c><02:00:53.520><c> and</c>

02:00:53.589 --> 02:00:53.599 align:start position:0%
printed on the terminal so go ahead and
 

02:00:53.599 --> 02:00:55.270 align:start position:0%
printed on the terminal so go ahead and
spend<02:00:54.159><c> five</c><02:00:54.400><c> to</c><02:00:54.560><c> ten</c><02:00:54.719><c> minutes</c><02:00:54.960><c> on</c><02:00:55.119><c> this</c>

02:00:55.270 --> 02:00:55.280 align:start position:0%
spend five to ten minutes on this
 

02:00:55.280 --> 02:01:01.910 align:start position:0%
spend five to ten minutes on this
exercise<02:00:55.840><c> you</c><02:00:56.000><c> will</c><02:00:56.080><c> see</c><02:00:56.320><c> my</c><02:00:56.480><c> solution</c><02:00:56.960><c> next</c>

02:01:01.910 --> 02:01:01.920 align:start position:0%
 
 

02:01:01.920 --> 02:01:03.350 align:start position:0%
 
all<02:01:02.080><c> right</c><02:01:02.239><c> to</c><02:01:02.320><c> read</c><02:01:02.480><c> the</c><02:01:02.560><c> number</c><02:01:03.040><c> first</c><02:01:03.280><c> we</c>

02:01:03.350 --> 02:01:03.360 align:start position:0%
all right to read the number first we
 

02:01:03.360 --> 02:01:05.350 align:start position:0%
all right to read the number first we
need<02:01:03.520><c> to</c><02:01:03.599><c> use</c><02:01:03.760><c> the</c><02:01:03.920><c> scanner</c><02:01:04.480><c> object</c>

02:01:05.350 --> 02:01:05.360 align:start position:0%
need to use the scanner object
 

02:01:05.360 --> 02:01:08.470 align:start position:0%
need to use the scanner object
so<02:01:05.679><c> scanner</c><02:01:06.560><c> we</c><02:01:06.800><c> import</c><02:01:07.119><c> this</c>

02:01:08.470 --> 02:01:08.480 align:start position:0%
so scanner we import this
 

02:01:08.480 --> 02:01:11.669 align:start position:0%
so scanner we import this
and<02:01:08.960><c> instantiate</c><02:01:09.760><c> it</c><02:01:10.800><c> and</c><02:01:10.960><c> as</c><02:01:11.119><c> you</c><02:01:11.199><c> know</c><02:01:11.440><c> here</c>

02:01:11.669 --> 02:01:11.679 align:start position:0%
and instantiate it and as you know here
 

02:01:11.679 --> 02:01:13.669 align:start position:0%
and instantiate it and as you know here
we<02:01:11.760><c> need</c><02:01:11.920><c> to</c><02:01:12.000><c> pass</c><02:01:12.280><c> system.in</c>

02:01:13.669 --> 02:01:13.679 align:start position:0%
we need to pass system.in
 

02:01:13.679 --> 02:01:16.870 align:start position:0%
we need to pass system.in
to<02:01:13.840><c> read</c><02:01:14.080><c> data</c><02:01:14.960><c> from</c><02:01:15.199><c> the</c><02:01:15.280><c> terminal</c><02:01:16.560><c> now</c><02:01:16.719><c> we</c>

02:01:16.870 --> 02:01:16.880 align:start position:0%
to read data from the terminal now we
 

02:01:16.880 --> 02:01:18.950 align:start position:0%
to read data from the terminal now we
print<02:01:17.199><c> a</c><02:01:17.280><c> message</c>

02:01:18.950 --> 02:01:18.960 align:start position:0%
print a message
 

02:01:18.960 --> 02:01:20.870 align:start position:0%
print a message
so<02:01:19.440><c> we're</c><02:01:19.599><c> going</c><02:01:19.679><c> to</c><02:01:19.760><c> use</c><02:01:20.000><c> the</c><02:01:20.159><c> print</c><02:01:20.480><c> method</c>

02:01:20.870 --> 02:01:20.880 align:start position:0%
so we're going to use the print method
 

02:01:20.880 --> 02:01:22.629 align:start position:0%
so we're going to use the print method
instead<02:01:21.119><c> of</c><02:01:21.280><c> print</c><02:01:21.599><c> line</c>

02:01:22.629 --> 02:01:22.639 align:start position:0%
instead of print line
 

02:01:22.639 --> 02:01:26.310 align:start position:0%
instead of print line
here<02:01:22.880><c> we</c><02:01:23.040><c> add</c><02:01:23.199><c> a</c><02:01:23.280><c> label</c><02:01:23.599><c> like</c><02:01:23.840><c> number</c><02:01:25.199><c> and</c><02:01:25.360><c> then</c>

02:01:26.310 --> 02:01:26.320 align:start position:0%
here we add a label like number and then
 

02:01:26.320 --> 02:01:29.669 align:start position:0%
here we add a label like number and then
we<02:01:26.480><c> call</c><02:01:26.800><c> scanner</c><02:01:27.360><c> the</c><02:01:27.599><c> next</c><02:01:28.239><c> end</c><02:01:28.800><c> to</c><02:01:29.040><c> read</c>

02:01:29.669 --> 02:01:29.679 align:start position:0%
we call scanner the next end to read
 

02:01:29.679 --> 02:01:32.629 align:start position:0%
we call scanner the next end to read
a<02:01:29.840><c> number</c><02:01:31.360><c> we</c><02:01:31.520><c> store</c><02:01:31.760><c> it</c><02:01:31.920><c> in</c><02:01:32.000><c> this</c><02:01:32.159><c> variable</c>

02:01:32.629 --> 02:01:32.639 align:start position:0%
a number we store it in this variable
 

02:01:32.639 --> 02:01:33.270 align:start position:0%
a number we store it in this variable
number

02:01:33.270 --> 02:01:33.280 align:start position:0%
number
 

02:01:33.280 --> 02:01:36.149 align:start position:0%
number
okay<02:01:33.920><c> so</c><02:01:34.080><c> the</c><02:01:34.159><c> first</c><02:01:34.400><c> part</c><02:01:34.719><c> is</c><02:01:34.960><c> done</c><02:01:35.840><c> now</c><02:01:36.000><c> we</c>

02:01:36.149 --> 02:01:36.159 align:start position:0%
okay so the first part is done now we
 

02:01:36.159 --> 02:01:37.830 align:start position:0%
okay so the first part is done now we
need<02:01:36.239><c> to</c><02:01:36.400><c> check</c><02:01:36.639><c> to</c><02:01:36.800><c> see</c><02:01:36.960><c> if</c><02:01:37.119><c> this</c><02:01:37.280><c> number</c><02:01:37.679><c> is</c>

02:01:37.830 --> 02:01:37.840 align:start position:0%
need to check to see if this number is
 

02:01:37.840 --> 02:01:39.910 align:start position:0%
need to check to see if this number is
divisible<02:01:38.400><c> by</c><02:01:38.639><c> 5</c><02:01:38.960><c> or</c><02:01:39.199><c> not</c>

02:01:39.910 --> 02:01:39.920 align:start position:0%
divisible by 5 or not
 

02:01:39.920 --> 02:01:41.589 align:start position:0%
divisible by 5 or not
so<02:01:40.159><c> we</c><02:01:40.239><c> can</c><02:01:40.400><c> write</c><02:01:40.639><c> an</c><02:01:40.880><c> if</c><02:01:41.040><c> statement</c><02:01:41.440><c> like</c>

02:01:41.589 --> 02:01:41.599 align:start position:0%
so we can write an if statement like
 

02:01:41.599 --> 02:01:43.910 align:start position:0%
so we can write an if statement like
this<02:01:42.159><c> if</c><02:01:42.400><c> number</c>

02:01:43.910 --> 02:01:43.920 align:start position:0%
this if number
 

02:01:43.920 --> 02:01:45.910 align:start position:0%
this if number
here<02:01:44.080><c> we</c><02:01:44.159><c> use</c><02:01:44.320><c> the</c><02:01:44.560><c> modulus</c><02:01:45.199><c> operator</c><02:01:45.679><c> which</c>

02:01:45.910 --> 02:01:45.920 align:start position:0%
here we use the modulus operator which
 

02:01:45.920 --> 02:01:48.229 align:start position:0%
here we use the modulus operator which
returns<02:01:46.480><c> the</c><02:01:46.639><c> remainder</c><02:01:47.119><c> of</c><02:01:47.280><c> a</c><02:01:47.360><c> division</c>

02:01:48.229 --> 02:01:48.239 align:start position:0%
returns the remainder of a division
 

02:01:48.239 --> 02:01:50.229 align:start position:0%
returns the remainder of a division
so<02:01:48.400><c> we</c><02:01:48.560><c> divide</c><02:01:48.880><c> this</c><02:01:49.040><c> by</c><02:01:49.280><c> five</c><02:01:49.840><c> and</c><02:01:50.000><c> if</c><02:01:50.080><c> the</c>

02:01:50.229 --> 02:01:50.239 align:start position:0%
so we divide this by five and if the
 

02:01:50.239 --> 02:01:51.270 align:start position:0%
so we divide this by five and if the
remainder

02:01:51.270 --> 02:01:51.280 align:start position:0%
remainder
 

02:01:51.280 --> 02:01:53.990 align:start position:0%
remainder
equals<02:01:52.159><c> zero</c><02:01:52.880><c> that</c><02:01:53.119><c> means</c><02:01:53.360><c> this</c><02:01:53.520><c> number</c><02:01:53.840><c> is</c>

02:01:53.990 --> 02:01:54.000 align:start position:0%
equals zero that means this number is
 

02:01:54.000 --> 02:01:55.430 align:start position:0%
equals zero that means this number is
divisible<02:01:54.560><c> by</c><02:01:54.800><c> five</c>

02:01:55.430 --> 02:01:55.440 align:start position:0%
divisible by five
 

02:01:55.440 --> 02:01:59.430 align:start position:0%
divisible by five
so<02:01:55.599><c> we</c><02:01:55.840><c> print</c><02:01:57.679><c> fizz</c>

02:01:59.430 --> 02:01:59.440 align:start position:0%
so we print fizz
 

02:01:59.440 --> 02:02:03.270 align:start position:0%
so we print fizz
now<02:02:02.400><c> otherwise</c>

02:02:03.270 --> 02:02:03.280 align:start position:0%
now otherwise
 

02:02:03.280 --> 02:02:06.629 align:start position:0%
now otherwise
if<02:02:03.440><c> this</c><02:02:03.599><c> number</c><02:02:04.080><c> is</c><02:02:04.639><c> divisible</c><02:02:05.199><c> by</c><02:02:05.520><c> three</c>

02:02:06.629 --> 02:02:06.639 align:start position:0%
if this number is divisible by three
 

02:02:06.639 --> 02:02:09.669 align:start position:0%
if this number is divisible by three
we<02:02:06.880><c> print</c><02:02:07.920><c> buzz</c>

02:02:09.669 --> 02:02:09.679 align:start position:0%
we print buzz
 

02:02:09.679 --> 02:02:12.070 align:start position:0%
we print buzz
we<02:02:09.840><c> need</c><02:02:10.080><c> another</c><02:02:10.400><c> condition</c><02:02:11.360><c> if</c><02:02:11.520><c> this</c><02:02:11.679><c> number</c>

02:02:12.070 --> 02:02:12.080 align:start position:0%
we need another condition if this number
 

02:02:12.080 --> 02:02:12.870 align:start position:0%
we need another condition if this number
is

02:02:12.870 --> 02:02:12.880 align:start position:0%
is
 

02:02:12.880 --> 02:02:16.310 align:start position:0%
is
divisible<02:02:13.440><c> by</c><02:02:13.679><c> five</c><02:02:15.679><c> and</c>

02:02:16.310 --> 02:02:16.320 align:start position:0%
divisible by five and
 

02:02:16.320 --> 02:02:18.790 align:start position:0%
divisible by five and
three<02:02:16.719><c> so</c><02:02:16.880><c> here</c><02:02:17.040><c> we</c><02:02:17.119><c> use</c><02:02:17.199><c> the</c><02:02:17.360><c> and</c><02:02:17.599><c> operator</c>

02:02:18.790 --> 02:02:18.800 align:start position:0%
three so here we use the and operator
 

02:02:18.800 --> 02:02:21.589 align:start position:0%
three so here we use the and operator
number<02:02:19.119><c> divisible</c><02:02:19.679><c> by</c><02:02:19.920><c> three</c><02:02:20.239><c> equals</c><02:02:20.560><c> zero</c>

02:02:21.589 --> 02:02:21.599 align:start position:0%
number divisible by three equals zero
 

02:02:21.599 --> 02:02:25.669 align:start position:0%
number divisible by three equals zero
in<02:02:21.679><c> this</c><02:02:21.840><c> case</c><02:02:22.000><c> we</c><02:02:22.080><c> want</c><02:02:22.239><c> to</c><02:02:22.320><c> print</c><02:02:23.119><c> fizz</c><02:02:24.159><c> buzz</c>

02:02:25.669 --> 02:02:25.679 align:start position:0%
in this case we want to print fizz buzz
 

02:02:25.679 --> 02:02:28.470 align:start position:0%
in this case we want to print fizz buzz
otherwise<02:02:26.639><c> we</c><02:02:26.800><c> want</c><02:02:26.960><c> to</c><02:02:27.040><c> print</c><02:02:28.080><c> the</c><02:02:28.239><c> same</c>

02:02:28.470 --> 02:02:28.480 align:start position:0%
otherwise we want to print the same
 

02:02:28.480 --> 02:02:29.350 align:start position:0%
otherwise we want to print the same
number

02:02:29.350 --> 02:02:29.360 align:start position:0%
number
 

02:02:29.360 --> 02:02:31.270 align:start position:0%
number
like<02:02:29.599><c> this</c><02:02:30.320><c> now</c><02:02:30.480><c> this</c><02:02:30.639><c> is</c><02:02:30.719><c> not</c><02:02:30.880><c> the</c><02:02:31.040><c> right</c>

02:02:31.270 --> 02:02:31.280 align:start position:0%
like this now this is not the right
 

02:02:31.280 --> 02:02:33.270 align:start position:0%
like this now this is not the right
solution<02:02:32.080><c> as</c><02:02:32.320><c> i</c><02:02:32.400><c> will</c><02:02:32.480><c> show</c><02:02:32.639><c> you</c><02:02:32.719><c> in</c><02:02:32.800><c> a</c><02:02:32.880><c> second</c>

02:02:33.270 --> 02:02:33.280 align:start position:0%
solution as i will show you in a second
 

02:02:33.280 --> 02:02:34.709 align:start position:0%
solution as i will show you in a second
this<02:02:33.520><c> program</c><02:02:33.840><c> has</c><02:02:34.080><c> a</c><02:02:34.159><c> book</c>

02:02:34.709 --> 02:02:34.719 align:start position:0%
this program has a book
 

02:02:34.719 --> 02:02:36.470 align:start position:0%
this program has a book
but<02:02:34.880><c> it's</c><02:02:35.119><c> a</c><02:02:35.199><c> very</c><02:02:35.520><c> common</c><02:02:35.920><c> solution</c><02:02:36.239><c> that</c><02:02:36.400><c> i</c>

02:02:36.470 --> 02:02:36.480 align:start position:0%
but it's a very common solution that i
 

02:02:36.480 --> 02:02:38.070 align:start position:0%
but it's a very common solution that i
see<02:02:36.639><c> amongst</c><02:02:37.040><c> my</c><02:02:37.199><c> students</c>

02:02:38.070 --> 02:02:38.080 align:start position:0%
see amongst my students
 

02:02:38.080 --> 02:02:40.070 align:start position:0%
see amongst my students
so<02:02:38.239><c> let's</c><02:02:38.400><c> run</c><02:02:38.639><c> this</c><02:02:38.800><c> program</c><02:02:39.199><c> and</c><02:02:39.360><c> see</c><02:02:39.840><c> what</c>

02:02:40.070 --> 02:02:40.080 align:start position:0%
so let's run this program and see what
 

02:02:40.080 --> 02:02:43.189 align:start position:0%
so let's run this program and see what
is<02:02:40.320><c> wrong</c><02:02:40.639><c> here</c>

02:02:43.189 --> 02:02:43.199 align:start position:0%
 
 

02:02:43.199 --> 02:02:46.070 align:start position:0%
 
all<02:02:43.360><c> right</c><02:02:43.760><c> here</c><02:02:43.920><c> we</c><02:02:44.080><c> enter</c><02:02:44.400><c> five</c><02:02:45.199><c> we</c><02:02:45.360><c> get</c><02:02:45.599><c> fizz</c>

02:02:46.070 --> 02:02:46.080 align:start position:0%
all right here we enter five we get fizz
 

02:02:46.080 --> 02:02:47.109 align:start position:0%
all right here we enter five we get fizz
beautiful

02:02:47.109 --> 02:02:47.119 align:start position:0%
beautiful
 

02:02:47.119 --> 02:02:49.990 align:start position:0%
beautiful
what<02:02:47.360><c> if</c><02:02:47.440><c> we</c><02:02:47.599><c> enter</c><02:02:48.480><c> 10.</c><02:02:49.440><c> 10</c><02:02:49.679><c> is</c><02:02:49.760><c> also</c>

02:02:49.990 --> 02:02:50.000 align:start position:0%
what if we enter 10. 10 is also
 

02:02:50.000 --> 02:02:51.189 align:start position:0%
what if we enter 10. 10 is also
divisible<02:02:50.480><c> by</c><02:02:50.719><c> 5</c>

02:02:51.189 --> 02:02:51.199 align:start position:0%
divisible by 5
 

02:02:51.199 --> 02:02:54.550 align:start position:0%
divisible by 5
so<02:02:51.360><c> we</c><02:02:51.520><c> get</c><02:02:51.760><c> 5.</c><02:02:52.239><c> so</c><02:02:52.400><c> far</c><02:02:52.639><c> so</c><02:02:52.880><c> good</c><02:02:53.599><c> what</c><02:02:53.840><c> about</c>

02:02:54.550 --> 02:02:54.560 align:start position:0%
so we get 5. so far so good what about
 

02:02:54.560 --> 02:02:57.910 align:start position:0%
so we get 5. so far so good what about
a<02:02:54.719><c> number</c><02:02:55.040><c> that</c><02:02:55.280><c> is</c><02:02:55.360><c> divisible</c><02:02:56.000><c> by</c><02:02:56.560><c> 3</c><02:02:57.520><c> we</c><02:02:57.679><c> get</c>

02:02:57.910 --> 02:02:57.920 align:start position:0%
a number that is divisible by 3 we get
 

02:02:57.920 --> 02:02:59.669 align:start position:0%
a number that is divisible by 3 we get
buzz

02:02:59.669 --> 02:02:59.679 align:start position:0%
buzz
 

02:02:59.679 --> 02:03:02.070 align:start position:0%
buzz
good<02:03:00.480><c> what</c><02:03:00.639><c> if</c><02:03:00.800><c> we</c><02:03:00.960><c> enter</c><02:03:01.360><c> a</c><02:03:01.520><c> number</c><02:03:01.840><c> that</c><02:03:02.000><c> is</c>

02:03:02.070 --> 02:03:02.080 align:start position:0%
good what if we enter a number that is
 

02:03:02.080 --> 02:03:03.910 align:start position:0%
good what if we enter a number that is
divisible<02:03:02.639><c> by</c><02:03:02.880><c> both</c><02:03:03.280><c> 5</c>

02:03:03.910 --> 02:03:03.920 align:start position:0%
divisible by both 5
 

02:03:03.920 --> 02:03:07.589 align:start position:0%
divisible by both 5
and<02:03:04.159><c> 3</c><02:03:04.880><c> like</c><02:03:05.119><c> 15.</c><02:03:06.400><c> we</c><02:03:06.560><c> get</c><02:03:06.800><c> fizz</c><02:03:07.040><c> again</c>

02:03:07.589 --> 02:03:07.599 align:start position:0%
and 3 like 15. we get fizz again
 

02:03:07.599 --> 02:03:10.310 align:start position:0%
and 3 like 15. we get fizz again
why<02:03:07.840><c> is</c><02:03:07.920><c> that</c><02:03:08.639><c> here's</c><02:03:08.960><c> the</c><02:03:09.040><c> reason</c><02:03:09.920><c> with</c><02:03:10.080><c> this</c>

02:03:10.310 --> 02:03:10.320 align:start position:0%
why is that here's the reason with this
 

02:03:10.320 --> 02:03:11.430 align:start position:0%
why is that here's the reason with this
implementation

02:03:11.430 --> 02:03:11.440 align:start position:0%
implementation
 

02:03:11.440 --> 02:03:14.550 align:start position:0%
implementation
if<02:03:11.599><c> we</c><02:03:11.760><c> enter</c><02:03:12.159><c> 15</c><02:03:12.960><c> this</c><02:03:13.280><c> first</c><02:03:13.520><c> condition</c>

02:03:14.550 --> 02:03:14.560 align:start position:0%
if we enter 15 this first condition
 

02:03:14.560 --> 02:03:17.750 align:start position:0%
if we enter 15 this first condition
will<02:03:14.800><c> evaluate</c><02:03:15.280><c> to</c><02:03:15.520><c> true</c><02:03:16.080><c> so</c><02:03:16.239><c> we</c><02:03:16.480><c> get</c><02:03:17.040><c> fiz</c>

02:03:17.750 --> 02:03:17.760 align:start position:0%
will evaluate to true so we get fiz
 

02:03:17.760 --> 02:03:20.070 align:start position:0%
will evaluate to true so we get fiz
these<02:03:18.159><c> other</c><02:03:18.400><c> else</c><02:03:18.639><c> clauses</c><02:03:19.040><c> will</c><02:03:19.199><c> be</c><02:03:19.360><c> ignored</c>

02:03:20.070 --> 02:03:20.080 align:start position:0%
these other else clauses will be ignored
 

02:03:20.080 --> 02:03:22.229 align:start position:0%
these other else clauses will be ignored
and<02:03:20.239><c> that</c><02:03:20.480><c> is</c><02:03:20.639><c> why</c>

02:03:22.229 --> 02:03:22.239 align:start position:0%
and that is why
 

02:03:22.239 --> 02:03:24.709 align:start position:0%
and that is why
this<02:03:22.560><c> line</c><02:03:22.800><c> will</c><02:03:22.960><c> not</c><02:03:23.199><c> be</c><02:03:23.360><c> executed</c><02:03:24.480><c> so</c><02:03:24.639><c> in</c>

02:03:24.709 --> 02:03:24.719 align:start position:0%
this line will not be executed so in
 

02:03:24.719 --> 02:03:26.550 align:start position:0%
this line will not be executed so in
situations<02:03:25.199><c> like</c><02:03:25.440><c> this</c><02:03:25.679><c> you</c><02:03:25.840><c> should</c><02:03:26.000><c> have</c>

02:03:26.550 --> 02:03:26.560 align:start position:0%
situations like this you should have
 

02:03:26.560 --> 02:03:29.669 align:start position:0%
situations like this you should have
the<02:03:26.800><c> most</c><02:03:27.440><c> specific</c><02:03:28.080><c> conditions</c><02:03:28.719><c> on</c><02:03:28.880><c> the</c><02:03:29.119><c> top</c>

02:03:29.669 --> 02:03:29.679 align:start position:0%
the most specific conditions on the top
 

02:03:29.679 --> 02:03:32.470 align:start position:0%
the most specific conditions on the top
and<02:03:29.840><c> the</c><02:03:30.000><c> most</c><02:03:30.320><c> generic</c><02:03:30.800><c> ones</c><02:03:31.119><c> on</c><02:03:31.199><c> the</c><02:03:31.360><c> bottom</c>

02:03:32.470 --> 02:03:32.480 align:start position:0%
and the most generic ones on the bottom
 

02:03:32.480 --> 02:03:34.149 align:start position:0%
and the most generic ones on the bottom
in<02:03:32.639><c> this</c><02:03:32.800><c> case</c><02:03:33.040><c> we</c><02:03:33.199><c> want</c><02:03:33.280><c> to</c><02:03:33.360><c> move</c>

02:03:34.149 --> 02:03:34.159 align:start position:0%
in this case we want to move
 

02:03:34.159 --> 02:03:36.870 align:start position:0%
in this case we want to move
this<02:03:34.400><c> condition</c><02:03:35.119><c> to</c><02:03:35.360><c> the</c><02:03:35.520><c> top</c><02:03:36.400><c> so</c><02:03:36.639><c> if</c><02:03:36.800><c> the</c>

02:03:36.870 --> 02:03:36.880 align:start position:0%
this condition to the top so if the
 

02:03:36.880 --> 02:03:38.229 align:start position:0%
this condition to the top so if the
number<02:03:37.199><c> is</c><02:03:37.360><c> divisible</c><02:03:37.920><c> by</c>

02:03:38.229 --> 02:03:38.239 align:start position:0%
number is divisible by
 

02:03:38.239 --> 02:03:41.510 align:start position:0%
number is divisible by
five<02:03:38.719><c> and</c><02:03:39.040><c> three</c><02:03:40.000><c> we're</c><02:03:40.159><c> going</c><02:03:40.320><c> to</c><02:03:40.480><c> print</c>

02:03:41.510 --> 02:03:41.520 align:start position:0%
five and three we're going to print
 

02:03:41.520 --> 02:03:46.070 align:start position:0%
five and three we're going to print
fizzbuzz<02:03:44.239><c> so</c><02:03:44.400><c> this</c><02:03:44.560><c> is</c><02:03:44.719><c> very</c><02:03:44.960><c> specific</c>

02:03:46.070 --> 02:03:46.080 align:start position:0%
fizzbuzz so this is very specific
 

02:03:46.080 --> 02:03:47.910 align:start position:0%
fizzbuzz so this is very specific
otherwise<02:03:46.880><c> if</c><02:03:46.960><c> the</c><02:03:47.119><c> number</c><02:03:47.440><c> is</c><02:03:47.679><c> only</c>

02:03:47.910 --> 02:03:47.920 align:start position:0%
otherwise if the number is only
 

02:03:47.920 --> 02:03:49.109 align:start position:0%
otherwise if the number is only
divisible<02:03:48.400><c> by</c><02:03:48.639><c> 5</c>

02:03:49.109 --> 02:03:49.119 align:start position:0%
divisible by 5
 

02:03:49.119 --> 02:03:52.550 align:start position:0%
divisible by 5
we<02:03:49.360><c> print</c><02:03:49.920><c> fizz</c><02:03:51.199><c> else</c><02:03:51.520><c> if</c><02:03:51.679><c> it's</c><02:03:51.840><c> divisible</c><02:03:52.320><c> by</c>

02:03:52.550 --> 02:03:52.560 align:start position:0%
we print fizz else if it's divisible by
 

02:03:52.560 --> 02:03:53.589 align:start position:0%
we print fizz else if it's divisible by
3<02:03:52.800><c> we</c><02:03:53.040><c> print</c>

02:03:53.589 --> 02:03:53.599 align:start position:0%
3 we print
 

02:03:53.599 --> 02:03:56.470 align:start position:0%
3 we print
buzz<02:03:54.400><c> and</c><02:03:54.840><c> finally</c><02:03:55.840><c> if</c><02:03:56.000><c> none</c><02:03:56.239><c> of</c><02:03:56.320><c> its</c>

02:03:56.470 --> 02:03:56.480 align:start position:0%
buzz and finally if none of its
 

02:03:56.480 --> 02:03:57.189 align:start position:0%
buzz and finally if none of its
conditions

02:03:57.189 --> 02:03:57.199 align:start position:0%
conditions
 

02:03:57.199 --> 02:04:00.390 align:start position:0%
conditions
is<02:03:57.440><c> true</c><02:03:57.760><c> then</c><02:03:58.159><c> we</c><02:03:58.320><c> print</c><02:03:58.719><c> the</c><02:03:58.800><c> same</c><02:03:59.040><c> number</c>

02:04:00.390 --> 02:04:00.400 align:start position:0%
is true then we print the same number
 

02:04:00.400 --> 02:04:02.149 align:start position:0%
is true then we print the same number
now<02:04:00.560><c> let's</c><02:04:00.719><c> run</c><02:04:00.960><c> the</c><02:04:01.040><c> program</c><02:04:01.360><c> one</c><02:04:01.520><c> more</c><02:04:01.679><c> time</c>

02:04:02.149 --> 02:04:02.159 align:start position:0%
now let's run the program one more time
 

02:04:02.159 --> 02:04:05.669 align:start position:0%
now let's run the program one more time
so<02:04:02.320><c> we</c><02:04:02.480><c> enter</c><02:04:03.040><c> 15</c><02:04:03.599><c> and</c><02:04:03.760><c> we</c><02:04:03.920><c> get</c><02:04:04.159><c> fizz</c><02:04:04.400><c> boss</c>

02:04:05.669 --> 02:04:05.679 align:start position:0%
so we enter 15 and we get fizz boss
 

02:04:05.679 --> 02:04:07.430 align:start position:0%
so we enter 15 and we get fizz boss
beautiful<02:04:06.320><c> so</c><02:04:06.480><c> here's</c><02:04:06.719><c> one</c><02:04:06.880><c> way</c><02:04:07.040><c> to</c><02:04:07.199><c> solve</c>

02:04:07.430 --> 02:04:07.440 align:start position:0%
beautiful so here's one way to solve
 

02:04:07.440 --> 02:04:09.669 align:start position:0%
beautiful so here's one way to solve
this<02:04:07.599><c> problem</c><02:04:08.639><c> now</c><02:04:08.800><c> i</c><02:04:08.960><c> have</c><02:04:09.040><c> seen</c><02:04:09.199><c> some</c><02:04:09.360><c> people</c>

02:04:09.669 --> 02:04:09.679 align:start position:0%
this problem now i have seen some people
 

02:04:09.679 --> 02:04:10.149 align:start position:0%
this problem now i have seen some people
argue

02:04:10.149 --> 02:04:10.159 align:start position:0%
argue
 

02:04:10.159 --> 02:04:13.189 align:start position:0%
argue
that<02:04:10.639><c> we</c><02:04:10.800><c> have</c><02:04:10.960><c> repeated</c><02:04:11.840><c> this</c><02:04:12.159><c> expression</c>

02:04:13.189 --> 02:04:13.199 align:start position:0%
that we have repeated this expression
 

02:04:13.199 --> 02:04:16.310 align:start position:0%
that we have repeated this expression
twice<02:04:14.000><c> number</c><02:04:14.560><c> is</c><02:04:14.639><c> divisible</c><02:04:15.199><c> by</c><02:04:15.440><c> five</c><02:04:16.159><c> we</c>

02:04:16.310 --> 02:04:16.320 align:start position:0%
twice number is divisible by five we
 

02:04:16.320 --> 02:04:17.669 align:start position:0%
twice number is divisible by five we
have<02:04:16.480><c> that</c><02:04:16.639><c> here</c><02:04:16.800><c> on</c><02:04:16.960><c> line</c><02:04:17.199><c> 12</c>

02:04:17.669 --> 02:04:17.679 align:start position:0%
have that here on line 12
 

02:04:17.679 --> 02:04:20.950 align:start position:0%
have that here on line 12
as<02:04:17.840><c> well</c><02:04:18.000><c> as</c><02:04:18.159><c> line</c><02:04:18.880><c> 14.</c><02:04:20.239><c> in</c><02:04:20.400><c> programming</c><02:04:20.880><c> we</c>

02:04:20.950 --> 02:04:20.960 align:start position:0%
as well as line 14. in programming we
 

02:04:20.960 --> 02:04:22.629 align:start position:0%
as well as line 14. in programming we
have<02:04:21.040><c> this</c><02:04:21.280><c> concept</c><02:04:21.679><c> called</c><02:04:22.000><c> dry</c><02:04:22.320><c> which</c><02:04:22.560><c> is</c>

02:04:22.629 --> 02:04:22.639 align:start position:0%
have this concept called dry which is
 

02:04:22.639 --> 02:04:23.430 align:start position:0%
have this concept called dry which is
short<02:04:22.880><c> for</c>

02:04:23.430 --> 02:04:23.440 align:start position:0%
short for
 

02:04:23.440 --> 02:04:26.229 align:start position:0%
short for
don't<02:04:23.920><c> repeat</c><02:04:24.320><c> yourself</c><02:04:25.520><c> so</c><02:04:25.760><c> some</c><02:04:25.920><c> people</c>

02:04:26.229 --> 02:04:26.239 align:start position:0%
don't repeat yourself so some people
 

02:04:26.239 --> 02:04:27.830 align:start position:0%
don't repeat yourself so some people
argue<02:04:26.560><c> that</c><02:04:26.719><c> here</c><02:04:26.880><c> we</c><02:04:27.040><c> have</c><02:04:27.199><c> repeated</c><02:04:27.599><c> this</c>

02:04:27.830 --> 02:04:27.840 align:start position:0%
argue that here we have repeated this
 

02:04:27.840 --> 02:04:29.510 align:start position:0%
argue that here we have repeated this
expression<02:04:28.400><c> and</c><02:04:28.560><c> this</c><02:04:28.800><c> is</c><02:04:28.960><c> not</c><02:04:29.199><c> a</c><02:04:29.280><c> good</c>

02:04:29.510 --> 02:04:29.520 align:start position:0%
expression and this is not a good
 

02:04:29.520 --> 02:04:30.550 align:start position:0%
expression and this is not a good
solution

02:04:30.550 --> 02:04:30.560 align:start position:0%
solution
 

02:04:30.560 --> 02:04:33.189 align:start position:0%
solution
here's<02:04:30.880><c> another</c><02:04:31.199><c> way</c><02:04:31.360><c> let</c><02:04:31.520><c> me</c><02:04:31.679><c> show</c><02:04:31.840><c> you</c><02:04:32.400><c> so</c>

02:04:33.189 --> 02:04:33.199 align:start position:0%
here's another way let me show you so
 

02:04:33.199 --> 02:04:34.790 align:start position:0%
here's another way let me show you so
we're<02:04:33.360><c> going</c><02:04:33.440><c> to</c><02:04:33.520><c> get</c><02:04:33.679><c> rid</c><02:04:33.840><c> of</c><02:04:34.000><c> this</c><02:04:34.159><c> second</c>

02:04:34.790 --> 02:04:34.800 align:start position:0%
we're going to get rid of this second
 

02:04:34.800 --> 02:04:37.510 align:start position:0%
we're going to get rid of this second
condition<02:04:35.280><c> here</c><02:04:36.800><c> instead</c><02:04:37.119><c> we're</c><02:04:37.280><c> going</c><02:04:37.360><c> to</c>

02:04:37.510 --> 02:04:37.520 align:start position:0%
condition here instead we're going to
 

02:04:37.520 --> 02:04:37.990 align:start position:0%
condition here instead we're going to
add<02:04:37.760><c> a</c>

02:04:37.990 --> 02:04:38.000 align:start position:0%
add a
 

02:04:38.000 --> 02:04:41.350 align:start position:0%
add a
code<02:04:38.320><c> block</c><02:04:39.360><c> over</c><02:04:39.599><c> here</c><02:04:40.560><c> so</c><02:04:40.800><c> if</c><02:04:40.880><c> the</c><02:04:41.040><c> number</c><02:04:41.280><c> is</c>

02:04:41.350 --> 02:04:41.360 align:start position:0%
code block over here so if the number is
 

02:04:41.360 --> 02:04:42.950 align:start position:0%
code block over here so if the number is
divisible<02:04:41.920><c> by</c><02:04:42.159><c> five</c>

02:04:42.950 --> 02:04:42.960 align:start position:0%
divisible by five
 

02:04:42.960 --> 02:04:44.629 align:start position:0%
divisible by five
first<02:04:43.199><c> we</c><02:04:43.360><c> check</c><02:04:43.520><c> to</c><02:04:43.679><c> see</c><02:04:43.840><c> if</c><02:04:43.920><c> the</c><02:04:44.079><c> number</c><02:04:44.400><c> is</c>

02:04:44.629 --> 02:04:44.639 align:start position:0%
first we check to see if the number is
 

02:04:44.639 --> 02:04:46.069 align:start position:0%
first we check to see if the number is
also<02:04:44.960><c> divisible</c>

02:04:46.069 --> 02:04:46.079 align:start position:0%
also divisible
 

02:04:46.079 --> 02:04:49.270 align:start position:0%
also divisible
by<02:04:46.400><c> three</c><02:04:47.280><c> if</c><02:04:47.440><c> that's</c><02:04:47.679><c> the</c><02:04:47.840><c> case</c><02:04:48.480><c> we</c><02:04:48.639><c> print</c>

02:04:49.270 --> 02:04:49.280 align:start position:0%
by three if that's the case we print
 

02:04:49.280 --> 02:04:52.790 align:start position:0%
by three if that's the case we print
fizzbuzz<02:04:50.400><c> otherwise</c><02:04:51.760><c> we</c><02:04:52.000><c> print</c>

02:04:52.790 --> 02:04:52.800 align:start position:0%
fizzbuzz otherwise we print
 

02:04:52.800 --> 02:04:56.390 align:start position:0%
fizzbuzz otherwise we print
just<02:04:53.040><c> fizz</c><02:04:55.040><c> like</c><02:04:55.280><c> this</c><02:04:55.520><c> okay</c>

02:04:56.390 --> 02:04:56.400 align:start position:0%
just fizz like this okay
 

02:04:56.400 --> 02:04:58.550 align:start position:0%
just fizz like this okay
now<02:04:56.639><c> we</c><02:04:56.800><c> no</c><02:04:56.960><c> longer</c><02:04:57.280><c> need</c><02:04:57.679><c> these</c><02:04:57.920><c> two</c><02:04:58.159><c> lines</c>

02:04:58.550 --> 02:04:58.560 align:start position:0%
now we no longer need these two lines
 

02:04:58.560 --> 02:05:00.069 align:start position:0%
now we no longer need these two lines
because<02:04:58.719><c> we</c><02:04:58.960><c> already</c><02:04:59.360><c> implemented</c><02:04:59.920><c> this</c>

02:05:00.069 --> 02:05:00.079 align:start position:0%
because we already implemented this
 

02:05:00.079 --> 02:05:01.990 align:start position:0%
because we already implemented this
concept<02:05:00.560><c> here</c>

02:05:01.990 --> 02:05:02.000 align:start position:0%
concept here
 

02:05:02.000 --> 02:05:03.669 align:start position:0%
concept here
so<02:05:02.159><c> first</c><02:05:02.320><c> we</c><02:05:02.480><c> check</c><02:05:02.719><c> to</c><02:05:02.800><c> see</c><02:05:02.880><c> if</c><02:05:03.040><c> the</c><02:05:03.119><c> number</c>

02:05:03.669 --> 02:05:03.679 align:start position:0%
so first we check to see if the number
 

02:05:03.679 --> 02:05:05.430 align:start position:0%
so first we check to see if the number
is<02:05:03.760><c> divisible</c><02:05:04.320><c> by</c><02:05:04.560><c> five</c>

02:05:05.430 --> 02:05:05.440 align:start position:0%
is divisible by five
 

02:05:05.440 --> 02:05:07.510 align:start position:0%
is divisible by five
if<02:05:05.599><c> not</c><02:05:06.159><c> we</c><02:05:06.320><c> check</c><02:05:06.480><c> to</c><02:05:06.639><c> see</c><02:05:06.719><c> if</c><02:05:06.880><c> it's</c><02:05:07.040><c> divisible</c>

02:05:07.510 --> 02:05:07.520 align:start position:0%
if not we check to see if it's divisible
 

02:05:07.520 --> 02:05:09.510 align:start position:0%
if not we check to see if it's divisible
by<02:05:07.840><c> three</c><02:05:08.159><c> and</c><02:05:08.480><c> otherwise</c>

02:05:09.510 --> 02:05:09.520 align:start position:0%
by three and otherwise
 

02:05:09.520 --> 02:05:10.950 align:start position:0%
by three and otherwise
so<02:05:09.679><c> here's</c><02:05:10.000><c> another</c><02:05:10.239><c> way</c><02:05:10.400><c> to</c><02:05:10.560><c> solve</c><02:05:10.800><c> this</c>

02:05:10.950 --> 02:05:10.960 align:start position:0%
so here's another way to solve this
 

02:05:10.960 --> 02:05:13.030 align:start position:0%
so here's another way to solve this
problem<02:05:11.360><c> but</c><02:05:11.520><c> in</c><02:05:11.599><c> my</c><02:05:11.760><c> opinion</c><02:05:12.239><c> this</c><02:05:12.400><c> approach</c>

02:05:13.030 --> 02:05:13.040 align:start position:0%
problem but in my opinion this approach
 

02:05:13.040 --> 02:05:15.669 align:start position:0%
problem but in my opinion this approach
is<02:05:13.199><c> kind</c><02:05:13.360><c> of</c><02:05:13.520><c> amateurish</c><02:05:14.239><c> and</c><02:05:14.639><c> ugly</c><02:05:15.440><c> because</c>

02:05:15.669 --> 02:05:15.679 align:start position:0%
is kind of amateurish and ugly because
 

02:05:15.679 --> 02:05:16.550 align:start position:0%
is kind of amateurish and ugly because
these<02:05:16.000><c> nested</c>

02:05:16.550 --> 02:05:16.560 align:start position:0%
these nested
 

02:05:16.560 --> 02:05:18.950 align:start position:0%
these nested
if-else<02:05:16.960><c> statements</c><02:05:17.520><c> are</c><02:05:17.920><c> considered</c><02:05:18.480><c> a</c><02:05:18.639><c> bad</c>

02:05:18.950 --> 02:05:18.960 align:start position:0%
if-else statements are considered a bad
 

02:05:18.960 --> 02:05:19.990 align:start position:0%
if-else statements are considered a bad
practice

02:05:19.990 --> 02:05:20.000 align:start position:0%
practice
 

02:05:20.000 --> 02:05:21.910 align:start position:0%
practice
now<02:05:20.159><c> this</c><02:05:20.320><c> is</c><02:05:20.400><c> not</c><02:05:20.560><c> terribly</c><02:05:21.040><c> bad</c><02:05:21.520><c> but</c><02:05:21.760><c> the</c>

02:05:21.910 --> 02:05:21.920 align:start position:0%
now this is not terribly bad but the
 

02:05:21.920 --> 02:05:23.270 align:start position:0%
now this is not terribly bad but the
more<02:05:22.159><c> you</c><02:05:22.400><c> nest</c><02:05:22.880><c> these</c>

02:05:23.270 --> 02:05:23.280 align:start position:0%
more you nest these
 

02:05:23.280 --> 02:05:25.430 align:start position:0%
more you nest these
if<02:05:23.520><c> else</c><02:05:23.760><c> statements</c><02:05:24.480><c> the</c><02:05:24.639><c> more</c><02:05:24.880><c> confusing</c>

02:05:25.430 --> 02:05:25.440 align:start position:0%
if else statements the more confusing
 

02:05:25.440 --> 02:05:27.510 align:start position:0%
if else statements the more confusing
your<02:05:25.599><c> code</c><02:05:25.840><c> is</c><02:05:25.920><c> going</c><02:05:26.000><c> to</c><02:05:26.079><c> be</c><02:05:26.239><c> to</c><02:05:26.480><c> other</c><02:05:26.719><c> people</c>

02:05:27.510 --> 02:05:27.520 align:start position:0%
your code is going to be to other people
 

02:05:27.520 --> 02:05:29.109 align:start position:0%
your code is going to be to other people
so<02:05:27.679><c> i</c><02:05:27.840><c> personally</c><02:05:28.239><c> prefer</c><02:05:28.560><c> the</c><02:05:28.719><c> previous</c>

02:05:29.109 --> 02:05:29.119 align:start position:0%
so i personally prefer the previous
 

02:05:29.119 --> 02:05:30.550 align:start position:0%
so i personally prefer the previous
solution<02:05:29.679><c> even</c><02:05:29.840><c> though</c><02:05:30.000><c> we</c><02:05:30.159><c> had</c><02:05:30.239><c> a</c><02:05:30.320><c> bit</c><02:05:30.480><c> of</c>

02:05:30.550 --> 02:05:30.560 align:start position:0%
solution even though we had a bit of
 

02:05:30.560 --> 02:05:31.990 align:start position:0%
solution even though we had a bit of
repetition<02:05:31.199><c> in</c><02:05:31.280><c> the</c><02:05:31.440><c> code</c>

02:05:31.990 --> 02:05:32.000 align:start position:0%
repetition in the code
 

02:05:32.000 --> 02:05:33.510 align:start position:0%
repetition in the code
the<02:05:32.159><c> more</c><02:05:32.320><c> you</c><02:05:32.480><c> program</c><02:05:32.880><c> the</c><02:05:33.040><c> more</c><02:05:33.199><c> you</c><02:05:33.280><c> build</c>

02:05:33.510 --> 02:05:33.520 align:start position:0%
the more you program the more you build
 

02:05:33.520 --> 02:05:35.350 align:start position:0%
the more you program the more you build
software<02:05:34.239><c> the</c><02:05:34.400><c> more</c><02:05:34.560><c> you</c><02:05:34.719><c> realize</c><02:05:35.119><c> that</c><02:05:35.199><c> there</c>

02:05:35.350 --> 02:05:35.360 align:start position:0%
software the more you realize that there
 

02:05:35.360 --> 02:05:36.229 align:start position:0%
software the more you realize that there
is<02:05:35.520><c> no</c><02:05:35.760><c> way</c>

02:05:36.229 --> 02:05:36.239 align:start position:0%
is no way
 

02:05:36.239 --> 02:05:39.030 align:start position:0%
is no way
to<02:05:36.400><c> build</c><02:05:36.880><c> ideal</c><02:05:37.440><c> software</c><02:05:38.320><c> programming</c><02:05:38.880><c> and</c>

02:05:39.030 --> 02:05:39.040 align:start position:0%
to build ideal software programming and
 

02:05:39.040 --> 02:05:41.350 align:start position:0%
to build ideal software programming and
problem<02:05:39.440><c> solving</c><02:05:39.840><c> is</c><02:05:40.079><c> all</c><02:05:40.239><c> about</c><02:05:40.480><c> trade-offs</c>

02:05:41.350 --> 02:05:41.360 align:start position:0%
problem solving is all about trade-offs
 

02:05:41.360 --> 02:05:43.669 align:start position:0%
problem solving is all about trade-offs
every<02:05:41.679><c> solution</c><02:05:42.400><c> has</c><02:05:42.560><c> certain</c><02:05:42.960><c> strengths</c><02:05:43.520><c> and</c>

02:05:43.669 --> 02:05:43.679 align:start position:0%
every solution has certain strengths and
 

02:05:43.679 --> 02:05:44.950 align:start position:0%
every solution has certain strengths and
certain<02:05:44.000><c> weaknesses</c>

02:05:44.950 --> 02:05:44.960 align:start position:0%
certain weaknesses
 

02:05:44.960 --> 02:05:46.310 align:start position:0%
certain weaknesses
this<02:05:45.199><c> solution</c><02:05:45.679><c> doesn't</c><02:05:45.920><c> have</c><02:05:46.159><c> any</c>

02:05:46.310 --> 02:05:46.320 align:start position:0%
this solution doesn't have any
 

02:05:46.320 --> 02:05:48.550 align:start position:0%
this solution doesn't have any
repetition<02:05:46.960><c> or</c><02:05:47.119><c> duplication</c><02:05:47.760><c> in</c><02:05:47.920><c> the</c><02:05:48.000><c> code</c>

02:05:48.550 --> 02:05:48.560 align:start position:0%
repetition or duplication in the code
 

02:05:48.560 --> 02:05:50.550 align:start position:0%
repetition or duplication in the code
but<02:05:48.800><c> it</c><02:05:48.880><c> has</c><02:05:49.040><c> a</c><02:05:49.199><c> nested</c><02:05:49.679><c> structure</c><02:05:50.239><c> and</c><02:05:50.320><c> these</c>

02:05:50.550 --> 02:05:50.560 align:start position:0%
but it has a nested structure and these
 

02:05:50.560 --> 02:05:51.830 align:start position:0%
but it has a nested structure and these
nested<02:05:51.040><c> structures</c>

02:05:51.830 --> 02:05:51.840 align:start position:0%
nested structures
 

02:05:51.840 --> 02:05:53.589 align:start position:0%
nested structures
make<02:05:52.079><c> our</c><02:05:52.320><c> code</c><02:05:52.800><c> hard</c><02:05:53.040><c> to</c><02:05:53.199><c> read</c><02:05:53.440><c> and</c>

02:05:53.589 --> 02:05:53.599 align:start position:0%
make our code hard to read and
 

02:05:53.599 --> 02:05:54.870 align:start position:0%
make our code hard to read and
understand

02:05:54.870 --> 02:05:54.880 align:start position:0%
understand
 

02:05:54.880 --> 02:05:56.390 align:start position:0%
understand
the<02:05:55.119><c> previous</c><02:05:55.440><c> solution</c><02:05:55.920><c> had</c><02:05:56.079><c> a</c><02:05:56.159><c> bit</c><02:05:56.320><c> of</c>

02:05:56.390 --> 02:05:56.400 align:start position:0%
the previous solution had a bit of
 

02:05:56.400 --> 02:05:58.870 align:start position:0%
the previous solution had a bit of
repetition<02:05:57.199><c> but</c><02:05:57.360><c> it</c><02:05:57.520><c> had</c><02:05:57.679><c> a</c><02:05:57.840><c> flat</c><02:05:58.239><c> structure</c>

02:05:58.870 --> 02:05:58.880 align:start position:0%
repetition but it had a flat structure
 

02:05:58.880 --> 02:06:01.109 align:start position:0%
repetition but it had a flat structure
there<02:05:59.040><c> is</c><02:05:59.280><c> no</c><02:05:59.520><c> nesting</c><02:06:00.000><c> here</c><02:06:00.480><c> and</c><02:06:00.639><c> this</c><02:06:00.880><c> code</c>

02:06:01.109 --> 02:06:01.119 align:start position:0%
there is no nesting here and this code
 

02:06:01.119 --> 02:06:01.990 align:start position:0%
there is no nesting here and this code
is<02:06:01.280><c> cleaner</c><02:06:01.760><c> and</c>

02:06:01.990 --> 02:06:02.000 align:start position:0%
is cleaner and
 

02:06:02.000 --> 02:06:08.870 align:start position:0%
is cleaner and
easier<02:06:02.320><c> to</c><02:06:02.480><c> read</c>

02:06:08.870 --> 02:06:08.880 align:start position:0%
 
 

02:06:08.880 --> 02:06:10.310 align:start position:0%
 
there<02:06:09.040><c> are</c><02:06:09.199><c> times</c><02:06:09.440><c> that</c><02:06:09.599><c> we</c><02:06:09.679><c> want</c><02:06:09.840><c> to</c><02:06:09.920><c> repeat</c>

02:06:10.310 --> 02:06:10.320 align:start position:0%
there are times that we want to repeat
 

02:06:10.320 --> 02:06:11.990 align:start position:0%
there are times that we want to repeat
one<02:06:10.560><c> or</c><02:06:10.800><c> more</c><02:06:11.040><c> statements</c>

02:06:11.990 --> 02:06:12.000 align:start position:0%
one or more statements
 

02:06:12.000 --> 02:06:14.550 align:start position:0%
one or more statements
for<02:06:12.239><c> example</c><02:06:12.639><c> let's</c><02:06:12.800><c> say</c><02:06:12.960><c> we</c><02:06:13.199><c> have</c><02:06:13.520><c> this</c><02:06:14.239><c> hello</c>

02:06:14.550 --> 02:06:14.560 align:start position:0%
for example let's say we have this hello
 

02:06:14.560 --> 02:06:15.270 align:start position:0%
for example let's say we have this hello
world

02:06:15.270 --> 02:06:15.280 align:start position:0%
world
 

02:06:15.280 --> 02:06:16.950 align:start position:0%
world
message<02:06:15.679><c> here</c><02:06:16.400><c> let's</c><02:06:16.560><c> say</c><02:06:16.719><c> we're</c><02:06:16.800><c> going</c><02:06:16.880><c> to</c>

02:06:16.950 --> 02:06:16.960 align:start position:0%
message here let's say we're going to
 

02:06:16.960 --> 02:06:19.350 align:start position:0%
message here let's say we're going to
print<02:06:17.280><c> this</c><02:06:17.760><c> five</c><02:06:18.079><c> times</c><02:06:18.320><c> on</c><02:06:18.400><c> the</c><02:06:18.560><c> terminal</c>

02:06:19.350 --> 02:06:19.360 align:start position:0%
print this five times on the terminal
 

02:06:19.360 --> 02:06:21.350 align:start position:0%
print this five times on the terminal
we<02:06:19.520><c> don't</c><02:06:19.599><c> want</c><02:06:19.760><c> to</c><02:06:19.840><c> repeat</c><02:06:20.159><c> this</c><02:06:20.400><c> code</c><02:06:21.119><c> like</c>

02:06:21.350 --> 02:06:21.360 align:start position:0%
we don't want to repeat this code like
 

02:06:21.360 --> 02:06:23.270 align:start position:0%
we don't want to repeat this code like
this<02:06:21.920><c> this</c><02:06:22.079><c> looks</c><02:06:22.320><c> very</c><02:06:22.560><c> ugly</c>

02:06:23.270 --> 02:06:23.280 align:start position:0%
this this looks very ugly
 

02:06:23.280 --> 02:06:25.589 align:start position:0%
this this looks very ugly
that's<02:06:23.520><c> where</c><02:06:23.760><c> we</c><02:06:23.920><c> use</c><02:06:24.159><c> loops</c><02:06:24.960><c> in</c><02:06:25.199><c> java</c><02:06:25.520><c> we</c>

02:06:25.589 --> 02:06:25.599 align:start position:0%
that's where we use loops in java we
 

02:06:25.599 --> 02:06:27.350 align:start position:0%
that's where we use loops in java we
have<02:06:25.760><c> a</c><02:06:25.840><c> few</c><02:06:26.079><c> different</c><02:06:26.320><c> types</c><02:06:26.560><c> of</c><02:06:26.719><c> loops</c>

02:06:27.350 --> 02:06:27.360 align:start position:0%
have a few different types of loops
 

02:06:27.360 --> 02:06:28.470 align:start position:0%
have a few different types of loops
the<02:06:27.520><c> first</c><02:06:27.679><c> one</c><02:06:27.840><c> that</c><02:06:27.920><c> i'm</c><02:06:28.079><c> going</c><02:06:28.159><c> to</c><02:06:28.239><c> talk</c>

02:06:28.470 --> 02:06:28.480 align:start position:0%
the first one that i'm going to talk
 

02:06:28.480 --> 02:06:31.109 align:start position:0%
the first one that i'm going to talk
about<02:06:28.800><c> in</c><02:06:28.880><c> this</c><02:06:29.040><c> tutorial</c><02:06:29.679><c> is</c><02:06:30.079><c> for</c><02:06:30.320><c> loops</c>

02:06:31.109 --> 02:06:31.119 align:start position:0%
about in this tutorial is for loops
 

02:06:31.119 --> 02:06:32.870 align:start position:0%
about in this tutorial is for loops
so<02:06:31.360><c> let's</c><02:06:31.520><c> see</c><02:06:31.599><c> how</c><02:06:31.760><c> we</c><02:06:31.920><c> can</c><02:06:32.000><c> use</c><02:06:32.239><c> a</c><02:06:32.400><c> for</c><02:06:32.639><c> loop</c>

02:06:32.870 --> 02:06:32.880 align:start position:0%
so let's see how we can use a for loop
 

02:06:32.880 --> 02:06:35.990 align:start position:0%
so let's see how we can use a for loop
here<02:06:33.280><c> i'm</c><02:06:33.440><c> going</c><02:06:33.520><c> to</c><02:06:33.599><c> delete</c><02:06:34.000><c> all</c><02:06:34.159><c> this</c><02:06:34.320><c> code</c>

02:06:35.990 --> 02:06:36.000 align:start position:0%
here i'm going to delete all this code
 

02:06:36.000 --> 02:06:38.149 align:start position:0%
here i'm going to delete all this code
you<02:06:36.239><c> start</c><02:06:36.480><c> by</c><02:06:36.639><c> typing</c><02:06:36.960><c> the</c><02:06:37.119><c> four</c><02:06:37.360><c> keyword</c>

02:06:38.149 --> 02:06:38.159 align:start position:0%
you start by typing the four keyword
 

02:06:38.159 --> 02:06:39.750 align:start position:0%
you start by typing the four keyword
followed<02:06:38.480><c> by</c><02:06:38.639><c> parentheses</c>

02:06:39.750 --> 02:06:39.760 align:start position:0%
followed by parentheses
 

02:06:39.760 --> 02:06:41.750 align:start position:0%
followed by parentheses
and<02:06:40.159><c> inside</c><02:06:40.480><c> this</c><02:06:40.639><c> parenthesis</c><02:06:41.360><c> we</c><02:06:41.520><c> need</c><02:06:41.679><c> to</c>

02:06:41.750 --> 02:06:41.760 align:start position:0%
and inside this parenthesis we need to
 

02:06:41.760 --> 02:06:43.270 align:start position:0%
and inside this parenthesis we need to
do<02:06:42.159><c> three</c><02:06:42.480><c> things</c>

02:06:43.270 --> 02:06:43.280 align:start position:0%
do three things
 

02:06:43.280 --> 02:06:45.350 align:start position:0%
do three things
first<02:06:43.520><c> we</c><02:06:43.679><c> need</c><02:06:43.760><c> to</c><02:06:43.920><c> declare</c><02:06:44.480><c> a</c><02:06:44.719><c> loop</c><02:06:44.960><c> or</c><02:06:45.119><c> a</c>

02:06:45.350 --> 02:06:45.360 align:start position:0%
first we need to declare a loop or a
 

02:06:45.360 --> 02:06:46.550 align:start position:0%
first we need to declare a loop or a
counter<02:06:45.760><c> variable</c>

02:06:46.550 --> 02:06:46.560 align:start position:0%
counter variable
 

02:06:46.560 --> 02:06:49.750 align:start position:0%
counter variable
so<02:06:46.800><c> let's</c><02:06:46.960><c> declare</c><02:06:47.679><c> a</c><02:06:47.840><c> variable</c><02:06:48.320><c> called</c><02:06:48.719><c> i</c><02:06:49.520><c> and</c>

02:06:49.750 --> 02:06:49.760 align:start position:0%
so let's declare a variable called i and
 

02:06:49.760 --> 02:06:52.229 align:start position:0%
so let's declare a variable called i and
initialize<02:06:50.320><c> it</c><02:06:50.400><c> to</c><02:06:50.560><c> zero</c><02:06:51.440><c> quite</c><02:06:51.679><c> often</c><02:06:51.920><c> we</c><02:06:52.079><c> use</c>

02:06:52.229 --> 02:06:52.239 align:start position:0%
initialize it to zero quite often we use
 

02:06:52.239 --> 02:06:53.830 align:start position:0%
initialize it to zero quite often we use
variable<02:06:52.639><c> names</c><02:06:52.880><c> like</c><02:06:53.199><c> i</c>

02:06:53.830 --> 02:06:53.840 align:start position:0%
variable names like i
 

02:06:53.840 --> 02:06:56.870 align:start position:0%
variable names like i
j<02:06:54.320><c> and</c><02:06:54.560><c> k</c><02:06:54.880><c> for</c><02:06:55.119><c> loop</c><02:06:55.440><c> counters</c>

02:06:56.870 --> 02:06:56.880 align:start position:0%
j and k for loop counters
 

02:06:56.880 --> 02:06:59.510 align:start position:0%
j and k for loop counters
next<02:06:57.119><c> we</c><02:06:57.280><c> add</c><02:06:57.760><c> a</c><02:06:58.000><c> semicolon</c><02:06:58.800><c> to</c><02:06:58.960><c> terminate</c><02:06:59.360><c> the</c>

02:06:59.510 --> 02:06:59.520 align:start position:0%
next we add a semicolon to terminate the
 

02:06:59.520 --> 02:07:00.629 align:start position:0%
next we add a semicolon to terminate the
first<02:06:59.760><c> statement</c>

02:07:00.629 --> 02:07:00.639 align:start position:0%
first statement
 

02:07:00.639 --> 02:07:02.870 align:start position:0%
first statement
then<02:07:00.880><c> we</c><02:07:01.040><c> write</c><02:07:01.360><c> a</c><02:07:01.440><c> boolean</c><02:07:01.920><c> expression</c><02:07:02.639><c> that</c>

02:07:02.870 --> 02:07:02.880 align:start position:0%
then we write a boolean expression that
 

02:07:02.880 --> 02:07:04.550 align:start position:0%
then we write a boolean expression that
determines<02:07:03.520><c> how</c><02:07:03.679><c> many</c><02:07:03.920><c> times</c>

02:07:04.550 --> 02:07:04.560 align:start position:0%
determines how many times
 

02:07:04.560 --> 02:07:07.910 align:start position:0%
determines how many times
this<02:07:04.800><c> loop</c><02:07:05.040><c> is</c><02:07:05.199><c> going</c><02:07:05.280><c> to</c><02:07:05.360><c> get</c><02:07:05.599><c> executed</c><02:07:06.880><c> so</c><02:07:07.520><c> i</c>

02:07:07.910 --> 02:07:07.920 align:start position:0%
this loop is going to get executed so i
 

02:07:07.920 --> 02:07:11.589 align:start position:0%
this loop is going to get executed so i
less<02:07:08.239><c> than</c><02:07:08.880><c> 5</c><02:07:09.520><c> as</c><02:07:09.679><c> long</c><02:07:09.920><c> as</c><02:07:10.079><c> i</c><02:07:10.400><c> is</c><02:07:10.560><c> less</c><02:07:10.719><c> than</c><02:07:11.040><c> 5</c>

02:07:11.589 --> 02:07:11.599 align:start position:0%
less than 5 as long as i is less than 5
 

02:07:11.599 --> 02:07:14.390 align:start position:0%
less than 5 as long as i is less than 5
this<02:07:11.920><c> loop</c><02:07:12.320><c> will</c><02:07:12.480><c> be</c><02:07:12.639><c> executed</c><02:07:13.679><c> once</c><02:07:13.920><c> again</c><02:07:14.159><c> we</c>

02:07:14.390 --> 02:07:14.400 align:start position:0%
this loop will be executed once again we
 

02:07:14.400 --> 02:07:14.790 align:start position:0%
this loop will be executed once again we
add

02:07:14.790 --> 02:07:14.800 align:start position:0%
add
 

02:07:14.800 --> 02:07:18.550 align:start position:0%
add
a<02:07:14.960><c> semicolon</c><02:07:16.079><c> and</c><02:07:16.239><c> finally</c><02:07:16.639><c> we</c><02:07:16.880><c> increment</c><02:07:17.679><c> i</c>

02:07:18.550 --> 02:07:18.560 align:start position:0%
a semicolon and finally we increment i
 

02:07:18.560 --> 02:07:21.189 align:start position:0%
a semicolon and finally we increment i
by<02:07:18.800><c> 1</c><02:07:19.119><c> like</c><02:07:19.280><c> this</c><02:07:20.239><c> so</c><02:07:20.400><c> this</c><02:07:20.560><c> is</c><02:07:20.639><c> the</c><02:07:20.800><c> basic</c>

02:07:21.189 --> 02:07:21.199 align:start position:0%
by 1 like this so this is the basic
 

02:07:21.199 --> 02:07:23.109 align:start position:0%
by 1 like this so this is the basic
structure<02:07:21.679><c> for</c><02:07:21.840><c> a</c><02:07:21.920><c> for</c><02:07:22.239><c> loop</c>

02:07:23.109 --> 02:07:23.119 align:start position:0%
structure for a for loop
 

02:07:23.119 --> 02:07:25.669 align:start position:0%
structure for a for loop
now<02:07:23.920><c> here</c><02:07:24.079><c> we</c><02:07:24.239><c> can</c><02:07:24.400><c> repeat</c><02:07:24.960><c> one</c><02:07:25.280><c> or</c><02:07:25.440><c> more</c>

02:07:25.669 --> 02:07:25.679 align:start position:0%
now here we can repeat one or more
 

02:07:25.679 --> 02:07:27.669 align:start position:0%
now here we can repeat one or more
statements<02:07:26.320><c> using</c><02:07:26.639><c> this</c><02:07:26.800><c> for</c><02:07:27.040><c> loop</c>

02:07:27.669 --> 02:07:27.679 align:start position:0%
statements using this for loop
 

02:07:27.679 --> 02:07:30.550 align:start position:0%
statements using this for loop
so<02:07:27.840><c> we</c><02:07:27.920><c> can</c><02:07:28.079><c> add</c><02:07:28.320><c> our</c><02:07:28.480><c> hello</c><02:07:28.800><c> world</c><02:07:30.159><c> message</c>

02:07:30.550 --> 02:07:30.560 align:start position:0%
so we can add our hello world message
 

02:07:30.560 --> 02:07:31.189 align:start position:0%
so we can add our hello world message
here

02:07:31.189 --> 02:07:31.199 align:start position:0%
here
 

02:07:31.199 --> 02:07:33.030 align:start position:0%
here
now<02:07:31.360><c> here</c><02:07:31.520><c> we</c><02:07:31.679><c> have</c><02:07:31.840><c> a</c><02:07:32.000><c> single</c><02:07:32.400><c> statement</c><02:07:32.800><c> so</c>

02:07:33.030 --> 02:07:33.040 align:start position:0%
now here we have a single statement so
 

02:07:33.040 --> 02:07:34.310 align:start position:0%
now here we have a single statement so
we<02:07:33.119><c> don't</c><02:07:33.280><c> need</c><02:07:33.440><c> braces</c>

02:07:34.310 --> 02:07:34.320 align:start position:0%
we don't need braces
 

02:07:34.320 --> 02:07:35.830 align:start position:0%
we don't need braces
but<02:07:34.480><c> if</c><02:07:34.560><c> you</c><02:07:34.719><c> have</c><02:07:34.800><c> multiple</c><02:07:35.280><c> statements</c><02:07:35.679><c> that</c>

02:07:35.830 --> 02:07:35.840 align:start position:0%
but if you have multiple statements that
 

02:07:35.840 --> 02:07:38.550 align:start position:0%
but if you have multiple statements that
we<02:07:36.000><c> want</c><02:07:36.079><c> to</c><02:07:36.159><c> repeat</c><02:07:36.880><c> we</c><02:07:37.040><c> need</c><02:07:37.199><c> to</c><02:07:37.360><c> define</c>

02:07:38.550 --> 02:07:38.560 align:start position:0%
we want to repeat we need to define
 

02:07:38.560 --> 02:07:41.510 align:start position:0%
we want to repeat we need to define
a<02:07:38.800><c> code</c><02:07:39.119><c> block</c><02:07:40.079><c> here</c><02:07:41.040><c> now</c><02:07:41.280><c> i'm</c><02:07:41.360><c> going</c><02:07:41.440><c> to</c>

02:07:41.510 --> 02:07:41.520 align:start position:0%
a code block here now i'm going to
 

02:07:41.520 --> 02:07:42.709 align:start position:0%
a code block here now i'm going to
remove<02:07:41.840><c> this</c><02:07:42.159><c> because</c>

02:07:42.709 --> 02:07:42.719 align:start position:0%
remove this because
 

02:07:42.719 --> 02:07:44.950 align:start position:0%
remove this because
we<02:07:42.800><c> don't</c><02:07:42.960><c> really</c><02:07:43.199><c> need</c><02:07:43.440><c> them</c><02:07:44.400><c> so</c><02:07:44.560><c> let's</c><02:07:44.800><c> run</c>

02:07:44.950 --> 02:07:44.960 align:start position:0%
we don't really need them so let's run
 

02:07:44.960 --> 02:07:47.510 align:start position:0%
we don't really need them so let's run
this<02:07:45.199><c> code</c><02:07:45.440><c> and</c><02:07:45.599><c> see</c><02:07:45.760><c> what</c><02:07:45.920><c> we</c><02:07:46.079><c> get</c>

02:07:47.510 --> 02:07:47.520 align:start position:0%
this code and see what we get
 

02:07:47.520 --> 02:07:49.830 align:start position:0%
this code and see what we get
you<02:07:47.679><c> get</c><02:07:47.840><c> hello</c><02:07:48.159><c> world</c><02:07:48.719><c> printed</c><02:07:49.280><c> five</c><02:07:49.520><c> times</c>

02:07:49.830 --> 02:07:49.840 align:start position:0%
you get hello world printed five times
 

02:07:49.840 --> 02:07:51.350 align:start position:0%
you get hello world printed five times
on<02:07:49.920><c> the</c><02:07:50.079><c> terminal</c><02:07:50.480><c> beautiful</c>

02:07:51.350 --> 02:07:51.360 align:start position:0%
on the terminal beautiful
 

02:07:51.360 --> 02:07:53.109 align:start position:0%
on the terminal beautiful
now<02:07:51.599><c> let</c><02:07:51.760><c> me</c><02:07:51.840><c> explain</c><02:07:52.239><c> how</c><02:07:52.400><c> this</c><02:07:52.639><c> code</c><02:07:52.880><c> gets</c>

02:07:53.109 --> 02:07:53.119 align:start position:0%
now let me explain how this code gets
 

02:07:53.119 --> 02:07:56.149 align:start position:0%
now let me explain how this code gets
executed<02:07:54.320><c> when</c><02:07:54.560><c> java</c><02:07:54.880><c> sees</c><02:07:55.119><c> this</c><02:07:55.280><c> for</c><02:07:55.520><c> loop</c>

02:07:56.149 --> 02:07:56.159 align:start position:0%
executed when java sees this for loop
 

02:07:56.159 --> 02:07:59.270 align:start position:0%
executed when java sees this for loop
first<02:07:56.480><c> it</c><02:07:56.639><c> will</c><02:07:56.800><c> execute</c><02:07:57.599><c> this</c><02:07:57.840><c> statement</c>

02:07:59.270 --> 02:07:59.280 align:start position:0%
first it will execute this statement
 

02:07:59.280 --> 02:08:02.709 align:start position:0%
first it will execute this statement
so<02:07:59.440><c> here</c><02:07:59.599><c> we</c><02:07:59.679><c> are</c><02:07:59.840><c> initializing</c><02:08:00.480><c> i</c><02:08:00.719><c> to</c><02:08:00.880><c> 0.</c><02:08:01.840><c> then</c>

02:08:02.709 --> 02:08:02.719 align:start position:0%
so here we are initializing i to 0. then
 

02:08:02.719 --> 02:08:05.189 align:start position:0%
so here we are initializing i to 0. then
java<02:08:03.199><c> evaluates</c><02:08:03.840><c> this</c><02:08:04.000><c> condition</c><02:08:04.880><c> is</c><02:08:05.040><c> this</c>

02:08:05.189 --> 02:08:05.199 align:start position:0%
java evaluates this condition is this
 

02:08:05.199 --> 02:08:06.229 align:start position:0%
java evaluates this condition is this
condition<02:08:05.599><c> true</c>

02:08:06.229 --> 02:08:06.239 align:start position:0%
condition true
 

02:08:06.239 --> 02:08:07.830 align:start position:0%
condition true
obviously<02:08:06.719><c> it</c><02:08:06.800><c> is</c><02:08:06.960><c> because</c><02:08:07.280><c> zero</c><02:08:07.520><c> is</c><02:08:07.599><c> less</c>

02:08:07.830 --> 02:08:07.840 align:start position:0%
obviously it is because zero is less
 

02:08:07.840 --> 02:08:10.390 align:start position:0%
obviously it is because zero is less
than<02:08:08.079><c> five</c><02:08:08.880><c> so</c><02:08:09.040><c> the</c><02:08:09.199><c> control</c><02:08:09.679><c> moves</c>

02:08:10.390 --> 02:08:10.400 align:start position:0%
than five so the control moves
 

02:08:10.400 --> 02:08:13.430 align:start position:0%
than five so the control moves
to<02:08:10.560><c> line</c><02:08:10.880><c> seven</c><02:08:11.440><c> this</c><02:08:11.679><c> line</c><02:08:11.920><c> gets</c><02:08:12.239><c> executed</c>

02:08:13.430 --> 02:08:13.440 align:start position:0%
to line seven this line gets executed
 

02:08:13.440 --> 02:08:15.510 align:start position:0%
to line seven this line gets executed
now<02:08:13.679><c> at</c><02:08:13.840><c> the</c><02:08:14.000><c> end</c><02:08:14.239><c> of</c><02:08:14.320><c> this</c><02:08:14.560><c> iteration</c><02:08:15.119><c> or</c><02:08:15.360><c> at</c>

02:08:15.510 --> 02:08:15.520 align:start position:0%
now at the end of this iteration or at
 

02:08:15.520 --> 02:08:16.629 align:start position:0%
now at the end of this iteration or at
the<02:08:15.679><c> end</c><02:08:15.840><c> of</c><02:08:15.920><c> this</c><02:08:16.159><c> loop</c>

02:08:16.629 --> 02:08:16.639 align:start position:0%
the end of this loop
 

02:08:16.639 --> 02:08:19.189 align:start position:0%
the end of this loop
the<02:08:16.880><c> control</c><02:08:17.599><c> moves</c><02:08:17.920><c> here</c><02:08:18.560><c> so</c><02:08:18.800><c> i</c><02:08:19.040><c> is</c>

02:08:19.189 --> 02:08:19.199 align:start position:0%
the control moves here so i is
 

02:08:19.199 --> 02:08:20.870 align:start position:0%
the control moves here so i is
incremented<02:08:19.840><c> by</c><02:08:20.079><c> one</c>

02:08:20.870 --> 02:08:20.880 align:start position:0%
incremented by one
 

02:08:20.880 --> 02:08:22.950 align:start position:0%
incremented by one
now<02:08:21.119><c> we're</c><02:08:21.360><c> at</c><02:08:21.440><c> the</c><02:08:21.679><c> beginning</c><02:08:22.239><c> of</c><02:08:22.320><c> the</c><02:08:22.560><c> second</c>

02:08:22.950 --> 02:08:22.960 align:start position:0%
now we're at the beginning of the second
 

02:08:22.960 --> 02:08:24.709 align:start position:0%
now we're at the beginning of the second
iteration<02:08:23.840><c> once</c><02:08:24.079><c> again</c>

02:08:24.709 --> 02:08:24.719 align:start position:0%
iteration once again
 

02:08:24.719 --> 02:08:27.189 align:start position:0%
iteration once again
this<02:08:24.960><c> condition</c><02:08:25.360><c> is</c><02:08:25.520><c> evaluated</c><02:08:26.560><c> is</c><02:08:26.800><c> one</c><02:08:27.040><c> less</c>

02:08:27.189 --> 02:08:27.199 align:start position:0%
this condition is evaluated is one less
 

02:08:27.199 --> 02:08:27.990 align:start position:0%
this condition is evaluated is one less
than<02:08:27.440><c> five</c>

02:08:27.990 --> 02:08:28.000 align:start position:0%
than five
 

02:08:28.000 --> 02:08:31.030 align:start position:0%
than five
obviously<02:08:28.480><c> it</c><02:08:28.639><c> is</c><02:08:28.880><c> so</c><02:08:29.520><c> once</c><02:08:29.760><c> again</c><02:08:30.480><c> the</c><02:08:30.719><c> body</c>

02:08:31.030 --> 02:08:31.040 align:start position:0%
obviously it is so once again the body
 

02:08:31.040 --> 02:08:33.510 align:start position:0%
obviously it is so once again the body
of<02:08:31.119><c> this</c><02:08:31.360><c> loop</c><02:08:31.679><c> gets</c><02:08:32.000><c> executed</c>

02:08:33.510 --> 02:08:33.520 align:start position:0%
of this loop gets executed
 

02:08:33.520 --> 02:08:35.830 align:start position:0%
of this loop gets executed
now<02:08:33.840><c> fast</c><02:08:34.079><c> forward</c><02:08:34.880><c> at</c><02:08:35.040><c> the</c><02:08:35.199><c> end</c><02:08:35.360><c> of</c><02:08:35.440><c> the</c><02:08:35.520><c> fifth</c>

02:08:35.830 --> 02:08:35.840 align:start position:0%
now fast forward at the end of the fifth
 

02:08:35.840 --> 02:08:36.629 align:start position:0%
now fast forward at the end of the fifth
iteration

02:08:36.629 --> 02:08:36.639 align:start position:0%
iteration
 

02:08:36.639 --> 02:08:39.750 align:start position:0%
iteration
i<02:08:36.880><c> will</c><02:08:37.040><c> become</c><02:08:37.440><c> five</c><02:08:38.320><c> five</c><02:08:38.719><c> is</c><02:08:38.960><c> not</c><02:08:39.199><c> less</c><02:08:39.440><c> than</c>

02:08:39.750 --> 02:08:39.760 align:start position:0%
i will become five five is not less than
 

02:08:39.760 --> 02:08:40.149 align:start position:0%
i will become five five is not less than
five

02:08:40.149 --> 02:08:40.159 align:start position:0%
five
 

02:08:40.159 --> 02:08:42.870 align:start position:0%
five
so<02:08:40.560><c> the</c><02:08:40.719><c> loop</c><02:08:40.960><c> condition</c><02:08:41.360><c> will</c><02:08:41.520><c> be</c><02:08:41.840><c> false</c><02:08:42.400><c> and</c>

02:08:42.870 --> 02:08:42.880 align:start position:0%
so the loop condition will be false and
 

02:08:42.880 --> 02:08:43.750 align:start position:0%
so the loop condition will be false and
control<02:08:43.280><c> moves</c>

02:08:43.750 --> 02:08:43.760 align:start position:0%
control moves
 

02:08:43.760 --> 02:08:46.310 align:start position:0%
control moves
outside<02:08:44.480><c> of</c><02:08:44.639><c> this</c><02:08:44.880><c> for</c><02:08:45.119><c> loop</c><02:08:45.840><c> now</c><02:08:46.000><c> here's</c><02:08:46.239><c> one</c>

02:08:46.310 --> 02:08:46.320 align:start position:0%
outside of this for loop now here's one
 

02:08:46.320 --> 02:08:47.589 align:start position:0%
outside of this for loop now here's one
thing<02:08:46.480><c> you</c><02:08:46.560><c> need</c><02:08:46.719><c> to</c><02:08:46.800><c> remember</c><02:08:47.280><c> if</c><02:08:47.360><c> you</c><02:08:47.520><c> want</c>

02:08:47.589 --> 02:08:47.599 align:start position:0%
thing you need to remember if you want
 

02:08:47.599 --> 02:08:49.510 align:start position:0%
thing you need to remember if you want
to<02:08:47.679><c> execute</c><02:08:48.159><c> something</c><02:08:48.560><c> five</c><02:08:48.880><c> times</c>

02:08:49.510 --> 02:08:49.520 align:start position:0%
to execute something five times
 

02:08:49.520 --> 02:08:52.069 align:start position:0%
to execute something five times
you<02:08:49.679><c> can</c><02:08:49.840><c> initialize</c><02:08:50.800><c> your</c><02:08:51.040><c> loop</c><02:08:51.360><c> counter</c><02:08:51.840><c> or</c>

02:08:52.069 --> 02:08:52.079 align:start position:0%
you can initialize your loop counter or
 

02:08:52.079 --> 02:08:53.589 align:start position:0%
you can initialize your loop counter or
loop<02:08:52.320><c> variable</c><02:08:52.719><c> to</c><02:08:52.880><c> zero</c>

02:08:53.589 --> 02:08:53.599 align:start position:0%
loop variable to zero
 

02:08:53.599 --> 02:08:55.750 align:start position:0%
loop variable to zero
and<02:08:53.760><c> use</c><02:08:54.000><c> the</c><02:08:54.159><c> less</c><02:08:54.400><c> than</c><02:08:54.639><c> operator</c><02:08:55.040><c> here</c>

02:08:55.750 --> 02:08:55.760 align:start position:0%
and use the less than operator here
 

02:08:55.760 --> 02:08:56.629 align:start position:0%
and use the less than operator here
another<02:08:56.079><c> way</c>

02:08:56.629 --> 02:08:56.639 align:start position:0%
another way
 

02:08:56.639 --> 02:08:59.109 align:start position:0%
another way
is<02:08:56.800><c> to</c><02:08:57.040><c> initialize</c><02:08:57.520><c> this</c><02:08:57.760><c> to</c><02:08:57.920><c> one</c><02:08:58.320><c> and</c><02:08:58.400><c> then</c>

02:08:59.109 --> 02:08:59.119 align:start position:0%
is to initialize this to one and then
 

02:08:59.119 --> 02:09:00.790 align:start position:0%
is to initialize this to one and then
use<02:08:59.360><c> the</c><02:08:59.599><c> less</c><02:08:59.840><c> than</c><02:09:00.159><c> or</c>

02:09:00.790 --> 02:09:00.800 align:start position:0%
use the less than or
 

02:09:00.800 --> 02:09:03.350 align:start position:0%
use the less than or
equal<02:09:01.119><c> to</c><02:09:01.280><c> operator</c><02:09:01.760><c> here</c><02:09:02.719><c> now</c><02:09:02.880><c> to</c><02:09:03.040><c> make</c><02:09:03.199><c> this</c>

02:09:03.350 --> 02:09:03.360 align:start position:0%
equal to operator here now to make this
 

02:09:03.360 --> 02:09:04.310 align:start position:0%
equal to operator here now to make this
more<02:09:03.520><c> interesting</c>

02:09:04.310 --> 02:09:04.320 align:start position:0%
more interesting
 

02:09:04.320 --> 02:09:07.030 align:start position:0%
more interesting
let's<02:09:04.560><c> print</c><02:09:05.040><c> i</c><02:09:05.599><c> over</c><02:09:05.840><c> here</c><02:09:06.320><c> so</c><02:09:06.480><c> here</c><02:09:06.639><c> we</c><02:09:06.800><c> add</c><02:09:06.960><c> a</c>

02:09:07.030 --> 02:09:07.040 align:start position:0%
let's print i over here so here we add a
 

02:09:07.040 --> 02:09:08.310 align:start position:0%
let's print i over here so here we add a
space<02:09:07.520><c> and</c><02:09:07.679><c> then</c>

02:09:08.310 --> 02:09:08.320 align:start position:0%
space and then
 

02:09:08.320 --> 02:09:11.510 align:start position:0%
space and then
concatenate<02:09:08.960><c> this</c><02:09:09.199><c> string</c><02:09:09.599><c> with</c><02:09:10.159><c> i</c><02:09:11.280><c> take</c><02:09:11.440><c> a</c>

02:09:11.510 --> 02:09:11.520 align:start position:0%
concatenate this string with i take a
 

02:09:11.520 --> 02:09:12.790 align:start position:0%
concatenate this string with i take a
look

02:09:12.790 --> 02:09:12.800 align:start position:0%
look
 

02:09:12.800 --> 02:09:15.350 align:start position:0%
look
so<02:09:13.040><c> we</c><02:09:13.199><c> get</c><02:09:13.360><c> hello</c><02:09:13.679><c> world</c><02:09:14.159><c> one</c><02:09:14.560><c> two</c><02:09:14.800><c> three</c><02:09:15.119><c> four</c>

02:09:15.350 --> 02:09:15.360 align:start position:0%
so we get hello world one two three four
 

02:09:15.360 --> 02:09:15.990 align:start position:0%
so we get hello world one two three four
five

02:09:15.990 --> 02:09:16.000 align:start position:0%
five
 

02:09:16.000 --> 02:09:19.430 align:start position:0%
five
in<02:09:16.159><c> contrast</c><02:09:17.040><c> if</c><02:09:17.199><c> we</c><02:09:17.360><c> initialize</c><02:09:17.920><c> i</c><02:09:18.159><c> to</c><02:09:18.320><c> 0</c>

02:09:19.430 --> 02:09:19.440 align:start position:0%
in contrast if we initialize i to 0
 

02:09:19.440 --> 02:09:23.430 align:start position:0%
in contrast if we initialize i to 0
and<02:09:19.679><c> use</c><02:09:19.920><c> the</c><02:09:20.159><c> less</c><02:09:20.320><c> than</c><02:09:20.560><c> operator</c>

02:09:23.430 --> 02:09:23.440 align:start position:0%
 
 

02:09:23.440 --> 02:09:26.550 align:start position:0%
 
we<02:09:23.599><c> would</c><02:09:23.760><c> get</c><02:09:24.159><c> hello</c><02:09:24.400><c> world</c><02:09:24.639><c> 0</c><02:09:25.119><c> 1</c><02:09:25.280><c> 2</c><02:09:25.440><c> 3</c><02:09:25.679><c> 4.</c>

02:09:26.550 --> 02:09:26.560 align:start position:0%
we would get hello world 0 1 2 3 4.
 

02:09:26.560 --> 02:09:28.149 align:start position:0%
we would get hello world 0 1 2 3 4.
we<02:09:26.719><c> can</c><02:09:26.880><c> also</c><02:09:27.119><c> print</c><02:09:27.440><c> these</c><02:09:27.599><c> numbers</c><02:09:28.079><c> in</c>

02:09:28.149 --> 02:09:28.159 align:start position:0%
we can also print these numbers in
 

02:09:28.159 --> 02:09:29.830 align:start position:0%
we can also print these numbers in
reverse<02:09:28.560><c> order</c><02:09:29.360><c> so</c>

02:09:29.830 --> 02:09:29.840 align:start position:0%
reverse order so
 

02:09:29.840 --> 02:09:33.109 align:start position:0%
reverse order so
we<02:09:30.079><c> initialize</c><02:09:30.719><c> i</c><02:09:31.360><c> to</c><02:09:31.599><c> five</c><02:09:32.800><c> and</c>

02:09:33.109 --> 02:09:33.119 align:start position:0%
we initialize i to five and
 

02:09:33.119 --> 02:09:35.510 align:start position:0%
we initialize i to five and
execute<02:09:33.520><c> this</c><02:09:33.760><c> loop</c><02:09:34.239><c> as</c><02:09:34.400><c> long</c><02:09:34.639><c> as</c><02:09:34.880><c> i</c><02:09:35.199><c> is</c>

02:09:35.510 --> 02:09:35.520 align:start position:0%
execute this loop as long as i is
 

02:09:35.520 --> 02:09:36.950 align:start position:0%
execute this loop as long as i is
greater<02:09:36.000><c> than</c>

02:09:36.950 --> 02:09:36.960 align:start position:0%
greater than
 

02:09:36.960 --> 02:09:40.310 align:start position:0%
greater than
zero<02:09:38.239><c> but</c><02:09:38.400><c> here</c><02:09:38.719><c> instead</c><02:09:38.960><c> of</c><02:09:39.199><c> incrementing</c><02:09:39.760><c> i</c>

02:09:40.310 --> 02:09:40.320 align:start position:0%
zero but here instead of incrementing i
 

02:09:40.320 --> 02:09:44.069 align:start position:0%
zero but here instead of incrementing i
we<02:09:40.480><c> decrement</c><02:09:41.119><c> it</c><02:09:42.159><c> now</c>

02:09:44.069 --> 02:09:44.079 align:start position:0%
we decrement it now
 

02:09:44.079 --> 02:09:46.149 align:start position:0%
we decrement it now
we<02:09:44.239><c> get</c><02:09:44.400><c> hello</c><02:09:44.639><c> world</c><02:09:45.040><c> five</c><02:09:45.280><c> four</c><02:09:45.599><c> three</c><02:09:45.920><c> two</c>

02:09:46.149 --> 02:09:46.159 align:start position:0%
we get hello world five four three two
 

02:09:46.159 --> 02:09:48.229 align:start position:0%
we get hello world five four three two
one<02:09:47.040><c> so</c><02:09:47.280><c> this</c><02:09:47.440><c> is</c><02:09:47.520><c> all</c><02:09:47.679><c> about</c>

02:09:48.229 --> 02:09:48.239 align:start position:0%
one so this is all about
 

02:09:48.239 --> 02:09:50.149 align:start position:0%
one so this is all about
four<02:09:48.480><c> loops</c><02:09:49.040><c> next</c><02:09:49.280><c> we're</c><02:09:49.440><c> going</c><02:09:49.520><c> to</c><02:09:49.599><c> look</c><02:09:49.760><c> at</c>

02:09:50.149 --> 02:09:50.159 align:start position:0%
four loops next we're going to look at
 

02:09:50.159 --> 02:09:56.950 align:start position:0%
four loops next we're going to look at
while<02:09:50.400><c> loops</c>

02:09:56.950 --> 02:09:56.960 align:start position:0%
 
 

02:09:56.960 --> 02:09:58.149 align:start position:0%
 
in<02:09:57.040><c> this</c><02:09:57.199><c> tutorial</c><02:09:57.679><c> we're</c><02:09:57.760><c> going</c><02:09:57.920><c> to</c><02:09:58.000><c> talk</c>

02:09:58.149 --> 02:09:58.159 align:start position:0%
in this tutorial we're going to talk
 

02:09:58.159 --> 02:10:00.390 align:start position:0%
in this tutorial we're going to talk
about<02:09:58.560><c> while</c><02:09:58.880><c> loops</c><02:09:59.280><c> in</c><02:09:59.520><c> java</c>

02:10:00.390 --> 02:10:00.400 align:start position:0%
about while loops in java
 

02:10:00.400 --> 02:10:01.990 align:start position:0%
about while loops in java
while<02:10:00.560><c> loops</c><02:10:00.880><c> are</c><02:10:00.960><c> very</c><02:10:01.199><c> similar</c><02:10:01.520><c> to</c><02:10:01.760><c> for</c>

02:10:01.990 --> 02:10:02.000 align:start position:0%
while loops are very similar to for
 

02:10:02.000 --> 02:10:03.910 align:start position:0%
while loops are very similar to for
loops<02:10:02.320><c> in</c><02:10:02.400><c> terms</c><02:10:02.639><c> of</c><02:10:02.719><c> their</c><02:10:02.960><c> functionality</c>

02:10:03.910 --> 02:10:03.920 align:start position:0%
loops in terms of their functionality
 

02:10:03.920 --> 02:10:05.750 align:start position:0%
loops in terms of their functionality
but<02:10:04.079><c> they're</c><02:10:04.320><c> different</c><02:10:04.639><c> in</c><02:10:04.719><c> terms</c><02:10:05.040><c> of</c><02:10:05.119><c> syntax</c>

02:10:05.750 --> 02:10:05.760 align:start position:0%
but they're different in terms of syntax
 

02:10:05.760 --> 02:10:07.270 align:start position:0%
but they're different in terms of syntax
let<02:10:05.920><c> me</c><02:10:06.079><c> show</c><02:10:06.239><c> you</c><02:10:06.800><c> so</c><02:10:06.960><c> we're</c><02:10:07.119><c> going</c><02:10:07.199><c> to</c>

02:10:07.270 --> 02:10:07.280 align:start position:0%
let me show you so we're going to
 

02:10:07.280 --> 02:10:08.870 align:start position:0%
let me show you so we're going to
continue<02:10:07.599><c> with</c><02:10:07.760><c> the</c><02:10:07.920><c> example</c><02:10:08.320><c> from</c><02:10:08.480><c> the</c><02:10:08.639><c> last</c>

02:10:08.870 --> 02:10:08.880 align:start position:0%
continue with the example from the last
 

02:10:08.880 --> 02:10:09.750 align:start position:0%
continue with the example from the last
tutorial

02:10:09.750 --> 02:10:09.760 align:start position:0%
tutorial
 

02:10:09.760 --> 02:10:11.669 align:start position:0%
tutorial
i'm<02:10:09.920><c> going</c><02:10:10.000><c> to</c><02:10:10.159><c> rewrite</c><02:10:10.480><c> this</c><02:10:10.719><c> code</c><02:10:11.199><c> using</c><02:10:11.520><c> a</c>

02:10:11.669 --> 02:10:11.679 align:start position:0%
i'm going to rewrite this code using a
 

02:10:11.679 --> 02:10:12.790 align:start position:0%
i'm going to rewrite this code using a
while<02:10:12.000><c> loop</c>

02:10:12.790 --> 02:10:12.800 align:start position:0%
while loop
 

02:10:12.800 --> 02:10:16.229 align:start position:0%
while loop
so<02:10:13.360><c> first</c><02:10:13.599><c> we</c><02:10:13.760><c> declare</c><02:10:14.719><c> a</c><02:10:14.880><c> loop</c><02:10:15.119><c> variable</c>

02:10:16.229 --> 02:10:16.239 align:start position:0%
so first we declare a loop variable
 

02:10:16.239 --> 02:10:19.189 align:start position:0%
so first we declare a loop variable
and<02:10:16.560><c> i</c><02:10:16.800><c> we</c><02:10:17.040><c> initialize</c><02:10:17.520><c> it</c><02:10:17.599><c> to</c><02:10:17.760><c> zero</c><02:10:18.719><c> next</c><02:10:18.960><c> we</c>

02:10:19.189 --> 02:10:19.199 align:start position:0%
and i we initialize it to zero next we
 

02:10:19.199 --> 02:10:19.669 align:start position:0%
and i we initialize it to zero next we
type

02:10:19.669 --> 02:10:19.679 align:start position:0%
type
 

02:10:19.679 --> 02:10:22.390 align:start position:0%
type
while<02:10:20.719><c> and</c><02:10:20.880><c> here</c><02:10:21.119><c> in</c><02:10:21.199><c> parenthesis</c><02:10:21.760><c> we</c><02:10:22.000><c> type</c>

02:10:22.390 --> 02:10:22.400 align:start position:0%
while and here in parenthesis we type
 

02:10:22.400 --> 02:10:24.470 align:start position:0%
while and here in parenthesis we type
our<02:10:22.639><c> loop</c><02:10:22.960><c> condition</c>

02:10:24.470 --> 02:10:24.480 align:start position:0%
our loop condition
 

02:10:24.480 --> 02:10:27.669 align:start position:0%
our loop condition
while<02:10:24.800><c> i</c><02:10:25.040><c> is</c><02:10:25.280><c> greater</c><02:10:25.599><c> than</c><02:10:25.840><c> zero</c><02:10:26.960><c> then</c><02:10:27.440><c> we're</c>

02:10:27.669 --> 02:10:27.679 align:start position:0%
while i is greater than zero then we're
 

02:10:27.679 --> 02:10:29.189 align:start position:0%
while i is greater than zero then we're
going<02:10:27.760><c> to</c><02:10:27.920><c> execute</c><02:10:28.400><c> the</c><02:10:28.639><c> code</c>

02:10:29.189 --> 02:10:29.199 align:start position:0%
going to execute the code
 

02:10:29.199 --> 02:10:31.350 align:start position:0%
going to execute the code
inside<02:10:29.599><c> this</c><02:10:29.840><c> block</c><02:10:30.480><c> so</c><02:10:30.639><c> i'm</c><02:10:30.719><c> going</c><02:10:30.800><c> to</c><02:10:30.960><c> copy</c>

02:10:31.350 --> 02:10:31.360 align:start position:0%
inside this block so i'm going to copy
 

02:10:31.360 --> 02:10:33.350 align:start position:0%
inside this block so i'm going to copy
this<02:10:32.000><c> from</c><02:10:32.239><c> here</c>

02:10:33.350 --> 02:10:33.360 align:start position:0%
this from here
 

02:10:33.360 --> 02:10:35.669 align:start position:0%
this from here
paste<02:10:33.599><c> it</c><02:10:33.760><c> in</c><02:10:33.840><c> this</c><02:10:34.000><c> block</c><02:10:34.960><c> and</c><02:10:35.199><c> finally</c><02:10:35.599><c> we</c>

02:10:35.669 --> 02:10:35.679 align:start position:0%
paste it in this block and finally we
 

02:10:35.679 --> 02:10:36.870 align:start position:0%
paste it in this block and finally we
need<02:10:35.840><c> to</c><02:10:35.920><c> decrement</c>

02:10:36.870 --> 02:10:36.880 align:start position:0%
need to decrement
 

02:10:36.880 --> 02:10:40.069 align:start position:0%
need to decrement
i<02:10:38.239><c> like</c><02:10:38.800><c> this</c><02:10:39.760><c> so</c>

02:10:40.069 --> 02:10:40.079 align:start position:0%
i like this so
 

02:10:40.079 --> 02:10:41.830 align:start position:0%
i like this so
at<02:10:40.159><c> the</c><02:10:40.320><c> end</c><02:10:40.560><c> of</c><02:10:40.639><c> each</c><02:10:40.880><c> iteration</c><02:10:41.599><c> we</c>

02:10:41.830 --> 02:10:41.840 align:start position:0%
at the end of each iteration we
 

02:10:41.840 --> 02:10:44.629 align:start position:0%
at the end of each iteration we
decrement<02:10:42.400><c> i</c><02:10:42.800><c> just</c><02:10:42.960><c> like</c><02:10:43.199><c> our</c><02:10:43.360><c> for</c><02:10:43.599><c> loops</c>

02:10:44.629 --> 02:10:44.639 align:start position:0%
decrement i just like our for loops
 

02:10:44.639 --> 02:10:46.069 align:start position:0%
decrement i just like our for loops
so<02:10:44.880><c> as</c><02:10:45.040><c> you</c><02:10:45.119><c> can</c><02:10:45.199><c> see</c><02:10:45.440><c> we</c><02:10:45.520><c> can</c><02:10:45.679><c> achieve</c><02:10:45.920><c> the</c>

02:10:46.069 --> 02:10:46.079 align:start position:0%
so as you can see we can achieve the
 

02:10:46.079 --> 02:10:48.390 align:start position:0%
so as you can see we can achieve the
same<02:10:46.400><c> thing</c><02:10:46.880><c> using</c><02:10:47.199><c> a</c><02:10:47.360><c> for</c><02:10:47.599><c> loop</c><02:10:47.920><c> or</c>

02:10:48.390 --> 02:10:48.400 align:start position:0%
same thing using a for loop or
 

02:10:48.400 --> 02:10:51.030 align:start position:0%
same thing using a for loop or
a<02:10:48.639><c> while</c><02:10:48.880><c> loop</c><02:10:49.520><c> however</c><02:10:50.239><c> the</c><02:10:50.400><c> implementation</c>

02:10:51.030 --> 02:10:51.040 align:start position:0%
a while loop however the implementation
 

02:10:51.040 --> 02:10:52.229 align:start position:0%
a while loop however the implementation
using<02:10:51.280><c> the</c><02:10:51.520><c> for</c><02:10:51.760><c> loop</c>

02:10:52.229 --> 02:10:52.239 align:start position:0%
using the for loop
 

02:10:52.239 --> 02:10:55.030 align:start position:0%
using the for loop
is<02:10:52.400><c> a</c><02:10:52.480><c> little</c><02:10:52.639><c> bit</c><02:10:52.880><c> lighter</c><02:10:53.360><c> and</c><02:10:53.920><c> cleaner</c><02:10:54.719><c> so</c>

02:10:55.030 --> 02:10:55.040 align:start position:0%
is a little bit lighter and cleaner so
 

02:10:55.040 --> 02:10:56.390 align:start position:0%
is a little bit lighter and cleaner so
in<02:10:55.199><c> situations</c><02:10:55.760><c> where</c>

02:10:56.390 --> 02:10:56.400 align:start position:0%
in situations where
 

02:10:56.400 --> 02:10:58.390 align:start position:0%
in situations where
you<02:10:56.560><c> know</c><02:10:56.800><c> ahead</c><02:10:57.119><c> of</c><02:10:57.199><c> time</c><02:10:57.599><c> how</c><02:10:57.760><c> many</c><02:10:58.000><c> times</c>

02:10:58.390 --> 02:10:58.400 align:start position:0%
you know ahead of time how many times
 

02:10:58.400 --> 02:10:59.750 align:start position:0%
you know ahead of time how many times
you<02:10:58.560><c> want</c><02:10:58.719><c> to</c><02:10:58.880><c> execute</c>

02:10:59.750 --> 02:10:59.760 align:start position:0%
you want to execute
 

02:10:59.760 --> 02:11:02.069 align:start position:0%
you want to execute
one<02:11:00.000><c> or</c><02:11:00.159><c> more</c><02:11:00.400><c> statements</c><02:11:01.360><c> it's</c><02:11:01.599><c> better</c><02:11:01.920><c> to</c>

02:11:02.069 --> 02:11:02.079 align:start position:0%
one or more statements it's better to
 

02:11:02.079 --> 02:11:03.510 align:start position:0%
one or more statements it's better to
use<02:11:02.320><c> a</c><02:11:02.400><c> for</c><02:11:02.639><c> loop</c>

02:11:03.510 --> 02:11:03.520 align:start position:0%
use a for loop
 

02:11:03.520 --> 02:11:04.950 align:start position:0%
use a for loop
while<02:11:03.679><c> loops</c><02:11:04.000><c> are</c><02:11:04.079><c> better</c><02:11:04.320><c> in</c><02:11:04.400><c> situations</c>

02:11:04.950 --> 02:11:04.960 align:start position:0%
while loops are better in situations
 

02:11:04.960 --> 02:11:06.709 align:start position:0%
while loops are better in situations
where<02:11:05.360><c> we</c><02:11:05.520><c> don't</c><02:11:05.760><c> know</c><02:11:06.000><c> exactly</c>

02:11:06.709 --> 02:11:06.719 align:start position:0%
where we don't know exactly
 

02:11:06.719 --> 02:11:07.990 align:start position:0%
where we don't know exactly
how<02:11:06.880><c> many</c><02:11:07.119><c> times</c><02:11:07.360><c> we</c><02:11:07.520><c> want</c><02:11:07.599><c> to</c><02:11:07.679><c> repeat</c>

02:11:07.990 --> 02:11:08.000 align:start position:0%
how many times we want to repeat
 

02:11:08.000 --> 02:11:10.069 align:start position:0%
how many times we want to repeat
something<02:11:08.880><c> for</c><02:11:09.040><c> example</c><02:11:09.679><c> let's</c><02:11:09.840><c> say</c><02:11:10.000><c> we're</c>

02:11:10.069 --> 02:11:10.079 align:start position:0%
something for example let's say we're
 

02:11:10.079 --> 02:11:11.189 align:start position:0%
something for example let's say we're
going<02:11:10.159><c> to</c><02:11:10.239><c> write</c><02:11:10.480><c> a</c><02:11:10.560><c> program</c>

02:11:11.189 --> 02:11:11.199 align:start position:0%
going to write a program
 

02:11:11.199 --> 02:11:13.669 align:start position:0%
going to write a program
and<02:11:11.440><c> ask</c><02:11:11.679><c> the</c><02:11:11.840><c> user</c><02:11:12.239><c> to</c><02:11:12.719><c> continuously</c><02:11:13.360><c> enter</c>

02:11:13.669 --> 02:11:13.679 align:start position:0%
and ask the user to continuously enter
 

02:11:13.679 --> 02:11:14.390 align:start position:0%
and ask the user to continuously enter
something

02:11:14.390 --> 02:11:14.400 align:start position:0%
something
 

02:11:14.400 --> 02:11:16.470 align:start position:0%
something
until<02:11:14.800><c> they</c><02:11:14.960><c> type</c><02:11:15.360><c> quit</c><02:11:15.840><c> the</c><02:11:16.000><c> moment</c><02:11:16.320><c> they</c>

02:11:16.470 --> 02:11:16.480 align:start position:0%
until they type quit the moment they
 

02:11:16.480 --> 02:11:18.069 align:start position:0%
until they type quit the moment they
type<02:11:16.719><c> quit</c><02:11:17.119><c> we're</c><02:11:17.280><c> going</c><02:11:17.440><c> to</c><02:11:17.520><c> terminate</c><02:11:17.920><c> the</c>

02:11:18.069 --> 02:11:18.079 align:start position:0%
type quit we're going to terminate the
 

02:11:18.079 --> 02:11:18.950 align:start position:0%
type quit we're going to terminate the
program

02:11:18.950 --> 02:11:18.960 align:start position:0%
program
 

02:11:18.960 --> 02:11:20.550 align:start position:0%
program
in<02:11:19.040><c> that</c><02:11:19.199><c> situation</c><02:11:19.760><c> we</c><02:11:19.840><c> don't</c><02:11:20.000><c> know</c><02:11:20.159><c> how</c><02:11:20.320><c> many</c>

02:11:20.550 --> 02:11:20.560 align:start position:0%
in that situation we don't know how many
 

02:11:20.560 --> 02:11:22.229 align:start position:0%
in that situation we don't know how many
times<02:11:20.960><c> the</c><02:11:21.119><c> user</c><02:11:21.440><c> is</c><02:11:21.599><c> going</c><02:11:21.760><c> to</c><02:11:21.920><c> enter</c>

02:11:22.229 --> 02:11:22.239 align:start position:0%
times the user is going to enter
 

02:11:22.239 --> 02:11:23.189 align:start position:0%
times the user is going to enter
something

02:11:23.189 --> 02:11:23.199 align:start position:0%
something
 

02:11:23.199 --> 02:11:25.109 align:start position:0%
something
so<02:11:23.440><c> let's</c><02:11:23.599><c> write</c><02:11:23.760><c> that</c><02:11:24.000><c> program</c><02:11:24.639><c> using</c><02:11:24.960><c> a</c>

02:11:25.109 --> 02:11:25.119 align:start position:0%
so let's write that program using a
 

02:11:25.119 --> 02:11:26.629 align:start position:0%
so let's write that program using a
while<02:11:25.360><c> loop</c><02:11:26.000><c> i'm</c><02:11:26.159><c> going</c><02:11:26.239><c> to</c><02:11:26.320><c> delete</c>

02:11:26.629 --> 02:11:26.639 align:start position:0%
while loop i'm going to delete
 

02:11:26.639 --> 02:11:29.990 align:start position:0%
while loop i'm going to delete
everything<02:11:26.960><c> from</c><02:11:27.119><c> here</c>

02:11:29.990 --> 02:11:30.000 align:start position:0%
 
 

02:11:30.000 --> 02:11:31.589 align:start position:0%
 
all<02:11:30.159><c> right</c><02:11:30.320><c> we're</c><02:11:30.480><c> going</c><02:11:30.560><c> to</c><02:11:30.639><c> start</c><02:11:31.199><c> with</c><02:11:31.440><c> our</c>

02:11:31.589 --> 02:11:31.599 align:start position:0%
all right we're going to start with our
 

02:11:31.599 --> 02:11:33.350 align:start position:0%
all right we're going to start with our
while<02:11:31.840><c> loop</c><02:11:32.560><c> now</c><02:11:32.719><c> what</c><02:11:32.880><c> is</c><02:11:33.040><c> our</c><02:11:33.199><c> loop</c>

02:11:33.350 --> 02:11:33.360 align:start position:0%
while loop now what is our loop
 

02:11:33.360 --> 02:11:34.470 align:start position:0%
while loop now what is our loop
condition<02:11:33.840><c> here</c>

02:11:34.470 --> 02:11:34.480 align:start position:0%
condition here
 

02:11:34.480 --> 02:11:36.390 align:start position:0%
condition here
we<02:11:34.639><c> don't</c><02:11:34.800><c> have</c><02:11:35.040><c> a</c><02:11:35.199><c> counter</c><02:11:35.679><c> variable</c><02:11:36.079><c> in</c><02:11:36.159><c> this</c>

02:11:36.390 --> 02:11:36.400 align:start position:0%
we don't have a counter variable in this
 

02:11:36.400 --> 02:11:37.990 align:start position:0%
we don't have a counter variable in this
example<02:11:37.199><c> instead</c><02:11:37.520><c> we</c><02:11:37.599><c> want</c><02:11:37.679><c> to</c><02:11:37.760><c> check</c>

02:11:37.990 --> 02:11:38.000 align:start position:0%
example instead we want to check
 

02:11:38.000 --> 02:11:41.750 align:start position:0%
example instead we want to check
to<02:11:38.159><c> see</c><02:11:38.560><c> if</c><02:11:38.719><c> the</c><02:11:38.880><c> user</c><02:11:39.440><c> entered</c><02:11:40.159><c> quit</c><02:11:40.639><c> or</c><02:11:40.880><c> not</c>

02:11:41.750 --> 02:11:41.760 align:start position:0%
to see if the user entered quit or not
 

02:11:41.760 --> 02:11:44.790 align:start position:0%
to see if the user entered quit or not
so<02:11:41.920><c> here</c><02:11:42.079><c> we</c><02:11:42.159><c> can</c><02:11:42.320><c> declare</c><02:11:42.960><c> a</c><02:11:43.199><c> string</c><02:11:44.400><c> called</c>

02:11:44.790 --> 02:11:44.800 align:start position:0%
so here we can declare a string called
 

02:11:44.800 --> 02:11:47.270 align:start position:0%
so here we can declare a string called
input<02:11:45.679><c> and</c><02:11:46.000><c> initialize</c><02:11:46.560><c> it</c><02:11:46.639><c> to</c><02:11:46.719><c> an</c><02:11:46.880><c> empty</c>

02:11:47.270 --> 02:11:47.280 align:start position:0%
input and initialize it to an empty
 

02:11:47.280 --> 02:11:48.229 align:start position:0%
input and initialize it to an empty
string

02:11:48.229 --> 02:11:48.239 align:start position:0%
string
 

02:11:48.239 --> 02:11:51.270 align:start position:0%
string
then<02:11:48.480><c> we</c><02:11:48.639><c> can</c><02:11:48.800><c> write</c><02:11:49.040><c> a</c><02:11:49.199><c> while</c><02:11:49.520><c> loop</c><02:11:50.079><c> like</c><02:11:50.320><c> this</c>

02:11:51.270 --> 02:11:51.280 align:start position:0%
then we can write a while loop like this
 

02:11:51.280 --> 02:11:54.950 align:start position:0%
then we can write a while loop like this
while<02:11:51.679><c> input</c><02:11:52.480><c> does</c><02:11:52.719><c> not</c><02:11:53.040><c> equal</c><02:11:53.679><c> to</c><02:11:53.920><c> quit</c>

02:11:54.950 --> 02:11:54.960 align:start position:0%
while input does not equal to quit
 

02:11:54.960 --> 02:11:56.790 align:start position:0%
while input does not equal to quit
now<02:11:55.199><c> this</c><02:11:55.440><c> code</c><02:11:55.679><c> is</c><02:11:55.840><c> not</c><02:11:56.000><c> going</c><02:11:56.159><c> to</c><02:11:56.239><c> work</c>

02:11:56.790 --> 02:11:56.800 align:start position:0%
now this code is not going to work
 

02:11:56.800 --> 02:11:58.470 align:start position:0%
now this code is not going to work
because<02:11:57.199><c> input</c><02:11:57.520><c> is</c><02:11:57.599><c> a</c><02:11:57.760><c> string</c><02:11:58.079><c> which</c><02:11:58.239><c> is</c><02:11:58.400><c> a</c>

02:11:58.470 --> 02:11:58.480 align:start position:0%
because input is a string which is a
 

02:11:58.480 --> 02:11:59.830 align:start position:0%
because input is a string which is a
reference<02:11:58.960><c> type</c>

02:11:59.830 --> 02:11:59.840 align:start position:0%
reference type
 

02:11:59.840 --> 02:12:02.310 align:start position:0%
reference type
and<02:12:00.239><c> we</c><02:12:00.400><c> cannot</c><02:12:00.719><c> use</c><02:12:01.040><c> comparison</c><02:12:01.760><c> operators</c>

02:12:02.310 --> 02:12:02.320 align:start position:0%
and we cannot use comparison operators
 

02:12:02.320 --> 02:12:03.589 align:start position:0%
and we cannot use comparison operators
between<02:12:02.719><c> reference</c><02:12:03.119><c> types</c>

02:12:03.589 --> 02:12:03.599 align:start position:0%
between reference types
 

02:12:03.599 --> 02:12:05.669 align:start position:0%
between reference types
because<02:12:03.840><c> these</c><02:12:04.079><c> operators</c><02:12:04.719><c> will</c><02:12:04.960><c> compare</c><02:12:05.440><c> the</c>

02:12:05.669 --> 02:12:05.679 align:start position:0%
because these operators will compare the
 

02:12:05.679 --> 02:12:07.430 align:start position:0%
because these operators will compare the
address<02:12:06.159><c> of</c><02:12:06.320><c> our</c><02:12:06.480><c> string</c><02:12:06.880><c> objects</c>

02:12:07.430 --> 02:12:07.440 align:start position:0%
address of our string objects
 

02:12:07.440 --> 02:12:09.350 align:start position:0%
address of our string objects
not<02:12:07.599><c> their</c><02:12:07.840><c> value</c><02:12:08.639><c> so</c><02:12:08.800><c> if</c><02:12:08.880><c> you</c><02:12:09.040><c> have</c><02:12:09.119><c> two</c>

02:12:09.350 --> 02:12:09.360 align:start position:0%
not their value so if you have two
 

02:12:09.360 --> 02:12:11.030 align:start position:0%
not their value so if you have two
strings<02:12:10.000><c> quit</c><02:12:10.400><c> and</c><02:12:10.560><c> quit</c>

02:12:11.030 --> 02:12:11.040 align:start position:0%
strings quit and quit
 

02:12:11.040 --> 02:12:13.109 align:start position:0%
strings quit and quit
but<02:12:11.280><c> stored</c><02:12:11.679><c> in</c><02:12:11.920><c> different</c><02:12:12.239><c> memory</c><02:12:12.639><c> locations</c>

02:12:13.109 --> 02:12:13.119 align:start position:0%
but stored in different memory locations
 

02:12:13.119 --> 02:12:14.790 align:start position:0%
but stored in different memory locations
they<02:12:13.280><c> have</c><02:12:13.440><c> different</c><02:12:13.760><c> addresses</c>

02:12:14.790 --> 02:12:14.800 align:start position:0%
they have different addresses
 

02:12:14.800 --> 02:12:17.430 align:start position:0%
they have different addresses
so<02:12:15.040><c> we</c><02:12:15.119><c> can</c><02:12:15.440><c> use</c><02:12:15.599><c> the</c><02:12:15.760><c> inequality</c><02:12:16.560><c> operator</c><02:12:17.199><c> to</c>

02:12:17.430 --> 02:12:17.440 align:start position:0%
so we can use the inequality operator to
 

02:12:17.440 --> 02:12:19.030 align:start position:0%
so we can use the inequality operator to
compare<02:12:17.760><c> their</c><02:12:18.000><c> value</c>

02:12:19.030 --> 02:12:19.040 align:start position:0%
compare their value
 

02:12:19.040 --> 02:12:22.470 align:start position:0%
compare their value
instead<02:12:19.360><c> we</c><02:12:19.520><c> need</c><02:12:19.679><c> to</c><02:12:19.760><c> use</c><02:12:20.639><c> the</c><02:12:20.880><c> equals</c><02:12:21.920><c> method</c>

02:12:22.470 --> 02:12:22.480 align:start position:0%
instead we need to use the equals method
 

02:12:22.480 --> 02:12:24.950 align:start position:0%
instead we need to use the equals method
of<02:12:22.719><c> string</c><02:12:23.119><c> objects</c><02:12:24.079><c> so</c><02:12:24.320><c> we</c><02:12:24.400><c> want</c><02:12:24.560><c> to</c><02:12:24.639><c> check</c><02:12:24.800><c> to</c>

02:12:24.950 --> 02:12:24.960 align:start position:0%
of string objects so we want to check to
 

02:12:24.960 --> 02:12:26.629 align:start position:0%
of string objects so we want to check to
see<02:12:25.440><c> if</c><02:12:25.679><c> the</c><02:12:25.920><c> input</c>

02:12:26.629 --> 02:12:26.639 align:start position:0%
see if the input
 

02:12:26.639 --> 02:12:29.109 align:start position:0%
see if the input
equals<02:12:27.360><c> quit</c><02:12:28.079><c> now</c><02:12:28.239><c> here</c><02:12:28.400><c> we</c><02:12:28.560><c> need</c><02:12:28.639><c> to</c><02:12:28.800><c> apply</c>

02:12:29.109 --> 02:12:29.119 align:start position:0%
equals quit now here we need to apply
 

02:12:29.119 --> 02:12:29.750 align:start position:0%
equals quit now here we need to apply
the<02:12:29.360><c> not</c>

02:12:29.750 --> 02:12:29.760 align:start position:0%
the not
 

02:12:29.760 --> 02:12:31.990 align:start position:0%
the not
operator<02:12:30.639><c> so</c><02:12:30.800><c> as</c><02:12:30.960><c> long</c><02:12:31.199><c> as</c><02:12:31.280><c> the</c><02:12:31.440><c> input</c><02:12:31.760><c> does</c>

02:12:31.990 --> 02:12:32.000 align:start position:0%
operator so as long as the input does
 

02:12:32.000 --> 02:12:34.229 align:start position:0%
operator so as long as the input does
not<02:12:32.239><c> equal</c><02:12:32.840><c> quit</c><02:12:33.920><c> we're</c><02:12:34.079><c> going</c><02:12:34.159><c> to</c>

02:12:34.229 --> 02:12:34.239 align:start position:0%
not equal quit we're going to
 

02:12:34.239 --> 02:12:36.069 align:start position:0%
not equal quit we're going to
continuously<02:12:34.880><c> ask</c><02:12:35.119><c> the</c><02:12:35.199><c> user</c><02:12:35.599><c> to</c><02:12:35.760><c> enter</c>

02:12:36.069 --> 02:12:36.079 align:start position:0%
continuously ask the user to enter
 

02:12:36.079 --> 02:12:36.870 align:start position:0%
continuously ask the user to enter
something

02:12:36.870 --> 02:12:36.880 align:start position:0%
something
 

02:12:36.880 --> 02:12:40.790 align:start position:0%
something
so<02:12:37.040><c> here</c><02:12:37.280><c> we</c><02:12:37.360><c> can</c><02:12:37.599><c> print</c><02:12:39.599><c> a</c><02:12:39.760><c> label</c><02:12:40.159><c> like</c>

02:12:40.790 --> 02:12:40.800 align:start position:0%
so here we can print a label like
 

02:12:40.800 --> 02:12:43.350 align:start position:0%
so here we can print a label like
input<02:12:42.079><c> and</c><02:12:42.159><c> then</c><02:12:42.320><c> we</c><02:12:42.480><c> can</c><02:12:42.560><c> use</c><02:12:42.719><c> a</c><02:12:42.880><c> scanner</c>

02:12:43.350 --> 02:12:43.360 align:start position:0%
input and then we can use a scanner
 

02:12:43.360 --> 02:12:43.830 align:start position:0%
input and then we can use a scanner
object

02:12:43.830 --> 02:12:43.840 align:start position:0%
object
 

02:12:43.840 --> 02:12:46.629 align:start position:0%
object
to<02:12:44.000><c> read</c><02:12:44.239><c> something</c><02:12:44.480><c> from</c><02:12:44.639><c> the</c><02:12:44.800><c> terminal</c><02:12:45.920><c> so</c>

02:12:46.629 --> 02:12:46.639 align:start position:0%
to read something from the terminal so
 

02:12:46.639 --> 02:12:48.790 align:start position:0%
to read something from the terminal so
let's<02:12:46.880><c> create</c><02:12:47.199><c> a</c><02:12:47.360><c> scanner</c><02:12:47.920><c> object</c>

02:12:48.790 --> 02:12:48.800 align:start position:0%
let's create a scanner object
 

02:12:48.800 --> 02:12:54.149 align:start position:0%
let's create a scanner object
and<02:12:49.119><c> instantiate</c><02:12:49.920><c> it</c><02:12:50.560><c> using</c><02:12:51.320><c> system.in</c>

02:12:54.149 --> 02:12:54.159 align:start position:0%
and instantiate it using system.in
 

02:12:54.159 --> 02:12:57.270 align:start position:0%
and instantiate it using system.in
and<02:12:54.320><c> then</c><02:12:54.560><c> call</c><02:12:55.400><c> scanner.next</c><02:12:56.880><c> this</c><02:12:57.040><c> will</c>

02:12:57.270 --> 02:12:57.280 align:start position:0%
and then call scanner.next this will
 

02:12:57.280 --> 02:12:57.910 align:start position:0%
and then call scanner.next this will
return

02:12:57.910 --> 02:12:57.920 align:start position:0%
return
 

02:12:57.920 --> 02:12:59.910 align:start position:0%
return
a<02:12:58.159><c> string</c><02:12:58.560><c> so</c><02:12:58.719><c> we</c><02:12:58.880><c> can</c><02:12:59.040><c> store</c><02:12:59.360><c> it</c><02:12:59.520><c> in</c><02:12:59.679><c> this</c>

02:12:59.910 --> 02:12:59.920 align:start position:0%
a string so we can store it in this
 

02:12:59.920 --> 02:13:01.669 align:start position:0%
a string so we can store it in this
input<02:13:00.560><c> variable</c>

02:13:01.669 --> 02:13:01.679 align:start position:0%
input variable
 

02:13:01.679 --> 02:13:03.910 align:start position:0%
input variable
now<02:13:01.840><c> with</c><02:13:02.000><c> this</c><02:13:02.159><c> implementation</c><02:13:03.360><c> in</c><02:13:03.599><c> every</c>

02:13:03.910 --> 02:13:03.920 align:start position:0%
now with this implementation in every
 

02:13:03.920 --> 02:13:05.669 align:start position:0%
now with this implementation in every
iteration<02:13:04.639><c> we're</c><02:13:04.800><c> going</c><02:13:04.960><c> to</c><02:13:05.040><c> create</c>

02:13:05.669 --> 02:13:05.679 align:start position:0%
iteration we're going to create
 

02:13:05.679 --> 02:13:08.069 align:start position:0%
iteration we're going to create
a<02:13:05.760><c> new</c><02:13:06.079><c> scanner</c><02:13:06.560><c> object</c><02:13:07.360><c> so</c><02:13:07.520><c> if</c><02:13:07.679><c> the</c><02:13:07.760><c> user</c>

02:13:08.069 --> 02:13:08.079 align:start position:0%
a new scanner object so if the user
 

02:13:08.079 --> 02:13:09.589 align:start position:0%
a new scanner object so if the user
enters<02:13:08.639><c> 10</c><02:13:08.880><c> numbers</c>

02:13:09.589 --> 02:13:09.599 align:start position:0%
enters 10 numbers
 

02:13:09.599 --> 02:13:11.430 align:start position:0%
enters 10 numbers
we're<02:13:09.760><c> going</c><02:13:09.840><c> to</c><02:13:10.000><c> create</c><02:13:10.320><c> 10</c><02:13:10.560><c> scanner</c><02:13:11.040><c> objects</c>

02:13:11.430 --> 02:13:11.440 align:start position:0%
we're going to create 10 scanner objects
 

02:13:11.440 --> 02:13:12.629 align:start position:0%
we're going to create 10 scanner objects
in<02:13:11.599><c> memory</c><02:13:12.159><c> this</c><02:13:12.400><c> is</c>

02:13:12.629 --> 02:13:12.639 align:start position:0%
in memory this is
 

02:13:12.639 --> 02:13:14.709 align:start position:0%
in memory this is
unnecessary<02:13:13.679><c> and</c><02:13:13.920><c> it's</c><02:13:14.079><c> actually</c><02:13:14.400><c> bad</c>

02:13:14.709 --> 02:13:14.719 align:start position:0%
unnecessary and it's actually bad
 

02:13:14.719 --> 02:13:16.310 align:start position:0%
unnecessary and it's actually bad
practice<02:13:15.199><c> because</c><02:13:15.440><c> it's</c><02:13:15.599><c> going</c><02:13:15.760><c> to</c><02:13:15.920><c> pollute</c>

02:13:16.310 --> 02:13:16.320 align:start position:0%
practice because it's going to pollute
 

02:13:16.320 --> 02:13:17.430 align:start position:0%
practice because it's going to pollute
our<02:13:16.560><c> memory</c>

02:13:17.430 --> 02:13:17.440 align:start position:0%
our memory
 

02:13:17.440 --> 02:13:19.030 align:start position:0%
our memory
so<02:13:17.679><c> it's</c><02:13:17.840><c> better</c><02:13:18.079><c> to</c><02:13:18.239><c> create</c><02:13:18.480><c> the</c><02:13:18.560><c> scanner</c>

02:13:19.030 --> 02:13:19.040 align:start position:0%
so it's better to create the scanner
 

02:13:19.040 --> 02:13:20.629 align:start position:0%
so it's better to create the scanner
object<02:13:19.679><c> outside</c>

02:13:20.629 --> 02:13:20.639 align:start position:0%
object outside
 

02:13:20.639 --> 02:13:23.589 align:start position:0%
object outside
of<02:13:20.880><c> our</c><02:13:20.960><c> while</c><02:13:21.280><c> loop</c><02:13:22.400><c> and</c><02:13:22.560><c> then</c><02:13:22.880><c> simply</c><02:13:23.280><c> use</c><02:13:23.520><c> it</c>

02:13:23.589 --> 02:13:23.599 align:start position:0%
of our while loop and then simply use it
 

02:13:23.599 --> 02:13:24.790 align:start position:0%
of our while loop and then simply use it
here

02:13:24.790 --> 02:13:24.800 align:start position:0%
here
 

02:13:24.800 --> 02:13:26.950 align:start position:0%
here
also<02:13:25.599><c> here</c><02:13:25.760><c> we're</c><02:13:25.920><c> assuming</c><02:13:26.320><c> that</c><02:13:26.480><c> the</c><02:13:26.560><c> user</c>

02:13:26.950 --> 02:13:26.960 align:start position:0%
also here we're assuming that the user
 

02:13:26.960 --> 02:13:29.030 align:start position:0%
also here we're assuming that the user
is<02:13:27.119><c> typing</c><02:13:27.520><c> everything</c><02:13:27.840><c> in</c><02:13:28.000><c> lowercase</c>

02:13:29.030 --> 02:13:29.040 align:start position:0%
is typing everything in lowercase
 

02:13:29.040 --> 02:13:31.510 align:start position:0%
is typing everything in lowercase
so<02:13:29.199><c> if</c><02:13:29.280><c> they</c><02:13:29.520><c> type</c><02:13:29.760><c> quit</c><02:13:30.079><c> in</c><02:13:30.239><c> uppercase</c><02:13:30.880><c> or</c><02:13:31.280><c> any</c>

02:13:31.510 --> 02:13:31.520 align:start position:0%
so if they type quit in uppercase or any
 

02:13:31.520 --> 02:13:32.470 align:start position:0%
so if they type quit in uppercase or any
combinations<02:13:32.239><c> of</c>

02:13:32.470 --> 02:13:32.480 align:start position:0%
combinations of
 

02:13:32.480 --> 02:13:34.790 align:start position:0%
combinations of
lowercase<02:13:33.040><c> and</c><02:13:33.199><c> uppercase</c><02:13:33.679><c> characters</c><02:13:34.480><c> this</c>

02:13:34.790 --> 02:13:34.800 align:start position:0%
lowercase and uppercase characters this
 

02:13:34.800 --> 02:13:35.589 align:start position:0%
lowercase and uppercase characters this
logic

02:13:35.589 --> 02:13:35.599 align:start position:0%
logic
 

02:13:35.599 --> 02:13:38.870 align:start position:0%
logic
is<02:13:35.840><c> not</c><02:13:36.000><c> going</c><02:13:36.159><c> to</c><02:13:36.239><c> work</c><02:13:36.639><c> the</c><02:13:36.800><c> way</c><02:13:37.040><c> we</c><02:13:37.199><c> want</c><02:13:38.159><c> so</c>

02:13:38.870 --> 02:13:38.880 align:start position:0%
is not going to work the way we want so
 

02:13:38.880 --> 02:13:41.189 align:start position:0%
is not going to work the way we want so
over<02:13:39.119><c> here</c><02:13:39.840><c> right</c><02:13:40.159><c> after</c><02:13:40.560><c> reading</c><02:13:40.880><c> something</c>

02:13:41.189 --> 02:13:41.199 align:start position:0%
over here right after reading something
 

02:13:41.199 --> 02:13:42.550 align:start position:0%
over here right after reading something
from<02:13:41.440><c> the</c><02:13:41.520><c> terminal</c>

02:13:42.550 --> 02:13:42.560 align:start position:0%
from the terminal
 

02:13:42.560 --> 02:13:44.390 align:start position:0%
from the terminal
we're<02:13:42.719><c> going</c><02:13:42.800><c> to</c><02:13:42.880><c> call</c><02:13:43.119><c> the</c><02:13:43.440><c> two</c><02:13:43.679><c> lowercase</c>

02:13:44.390 --> 02:13:44.400 align:start position:0%
we're going to call the two lowercase
 

02:13:44.400 --> 02:13:46.149 align:start position:0%
we're going to call the two lowercase
method<02:13:44.960><c> of</c><02:13:45.119><c> string</c><02:13:45.520><c> objects</c>

02:13:46.149 --> 02:13:46.159 align:start position:0%
method of string objects
 

02:13:46.159 --> 02:13:48.790 align:start position:0%
method of string objects
to<02:13:46.320><c> convert</c><02:13:46.719><c> it</c><02:13:46.800><c> to</c><02:13:46.960><c> lowercase</c><02:13:48.239><c> now</c><02:13:48.480><c> to</c><02:13:48.639><c> make</c>

02:13:48.790 --> 02:13:48.800 align:start position:0%
to convert it to lowercase now to make
 

02:13:48.800 --> 02:13:50.390 align:start position:0%
to convert it to lowercase now to make
this<02:13:48.960><c> program</c><02:13:49.280><c> more</c><02:13:49.520><c> interesting</c>

02:13:50.390 --> 02:13:50.400 align:start position:0%
this program more interesting
 

02:13:50.400 --> 02:13:53.350 align:start position:0%
this program more interesting
let's<02:13:50.719><c> echo</c><02:13:51.199><c> back</c><02:13:51.599><c> whatever</c><02:13:52.000><c> the</c><02:13:52.159><c> user</c><02:13:52.480><c> enters</c>

02:13:53.350 --> 02:13:53.360 align:start position:0%
let's echo back whatever the user enters
 

02:13:53.360 --> 02:13:53.669 align:start position:0%
let's echo back whatever the user enters
so

02:13:53.669 --> 02:13:53.679 align:start position:0%
so
 

02:13:53.679 --> 02:13:57.030 align:start position:0%
so
we<02:13:53.840><c> simply</c><02:13:54.239><c> print</c><02:13:54.560><c> that</c><02:13:55.199><c> on</c><02:13:55.280><c> the</c><02:13:55.440><c> terminal</c>

02:13:57.030 --> 02:13:57.040 align:start position:0%
we simply print that on the terminal
 

02:13:57.040 --> 02:14:01.030 align:start position:0%
we simply print that on the terminal
now<02:13:57.199><c> let's</c><02:13:57.440><c> run</c><02:13:57.599><c> this</c><02:13:57.760><c> and</c><02:13:57.840><c> see</c><02:13:58.000><c> what</c><02:13:58.159><c> happens</c>

02:14:01.030 --> 02:14:01.040 align:start position:0%
 
 

02:14:01.040 --> 02:14:02.790 align:start position:0%
 
so<02:14:01.199><c> i'm</c><02:14:01.280><c> going</c><02:14:01.440><c> to</c><02:14:01.520><c> enter</c><02:14:01.760><c> a</c><02:14:01.840><c> few</c><02:14:02.079><c> numbers</c><02:14:02.560><c> like</c>

02:14:02.790 --> 02:14:02.800 align:start position:0%
so i'm going to enter a few numbers like
 

02:14:02.800 --> 02:14:04.870 align:start position:0%
so i'm going to enter a few numbers like
one<02:14:03.440><c> two</c><02:14:04.000><c> and</c><02:14:04.159><c> three</c>

02:14:04.870 --> 02:14:04.880 align:start position:0%
one two and three
 

02:14:04.880 --> 02:14:07.430 align:start position:0%
one two and three
whatever<02:14:05.199><c> we</c><02:14:05.360><c> type</c><02:14:05.840><c> gets</c><02:14:06.079><c> a</c><02:14:06.239><c> code</c><02:14:06.480><c> back</c><02:14:07.280><c> but</c>

02:14:07.430 --> 02:14:07.440 align:start position:0%
whatever we type gets a code back but
 

02:14:07.440 --> 02:14:09.430 align:start position:0%
whatever we type gets a code back but
the<02:14:07.520><c> moment</c><02:14:07.760><c> we</c><02:14:07.920><c> type</c><02:14:08.159><c> quit</c>

02:14:09.430 --> 02:14:09.440 align:start position:0%
the moment we type quit
 

02:14:09.440 --> 02:14:13.189 align:start position:0%
the moment we type quit
our<02:14:09.599><c> program</c><02:14:11.840><c> so</c><02:14:12.079><c> while</c><02:14:12.320><c> loops</c><02:14:12.639><c> are</c><02:14:12.800><c> useful</c><02:14:13.119><c> in</c>

02:14:13.189 --> 02:14:13.199 align:start position:0%
our program so while loops are useful in
 

02:14:13.199 --> 02:14:14.149 align:start position:0%
our program so while loops are useful in
situations<02:14:13.760><c> where</c>

02:14:14.149 --> 02:14:14.159 align:start position:0%
situations where
 

02:14:14.159 --> 02:14:15.830 align:start position:0%
situations where
we<02:14:14.320><c> don't</c><02:14:14.480><c> know</c><02:14:14.639><c> ahead</c><02:14:14.960><c> of</c><02:14:15.040><c> time</c><02:14:15.360><c> how</c><02:14:15.520><c> many</c>

02:14:15.830 --> 02:14:15.840 align:start position:0%
we don't know ahead of time how many
 

02:14:15.840 --> 02:14:23.430 align:start position:0%
we don't know ahead of time how many
times<02:14:16.159><c> we</c><02:14:16.320><c> want</c><02:14:16.400><c> to</c><02:14:16.480><c> repeat</c><02:14:16.880><c> something</c>

02:14:23.430 --> 02:14:23.440 align:start position:0%
 
 

02:14:23.440 --> 02:14:25.270 align:start position:0%
 
in<02:14:23.599><c> java</c><02:14:23.920><c> we</c><02:14:24.079><c> have</c><02:14:24.320><c> another</c><02:14:24.639><c> type</c><02:14:24.800><c> of</c><02:14:24.960><c> loop</c>

02:14:25.270 --> 02:14:25.280 align:start position:0%
in java we have another type of loop
 

02:14:25.280 --> 02:14:27.109 align:start position:0%
in java we have another type of loop
called<02:14:25.679><c> a</c><02:14:26.000><c> do-while</c><02:14:26.480><c> loop</c>

02:14:27.109 --> 02:14:27.119 align:start position:0%
called a do-while loop
 

02:14:27.119 --> 02:14:29.109 align:start position:0%
called a do-while loop
it's<02:14:27.360><c> very</c><02:14:27.599><c> similar</c><02:14:27.920><c> to</c><02:14:28.000><c> a</c><02:14:28.159><c> while</c><02:14:28.400><c> loop</c><02:14:28.800><c> but</c><02:14:29.040><c> it</c>

02:14:29.109 --> 02:14:29.119 align:start position:0%
it's very similar to a while loop but it
 

02:14:29.119 --> 02:14:30.790 align:start position:0%
it's very similar to a while loop but it
gets<02:14:29.440><c> executed</c><02:14:30.159><c> at</c><02:14:30.320><c> least</c>

02:14:30.790 --> 02:14:30.800 align:start position:0%
gets executed at least
 

02:14:30.800 --> 02:14:32.709 align:start position:0%
gets executed at least
once<02:14:31.199><c> let</c><02:14:31.280><c> me</c><02:14:31.440><c> show</c><02:14:31.520><c> you</c><02:14:31.599><c> what</c><02:14:31.760><c> i</c><02:14:31.840><c> mean</c><02:14:32.480><c> so</c><02:14:32.639><c> i'm</c>

02:14:32.709 --> 02:14:32.719 align:start position:0%
once let me show you what i mean so i'm
 

02:14:32.719 --> 02:14:34.470 align:start position:0%
once let me show you what i mean so i'm
going<02:14:32.800><c> to</c><02:14:32.880><c> rewrite</c><02:14:33.280><c> the</c><02:14:33.440><c> same</c><02:14:33.760><c> code</c><02:14:34.000><c> using</c><02:14:34.320><c> a</c>

02:14:34.470 --> 02:14:34.480 align:start position:0%
going to rewrite the same code using a
 

02:14:34.480 --> 02:14:35.669 align:start position:0%
going to rewrite the same code using a
do-while<02:14:34.960><c> loop</c>

02:14:35.669 --> 02:14:35.679 align:start position:0%
do-while loop
 

02:14:35.679 --> 02:14:38.790 align:start position:0%
do-while loop
we<02:14:35.840><c> start</c><02:14:36.480><c> with</c><02:14:36.719><c> a</c><02:14:36.800><c> do</c><02:14:37.040><c> keyword</c><02:14:38.400><c> then</c><02:14:38.639><c> we</c>

02:14:38.790 --> 02:14:38.800 align:start position:0%
we start with a do keyword then we
 

02:14:38.800 --> 02:14:39.189 align:start position:0%
we start with a do keyword then we
create

02:14:39.189 --> 02:14:39.199 align:start position:0%
create
 

02:14:39.199 --> 02:14:41.510 align:start position:0%
create
a<02:14:39.360><c> code</c><02:14:39.599><c> block</c><02:14:40.639><c> at</c><02:14:40.719><c> the</c><02:14:40.880><c> end</c><02:14:41.040><c> of</c><02:14:41.119><c> this</c><02:14:41.280><c> code</c>

02:14:41.510 --> 02:14:41.520 align:start position:0%
a code block at the end of this code
 

02:14:41.520 --> 02:14:43.350 align:start position:0%
a code block at the end of this code
block

02:14:43.350 --> 02:14:43.360 align:start position:0%
block
 

02:14:43.360 --> 02:14:45.750 align:start position:0%
block
we<02:14:43.520><c> type</c><02:14:44.000><c> while</c><02:14:44.880><c> followed</c><02:14:45.199><c> by</c><02:14:45.360><c> our</c><02:14:45.520><c> loop</c>

02:14:45.750 --> 02:14:45.760 align:start position:0%
we type while followed by our loop
 

02:14:45.760 --> 02:14:47.109 align:start position:0%
we type while followed by our loop
condition

02:14:47.109 --> 02:14:47.119 align:start position:0%
condition
 

02:14:47.119 --> 02:14:50.149 align:start position:0%
condition
so<02:14:47.440><c> not</c><02:14:48.000><c> input</c><02:14:48.800><c> dot</c><02:14:49.119><c> equals</c>

02:14:50.149 --> 02:14:50.159 align:start position:0%
so not input dot equals
 

02:14:50.159 --> 02:14:52.830 align:start position:0%
so not input dot equals
quit<02:14:51.199><c> and</c><02:14:51.280><c> then</c><02:14:51.440><c> we</c><02:14:51.520><c> terminate</c><02:14:51.920><c> this</c><02:14:52.159><c> using</c><02:14:52.400><c> a</c>

02:14:52.830 --> 02:14:52.840 align:start position:0%
quit and then we terminate this using a
 

02:14:52.840 --> 02:14:54.149 align:start position:0%
quit and then we terminate this using a
semicolon<02:14:53.840><c> now</c>

02:14:54.149 --> 02:14:54.159 align:start position:0%
semicolon now
 

02:14:54.159 --> 02:14:55.910 align:start position:0%
semicolon now
inside<02:14:54.480><c> the</c><02:14:54.719><c> body</c><02:14:54.960><c> of</c><02:14:55.119><c> this</c><02:14:55.280><c> loop</c><02:14:55.679><c> we'll</c>

02:14:55.910 --> 02:14:55.920 align:start position:0%
inside the body of this loop we'll
 

02:14:55.920 --> 02:15:02.390 align:start position:0%
inside the body of this loop we'll
simply<02:14:56.239><c> copy</c><02:14:56.719><c> all</c><02:14:56.800><c> these</c><02:14:56.960><c> lines</c><02:14:57.280><c> we</c><02:14:57.360><c> have</c><02:14:57.599><c> here</c>

02:15:02.390 --> 02:15:02.400 align:start position:0%
 
 

02:15:02.400 --> 02:15:04.709 align:start position:0%
 
now<02:15:02.639><c> compare</c><02:15:03.040><c> these</c><02:15:03.280><c> two</c><02:15:03.440><c> types</c><02:15:03.760><c> of</c><02:15:03.920><c> loops</c>

02:15:04.709 --> 02:15:04.719 align:start position:0%
now compare these two types of loops
 

02:15:04.719 --> 02:15:06.069 align:start position:0%
now compare these two types of loops
with<02:15:05.040><c> while</c><02:15:05.360><c> loops</c>

02:15:06.069 --> 02:15:06.079 align:start position:0%
with while loops
 

02:15:06.079 --> 02:15:08.149 align:start position:0%
with while loops
we<02:15:06.239><c> check</c><02:15:06.480><c> the</c><02:15:06.560><c> condition</c><02:15:07.119><c> first</c><02:15:07.760><c> so</c><02:15:07.920><c> if</c><02:15:08.079><c> the</c>

02:15:08.149 --> 02:15:08.159 align:start position:0%
we check the condition first so if the
 

02:15:08.159 --> 02:15:10.310 align:start position:0%
we check the condition first so if the
condition<02:15:08.639><c> is</c><02:15:08.880><c> false</c><02:15:09.199><c> the</c><02:15:09.360><c> first</c><02:15:09.679><c> time</c>

02:15:10.310 --> 02:15:10.320 align:start position:0%
condition is false the first time
 

02:15:10.320 --> 02:15:12.950 align:start position:0%
condition is false the first time
this<02:15:10.560><c> loop</c><02:15:10.800><c> will</c><02:15:10.960><c> never</c><02:15:11.280><c> get</c><02:15:11.520><c> executed</c><02:15:12.800><c> in</c>

02:15:12.950 --> 02:15:12.960 align:start position:0%
this loop will never get executed in
 

02:15:12.960 --> 02:15:13.910 align:start position:0%
this loop will never get executed in
contrast

02:15:13.910 --> 02:15:13.920 align:start position:0%
contrast
 

02:15:13.920 --> 02:15:16.149 align:start position:0%
contrast
we<02:15:14.159><c> do</c><02:15:14.400><c> while</c><02:15:14.639><c> loops</c><02:15:15.119><c> we</c><02:15:15.280><c> check</c><02:15:15.440><c> the</c><02:15:15.599><c> condition</c>

02:15:16.149 --> 02:15:16.159 align:start position:0%
we do while loops we check the condition
 

02:15:16.159 --> 02:15:17.030 align:start position:0%
we do while loops we check the condition
last

02:15:17.030 --> 02:15:17.040 align:start position:0%
last
 

02:15:17.040 --> 02:15:20.069 align:start position:0%
last
so<02:15:17.440><c> do</c><02:15:17.679><c> while</c><02:15:17.920><c> loops</c><02:15:18.560><c> always</c><02:15:18.880><c> get</c><02:15:19.199><c> executed</c><02:15:19.920><c> at</c>

02:15:20.069 --> 02:15:20.079 align:start position:0%
so do while loops always get executed at
 

02:15:20.079 --> 02:15:20.790 align:start position:0%
so do while loops always get executed at
least

02:15:20.790 --> 02:15:20.800 align:start position:0%
least
 

02:15:20.800 --> 02:15:23.030 align:start position:0%
least
once<02:15:21.280><c> even</c><02:15:21.520><c> if</c><02:15:21.599><c> the</c><02:15:21.679><c> condition</c><02:15:22.159><c> is</c><02:15:22.320><c> false</c><02:15:22.880><c> that</c>

02:15:23.030 --> 02:15:23.040 align:start position:0%
once even if the condition is false that
 

02:15:23.040 --> 02:15:24.629 align:start position:0%
once even if the condition is false that
is<02:15:23.199><c> the</c><02:15:23.280><c> only</c><02:15:23.599><c> difference</c>

02:15:24.629 --> 02:15:24.639 align:start position:0%
is the only difference
 

02:15:24.639 --> 02:15:26.550 align:start position:0%
is the only difference
in<02:15:24.880><c> reality</c><02:15:25.280><c> most</c><02:15:25.520><c> of</c><02:15:25.679><c> the</c><02:15:25.760><c> time</c><02:15:25.920><c> we</c><02:15:26.000><c> use</c><02:15:26.320><c> while</c>

02:15:26.550 --> 02:15:26.560 align:start position:0%
in reality most of the time we use while
 

02:15:26.560 --> 02:15:28.870 align:start position:0%
in reality most of the time we use while
loops<02:15:27.199><c> do</c><02:15:27.360><c> while</c><02:15:27.599><c> loops</c><02:15:27.840><c> are</c><02:15:28.000><c> rarely</c><02:15:28.320><c> used</c><02:15:28.639><c> but</c>

02:15:28.870 --> 02:15:28.880 align:start position:0%
loops do while loops are rarely used but
 

02:15:28.880 --> 02:15:30.629 align:start position:0%
loops do while loops are rarely used but
there<02:15:29.040><c> are</c><02:15:29.199><c> certain</c><02:15:29.520><c> cases</c><02:15:29.920><c> for</c><02:15:30.079><c> them</c>

02:15:30.629 --> 02:15:30.639 align:start position:0%
there are certain cases for them
 

02:15:30.639 --> 02:15:32.390 align:start position:0%
there are certain cases for them
so<02:15:30.800><c> just</c><02:15:31.040><c> be</c><02:15:31.199><c> aware</c><02:15:31.440><c> of</c><02:15:31.520><c> them</c><02:15:31.760><c> but</c><02:15:31.920><c> most</c><02:15:32.159><c> of</c><02:15:32.320><c> the</c>

02:15:32.390 --> 02:15:32.400 align:start position:0%
so just be aware of them but most of the
 

02:15:32.400 --> 02:15:40.390 align:start position:0%
so just be aware of them but most of the
time<02:15:32.960><c> prefer</c><02:15:33.360><c> to</c><02:15:33.440><c> use</c><02:15:33.599><c> while</c><02:15:34.840><c> loops</c>

02:15:40.390 --> 02:15:40.400 align:start position:0%
 
 

02:15:40.400 --> 02:15:41.830 align:start position:0%
 
we're<02:15:40.560><c> going</c><02:15:40.639><c> to</c><02:15:40.800><c> continue</c><02:15:41.119><c> with</c><02:15:41.280><c> the</c><02:15:41.360><c> example</c>

02:15:41.830 --> 02:15:41.840 align:start position:0%
we're going to continue with the example
 

02:15:41.840 --> 02:15:43.430 align:start position:0%
we're going to continue with the example
from<02:15:42.000><c> the</c><02:15:42.159><c> last</c><02:15:42.480><c> tutorial</c>

02:15:43.430 --> 02:15:43.440 align:start position:0%
from the last tutorial
 

02:15:43.440 --> 02:15:45.510 align:start position:0%
from the last tutorial
this<02:15:43.679><c> program</c><02:15:44.079><c> we</c><02:15:44.239><c> have</c><02:15:44.320><c> written</c><02:15:44.719><c> has</c><02:15:44.960><c> a</c><02:15:45.119><c> tiny</c>

02:15:45.510 --> 02:15:45.520 align:start position:0%
this program we have written has a tiny
 

02:15:45.520 --> 02:15:47.510 align:start position:0%
this program we have written has a tiny
problem<02:15:46.079><c> let</c><02:15:46.239><c> me</c><02:15:46.400><c> show</c><02:15:46.639><c> you</c>

02:15:47.510 --> 02:15:47.520 align:start position:0%
problem let me show you
 

02:15:47.520 --> 02:15:50.950 align:start position:0%
problem let me show you
so<02:15:47.920><c> i'm</c><02:15:48.079><c> going</c><02:15:48.159><c> to</c><02:15:48.239><c> run</c><02:15:48.840><c> this</c><02:15:50.159><c> enter</c><02:15:50.560><c> a</c><02:15:50.639><c> couple</c>

02:15:50.950 --> 02:15:50.960 align:start position:0%
so i'm going to run this enter a couple
 

02:15:50.960 --> 02:15:51.589 align:start position:0%
so i'm going to run this enter a couple
numbers

02:15:51.589 --> 02:15:51.599 align:start position:0%
numbers
 

02:15:51.599 --> 02:15:54.390 align:start position:0%
numbers
these<02:15:51.840><c> numbers</c><02:15:52.239><c> get</c><02:15:52.480><c> echo</c><02:15:52.800><c> back</c><02:15:53.119><c> beautiful</c><02:15:54.239><c> if</c>

02:15:54.390 --> 02:15:54.400 align:start position:0%
these numbers get echo back beautiful if
 

02:15:54.400 --> 02:15:55.589 align:start position:0%
these numbers get echo back beautiful if
we<02:15:54.480><c> type</c><02:15:54.800><c> quit</c>

02:15:55.589 --> 02:15:55.599 align:start position:0%
we type quit
 

02:15:55.599 --> 02:15:58.310 align:start position:0%
we type quit
the<02:15:55.840><c> program</c><02:15:56.239><c> terminates</c><02:15:57.199><c> but</c><02:15:57.360><c> the</c><02:15:57.520><c> word</c><02:15:57.840><c> quit</c>

02:15:58.310 --> 02:15:58.320 align:start position:0%
the program terminates but the word quit
 

02:15:58.320 --> 02:16:00.069 align:start position:0%
the program terminates but the word quit
also<02:15:58.639><c> gets</c><02:15:58.960><c> echoed</c><02:15:59.440><c> back</c>

02:16:00.069 --> 02:16:00.079 align:start position:0%
also gets echoed back
 

02:16:00.079 --> 02:16:01.910 align:start position:0%
also gets echoed back
this<02:16:00.320><c> is</c><02:16:00.400><c> a</c><02:16:00.480><c> bit</c><02:16:00.719><c> weird</c><02:16:01.280><c> so</c><02:16:01.440><c> let's</c><02:16:01.599><c> look</c><02:16:01.760><c> at</c><02:16:01.840><c> a</c>

02:16:01.910 --> 02:16:01.920 align:start position:0%
this is a bit weird so let's look at a
 

02:16:01.920 --> 02:16:04.470 align:start position:0%
this is a bit weird so let's look at a
couple<02:16:02.239><c> ideas</c><02:16:02.560><c> for</c><02:16:02.719><c> solving</c><02:16:03.119><c> this</c><02:16:03.280><c> problem</c>

02:16:04.470 --> 02:16:04.480 align:start position:0%
couple ideas for solving this problem
 

02:16:04.480 --> 02:16:06.550 align:start position:0%
couple ideas for solving this problem
back<02:16:04.639><c> to</c><02:16:04.800><c> our</c><02:16:04.960><c> code</c><02:16:05.679><c> one</c><02:16:05.920><c> way</c><02:16:06.079><c> to</c><02:16:06.159><c> solve</c><02:16:06.400><c> this</c>

02:16:06.550 --> 02:16:06.560 align:start position:0%
back to our code one way to solve this
 

02:16:06.560 --> 02:16:08.709 align:start position:0%
back to our code one way to solve this
problem<02:16:07.280><c> is</c><02:16:07.440><c> to</c><02:16:07.599><c> check</c><02:16:07.760><c> the</c><02:16:08.000><c> input</c>

02:16:08.709 --> 02:16:08.719 align:start position:0%
problem is to check the input
 

02:16:08.719 --> 02:16:12.390 align:start position:0%
problem is to check the input
before<02:16:09.520><c> printing</c><02:16:10.000><c> it</c><02:16:10.560><c> so</c><02:16:10.719><c> here</c><02:16:10.880><c> we</c><02:16:11.040><c> can</c><02:16:11.280><c> type</c>

02:16:12.390 --> 02:16:12.400 align:start position:0%
before printing it so here we can type
 

02:16:12.400 --> 02:16:14.870 align:start position:0%
before printing it so here we can type
an<02:16:12.639><c> if</c><02:16:12.800><c> statement</c><02:16:13.679><c> if</c><02:16:13.840><c> the</c><02:16:14.000><c> input</c><02:16:14.320><c> does</c><02:16:14.560><c> not</c>

02:16:14.870 --> 02:16:14.880 align:start position:0%
an if statement if the input does not
 

02:16:14.880 --> 02:16:15.669 align:start position:0%
an if statement if the input does not
equal

02:16:15.669 --> 02:16:15.679 align:start position:0%
equal
 

02:16:15.679 --> 02:16:18.709 align:start position:0%
equal
quit<02:16:16.239><c> then</c><02:16:16.480><c> we</c><02:16:16.639><c> print</c><02:16:16.960><c> it</c><02:16:17.920><c> so</c>

02:16:18.709 --> 02:16:18.719 align:start position:0%
quit then we print it so
 

02:16:18.719 --> 02:16:21.910 align:start position:0%
quit then we print it so
not<02:16:18.960><c> equal</c><02:16:19.679><c> input</c><02:16:20.159><c> dot</c><02:16:20.800><c> equals</c>

02:16:21.910 --> 02:16:21.920 align:start position:0%
not equal input dot equals
 

02:16:21.920 --> 02:16:25.350 align:start position:0%
not equal input dot equals
quit<02:16:23.199><c> if</c><02:16:23.360><c> this</c><02:16:23.520><c> condition</c><02:16:24.000><c> is</c><02:16:24.159><c> true</c><02:16:24.639><c> then</c>

02:16:25.350 --> 02:16:25.360 align:start position:0%
quit if this condition is true then
 

02:16:25.360 --> 02:16:27.430 align:start position:0%
quit if this condition is true then
we're<02:16:25.520><c> going</c><02:16:25.679><c> to</c><02:16:25.840><c> print</c><02:16:26.079><c> the</c><02:16:26.239><c> input</c><02:16:27.199><c> let's</c>

02:16:27.430 --> 02:16:27.440 align:start position:0%
we're going to print the input let's
 

02:16:27.440 --> 02:16:28.629 align:start position:0%
we're going to print the input let's
take<02:16:27.679><c> a</c><02:16:27.760><c> look</c>

02:16:28.629 --> 02:16:28.639 align:start position:0%
take a look
 

02:16:28.639 --> 02:16:32.150 align:start position:0%
take a look
so<02:16:29.599><c> one</c><02:16:30.320><c> two</c><02:16:31.119><c> quit</c>

02:16:32.150 --> 02:16:32.160 align:start position:0%
so one two quit
 

02:16:32.160 --> 02:16:34.389 align:start position:0%
so one two quit
beautiful<02:16:32.559><c> we</c><02:16:32.719><c> solve</c><02:16:32.960><c> the</c><02:16:33.120><c> problem</c><02:16:34.000><c> there</c><02:16:34.240><c> is</c>

02:16:34.389 --> 02:16:34.399 align:start position:0%
beautiful we solve the problem there is
 

02:16:34.399 --> 02:16:35.830 align:start position:0%
beautiful we solve the problem there is
another<02:16:34.719><c> way</c><02:16:34.880><c> to</c><02:16:34.960><c> solve</c><02:16:35.200><c> this</c><02:16:35.359><c> problem</c><02:16:35.760><c> as</c>

02:16:35.830 --> 02:16:35.840 align:start position:0%
another way to solve this problem as
 

02:16:35.840 --> 02:16:36.150 align:start position:0%
another way to solve this problem as
well

02:16:36.150 --> 02:16:36.160 align:start position:0%
well
 

02:16:36.160 --> 02:16:38.389 align:start position:0%
well
let<02:16:36.319><c> me</c><02:16:36.479><c> show</c><02:16:36.639><c> you</c><02:16:37.519><c> we</c><02:16:37.679><c> can</c><02:16:37.840><c> reverse</c><02:16:38.240><c> this</c>

02:16:38.389 --> 02:16:38.399 align:start position:0%
let me show you we can reverse this
 

02:16:38.399 --> 02:16:39.270 align:start position:0%
let me show you we can reverse this
condition

02:16:39.270 --> 02:16:39.280 align:start position:0%
condition
 

02:16:39.280 --> 02:16:41.349 align:start position:0%
condition
so<02:16:39.439><c> if</c><02:16:39.599><c> the</c><02:16:39.679><c> user</c><02:16:40.000><c> types</c><02:16:40.319><c> quit</c><02:16:40.880><c> we</c><02:16:41.040><c> can</c>

02:16:41.349 --> 02:16:41.359 align:start position:0%
so if the user types quit we can
 

02:16:41.359 --> 02:16:43.030 align:start position:0%
so if the user types quit we can
immediately<02:16:41.920><c> jump</c><02:16:42.240><c> out</c><02:16:42.399><c> of</c><02:16:42.479><c> the</c><02:16:42.639><c> loop</c>

02:16:43.030 --> 02:16:43.040 align:start position:0%
immediately jump out of the loop
 

02:16:43.040 --> 02:16:45.190 align:start position:0%
immediately jump out of the loop
using<02:16:43.280><c> the</c><02:16:43.439><c> break</c><02:16:43.840><c> statement</c><02:16:44.800><c> so</c><02:16:44.960><c> i'm</c><02:16:45.040><c> going</c>

02:16:45.190 --> 02:16:45.200 align:start position:0%
using the break statement so i'm going
 

02:16:45.200 --> 02:16:46.230 align:start position:0%
using the break statement so i'm going
to<02:16:45.280><c> remove</c><02:16:45.599><c> the</c><02:16:45.840><c> not</c>

02:16:46.230 --> 02:16:46.240 align:start position:0%
to remove the not
 

02:16:46.240 --> 02:16:49.349 align:start position:0%
to remove the not
operator<02:16:47.679><c> if</c><02:16:47.840><c> the</c><02:16:48.000><c> user</c><02:16:48.240><c> types</c><02:16:48.559><c> quit</c>

02:16:49.349 --> 02:16:49.359 align:start position:0%
operator if the user types quit
 

02:16:49.359 --> 02:16:52.070 align:start position:0%
operator if the user types quit
we're<02:16:49.519><c> going</c><02:16:49.679><c> to</c><02:16:49.840><c> break</c><02:16:50.719><c> out</c><02:16:50.880><c> of</c><02:16:50.960><c> the</c><02:16:51.120><c> loop</c>

02:16:52.070 --> 02:16:52.080 align:start position:0%
we're going to break out of the loop
 

02:16:52.080 --> 02:16:53.030 align:start position:0%
we're going to break out of the loop
otherwise

02:16:53.030 --> 02:16:53.040 align:start position:0%
otherwise
 

02:16:53.040 --> 02:16:54.950 align:start position:0%
otherwise
we're<02:16:53.200><c> going</c><02:16:53.280><c> to</c><02:16:53.359><c> continue</c><02:16:53.760><c> execution</c><02:16:54.399><c> and</c>

02:16:54.950 --> 02:16:54.960 align:start position:0%
we're going to continue execution and
 

02:16:54.960 --> 02:16:56.870 align:start position:0%
we're going to continue execution and
print<02:16:55.280><c> this</c><02:16:55.439><c> input</c><02:16:55.760><c> on</c><02:16:55.920><c> the</c><02:16:56.000><c> terminal</c>

02:16:56.870 --> 02:16:56.880 align:start position:0%
print this input on the terminal
 

02:16:56.880 --> 02:16:59.110 align:start position:0%
print this input on the terminal
so<02:16:57.040><c> when</c><02:16:57.280><c> java</c><02:16:57.599><c> sees</c><02:16:57.840><c> the</c><02:16:57.920><c> break</c><02:16:58.240><c> statement</c><02:16:58.960><c> it</c>

02:16:59.110 --> 02:16:59.120 align:start position:0%
so when java sees the break statement it
 

02:16:59.120 --> 02:17:00.790 align:start position:0%
so when java sees the break statement it
will<02:16:59.359><c> ignore</c><02:16:59.760><c> everything</c><02:17:00.080><c> else</c><02:17:00.319><c> after</c>

02:17:00.790 --> 02:17:00.800 align:start position:0%
will ignore everything else after
 

02:17:00.800 --> 02:17:02.870 align:start position:0%
will ignore everything else after
and<02:17:00.960><c> it</c><02:17:01.120><c> will</c><02:17:01.280><c> terminate</c><02:17:01.679><c> the</c><02:17:01.840><c> loop</c><02:17:02.479><c> let's</c><02:17:02.719><c> run</c>

02:17:02.870 --> 02:17:02.880 align:start position:0%
and it will terminate the loop let's run
 

02:17:02.880 --> 02:17:05.270 align:start position:0%
and it will terminate the loop let's run
the<02:17:03.040><c> program</c>

02:17:05.270 --> 02:17:05.280 align:start position:0%
the program
 

02:17:05.280 --> 02:17:06.950 align:start position:0%
the program
once<02:17:05.519><c> again</c><02:17:05.760><c> we</c><02:17:05.920><c> enter</c><02:17:06.160><c> a</c><02:17:06.240><c> couple</c><02:17:06.479><c> numbers</c>

02:17:06.950 --> 02:17:06.960 align:start position:0%
once again we enter a couple numbers
 

02:17:06.960 --> 02:17:08.870 align:start position:0%
once again we enter a couple numbers
followed<02:17:07.439><c> by</c><02:17:07.920><c> quit</c>

02:17:08.870 --> 02:17:08.880 align:start position:0%
followed by quit
 

02:17:08.880 --> 02:17:11.990 align:start position:0%
followed by quit
beautiful<02:17:10.080><c> so</c><02:17:10.240><c> this</c><02:17:10.399><c> is</c><02:17:10.479><c> the</c><02:17:10.639><c> break</c><02:17:10.960><c> statement</c>

02:17:11.990 --> 02:17:12.000 align:start position:0%
beautiful so this is the break statement
 

02:17:12.000 --> 02:17:13.830 align:start position:0%
beautiful so this is the break statement
we<02:17:12.160><c> also</c><02:17:12.399><c> have</c><02:17:12.479><c> the</c><02:17:12.639><c> continuous</c><02:17:13.200><c> statement</c>

02:17:13.830 --> 02:17:13.840 align:start position:0%
we also have the continuous statement
 

02:17:13.840 --> 02:17:15.750 align:start position:0%
we also have the continuous statement
that<02:17:14.080><c> moves</c><02:17:14.399><c> control</c><02:17:14.880><c> to</c><02:17:15.040><c> the</c><02:17:15.200><c> beginning</c><02:17:15.519><c> of</c><02:17:15.679><c> a</c>

02:17:15.750 --> 02:17:15.760 align:start position:0%
that moves control to the beginning of a
 

02:17:15.760 --> 02:17:16.309 align:start position:0%
that moves control to the beginning of a
loop

02:17:16.309 --> 02:17:16.319 align:start position:0%
loop
 

02:17:16.319 --> 02:17:18.870 align:start position:0%
loop
let<02:17:16.479><c> me</c><02:17:16.639><c> show</c><02:17:16.800><c> you</c><02:17:17.519><c> so</c><02:17:17.920><c> let's</c><02:17:18.160><c> imagine</c><02:17:18.639><c> if</c><02:17:18.800><c> the</c>

02:17:18.870 --> 02:17:18.880 align:start position:0%
let me show you so let's imagine if the
 

02:17:18.880 --> 02:17:19.750 align:start position:0%
let me show you so let's imagine if the
user<02:17:19.200><c> types</c>

02:17:19.750 --> 02:17:19.760 align:start position:0%
user types
 

02:17:19.760 --> 02:17:22.150 align:start position:0%
user types
pass<02:17:20.479><c> we</c><02:17:20.639><c> don't</c><02:17:20.719><c> want</c><02:17:20.880><c> to</c><02:17:20.960><c> echo</c><02:17:21.359><c> that</c><02:17:21.679><c> but</c><02:17:21.920><c> also</c>

02:17:22.150 --> 02:17:22.160 align:start position:0%
pass we don't want to echo that but also
 

02:17:22.160 --> 02:17:23.669 align:start position:0%
pass we don't want to echo that but also
we<02:17:22.319><c> don't</c><02:17:22.399><c> want</c><02:17:22.559><c> to</c><02:17:22.639><c> terminate</c><02:17:23.040><c> the</c><02:17:23.200><c> loop</c>

02:17:23.669 --> 02:17:23.679 align:start position:0%
we don't want to terminate the loop
 

02:17:23.679 --> 02:17:25.509 align:start position:0%
we don't want to terminate the loop
you<02:17:23.920><c> want</c><02:17:24.000><c> to</c><02:17:24.080><c> ask</c><02:17:24.240><c> the</c><02:17:24.399><c> user</c><02:17:24.800><c> to</c><02:17:24.960><c> try</c><02:17:25.200><c> one</c><02:17:25.359><c> more</c>

02:17:25.509 --> 02:17:25.519 align:start position:0%
you want to ask the user to try one more
 

02:17:25.519 --> 02:17:28.629 align:start position:0%
you want to ask the user to try one more
time<02:17:26.399><c> so</c><02:17:26.639><c> after</c><02:17:26.960><c> we</c><02:17:27.120><c> read</c><02:17:27.280><c> the</c><02:17:27.439><c> input</c>

02:17:28.629 --> 02:17:28.639 align:start position:0%
time so after we read the input
 

02:17:28.639 --> 02:17:31.910 align:start position:0%
time so after we read the input
we<02:17:28.800><c> can</c><02:17:28.960><c> check</c><02:17:29.120><c> to</c><02:17:29.280><c> see</c><02:17:30.080><c> if</c><02:17:30.399><c> input</c><02:17:30.960><c> equals</c>

02:17:31.910 --> 02:17:31.920 align:start position:0%
we can check to see if input equals
 

02:17:31.920 --> 02:17:34.790 align:start position:0%
we can check to see if input equals
pass<02:17:33.359><c> this</c><02:17:33.519><c> is</c><02:17:33.599><c> where</c><02:17:33.760><c> we</c><02:17:33.920><c> use</c><02:17:34.080><c> the</c><02:17:34.240><c> continuous</c>

02:17:34.790 --> 02:17:34.800 align:start position:0%
pass this is where we use the continuous
 

02:17:34.800 --> 02:17:35.750 align:start position:0%
pass this is where we use the continuous
statement

02:17:35.750 --> 02:17:35.760 align:start position:0%
statement
 

02:17:35.760 --> 02:17:38.469 align:start position:0%
statement
when<02:17:36.080><c> java</c><02:17:36.399><c> sees</c><02:17:36.639><c> this</c><02:17:37.280><c> it</c><02:17:37.439><c> will</c><02:17:37.599><c> move</c><02:17:37.840><c> control</c>

02:17:38.469 --> 02:17:38.479 align:start position:0%
when java sees this it will move control
 

02:17:38.479 --> 02:17:40.309 align:start position:0%
when java sees this it will move control
to<02:17:38.719><c> the</c><02:17:38.880><c> beginning</c><02:17:39.280><c> of</c><02:17:39.359><c> the</c><02:17:39.519><c> loop</c>

02:17:40.309 --> 02:17:40.319 align:start position:0%
to the beginning of the loop
 

02:17:40.319 --> 02:17:41.669 align:start position:0%
to the beginning of the loop
so<02:17:40.559><c> all</c><02:17:40.719><c> these</c><02:17:40.880><c> other</c><02:17:41.120><c> statements</c><02:17:41.519><c> are</c><02:17:41.599><c> going</c>

02:17:41.669 --> 02:17:41.679 align:start position:0%
so all these other statements are going
 

02:17:41.679 --> 02:17:44.309 align:start position:0%
so all these other statements are going
to<02:17:41.760><c> get</c><02:17:42.000><c> ignored</c><02:17:42.800><c> and</c><02:17:43.280><c> what</c><02:17:43.439><c> the</c><02:17:43.599><c> user</c><02:17:43.920><c> types</c>

02:17:44.309 --> 02:17:44.319 align:start position:0%
to get ignored and what the user types
 

02:17:44.319 --> 02:17:45.669 align:start position:0%
to get ignored and what the user types
is<02:17:44.399><c> not</c><02:17:44.639><c> going</c><02:17:44.800><c> to</c><02:17:44.880><c> get</c><02:17:45.040><c> printed</c><02:17:45.439><c> on</c><02:17:45.519><c> the</c>

02:17:45.669 --> 02:17:45.679 align:start position:0%
is not going to get printed on the
 

02:17:45.679 --> 02:17:48.070 align:start position:0%
is not going to get printed on the
terminal<02:17:46.719><c> let's</c><02:17:46.960><c> run</c><02:17:47.120><c> the</c><02:17:47.280><c> program</c><02:17:47.679><c> and</c><02:17:47.920><c> see</c>

02:17:48.070 --> 02:17:48.080 align:start position:0%
terminal let's run the program and see
 

02:17:48.080 --> 02:17:49.349 align:start position:0%
terminal let's run the program and see
this<02:17:48.240><c> in</c><02:17:48.479><c> action</c>

02:17:49.349 --> 02:17:49.359 align:start position:0%
this in action
 

02:17:49.359 --> 02:17:52.389 align:start position:0%
this in action
so<02:17:49.519><c> we</c><02:17:49.679><c> type</c><02:17:49.920><c> 1</c><02:17:50.559><c> 2</c><02:17:51.519><c> pass</c>

02:17:52.389 --> 02:17:52.399 align:start position:0%
so we type 1 2 pass
 

02:17:52.399 --> 02:17:55.030 align:start position:0%
so we type 1 2 pass
it<02:17:52.479><c> doesn't</c><02:17:52.719><c> get</c><02:17:52.880><c> a</c><02:17:53.040><c> code</c><02:17:53.280><c> back</c><02:17:53.920><c> one</c><02:17:54.080><c> more</c><02:17:54.319><c> time</c>

02:17:55.030 --> 02:17:55.040 align:start position:0%
it doesn't get a code back one more time
 

02:17:55.040 --> 02:17:57.509 align:start position:0%
it doesn't get a code back one more time
and<02:17:55.280><c> finally</c><02:17:55.760><c> quit</c>

02:17:57.509 --> 02:17:57.519 align:start position:0%
and finally quit
 

02:17:57.519 --> 02:17:59.750 align:start position:0%
and finally quit
so<02:17:57.760><c> to</c><02:17:57.920><c> recap</c><02:17:58.639><c> the</c><02:17:58.800><c> brick</c><02:17:59.120><c> statement</c>

02:17:59.750 --> 02:17:59.760 align:start position:0%
so to recap the brick statement
 

02:17:59.760 --> 02:18:01.030 align:start position:0%
so to recap the brick statement
terminates<02:18:00.319><c> a</c><02:18:00.399><c> loop</c>

02:18:01.030 --> 02:18:01.040 align:start position:0%
terminates a loop
 

02:18:01.040 --> 02:18:03.270 align:start position:0%
terminates a loop
and<02:18:01.519><c> the</c><02:18:01.679><c> continue</c><02:18:02.080><c> statement</c><02:18:02.639><c> moves</c><02:18:02.960><c> control</c>

02:18:03.270 --> 02:18:03.280 align:start position:0%
and the continue statement moves control
 

02:18:03.280 --> 02:18:05.110 align:start position:0%
and the continue statement moves control
to<02:18:03.439><c> the</c><02:18:03.599><c> beginning</c><02:18:03.920><c> of</c><02:18:04.080><c> a</c><02:18:04.160><c> loop</c>

02:18:05.110 --> 02:18:05.120 align:start position:0%
to the beginning of a loop
 

02:18:05.120 --> 02:18:06.629 align:start position:0%
to the beginning of a loop
now<02:18:05.359><c> one</c><02:18:05.519><c> last</c><02:18:05.760><c> thing</c><02:18:05.920><c> before</c><02:18:06.160><c> we</c><02:18:06.240><c> finish</c><02:18:06.479><c> this</c>

02:18:06.629 --> 02:18:06.639 align:start position:0%
now one last thing before we finish this
 

02:18:06.639 --> 02:18:09.030 align:start position:0%
now one last thing before we finish this
tutorial<02:18:07.679><c> in</c><02:18:07.760><c> this</c><02:18:08.000><c> implementation</c><02:18:08.719><c> we</c><02:18:08.800><c> don't</c>

02:18:09.030 --> 02:18:09.040 align:start position:0%
tutorial in this implementation we don't
 

02:18:09.040 --> 02:18:09.990 align:start position:0%
tutorial in this implementation we don't
really<02:18:09.280><c> need</c>

02:18:09.990 --> 02:18:10.000 align:start position:0%
really need
 

02:18:10.000 --> 02:18:12.230 align:start position:0%
really need
this<02:18:10.240><c> loop</c><02:18:10.479><c> condition</c><02:18:11.519><c> because</c><02:18:11.760><c> the</c><02:18:11.920><c> moment</c>

02:18:12.230 --> 02:18:12.240 align:start position:0%
this loop condition because the moment
 

02:18:12.240 --> 02:18:13.190 align:start position:0%
this loop condition because the moment
user<02:18:12.559><c> types</c>

02:18:13.190 --> 02:18:13.200 align:start position:0%
user types
 

02:18:13.200 --> 02:18:15.190 align:start position:0%
user types
quit<02:18:13.840><c> this</c><02:18:14.080><c> break</c><02:18:14.399><c> statement</c><02:18:14.880><c> is</c><02:18:14.960><c> going</c><02:18:15.120><c> to</c>

02:18:15.190 --> 02:18:15.200 align:start position:0%
quit this break statement is going to
 

02:18:15.200 --> 02:18:16.870 align:start position:0%
quit this break statement is going to
kick<02:18:15.439><c> in</c><02:18:15.599><c> and</c><02:18:15.760><c> terminate</c><02:18:16.160><c> the</c><02:18:16.319><c> loop</c>

02:18:16.870 --> 02:18:16.880 align:start position:0%
kick in and terminate the loop
 

02:18:16.880 --> 02:18:20.150 align:start position:0%
kick in and terminate the loop
so<02:18:17.040><c> we</c><02:18:17.200><c> can</c><02:18:17.359><c> simplify</c><02:18:17.920><c> this</c><02:18:18.080><c> code</c><02:18:18.719><c> by</c><02:18:18.960><c> using</c>

02:18:20.150 --> 02:18:20.160 align:start position:0%
so we can simplify this code by using
 

02:18:20.160 --> 02:18:23.349 align:start position:0%
so we can simplify this code by using
a<02:18:20.479><c> true</c><02:18:21.439><c> as</c><02:18:21.679><c> our</c><02:18:21.920><c> loop</c><02:18:22.240><c> condition</c>

02:18:23.349 --> 02:18:23.359 align:start position:0%
a true as our loop condition
 

02:18:23.359 --> 02:18:25.270 align:start position:0%
a true as our loop condition
so<02:18:23.519><c> this</c><02:18:23.599><c> is</c><02:18:23.760><c> always</c><02:18:24.080><c> true</c><02:18:24.559><c> and</c><02:18:24.719><c> this</c><02:18:24.880><c> loop</c><02:18:25.200><c> is</c>

02:18:25.270 --> 02:18:25.280 align:start position:0%
so this is always true and this loop is
 

02:18:25.280 --> 02:18:27.030 align:start position:0%
so this is always true and this loop is
going<02:18:25.359><c> to</c><02:18:25.439><c> get</c><02:18:25.679><c> executed</c><02:18:26.240><c> forever</c>

02:18:27.030 --> 02:18:27.040 align:start position:0%
going to get executed forever
 

02:18:27.040 --> 02:18:30.070 align:start position:0%
going to get executed forever
until<02:18:27.439><c> the</c><02:18:27.599><c> user</c><02:18:27.920><c> types</c><02:18:28.559><c> quit</c><02:18:29.439><c> this</c><02:18:29.679><c> is</c><02:18:29.760><c> a</c><02:18:29.840><c> very</c>

02:18:30.070 --> 02:18:30.080 align:start position:0%
until the user types quit this is a very
 

02:18:30.080 --> 02:18:31.910 align:start position:0%
until the user types quit this is a very
common<02:18:30.479><c> technique</c><02:18:30.800><c> that</c><02:18:30.960><c> you</c><02:18:31.040><c> see</c><02:18:31.280><c> amongst</c>

02:18:31.910 --> 02:18:31.920 align:start position:0%
common technique that you see amongst
 

02:18:31.920 --> 02:18:34.469 align:start position:0%
common technique that you see amongst
professional<02:18:32.559><c> programmers</c><02:18:33.519><c> just</c><02:18:33.760><c> remember</c>

02:18:34.469 --> 02:18:34.479 align:start position:0%
professional programmers just remember
 

02:18:34.479 --> 02:18:35.669 align:start position:0%
professional programmers just remember
if<02:18:34.559><c> you're</c><02:18:34.719><c> using</c><02:18:34.960><c> this</c><02:18:35.120><c> technique</c>

02:18:35.669 --> 02:18:35.679 align:start position:0%
if you're using this technique
 

02:18:35.679 --> 02:18:38.070 align:start position:0%
if you're using this technique
make<02:18:35.840><c> sure</c><02:18:36.080><c> to</c><02:18:36.240><c> have</c><02:18:36.719><c> a</c><02:18:36.880><c> break</c><02:18:37.200><c> statement</c>

02:18:38.070 --> 02:18:38.080 align:start position:0%
make sure to have a break statement
 

02:18:38.080 --> 02:18:39.349 align:start position:0%
make sure to have a break statement
otherwise<02:18:38.399><c> you</c><02:18:38.559><c> will</c><02:18:38.719><c> end</c><02:18:38.880><c> up</c><02:18:38.960><c> with</c><02:18:39.120><c> an</c>

02:18:39.349 --> 02:18:39.359 align:start position:0%
otherwise you will end up with an
 

02:18:39.359 --> 02:18:41.750 align:start position:0%
otherwise you will end up with an
infinite<02:18:39.760><c> loop</c><02:18:40.160><c> that</c><02:18:40.479><c> executes</c><02:18:41.040><c> forever</c><02:18:41.599><c> it</c>

02:18:41.750 --> 02:18:41.760 align:start position:0%
infinite loop that executes forever it
 

02:18:41.760 --> 02:18:42.870 align:start position:0%
infinite loop that executes forever it
never<02:18:42.080><c> terminates</c>

02:18:42.870 --> 02:18:42.880 align:start position:0%
never terminates
 

02:18:42.880 --> 02:18:44.549 align:start position:0%
never terminates
and<02:18:42.960><c> that</c><02:18:43.200><c> can</c><02:18:43.359><c> be</c><02:18:43.519><c> very</c><02:18:43.760><c> dangerous</c><02:18:44.240><c> in</c><02:18:44.319><c> terms</c>

02:18:44.549 --> 02:18:44.559 align:start position:0%
and that can be very dangerous in terms
 

02:18:44.559 --> 02:18:46.150 align:start position:0%
and that can be very dangerous in terms
of<02:18:44.639><c> memory</c><02:18:45.040><c> consumption</c>

02:18:46.150 --> 02:18:46.160 align:start position:0%
of memory consumption
 

02:18:46.160 --> 02:18:48.150 align:start position:0%
of memory consumption
so<02:18:46.319><c> if</c><02:18:46.479><c> you're</c><02:18:46.559><c> using</c><02:18:46.880><c> while</c><02:18:47.200><c> true</c><02:18:47.679><c> make</c><02:18:47.920><c> sure</c>

02:18:48.150 --> 02:18:48.160 align:start position:0%
so if you're using while true make sure
 

02:18:48.160 --> 02:18:55.990 align:start position:0%
so if you're using while true make sure
you<02:18:48.319><c> have</c><02:18:48.399><c> a</c><02:18:48.479><c> break</c><02:18:48.800><c> statement</c><02:18:49.200><c> in</c><02:18:49.280><c> your</c><02:18:50.840><c> loop</c>

02:18:55.990 --> 02:18:56.000 align:start position:0%
 
 

02:18:56.000 --> 02:18:57.669 align:start position:0%
 
the<02:18:56.160><c> last</c><02:18:56.399><c> type</c><02:18:56.559><c> of</c><02:18:56.719><c> loop</c><02:18:56.960><c> we</c><02:18:57.040><c> want</c><02:18:57.120><c> to</c><02:18:57.200><c> look</c><02:18:57.439><c> at</c>

02:18:57.669 --> 02:18:57.679 align:start position:0%
the last type of loop we want to look at
 

02:18:57.679 --> 02:18:59.910 align:start position:0%
the last type of loop we want to look at
is<02:18:57.840><c> the</c><02:18:58.080><c> for</c><02:18:58.399><c> each</c><02:18:58.639><c> loop</c><02:18:58.960><c> in</c><02:18:59.120><c> java</c>

02:18:59.910 --> 02:18:59.920 align:start position:0%
is the for each loop in java
 

02:18:59.920 --> 02:19:01.910 align:start position:0%
is the for each loop in java
we<02:19:00.080><c> use</c><02:19:00.240><c> for</c><02:19:00.399><c> each</c><02:19:00.639><c> loops</c><02:19:00.880><c> to</c><02:19:01.120><c> iterate</c><02:19:01.599><c> over</c>

02:19:01.910 --> 02:19:01.920 align:start position:0%
we use for each loops to iterate over
 

02:19:01.920 --> 02:19:03.589 align:start position:0%
we use for each loops to iterate over
arrays<02:19:02.319><c> or</c><02:19:02.639><c> collections</c>

02:19:03.589 --> 02:19:03.599 align:start position:0%
arrays or collections
 

02:19:03.599 --> 02:19:05.429 align:start position:0%
arrays or collections
let<02:19:03.760><c> me</c><02:19:03.840><c> show</c><02:19:04.000><c> you</c><02:19:04.479><c> so</c><02:19:04.639><c> i'm</c><02:19:04.800><c> going</c><02:19:04.880><c> to</c><02:19:04.960><c> start</c><02:19:05.200><c> by</c>

02:19:05.429 --> 02:19:05.439 align:start position:0%
let me show you so i'm going to start by
 

02:19:05.439 --> 02:19:07.589 align:start position:0%
let me show you so i'm going to start by
declaring<02:19:06.559><c> a</c><02:19:06.719><c> string</c><02:19:07.120><c> array</c>

02:19:07.589 --> 02:19:07.599 align:start position:0%
declaring a string array
 

02:19:07.599 --> 02:19:11.030 align:start position:0%
declaring a string array
called<02:19:08.160><c> fruit</c><02:19:09.359><c> and</c><02:19:09.599><c> we</c><02:19:09.760><c> initialize</c><02:19:10.319><c> this</c><02:19:10.559><c> with</c>

02:19:11.030 --> 02:19:11.040 align:start position:0%
called fruit and we initialize this with
 

02:19:11.040 --> 02:19:14.950 align:start position:0%
called fruit and we initialize this with
three<02:19:11.359><c> items</c><02:19:12.160><c> let's</c><02:19:12.399><c> say</c><02:19:12.639><c> apple</c><02:19:13.920><c> mango</c>

02:19:14.950 --> 02:19:14.960 align:start position:0%
three items let's say apple mango
 

02:19:14.960 --> 02:19:18.230 align:start position:0%
three items let's say apple mango
and<02:19:15.679><c> orange</c>

02:19:18.230 --> 02:19:18.240 align:start position:0%
 
 

02:19:18.240 --> 02:19:19.589 align:start position:0%
 
now<02:19:18.399><c> let's</c><02:19:18.559><c> say</c><02:19:18.719><c> we</c><02:19:18.800><c> want</c><02:19:18.880><c> to</c><02:19:19.040><c> iterate</c><02:19:19.359><c> over</c>

02:19:19.589 --> 02:19:19.599 align:start position:0%
now let's say we want to iterate over
 

02:19:19.599 --> 02:19:21.429 align:start position:0%
now let's say we want to iterate over
this<02:19:19.840><c> array</c><02:19:20.160><c> and</c><02:19:20.399><c> print</c><02:19:20.719><c> each</c><02:19:20.880><c> item</c><02:19:21.200><c> on</c><02:19:21.280><c> the</c>

02:19:21.429 --> 02:19:21.439 align:start position:0%
this array and print each item on the
 

02:19:21.439 --> 02:19:22.230 align:start position:0%
this array and print each item on the
terminal

02:19:22.230 --> 02:19:22.240 align:start position:0%
terminal
 

02:19:22.240 --> 02:19:23.669 align:start position:0%
terminal
we<02:19:22.319><c> can</c><02:19:22.479><c> use</c><02:19:22.719><c> any</c><02:19:22.880><c> of</c><02:19:23.040><c> the</c><02:19:23.120><c> loops</c><02:19:23.359><c> you</c><02:19:23.519><c> learned</c>

02:19:23.669 --> 02:19:23.679 align:start position:0%
we can use any of the loops you learned
 

02:19:23.679 --> 02:19:25.830 align:start position:0%
we can use any of the loops you learned
about<02:19:24.000><c> earlier</c><02:19:24.399><c> like</c><02:19:24.639><c> a</c><02:19:24.800><c> for</c><02:19:25.040><c> loop</c><02:19:25.359><c> or</c><02:19:25.439><c> a</c><02:19:25.599><c> while</c>

02:19:25.830 --> 02:19:25.840 align:start position:0%
about earlier like a for loop or a while
 

02:19:25.840 --> 02:19:26.389 align:start position:0%
about earlier like a for loop or a while
loop

02:19:26.389 --> 02:19:26.399 align:start position:0%
loop
 

02:19:26.399 --> 02:19:28.629 align:start position:0%
loop
but<02:19:26.559><c> we</c><02:19:26.719><c> can</c><02:19:26.960><c> also</c><02:19:27.200><c> use</c><02:19:27.599><c> the</c><02:19:27.920><c> for</c><02:19:28.160><c> each</c><02:19:28.399><c> loop</c>

02:19:28.629 --> 02:19:28.639 align:start position:0%
but we can also use the for each loop
 

02:19:28.639 --> 02:19:30.709 align:start position:0%
but we can also use the for each loop
which<02:19:28.800><c> is</c><02:19:28.880><c> a</c><02:19:28.960><c> bit</c><02:19:29.200><c> easier</c><02:19:29.679><c> let</c><02:19:29.840><c> me</c><02:19:30.000><c> show</c><02:19:30.160><c> you</c>

02:19:30.709 --> 02:19:30.719 align:start position:0%
which is a bit easier let me show you
 

02:19:30.719 --> 02:19:32.629 align:start position:0%
which is a bit easier let me show you
first<02:19:30.960><c> i'm</c><02:19:31.040><c> going</c><02:19:31.200><c> to</c><02:19:31.280><c> use</c><02:19:31.599><c> the</c><02:19:31.840><c> for</c><02:19:32.080><c> loop</c><02:19:32.399><c> to</c>

02:19:32.629 --> 02:19:32.639 align:start position:0%
first i'm going to use the for loop to
 

02:19:32.639 --> 02:19:34.230 align:start position:0%
first i'm going to use the for loop to
iterate<02:19:33.040><c> over</c><02:19:33.280><c> this</c><02:19:33.439><c> array</c>

02:19:34.230 --> 02:19:34.240 align:start position:0%
iterate over this array
 

02:19:34.240 --> 02:19:37.110 align:start position:0%
iterate over this array
so<02:19:34.399><c> we</c><02:19:34.559><c> type</c><02:19:35.040><c> four</c><02:19:35.920><c> here</c><02:19:36.080><c> we</c><02:19:36.240><c> declare</c><02:19:36.639><c> our</c><02:19:36.880><c> loop</c>

02:19:37.110 --> 02:19:37.120 align:start position:0%
so we type four here we declare our loop
 

02:19:37.120 --> 02:19:37.990 align:start position:0%
so we type four here we declare our loop
variable<02:19:37.599><c> or</c>

02:19:37.990 --> 02:19:38.000 align:start position:0%
variable or
 

02:19:38.000 --> 02:19:41.509 align:start position:0%
variable or
loop<02:19:38.319><c> counter</c><02:19:39.599><c> into</c><02:19:39.920><c> i</c><02:19:40.240><c> we</c><02:19:40.399><c> set</c><02:19:40.559><c> it</c><02:19:40.639><c> to</c><02:19:40.800><c> zero</c>

02:19:41.509 --> 02:19:41.519 align:start position:0%
loop counter into i we set it to zero
 

02:19:41.519 --> 02:19:44.230 align:start position:0%
loop counter into i we set it to zero
as<02:19:41.679><c> long</c><02:19:41.920><c> as</c><02:19:42.080><c> i</c><02:19:42.319><c> is</c><02:19:42.479><c> less</c><02:19:42.719><c> than</c><02:19:43.280><c> fruits</c><02:19:43.920><c> that</c>

02:19:44.230 --> 02:19:44.240 align:start position:0%
as long as i is less than fruits that
 

02:19:44.240 --> 02:19:45.110 align:start position:0%
as long as i is less than fruits that
length

02:19:45.110 --> 02:19:45.120 align:start position:0%
length
 

02:19:45.120 --> 02:19:47.429 align:start position:0%
length
we're<02:19:45.280><c> going</c><02:19:45.359><c> to</c><02:19:45.519><c> increment</c><02:19:46.080><c> i</c><02:19:46.319><c> by</c><02:19:46.559><c> one</c><02:19:46.960><c> after</c>

02:19:47.429 --> 02:19:47.439 align:start position:0%
we're going to increment i by one after
 

02:19:47.439 --> 02:19:48.950 align:start position:0%
we're going to increment i by one after
each<02:19:47.679><c> iteration</c>

02:19:48.950 --> 02:19:48.960 align:start position:0%
each iteration
 

02:19:48.960 --> 02:19:52.389 align:start position:0%
each iteration
and<02:19:49.120><c> here</c><02:19:49.280><c> we</c><02:19:49.439><c> simply</c><02:19:50.160><c> print</c><02:19:51.040><c> fruits</c><02:19:51.840><c> of</c>

02:19:52.389 --> 02:19:52.399 align:start position:0%
and here we simply print fruits of
 

02:19:52.399 --> 02:19:54.790 align:start position:0%
and here we simply print fruits of
i<02:19:53.439><c> let's</c><02:19:53.680><c> run</c><02:19:53.840><c> the</c><02:19:54.000><c> program</c><02:19:54.319><c> and</c><02:19:54.399><c> see</c><02:19:54.560><c> what</c><02:19:54.720><c> we</c>

02:19:54.790 --> 02:19:54.800 align:start position:0%
i let's run the program and see what we
 

02:19:54.800 --> 02:19:56.150 align:start position:0%
i let's run the program and see what we
get

02:19:56.150 --> 02:19:56.160 align:start position:0%
get
 

02:19:56.160 --> 02:19:58.070 align:start position:0%
get
so<02:19:56.399><c> we</c><02:19:56.560><c> get</c><02:19:56.800><c> each</c><02:19:57.040><c> item</c><02:19:57.359><c> on</c><02:19:57.439><c> a</c><02:19:57.520><c> new</c><02:19:57.760><c> line</c>

02:19:58.070 --> 02:19:58.080 align:start position:0%
so we get each item on a new line
 

02:19:58.080 --> 02:19:59.349 align:start position:0%
so we get each item on a new line
beautiful

02:19:59.349 --> 02:19:59.359 align:start position:0%
beautiful
 

02:19:59.359 --> 02:20:01.030 align:start position:0%
beautiful
now<02:19:59.680><c> there</c><02:19:59.920><c> is</c><02:20:00.160><c> another</c><02:20:00.399><c> way</c><02:20:00.560><c> to</c><02:20:00.720><c> write</c><02:20:00.960><c> the</c>

02:20:01.030 --> 02:20:01.040 align:start position:0%
now there is another way to write the
 

02:20:01.040 --> 02:20:03.110 align:start position:0%
now there is another way to write the
same<02:20:01.280><c> code</c><02:20:01.520><c> using</c><02:20:01.760><c> the</c><02:20:01.920><c> for</c><02:20:02.160><c> each</c><02:20:02.319><c> loop</c>

02:20:03.110 --> 02:20:03.120 align:start position:0%
same code using the for each loop
 

02:20:03.120 --> 02:20:06.309 align:start position:0%
same code using the for each loop
here<02:20:03.280><c> we</c><02:20:03.439><c> type</c><02:20:04.240><c> four</c><02:20:05.760><c> in</c><02:20:05.840><c> parenthesis</c>

02:20:06.309 --> 02:20:06.319 align:start position:0%
here we type four in parenthesis
 

02:20:06.319 --> 02:20:07.110 align:start position:0%
here we type four in parenthesis
particularly

02:20:07.110 --> 02:20:07.120 align:start position:0%
particularly
 

02:20:07.120 --> 02:20:09.190 align:start position:0%
particularly
a<02:20:07.280><c> loop</c><02:20:07.520><c> variable</c><02:20:08.319><c> but</c><02:20:08.479><c> the</c><02:20:08.640><c> type</c><02:20:08.880><c> of</c><02:20:08.960><c> this</c>

02:20:09.190 --> 02:20:09.200 align:start position:0%
a loop variable but the type of this
 

02:20:09.200 --> 02:20:10.870 align:start position:0%
a loop variable but the type of this
variable<02:20:10.000><c> should</c><02:20:10.160><c> be</c><02:20:10.399><c> based</c>

02:20:10.870 --> 02:20:10.880 align:start position:0%
variable should be based
 

02:20:10.880 --> 02:20:13.190 align:start position:0%
variable should be based
on<02:20:10.960><c> the</c><02:20:11.200><c> type</c><02:20:11.439><c> of</c><02:20:11.680><c> items</c><02:20:12.080><c> in</c><02:20:12.160><c> our</c><02:20:12.319><c> array</c><02:20:13.040><c> so</c>

02:20:13.190 --> 02:20:13.200 align:start position:0%
on the type of items in our array so
 

02:20:13.200 --> 02:20:15.110 align:start position:0%
on the type of items in our array so
here<02:20:13.359><c> we</c><02:20:13.520><c> have</c><02:20:13.840><c> a</c><02:20:14.080><c> string</c><02:20:14.399><c> array</c><02:20:14.800><c> and</c><02:20:14.960><c> that</c>

02:20:15.110 --> 02:20:15.120 align:start position:0%
here we have a string array and that
 

02:20:15.120 --> 02:20:15.510 align:start position:0%
here we have a string array and that
means

02:20:15.510 --> 02:20:15.520 align:start position:0%
means
 

02:20:15.520 --> 02:20:18.469 align:start position:0%
means
every<02:20:15.920><c> item</c><02:20:16.240><c> in</c><02:20:16.319><c> this</c><02:20:16.560><c> array</c><02:20:17.040><c> is</c><02:20:17.200><c> a</c><02:20:17.359><c> string</c><02:20:18.319><c> so</c>

02:20:18.469 --> 02:20:18.479 align:start position:0%
every item in this array is a string so
 

02:20:18.479 --> 02:20:19.830 align:start position:0%
every item in this array is a string so
here<02:20:18.640><c> we</c><02:20:18.800><c> should</c><02:20:18.960><c> declare</c>

02:20:19.830 --> 02:20:19.840 align:start position:0%
here we should declare
 

02:20:19.840 --> 02:20:23.349 align:start position:0%
here we should declare
a<02:20:20.080><c> string</c><02:20:20.479><c> variable</c><02:20:21.760><c> we</c><02:20:21.920><c> call</c><02:20:22.160><c> it</c><02:20:22.240><c> fruit</c>

02:20:23.349 --> 02:20:23.359 align:start position:0%
a string variable we call it fruit
 

02:20:23.359 --> 02:20:26.070 align:start position:0%
a string variable we call it fruit
here<02:20:23.600><c> we</c><02:20:23.760><c> type</c><02:20:24.240><c> a</c><02:20:24.399><c> colon</c><02:20:25.120><c> and</c><02:20:25.280><c> then</c><02:20:25.680><c> the</c><02:20:25.840><c> name</c>

02:20:26.070 --> 02:20:26.080 align:start position:0%
here we type a colon and then the name
 

02:20:26.080 --> 02:20:27.190 align:start position:0%
here we type a colon and then the name
of<02:20:26.240><c> our</c><02:20:26.399><c> array</c>

02:20:27.190 --> 02:20:27.200 align:start position:0%
of our array
 

02:20:27.200 --> 02:20:30.309 align:start position:0%
of our array
fruits<02:20:28.399><c> now</c><02:20:29.040><c> in</c><02:20:29.200><c> each</c><02:20:29.520><c> iteration</c>

02:20:30.309 --> 02:20:30.319 align:start position:0%
fruits now in each iteration
 

02:20:30.319 --> 02:20:33.190 align:start position:0%
fruits now in each iteration
fruit<02:20:30.720><c> will</c><02:20:30.960><c> hold</c><02:20:31.439><c> the</c><02:20:31.680><c> value</c><02:20:31.920><c> of</c><02:20:32.080><c> one</c><02:20:32.399><c> item</c><02:20:33.040><c> in</c>

02:20:33.190 --> 02:20:33.200 align:start position:0%
fruit will hold the value of one item in
 

02:20:33.200 --> 02:20:34.150 align:start position:0%
fruit will hold the value of one item in
this<02:20:33.439><c> array</c>

02:20:34.150 --> 02:20:34.160 align:start position:0%
this array
 

02:20:34.160 --> 02:20:35.990 align:start position:0%
this array
so<02:20:34.399><c> here</c><02:20:34.640><c> we</c><02:20:34.800><c> don't</c><02:20:34.960><c> have</c><02:20:35.120><c> to</c><02:20:35.280><c> declare</c><02:20:35.920><c> a</c>

02:20:35.990 --> 02:20:36.000 align:start position:0%
so here we don't have to declare a
 

02:20:36.000 --> 02:20:38.230 align:start position:0%
so here we don't have to declare a
numeric<02:20:36.560><c> counter</c><02:20:37.120><c> we</c><02:20:37.280><c> don't</c><02:20:37.439><c> have</c><02:20:37.600><c> to</c><02:20:37.760><c> write</c>

02:20:38.230 --> 02:20:38.240 align:start position:0%
numeric counter we don't have to write
 

02:20:38.240 --> 02:20:40.230 align:start position:0%
numeric counter we don't have to write
a<02:20:38.399><c> boolean</c><02:20:38.720><c> expression</c><02:20:39.200><c> like</c><02:20:39.359><c> this</c><02:20:39.840><c> we</c><02:20:40.000><c> don't</c>

02:20:40.230 --> 02:20:40.240 align:start position:0%
a boolean expression like this we don't
 

02:20:40.240 --> 02:20:42.150 align:start position:0%
a boolean expression like this we don't
have<02:20:40.399><c> to</c><02:20:40.800><c> increment</c><02:20:41.280><c> our</c><02:20:41.520><c> counter</c>

02:20:42.150 --> 02:20:42.160 align:start position:0%
have to increment our counter
 

02:20:42.160 --> 02:20:43.990 align:start position:0%
have to increment our counter
it's<02:20:42.399><c> much</c><02:20:42.640><c> easier</c><02:20:42.960><c> to</c><02:20:43.120><c> iterate</c><02:20:43.600><c> over</c><02:20:43.840><c> an</c>

02:20:43.990 --> 02:20:44.000 align:start position:0%
it's much easier to iterate over an
 

02:20:44.000 --> 02:20:45.830 align:start position:0%
it's much easier to iterate over an
array<02:20:44.800><c> now</c>

02:20:45.830 --> 02:20:45.840 align:start position:0%
array now
 

02:20:45.840 --> 02:20:49.590 align:start position:0%
array now
if<02:20:46.000><c> we</c><02:20:46.240><c> print</c><02:20:47.200><c> fruit</c><02:20:48.479><c> we</c><02:20:48.640><c> get</c><02:20:48.880><c> the</c><02:20:49.040><c> exact</c><02:20:49.359><c> same</c>

02:20:49.590 --> 02:20:49.600 align:start position:0%
if we print fruit we get the exact same
 

02:20:49.600 --> 02:20:50.630 align:start position:0%
if we print fruit we get the exact same
result<02:20:49.920><c> as</c><02:20:50.080><c> before</c>

02:20:50.630 --> 02:20:50.640 align:start position:0%
result as before
 

02:20:50.640 --> 02:20:53.990 align:start position:0%
result as before
take<02:20:50.800><c> a</c><02:20:50.880><c> look</c><02:20:52.080><c> so</c><02:20:52.720><c> the</c><02:20:52.880><c> first</c><02:20:53.120><c> three</c><02:20:53.359><c> items</c><02:20:53.680><c> are</c>

02:20:53.990 --> 02:20:54.000 align:start position:0%
take a look so the first three items are
 

02:20:54.000 --> 02:20:56.469 align:start position:0%
take a look so the first three items are
from<02:20:54.240><c> our</c><02:20:54.399><c> for</c><02:20:54.640><c> loop</c><02:20:54.960><c> and</c><02:20:55.600><c> here's</c><02:20:55.920><c> the</c><02:20:56.080><c> result</c>

02:20:56.469 --> 02:20:56.479 align:start position:0%
from our for loop and here's the result
 

02:20:56.479 --> 02:20:58.630 align:start position:0%
from our for loop and here's the result
of<02:20:56.640><c> our</c><02:20:56.880><c> four</c><02:20:57.120><c> each</c><02:20:57.359><c> loop</c>

02:20:58.630 --> 02:20:58.640 align:start position:0%
of our four each loop
 

02:20:58.640 --> 02:21:00.630 align:start position:0%
of our four each loop
so<02:20:58.800><c> this</c><02:20:58.960><c> is</c><02:20:59.120><c> the</c><02:20:59.200><c> four-ish</c><02:20:59.600><c> loop</c><02:20:59.920><c> however</c>

02:21:00.630 --> 02:21:00.640 align:start position:0%
so this is the four-ish loop however
 

02:21:00.640 --> 02:21:02.070 align:start position:0%
so this is the four-ish loop however
this<02:21:00.880><c> force</c><02:21:01.200><c> loop</c><02:21:01.439><c> has</c><02:21:01.680><c> a</c><02:21:01.760><c> couple</c><02:21:02.000><c> of</c>

02:21:02.070 --> 02:21:02.080 align:start position:0%
this force loop has a couple of
 

02:21:02.080 --> 02:21:03.190 align:start position:0%
this force loop has a couple of
limitations

02:21:03.190 --> 02:21:03.200 align:start position:0%
limitations
 

02:21:03.200 --> 02:21:05.190 align:start position:0%
limitations
one<02:21:03.359><c> limitation</c><02:21:03.920><c> is</c><02:21:04.000><c> that</c><02:21:04.160><c> it's</c><02:21:04.399><c> always</c>

02:21:05.190 --> 02:21:05.200 align:start position:0%
one limitation is that it's always
 

02:21:05.200 --> 02:21:07.349 align:start position:0%
one limitation is that it's always
forward<02:21:05.600><c> only</c><02:21:06.080><c> so</c><02:21:06.240><c> we</c><02:21:06.319><c> cannot</c><02:21:06.720><c> iterate</c><02:21:07.120><c> over</c>

02:21:07.349 --> 02:21:07.359 align:start position:0%
forward only so we cannot iterate over
 

02:21:07.359 --> 02:21:07.990 align:start position:0%
forward only so we cannot iterate over
this<02:21:07.520><c> array</c>

02:21:07.990 --> 02:21:08.000 align:start position:0%
this array
 

02:21:08.000 --> 02:21:10.550 align:start position:0%
this array
from<02:21:08.240><c> the</c><02:21:08.560><c> end</c><02:21:08.960><c> to</c><02:21:09.200><c> the</c><02:21:09.280><c> beginning</c><02:21:10.319><c> in</c>

02:21:10.550 --> 02:21:10.560 align:start position:0%
from the end to the beginning in
 

02:21:10.560 --> 02:21:11.990 align:start position:0%
from the end to the beginning in
contrast<02:21:11.040><c> we</c><02:21:11.200><c> can</c><02:21:11.359><c> easily</c><02:21:11.600><c> do</c><02:21:11.760><c> this</c>

02:21:11.990 --> 02:21:12.000 align:start position:0%
contrast we can easily do this
 

02:21:12.000 --> 02:21:13.670 align:start position:0%
contrast we can easily do this
with<02:21:12.160><c> a</c><02:21:12.240><c> for</c><02:21:12.479><c> loop</c><02:21:13.040><c> so</c><02:21:13.200><c> here</c><02:21:13.359><c> we</c><02:21:13.520><c> can</c>

02:21:13.670 --> 02:21:13.680 align:start position:0%
with a for loop so here we can
 

02:21:13.680 --> 02:21:15.349 align:start position:0%
with a for loop so here we can
initialize<02:21:14.640><c> i</c>

02:21:15.349 --> 02:21:15.359 align:start position:0%
initialize i
 

02:21:15.359 --> 02:21:18.469 align:start position:0%
initialize i
to<02:21:15.600><c> fruit</c><02:21:16.240><c> the</c><02:21:16.479><c> length</c><02:21:17.520><c> then</c><02:21:17.760><c> we</c><02:21:18.000><c> change</c><02:21:18.240><c> this</c>

02:21:18.469 --> 02:21:18.479 align:start position:0%
to fruit the length then we change this
 

02:21:18.479 --> 02:21:19.110 align:start position:0%
to fruit the length then we change this
operator

02:21:19.110 --> 02:21:19.120 align:start position:0%
operator
 

02:21:19.120 --> 02:21:22.150 align:start position:0%
operator
to<02:21:19.840><c> greater</c><02:21:20.319><c> than</c><02:21:21.200><c> and</c><02:21:21.359><c> replace</c><02:21:21.680><c> this</c><02:21:21.840><c> value</c>

02:21:22.150 --> 02:21:22.160 align:start position:0%
to greater than and replace this value
 

02:21:22.160 --> 02:21:22.950 align:start position:0%
to greater than and replace this value
with<02:21:22.319><c> zero</c>

02:21:22.950 --> 02:21:22.960 align:start position:0%
with zero
 

02:21:22.960 --> 02:21:25.110 align:start position:0%
with zero
so<02:21:23.120><c> as</c><02:21:23.280><c> long</c><02:21:23.439><c> as</c><02:21:23.680><c> i</c><02:21:23.920><c> is</c><02:21:24.319><c> greater</c><02:21:24.640><c> than</c><02:21:24.880><c> zero</c>

02:21:25.110 --> 02:21:25.120 align:start position:0%
so as long as i is greater than zero
 

02:21:25.120 --> 02:21:26.070 align:start position:0%
so as long as i is greater than zero
we're<02:21:25.280><c> going</c><02:21:25.359><c> to</c><02:21:25.439><c> decrement</c>

02:21:26.070 --> 02:21:26.080 align:start position:0%
we're going to decrement
 

02:21:26.080 --> 02:21:28.710 align:start position:0%
we're going to decrement
i<02:21:27.120><c> the</c><02:21:27.280><c> second</c><02:21:27.600><c> limitation</c><02:21:28.080><c> of</c><02:21:28.160><c> the</c><02:21:28.319><c> forage</c>

02:21:28.710 --> 02:21:28.720 align:start position:0%
i the second limitation of the forage
 

02:21:28.720 --> 02:21:29.750 align:start position:0%
i the second limitation of the forage
loop<02:21:29.040><c> is</c><02:21:29.120><c> that</c>

02:21:29.750 --> 02:21:29.760 align:start position:0%
loop is that
 

02:21:29.760 --> 02:21:31.750 align:start position:0%
loop is that
here<02:21:29.920><c> we</c><02:21:30.080><c> don't</c><02:21:30.240><c> have</c><02:21:30.560><c> access</c><02:21:30.880><c> to</c><02:21:31.040><c> the</c><02:21:31.280><c> index</c>

02:21:31.750 --> 02:21:31.760 align:start position:0%
here we don't have access to the index
 

02:21:31.760 --> 02:21:32.790 align:start position:0%
here we don't have access to the index
of<02:21:31.840><c> each</c><02:21:32.080><c> item</c>

02:21:32.790 --> 02:21:32.800 align:start position:0%
of each item
 

02:21:32.800 --> 02:21:35.270 align:start position:0%
of each item
all<02:21:32.960><c> we</c><02:21:33.120><c> have</c><02:21:33.840><c> is</c><02:21:34.000><c> this</c><02:21:34.240><c> loop</c><02:21:34.479><c> variable</c><02:21:35.040><c> which</c>

02:21:35.270 --> 02:21:35.280 align:start position:0%
all we have is this loop variable which
 

02:21:35.280 --> 02:21:35.910 align:start position:0%
all we have is this loop variable which
holds

02:21:35.910 --> 02:21:35.920 align:start position:0%
holds
 

02:21:35.920 --> 02:21:39.190 align:start position:0%
holds
the<02:21:36.080><c> value</c><02:21:36.720><c> of</c><02:21:36.960><c> each</c><02:21:37.280><c> item</c><02:21:37.920><c> in</c><02:21:38.000><c> this</c><02:21:38.240><c> array</c>

02:21:39.190 --> 02:21:39.200 align:start position:0%
the value of each item in this array
 

02:21:39.200 --> 02:21:41.990 align:start position:0%
the value of each item in this array
in<02:21:39.359><c> contrast</c><02:21:40.399><c> in</c><02:21:40.560><c> our</c><02:21:40.720><c> for</c><02:21:40.960><c> loops</c><02:21:41.600><c> we</c><02:21:41.760><c> can</c>

02:21:41.990 --> 02:21:42.000 align:start position:0%
in contrast in our for loops we can
 

02:21:42.000 --> 02:21:42.950 align:start position:0%
in contrast in our for loops we can
access<02:21:42.399><c> both</c><02:21:42.640><c> the</c>

02:21:42.950 --> 02:21:42.960 align:start position:0%
access both the
 

02:21:42.960 --> 02:21:45.270 align:start position:0%
access both the
index<02:21:43.520><c> and</c><02:21:43.600><c> the</c><02:21:43.760><c> actual</c><02:21:44.160><c> item</c><02:21:44.720><c> so</c><02:21:45.040><c> i</c>

02:21:45.270 --> 02:21:45.280 align:start position:0%
index and the actual item so i
 

02:21:45.280 --> 02:21:47.429 align:start position:0%
index and the actual item so i
represents<02:21:45.760><c> the</c><02:21:46.000><c> index</c><02:21:46.399><c> of</c><02:21:46.560><c> each</c><02:21:46.720><c> item</c>

02:21:47.429 --> 02:21:47.439 align:start position:0%
represents the index of each item
 

02:21:47.439 --> 02:21:50.469 align:start position:0%
represents the index of each item
and<02:21:47.760><c> fruits</c><02:21:48.080><c> of</c><02:21:48.319><c> i</c><02:21:48.800><c> returns</c><02:21:49.439><c> the</c><02:21:49.680><c> item</c><02:21:50.240><c> at</c><02:21:50.319><c> the</c>

02:21:50.469 --> 02:21:50.479 align:start position:0%
and fruits of i returns the item at the
 

02:21:50.479 --> 02:21:51.590 align:start position:0%
and fruits of i returns the item at the
given<02:21:50.800><c> index</c>

02:21:51.590 --> 02:21:51.600 align:start position:0%
given index
 

02:21:51.600 --> 02:21:53.349 align:start position:0%
given index
so<02:21:51.760><c> if</c><02:21:51.840><c> you</c><02:21:51.920><c> need</c><02:21:52.080><c> the</c><02:21:52.319><c> index</c><02:21:52.960><c> then</c><02:21:53.120><c> you</c><02:21:53.200><c> will</c>

02:21:53.349 --> 02:21:53.359 align:start position:0%
so if you need the index then you will
 

02:21:53.359 --> 02:21:54.630 align:start position:0%
so if you need the index then you will
have<02:21:53.439><c> to</c><02:21:53.600><c> use</c><02:21:53.760><c> the</c><02:21:53.920><c> for</c><02:21:54.160><c> loop</c>

02:21:54.630 --> 02:21:54.640 align:start position:0%
have to use the for loop
 

02:21:54.640 --> 02:21:56.309 align:start position:0%
have to use the for loop
otherwise<02:21:55.200><c> it's</c><02:21:55.359><c> much</c><02:21:55.600><c> easier</c><02:21:55.840><c> to</c><02:21:55.920><c> use</c><02:21:56.080><c> the</c>

02:21:56.309 --> 02:21:56.319 align:start position:0%
otherwise it's much easier to use the
 

02:21:56.319 --> 02:22:03.270 align:start position:0%
otherwise it's much easier to use the
for<02:21:56.560><c> each</c><02:21:56.720><c> loop</c>

02:22:03.270 --> 02:22:03.280 align:start position:0%
 
 

02:22:03.280 --> 02:22:04.389 align:start position:0%
 
all<02:22:03.359><c> right</c><02:22:03.520><c> now</c><02:22:03.680><c> let's</c><02:22:03.840><c> get</c><02:22:04.000><c> back</c><02:22:04.160><c> to</c><02:22:04.240><c> our</c>

02:22:04.389 --> 02:22:04.399 align:start position:0%
all right now let's get back to our
 

02:22:04.399 --> 02:22:06.790 align:start position:0%
all right now let's get back to our
mortgage<02:22:04.800><c> calculator</c><02:22:05.600><c> and</c><02:22:06.160><c> implement</c><02:22:06.560><c> some</c>

02:22:06.790 --> 02:22:06.800 align:start position:0%
mortgage calculator and implement some
 

02:22:06.800 --> 02:22:08.550 align:start position:0%
mortgage calculator and implement some
basic<02:22:07.280><c> error</c><02:22:07.520><c> handling</c>

02:22:08.550 --> 02:22:08.560 align:start position:0%
basic error handling
 

02:22:08.560 --> 02:22:10.630 align:start position:0%
basic error handling
so<02:22:08.800><c> here</c><02:22:08.960><c> i've</c><02:22:09.280><c> changed</c><02:22:09.760><c> this</c><02:22:10.000><c> question</c><02:22:10.479><c> by</c>

02:22:10.630 --> 02:22:10.640 align:start position:0%
so here i've changed this question by
 

02:22:10.640 --> 02:22:12.550 align:start position:0%
so here i've changed this question by
adding<02:22:10.960><c> this</c><02:22:11.200><c> label</c><02:22:11.600><c> that</c><02:22:11.840><c> identifies</c><02:22:12.399><c> the</c>

02:22:12.550 --> 02:22:12.560 align:start position:0%
adding this label that identifies the
 

02:22:12.560 --> 02:22:14.389 align:start position:0%
adding this label that identifies the
range<02:22:12.800><c> of</c><02:22:12.880><c> values</c><02:22:13.280><c> we</c><02:22:13.359><c> can</c><02:22:13.680><c> enter</c>

02:22:14.389 --> 02:22:14.399 align:start position:0%
range of values we can enter
 

02:22:14.399 --> 02:22:16.309 align:start position:0%
range of values we can enter
so<02:22:14.560><c> the</c><02:22:14.720><c> minimum</c><02:22:15.120><c> amount</c><02:22:15.439><c> of</c><02:22:15.600><c> loan</c><02:22:15.840><c> we</c><02:22:16.000><c> can</c><02:22:16.080><c> get</c>

02:22:16.309 --> 02:22:16.319 align:start position:0%
so the minimum amount of loan we can get
 

02:22:16.319 --> 02:22:18.309 align:start position:0%
so the minimum amount of loan we can get
is<02:22:16.479><c> one</c><02:22:16.640><c> thousand</c><02:22:16.960><c> dollars</c><02:22:17.439><c> and</c><02:22:17.680><c> maximum</c>

02:22:18.309 --> 02:22:18.319 align:start position:0%
is one thousand dollars and maximum
 

02:22:18.319 --> 02:22:21.510 align:start position:0%
is one thousand dollars and maximum
is<02:22:18.640><c> one</c><02:22:18.800><c> million</c><02:22:19.120><c> dollars</c><02:22:20.000><c> so</c><02:22:20.160><c> if</c><02:22:20.319><c> i</c><02:22:20.479><c> enter</c><02:22:21.200><c> one</c>

02:22:21.510 --> 02:22:21.520 align:start position:0%
is one million dollars so if i enter one
 

02:22:21.520 --> 02:22:22.790 align:start position:0%
is one million dollars so if i enter one
here

02:22:22.790 --> 02:22:22.800 align:start position:0%
here
 

02:22:22.800 --> 02:22:24.389 align:start position:0%
here
i<02:22:22.880><c> get</c><02:22:23.040><c> this</c><02:22:23.200><c> message</c><02:22:23.680><c> enter</c><02:22:23.920><c> a</c><02:22:24.080><c> number</c>

02:22:24.389 --> 02:22:24.399 align:start position:0%
i get this message enter a number
 

02:22:24.399 --> 02:22:26.950 align:start position:0%
i get this message enter a number
between<02:22:24.880><c> 1</c><02:22:25.200><c> 000</c><02:22:25.600><c> and</c><02:22:25.760><c> 1</c><02:22:26.000><c> million</c>

02:22:26.950 --> 02:22:26.960 align:start position:0%
between 1 000 and 1 million
 

02:22:26.960 --> 02:22:28.790 align:start position:0%
between 1 000 and 1 million
and<02:22:27.120><c> now</c><02:22:27.439><c> we</c><02:22:27.600><c> are</c><02:22:27.680><c> asked</c><02:22:27.920><c> this</c><02:22:28.160><c> question</c><02:22:28.640><c> one</c>

02:22:28.790 --> 02:22:28.800 align:start position:0%
and now we are asked this question one
 

02:22:28.800 --> 02:22:30.230 align:start position:0%
and now we are asked this question one
more<02:22:29.040><c> time</c><02:22:29.680><c> if</c><02:22:29.840><c> i</c><02:22:29.920><c> keep</c>

02:22:30.230 --> 02:22:30.240 align:start position:0%
more time if i keep
 

02:22:30.240 --> 02:22:32.870 align:start position:0%
more time if i keep
entering<02:22:30.720><c> invalid</c><02:22:31.200><c> values</c><02:22:31.840><c> i</c><02:22:32.000><c> get</c><02:22:32.240><c> asked</c><02:22:32.720><c> the</c>

02:22:32.870 --> 02:22:32.880 align:start position:0%
entering invalid values i get asked the
 

02:22:32.880 --> 02:22:34.389 align:start position:0%
entering invalid values i get asked the
same<02:22:33.200><c> question</c>

02:22:34.389 --> 02:22:34.399 align:start position:0%
same question
 

02:22:34.399 --> 02:22:37.429 align:start position:0%
same question
now<02:22:34.640><c> let's</c><02:22:34.880><c> enter</c><02:22:35.359><c> a</c><02:22:35.520><c> valid</c><02:22:35.840><c> value</c><02:22:36.319><c> like</c><02:22:36.880><c> 1</c>

02:22:37.429 --> 02:22:37.439 align:start position:0%
now let's enter a valid value like 1
 

02:22:37.439 --> 02:22:40.790 align:start position:0%
now let's enter a valid value like 1
million<02:22:37.840><c> dollars</c><02:22:39.680><c> next</c><02:22:39.920><c> we</c><02:22:40.080><c> need</c><02:22:40.160><c> to</c><02:22:40.319><c> enter</c>

02:22:40.790 --> 02:22:40.800 align:start position:0%
million dollars next we need to enter
 

02:22:40.800 --> 02:22:42.950 align:start position:0%
million dollars next we need to enter
the<02:22:41.040><c> annual</c><02:22:41.439><c> interest</c><02:22:41.840><c> rate</c><02:22:42.479><c> now</c><02:22:42.640><c> here</c><02:22:42.800><c> we</c>

02:22:42.950 --> 02:22:42.960 align:start position:0%
the annual interest rate now here we
 

02:22:42.960 --> 02:22:44.469 align:start position:0%
the annual interest rate now here we
need<02:22:43.040><c> to</c><02:22:43.200><c> enter</c><02:22:43.439><c> a</c><02:22:43.520><c> value</c><02:22:43.840><c> that</c><02:22:44.000><c> is</c><02:22:44.160><c> greater</c>

02:22:44.469 --> 02:22:44.479 align:start position:0%
need to enter a value that is greater
 

02:22:44.479 --> 02:22:45.349 align:start position:0%
need to enter a value that is greater
than<02:22:44.720><c> 0</c>

02:22:45.349 --> 02:22:45.359 align:start position:0%
than 0
 

02:22:45.359 --> 02:22:48.070 align:start position:0%
than 0
and<02:22:45.600><c> less</c><02:22:45.840><c> than</c><02:22:46.080><c> or</c><02:22:46.319><c> equal</c><02:22:46.640><c> to</c><02:22:46.880><c> 30.</c><02:22:47.680><c> so</c><02:22:47.840><c> if</c><02:22:48.000><c> i</c>

02:22:48.070 --> 02:22:48.080 align:start position:0%
and less than or equal to 30. so if i
 

02:22:48.080 --> 02:22:49.349 align:start position:0%
and less than or equal to 30. so if i
enter<02:22:48.399><c> 0</c>

02:22:49.349 --> 02:22:49.359 align:start position:0%
enter 0
 

02:22:49.359 --> 02:22:50.950 align:start position:0%
enter 0
we<02:22:49.520><c> get</c><02:22:49.680><c> this</c><02:22:49.840><c> message</c><02:22:50.319><c> enter</c><02:22:50.560><c> a</c><02:22:50.640><c> value</c>

02:22:50.950 --> 02:22:50.960 align:start position:0%
we get this message enter a value
 

02:22:50.960 --> 02:22:53.510 align:start position:0%
we get this message enter a value
greater<02:22:51.280><c> than</c><02:22:51.439><c> 0</c><02:22:52.080><c> and</c><02:22:52.240><c> less</c><02:22:52.479><c> than</c><02:22:52.720><c> or</c>

02:22:53.510 --> 02:22:53.520 align:start position:0%
greater than 0 and less than or
 

02:22:53.520 --> 02:22:56.309 align:start position:0%
greater than 0 and less than or
equal<02:22:53.840><c> to</c><02:22:54.000><c> 30.</c><02:22:55.200><c> once</c><02:22:55.439><c> again</c><02:22:55.680><c> we're</c><02:22:55.920><c> asked</c><02:22:56.160><c> this</c>

02:22:56.309 --> 02:22:56.319 align:start position:0%
equal to 30. once again we're asked this
 

02:22:56.319 --> 02:22:57.670 align:start position:0%
equal to 30. once again we're asked this
question<02:22:56.640><c> one</c><02:22:56.800><c> more</c><02:22:57.040><c> time</c>

02:22:57.670 --> 02:22:57.680 align:start position:0%
question one more time
 

02:22:57.680 --> 02:23:02.469 align:start position:0%
question one more time
so<02:22:57.840><c> let's</c><02:22:58.080><c> enter</c><02:22:58.399><c> a</c><02:22:58.479><c> valid</c><02:22:58.800><c> value</c><02:22:59.200><c> like</c><02:23:00.439><c> 3.92</c>

02:23:02.469 --> 02:23:02.479 align:start position:0%
so let's enter a valid value like 3.92
 

02:23:02.479 --> 02:23:04.550 align:start position:0%
so let's enter a valid value like 3.92
here<02:23:02.640><c> we</c><02:23:02.800><c> need</c><02:23:02.880><c> to</c><02:23:03.040><c> enter</c><02:23:03.280><c> a</c><02:23:03.359><c> value</c><02:23:03.680><c> between</c><02:23:04.160><c> 1</c>

02:23:04.550 --> 02:23:04.560 align:start position:0%
here we need to enter a value between 1
 

02:23:04.560 --> 02:23:06.389 align:start position:0%
here we need to enter a value between 1
and<02:23:04.800><c> 30.</c><02:23:05.359><c> so</c><02:23:05.520><c> if</c><02:23:05.600><c> we</c><02:23:05.760><c> enter</c>

02:23:06.389 --> 02:23:06.399 align:start position:0%
and 30. so if we enter
 

02:23:06.399 --> 02:23:08.870 align:start position:0%
and 30. so if we enter
0<02:23:07.120><c> we</c><02:23:07.280><c> get</c><02:23:07.439><c> an</c><02:23:07.600><c> error</c><02:23:07.760><c> message</c><02:23:08.319><c> and</c><02:23:08.640><c> we're</c>

02:23:08.870 --> 02:23:08.880 align:start position:0%
0 we get an error message and we're
 

02:23:08.880 --> 02:23:10.230 align:start position:0%
0 we get an error message and we're
asked<02:23:09.120><c> the</c><02:23:09.200><c> same</c><02:23:09.520><c> question</c>

02:23:10.230 --> 02:23:10.240 align:start position:0%
asked the same question
 

02:23:10.240 --> 02:23:13.030 align:start position:0%
asked the same question
so<02:23:10.399><c> let's</c><02:23:10.640><c> enter</c><02:23:11.120><c> 30</c><02:23:11.920><c> and</c><02:23:12.240><c> finally</c><02:23:12.560><c> we</c><02:23:12.720><c> get</c><02:23:12.880><c> the</c>

02:23:13.030 --> 02:23:13.040 align:start position:0%
so let's enter 30 and finally we get the
 

02:23:13.040 --> 02:23:13.590 align:start position:0%
so let's enter 30 and finally we get the
result

02:23:13.590 --> 02:23:13.600 align:start position:0%
result
 

02:23:13.600 --> 02:23:16.950 align:start position:0%
result
here's<02:23:14.000><c> our</c><02:23:14.479><c> mortgage</c><02:23:15.040><c> or</c><02:23:15.439><c> monthly</c><02:23:15.840><c> payments</c>

02:23:16.950 --> 02:23:16.960 align:start position:0%
here's our mortgage or monthly payments
 

02:23:16.960 --> 02:23:19.510 align:start position:0%
here's our mortgage or monthly payments
so<02:23:17.120><c> go</c><02:23:17.280><c> ahead</c><02:23:17.520><c> and</c><02:23:17.600><c> spend</c><02:23:18.319><c> 5</c><02:23:18.560><c> to</c><02:23:18.720><c> 10</c><02:23:18.880><c> minutes</c><02:23:19.200><c> on</c>

02:23:19.510 --> 02:23:19.520 align:start position:0%
so go ahead and spend 5 to 10 minutes on
 

02:23:19.520 --> 02:23:21.510 align:start position:0%
so go ahead and spend 5 to 10 minutes on
extending<02:23:20.000><c> this</c><02:23:20.160><c> mortgage</c><02:23:20.560><c> calculator</c>

02:23:21.510 --> 02:23:21.520 align:start position:0%
extending this mortgage calculator
 

02:23:21.520 --> 02:23:23.590 align:start position:0%
extending this mortgage calculator
by<02:23:21.760><c> adding</c><02:23:22.240><c> error</c><02:23:22.479><c> handling</c><02:23:22.880><c> to</c><02:23:23.040><c> it</c><02:23:23.359><c> you'll</c>

02:23:23.590 --> 02:23:23.600 align:start position:0%
by adding error handling to it you'll
 

02:23:23.600 --> 02:23:31.030 align:start position:0%
by adding error handling to it you'll
see<02:23:23.840><c> my</c><02:23:24.000><c> solution</c><02:23:24.479><c> next</c>

02:23:31.030 --> 02:23:31.040 align:start position:0%
 
 

02:23:31.040 --> 02:23:32.150 align:start position:0%
 
all<02:23:31.200><c> right</c><02:23:31.280><c> let</c><02:23:31.439><c> me</c><02:23:31.600><c> show</c><02:23:31.680><c> you</c><02:23:31.840><c> how</c><02:23:32.000><c> i'm</c><02:23:32.080><c> going</c>

02:23:32.150 --> 02:23:32.160 align:start position:0%
all right let me show you how i'm going
 

02:23:32.160 --> 02:23:34.630 align:start position:0%
all right let me show you how i'm going
to<02:23:32.319><c> solve</c><02:23:32.560><c> this</c><02:23:32.800><c> problem</c><02:23:33.200><c> step</c><02:23:33.520><c> by</c><02:23:33.760><c> step</c>

02:23:34.630 --> 02:23:34.640 align:start position:0%
to solve this problem step by step
 

02:23:34.640 --> 02:23:36.950 align:start position:0%
to solve this problem step by step
so<02:23:34.960><c> for</c><02:23:35.200><c> each</c><02:23:35.520><c> question</c><02:23:36.080><c> we</c><02:23:36.160><c> want</c><02:23:36.319><c> to</c><02:23:36.479><c> validate</c>

02:23:36.950 --> 02:23:36.960 align:start position:0%
so for each question we want to validate
 

02:23:36.960 --> 02:23:38.870 align:start position:0%
so for each question we want to validate
the<02:23:37.120><c> value</c><02:23:37.439><c> that</c><02:23:37.600><c> the</c><02:23:37.760><c> user</c><02:23:38.080><c> enters</c>

02:23:38.870 --> 02:23:38.880 align:start position:0%
the value that the user enters
 

02:23:38.880 --> 02:23:40.870 align:start position:0%
the value that the user enters
if<02:23:39.040><c> the</c><02:23:39.200><c> value</c><02:23:39.600><c> is</c><02:23:39.840><c> invalid</c><02:23:40.319><c> you</c><02:23:40.399><c> want</c><02:23:40.479><c> to</c><02:23:40.560><c> keep</c>

02:23:40.870 --> 02:23:40.880 align:start position:0%
if the value is invalid you want to keep
 

02:23:40.880 --> 02:23:42.469 align:start position:0%
if the value is invalid you want to keep
asking<02:23:41.200><c> the</c><02:23:41.280><c> same</c><02:23:41.600><c> question</c>

02:23:42.469 --> 02:23:42.479 align:start position:0%
asking the same question
 

02:23:42.479 --> 02:23:44.550 align:start position:0%
asking the same question
so<02:23:42.640><c> this</c><02:23:42.880><c> is</c><02:23:42.960><c> where</c><02:23:43.120><c> we</c><02:23:43.280><c> can</c><02:23:43.439><c> use</c><02:23:43.760><c> an</c><02:23:44.080><c> infinite</c>

02:23:44.550 --> 02:23:44.560 align:start position:0%
so this is where we can use an infinite
 

02:23:44.560 --> 02:23:46.469 align:start position:0%
so this is where we can use an infinite
loop<02:23:45.200><c> let</c><02:23:45.359><c> me</c><02:23:45.520><c> show</c><02:23:45.680><c> you</c><02:23:45.920><c> so</c>

02:23:46.469 --> 02:23:46.479 align:start position:0%
loop let me show you so
 

02:23:46.479 --> 02:23:49.270 align:start position:0%
loop let me show you so
here's<02:23:46.800><c> our</c><02:23:47.200><c> first</c><02:23:47.520><c> question</c><02:23:48.160><c> principle</c><02:23:49.120><c> i'm</c>

02:23:49.270 --> 02:23:49.280 align:start position:0%
here's our first question principle i'm
 

02:23:49.280 --> 02:23:49.990 align:start position:0%
here's our first question principle i'm
going<02:23:49.359><c> to</c><02:23:49.600><c> wrap</c>

02:23:49.990 --> 02:23:50.000 align:start position:0%
going to wrap
 

02:23:50.000 --> 02:23:53.270 align:start position:0%
going to wrap
these<02:23:50.240><c> two</c><02:23:50.479><c> lines</c><02:23:51.439><c> inside</c><02:23:52.000><c> an</c><02:23:52.160><c> infinite</c><02:23:52.560><c> loop</c>

02:23:53.270 --> 02:23:53.280 align:start position:0%
these two lines inside an infinite loop
 

02:23:53.280 --> 02:23:56.870 align:start position:0%
these two lines inside an infinite loop
while<02:23:54.000><c> true</c><02:23:55.760><c> so</c><02:23:55.920><c> we're</c><02:23:56.080><c> going</c><02:23:56.160><c> to</c><02:23:56.240><c> keep</c><02:23:56.479><c> asking</c>

02:23:56.870 --> 02:23:56.880 align:start position:0%
while true so we're going to keep asking
 

02:23:56.880 --> 02:23:57.990 align:start position:0%
while true so we're going to keep asking
the<02:23:56.960><c> same</c><02:23:57.280><c> question</c>

02:23:57.990 --> 02:23:58.000 align:start position:0%
the same question
 

02:23:58.000 --> 02:24:01.270 align:start position:0%
the same question
until<02:23:58.399><c> the</c><02:23:58.560><c> user</c><02:23:58.960><c> enters</c><02:23:59.680><c> a</c><02:23:59.920><c> valid</c><02:24:00.319><c> value</c>

02:24:01.270 --> 02:24:01.280 align:start position:0%
until the user enters a valid value
 

02:24:01.280 --> 02:24:03.990 align:start position:0%
until the user enters a valid value
so<02:24:01.920><c> here</c><02:24:02.240><c> after</c><02:24:02.479><c> we</c><02:24:02.640><c> read</c><02:24:02.880><c> the</c><02:24:03.040><c> principle</c><02:24:03.840><c> we</c>

02:24:03.990 --> 02:24:04.000 align:start position:0%
so here after we read the principle we
 

02:24:04.000 --> 02:24:05.910 align:start position:0%
so here after we read the principle we
can<02:24:04.160><c> write</c><02:24:04.399><c> an</c><02:24:04.560><c> if</c><02:24:04.720><c> statement</c><02:24:05.120><c> like</c><02:24:05.280><c> this</c>

02:24:05.910 --> 02:24:05.920 align:start position:0%
can write an if statement like this
 

02:24:05.920 --> 02:24:08.389 align:start position:0%
can write an if statement like this
if<02:24:06.160><c> principal</c><02:24:06.720><c> is</c><02:24:06.880><c> greater</c><02:24:07.200><c> than</c><02:24:07.439><c> or</c><02:24:07.680><c> equal</c><02:24:07.920><c> to</c>

02:24:08.389 --> 02:24:08.399 align:start position:0%
if principal is greater than or equal to
 

02:24:08.399 --> 02:24:09.670 align:start position:0%
if principal is greater than or equal to
1000

02:24:09.670 --> 02:24:09.680 align:start position:0%
1000
 

02:24:09.680 --> 02:24:13.590 align:start position:0%
1000
and<02:24:10.960><c> it</c><02:24:11.200><c> is</c><02:24:11.760><c> less</c><02:24:12.000><c> than</c><02:24:12.240><c> or</c><02:24:12.479><c> equal</c><02:24:12.720><c> to</c><02:24:12.960><c> 1</c>

02:24:13.590 --> 02:24:13.600 align:start position:0%
and it is less than or equal to 1
 

02:24:13.600 --> 02:24:15.429 align:start position:0%
and it is less than or equal to 1
million<02:24:14.399><c> and</c><02:24:14.560><c> here</c><02:24:14.720><c> we</c><02:24:14.800><c> can</c><02:24:14.960><c> use</c><02:24:15.200><c> an</c>

02:24:15.429 --> 02:24:15.439 align:start position:0%
million and here we can use an
 

02:24:15.439 --> 02:24:17.270 align:start position:0%
million and here we can use an
underscore<02:24:16.080><c> to</c><02:24:16.319><c> separate</c>

02:24:17.270 --> 02:24:17.280 align:start position:0%
underscore to separate
 

02:24:17.280 --> 02:24:18.950 align:start position:0%
underscore to separate
these<02:24:17.680><c> digits</c><02:24:18.080><c> to</c><02:24:18.240><c> make</c><02:24:18.399><c> our</c><02:24:18.560><c> code</c><02:24:18.800><c> more</c>

02:24:18.950 --> 02:24:18.960 align:start position:0%
these digits to make our code more
 

02:24:18.960 --> 02:24:21.670 align:start position:0%
these digits to make our code more
readable<02:24:19.760><c> so</c><02:24:20.000><c> if</c><02:24:20.160><c> the</c><02:24:20.319><c> user</c><02:24:20.640><c> enters</c><02:24:21.120><c> a</c><02:24:21.280><c> valid</c>

02:24:21.670 --> 02:24:21.680 align:start position:0%
readable so if the user enters a valid
 

02:24:21.680 --> 02:24:22.150 align:start position:0%
readable so if the user enters a valid
value

02:24:22.150 --> 02:24:22.160 align:start position:0%
value
 

02:24:22.160 --> 02:24:24.710 align:start position:0%
value
then<02:24:22.319><c> we</c><02:24:22.479><c> can</c><02:24:22.800><c> break</c><02:24:23.760><c> out</c><02:24:24.000><c> of</c><02:24:24.080><c> this</c><02:24:24.319><c> infinite</c>

02:24:24.710 --> 02:24:24.720 align:start position:0%
then we can break out of this infinite
 

02:24:24.720 --> 02:24:25.429 align:start position:0%
then we can break out of this infinite
loop

02:24:25.429 --> 02:24:25.439 align:start position:0%
loop
 

02:24:25.439 --> 02:24:26.950 align:start position:0%
loop
otherwise<02:24:25.920><c> we're</c><02:24:26.080><c> going</c><02:24:26.160><c> to</c><02:24:26.240><c> print</c><02:24:26.560><c> an</c><02:24:26.720><c> error</c>

02:24:26.950 --> 02:24:26.960 align:start position:0%
otherwise we're going to print an error
 

02:24:26.960 --> 02:24:29.030 align:start position:0%
otherwise we're going to print an error
message<02:24:27.520><c> so</c>

02:24:29.030 --> 02:24:29.040 align:start position:0%
message so
 

02:24:29.040 --> 02:24:32.150 align:start position:0%
message so
enter<02:24:30.080><c> a</c><02:24:30.240><c> value</c><02:24:31.120><c> between</c>

02:24:32.150 --> 02:24:32.160 align:start position:0%
enter a value between
 

02:24:32.160 --> 02:24:35.349 align:start position:0%
enter a value between
1000<02:24:33.200><c> and</c><02:24:33.760><c> 1</c><02:24:34.399><c> million</c>

02:24:35.349 --> 02:24:35.359 align:start position:0%
1000 and 1 million
 

02:24:35.359 --> 02:24:38.230 align:start position:0%
1000 and 1 million
like<02:24:35.520><c> this</c><02:24:36.479><c> okay</c><02:24:37.280><c> now</c><02:24:37.439><c> if</c><02:24:37.600><c> you</c><02:24:37.680><c> look</c><02:24:37.920><c> on</c><02:24:38.080><c> the</c>

02:24:38.230 --> 02:24:38.240 align:start position:0%
like this okay now if you look on the
 

02:24:38.240 --> 02:24:40.469 align:start position:0%
like this okay now if you look on the
right<02:24:38.560><c> side</c><02:24:38.800><c> here</c><02:24:39.040><c> you</c><02:24:39.120><c> can</c><02:24:39.280><c> see</c><02:24:39.439><c> this</c><02:24:39.760><c> red</c><02:24:40.080><c> bar</c>

02:24:40.469 --> 02:24:40.479 align:start position:0%
right side here you can see this red bar
 

02:24:40.479 --> 02:24:43.190 align:start position:0%
right side here you can see this red bar
this<02:24:40.800><c> indicates</c><02:24:41.359><c> an</c><02:24:41.520><c> error</c><02:24:42.240><c> and</c><02:24:42.640><c> here</c><02:24:42.880><c> in</c><02:24:42.960><c> this</c>

02:24:43.190 --> 02:24:43.200 align:start position:0%
this indicates an error and here in this
 

02:24:43.200 --> 02:24:45.270 align:start position:0%
this indicates an error and here in this
preview<02:24:43.600><c> window</c><02:24:43.920><c> you</c><02:24:44.000><c> can</c><02:24:44.160><c> see</c><02:24:44.399><c> exactly</c><02:24:44.880><c> where</c>

02:24:45.270 --> 02:24:45.280 align:start position:0%
preview window you can see exactly where
 

02:24:45.280 --> 02:24:47.830 align:start position:0%
preview window you can see exactly where
we<02:24:45.439><c> have</c><02:24:45.600><c> an</c><02:24:45.840><c> error</c><02:24:46.479><c> it's</c><02:24:46.720><c> down</c><02:24:46.960><c> below</c><02:24:47.359><c> on</c><02:24:47.520><c> line</c>

02:24:47.830 --> 02:24:47.840 align:start position:0%
we have an error it's down below on line
 

02:24:47.840 --> 02:24:50.150 align:start position:0%
we have an error it's down below on line
30<02:24:48.240><c> where</c><02:24:48.479><c> we</c><02:24:48.640><c> calculate</c><02:24:49.120><c> the</c><02:24:49.280><c> mortgage</c>

02:24:50.150 --> 02:24:50.160 align:start position:0%
30 where we calculate the mortgage
 

02:24:50.160 --> 02:24:53.270 align:start position:0%
30 where we calculate the mortgage
so<02:24:50.399><c> if</c><02:24:50.479><c> you</c><02:24:50.640><c> click</c><02:24:50.880><c> on</c><02:24:51.040><c> this</c><02:24:51.200><c> red</c><02:24:51.439><c> bar</c>

02:24:53.270 --> 02:24:53.280 align:start position:0%
so if you click on this red bar
 

02:24:53.280 --> 02:24:55.990 align:start position:0%
so if you click on this red bar
we<02:24:53.520><c> jump</c><02:24:53.760><c> over</c><02:24:54.000><c> here</c><02:24:54.960><c> principle</c><02:24:55.840><c> is</c>

02:24:55.990 --> 02:24:56.000 align:start position:0%
we jump over here principle is
 

02:24:56.000 --> 02:24:57.590 align:start position:0%
we jump over here principle is
highlighted<02:24:56.560><c> in</c><02:24:56.720><c> red</c><02:24:56.960><c> so</c><02:24:57.120><c> here</c><02:24:57.280><c> we</c><02:24:57.439><c> have</c><02:24:57.520><c> a</c>

02:24:57.590 --> 02:24:57.600 align:start position:0%
highlighted in red so here we have a
 

02:24:57.600 --> 02:24:58.710 align:start position:0%
highlighted in red so here we have a
compilation<02:24:58.160><c> error</c>

02:24:58.710 --> 02:24:58.720 align:start position:0%
compilation error
 

02:24:58.720 --> 02:25:01.510 align:start position:0%
compilation error
cannot<02:24:59.120><c> resolve</c><02:24:59.840><c> symbol</c><02:25:00.319><c> principle</c><02:25:01.200><c> here's</c>

02:25:01.510 --> 02:25:01.520 align:start position:0%
cannot resolve symbol principle here's
 

02:25:01.520 --> 02:25:02.630 align:start position:0%
cannot resolve symbol principle here's
the<02:25:01.680><c> reason</c><02:25:02.000><c> because</c>

02:25:02.630 --> 02:25:02.640 align:start position:0%
the reason because
 

02:25:02.640 --> 02:25:05.030 align:start position:0%
the reason because
we've<02:25:02.880><c> wrapped</c><02:25:03.200><c> these</c><02:25:03.359><c> few</c><02:25:03.600><c> lines</c><02:25:04.399><c> inside</c>

02:25:05.030 --> 02:25:05.040 align:start position:0%
we've wrapped these few lines inside
 

02:25:05.040 --> 02:25:06.389 align:start position:0%
we've wrapped these few lines inside
this<02:25:05.280><c> while</c><02:25:05.600><c> loop</c>

02:25:06.389 --> 02:25:06.399 align:start position:0%
this while loop
 

02:25:06.399 --> 02:25:07.990 align:start position:0%
this while loop
and<02:25:06.640><c> earlier</c><02:25:06.960><c> i</c><02:25:07.040><c> told</c><02:25:07.200><c> you</c><02:25:07.359><c> that</c><02:25:07.520><c> whenever</c><02:25:07.840><c> you</c>

02:25:07.990 --> 02:25:08.000 align:start position:0%
and earlier i told you that whenever you
 

02:25:08.000 --> 02:25:09.510 align:start position:0%
and earlier i told you that whenever you
declare<02:25:08.399><c> a</c><02:25:08.560><c> variable</c>

02:25:09.510 --> 02:25:09.520 align:start position:0%
declare a variable
 

02:25:09.520 --> 02:25:11.670 align:start position:0%
declare a variable
that<02:25:09.760><c> variable</c><02:25:10.160><c> is</c><02:25:10.240><c> scoped</c><02:25:10.640><c> to</c><02:25:10.800><c> the</c><02:25:10.960><c> block</c><02:25:11.520><c> in</c>

02:25:11.670 --> 02:25:11.680 align:start position:0%
that variable is scoped to the block in
 

02:25:11.680 --> 02:25:12.950 align:start position:0%
that variable is scoped to the block in
which<02:25:11.920><c> it's</c><02:25:12.080><c> defined</c>

02:25:12.950 --> 02:25:12.960 align:start position:0%
which it's defined
 

02:25:12.960 --> 02:25:14.630 align:start position:0%
which it's defined
so<02:25:13.120><c> this</c><02:25:13.359><c> is</c><02:25:13.439><c> where</c><02:25:13.600><c> we</c><02:25:13.760><c> have</c><02:25:13.840><c> declared</c><02:25:14.399><c> the</c>

02:25:14.630 --> 02:25:14.640 align:start position:0%
so this is where we have declared the
 

02:25:14.640 --> 02:25:16.389 align:start position:0%
so this is where we have declared the
principal<02:25:15.120><c> variable</c><02:25:15.840><c> and</c>

02:25:16.389 --> 02:25:16.399 align:start position:0%
principal variable and
 

02:25:16.399 --> 02:25:18.790 align:start position:0%
principal variable and
it's<02:25:16.720><c> scoped</c><02:25:17.520><c> to</c><02:25:17.680><c> this</c><02:25:17.920><c> block</c><02:25:18.399><c> it's</c><02:25:18.640><c> not</c>

02:25:18.790 --> 02:25:18.800 align:start position:0%
it's scoped to this block it's not
 

02:25:18.800 --> 02:25:19.510 align:start position:0%
it's scoped to this block it's not
available

02:25:19.510 --> 02:25:19.520 align:start position:0%
available
 

02:25:19.520 --> 02:25:21.349 align:start position:0%
available
outside<02:25:19.920><c> of</c><02:25:20.080><c> this</c><02:25:20.240><c> block</c><02:25:20.720><c> that's</c><02:25:20.960><c> why</c><02:25:21.120><c> we</c><02:25:21.280><c> get</c>

02:25:21.349 --> 02:25:21.359 align:start position:0%
outside of this block that's why we get
 

02:25:21.359 --> 02:25:22.870 align:start position:0%
outside of this block that's why we get
this<02:25:21.600><c> compilation</c><02:25:22.160><c> error</c>

02:25:22.870 --> 02:25:22.880 align:start position:0%
this compilation error
 

02:25:22.880 --> 02:25:24.710 align:start position:0%
this compilation error
so<02:25:23.040><c> to</c><02:25:23.200><c> solve</c><02:25:23.439><c> this</c><02:25:23.600><c> problem</c><02:25:24.319><c> we</c><02:25:24.479><c> need</c><02:25:24.640><c> to</c>

02:25:24.710 --> 02:25:24.720 align:start position:0%
so to solve this problem we need to
 

02:25:24.720 --> 02:25:26.230 align:start position:0%
so to solve this problem we need to
declare<02:25:25.120><c> this</c><02:25:25.439><c> outside</c>

02:25:26.230 --> 02:25:26.240 align:start position:0%
declare this outside
 

02:25:26.240 --> 02:25:28.389 align:start position:0%
declare this outside
of<02:25:26.399><c> this</c><02:25:26.640><c> while</c><02:25:26.960><c> loop</c><02:25:27.600><c> we</c><02:25:27.680><c> can</c><02:25:27.840><c> do</c><02:25:28.000><c> it</c><02:25:28.160><c> right</c>

02:25:28.389 --> 02:25:28.399 align:start position:0%
of this while loop we can do it right
 

02:25:28.399 --> 02:25:29.590 align:start position:0%
of this while loop we can do it right
here<02:25:28.960><c> after</c>

02:25:29.590 --> 02:25:29.600 align:start position:0%
here after
 

02:25:29.600 --> 02:25:32.230 align:start position:0%
here after
we<02:25:29.760><c> declare</c><02:25:30.080><c> our</c><02:25:30.240><c> constants</c><02:25:31.280><c> so</c><02:25:31.600><c> let's</c><02:25:31.840><c> say</c>

02:25:32.230 --> 02:25:32.240 align:start position:0%
we declare our constants so let's say
 

02:25:32.240 --> 02:25:32.790 align:start position:0%
we declare our constants so let's say
int

02:25:32.790 --> 02:25:32.800 align:start position:0%
int
 

02:25:32.800 --> 02:25:34.630 align:start position:0%
int
principle<02:25:33.439><c> and</c><02:25:33.600><c> we</c><02:25:33.760><c> can</c><02:25:33.920><c> initialize</c><02:25:34.399><c> it</c><02:25:34.479><c> to</c>

02:25:34.630 --> 02:25:34.640 align:start position:0%
principle and we can initialize it to
 

02:25:34.640 --> 02:25:37.110 align:start position:0%
principle and we can initialize it to
zero<02:25:35.760><c> now</c><02:25:36.000><c> we</c><02:25:36.240><c> remove</c>

02:25:37.110 --> 02:25:37.120 align:start position:0%
zero now we remove
 

02:25:37.120 --> 02:25:39.990 align:start position:0%
zero now we remove
the<02:25:37.280><c> declaration</c><02:25:37.920><c> from</c><02:25:38.080><c> here</c><02:25:39.200><c> and</c><02:25:39.520><c> the</c><02:25:39.680><c> error</c>

02:25:39.990 --> 02:25:40.000 align:start position:0%
the declaration from here and the error
 

02:25:40.000 --> 02:25:41.110 align:start position:0%
the declaration from here and the error
is<02:25:40.080><c> gone</c>

02:25:41.110 --> 02:25:41.120 align:start position:0%
is gone
 

02:25:41.120 --> 02:25:43.030 align:start position:0%
is gone
now<02:25:41.280><c> we</c><02:25:41.359><c> need</c><02:25:41.520><c> to</c><02:25:41.600><c> repeat</c><02:25:42.000><c> the</c><02:25:42.080><c> same</c><02:25:42.399><c> pattern</c>

02:25:43.030 --> 02:25:43.040 align:start position:0%
now we need to repeat the same pattern
 

02:25:43.040 --> 02:25:44.630 align:start position:0%
now we need to repeat the same pattern
with<02:25:43.280><c> other</c><02:25:43.600><c> questions</c>

02:25:44.630 --> 02:25:44.640 align:start position:0%
with other questions
 

02:25:44.640 --> 02:25:47.190 align:start position:0%
with other questions
so<02:25:45.200><c> real</c><02:25:45.520><c> quick</c><02:25:45.920><c> here's</c><02:25:46.240><c> our</c><02:25:46.399><c> second</c><02:25:46.800><c> question</c>

02:25:47.190 --> 02:25:47.200 align:start position:0%
so real quick here's our second question
 

02:25:47.200 --> 02:25:49.510 align:start position:0%
so real quick here's our second question
where<02:25:47.439><c> we</c><02:25:47.600><c> read</c><02:25:47.840><c> the</c><02:25:48.000><c> annual</c><02:25:48.399><c> interest</c>

02:25:49.510 --> 02:25:49.520 align:start position:0%
where we read the annual interest
 

02:25:49.520 --> 02:25:55.830 align:start position:0%
where we read the annual interest
once<02:25:49.840><c> again</c><02:25:50.319><c> we</c><02:25:50.560><c> add</c><02:25:51.359><c> an</c><02:25:51.600><c> infinite</c><02:25:52.000><c> loop</c>

02:25:55.830 --> 02:25:55.840 align:start position:0%
 
 

02:25:55.840 --> 02:25:57.670 align:start position:0%
 
now<02:25:56.000><c> the</c><02:25:56.160><c> moment</c><02:25:56.399><c> we</c><02:25:56.560><c> read</c><02:25:57.040><c> the</c><02:25:57.200><c> annual</c>

02:25:57.670 --> 02:25:57.680 align:start position:0%
now the moment we read the annual
 

02:25:57.680 --> 02:25:59.990 align:start position:0%
now the moment we read the annual
interest<02:25:58.319><c> we</c><02:25:58.560><c> validate</c><02:25:58.960><c> the</c><02:25:59.040><c> data</c>

02:25:59.990 --> 02:26:00.000 align:start position:0%
interest we validate the data
 

02:26:00.000 --> 02:26:02.630 align:start position:0%
interest we validate the data
so<02:26:00.160><c> if</c><02:26:00.399><c> annual</c><02:26:00.800><c> interest</c><02:26:01.600><c> is</c><02:26:01.840><c> greater</c><02:26:02.160><c> than</c><02:26:02.399><c> or</c>

02:26:02.630 --> 02:26:02.640 align:start position:0%
so if annual interest is greater than or
 

02:26:02.640 --> 02:26:04.790 align:start position:0%
so if annual interest is greater than or
equal<02:26:02.960><c> to</c><02:26:03.280><c> let's</c><02:26:03.520><c> say</c><02:26:03.760><c> 1</c>

02:26:04.790 --> 02:26:04.800 align:start position:0%
equal to let's say 1
 

02:26:04.800 --> 02:26:08.870 align:start position:0%
equal to let's say 1
and<02:26:05.120><c> it</c><02:26:05.280><c> is</c><02:26:05.439><c> less</c><02:26:05.680><c> than</c><02:26:06.960><c> or</c><02:26:07.200><c> equal</c><02:26:07.520><c> to</c><02:26:07.760><c> 30</c>

02:26:08.870 --> 02:26:08.880 align:start position:0%
and it is less than or equal to 30
 

02:26:08.880 --> 02:26:10.469 align:start position:0%
and it is less than or equal to 30
then<02:26:09.200><c> we're</c><02:26:09.359><c> going</c><02:26:09.439><c> to</c><02:26:09.600><c> break</c><02:26:10.000><c> out</c><02:26:10.160><c> of</c><02:26:10.240><c> this</c>

02:26:10.469 --> 02:26:10.479 align:start position:0%
then we're going to break out of this
 

02:26:10.479 --> 02:26:12.870 align:start position:0%
then we're going to break out of this
infinite<02:26:10.880><c> loop</c><02:26:11.840><c> now</c><02:26:12.000><c> here</c><02:26:12.160><c> we</c><02:26:12.319><c> should</c><02:26:12.560><c> also</c>

02:26:12.870 --> 02:26:12.880 align:start position:0%
infinite loop now here we should also
 

02:26:12.880 --> 02:26:14.710 align:start position:0%
infinite loop now here we should also
calculate<02:26:13.280><c> the</c><02:26:13.439><c> monthly</c><02:26:13.840><c> interest</c>

02:26:14.710 --> 02:26:14.720 align:start position:0%
calculate the monthly interest
 

02:26:14.720 --> 02:26:17.830 align:start position:0%
calculate the monthly interest
so<02:26:15.520><c> the</c><02:26:15.760><c> proper</c><02:26:16.080><c> way</c><02:26:16.319><c> to</c><02:26:16.399><c> do</c><02:26:16.640><c> this</c><02:26:17.439><c> is</c><02:26:17.600><c> like</c>

02:26:17.830 --> 02:26:17.840 align:start position:0%
so the proper way to do this is like
 

02:26:17.840 --> 02:26:18.790 align:start position:0%
so the proper way to do this is like
this

02:26:18.790 --> 02:26:18.800 align:start position:0%
this
 

02:26:18.800 --> 02:26:21.510 align:start position:0%
this
if<02:26:18.960><c> the</c><02:26:19.120><c> user</c><02:26:19.439><c> enters</c><02:26:19.760><c> a</c><02:26:19.840><c> valid</c><02:26:20.240><c> value</c><02:26:21.120><c> we</c><02:26:21.280><c> add</c>

02:26:21.510 --> 02:26:21.520 align:start position:0%
if the user enters a valid value we add
 

02:26:21.520 --> 02:26:22.870 align:start position:0%
if the user enters a valid value we add
a<02:26:21.600><c> code</c><02:26:21.840><c> block</c><02:26:22.080><c> here</c>

02:26:22.870 --> 02:26:22.880 align:start position:0%
a code block here
 

02:26:22.880 --> 02:26:26.870 align:start position:0%
a code block here
first<02:26:23.120><c> we</c><02:26:23.359><c> calculate</c><02:26:24.080><c> the</c><02:26:24.240><c> monthly</c><02:26:24.640><c> interest</c>

02:26:26.870 --> 02:26:26.880 align:start position:0%
first we calculate the monthly interest
 

02:26:26.880 --> 02:26:30.230 align:start position:0%
first we calculate the monthly interest
and<02:26:27.040><c> then</c><02:26:27.359><c> break</c><02:26:27.680><c> out</c><02:26:27.840><c> of</c><02:26:27.920><c> the</c><02:26:28.080><c> loop</c><02:26:28.880><c> otherwise</c>

02:26:30.230 --> 02:26:30.240 align:start position:0%
and then break out of the loop otherwise
 

02:26:30.240 --> 02:26:33.830 align:start position:0%
and then break out of the loop otherwise
we<02:26:30.479><c> print</c><02:26:31.120><c> an</c><02:26:31.359><c> error</c><02:26:31.600><c> message</c><02:26:32.560><c> enter</c><02:26:32.960><c> a</c><02:26:33.120><c> value</c>

02:26:33.830 --> 02:26:33.840 align:start position:0%
we print an error message enter a value
 

02:26:33.840 --> 02:26:37.910 align:start position:0%
we print an error message enter a value
between<02:26:34.720><c> 1</c><02:26:35.200><c> and</c><02:26:35.840><c> 30.</c>

02:26:37.910 --> 02:26:37.920 align:start position:0%
between 1 and 30.
 

02:26:37.920 --> 02:26:40.790 align:start position:0%
between 1 and 30.
okay<02:26:39.120><c> now</c><02:26:39.760><c> if</c><02:26:39.920><c> you</c><02:26:40.000><c> look</c><02:26:40.160><c> to</c><02:26:40.319><c> the</c><02:26:40.399><c> right</c><02:26:40.560><c> side</c>

02:26:40.790 --> 02:26:40.800 align:start position:0%
okay now if you look to the right side
 

02:26:40.800 --> 02:26:41.830 align:start position:0%
okay now if you look to the right side
again<02:26:41.120><c> we</c><02:26:41.359><c> have</c>

02:26:41.830 --> 02:26:41.840 align:start position:0%
again we have
 

02:26:41.840 --> 02:26:44.469 align:start position:0%
again we have
two<02:26:42.080><c> compilation</c><02:26:42.640><c> errors</c><02:26:43.439><c> monthly</c><02:26:43.920><c> interest</c>

02:26:44.469 --> 02:26:44.479 align:start position:0%
two compilation errors monthly interest
 

02:26:44.479 --> 02:26:45.590 align:start position:0%
two compilation errors monthly interest
is<02:26:44.640><c> not</c><02:26:44.880><c> resolved</c>

02:26:45.590 --> 02:26:45.600 align:start position:0%
is not resolved
 

02:26:45.600 --> 02:26:48.389 align:start position:0%
is not resolved
because<02:26:45.840><c> we</c><02:26:46.000><c> have</c><02:26:46.160><c> declared</c><02:26:46.640><c> it</c><02:26:46.960><c> inside</c><02:26:48.319><c> of</c>

02:26:48.389 --> 02:26:48.399 align:start position:0%
because we have declared it inside of
 

02:26:48.399 --> 02:26:49.590 align:start position:0%
because we have declared it inside of
this<02:26:48.640><c> block</c>

02:26:49.590 --> 02:26:49.600 align:start position:0%
this block
 

02:26:49.600 --> 02:26:52.309 align:start position:0%
this block
so<02:26:50.240><c> let's</c><02:26:50.479><c> move</c><02:26:50.720><c> the</c><02:26:50.800><c> declaration</c><02:26:51.359><c> to</c><02:26:51.520><c> the</c><02:26:51.600><c> top</c>

02:26:52.309 --> 02:26:52.319 align:start position:0%
so let's move the declaration to the top
 

02:26:52.319 --> 02:26:54.469 align:start position:0%
so let's move the declaration to the top
here<02:26:52.560><c> we</c><02:26:52.720><c> remove</c><02:26:52.960><c> the</c><02:26:53.120><c> float</c><02:26:53.439><c> keyword</c>

02:26:54.469 --> 02:26:54.479 align:start position:0%
here we remove the float keyword
 

02:26:54.479 --> 02:26:58.309 align:start position:0%
here we remove the float keyword
and<02:26:56.000><c> declare</c><02:26:57.200><c> monthly</c><02:26:57.600><c> interest</c>

02:26:58.309 --> 02:26:58.319 align:start position:0%
and declare monthly interest
 

02:26:58.319 --> 02:27:01.590 align:start position:0%
and declare monthly interest
over<02:26:58.560><c> here</c><02:27:00.479><c> that's</c><02:27:00.800><c> better</c>

02:27:01.590 --> 02:27:01.600 align:start position:0%
over here that's better
 

02:27:01.600 --> 02:27:04.230 align:start position:0%
over here that's better
and<02:27:01.920><c> finally</c><02:27:02.319><c> for</c><02:27:02.479><c> the</c><02:27:02.640><c> last</c><02:27:02.960><c> question</c><02:27:04.000><c> one</c>

02:27:04.230 --> 02:27:04.240 align:start position:0%
and finally for the last question one
 

02:27:04.240 --> 02:27:05.270 align:start position:0%
and finally for the last question one
more<02:27:04.399><c> time</c>

02:27:05.270 --> 02:27:05.280 align:start position:0%
more time
 

02:27:05.280 --> 02:27:12.630 align:start position:0%
more time
we<02:27:05.439><c> need</c><02:27:05.600><c> to</c><02:27:05.680><c> wrap</c><02:27:06.000><c> it</c><02:27:07.040><c> in</c><02:27:07.200><c> this</c><02:27:07.439><c> infinite</c><02:27:07.840><c> loop</c>

02:27:12.630 --> 02:27:12.640 align:start position:0%
 
 

02:27:12.640 --> 02:27:13.910 align:start position:0%
 
this<02:27:12.880><c> is</c><02:27:12.960><c> where</c><02:27:13.120><c> we</c><02:27:13.280><c> read</c><02:27:13.439><c> the</c><02:27:13.520><c> number</c><02:27:13.760><c> of</c>

02:27:13.910 --> 02:27:13.920 align:start position:0%
this is where we read the number of
 

02:27:13.920 --> 02:27:16.790 align:start position:0%
this is where we read the number of
years<02:27:14.960><c> and</c><02:27:15.439><c> right</c><02:27:15.760><c> after</c><02:27:16.160><c> this</c><02:27:16.319><c> line</c><02:27:16.560><c> we</c><02:27:16.640><c> need</c>

02:27:16.790 --> 02:27:16.800 align:start position:0%
years and right after this line we need
 

02:27:16.800 --> 02:27:18.710 align:start position:0%
years and right after this line we need
to<02:27:16.880><c> do</c><02:27:17.040><c> our</c><02:27:17.200><c> data</c><02:27:17.520><c> validation</c>

02:27:18.710 --> 02:27:18.720 align:start position:0%
to do our data validation
 

02:27:18.720 --> 02:27:21.510 align:start position:0%
to do our data validation
so<02:27:19.040><c> if</c><02:27:19.200><c> years</c><02:27:20.000><c> is</c><02:27:20.160><c> greater</c><02:27:20.560><c> than</c><02:27:20.880><c> or</c><02:27:21.120><c> equal</c><02:27:21.280><c> to</c>

02:27:21.510 --> 02:27:21.520 align:start position:0%
so if years is greater than or equal to
 

02:27:21.520 --> 02:27:22.070 align:start position:0%
so if years is greater than or equal to
1

02:27:22.070 --> 02:27:22.080 align:start position:0%
1
 

02:27:22.080 --> 02:27:26.950 align:start position:0%
1
and<02:27:22.880><c> it's</c><02:27:23.200><c> less</c><02:27:23.439><c> than</c><02:27:23.680><c> or</c><02:27:23.920><c> equal</c><02:27:24.240><c> to</c><02:27:24.800><c> 30.</c>

02:27:26.950 --> 02:27:26.960 align:start position:0%
and it's less than or equal to 30.
 

02:27:26.960 --> 02:27:29.110 align:start position:0%
and it's less than or equal to 30.
here<02:27:27.200><c> we</c><02:27:27.280><c> add</c><02:27:27.520><c> the</c><02:27:27.600><c> code</c><02:27:27.920><c> block</c><02:27:28.640><c> this</c><02:27:28.880><c> is</c><02:27:28.960><c> where</c>

02:27:29.110 --> 02:27:29.120 align:start position:0%
here we add the code block this is where
 

02:27:29.120 --> 02:27:30.870 align:start position:0%
here we add the code block this is where
we<02:27:29.280><c> calculate</c><02:27:29.760><c> the</c><02:27:29.840><c> number</c><02:27:30.080><c> of</c><02:27:30.240><c> payments</c>

02:27:30.870 --> 02:27:30.880 align:start position:0%
we calculate the number of payments
 

02:27:30.880 --> 02:27:34.469 align:start position:0%
we calculate the number of payments
and<02:27:31.120><c> then</c><02:27:31.680><c> we</c><02:27:31.920><c> break</c><02:27:33.439><c> actually</c><02:27:33.920><c> i</c><02:27:34.080><c> forgot</c><02:27:34.399><c> to</c>

02:27:34.469 --> 02:27:34.479 align:start position:0%
and then we break actually i forgot to
 

02:27:34.479 --> 02:27:36.870 align:start position:0%
and then we break actually i forgot to
type<02:27:34.800><c> an</c><02:27:34.960><c> s</c><02:27:35.200><c> here</c>

02:27:36.870 --> 02:27:36.880 align:start position:0%
type an s here
 

02:27:36.880 --> 02:27:38.710 align:start position:0%
type an s here
otherwise<02:27:37.280><c> if</c><02:27:37.359><c> the</c><02:27:37.439><c> user</c><02:27:37.760><c> enters</c><02:27:38.080><c> an</c><02:27:38.240><c> invalid</c>

02:27:38.710 --> 02:27:38.720 align:start position:0%
otherwise if the user enters an invalid
 

02:27:38.720 --> 02:27:41.349 align:start position:0%
otherwise if the user enters an invalid
value<02:27:39.040><c> we</c><02:27:39.200><c> simply</c><02:27:39.600><c> print</c><02:27:40.080><c> an</c><02:27:40.240><c> error</c><02:27:40.399><c> message</c>

02:27:41.349 --> 02:27:41.359 align:start position:0%
value we simply print an error message
 

02:27:41.359 --> 02:27:45.429 align:start position:0%
value we simply print an error message
enter<02:27:41.600><c> a</c><02:27:41.680><c> value</c><02:27:42.080><c> between</c><02:27:43.120><c> 1</c><02:27:43.520><c> and</c><02:27:44.160><c> 30.</c>

02:27:45.429 --> 02:27:45.439 align:start position:0%
enter a value between 1 and 30.
 

02:27:45.439 --> 02:27:46.630 align:start position:0%
enter a value between 1 and 30.
now<02:27:45.600><c> here</c><02:27:45.760><c> once</c><02:27:46.000><c> again</c><02:27:46.240><c> we</c><02:27:46.319><c> have</c><02:27:46.479><c> a</c>

02:27:46.630 --> 02:27:46.640 align:start position:0%
now here once again we have a
 

02:27:46.640 --> 02:27:48.550 align:start position:0%
now here once again we have a
compilation<02:27:47.200><c> error</c><02:27:47.520><c> because</c><02:27:48.160><c> number</c><02:27:48.479><c> of</c>

02:27:48.550 --> 02:27:48.560 align:start position:0%
compilation error because number of
 

02:27:48.560 --> 02:27:50.630 align:start position:0%
compilation error because number of
payments<02:27:49.040><c> cannot</c><02:27:49.439><c> be</c><02:27:49.600><c> resolved</c>

02:27:50.630 --> 02:27:50.640 align:start position:0%
payments cannot be resolved
 

02:27:50.640 --> 02:27:53.349 align:start position:0%
payments cannot be resolved
so<02:27:51.040><c> we</c><02:27:51.200><c> remove</c><02:27:51.600><c> the</c><02:27:51.760><c> declaration</c><02:27:52.399><c> from</c><02:27:52.640><c> here</c>

02:27:53.349 --> 02:27:53.359 align:start position:0%
so we remove the declaration from here
 

02:27:53.359 --> 02:27:57.110 align:start position:0%
so we remove the declaration from here
and<02:27:53.760><c> moving</c><02:27:54.080><c> to</c><02:27:54.240><c> the</c><02:27:54.319><c> top</c>

02:27:57.110 --> 02:27:57.120 align:start position:0%
 
 

02:27:57.120 --> 02:28:00.469 align:start position:0%
 
right<02:27:57.359><c> here</c><02:27:58.479><c> number</c><02:27:58.880><c> of</c><02:27:59.120><c> payments</c>

02:28:00.469 --> 02:28:00.479 align:start position:0%
right here number of payments
 

02:28:00.479 --> 02:28:02.389 align:start position:0%
right here number of payments
so<02:28:00.640><c> this</c><02:28:00.800><c> is</c><02:28:00.960><c> how</c><02:28:01.120><c> we</c><02:28:01.280><c> add</c><02:28:01.439><c> data</c><02:28:01.760><c> validation</c><02:28:02.240><c> to</c>

02:28:02.389 --> 02:28:02.399 align:start position:0%
so this is how we add data validation to
 

02:28:02.399 --> 02:28:04.550 align:start position:0%
so this is how we add data validation to
this<02:28:02.640><c> program</c><02:28:03.359><c> the</c><02:28:03.600><c> problem</c><02:28:03.920><c> is</c><02:28:04.080><c> that</c><02:28:04.319><c> this</c>

02:28:04.550 --> 02:28:04.560 align:start position:0%
this program the problem is that this
 

02:28:04.560 --> 02:28:05.270 align:start position:0%
this program the problem is that this
code

02:28:05.270 --> 02:28:05.280 align:start position:0%
code
 

02:28:05.280 --> 02:28:07.910 align:start position:0%
code
the<02:28:05.439><c> code</c><02:28:05.840><c> inside</c><02:28:06.240><c> the</c><02:28:06.399><c> main</c><02:28:06.720><c> method</c><02:28:07.120><c> is</c><02:28:07.200><c> now</c>

02:28:07.910 --> 02:28:07.920 align:start position:0%
the code inside the main method is now
 

02:28:07.920 --> 02:28:09.910 align:start position:0%
the code inside the main method is now
getting<02:28:08.240><c> a</c><02:28:08.319><c> little</c><02:28:08.479><c> bit</c><02:28:08.720><c> too</c><02:28:08.960><c> long</c>

02:28:09.910 --> 02:28:09.920 align:start position:0%
getting a little bit too long
 

02:28:09.920 --> 02:28:11.990 align:start position:0%
getting a little bit too long
and<02:28:10.000><c> this</c><02:28:10.240><c> hurts</c><02:28:10.800><c> the</c><02:28:11.040><c> maintainability</c><02:28:11.840><c> of</c>

02:28:11.990 --> 02:28:12.000 align:start position:0%
and this hurts the maintainability of
 

02:28:12.000 --> 02:28:12.950 align:start position:0%
and this hurts the maintainability of
our<02:28:12.080><c> program</c>

02:28:12.950 --> 02:28:12.960 align:start position:0%
our program
 

02:28:12.960 --> 02:28:14.389 align:start position:0%
our program
someone<02:28:13.280><c> else</c><02:28:13.439><c> reading</c><02:28:13.680><c> this</c><02:28:13.840><c> code</c><02:28:14.080><c> they</c><02:28:14.240><c> have</c>

02:28:14.389 --> 02:28:14.399 align:start position:0%
someone else reading this code they have
 

02:28:14.399 --> 02:28:15.990 align:start position:0%
someone else reading this code they have
to<02:28:14.560><c> look</c><02:28:14.720><c> at</c><02:28:14.880><c> all</c><02:28:15.120><c> these</c><02:28:15.359><c> statements</c><02:28:15.840><c> to</c>

02:28:15.990 --> 02:28:16.000 align:start position:0%
to look at all these statements to
 

02:28:16.000 --> 02:28:17.429 align:start position:0%
to look at all these statements to
figure<02:28:16.240><c> out</c><02:28:16.319><c> what's</c><02:28:16.560><c> going</c><02:28:16.800><c> on</c>

02:28:17.429 --> 02:28:17.439 align:start position:0%
figure out what's going on
 

02:28:17.439 --> 02:28:19.510 align:start position:0%
figure out what's going on
this<02:28:17.680><c> is</c><02:28:17.760><c> where</c><02:28:18.240><c> we</c><02:28:18.399><c> need</c><02:28:18.560><c> to</c><02:28:18.720><c> break</c><02:28:18.960><c> this</c><02:28:19.200><c> code</c>

02:28:19.510 --> 02:28:19.520 align:start position:0%
this is where we need to break this code
 

02:28:19.520 --> 02:28:20.469 align:start position:0%
this is where we need to break this code
down<02:28:19.840><c> into</c>

02:28:20.469 --> 02:28:20.479 align:start position:0%
down into
 

02:28:20.479 --> 02:28:22.710 align:start position:0%
down into
smaller<02:28:21.280><c> easier</c><02:28:21.600><c> to</c><02:28:21.760><c> read</c><02:28:22.080><c> and</c><02:28:22.240><c> easier</c><02:28:22.560><c> to</c>

02:28:22.710 --> 02:28:22.720 align:start position:0%
smaller easier to read and easier to
 

02:28:22.720 --> 02:28:23.990 align:start position:0%
smaller easier to read and easier to
understand<02:28:23.280><c> chunks</c>

02:28:23.990 --> 02:28:24.000 align:start position:0%
understand chunks
 

02:28:24.000 --> 02:28:25.510 align:start position:0%
understand chunks
and<02:28:24.479><c> that's</c><02:28:24.720><c> what</c><02:28:24.800><c> i'm</c><02:28:24.960><c> going</c><02:28:25.040><c> to</c><02:28:25.120><c> show</c><02:28:25.280><c> you</c>

02:28:25.510 --> 02:28:25.520 align:start position:0%
and that's what i'm going to show you
 

02:28:25.520 --> 02:28:29.270 align:start position:0%
and that's what i'm going to show you
next

02:28:29.270 --> 02:28:29.280 align:start position:0%
 
 

02:28:29.280 --> 02:28:30.630 align:start position:0%
 
so<02:28:29.520><c> in</c><02:28:29.600><c> this</c><02:28:29.680><c> section</c><02:28:30.000><c> you</c><02:28:30.080><c> learn</c><02:28:30.319><c> how</c><02:28:30.479><c> to</c>

02:28:30.630 --> 02:28:30.640 align:start position:0%
so in this section you learn how to
 

02:28:30.640 --> 02:28:32.710 align:start position:0%
so in this section you learn how to
control<02:28:31.120><c> the</c><02:28:31.280><c> flow</c><02:28:31.600><c> of</c><02:28:31.840><c> execution</c><02:28:32.479><c> of</c><02:28:32.560><c> your</c>

02:28:32.710 --> 02:28:32.720 align:start position:0%
control the flow of execution of your
 

02:28:32.720 --> 02:28:33.750 align:start position:0%
control the flow of execution of your
programs

02:28:33.750 --> 02:28:33.760 align:start position:0%
programs
 

02:28:33.760 --> 02:28:35.270 align:start position:0%
programs
we<02:28:34.000><c> started</c><02:28:34.319><c> off</c><02:28:34.399><c> by</c><02:28:34.640><c> talking</c><02:28:34.880><c> about</c><02:28:35.120><c> the</c>

02:28:35.270 --> 02:28:35.280 align:start position:0%
we started off by talking about the
 

02:28:35.280 --> 02:28:36.950 align:start position:0%
we started off by talking about the
comparison<02:28:36.000><c> operators</c><02:28:36.560><c> for</c>

02:28:36.950 --> 02:28:36.960 align:start position:0%
comparison operators for
 

02:28:36.960 --> 02:28:39.110 align:start position:0%
comparison operators for
comparing<02:28:37.439><c> primitive</c><02:28:37.920><c> values</c><02:28:38.800><c> then</c><02:28:38.960><c> we</c>

02:28:39.110 --> 02:28:39.120 align:start position:0%
comparing primitive values then we
 

02:28:39.120 --> 02:28:41.349 align:start position:0%
comparing primitive values then we
talked<02:28:39.359><c> about</c><02:28:39.600><c> the</c><02:28:39.840><c> logical</c><02:28:40.319><c> operators</c><02:28:40.960><c> like</c>

02:28:41.349 --> 02:28:41.359 align:start position:0%
talked about the logical operators like
 

02:28:41.359 --> 02:28:44.630 align:start position:0%
talked about the logical operators like
and<02:28:42.080><c> or</c><02:28:42.720><c> and</c><02:28:42.960><c> not</c><02:28:43.680><c> i</c><02:28:43.840><c> showed</c><02:28:44.080><c> you</c><02:28:44.240><c> how</c><02:28:44.399><c> we</c><02:28:44.560><c> can</c>

02:28:44.630 --> 02:28:44.640 align:start position:0%
and or and not i showed you how we can
 

02:28:44.640 --> 02:28:45.990 align:start position:0%
and or and not i showed you how we can
use<02:28:44.800><c> these</c><02:28:45.120><c> operators</c><02:28:45.680><c> for</c>

02:28:45.990 --> 02:28:46.000 align:start position:0%
use these operators for
 

02:28:46.000 --> 02:28:48.309 align:start position:0%
use these operators for
implementing<02:28:46.880><c> real-world</c><02:28:47.359><c> rules</c><02:28:48.080><c> and</c><02:28:48.160><c> then</c>

02:28:48.309 --> 02:28:48.319 align:start position:0%
implementing real-world rules and then
 

02:28:48.319 --> 02:28:49.349 align:start position:0%
implementing real-world rules and then
we<02:28:48.479><c> talked</c><02:28:48.720><c> about</c>

02:28:49.349 --> 02:28:49.359 align:start position:0%
we talked about
 

02:28:49.359 --> 02:28:51.830 align:start position:0%
we talked about
three<02:28:49.600><c> types</c><02:28:49.920><c> of</c><02:28:50.080><c> control</c><02:28:50.479><c> flow</c><02:28:50.720><c> statements</c>

02:28:51.830 --> 02:28:51.840 align:start position:0%
three types of control flow statements
 

02:28:51.840 --> 02:28:52.710 align:start position:0%
three types of control flow statements
you<02:28:52.000><c> learn</c><02:28:52.240><c> about</c>

02:28:52.710 --> 02:28:52.720 align:start position:0%
you learn about
 

02:28:52.720 --> 02:28:54.950 align:start position:0%
you learn about
conditional<02:28:53.280><c> statements</c><02:28:53.760><c> like</c><02:28:54.240><c> if</c><02:28:54.720><c> and</c>

02:28:54.950 --> 02:28:54.960 align:start position:0%
conditional statements like if and
 

02:28:54.960 --> 02:28:56.950 align:start position:0%
conditional statements like if and
switch<02:28:55.520><c> for</c><02:28:55.760><c> making</c><02:28:56.160><c> decisions</c>

02:28:56.950 --> 02:28:56.960 align:start position:0%
switch for making decisions
 

02:28:56.960 --> 02:28:58.870 align:start position:0%
switch for making decisions
in<02:28:57.120><c> our</c><02:28:57.200><c> programs</c><02:28:58.080><c> then</c><02:28:58.240><c> you</c><02:28:58.399><c> learned</c><02:28:58.640><c> about</c>

02:28:58.870 --> 02:28:58.880 align:start position:0%
in our programs then you learned about
 

02:28:58.880 --> 02:29:01.590 align:start position:0%
in our programs then you learned about
loops<02:28:59.359><c> for</c><02:28:59.600><c> executing</c><02:29:00.240><c> code</c><02:29:00.560><c> repeatedly</c>

02:29:01.590 --> 02:29:01.600 align:start position:0%
loops for executing code repeatedly
 

02:29:01.600 --> 02:29:03.750 align:start position:0%
loops for executing code repeatedly
we<02:29:01.760><c> looked</c><02:29:02.000><c> at</c><02:29:02.160><c> four</c><02:29:02.399><c> types</c><02:29:02.720><c> of</c><02:29:02.880><c> loops</c><02:29:03.520><c> four</c>

02:29:03.750 --> 02:29:03.760 align:start position:0%
we looked at four types of loops four
 

02:29:03.760 --> 02:29:05.349 align:start position:0%
we looked at four types of loops four
loops<02:29:04.479><c> while</c><02:29:04.720><c> loops</c>

02:29:05.349 --> 02:29:05.359 align:start position:0%
loops while loops
 

02:29:05.359 --> 02:29:07.990 align:start position:0%
loops while loops
two<02:29:05.600><c> while</c><02:29:05.760><c> loops</c><02:29:06.160><c> and</c><02:29:06.560><c> four</c><02:29:06.800><c> each</c><02:29:06.960><c> loops</c><02:29:07.680><c> and</c>

02:29:07.990 --> 02:29:08.000 align:start position:0%
two while loops and four each loops and
 

02:29:08.000 --> 02:29:09.510 align:start position:0%
two while loops and four each loops and
finally<02:29:08.399><c> we</c><02:29:08.479><c> looked</c><02:29:08.720><c> at</c><02:29:08.800><c> the</c><02:29:08.960><c> break</c><02:29:09.359><c> and</c>

02:29:09.510 --> 02:29:09.520 align:start position:0%
finally we looked at the break and
 

02:29:09.520 --> 02:29:11.110 align:start position:0%
finally we looked at the break and
continue<02:29:10.000><c> statements</c><02:29:10.560><c> for</c>

02:29:11.110 --> 02:29:11.120 align:start position:0%
continue statements for
 

02:29:11.120 --> 02:29:13.270 align:start position:0%
continue statements for
breaking<02:29:11.600><c> or</c><02:29:12.160><c> jumping</c><02:29:12.479><c> to</c><02:29:12.640><c> the</c><02:29:12.880><c> beginning</c><02:29:13.200><c> of</c>

02:29:13.270 --> 02:29:13.280 align:start position:0%
breaking or jumping to the beginning of
 

02:29:13.280 --> 02:29:14.230 align:start position:0%
breaking or jumping to the beginning of
a<02:29:13.439><c> loop</c>

02:29:14.230 --> 02:29:14.240 align:start position:0%
a loop
 

02:29:14.240 --> 02:29:15.510 align:start position:0%
a loop
i<02:29:14.399><c> hope</c><02:29:14.560><c> you</c><02:29:14.640><c> learned</c><02:29:14.880><c> a</c><02:29:14.960><c> lot</c><02:29:15.200><c> and</c><02:29:15.280><c> been</c>

02:29:15.510 --> 02:29:15.520 align:start position:0%
i hope you learned a lot and been
 

02:29:15.520 --> 02:29:23.370 align:start position:0%
i hope you learned a lot and been
enjoying<02:29:15.840><c> the</c><02:29:15.920><c> course</c><02:29:16.160><c> so</c><02:29:20.840><c> far</c>

02:29:23.370 --> 02:29:23.380 align:start position:0%
enjoying the course so far
 

02:29:23.380 --> 02:29:27.590 align:start position:0%
enjoying the course so far
[Music]

02:29:27.590 --> 02:29:27.600 align:start position:0%
 
 

02:29:27.600 --> 02:29:30.070 align:start position:0%
 
as<02:29:27.840><c> martin</c><02:29:28.160><c> fowler</c><02:29:28.640><c> said</c><02:29:29.040><c> any</c><02:29:29.359><c> fool</c><02:29:29.600><c> can</c><02:29:29.840><c> write</c>

02:29:30.070 --> 02:29:30.080 align:start position:0%
as martin fowler said any fool can write
 

02:29:30.080 --> 02:29:31.990 align:start position:0%
as martin fowler said any fool can write
code<02:29:30.399><c> that</c><02:29:30.560><c> a</c><02:29:30.640><c> computer</c><02:29:31.120><c> can</c><02:29:31.280><c> understand</c>

02:29:31.990 --> 02:29:32.000 align:start position:0%
code that a computer can understand
 

02:29:32.000 --> 02:29:34.070 align:start position:0%
code that a computer can understand
good<02:29:32.240><c> programmers</c><02:29:32.880><c> write</c><02:29:33.120><c> code</c><02:29:33.439><c> that</c><02:29:33.680><c> humans</c>

02:29:34.070 --> 02:29:34.080 align:start position:0%
good programmers write code that humans
 

02:29:34.080 --> 02:29:35.030 align:start position:0%
good programmers write code that humans
can<02:29:34.319><c> understand</c>

02:29:35.030 --> 02:29:35.040 align:start position:0%
can understand
 

02:29:35.040 --> 02:29:37.429 align:start position:0%
can understand
i<02:29:35.280><c> can't</c><02:29:35.600><c> agree</c><02:29:36.000><c> more</c><02:29:36.640><c> if</c><02:29:36.800><c> you</c><02:29:36.880><c> have</c><02:29:37.040><c> seen</c><02:29:37.280><c> any</c>

02:29:37.429 --> 02:29:37.439 align:start position:0%
i can't agree more if you have seen any
 

02:29:37.439 --> 02:29:38.309 align:start position:0%
i can't agree more if you have seen any
of<02:29:37.520><c> my</c><02:29:37.680><c> courses</c>

02:29:38.309 --> 02:29:38.319 align:start position:0%
of my courses
 

02:29:38.319 --> 02:29:40.150 align:start position:0%
of my courses
you<02:29:38.560><c> probably</c><02:29:38.960><c> know</c><02:29:39.120><c> that</c><02:29:39.280><c> i</c><02:29:39.439><c> put</c><02:29:39.680><c> a</c><02:29:39.760><c> lot</c><02:29:39.920><c> of</c>

02:29:40.150 --> 02:29:40.160 align:start position:0%
you probably know that i put a lot of
 

02:29:40.160 --> 02:29:42.150 align:start position:0%
you probably know that i put a lot of
emphasis<02:29:40.720><c> on</c><02:29:40.880><c> writing</c><02:29:41.280><c> clean</c><02:29:41.600><c> code</c>

02:29:42.150 --> 02:29:42.160 align:start position:0%
emphasis on writing clean code
 

02:29:42.160 --> 02:29:44.150 align:start position:0%
emphasis on writing clean code
so<02:29:42.319><c> i</c><02:29:42.479><c> have</c><02:29:42.560><c> dedicated</c><02:29:43.120><c> this</c><02:29:43.359><c> entire</c><02:29:43.760><c> section</c>

02:29:44.150 --> 02:29:44.160 align:start position:0%
so i have dedicated this entire section
 

02:29:44.160 --> 02:29:45.429 align:start position:0%
so i have dedicated this entire section
on<02:29:44.319><c> clean</c><02:29:44.640><c> coding</c>

02:29:45.429 --> 02:29:45.439 align:start position:0%
on clean coding
 

02:29:45.439 --> 02:29:46.950 align:start position:0%
on clean coding
we're<02:29:45.600><c> going</c><02:29:45.760><c> to</c><02:29:45.840><c> continue</c><02:29:46.319><c> extending</c><02:29:46.800><c> our</c>

02:29:46.950 --> 02:29:46.960 align:start position:0%
we're going to continue extending our
 

02:29:46.960 --> 02:29:49.190 align:start position:0%
we're going to continue extending our
mortgage<02:29:47.359><c> calculator</c><02:29:48.240><c> and</c><02:29:48.399><c> add</c><02:29:48.640><c> new</c><02:29:48.800><c> features</c>

02:29:49.190 --> 02:29:49.200 align:start position:0%
mortgage calculator and add new features
 

02:29:49.200 --> 02:29:50.710 align:start position:0%
mortgage calculator and add new features
to<02:29:49.359><c> it</c><02:29:49.840><c> along</c><02:29:50.080><c> the</c><02:29:50.240><c> way</c>

02:29:50.710 --> 02:29:50.720 align:start position:0%
to it along the way
 

02:29:50.720 --> 02:29:52.230 align:start position:0%
to it along the way
you<02:29:50.880><c> will</c><02:29:50.960><c> see</c><02:29:51.120><c> our</c><02:29:51.280><c> code</c><02:29:51.520><c> starts</c><02:29:51.840><c> to</c><02:29:52.000><c> get</c>

02:29:52.230 --> 02:29:52.240 align:start position:0%
you will see our code starts to get
 

02:29:52.240 --> 02:29:54.070 align:start position:0%
you will see our code starts to get
messy<02:29:52.640><c> and</c><02:29:52.800><c> hard</c><02:29:53.040><c> to</c><02:29:53.200><c> maintain</c>

02:29:54.070 --> 02:29:54.080 align:start position:0%
messy and hard to maintain
 

02:29:54.080 --> 02:29:55.910 align:start position:0%
messy and hard to maintain
so<02:29:54.319><c> i</c><02:29:54.399><c> will</c><02:29:54.479><c> show</c><02:29:54.640><c> you</c><02:29:54.800><c> a</c><02:29:54.880><c> few</c><02:29:55.040><c> techniques</c><02:29:55.680><c> for</c>

02:29:55.910 --> 02:29:55.920 align:start position:0%
so i will show you a few techniques for
 

02:29:55.920 --> 02:29:57.510 align:start position:0%
so i will show you a few techniques for
changing<02:29:56.319><c> the</c><02:29:56.479><c> structure</c><02:29:56.880><c> of</c><02:29:56.960><c> the</c><02:29:57.120><c> code</c>

02:29:57.510 --> 02:29:57.520 align:start position:0%
changing the structure of the code
 

02:29:57.520 --> 02:29:59.910 align:start position:0%
changing the structure of the code
and<02:29:57.680><c> make</c><02:29:57.920><c> it</c><02:29:58.080><c> clean</c><02:29:58.640><c> and</c><02:29:58.800><c> beautiful</c><02:29:59.680><c> are</c><02:29:59.760><c> you</c>

02:29:59.910 --> 02:29:59.920 align:start position:0%
and make it clean and beautiful are you
 

02:29:59.920 --> 02:30:00.630 align:start position:0%
and make it clean and beautiful are you
ready

02:30:00.630 --> 02:30:00.640 align:start position:0%
ready
 

02:30:00.640 --> 02:30:04.870 align:start position:0%
ready
let's<02:30:00.880><c> jump</c><02:30:01.120><c> in</c><02:30:01.359><c> and</c><02:30:01.600><c> get</c><02:30:02.840><c> started</c>

02:30:04.870 --> 02:30:04.880 align:start position:0%
let's jump in and get started
 

02:30:04.880 --> 02:30:06.469 align:start position:0%
let's jump in and get started
hey<02:30:05.040><c> guys</c><02:30:05.359><c> mosh</c><02:30:05.680><c> here</c><02:30:06.160><c> i</c><02:30:06.240><c> want</c><02:30:06.399><c> to</c>

02:30:06.469 --> 02:30:06.479 align:start position:0%
hey guys mosh here i want to
 

02:30:06.479 --> 02:30:08.230 align:start position:0%
hey guys mosh here i want to
congratulate<02:30:07.120><c> you</c><02:30:07.280><c> on</c><02:30:07.359><c> your</c><02:30:07.520><c> determination</c>

02:30:08.230 --> 02:30:08.240 align:start position:0%
congratulate you on your determination
 

02:30:08.240 --> 02:30:08.550 align:start position:0%
congratulate you on your determination
for

02:30:08.550 --> 02:30:08.560 align:start position:0%
for
 

02:30:08.560 --> 02:30:10.309 align:start position:0%
for
learning<02:30:09.200><c> i</c><02:30:09.280><c> would</c><02:30:09.439><c> really</c><02:30:09.680><c> appreciate</c><02:30:10.080><c> it</c><02:30:10.240><c> if</c>

02:30:10.309 --> 02:30:10.319 align:start position:0%
learning i would really appreciate it if
 

02:30:10.319 --> 02:30:12.550 align:start position:0%
learning i would really appreciate it if
you<02:30:10.479><c> support</c><02:30:10.800><c> me</c><02:30:10.960><c> by</c><02:30:11.520><c> liking</c><02:30:12.000><c> and</c><02:30:12.160><c> sharing</c>

02:30:12.550 --> 02:30:12.560 align:start position:0%
you support me by liking and sharing
 

02:30:12.560 --> 02:30:13.270 align:start position:0%
you support me by liking and sharing
this<02:30:12.720><c> video</c>

02:30:13.270 --> 02:30:13.280 align:start position:0%
this video
 

02:30:13.280 --> 02:30:15.510 align:start position:0%
this video
also<02:30:13.600><c> subscribe</c><02:30:14.000><c> to</c><02:30:14.160><c> my</c><02:30:14.319><c> channel</c><02:30:14.800><c> and</c><02:30:15.120><c> enable</c>

02:30:15.510 --> 02:30:15.520 align:start position:0%
also subscribe to my channel and enable
 

02:30:15.520 --> 02:30:16.630 align:start position:0%
also subscribe to my channel and enable
notifications<02:30:16.319><c> so</c>

02:30:16.630 --> 02:30:16.640 align:start position:0%
notifications so
 

02:30:16.640 --> 02:30:17.990 align:start position:0%
notifications so
next<02:30:16.880><c> time</c><02:30:17.040><c> i</c><02:30:17.120><c> upload</c><02:30:17.439><c> a</c><02:30:17.520><c> video</c><02:30:17.760><c> you</c><02:30:17.840><c> get</c>

02:30:17.990 --> 02:30:18.000 align:start position:0%
next time i upload a video you get
 

02:30:18.000 --> 02:30:20.150 align:start position:0%
next time i upload a video you get
notified<02:30:18.880><c> now</c><02:30:19.120><c> if</c><02:30:19.200><c> you</c><02:30:19.359><c> want</c><02:30:19.439><c> to</c><02:30:19.520><c> learn</c><02:30:19.760><c> more</c>

02:30:20.150 --> 02:30:20.160 align:start position:0%
notified now if you want to learn more
 

02:30:20.160 --> 02:30:21.910 align:start position:0%
notified now if you want to learn more
i<02:30:20.319><c> would</c><02:30:20.479><c> encourage</c><02:30:20.800><c> you</c><02:30:20.880><c> to</c><02:30:21.040><c> enroll</c><02:30:21.520><c> in</c><02:30:21.680><c> my</c>

02:30:21.910 --> 02:30:21.920 align:start position:0%
i would encourage you to enroll in my
 

02:30:21.920 --> 02:30:23.670 align:start position:0%
i would encourage you to enroll in my
ultimate<02:30:22.560><c> java</c><02:30:22.960><c> series</c>

02:30:23.670 --> 02:30:23.680 align:start position:0%
ultimate java series
 

02:30:23.680 --> 02:30:25.429 align:start position:0%
ultimate java series
as<02:30:23.840><c> i</c><02:30:24.000><c> told</c><02:30:24.160><c> you</c><02:30:24.319><c> earlier</c><02:30:24.800><c> this</c><02:30:25.040><c> youtube</c>

02:30:25.429 --> 02:30:25.439 align:start position:0%
as i told you earlier this youtube
 

02:30:25.439 --> 02:30:27.429 align:start position:0%
as i told you earlier this youtube
tutorial<02:30:26.000><c> is</c><02:30:26.080><c> the</c><02:30:26.240><c> first</c><02:30:26.560><c> two</c><02:30:26.800><c> hours</c><02:30:27.200><c> of</c><02:30:27.280><c> this</c>

02:30:27.429 --> 02:30:27.439 align:start position:0%
tutorial is the first two hours of this
 

02:30:27.439 --> 02:30:28.070 align:start position:0%
tutorial is the first two hours of this
series

02:30:28.070 --> 02:30:28.080 align:start position:0%
series
 

02:30:28.080 --> 02:30:29.750 align:start position:0%
series
if<02:30:28.240><c> you're</c><02:30:28.399><c> serious</c><02:30:28.720><c> about</c><02:30:28.960><c> learning</c><02:30:29.280><c> java</c>

02:30:29.750 --> 02:30:29.760 align:start position:0%
if you're serious about learning java
 

02:30:29.760 --> 02:30:31.510 align:start position:0%
if you're serious about learning java
and<02:30:29.920><c> want</c><02:30:30.080><c> to</c><02:30:30.160><c> become</c><02:30:30.479><c> a</c><02:30:30.560><c> professional</c><02:30:31.200><c> job</c><02:30:31.439><c> of</c>

02:30:31.510 --> 02:30:31.520 align:start position:0%
and want to become a professional job of
 

02:30:31.520 --> 02:30:32.389 align:start position:0%
and want to become a professional job of
developer

02:30:32.389 --> 02:30:32.399 align:start position:0%
developer
 

02:30:32.399 --> 02:30:33.910 align:start position:0%
developer
i<02:30:32.560><c> highly</c><02:30:32.880><c> encourage</c><02:30:33.200><c> you</c><02:30:33.359><c> to</c><02:30:33.439><c> enroll</c><02:30:33.680><c> in</c><02:30:33.840><c> this</c>

02:30:33.910 --> 02:30:33.920 align:start position:0%
i highly encourage you to enroll in this
 

02:30:33.920 --> 02:30:36.070 align:start position:0%
i highly encourage you to enroll in this
series<02:30:34.640><c> in</c><02:30:34.720><c> case</c><02:30:34.960><c> you're</c><02:30:35.120><c> interested</c><02:30:35.760><c> i</c><02:30:35.920><c> put</c>

02:30:36.070 --> 02:30:36.080 align:start position:0%
series in case you're interested i put
 

02:30:36.080 --> 02:30:37.750 align:start position:0%
series in case you're interested i put
the<02:30:36.160><c> link</c><02:30:36.399><c> down</c><02:30:36.640><c> below</c><02:30:37.040><c> in</c><02:30:37.120><c> the</c><02:30:37.200><c> description</c>

02:30:37.750 --> 02:30:37.760 align:start position:0%
the link down below in the description
 

02:30:37.760 --> 02:30:38.469 align:start position:0%
the link down below in the description
box

02:30:38.469 --> 02:30:38.479 align:start position:0%
box
 

02:30:38.479 --> 02:30:47.150 align:start position:0%
box
thank<02:30:38.640><c> you</c><02:30:38.880><c> and</c><02:30:38.960><c> have</c><02:30:39.120><c> a</c><02:30:39.280><c> fantastic</c><02:30:44.840><c> day</c>

02:30:47.150 --> 02:30:47.160 align:start position:0%
thank you and have a fantastic day
 

02:30:47.160 --> 02:30:49.530 align:start position:0%
thank you and have a fantastic day
[Music]

