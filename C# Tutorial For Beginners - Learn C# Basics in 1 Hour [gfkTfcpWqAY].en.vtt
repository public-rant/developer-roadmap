WEBVTT



00:00:03.560 --> 00:00:06.470 align:start position:0%
 
hi<00:00:04.560><c> thank</c><00:00:05.430><c> you</c><00:00:05.549><c> for</c><00:00:05.730><c> taking</c><00:00:06.000><c> my</c><00:00:06.120><c> c-sharp</c>

00:00:06.470 --> 00:00:06.480 align:start position:0%
hi thank you for taking my c-sharp
 

00:00:06.480 --> 00:00:08.629 align:start position:0%
hi thank you for taking my c-sharp
basics<00:00:06.899><c> course</c><00:00:07.140><c> let</c><00:00:07.830><c> me</c><00:00:07.980><c> quickly</c><00:00:08.189><c> give</c><00:00:08.429><c> you</c><00:00:08.490><c> an</c>

00:00:08.629 --> 00:00:08.639 align:start position:0%
basics course let me quickly give you an
 

00:00:08.639 --> 00:00:10.190 align:start position:0%
basics course let me quickly give you an
overview<00:00:08.970><c> of</c><00:00:09.269><c> what</c><00:00:09.750><c> you're</c><00:00:09.870><c> going</c><00:00:10.019><c> to</c><00:00:10.080><c> learn</c>

00:00:10.190 --> 00:00:10.200 align:start position:0%
overview of what you're going to learn
 

00:00:10.200 --> 00:00:12.980 align:start position:0%
overview of what you're going to learn
and<00:00:10.469><c> how</c><00:00:11.040><c> AB</c><00:00:11.280><c> structured</c><00:00:11.820><c> this</c><00:00:11.940><c> course</c><00:00:12.240><c> in</c><00:00:12.450><c> the</c>

00:00:12.980 --> 00:00:12.990 align:start position:0%
and how AB structured this course in the
 

00:00:12.990 --> 00:00:14.289 align:start position:0%
and how AB structured this course in the
first<00:00:13.230><c> section</c><00:00:13.410><c> I'm</c><00:00:13.710><c> going</c><00:00:13.920><c> to</c><00:00:14.009><c> talk</c><00:00:14.160><c> about</c>

00:00:14.289 --> 00:00:14.299 align:start position:0%
first section I'm going to talk about
 

00:00:14.299 --> 00:00:16.519 align:start position:0%
first section I'm going to talk about
fundamentals<00:00:15.299><c> of</c><00:00:15.450><c> c-sharp</c><00:00:15.719><c> and</c><00:00:16.080><c> Dartmouth</c>

00:00:16.519 --> 00:00:16.529 align:start position:0%
fundamentals of c-sharp and Dartmouth
 

00:00:16.529 --> 00:00:18.529 align:start position:0%
fundamentals of c-sharp and Dartmouth
one<00:00:17.369><c> of</c><00:00:17.460><c> the</c><00:00:17.550><c> questions</c><00:00:17.970><c> that</c><00:00:18.060><c> a</c><00:00:18.210><c> lot</c><00:00:18.510><c> of</c>

00:00:18.529 --> 00:00:18.539 align:start position:0%
one of the questions that a lot of
 

00:00:18.539 --> 00:00:20.269 align:start position:0%
one of the questions that a lot of
beginners<00:00:19.020><c> ask</c><00:00:19.260><c> is</c><00:00:19.500><c> what</c><00:00:19.980><c> is</c><00:00:20.070><c> the</c><00:00:20.160><c> difference</c>

00:00:20.269 --> 00:00:20.279 align:start position:0%
beginners ask is what is the difference
 

00:00:20.279 --> 00:00:22.519 align:start position:0%
beginners ask is what is the difference
between<00:00:20.730><c> C</c><00:00:20.939><c> sharp</c><00:00:21.180><c> and</c><00:00:21.300><c> darknet</c><00:00:21.779><c> so</c><00:00:22.289><c> I'm</c><00:00:22.380><c> going</c>

00:00:22.519 --> 00:00:22.529 align:start position:0%
between C sharp and darknet so I'm going
 

00:00:22.529 --> 00:00:24.290 align:start position:0%
between C sharp and darknet so I'm going
to<00:00:22.590><c> cover</c><00:00:22.769><c> that</c><00:00:23.039><c> I'm</c><00:00:23.279><c> also</c><00:00:23.880><c> going</c><00:00:24.060><c> to</c><00:00:24.119><c> talk</c>

00:00:24.290 --> 00:00:24.300 align:start position:0%
to cover that I'm also going to talk
 

00:00:24.300 --> 00:00:28.910 align:start position:0%
to cover that I'm also going to talk
about<00:00:24.529><c> CLR</c><00:00:25.640><c> assemblies</c><00:00:26.900><c> namespaces</c><00:00:27.900><c> il</c><00:00:28.619><c> code</c>

00:00:28.910 --> 00:00:28.920 align:start position:0%
about CLR assemblies namespaces il code
 

00:00:28.920 --> 00:00:31.519 align:start position:0%
about CLR assemblies namespaces il code
and<00:00:29.160><c> stuff</c><00:00:29.429><c> like</c><00:00:29.550><c> that</c><00:00:29.779><c> then</c><00:00:30.779><c> over</c><00:00:31.140><c> the</c><00:00:31.260><c> next</c>

00:00:31.519 --> 00:00:31.529 align:start position:0%
and stuff like that then over the next
 

00:00:31.529 --> 00:00:32.810 align:start position:0%
and stuff like that then over the next
two<00:00:31.679><c> sections</c><00:00:31.920><c> I'm</c><00:00:32.250><c> going</c><00:00:32.460><c> to</c><00:00:32.520><c> talk</c><00:00:32.669><c> about</c>

00:00:32.810 --> 00:00:32.820 align:start position:0%
two sections I'm going to talk about
 

00:00:32.820 --> 00:00:35.420 align:start position:0%
two sections I'm going to talk about
types<00:00:33.300><c> I'm</c><00:00:33.660><c> going</c><00:00:34.290><c> to</c><00:00:34.350><c> talk</c><00:00:34.500><c> about</c><00:00:34.530><c> primitive</c>

00:00:35.420 --> 00:00:35.430 align:start position:0%
types I'm going to talk about primitive
 

00:00:35.430 --> 00:00:38.119 align:start position:0%
types I'm going to talk about primitive
and<00:00:35.880><c> non</c><00:00:36.239><c> primitive</c><00:00:36.480><c> types</c><00:00:36.920><c> now</c><00:00:37.920><c> at</c><00:00:38.040><c> this</c>

00:00:38.119 --> 00:00:38.129 align:start position:0%
and non primitive types now at this
 

00:00:38.129 --> 00:00:40.280 align:start position:0%
and non primitive types now at this
point<00:00:38.340><c> you</c><00:00:38.730><c> still</c><00:00:38.790><c> cannot</c><00:00:39.270><c> write</c><00:00:39.480><c> any</c><00:00:39.719><c> c-sharp</c>

00:00:40.280 --> 00:00:40.290 align:start position:0%
point you still cannot write any c-sharp
 

00:00:40.290 --> 00:00:42.650 align:start position:0%
point you still cannot write any c-sharp
programs<00:00:40.770><c> but</c><00:00:41.430><c> I</c><00:00:41.460><c> have</c><00:00:41.610><c> designed</c><00:00:41.940><c> a</c><00:00:42.120><c> number</c><00:00:42.480><c> of</c>

00:00:42.650 --> 00:00:42.660 align:start position:0%
programs but I have designed a number of
 

00:00:42.660 --> 00:00:44.810 align:start position:0%
programs but I have designed a number of
quizzes<00:00:43.200><c> to</c><00:00:43.590><c> help</c><00:00:43.620><c> you</c><00:00:43.920><c> reinforce</c><00:00:44.190><c> what</c>

00:00:44.810 --> 00:00:44.820 align:start position:0%
quizzes to help you reinforce what
 

00:00:44.820 --> 00:00:46.910 align:start position:0%
quizzes to help you reinforce what
you're<00:00:44.940><c> going</c><00:00:45.059><c> to</c><00:00:45.090><c> learn</c><00:00:45.289><c> then</c><00:00:46.289><c> from</c><00:00:46.530><c> Section</c>

00:00:46.910 --> 00:00:46.920 align:start position:0%
you're going to learn then from Section
 

00:00:46.920 --> 00:00:49.160 align:start position:0%
you're going to learn then from Section
four<00:00:47.219><c> where</c><00:00:47.730><c> I</c><00:00:47.760><c> talk</c><00:00:48.149><c> about</c><00:00:48.180><c> control</c><00:00:48.960><c> flow</c>

00:00:49.160 --> 00:00:49.170 align:start position:0%
four where I talk about control flow
 

00:00:49.170 --> 00:00:51.170 align:start position:0%
four where I talk about control flow
you're<00:00:49.770><c> going</c><00:00:49.950><c> to</c><00:00:50.010><c> start</c><00:00:50.219><c> writing</c><00:00:50.489><c> simple</c>

00:00:51.170 --> 00:00:51.180 align:start position:0%
you're going to start writing simple
 

00:00:51.180 --> 00:00:53.360 align:start position:0%
you're going to start writing simple
sous-chef<00:00:51.539><c> programs</c><00:00:51.989><c> and</c><00:00:52.230><c> from</c><00:00:52.920><c> that</c><00:00:53.070><c> section</c>

00:00:53.360 --> 00:00:53.370 align:start position:0%
sous-chef programs and from that section
 

00:00:53.370 --> 00:00:55.400 align:start position:0%
sous-chef programs and from that section
onwards<00:00:53.879><c> in</c><00:00:54.300><c> every</c><00:00:54.600><c> section</c><00:00:54.809><c> you're</c><00:00:55.199><c> going</c><00:00:55.350><c> to</c>

00:00:55.400 --> 00:00:55.410 align:start position:0%
onwards in every section you're going to
 

00:00:55.410 --> 00:00:57.110 align:start position:0%
onwards in every section you're going to
learn<00:00:55.530><c> something</c><00:00:56.070><c> new</c><00:00:56.219><c> about</c><00:00:56.370><c> c-sharp</c><00:00:57.000><c> and</c>

00:00:57.110 --> 00:00:57.120 align:start position:0%
learn something new about c-sharp and
 

00:00:57.120 --> 00:00:59.270 align:start position:0%
learn something new about c-sharp and
you're<00:00:57.960><c> going</c><00:00:58.079><c> to</c><00:00:58.140><c> write</c><00:00:58.320><c> more</c><00:00:58.770><c> interesting</c>

00:00:59.270 --> 00:00:59.280 align:start position:0%
you're going to write more interesting
 

00:00:59.280 --> 00:01:01.400 align:start position:0%
you're going to write more interesting
programs<00:00:59.699><c> and</c><00:00:59.910><c> finally</c><00:01:00.870><c> I'm</c><00:01:01.079><c> going</c><00:01:01.320><c> to</c>

00:01:01.400 --> 00:01:01.410 align:start position:0%
programs and finally I'm going to
 

00:01:01.410 --> 00:01:03.410 align:start position:0%
programs and finally I'm going to
conclude<00:01:02.010><c> this</c><00:01:02.129><c> course</c><00:01:02.430><c> with</c><00:01:02.820><c> a</c><00:01:02.850><c> section</c><00:01:03.300><c> on</c>

00:01:03.410 --> 00:01:03.420 align:start position:0%
conclude this course with a section on
 

00:01:03.420 --> 00:01:05.750 align:start position:0%
conclude this course with a section on
debugging<00:01:03.960><c> so</c><00:01:04.949><c> I'm</c><00:01:05.040><c> going</c><00:01:05.220><c> to</c><00:01:05.280><c> show</c><00:01:05.430><c> you</c><00:01:05.489><c> some</c>

00:01:05.750 --> 00:01:05.760 align:start position:0%
debugging so I'm going to show you some
 

00:01:05.760 --> 00:01:07.700 align:start position:0%
debugging so I'm going to show you some
of<00:01:05.880><c> the</c><00:01:05.970><c> tools</c><00:01:06.270><c> we</c><00:01:06.450><c> have</c><00:01:06.479><c> so</c><00:01:07.350><c> when</c><00:01:07.500><c> you</c><00:01:07.560><c> have</c>

00:01:07.700 --> 00:01:07.710 align:start position:0%
of the tools we have so when you have
 

00:01:07.710 --> 00:01:09.649 align:start position:0%
of the tools we have so when you have
bugs<00:01:07.979><c> in</c><00:01:08.100><c> your</c><00:01:08.159><c> code</c><00:01:08.310><c> you</c><00:01:08.729><c> know</c><00:01:09.090><c> how</c><00:01:09.299><c> to</c><00:01:09.360><c> find</c>

00:01:09.649 --> 00:01:09.659 align:start position:0%
bugs in your code you know how to find
 

00:01:09.659 --> 00:01:12.080 align:start position:0%
bugs in your code you know how to find
them<00:01:09.840><c> and</c><00:01:10.049><c> get</c><00:01:10.320><c> rid</c><00:01:10.380><c> of</c><00:01:10.590><c> them</c><00:01:10.770><c> I'm</c><00:01:11.670><c> also</c><00:01:11.909><c> going</c>

00:01:12.080 --> 00:01:12.090 align:start position:0%
them and get rid of them I'm also going
 

00:01:12.090 --> 00:01:13.310 align:start position:0%
them and get rid of them I'm also going
to<00:01:12.150><c> talk</c><00:01:12.330><c> about</c><00:01:12.450><c> some</c><00:01:12.720><c> good</c><00:01:12.930><c> program</c>

00:01:13.310 --> 00:01:13.320 align:start position:0%
to talk about some good program
 

00:01:13.320 --> 00:01:15.649 align:start position:0%
to talk about some good program
practices<00:01:13.950><c> that</c><00:01:14.340><c> help</c><00:01:14.580><c> you</c><00:01:14.700><c> write</c><00:01:14.880><c> better</c><00:01:15.090><c> and</c>

00:01:15.649 --> 00:01:15.659 align:start position:0%
practices that help you write better and
 

00:01:15.659 --> 00:01:18.170 align:start position:0%
practices that help you write better and
more<00:01:16.290><c> reliable</c><00:01:16.770><c> code</c><00:01:17.009><c> so</c><00:01:17.729><c> we</c><00:01:17.850><c> have</c><00:01:17.970><c> a</c><00:01:18.000><c> lot</c><00:01:18.150><c> to</c>

00:01:18.170 --> 00:01:18.180 align:start position:0%
more reliable code so we have a lot to
 

00:01:18.180 --> 00:01:22.550 align:start position:0%
more reliable code so we have a lot to
cover<00:01:18.420><c> and</c><00:01:18.750><c> let's</c><00:01:19.200><c> get</c><00:01:19.320><c> started</c><00:01:21.229><c> okay</c><00:01:22.229><c> so</c><00:01:22.259><c> this</c>

00:01:22.550 --> 00:01:22.560 align:start position:0%
cover and let's get started okay so this
 

00:01:22.560 --> 00:01:24.230 align:start position:0%
cover and let's get started okay so this
is<00:01:22.710><c> the</c><00:01:22.860><c> very</c><00:01:23.130><c> first</c><00:01:23.340><c> section</c><00:01:23.640><c> of</c><00:01:23.909><c> this</c><00:01:24.030><c> course</c>

00:01:24.230 --> 00:01:24.240 align:start position:0%
is the very first section of this course
 

00:01:24.240 --> 00:01:26.870 align:start position:0%
is the very first section of this course
in<00:01:24.540><c> this</c><00:01:25.470><c> section</c><00:01:25.860><c> I'm</c><00:01:26.009><c> going</c><00:01:26.280><c> to</c><00:01:26.340><c> start</c><00:01:26.640><c> by</c>

00:01:26.870 --> 00:01:26.880 align:start position:0%
in this section I'm going to start by
 

00:01:26.880 --> 00:01:29.200 align:start position:0%
in this section I'm going to start by
teaching<00:01:27.210><c> you</c><00:01:27.450><c> the</c><00:01:27.810><c> very</c><00:01:28.140><c> basics</c><00:01:28.650><c> of</c><00:01:28.740><c> c-sharp</c>

00:01:29.200 --> 00:01:29.210 align:start position:0%
teaching you the very basics of c-sharp
 

00:01:29.210 --> 00:01:31.249 align:start position:0%
teaching you the very basics of c-sharp
one<00:01:30.210><c> of</c><00:01:30.299><c> the</c><00:01:30.390><c> questions</c><00:01:30.780><c> that</c><00:01:30.869><c> a</c><00:01:31.020><c> lot</c><00:01:31.229><c> of</c>

00:01:31.249 --> 00:01:31.259 align:start position:0%
one of the questions that a lot of
 

00:01:31.259 --> 00:01:33.080 align:start position:0%
one of the questions that a lot of
beginners<00:01:31.710><c> ask</c><00:01:31.979><c> is</c><00:01:32.220><c> what</c><00:01:32.670><c> is</c><00:01:32.790><c> the</c><00:01:32.909><c> difference</c>

00:01:33.080 --> 00:01:33.090 align:start position:0%
beginners ask is what is the difference
 

00:01:33.090 --> 00:01:35.660 align:start position:0%
beginners ask is what is the difference
between<00:01:33.360><c> c-sharp</c><00:01:34.020><c> and</c><00:01:34.259><c> net</c><00:01:34.710><c> so</c><00:01:35.369><c> that's</c><00:01:35.579><c> the</c>

00:01:35.660 --> 00:01:35.670 align:start position:0%
between c-sharp and net so that's the
 

00:01:35.670 --> 00:01:37.090 align:start position:0%
between c-sharp and net so that's the
first<00:01:35.880><c> thing</c><00:01:35.909><c> I'm</c><00:01:36.090><c> going</c><00:01:36.210><c> to</c><00:01:36.270><c> answer</c><00:01:36.420><c> here</c>

00:01:37.090 --> 00:01:37.100 align:start position:0%
first thing I'm going to answer here
 

00:01:37.100 --> 00:01:39.890 align:start position:0%
first thing I'm going to answer here
next<00:01:38.100><c> I'm</c><00:01:38.220><c> going</c><00:01:38.369><c> to</c><00:01:38.460><c> talk</c><00:01:38.610><c> about</c><00:01:38.759><c> CLR</c><00:01:39.689><c> or</c>

00:01:39.890 --> 00:01:39.900 align:start position:0%
next I'm going to talk about CLR or
 

00:01:39.900 --> 00:01:42.170 align:start position:0%
next I'm going to talk about CLR or
common<00:01:40.590><c> language</c><00:01:40.979><c> runtime</c><00:01:41.220><c> which</c><00:01:41.909><c> is</c><00:01:42.060><c> the</c>

00:01:42.170 --> 00:01:42.180 align:start position:0%
common language runtime which is the
 

00:01:42.180 --> 00:01:43.850 align:start position:0%
common language runtime which is the
runtime<00:01:42.450><c> environment</c><00:01:42.600><c> for</c><00:01:43.290><c> dotnet</c>

00:01:43.850 --> 00:01:43.860 align:start position:0%
runtime environment for dotnet
 

00:01:43.860 --> 00:01:47.060 align:start position:0%
runtime environment for dotnet
applications<00:01:45.350><c> next</c><00:01:46.350><c> I'm</c><00:01:46.500><c> going</c><00:01:46.829><c> to</c><00:01:46.920><c> talk</c>

00:01:47.060 --> 00:01:47.070 align:start position:0%
applications next I'm going to talk
 

00:01:47.070 --> 00:01:48.889 align:start position:0%
applications next I'm going to talk
about<00:01:47.100><c> the</c><00:01:47.729><c> architecture</c><00:01:47.909><c> of</c><00:01:48.390><c> dotnet</c>

00:01:48.889 --> 00:01:48.899 align:start position:0%
about the architecture of dotnet
 

00:01:48.899 --> 00:01:51.230 align:start position:0%
about the architecture of dotnet
applications<00:01:49.530><c> and</c><00:01:50.490><c> as</c><00:01:50.610><c> part</c><00:01:50.850><c> of</c><00:01:50.909><c> this</c><00:01:51.060><c> I'm</c>

00:01:51.230 --> 00:01:51.240 align:start position:0%
applications and as part of this I'm
 

00:01:51.240 --> 00:01:53.450 align:start position:0%
applications and as part of this I'm
going<00:01:51.630><c> to</c><00:01:51.689><c> introduce</c><00:01:51.899><c> you</c><00:01:52.110><c> to</c><00:01:52.439><c> concepts</c><00:01:53.159><c> such</c>

00:01:53.450 --> 00:01:53.460 align:start position:0%
going to introduce you to concepts such
 

00:01:53.460 --> 00:01:57.130 align:start position:0%
going to introduce you to concepts such
as<00:01:53.490><c> classes</c><00:01:54.380><c> namespaces</c><00:01:55.380><c> and</c><00:01:55.560><c> assemblies</c><00:01:56.280><c> and</c>

00:01:57.130 --> 00:01:57.140 align:start position:0%
as classes namespaces and assemblies and
 

00:01:57.140 --> 00:01:59.300 align:start position:0%
as classes namespaces and assemblies and
finally<00:01:58.140><c> I</c><00:01:58.320><c> will</c><00:01:58.710><c> show</c><00:01:58.860><c> you</c><00:01:58.920><c> all</c><00:01:59.159><c> these</c>

00:01:59.300 --> 00:01:59.310 align:start position:0%
finally I will show you all these
 

00:01:59.310 --> 00:02:01.520 align:start position:0%
finally I will show you all these
concepts<00:01:59.759><c> in</c><00:01:59.880><c> action</c><00:02:00.240><c> I'm</c><00:02:01.170><c> going</c><00:02:01.469><c> to</c>

00:02:01.520 --> 00:02:01.530 align:start position:0%
concepts in action I'm going to
 

00:02:01.530 --> 00:02:03.230 align:start position:0%
concepts in action I'm going to
introduce<00:02:01.740><c> you</c><00:02:02.070><c> to</c><00:02:02.100><c> the</c><00:02:02.460><c> very</c><00:02:02.670><c> basics</c><00:02:03.090><c> of</c>

00:02:03.230 --> 00:02:03.240 align:start position:0%
introduce you to the very basics of
 

00:02:03.240 --> 00:02:05.120 align:start position:0%
introduce you to the very basics of
visual<00:02:03.780><c> studio</c><00:02:04.140><c> and</c><00:02:04.320><c> write</c><00:02:04.740><c> a</c><00:02:04.770><c> very</c><00:02:05.070><c> simple</c>

00:02:05.120 --> 00:02:05.130 align:start position:0%
visual studio and write a very simple
 

00:02:05.130 --> 00:02:07.310 align:start position:0%
visual studio and write a very simple
c-sharp<00:02:05.759><c> application</c><00:02:06.360><c> so</c><00:02:06.869><c> you</c><00:02:06.899><c> can</c><00:02:07.110><c> see</c>

00:02:07.310 --> 00:02:07.320 align:start position:0%
c-sharp application so you can see
 

00:02:07.320 --> 00:02:11.380 align:start position:0%
c-sharp application so you can see
classes<00:02:08.330><c> namespaces</c><00:02:09.330><c> and</c><00:02:09.420><c> methods</c><00:02:10.170><c> in</c><00:02:10.349><c> action</c>

00:02:11.380 --> 00:02:11.390 align:start position:0%
classes namespaces and methods in action
 

00:02:11.390 --> 00:02:12.790 align:start position:0%
classes namespaces and methods in action
I<00:02:11.420><c> hope</c><00:02:11.870><c> you</c><00:02:11.990><c> enjoyed</c><00:02:12.200><c> this</c><00:02:12.290><c> section</c><00:02:12.650><c> and</c>

00:02:12.790 --> 00:02:12.800 align:start position:0%
I hope you enjoyed this section and
 

00:02:12.800 --> 00:02:15.780 align:start position:0%
I hope you enjoyed this section and
let's<00:02:13.280><c> get</c><00:02:13.400><c> started</c>

00:02:15.780 --> 00:02:15.790 align:start position:0%
let's get started
 

00:02:15.790 --> 00:02:17.910 align:start position:0%
let's get started
okay<00:02:16.269><c> what</c><00:02:16.510><c> is</c><00:02:16.689><c> darknet</c><00:02:17.170><c> framework</c><00:02:17.590><c> and</c><00:02:17.799><c> how</c>

00:02:17.910 --> 00:02:17.920 align:start position:0%
okay what is darknet framework and how
 

00:02:17.920 --> 00:02:20.069 align:start position:0%
okay what is darknet framework and how
is<00:02:18.069><c> it</c><00:02:18.159><c> different</c><00:02:18.280><c> from</c><00:02:18.549><c> c-sharp</c><00:02:19.120><c> some</c>

00:02:20.069 --> 00:02:20.079 align:start position:0%
is it different from c-sharp some
 

00:02:20.079 --> 00:02:21.929 align:start position:0%
is it different from c-sharp some
developers<00:02:20.709><c> who</c><00:02:20.890><c> are</c><00:02:20.920><c> absolutely</c><00:02:21.610><c> new</c><00:02:21.760><c> to</c>

00:02:21.929 --> 00:02:21.939 align:start position:0%
developers who are absolutely new to
 

00:02:21.939 --> 00:02:23.580 align:start position:0%
developers who are absolutely new to
c-sharp<00:02:22.150><c> don't</c><00:02:22.599><c> know</c><00:02:22.720><c> the</c><00:02:22.840><c> difference</c><00:02:23.260><c> so</c><00:02:23.439><c> in</c>

00:02:23.580 --> 00:02:23.590 align:start position:0%
c-sharp don't know the difference so in
 

00:02:23.590 --> 00:02:24.780 align:start position:0%
c-sharp don't know the difference so in
this<00:02:23.680><c> lecture</c><00:02:23.980><c> I'm</c><00:02:24.069><c> going</c><00:02:24.129><c> to</c><00:02:24.280><c> talk</c><00:02:24.340><c> a</c><00:02:24.459><c> little</c>

00:02:24.780 --> 00:02:24.790 align:start position:0%
this lecture I'm going to talk a little
 

00:02:24.790 --> 00:02:26.839 align:start position:0%
this lecture I'm going to talk a little
bit<00:02:24.970><c> about</c><00:02:25.000><c> C</c><00:02:25.420><c> sharp</c><00:02:25.659><c> and</c><00:02:25.810><c> dotnet</c><00:02:26.290><c> framework</c>

00:02:26.839 --> 00:02:26.849 align:start position:0%
bit about C sharp and dotnet framework
 

00:02:26.849 --> 00:02:30.390 align:start position:0%
bit about C sharp and dotnet framework
c-sharp<00:02:27.849><c> is</c><00:02:28.000><c> a</c><00:02:28.329><c> programming</c><00:02:28.930><c> language</c><00:02:29.400><c> dotnet</c>

00:02:30.390 --> 00:02:30.400 align:start position:0%
c-sharp is a programming language dotnet
 

00:02:30.400 --> 00:02:33.000 align:start position:0%
c-sharp is a programming language dotnet
is<00:02:30.640><c> a</c><00:02:30.700><c> framework</c><00:02:31.390><c> for</c><00:02:31.750><c> building</c><00:02:32.010><c> applications</c>

00:02:33.000 --> 00:02:33.010 align:start position:0%
is a framework for building applications
 

00:02:33.010 --> 00:02:35.910 align:start position:0%
is a framework for building applications
on<00:02:33.159><c> the</c><00:02:33.489><c> windows</c><00:02:34.140><c> dotnet</c><00:02:35.140><c> framework</c><00:02:35.260><c> is</c><00:02:35.709><c> not</c>

00:02:35.910 --> 00:02:35.920 align:start position:0%
on the windows dotnet framework is not
 

00:02:35.920 --> 00:02:38.100 align:start position:0%
on the windows dotnet framework is not
limited<00:02:36.340><c> to</c><00:02:36.370><c> c-sharp</c><00:02:36.720><c> there</c><00:02:37.720><c> are</c><00:02:37.810><c> different</c>

00:02:38.100 --> 00:02:38.110 align:start position:0%
limited to c-sharp there are different
 

00:02:38.110 --> 00:02:40.050 align:start position:0%
limited to c-sharp there are different
languages<00:02:38.590><c> that</c><00:02:38.739><c> can</c><00:02:38.920><c> target</c><00:02:39.190><c> that</c><00:02:39.489><c> framework</c>

00:02:40.050 --> 00:02:40.060 align:start position:0%
languages that can target that framework
 

00:02:40.060 --> 00:02:41.610 align:start position:0%
languages that can target that framework
and<00:02:40.239><c> build</c><00:02:40.420><c> applications</c><00:02:41.140><c> using</c><00:02:41.379><c> that</c>

00:02:41.610 --> 00:02:41.620 align:start position:0%
and build applications using that
 

00:02:41.620 --> 00:02:46.080 align:start position:0%
and build applications using that
framework<00:02:42.299><c> examples</c><00:02:43.299><c> are</c><00:02:43.450><c> F</c><00:02:43.659><c> sharp</c><00:02:43.989><c> or</c><00:02:44.140><c> vb.net</c>

00:02:46.080 --> 00:02:46.090 align:start position:0%
framework examples are F sharp or vb.net
 

00:02:46.090 --> 00:02:48.059 align:start position:0%
framework examples are F sharp or vb.net
okay<00:02:46.480><c> now</c><00:02:46.630><c> but</c><00:02:46.810><c> what</c><00:02:47.020><c> exactly</c><00:02:47.170><c> is</c><00:02:47.650><c> dotnet</c>

00:02:48.059 --> 00:02:48.069 align:start position:0%
okay now but what exactly is dotnet
 

00:02:48.069 --> 00:02:50.760 align:start position:0%
okay now but what exactly is dotnet
framework<00:02:48.599><c> Dartmouth</c><00:02:49.599><c> framework</c><00:02:49.959><c> consists</c>

00:02:50.760 --> 00:02:50.770 align:start position:0%
framework Dartmouth framework consists
 

00:02:50.770 --> 00:02:54.059 align:start position:0%
framework Dartmouth framework consists
of<00:02:50.830><c> two</c><00:02:51.310><c> components</c><00:02:51.970><c> one</c><00:02:52.630><c> is</c><00:02:52.660><c> called</c><00:02:53.080><c> CLR</c><00:02:53.830><c> or</c>

00:02:54.059 --> 00:02:54.069 align:start position:0%
of two components one is called CLR or
 

00:02:54.069 --> 00:02:56.880 align:start position:0%
of two components one is called CLR or
common<00:02:54.970><c> language</c><00:02:55.360><c> runtime</c><00:02:55.599><c> and</c><00:02:56.050><c> the</c><00:02:56.500><c> other</c><00:02:56.590><c> is</c>

00:02:56.880 --> 00:02:56.890 align:start position:0%
common language runtime and the other is
 

00:02:56.890 --> 00:02:58.530 align:start position:0%
common language runtime and the other is
a<00:02:56.950><c> class</c><00:02:57.370><c> library</c><00:02:57.819><c> for</c><00:02:58.180><c> building</c>

00:02:58.530 --> 00:02:58.540 align:start position:0%
a class library for building
 

00:02:58.540 --> 00:03:00.960 align:start position:0%
a class library for building
applications<00:02:59.170><c> in</c><00:02:59.349><c> the</c><00:03:00.190><c> next</c><00:03:00.459><c> lecture</c><00:03:00.760><c> we'll</c>

00:03:00.960 --> 00:03:00.970 align:start position:0%
applications in the next lecture we'll
 

00:03:00.970 --> 00:03:06.390 align:start position:0%
applications in the next lecture we'll
talk<00:03:01.209><c> about</c><00:03:01.360><c> CLR</c><00:03:01.989><c> in</c><00:03:02.200><c> more</c><00:03:02.440><c> detail</c>

00:03:06.390 --> 00:03:06.400 align:start position:0%
 
 

00:03:06.400 --> 00:03:09.089 align:start position:0%
 
okay<00:03:07.120><c> before</c><00:03:07.330><c> we</c><00:03:07.599><c> understand</c><00:03:08.080><c> what</c><00:03:08.260><c> CLR</c><00:03:08.890><c> is</c>

00:03:09.089 --> 00:03:09.099 align:start position:0%
okay before we understand what CLR is
 

00:03:09.099 --> 00:03:11.430 align:start position:0%
okay before we understand what CLR is
and<00:03:09.459><c> why</c><00:03:09.760><c> we</c><00:03:09.940><c> need</c><00:03:09.970><c> it</c><00:03:10.150><c> let</c><00:03:10.959><c> me</c><00:03:10.989><c> explain</c><00:03:11.110><c> a</c>

00:03:11.430 --> 00:03:11.440 align:start position:0%
and why we need it let me explain a
 

00:03:11.440 --> 00:03:13.430 align:start position:0%
and why we need it let me explain a
little<00:03:11.590><c> bit</c><00:03:11.890><c> about</c><00:03:12.159><c> the</c><00:03:12.370><c> history</c><00:03:12.700><c> of</c><00:03:12.790><c> c-sharp</c>

00:03:13.430 --> 00:03:13.440 align:start position:0%
little bit about the history of c-sharp
 

00:03:13.440 --> 00:03:16.470 align:start position:0%
little bit about the history of c-sharp
before<00:03:14.440><c> c-sharp</c><00:03:14.830><c> we</c><00:03:15.340><c> had</c><00:03:15.519><c> two</c><00:03:15.730><c> languages</c><00:03:16.330><c> in</c>

00:03:16.470 --> 00:03:16.480 align:start position:0%
before c-sharp we had two languages in
 

00:03:16.480 --> 00:03:21.030 align:start position:0%
before c-sharp we had two languages in
the<00:03:16.569><c> C</c><00:03:16.750><c> family</c><00:03:17.230><c> the</c><00:03:18.010><c> C</c><00:03:18.220><c> language</c><00:03:18.400><c> and</c><00:03:18.870><c> C++</c><00:03:20.040><c> with</c>

00:03:21.030 --> 00:03:21.040 align:start position:0%
the C family the C language and C++ with
 

00:03:21.040 --> 00:03:22.680 align:start position:0%
the C family the C language and C++ with
either<00:03:21.190><c> of</c><00:03:21.400><c> these</c><00:03:21.519><c> languages</c><00:03:22.090><c> when</c><00:03:22.540><c> we</c>

00:03:22.680 --> 00:03:22.690 align:start position:0%
either of these languages when we
 

00:03:22.690 --> 00:03:25.100 align:start position:0%
either of these languages when we
compiled<00:03:23.200><c> our</c><00:03:23.319><c> application</c><00:03:23.980><c> the</c><00:03:24.519><c> compiler</c>

00:03:25.100 --> 00:03:25.110 align:start position:0%
compiled our application the compiler
 

00:03:25.110 --> 00:03:28.229 align:start position:0%
compiled our application the compiler
translated<00:03:26.110><c> our</c><00:03:26.230><c> code</c><00:03:26.500><c> into</c><00:03:27.280><c> the</c><00:03:27.579><c> native</c><00:03:27.819><c> code</c>

00:03:28.229 --> 00:03:28.239 align:start position:0%
translated our code into the native code
 

00:03:28.239 --> 00:03:30.630 align:start position:0%
translated our code into the native code
for<00:03:28.750><c> the</c><00:03:28.810><c> machine</c><00:03:29.230><c> on</c><00:03:29.440><c> which</c><00:03:29.500><c> it</c><00:03:30.099><c> was</c><00:03:30.340><c> running</c>

00:03:30.630 --> 00:03:30.640 align:start position:0%
for the machine on which it was running
 

00:03:30.640 --> 00:03:33.740 align:start position:0%
for the machine on which it was running
which<00:03:31.450><c> means</c><00:03:31.720><c> if</c><00:03:31.959><c> I</c><00:03:32.319><c> wrote</c><00:03:32.739><c> an</c><00:03:32.890><c> application</c><00:03:33.489><c> in</c>

00:03:33.740 --> 00:03:33.750 align:start position:0%
which means if I wrote an application in
 

00:03:33.750 --> 00:03:38.250 align:start position:0%
which means if I wrote an application in
C++<00:03:34.750><c> on</c><00:03:34.989><c> a</c><00:03:35.709><c> Windows</c><00:03:36.220><c> machine</c><00:03:36.250><c> with</c><00:03:37.260><c> 8086</c>

00:03:38.250 --> 00:03:38.260 align:start position:0%
C++ on a Windows machine with 8086
 

00:03:38.260 --> 00:03:40.470 align:start position:0%
C++ on a Windows machine with 8086
processor<00:03:38.459><c> architecture</c><00:03:39.459><c> the</c><00:03:40.000><c> compiler</c>

00:03:40.470 --> 00:03:40.480 align:start position:0%
processor architecture the compiler
 

00:03:40.480 --> 00:03:43.229 align:start position:0%
processor architecture the compiler
would<00:03:40.959><c> translate</c><00:03:41.440><c> my</c><00:03:41.680><c> code</c><00:03:41.950><c> into</c><00:03:42.790><c> the</c><00:03:43.030><c> native</c>

00:03:43.229 --> 00:03:43.239 align:start position:0%
would translate my code into the native
 

00:03:43.239 --> 00:03:45.750 align:start position:0%
would translate my code into the native
code<00:03:43.629><c> for</c><00:03:44.200><c> that</c><00:03:44.410><c> machine</c><00:03:44.620><c> that</c><00:03:45.250><c> is</c><00:03:45.370><c> a</c><00:03:45.400><c> Windows</c>

00:03:45.750 --> 00:03:45.760 align:start position:0%
code for that machine that is a Windows
 

00:03:45.760 --> 00:03:49.080 align:start position:0%
code for that machine that is a Windows
machine<00:03:45.910><c> with</c><00:03:46.359><c> an</c><00:03:46.540><c> 8086</c><00:03:47.319><c> processor</c><00:03:48.030><c> now</c><00:03:49.030><c> we</c>

00:03:49.080 --> 00:03:49.090 align:start position:0%
machine with an 8086 processor now we
 

00:03:49.090 --> 00:03:50.880 align:start position:0%
machine with an 8086 processor now we
only<00:03:49.329><c> have</c><00:03:49.450><c> different</c><00:03:49.900><c> hardware's</c><00:03:50.290><c> and</c><00:03:50.500><c> we</c>

00:03:50.880 --> 00:03:50.890 align:start position:0%
only have different hardware's and we
 

00:03:50.890 --> 00:03:54.000 align:start position:0%
only have different hardware's and we
have<00:03:51.040><c> different</c><00:03:51.220><c> operating</c><00:03:51.790><c> systems</c><00:03:52.260><c> so</c><00:03:53.260><c> if</c><00:03:53.799><c> I</c>

00:03:54.000 --> 00:03:54.010 align:start position:0%
have different operating systems so if I
 

00:03:54.010 --> 00:03:55.920 align:start position:0%
have different operating systems so if I
took<00:03:54.069><c> the</c><00:03:54.430><c> application</c><00:03:55.090><c> that</c><00:03:55.329><c> compile</c><00:03:55.780><c> the</c>

00:03:55.920 --> 00:03:55.930 align:start position:0%
took the application that compile the
 

00:03:55.930 --> 00:03:57.990 align:start position:0%
took the application that compile the
application<00:03:56.470><c> on</c><00:03:56.620><c> the</c><00:03:57.280><c> computer</c><00:03:57.790><c> with</c><00:03:57.970><c> a</c>

00:03:57.990 --> 00:03:58.000 align:start position:0%
application on the computer with a
 

00:03:58.000 --> 00:04:00.089 align:start position:0%
application on the computer with a
different<00:03:58.420><c> architecture</c><00:03:58.650><c> that</c><00:03:59.650><c> would</c><00:03:59.920><c> not</c>

00:04:00.089 --> 00:04:00.099 align:start position:0%
different architecture that would not
 

00:04:00.099 --> 00:04:03.660 align:start position:0%
different architecture that would not
run<00:04:00.510><c> so</c><00:04:01.510><c> when</c><00:04:01.750><c> Microsoft</c><00:04:02.260><c> was</c><00:04:02.590><c> designing</c><00:04:03.010><c> the</c>

00:04:03.660 --> 00:04:03.670 align:start position:0%
run so when Microsoft was designing the
 

00:04:03.670 --> 00:04:04.890 align:start position:0%
run so when Microsoft was designing the
c-sharp<00:04:04.030><c> language</c><00:04:04.450><c> and</c><00:04:04.629><c> the</c><00:04:04.690><c> dotnet</c>

00:04:04.890 --> 00:04:04.900 align:start position:0%
c-sharp language and the dotnet
 

00:04:04.900 --> 00:04:07.110 align:start position:0%
c-sharp language and the dotnet
framework<00:04:05.170><c> they</c><00:04:05.890><c> came</c><00:04:06.129><c> up</c><00:04:06.280><c> with</c><00:04:06.640><c> an</c><00:04:06.760><c> idea</c><00:04:06.849><c> that</c>

00:04:07.110 --> 00:04:07.120 align:start position:0%
framework they came up with an idea that
 

00:04:07.120 --> 00:04:09.210 align:start position:0%
framework they came up with an idea that
they<00:04:07.390><c> borrowed</c><00:04:07.659><c> from</c><00:04:07.930><c> the</c><00:04:08.140><c> Java</c><00:04:08.409><c> community</c><00:04:08.650><c> in</c>

00:04:09.210 --> 00:04:09.220 align:start position:0%
they borrowed from the Java community in
 

00:04:09.220 --> 00:04:12.420 align:start position:0%
they borrowed from the Java community in
Java<00:04:10.150><c> when</c><00:04:10.750><c> you</c><00:04:10.810><c> compile</c><00:04:11.230><c> your</c><00:04:11.349><c> code</c><00:04:11.410><c> it's</c><00:04:11.950><c> not</c>

00:04:12.420 --> 00:04:12.430 align:start position:0%
Java when you compile your code it's not
 

00:04:12.430 --> 00:04:14.460 align:start position:0%
Java when you compile your code it's not
translated<00:04:13.150><c> directly</c><00:04:13.359><c> into</c><00:04:14.049><c> the</c><00:04:14.139><c> machine</c>

00:04:14.460 --> 00:04:14.470 align:start position:0%
translated directly into the machine
 

00:04:14.470 --> 00:04:16.949 align:start position:0%
translated directly into the machine
code<00:04:14.700><c> it's</c><00:04:15.700><c> translated</c><00:04:16.329><c> into</c><00:04:16.539><c> an</c>

00:04:16.949 --> 00:04:16.959 align:start position:0%
code it's translated into an
 

00:04:16.959 --> 00:04:18.599 align:start position:0%
code it's translated into an
intermediate<00:04:17.200><c> language</c><00:04:17.530><c> called</c><00:04:18.039><c> bytecode</c>

00:04:18.599 --> 00:04:18.609 align:start position:0%
intermediate language called bytecode
 

00:04:18.609 --> 00:04:20.909 align:start position:0%
intermediate language called bytecode
and<00:04:18.760><c> we</c><00:04:19.570><c> have</c><00:04:19.690><c> the</c><00:04:19.810><c> exact</c><00:04:20.079><c> same</c><00:04:20.109><c> concept</c><00:04:20.560><c> in</c>

00:04:20.909 --> 00:04:20.919 align:start position:0%
and we have the exact same concept in
 

00:04:20.919 --> 00:04:23.640 align:start position:0%
and we have the exact same concept in
c-sharp<00:04:21.220><c> so</c><00:04:22.180><c> when</c><00:04:22.750><c> you</c><00:04:22.840><c> compile</c><00:04:23.169><c> your</c><00:04:23.289><c> c-sharp</c>

00:04:23.640 --> 00:04:23.650 align:start position:0%
c-sharp so when you compile your c-sharp
 

00:04:23.650 --> 00:04:27.029 align:start position:0%
c-sharp so when you compile your c-sharp
code<00:04:23.919><c> the</c><00:04:24.610><c> result</c><00:04:25.060><c> is</c><00:04:25.240><c> what</c><00:04:25.750><c> we</c><00:04:25.870><c> call</c><00:04:26.080><c> IL</c><00:04:26.770><c> or</c>

00:04:27.029 --> 00:04:27.039 align:start position:0%
code the result is what we call IL or
 

00:04:27.039 --> 00:04:28.969 align:start position:0%
code the result is what we call IL or
intermediate<00:04:27.729><c> language</c><00:04:27.880><c> code</c><00:04:28.389><c> is</c>

00:04:28.969 --> 00:04:28.979 align:start position:0%
intermediate language code is
 

00:04:28.979 --> 00:04:31.409 align:start position:0%
intermediate language code is
independent<00:04:29.979><c> of</c><00:04:30.099><c> the</c><00:04:30.550><c> computer</c><00:04:31.030><c> on</c><00:04:31.180><c> which</c>

00:04:31.409 --> 00:04:31.419 align:start position:0%
independent of the computer on which
 

00:04:31.419 --> 00:04:33.960 align:start position:0%
independent of the computer on which
it's<00:04:31.690><c> running</c><00:04:32.050><c> now</c><00:04:32.200><c> we</c><00:04:32.950><c> need</c><00:04:33.370><c> something</c><00:04:33.789><c> that</c>

00:04:33.960 --> 00:04:33.970 align:start position:0%
it's running now we need something that
 

00:04:33.970 --> 00:04:37.589 align:start position:0%
it's running now we need something that
would<00:04:34.450><c> translate</c><00:04:35.199><c> that</c><00:04:35.860><c> il</c><00:04:36.580><c> code</c><00:04:36.820><c> into</c><00:04:37.570><c> the</c>

00:04:37.589 --> 00:04:37.599 align:start position:0%
would translate that il code into the
 

00:04:37.599 --> 00:04:39.689 align:start position:0%
would translate that il code into the
native<00:04:38.080><c> code</c><00:04:38.320><c> or</c><00:04:38.710><c> the</c><00:04:38.860><c> machine</c><00:04:39.190><c> that</c><00:04:39.580><c> is</c>

00:04:39.689 --> 00:04:39.699 align:start position:0%
native code or the machine that is
 

00:04:39.699 --> 00:04:41.879 align:start position:0%
native code or the machine that is
running<00:04:39.729><c> the</c><00:04:40.090><c> application</c><00:04:40.210><c> and</c><00:04:40.750><c> that</c><00:04:40.780><c> is</c><00:04:41.680><c> the</c>

00:04:41.879 --> 00:04:41.889 align:start position:0%
running the application and that is the
 

00:04:41.889 --> 00:04:46.080 align:start position:0%
running the application and that is the
job<00:04:42.160><c> of</c><00:04:42.479><c> CLR</c><00:04:43.510><c> or</c><00:04:43.780><c> common</c><00:04:44.410><c> language</c><00:04:44.860><c> runtime</c><00:04:45.099><c> so</c>

00:04:46.080 --> 00:04:46.090 align:start position:0%
job of CLR or common language runtime so
 

00:04:46.090 --> 00:04:48.450 align:start position:0%
job of CLR or common language runtime so
CLR<00:04:46.449><c> is</c><00:04:46.599><c> essentially</c><00:04:47.110><c> an</c><00:04:47.199><c> application</c><00:04:47.770><c> that</c>

00:04:48.450 --> 00:04:48.460 align:start position:0%
CLR is essentially an application that
 

00:04:48.460 --> 00:04:51.320 align:start position:0%
CLR is essentially an application that
is<00:04:48.580><c> sitting</c><00:04:48.760><c> in</c><00:04:48.940><c> the</c><00:04:49.030><c> memory</c><00:04:49.360><c> whose</c><00:04:50.199><c> job</c><00:04:50.560><c> is</c><00:04:50.770><c> to</c>

00:04:51.320 --> 00:04:51.330 align:start position:0%
is sitting in the memory whose job is to
 

00:04:51.330 --> 00:04:54.420 align:start position:0%
is sitting in the memory whose job is to
translate<00:04:52.330><c> the</c><00:04:53.139><c> il</c><00:04:53.380><c> code</c><00:04:53.620><c> into</c><00:04:54.070><c> the</c><00:04:54.099><c> machine</c>

00:04:54.420 --> 00:04:54.430 align:start position:0%
translate the il code into the machine
 

00:04:54.430 --> 00:04:56.120 align:start position:0%
translate the il code into the machine
code<00:04:54.610><c> and</c><00:04:54.729><c> this</c><00:04:55.389><c> process</c><00:04:55.630><c> is</c><00:04:55.810><c> called</c>

00:04:56.120 --> 00:04:56.130 align:start position:0%
code and this process is called
 

00:04:56.130 --> 00:05:00.140 align:start position:0%
code and this process is called
just-in-time<00:04:57.130><c> compilation</c><00:04:57.789><c> or</c><00:04:58.539><c> JIT</c>

00:05:00.140 --> 00:05:00.150 align:start position:0%
just-in-time compilation or JIT
 

00:05:00.150 --> 00:05:02.570 align:start position:0%
just-in-time compilation or JIT
so<00:05:00.720><c> with</c><00:05:00.900><c> this</c><00:05:00.990><c> architecture</c><00:05:01.650><c> you</c><00:05:02.220><c> can</c><00:05:02.250><c> write</c>

00:05:02.570 --> 00:05:02.580 align:start position:0%
so with this architecture you can write
 

00:05:02.580 --> 00:05:04.460 align:start position:0%
so with this architecture you can write
an<00:05:02.729><c> application</c><00:05:02.880><c> in</c><00:05:03.360><c> c-sharp</c><00:05:03.570><c> and</c><00:05:03.960><c> you</c><00:05:04.290><c> don't</c>

00:05:04.460 --> 00:05:04.470 align:start position:0%
an application in c-sharp and you don't
 

00:05:04.470 --> 00:05:06.830 align:start position:0%
an application in c-sharp and you don't
have<00:05:04.620><c> to</c><00:05:04.800><c> worry</c><00:05:05.010><c> about</c><00:05:05.130><c> compiling</c><00:05:05.880><c> that</c><00:05:06.150><c> into</c>

00:05:06.830 --> 00:05:06.840 align:start position:0%
have to worry about compiling that into
 

00:05:06.840 --> 00:05:08.689 align:start position:0%
have to worry about compiling that into
the<00:05:07.199><c> native</c><00:05:07.590><c> code</c><00:05:07.800><c> for</c><00:05:08.070><c> different</c><00:05:08.190><c> machines</c>

00:05:08.689 --> 00:05:08.699 align:start position:0%
the native code for different machines
 

00:05:08.699 --> 00:05:11.960 align:start position:0%
the native code for different machines
as<00:05:08.850><c> long</c><00:05:09.660><c> as</c><00:05:09.810><c> a</c><00:05:09.840><c> machine</c><00:05:10.229><c> has</c><00:05:10.440><c> CLR</c><00:05:11.040><c> that</c><00:05:11.639><c> can</c>

00:05:11.960 --> 00:05:11.970 align:start position:0%
as long as a machine has CLR that can
 

00:05:11.970 --> 00:05:16.760 align:start position:0%
as long as a machine has CLR that can
run<00:05:12.150><c> your</c><00:05:12.300><c> application</c>

00:05:16.760 --> 00:05:16.770 align:start position:0%
 
 

00:05:16.770 --> 00:05:18.690 align:start position:0%
 
okay<00:05:17.770><c> now</c><00:05:17.950><c> let's</c><00:05:18.220><c> learn</c><00:05:18.370><c> about</c><00:05:18.430><c> the</c>

00:05:18.690 --> 00:05:18.700 align:start position:0%
okay now let's learn about the
 

00:05:18.700 --> 00:05:22.800 align:start position:0%
okay now let's learn about the
architecture<00:05:19.450><c> of</c><00:05:19.600><c> dotnet</c><00:05:20.170><c> applications</c><00:05:21.420><c> at</c><00:05:22.420><c> a</c>

00:05:22.800 --> 00:05:22.810 align:start position:0%
architecture of dotnet applications at a
 

00:05:22.810 --> 00:05:24.420 align:start position:0%
architecture of dotnet applications at a
very<00:05:23.080><c> high</c><00:05:23.230><c> level</c><00:05:23.410><c> when</c><00:05:23.920><c> you</c><00:05:24.040><c> build</c><00:05:24.280><c> an</c>

00:05:24.420 --> 00:05:24.430 align:start position:0%
very high level when you build an
 

00:05:24.430 --> 00:05:26.010 align:start position:0%
very high level when you build an
application<00:05:24.550><c> with</c><00:05:25.120><c> c-sharp</c><00:05:25.510><c> your</c>

00:05:26.010 --> 00:05:26.020 align:start position:0%
application with c-sharp your
 

00:05:26.020 --> 00:05:28.320 align:start position:0%
application with c-sharp your
application<00:05:26.620><c> consists</c><00:05:27.310><c> of</c><00:05:27.400><c> building</c><00:05:28.030><c> blocks</c>

00:05:28.320 --> 00:05:28.330 align:start position:0%
application consists of building blocks
 

00:05:28.330 --> 00:05:32.640 align:start position:0%
application consists of building blocks
called<00:05:28.900><c> classes</c><00:05:30.270><c> these</c><00:05:31.270><c> classes</c><00:05:31.810><c> collaborate</c>

00:05:32.640 --> 00:05:32.650 align:start position:0%
called classes these classes collaborate
 

00:05:32.650 --> 00:05:34.560 align:start position:0%
called classes these classes collaborate
with<00:05:32.800><c> each</c><00:05:32.890><c> other</c><00:05:33.070><c> at</c><00:05:33.400><c> runtime</c><00:05:33.670><c> and</c><00:05:34.000><c> as</c><00:05:34.540><c> a</c>

00:05:34.560 --> 00:05:34.570 align:start position:0%
with each other at runtime and as a
 

00:05:34.570 --> 00:05:36.510 align:start position:0%
with each other at runtime and as a
result<00:05:34.960><c> the</c><00:05:35.200><c> application</c><00:05:35.710><c> provides</c><00:05:36.130><c> some</c>

00:05:36.510 --> 00:05:36.520 align:start position:0%
result the application provides some
 

00:05:36.520 --> 00:05:39.890 align:start position:0%
result the application provides some
functionality<00:05:37.830><c> now</c><00:05:38.830><c> what</c><00:05:39.070><c> is</c><00:05:39.190><c> a</c><00:05:39.220><c> class</c><00:05:39.550><c> a</c>

00:05:39.890 --> 00:05:39.900 align:start position:0%
functionality now what is a class a
 

00:05:39.900 --> 00:05:42.930 align:start position:0%
functionality now what is a class a
class<00:05:40.900><c> is</c><00:05:41.260><c> a</c><00:05:41.290><c> container</c><00:05:41.770><c> that</c><00:05:42.070><c> has</c><00:05:42.430><c> some</c><00:05:42.700><c> data</c>

00:05:42.930 --> 00:05:42.940 align:start position:0%
class is a container that has some data
 

00:05:42.940 --> 00:05:45.200 align:start position:0%
class is a container that has some data
which<00:05:43.450><c> is</c><00:05:43.570><c> also</c><00:05:43.750><c> called</c><00:05:44.020><c> attributes</c><00:05:44.260><c> and</c>

00:05:45.200 --> 00:05:45.210 align:start position:0%
which is also called attributes and
 

00:05:45.210 --> 00:05:48.650 align:start position:0%
which is also called attributes and
functions<00:05:46.210><c> which</c><00:05:46.720><c> is</c><00:05:46.840><c> also</c><00:05:46.990><c> called</c><00:05:47.260><c> methods</c>

00:05:48.650 --> 00:05:48.660 align:start position:0%
functions which is also called methods
 

00:05:48.660 --> 00:05:51.990 align:start position:0%
functions which is also called methods
functions<00:05:49.660><c> or</c><00:05:49.810><c> methods</c><00:05:49.840><c> have</c><00:05:50.530><c> behavior</c><00:05:51.280><c> they</c>

00:05:51.990 --> 00:05:52.000 align:start position:0%
functions or methods have behavior they
 

00:05:52.000 --> 00:05:55.500 align:start position:0%
functions or methods have behavior they
execute<00:05:52.750><c> code</c><00:05:52.990><c> they</c><00:05:53.440><c> do</c><00:05:53.500><c> things</c><00:05:53.920><c> for</c><00:05:54.040><c> us</c><00:05:54.510><c> data</c>

00:05:55.500 --> 00:05:55.510 align:start position:0%
execute code they do things for us data
 

00:05:55.510 --> 00:05:58.190 align:start position:0%
execute code they do things for us data
represents<00:05:56.350><c> the</c><00:05:56.590><c> state</c><00:05:56.830><c> of</c><00:05:56.890><c> the</c><00:05:57.040><c> application</c>

00:05:58.190 --> 00:05:58.200 align:start position:0%
represents the state of the application
 

00:05:58.200 --> 00:06:02.460 align:start position:0%
represents the state of the application
let<00:05:59.200><c> me</c><00:05:59.290><c> use</c><00:05:59.410><c> an</c><00:05:59.560><c> example</c><00:06:00.180><c> think</c><00:06:01.180><c> of</c><00:06:01.300><c> a</c><00:06:01.390><c> car</c><00:06:01.660><c> the</c>

00:06:02.460 --> 00:06:02.470 align:start position:0%
let me use an example think of a car the
 

00:06:02.470 --> 00:06:05.190 align:start position:0%
let me use an example think of a car the
car<00:06:02.500><c> has</c><00:06:03.070><c> some</c><00:06:03.280><c> attributes</c><00:06:03.720><c> like</c><00:06:04.720><c> its</c><00:06:04.930><c> make</c>

00:06:05.190 --> 00:06:05.200 align:start position:0%
car has some attributes like its make
 

00:06:05.200 --> 00:06:08.700 align:start position:0%
car has some attributes like its make
its<00:06:05.530><c> model</c><00:06:06.100><c> its</c><00:06:06.430><c> color</c><00:06:07.050><c> these</c><00:06:08.050><c> are</c><00:06:08.110><c> the</c>

00:06:08.700 --> 00:06:08.710 align:start position:0%
its model its color these are the
 

00:06:08.710 --> 00:06:12.180 align:start position:0%
its model its color these are the
attributes<00:06:08.890><c> of</c><00:06:09.460><c> a</c><00:06:09.730><c> car</c><00:06:09.970><c> a</c><00:06:10.230><c> car</c><00:06:11.230><c> also</c><00:06:11.710><c> has</c><00:06:11.980><c> some</c>

00:06:12.180 --> 00:06:12.190 align:start position:0%
attributes of a car a car also has some
 

00:06:12.190 --> 00:06:15.360 align:start position:0%
attributes of a car a car also has some
functions<00:06:12.690><c> we</c><00:06:13.690><c> can</c><00:06:13.870><c> start</c><00:06:14.200><c> it</c><00:06:14.350><c> or</c><00:06:14.500><c> we</c><00:06:15.100><c> can</c><00:06:15.220><c> move</c>

00:06:15.360 --> 00:06:15.370 align:start position:0%
functions we can start it or we can move
 

00:06:15.370 --> 00:06:18.360 align:start position:0%
functions we can start it or we can move
it<00:06:15.550><c> so</c><00:06:15.780><c> you</c><00:06:16.780><c> can</c><00:06:16.960><c> think</c><00:06:17.110><c> of</c><00:06:17.260><c> a</c><00:06:17.380><c> car</c><00:06:17.620><c> as</c><00:06:17.830><c> a</c><00:06:17.890><c> class</c>

00:06:18.360 --> 00:06:18.370 align:start position:0%
it so you can think of a car as a class
 

00:06:18.370 --> 00:06:22.170 align:start position:0%
it so you can think of a car as a class
in<00:06:19.050><c> a</c><00:06:20.050><c> real</c><00:06:20.230><c> world</c><00:06:20.470><c> application</c><00:06:20.530><c> we</c><00:06:21.400><c> have</c><00:06:21.640><c> tens</c>

00:06:22.170 --> 00:06:22.180 align:start position:0%
in a real world application we have tens
 

00:06:22.180 --> 00:06:24.600 align:start position:0%
in a real world application we have tens
hundreds<00:06:23.050><c> or</c><00:06:23.200><c> even</c><00:06:23.260><c> thousands</c><00:06:24.010><c> of</c><00:06:24.100><c> classes</c>

00:06:24.600 --> 00:06:24.610 align:start position:0%
hundreds or even thousands of classes
 

00:06:24.610 --> 00:06:27.300 align:start position:0%
hundreds or even thousands of classes
each<00:06:25.300><c> class</c><00:06:25.690><c> responsible</c><00:06:26.680><c> for</c><00:06:26.950><c> a</c><00:06:26.980><c> piece</c><00:06:27.160><c> of</c>

00:06:27.300 --> 00:06:27.310 align:start position:0%
each class responsible for a piece of
 

00:06:27.310 --> 00:06:29.940 align:start position:0%
each class responsible for a piece of
functionality<00:06:27.490><c> an</c><00:06:28.410><c> example</c><00:06:29.410><c> of</c><00:06:29.530><c> that</c><00:06:29.650><c> is</c>

00:06:29.940 --> 00:06:29.950 align:start position:0%
functionality an example of that is
 

00:06:29.950 --> 00:06:32.430 align:start position:0%
functionality an example of that is
classes<00:06:30.700><c> that</c><00:06:30.850><c> are</c><00:06:31.000><c> responsible</c><00:06:31.540><c> for</c><00:06:31.660><c> getting</c>

00:06:32.430 --> 00:06:32.440 align:start position:0%
classes that are responsible for getting
 

00:06:32.440 --> 00:06:34.620 align:start position:0%
classes that are responsible for getting
the<00:06:32.560><c> data</c><00:06:32.740><c> from</c><00:06:33.010><c> the</c><00:06:33.100><c> user</c><00:06:33.360><c> process</c><00:06:34.360><c> the</c><00:06:34.480><c> data</c>

00:06:34.620 --> 00:06:34.630 align:start position:0%
the data from the user process the data
 

00:06:34.630 --> 00:06:37.430 align:start position:0%
the data from the user process the data
and<00:06:35.020><c> display</c><00:06:35.830><c> something</c><00:06:36.070><c> to</c><00:06:36.280><c> the</c><00:06:36.370><c> user</c>

00:06:37.430 --> 00:06:37.440 align:start position:0%
and display something to the user
 

00:06:37.440 --> 00:06:40.170 align:start position:0%
and display something to the user
now<00:06:38.440><c> as</c><00:06:38.740><c> the</c><00:06:39.160><c> number</c><00:06:39.400><c> of</c><00:06:39.430><c> classes</c><00:06:39.760><c> in</c><00:06:40.090><c> an</c>

00:06:40.170 --> 00:06:40.180 align:start position:0%
now as the number of classes in an
 

00:06:40.180 --> 00:06:42.570 align:start position:0%
now as the number of classes in an
application<00:06:40.300><c> grows</c><00:06:40.930><c> we</c><00:06:41.830><c> need</c><00:06:41.980><c> a</c><00:06:42.160><c> way</c><00:06:42.520><c> to</c>

00:06:42.570 --> 00:06:42.580 align:start position:0%
application grows we need a way to
 

00:06:42.580 --> 00:06:45.240 align:start position:0%
application grows we need a way to
organize<00:06:42.910><c> these</c><00:06:43.360><c> classes</c><00:06:43.890><c> that's</c><00:06:44.890><c> where</c><00:06:45.130><c> we</c>

00:06:45.240 --> 00:06:45.250 align:start position:0%
organize these classes that's where we
 

00:06:45.250 --> 00:06:48.360 align:start position:0%
organize these classes that's where we
use<00:06:45.430><c> a</c><00:06:45.670><c> namespace</c><00:06:46.530><c> so</c><00:06:47.530><c> a</c><00:06:47.560><c> namespace</c><00:06:47.980><c> is</c><00:06:48.310><c> a</c>

00:06:48.360 --> 00:06:48.370 align:start position:0%
use a namespace so a namespace is a
 

00:06:48.370 --> 00:06:51.630 align:start position:0%
use a namespace so a namespace is a
container<00:06:49.210><c> for</c><00:06:49.720><c> related</c><00:06:50.230><c> classes</c><00:06:50.740><c> for</c>

00:06:51.630 --> 00:06:51.640 align:start position:0%
container for related classes for
 

00:06:51.640 --> 00:06:53.780 align:start position:0%
container for related classes for
example<00:06:51.700><c> in</c><00:06:52.240><c> dotnet</c><00:06:52.720><c> framework</c><00:06:52.870><c> we</c><00:06:53.500><c> have</c>

00:06:53.780 --> 00:06:53.790 align:start position:0%
example in dotnet framework we have
 

00:06:53.790 --> 00:06:56.670 align:start position:0%
example in dotnet framework we have
namespaces<00:06:54.790><c> each</c><00:06:55.270><c> containing</c><00:06:55.930><c> tens</c><00:06:56.500><c> of</c>

00:06:56.670 --> 00:06:56.680 align:start position:0%
namespaces each containing tens of
 

00:06:56.680 --> 00:06:59.400 align:start position:0%
namespaces each containing tens of
related<00:06:57.190><c> classes</c><00:06:57.640><c> we</c><00:06:58.480><c> have</c><00:06:58.600><c> namespaces</c><00:06:59.230><c> for</c>

00:06:59.400 --> 00:06:59.410 align:start position:0%
related classes we have namespaces for
 

00:06:59.410 --> 00:07:02.730 align:start position:0%
related classes we have namespaces for
working<00:06:59.740><c> with</c><00:06:59.920><c> data</c><00:07:00.100><c> like</c><00:07:00.490><c> databases</c><00:07:01.620><c> we</c><00:07:02.620><c> also</c>

00:07:02.730 --> 00:07:02.740 align:start position:0%
working with data like databases we also
 

00:07:02.740 --> 00:07:04.350 align:start position:0%
working with data like databases we also
have<00:07:03.010><c> namespaces</c><00:07:03.670><c> for</c><00:07:03.880><c> working</c><00:07:04.210><c> with</c>

00:07:04.350 --> 00:07:04.360 align:start position:0%
have namespaces for working with
 

00:07:04.360 --> 00:07:07.380 align:start position:0%
have namespaces for working with
graphics<00:07:04.840><c> and</c><00:07:05.110><c> images</c><00:07:05.640><c> we</c><00:07:06.640><c> have</c><00:07:06.670><c> namespaces</c>

00:07:07.380 --> 00:07:07.390 align:start position:0%
graphics and images we have namespaces
 

00:07:07.390 --> 00:07:10.200 align:start position:0%
graphics and images we have namespaces
for<00:07:07.600><c> working</c><00:07:07.930><c> with</c><00:07:08.080><c> security</c><00:07:08.760><c> now</c><00:07:09.760><c> in</c><00:07:10.000><c> real</c>

00:07:10.200 --> 00:07:10.210 align:start position:0%
for working with security now in real
 

00:07:10.210 --> 00:07:12.540 align:start position:0%
for working with security now in real
world<00:07:10.420><c> application</c><00:07:10.960><c> as</c><00:07:11.110><c> these</c><00:07:11.860><c> namespaces</c>

00:07:12.540 --> 00:07:12.550 align:start position:0%
world application as these namespaces
 

00:07:12.550 --> 00:07:14.220 align:start position:0%
world application as these namespaces
grow<00:07:12.790><c> we</c><00:07:13.240><c> need</c><00:07:13.450><c> a</c><00:07:13.630><c> different</c><00:07:13.900><c> way</c><00:07:14.200><c> of</c>

00:07:14.220 --> 00:07:14.230 align:start position:0%
grow we need a different way of
 

00:07:14.230 --> 00:07:17.340 align:start position:0%
grow we need a different way of
partitioning<00:07:14.920><c> an</c><00:07:15.280><c> application</c><00:07:15.850><c> and</c><00:07:16.350><c> that's</c>

00:07:17.340 --> 00:07:17.350 align:start position:0%
partitioning an application and that's
 

00:07:17.350 --> 00:07:20.460 align:start position:0%
partitioning an application and that's
where<00:07:17.590><c> we</c><00:07:17.680><c> use</c><00:07:17.860><c> an</c><00:07:18.070><c> assembly</c><00:07:18.580><c> and</c><00:07:19.260><c> assembly</c><00:07:20.260><c> is</c>

00:07:20.460 --> 00:07:20.470 align:start position:0%
where we use an assembly and assembly is
 

00:07:20.470 --> 00:07:24.110 align:start position:0%
where we use an assembly and assembly is
a<00:07:20.860><c> container</c><00:07:21.460><c> for</c><00:07:21.880><c> related</c><00:07:22.360><c> namespaces</c>

00:07:24.110 --> 00:07:24.120 align:start position:0%
a container for related namespaces
 

00:07:24.120 --> 00:07:25.390 align:start position:0%
a container for related namespaces
physically

00:07:25.390 --> 00:07:25.400 align:start position:0%
physically
 

00:07:25.400 --> 00:07:27.850 align:start position:0%
physically
it's<00:07:25.669><c> a</c><00:07:25.820><c> file</c><00:07:26.120><c> on</c><00:07:26.300><c> the</c><00:07:26.660><c> disk</c><00:07:26.840><c> which</c><00:07:27.530><c> can</c><00:07:27.710><c> either</c>

00:07:27.850 --> 00:07:27.860 align:start position:0%
it's a file on the disk which can either
 

00:07:27.860 --> 00:07:31.990 align:start position:0%
it's a file on the disk which can either
be<00:07:27.979><c> an</c><00:07:28.280><c> executable</c><00:07:29.090><c> or</c><00:07:29.389><c> a</c><00:07:30.290><c> DLL</c><00:07:31.100><c> which</c><00:07:31.669><c> stands</c>

00:07:31.990 --> 00:07:32.000 align:start position:0%
be an executable or a DLL which stands
 

00:07:32.000 --> 00:07:36.310 align:start position:0%
be an executable or a DLL which stands
for<00:07:32.320><c> dynamically</c><00:07:33.320><c> linked</c><00:07:33.919><c> library</c><00:07:35.139><c> so</c><00:07:36.139><c> when</c>

00:07:36.310 --> 00:07:36.320 align:start position:0%
for dynamically linked library so when
 

00:07:36.320 --> 00:07:38.409 align:start position:0%
for dynamically linked library so when
you<00:07:36.410><c> compile</c><00:07:36.770><c> an</c><00:07:36.889><c> application</c><00:07:37.490><c> the</c><00:07:37.970><c> compiler</c>

00:07:38.409 --> 00:07:38.419 align:start position:0%
you compile an application the compiler
 

00:07:38.419 --> 00:07:41.710 align:start position:0%
you compile an application the compiler
builds<00:07:39.080><c> one</c><00:07:39.710><c> or</c><00:07:39.919><c> more</c><00:07:40.370><c> assemblies</c><00:07:40.910><c> depending</c>

00:07:41.710 --> 00:07:41.720 align:start position:0%
builds one or more assemblies depending
 

00:07:41.720 --> 00:07:44.140 align:start position:0%
builds one or more assemblies depending
on<00:07:41.840><c> how</c><00:07:42.020><c> you</c><00:07:42.080><c> partition</c><00:07:42.590><c> your</c><00:07:42.800><c> code</c><00:07:43.070><c> in</c><00:07:43.280><c> the</c>

00:07:44.140 --> 00:07:44.150 align:start position:0%
on how you partition your code in the
 

00:07:44.150 --> 00:07:45.969 align:start position:0%
on how you partition your code in the
next<00:07:44.180><c> lecture</c><00:07:44.750><c> we're</c><00:07:45.050><c> going</c><00:07:45.169><c> to</c><00:07:45.229><c> write</c><00:07:45.440><c> a</c><00:07:45.620><c> very</c>

00:07:45.969 --> 00:07:45.979 align:start position:0%
next lecture we're going to write a very
 

00:07:45.979 --> 00:07:47.950 align:start position:0%
next lecture we're going to write a very
simple<00:07:46.070><c> structure</c><00:07:46.639><c> application</c><00:07:47.360><c> and</c><00:07:47.570><c> you're</c>

00:07:47.950 --> 00:07:47.960 align:start position:0%
simple structure application and you're
 

00:07:47.960 --> 00:07:49.629 align:start position:0%
simple structure application and you're
going<00:07:48.199><c> to</c><00:07:48.260><c> see</c><00:07:48.470><c> all</c><00:07:48.680><c> these</c><00:07:48.949><c> concepts</c><00:07:49.460><c> in</c>

00:07:49.629 --> 00:07:49.639 align:start position:0%
going to see all these concepts in
 

00:07:49.639 --> 00:07:53.450 align:start position:0%
going to see all these concepts in
action

00:07:53.450 --> 00:07:53.460 align:start position:0%
 
 

00:07:53.460 --> 00:07:55.280 align:start position:0%
 
okay<00:07:54.000><c> in</c><00:07:54.120><c> this</c><00:07:54.210><c> video</c><00:07:54.480><c> we're</c><00:07:54.630><c> going</c><00:07:54.750><c> to</c><00:07:54.810><c> have</c><00:07:55.020><c> a</c>

00:07:55.280 --> 00:07:55.290 align:start position:0%
okay in this video we're going to have a
 

00:07:55.290 --> 00:07:57.650 align:start position:0%
okay in this video we're going to have a
quick<00:07:55.650><c> tour</c><00:07:55.890><c> of</c><00:07:55.920><c> visual</c><00:07:56.460><c> studio</c><00:07:56.820><c> and</c><00:07:57.000><c> build</c><00:07:57.540><c> a</c>

00:07:57.650 --> 00:07:57.660 align:start position:0%
quick tour of visual studio and build a
 

00:07:57.660 --> 00:08:00.470 align:start position:0%
quick tour of visual studio and build a
very<00:07:57.810><c> simple</c><00:07:58.080><c> c-sharp</c><00:07:58.590><c> application</c><00:07:59.190><c> so</c><00:08:00.090><c> here</c>

00:08:00.470 --> 00:08:00.480 align:start position:0%
very simple c-sharp application so here
 

00:08:00.480 --> 00:08:02.870 align:start position:0%
very simple c-sharp application so here
I've<00:08:00.600><c> got</c><00:08:00.630><c> Visual</c><00:08:01.080><c> Studio</c><00:08:01.170><c> open</c><00:08:01.680><c> let's</c><00:08:02.610><c> go</c><00:08:02.820><c> to</c>

00:08:02.870 --> 00:08:02.880 align:start position:0%
I've got Visual Studio open let's go to
 

00:08:02.880 --> 00:08:07.950 align:start position:0%
I've got Visual Studio open let's go to
file<00:08:03.270><c> new</c><00:08:04.640><c> project</c>

00:08:07.950 --> 00:08:07.960 align:start position:0%
 
 

00:08:07.960 --> 00:08:10.409 align:start position:0%
 
okay<00:08:08.590><c> in</c><00:08:08.740><c> this</c><00:08:08.860><c> dialogue</c><00:08:09.250><c> on</c><00:08:09.430><c> the</c><00:08:09.970><c> left</c><00:08:10.180><c> side</c>

00:08:10.409 --> 00:08:10.419 align:start position:0%
okay in this dialogue on the left side
 

00:08:10.419 --> 00:08:12.240 align:start position:0%
okay in this dialogue on the left side
we've<00:08:10.660><c> got</c><00:08:10.840><c> a</c><00:08:10.870><c> section</c><00:08:11.259><c> called</c><00:08:11.410><c> templates</c><00:08:12.009><c> and</c>

00:08:12.240 --> 00:08:12.250 align:start position:0%
we've got a section called templates and
 

00:08:12.250 --> 00:08:14.520 align:start position:0%
we've got a section called templates and
here<00:08:12.910><c> you</c><00:08:13.030><c> see</c><00:08:13.210><c> the</c><00:08:13.360><c> kind</c><00:08:13.570><c> of</c><00:08:13.630><c> applications</c><00:08:14.320><c> we</c>

00:08:14.520 --> 00:08:14.530 align:start position:0%
here you see the kind of applications we
 

00:08:14.530 --> 00:08:16.780 align:start position:0%
here you see the kind of applications we
can<00:08:14.560><c> build</c><00:08:14.889><c> with</c><00:08:15.100><c> c-sharp</c>

00:08:16.780 --> 00:08:16.790 align:start position:0%
can build with c-sharp
 

00:08:16.790 --> 00:08:18.700 align:start position:0%
can build with c-sharp
so<00:08:17.390><c> as</c><00:08:17.660><c> you</c><00:08:17.810><c> see</c><00:08:17.930><c> in</c><00:08:17.990><c> the</c><00:08:18.080><c> list</c><00:08:18.230><c> we</c><00:08:18.380><c> can</c><00:08:18.500><c> build</c>

00:08:18.700 --> 00:08:18.710 align:start position:0%
so as you see in the list we can build
 

00:08:18.710 --> 00:08:21.040 align:start position:0%
so as you see in the list we can build
desktop<00:08:19.160><c> applications</c><00:08:19.760><c> web</c><00:08:20.360><c> applications</c>

00:08:21.040 --> 00:08:21.050 align:start position:0%
desktop applications web applications
 

00:08:21.050 --> 00:08:25.090 align:start position:0%
desktop applications web applications
apps<00:08:21.320><c> for</c><00:08:22.100><c> cloud</c><00:08:22.400><c> mobile</c><00:08:23.380><c> services</c><00:08:24.380><c> workflows</c>

00:08:25.090 --> 00:08:25.100 align:start position:0%
apps for cloud mobile services workflows
 

00:08:25.100 --> 00:08:27.460 align:start position:0%
apps for cloud mobile services workflows
and<00:08:25.400><c> various</c><00:08:25.880><c> kind</c><00:08:26.060><c> of</c><00:08:26.120><c> things</c><00:08:26.330><c> but</c><00:08:27.200><c> in</c><00:08:27.350><c> this</c>

00:08:27.460 --> 00:08:27.470 align:start position:0%
and various kind of things but in this
 

00:08:27.470 --> 00:08:29.320 align:start position:0%
and various kind of things but in this
course<00:08:27.770><c> and</c><00:08:28.010><c> the</c><00:08:28.190><c> subsequent</c><00:08:28.700><c> parts</c><00:08:29.000><c> of</c><00:08:29.150><c> this</c>

00:08:29.320 --> 00:08:29.330 align:start position:0%
course and the subsequent parts of this
 

00:08:29.330 --> 00:08:31.060 align:start position:0%
course and the subsequent parts of this
course<00:08:29.600><c> we're</c><00:08:30.140><c> just</c><00:08:30.170><c> going</c><00:08:30.440><c> to</c><00:08:30.470><c> focus</c><00:08:30.680><c> on</c>

00:08:31.060 --> 00:08:31.070 align:start position:0%
course we're just going to focus on
 

00:08:31.070 --> 00:08:34.150 align:start position:0%
course we're just going to focus on
console<00:08:31.820><c> applications</c><00:08:32.479><c> a</c><00:08:33.160><c> console</c>

00:08:34.150 --> 00:08:34.160 align:start position:0%
console applications a console
 

00:08:34.160 --> 00:08:36.010 align:start position:0%
console applications a console
application<00:08:34.729><c> is</c><00:08:34.910><c> a</c><00:08:35.270><c> very</c><00:08:35.419><c> simple</c><00:08:35.870><c> application</c>

00:08:36.010 --> 00:08:36.020 align:start position:0%
application is a very simple application
 

00:08:36.020 --> 00:08:38.140 align:start position:0%
application is a very simple application
that<00:08:36.620><c> does</c><00:08:36.950><c> not</c><00:08:37.100><c> have</c><00:08:37.400><c> a</c><00:08:37.580><c> graphical</c><00:08:38.120><c> user</c>

00:08:38.140 --> 00:08:38.150 align:start position:0%
that does not have a graphical user
 

00:08:38.150 --> 00:08:40.480 align:start position:0%
that does not have a graphical user
interface<00:08:38.810><c> and</c><00:08:38.990><c> it's</c><00:08:39.800><c> a</c><00:08:39.860><c> great</c><00:08:40.100><c> learning</c><00:08:40.340><c> tool</c>

00:08:40.480 --> 00:08:40.490 align:start position:0%
interface and it's a great learning tool
 

00:08:40.490 --> 00:08:42.790 align:start position:0%
interface and it's a great learning tool
for<00:08:40.790><c> learning</c><00:08:41.210><c> a</c><00:08:41.270><c> new</c><00:08:41.390><c> language</c><00:08:41.419><c> so</c><00:08:42.410><c> we're</c><00:08:42.620><c> not</c>

00:08:42.790 --> 00:08:42.800 align:start position:0%
for learning a new language so we're not
 

00:08:42.800 --> 00:08:44.290 align:start position:0%
for learning a new language so we're not
going<00:08:42.979><c> to</c><00:08:43.010><c> be</c><00:08:43.130><c> distracted</c><00:08:43.700><c> by</c><00:08:43.729><c> various</c>

00:08:44.290 --> 00:08:44.300 align:start position:0%
going to be distracted by various
 

00:08:44.300 --> 00:08:47.470 align:start position:0%
going to be distracted by various
complexities<00:08:44.720><c> of</c><00:08:45.140><c> larger</c><00:08:45.860><c> applications</c><00:08:46.480><c> so</c>

00:08:47.470 --> 00:08:47.480 align:start position:0%
complexities of larger applications so
 

00:08:47.480 --> 00:08:50.980 align:start position:0%
complexities of larger applications so
on<00:08:47.900><c> the</c><00:08:48.800><c> left</c><00:08:48.950><c> side</c><00:08:49.130><c> select</c><00:08:49.550><c> windows</c><00:08:50.090><c> and</c><00:08:50.330><c> on</c>

00:08:50.980 --> 00:08:50.990 align:start position:0%
on the left side select windows and on
 

00:08:50.990 --> 00:08:52.480 align:start position:0%
on the left side select windows and on
the<00:08:51.020><c> right</c><00:08:51.260><c> side</c><00:08:51.290><c> select</c><00:08:51.890><c> console</c>

00:08:52.480 --> 00:08:52.490 align:start position:0%
the right side select console
 

00:08:52.490 --> 00:08:54.500 align:start position:0%
the right side select console
application

00:08:54.500 --> 00:08:54.510 align:start position:0%
application
 

00:08:54.510 --> 00:08:56.930 align:start position:0%
application
then<00:08:54.930><c> give</c><00:08:55.380><c> a</c><00:08:55.410><c> name</c><00:08:55.680><c> to</c><00:08:55.740><c> your</c><00:08:55.920><c> project</c><00:08:56.010><c> so</c>

00:08:56.930 --> 00:08:56.940 align:start position:0%
then give a name to your project so
 

00:08:56.940 --> 00:08:59.449 align:start position:0%
then give a name to your project so
let's<00:08:57.389><c> call</c><00:08:57.540><c> it</c><00:08:57.720><c> hello</c><00:08:58.019><c> world</c><00:08:58.260><c> which</c><00:08:59.250><c> is</c><00:08:59.430><c> a</c>

00:08:59.449 --> 00:08:59.459 align:start position:0%
let's call it hello world which is a
 

00:08:59.459 --> 00:09:00.829 align:start position:0%
let's call it hello world which is a
common<00:08:59.850><c> tradition</c><00:08:59.970><c> when</c><00:09:00.449><c> learning</c><00:09:00.690><c> a</c><00:09:00.810><c> new</c>

00:09:00.829 --> 00:09:00.839 align:start position:0%
common tradition when learning a new
 

00:09:00.839 --> 00:09:04.759 align:start position:0%
common tradition when learning a new
language<00:09:00.990><c> and</c><00:09:02.089><c> specify</c><00:09:03.089><c> a</c><00:09:03.120><c> location</c><00:09:03.620><c> you</c><00:09:04.620><c> can</c>

00:09:04.759 --> 00:09:04.769 align:start position:0%
language and specify a location you can
 

00:09:04.769 --> 00:09:06.920 align:start position:0%
language and specify a location you can
put<00:09:04.949><c> it</c><00:09:05.010><c> wherever</c><00:09:05.220><c> you</c><00:09:05.430><c> want</c><00:09:05.459><c> I</c><00:09:05.820><c> know</c><00:09:06.750><c> this</c>

00:09:06.920 --> 00:09:06.930 align:start position:0%
put it wherever you want I know this
 

00:09:06.930 --> 00:09:09.920 align:start position:0%
put it wherever you want I know this
concept<00:09:07.290><c> of</c><00:09:07.470><c> solution</c><00:09:08.070><c> in</c><00:09:08.850><c> Visual</c><00:09:09.389><c> Studio</c><00:09:09.510><c> we</c>

00:09:09.920 --> 00:09:09.930 align:start position:0%
concept of solution in Visual Studio we
 

00:09:09.930 --> 00:09:11.990 align:start position:0%
concept of solution in Visual Studio we
have<00:09:09.959><c> this</c><00:09:10.230><c> concept</c><00:09:10.649><c> of</c><00:09:10.829><c> solution</c><00:09:11.310><c> which</c><00:09:11.820><c> can</c>

00:09:11.990 --> 00:09:12.000 align:start position:0%
have this concept of solution which can
 

00:09:12.000 --> 00:09:14.990 align:start position:0%
have this concept of solution which can
have<00:09:12.180><c> one</c><00:09:12.540><c> or</c><00:09:12.750><c> more</c><00:09:13.050><c> projects</c><00:09:13.740><c> with</c><00:09:14.699><c> a</c><00:09:14.730><c> very</c>

00:09:14.990 --> 00:09:15.000 align:start position:0%
have one or more projects with a very
 

00:09:15.000 --> 00:09:16.639 align:start position:0%
have one or more projects with a very
simple<00:09:15.240><c> application</c><00:09:15.480><c> you</c><00:09:16.019><c> have</c><00:09:16.170><c> only</c><00:09:16.380><c> one</c>

00:09:16.639 --> 00:09:16.649 align:start position:0%
simple application you have only one
 

00:09:16.649 --> 00:09:18.949 align:start position:0%
simple application you have only one
solution<00:09:16.860><c> and</c><00:09:17.310><c> one</c><00:09:17.550><c> project</c><00:09:17.820><c> but</c><00:09:18.600><c> as</c><00:09:18.810><c> your</c>

00:09:18.949 --> 00:09:18.959 align:start position:0%
solution and one project but as your
 

00:09:18.959 --> 00:09:21.439 align:start position:0%
solution and one project but as your
application<00:09:19.110><c> grows</c><00:09:19.560><c> you</c><00:09:20.310><c> add</c><00:09:20.430><c> more</c><00:09:20.760><c> projects</c>

00:09:21.439 --> 00:09:21.449 align:start position:0%
application grows you add more projects
 

00:09:21.449 --> 00:09:23.319 align:start position:0%
application grows you add more projects
each<00:09:21.600><c> responsible</c><00:09:22.440><c> for</c><00:09:22.769><c> something</c><00:09:23.160><c> different</c>

00:09:23.319 --> 00:09:23.329 align:start position:0%
each responsible for something different
 

00:09:23.329 --> 00:09:25.579 align:start position:0%
each responsible for something different
but<00:09:24.329><c> now</c><00:09:24.449><c> we</c><00:09:24.510><c> don't</c><00:09:24.720><c> have</c><00:09:24.899><c> to</c><00:09:25.019><c> worry</c><00:09:25.199><c> about</c><00:09:25.290><c> it</c>

00:09:25.579 --> 00:09:25.589 align:start position:0%
but now we don't have to worry about it
 

00:09:25.589 --> 00:09:28.869 align:start position:0%
but now we don't have to worry about it
now<00:09:26.430><c> click</c><00:09:26.730><c> OK</c>

00:09:28.869 --> 00:09:28.879 align:start position:0%
now click OK
 

00:09:28.879 --> 00:09:31.960 align:start position:0%
now click OK
alright<00:09:29.879><c> let's</c><00:09:30.089><c> see</c><00:09:30.209><c> what's</c><00:09:30.360><c> happening</c><00:09:30.480><c> here</c>

00:09:31.960 --> 00:09:31.970 align:start position:0%
alright let's see what's happening here
 

00:09:31.970 --> 00:09:34.029 align:start position:0%
alright let's see what's happening here
some<00:09:32.629><c> developers</c><00:09:33.109><c> get</c><00:09:33.499><c> a</c><00:09:33.529><c> little</c><00:09:33.919><c> bit</c>

00:09:34.029 --> 00:09:34.039 align:start position:0%
some developers get a little bit
 

00:09:34.039 --> 00:09:35.829 align:start position:0%
some developers get a little bit
intimidated<00:09:34.699><c> the</c><00:09:34.879><c> first</c><00:09:35.089><c> time</c><00:09:35.269><c> they</c><00:09:35.479><c> open</c>

00:09:35.829 --> 00:09:35.839 align:start position:0%
intimidated the first time they open
 

00:09:35.839 --> 00:09:37.449 align:start position:0%
intimidated the first time they open
visual<00:09:36.049><c> studio</c><00:09:36.470><c> and</c><00:09:36.589><c> that's</c><00:09:37.069><c> very</c><00:09:37.279><c> enough</c>

00:09:37.449 --> 00:09:37.459 align:start position:0%
visual studio and that's very enough
 

00:09:37.459 --> 00:09:39.219 align:start position:0%
visual studio and that's very enough
because<00:09:37.759><c> there</c><00:09:38.089><c> are</c><00:09:38.149><c> so</c><00:09:38.389><c> many</c><00:09:38.509><c> menus</c><00:09:38.809><c> and</c>

00:09:39.219 --> 00:09:39.229 align:start position:0%
because there are so many menus and
 

00:09:39.229 --> 00:09:42.099 align:start position:0%
because there are so many menus and
panels<00:09:39.739><c> here</c><00:09:40.009><c> that</c><00:09:40.519><c> is</c><00:09:40.609><c> a</c><00:09:40.639><c> bit</c><00:09:40.849><c> confusing</c><00:09:41.109><c> but</c>

00:09:42.099 --> 00:09:42.109 align:start position:0%
panels here that is a bit confusing but
 

00:09:42.109 --> 00:09:43.079 align:start position:0%
panels here that is a bit confusing but
let<00:09:42.259><c> me</c><00:09:42.379><c> tell</c><00:09:42.470><c> you</c><00:09:42.589><c> something</c>

00:09:43.079 --> 00:09:43.089 align:start position:0%
let me tell you something
 

00:09:43.089 --> 00:09:45.579 align:start position:0%
let me tell you something
90%<00:09:44.089><c> of</c><00:09:44.149><c> the</c><00:09:44.239><c> time</c><00:09:44.449><c> you're</c><00:09:45.049><c> going</c><00:09:45.169><c> to</c><00:09:45.229><c> use</c><00:09:45.289><c> only</c>

00:09:45.579 --> 00:09:45.589 align:start position:0%
90% of the time you're going to use only
 

00:09:45.589 --> 00:09:48.249 align:start position:0%
90% of the time you're going to use only
10%<00:09:45.919><c> of</c><00:09:46.339><c> these</c><00:09:46.519><c> or</c><00:09:46.699><c> even</c><00:09:46.729><c> less</c><00:09:47.149><c> so</c><00:09:47.899><c> don't</c><00:09:48.169><c> worry</c>

00:09:48.249 --> 00:09:48.259 align:start position:0%
10% of these or even less so don't worry
 

00:09:48.259 --> 00:09:50.349 align:start position:0%
10% of these or even less so don't worry
about<00:09:48.349><c> all</c><00:09:48.739><c> these</c><00:09:49.069><c> menus</c><00:09:49.429><c> here</c><00:09:49.669><c> you</c><00:09:50.209><c> don't</c>

00:09:50.349 --> 00:09:50.359 align:start position:0%
about all these menus here you don't
 

00:09:50.359 --> 00:09:53.250 align:start position:0%
about all these menus here you don't
need<00:09:50.509><c> to</c><00:09:50.629><c> use</c><00:09:50.749><c> all</c><00:09:50.779><c> of</c><00:09:51.049><c> them</c><00:09:51.319><c> at</c><00:09:51.439><c> all</c><00:09:51.470><c> times</c>

00:09:53.250 --> 00:09:53.260 align:start position:0%
need to use all of them at all times
 

00:09:53.260 --> 00:09:55.860 align:start position:0%
need to use all of them at all times
90%<00:09:53.920><c> of</c><00:09:53.950><c> the</c><00:09:54.040><c> time</c><00:09:54.250><c> all</c><00:09:54.640><c> you</c><00:09:54.700><c> need</c><00:09:55.150><c> is</c><00:09:55.330><c> the</c><00:09:55.690><c> code</c>

00:09:55.860 --> 00:09:55.870 align:start position:0%
90% of the time all you need is the code
 

00:09:55.870 --> 00:09:58.260 align:start position:0%
90% of the time all you need is the code
editor<00:09:56.110><c> here</c>

00:09:58.260 --> 00:09:58.270 align:start position:0%
editor here
 

00:09:58.270 --> 00:09:59.940 align:start position:0%
editor here
sometimes<00:09:58.750><c> you</c><00:09:58.960><c> need</c><00:09:59.050><c> the</c><00:09:59.110><c> solution</c><00:09:59.590><c> Explorer</c>

00:09:59.940 --> 00:09:59.950 align:start position:0%
sometimes you need the solution Explorer
 

00:09:59.950 --> 00:10:02.610 align:start position:0%
sometimes you need the solution Explorer
in<00:10:00.160><c> fact</c><00:10:01.030><c> I</c><00:10:01.150><c> personally</c><00:10:01.320><c> hardly</c><00:10:02.320><c> ever</c><00:10:02.410><c> use</c>

00:10:02.610 --> 00:10:02.620 align:start position:0%
in fact I personally hardly ever use
 

00:10:02.620 --> 00:10:03.990 align:start position:0%
in fact I personally hardly ever use
solution<00:10:02.860><c> Explorer</c><00:10:03.310><c> because</c><00:10:03.640><c> I</c><00:10:03.850><c> do</c>

00:10:03.990 --> 00:10:04.000 align:start position:0%
solution Explorer because I do
 

00:10:04.000 --> 00:10:05.970 align:start position:0%
solution Explorer because I do
everything<00:10:04.510><c> with</c><00:10:04.630><c> my</c><00:10:04.660><c> keyboard</c><00:10:04.960><c> and</c><00:10:05.290><c> if</c><00:10:05.890><c> you</c>

00:10:05.970 --> 00:10:05.980 align:start position:0%
everything with my keyboard and if you
 

00:10:05.980 --> 00:10:07.980 align:start position:0%
everything with my keyboard and if you
watch<00:10:06.130><c> my</c><00:10:06.280><c> course</c><00:10:06.580><c> double</c><00:10:07.210><c> your</c><00:10:07.330><c> coding</c><00:10:07.600><c> speed</c>

00:10:07.980 --> 00:10:07.990 align:start position:0%
watch my course double your coding speed
 

00:10:07.990 --> 00:10:09.720 align:start position:0%
watch my course double your coding speed
you<00:10:08.380><c> will</c><00:10:08.470><c> see</c><00:10:08.710><c> that</c><00:10:08.860><c> everything</c><00:10:09.430><c> is</c><00:10:09.550><c> possible</c>

00:10:09.720 --> 00:10:09.730 align:start position:0%
you will see that everything is possible
 

00:10:09.730 --> 00:10:11.460 align:start position:0%
you will see that everything is possible
with<00:10:10.060><c> keyboard</c><00:10:10.600><c> so</c><00:10:10.930><c> you</c><00:10:10.990><c> don't</c><00:10:11.200><c> need</c><00:10:11.320><c> these</c>

00:10:11.460 --> 00:10:11.470 align:start position:0%
with keyboard so you don't need these
 

00:10:11.470 --> 00:10:13.320 align:start position:0%
with keyboard so you don't need these
panels<00:10:11.890><c> here</c><00:10:12.100><c> you</c><00:10:12.640><c> don't</c><00:10:12.760><c> need</c><00:10:12.940><c> to</c><00:10:13.030><c> grab</c><00:10:13.210><c> your</c>

00:10:13.320 --> 00:10:13.330 align:start position:0%
panels here you don't need to grab your
 

00:10:13.330 --> 00:10:15.450 align:start position:0%
panels here you don't need to grab your
mouse<00:10:13.540><c> and</c><00:10:13.930><c> navigate</c><00:10:14.800><c> around</c><00:10:14.830><c> you</c><00:10:15.280><c> don't</c>

00:10:15.450 --> 00:10:15.460 align:start position:0%
mouse and navigate around you don't
 

00:10:15.460 --> 00:10:17.780 align:start position:0%
mouse and navigate around you don't
really<00:10:15.580><c> need</c><00:10:15.820><c> this</c><00:10:15.940><c> stuff</c>

00:10:17.780 --> 00:10:17.790 align:start position:0%
really need this stuff
 

00:10:17.790 --> 00:10:19.850 align:start position:0%
really need this stuff
also<00:10:18.540><c> none</c><00:10:18.870><c> of</c><00:10:18.960><c> the</c><00:10:19.080><c> stuff</c><00:10:19.290><c> on</c><00:10:19.410><c> the</c><00:10:19.500><c> toolbar</c>

00:10:19.850 --> 00:10:19.860 align:start position:0%
also none of the stuff on the toolbar
 

00:10:19.860 --> 00:10:21.830 align:start position:0%
also none of the stuff on the toolbar
are<00:10:20.010><c> ever</c><00:10:20.250><c> required</c><00:10:20.760><c> don't</c><00:10:21.360><c> worry</c><00:10:21.510><c> about</c><00:10:21.600><c> it</c>

00:10:21.830 --> 00:10:21.840 align:start position:0%
are ever required don't worry about it
 

00:10:21.840 --> 00:10:24.990 align:start position:0%
are ever required don't worry about it
everything<00:10:22.530><c> you</c><00:10:22.620><c> can</c><00:10:22.800><c> do</c><00:10:22.920><c> with</c><00:10:23.040><c> your</c><00:10:23.160><c> keyboard</c>

00:10:24.990 --> 00:10:25.000 align:start position:0%
everything you can do with your keyboard
 

00:10:25.000 --> 00:10:26.430 align:start position:0%
everything you can do with your keyboard
alright<00:10:25.360><c> now</c><00:10:25.510><c> let's</c><00:10:25.720><c> take</c><00:10:25.870><c> a</c><00:10:25.900><c> look</c><00:10:26.170><c> at</c><00:10:26.320><c> this</c>

00:10:26.430 --> 00:10:26.440 align:start position:0%
alright now let's take a look at this
 

00:10:26.440 --> 00:10:29.160 align:start position:0%
alright now let's take a look at this
first<00:10:26.680><c> to</c><00:10:26.920><c> char</c><00:10:27.100><c> program</c><00:10:27.600><c> so</c><00:10:28.600><c> we</c><00:10:28.750><c> created</c><00:10:29.050><c> a</c>

00:10:29.160 --> 00:10:29.170 align:start position:0%
first to char program so we created a
 

00:10:29.170 --> 00:10:30.960 align:start position:0%
first to char program so we created a
console<00:10:29.530><c> application</c><00:10:30.070><c> and</c><00:10:30.370><c> on</c><00:10:30.670><c> the</c><00:10:30.790><c> right</c>

00:10:30.960 --> 00:10:30.970 align:start position:0%
console application and on the right
 

00:10:30.970 --> 00:10:33.630 align:start position:0%
console application and on the right
side<00:10:31.270><c> you</c><00:10:31.870><c> see</c><00:10:31.900><c> the</c><00:10:32.290><c> solution</c><00:10:32.740><c> Explorer</c><00:10:33.130><c> panel</c>

00:10:33.630 --> 00:10:33.640 align:start position:0%
side you see the solution Explorer panel
 

00:10:33.640 --> 00:10:37.430 align:start position:0%
side you see the solution Explorer panel
in<00:10:34.000><c> case</c><00:10:34.570><c> you</c><00:10:34.690><c> don't</c><00:10:34.840><c> see</c><00:10:35.020><c> that</c><00:10:35.200><c> go</c><00:10:35.770><c> to</c><00:10:35.830><c> view</c>

00:10:37.430 --> 00:10:37.440 align:start position:0%
in case you don't see that go to view
 

00:10:37.440 --> 00:10:40.220 align:start position:0%
in case you don't see that go to view
and<00:10:37.530><c> select</c><00:10:38.070><c> solution</c><00:10:38.430><c> Explorer</c>

00:10:40.220 --> 00:10:40.230 align:start position:0%
and select solution Explorer
 

00:10:40.230 --> 00:10:42.410 align:start position:0%
and select solution Explorer
top<00:10:40.440><c> you</c><00:10:40.590><c> see</c><00:10:40.770><c> we</c><00:10:41.010><c> have</c><00:10:41.130><c> a</c><00:10:41.160><c> solution</c><00:10:41.520><c> which</c><00:10:42.270><c> has</c>

00:10:42.410 --> 00:10:42.420 align:start position:0%
top you see we have a solution which has
 

00:10:42.420 --> 00:10:44.960 align:start position:0%
top you see we have a solution which has
only<00:10:42.600><c> one</c><00:10:42.690><c> project</c><00:10:43.340><c> under</c><00:10:44.340><c> that</c><00:10:44.490><c> we've</c><00:10:44.790><c> got</c>

00:10:44.960 --> 00:10:44.970 align:start position:0%
only one project under that we've got
 

00:10:44.970 --> 00:10:47.360 align:start position:0%
only one project under that we've got
the<00:10:45.060><c> project</c><00:10:45.300><c> called</c><00:10:45.690><c> hello</c><00:10:45.930><c> world</c><00:10:46.280><c> look</c><00:10:47.280><c> at</c>

00:10:47.360 --> 00:10:47.370 align:start position:0%
the project called hello world look at
 

00:10:47.370 --> 00:10:50.840 align:start position:0%
the project called hello world look at
these<00:10:47.520><c> four</c><00:10:47.730><c> items</c><00:10:48.030><c> here</c><00:10:48.860><c> properties</c><00:10:49.860><c> expand</c>

00:10:50.840 --> 00:10:50.850 align:start position:0%
these four items here properties expand
 

00:10:50.850 --> 00:10:52.820 align:start position:0%
these four items here properties expand
that<00:10:50.970><c> we</c><00:10:51.630><c> have</c><00:10:51.750><c> a</c><00:10:51.780><c> file</c><00:10:52.080><c> here</c><00:10:52.230><c> called</c><00:10:52.290><c> assembly</c>

00:10:52.820 --> 00:10:52.830 align:start position:0%
that we have a file here called assembly
 

00:10:52.830 --> 00:10:56.810 align:start position:0%
that we have a file here called assembly
info<00:10:53.660><c> this</c><00:10:54.660><c> is</c><00:10:54.810><c> the</c><00:10:54.930><c> identification</c><00:10:55.440><c> or</c><00:10:56.340><c> the</c>

00:10:56.810 --> 00:10:56.820 align:start position:0%
info this is the identification or the
 

00:10:56.820 --> 00:10:58.730 align:start position:0%
info this is the identification or the
assembly<00:10:57.360><c> that</c><00:10:57.600><c> will</c><00:10:57.750><c> be</c><00:10:57.960><c> produced</c><00:10:58.500><c> as</c><00:10:58.680><c> a</c>

00:10:58.730 --> 00:10:58.740 align:start position:0%
assembly that will be produced as a
 

00:10:58.740 --> 00:11:01.190 align:start position:0%
assembly that will be produced as a
result<00:10:58.980><c> of</c><00:10:59.340><c> compiling</c><00:10:59.760><c> this</c><00:10:59.940><c> application</c><00:11:00.510><c> so</c>

00:11:01.190 --> 00:11:01.200 align:start position:0%
result of compiling this application so
 

00:11:01.200 --> 00:11:02.750 align:start position:0%
result of compiling this application so
when<00:11:01.350><c> we</c><00:11:01.440><c> compile</c><00:11:01.800><c> the</c><00:11:01.890><c> console</c><00:11:02.250><c> application</c>

00:11:02.750 --> 00:11:02.760 align:start position:0%
when we compile the console application
 

00:11:02.760 --> 00:11:04.100 align:start position:0%
when we compile the console application
we're<00:11:02.970><c> going</c><00:11:03.120><c> to</c><00:11:03.180><c> get</c><00:11:03.270><c> an</c><00:11:03.360><c> executable</c><00:11:03.900><c> and</c>

00:11:04.100 --> 00:11:04.110 align:start position:0%
we're going to get an executable and
 

00:11:04.110 --> 00:11:06.680 align:start position:0%
we're going to get an executable and
that's<00:11:04.590><c> an</c><00:11:04.740><c> assembly</c><00:11:05.220><c> that</c><00:11:05.390><c> assembly</c><00:11:06.390><c> has</c><00:11:06.600><c> an</c>

00:11:06.680 --> 00:11:06.690 align:start position:0%
that's an assembly that assembly has an
 

00:11:06.690 --> 00:11:08.870 align:start position:0%
that's an assembly that assembly has an
identification<00:11:07.110><c> look</c><00:11:08.070><c> at</c><00:11:08.190><c> these</c><00:11:08.340><c> attributes</c>

00:11:08.870 --> 00:11:08.880 align:start position:0%
identification look at these attributes
 

00:11:08.880 --> 00:11:12.620 align:start position:0%
identification look at these attributes
here<00:11:09.150><c> like</c><00:11:10.110><c> the</c><00:11:10.260><c> title</c><00:11:11.300><c> description</c><00:11:12.300><c> which</c><00:11:12.510><c> is</c>

00:11:12.620 --> 00:11:12.630 align:start position:0%
here like the title description which is
 

00:11:12.630 --> 00:11:15.800 align:start position:0%
here like the title description which is
currently<00:11:12.930><c> not</c><00:11:13.320><c> set</c><00:11:13.970><c> company</c><00:11:14.970><c> product</c>

00:11:15.800 --> 00:11:15.810 align:start position:0%
currently not set company product
 

00:11:15.810 --> 00:11:19.070 align:start position:0%
currently not set company product
copyright<00:11:16.560><c> trademark</c><00:11:17.010><c> culture</c><00:11:17.850><c> a</c><00:11:18.030><c> grade</c><00:11:18.960><c> you</c>

00:11:19.070 --> 00:11:19.080 align:start position:0%
copyright trademark culture a grade you
 

00:11:19.080 --> 00:11:20.870 align:start position:0%
copyright trademark culture a grade you
know<00:11:19.200><c> various</c><00:11:19.530><c> kind</c><00:11:19.770><c> of</c><00:11:19.830><c> things</c><00:11:20.010><c> like</c><00:11:20.310><c> even</c>

00:11:20.870 --> 00:11:20.880 align:start position:0%
know various kind of things like even
 

00:11:20.880 --> 00:11:23.050 align:start position:0%
know various kind of things like even
version<00:11:21.420><c> so</c><00:11:21.900><c> these</c><00:11:22.200><c> are</c><00:11:22.380><c> all</c><00:11:22.560><c> part</c><00:11:22.590><c> of</c>

00:11:23.050 --> 00:11:23.060 align:start position:0%
version so these are all part of
 

00:11:23.060 --> 00:11:25.700 align:start position:0%
version so these are all part of
assembly<00:11:24.060><c> identification</c><00:11:24.810><c> or</c><00:11:24.990><c> assembly</c>

00:11:25.700 --> 00:11:25.710 align:start position:0%
assembly identification or assembly
 

00:11:25.710 --> 00:11:28.670 align:start position:0%
assembly identification or assembly
manifest<00:11:26.310><c> in</c><00:11:26.910><c> most</c><00:11:27.840><c> cases</c><00:11:28.050><c> you</c><00:11:28.260><c> don't</c><00:11:28.380><c> have</c><00:11:28.560><c> to</c>

00:11:28.670 --> 00:11:28.680 align:start position:0%
manifest in most cases you don't have to
 

00:11:28.680 --> 00:11:30.380 align:start position:0%
manifest in most cases you don't have to
worry<00:11:28.860><c> about</c><00:11:28.980><c> it</c><00:11:29.250><c> but</c><00:11:29.820><c> if</c><00:11:29.940><c> you</c><00:11:30.030><c> want</c><00:11:30.180><c> to</c><00:11:30.240><c> create</c>

00:11:30.380 --> 00:11:30.390 align:start position:0%
worry about it but if you want to create
 

00:11:30.390 --> 00:11:32.030 align:start position:0%
worry about it but if you want to create
an<00:11:30.570><c> assembly</c><00:11:30.810><c> and</c><00:11:31.200><c> you</c><00:11:31.260><c> want</c><00:11:31.470><c> to</c><00:11:31.530><c> distribute</c>

00:11:32.030 --> 00:11:32.040 align:start position:0%
an assembly and you want to distribute
 

00:11:32.040 --> 00:11:34.670 align:start position:0%
an assembly and you want to distribute
it<00:11:32.190><c> send</c><00:11:32.820><c> to</c><00:11:32.910><c> other</c><00:11:33.090><c> people</c><00:11:33.540><c> then</c><00:11:34.350><c> you</c><00:11:34.560><c> may</c>

00:11:34.670 --> 00:11:34.680 align:start position:0%
it send to other people then you may
 

00:11:34.680 --> 00:11:36.200 align:start position:0%
it send to other people then you may
want<00:11:34.830><c> to</c><00:11:35.010><c> come</c><00:11:35.190><c> here</c><00:11:35.460><c> and</c><00:11:35.670><c> give</c><00:11:36.030><c> you</c><00:11:36.120><c> the</c>

00:11:36.200 --> 00:11:36.210 align:start position:0%
want to come here and give you the
 

00:11:36.210 --> 00:11:38.780 align:start position:0%
want to come here and give you the
proper<00:11:36.570><c> name</c><00:11:36.750><c> and</c><00:11:37.050><c> a</c><00:11:37.110><c> proper</c><00:11:37.440><c> version</c><00:11:37.680><c> so</c><00:11:38.400><c> for</c>

00:11:38.780 --> 00:11:38.790 align:start position:0%
proper name and a proper version so for
 

00:11:38.790 --> 00:11:42.600 align:start position:0%
proper name and a proper version so for
now<00:11:38.880><c> we</c><00:11:38.940><c> don't</c><00:11:39.120><c> have</c><00:11:39.210><c> to</c><00:11:39.420><c> worry</c><00:11:39.630><c> about</c><00:11:39.810><c> it</c>

00:11:42.600 --> 00:11:42.610 align:start position:0%
 
 

00:11:42.610 --> 00:11:45.900 align:start position:0%
 
on<00:11:42.970><c> the</c><00:11:43.209><c> references</c><00:11:43.809><c> you</c><00:11:44.439><c> see</c><00:11:44.649><c> any</c><00:11:44.980><c> assemblies</c>

00:11:45.900 --> 00:11:45.910 align:start position:0%
on the references you see any assemblies
 

00:11:45.910 --> 00:11:48.749 align:start position:0%
on the references you see any assemblies
that<00:11:46.480><c> this</c><00:11:46.779><c> project</c><00:11:47.350><c> is</c><00:11:47.470><c> referencing</c><00:11:48.189><c> to</c><00:11:48.670><c> do</c>

00:11:48.749 --> 00:11:48.759 align:start position:0%
that this project is referencing to do
 

00:11:48.759 --> 00:11:51.299 align:start position:0%
that this project is referencing to do
its<00:11:48.910><c> job</c><00:11:49.350><c> when</c><00:11:50.350><c> you</c><00:11:50.439><c> create</c><00:11:50.679><c> a</c><00:11:50.709><c> project</c><00:11:50.949><c> with</c>

00:11:51.299 --> 00:11:51.309 align:start position:0%
its job when you create a project with
 

00:11:51.309 --> 00:11:53.489 align:start position:0%
its job when you create a project with
visual<00:11:51.670><c> studio</c><00:11:51.699><c> by</c><00:11:52.449><c> default</c><00:11:52.989><c> it</c><00:11:53.199><c> as</c><00:11:53.470><c> a</c>

00:11:53.489 --> 00:11:53.499 align:start position:0%
visual studio by default it as a
 

00:11:53.499 --> 00:11:55.650 align:start position:0%
visual studio by default it as a
reference<00:11:54.189><c> to</c><00:11:54.369><c> a</c><00:11:54.610><c> bunch</c><00:11:55.059><c> of</c><00:11:55.149><c> assemblies</c><00:11:55.629><c> that</c>

00:11:55.650 --> 00:11:55.660 align:start position:0%
reference to a bunch of assemblies that
 

00:11:55.660 --> 00:11:57.960 align:start position:0%
reference to a bunch of assemblies that
you'll<00:11:56.079><c> see</c><00:11:56.230><c> here</c><00:11:56.259><c> these</c><00:11:57.129><c> are</c><00:11:57.189><c> all</c><00:11:57.399><c> part</c><00:11:57.850><c> of</c>

00:11:57.960 --> 00:11:57.970 align:start position:0%
you'll see here these are all part of
 

00:11:57.970 --> 00:12:00.989 align:start position:0%
you'll see here these are all part of
dotnet<00:11:58.420><c> framework</c><00:11:58.920><c> so</c><00:11:59.920><c> at</c><00:12:00.040><c> a</c><00:12:00.069><c> minimum</c><00:12:00.489><c> Visual</c>

00:12:00.989 --> 00:12:00.999 align:start position:0%
dotnet framework so at a minimum Visual
 

00:12:00.999 --> 00:12:02.280 align:start position:0%
dotnet framework so at a minimum Visual
Studio<00:12:01.119><c> assumes</c><00:12:01.720><c> you're</c><00:12:01.899><c> going</c><00:12:02.049><c> to</c><00:12:02.110><c> use</c>

00:12:02.280 --> 00:12:02.290 align:start position:0%
Studio assumes you're going to use
 

00:12:02.290 --> 00:12:05.519 align:start position:0%
Studio assumes you're going to use
classes<00:12:02.860><c> in</c><00:12:03.069><c> system</c><00:12:03.939><c> assembly</c><00:12:04.389><c> or</c><00:12:04.629><c> system</c><00:12:05.410><c> the</c>

00:12:05.519 --> 00:12:05.529 align:start position:0%
classes in system assembly or system the
 

00:12:05.529 --> 00:12:08.119 align:start position:0%
classes in system assembly or system the
data<00:12:05.829><c> to</c><00:12:06.160><c> work</c><00:12:06.309><c> with</c><00:12:06.369><c> databases</c><00:12:07.089><c> and</c><00:12:07.569><c> so</c><00:12:07.869><c> on</c>

00:12:08.119 --> 00:12:08.129 align:start position:0%
data to work with databases and so on
 

00:12:08.129 --> 00:12:10.439 align:start position:0%
data to work with databases and so on
you<00:12:09.129><c> may</c><00:12:09.249><c> not</c><00:12:09.429><c> necessarily</c><00:12:09.939><c> use</c><00:12:10.089><c> all</c><00:12:10.329><c> these</c>

00:12:10.439 --> 00:12:10.449 align:start position:0%
you may not necessarily use all these
 

00:12:10.449 --> 00:12:12.090 align:start position:0%
you may not necessarily use all these
assemblies<00:12:10.959><c> in</c><00:12:11.110><c> your</c><00:12:11.230><c> project</c><00:12:11.679><c> but</c><00:12:11.860><c> that's</c>

00:12:12.090 --> 00:12:12.100 align:start position:0%
assemblies in your project but that's
 

00:12:12.100 --> 00:12:15.890 align:start position:0%
assemblies in your project but that's
just<00:12:12.220><c> part</c><00:12:12.369><c> of</c><00:12:12.489><c> the</c><00:12:12.549><c> template</c>

00:12:15.890 --> 00:12:15.900 align:start position:0%
 
 

00:12:15.900 --> 00:12:18.620 align:start position:0%
 
config'<00:12:16.500><c> is</c><00:12:16.680><c> an</c><00:12:17.250><c> XML</c><00:12:17.730><c> where</c><00:12:18.090><c> we</c><00:12:18.240><c> store</c><00:12:18.480><c> the</c>

00:12:18.620 --> 00:12:18.630 align:start position:0%
config' is an XML where we store the
 

00:12:18.630 --> 00:12:20.050 align:start position:0%
config' is an XML where we store the
configuration<00:12:19.350><c> for</c><00:12:19.560><c> this</c><00:12:19.710><c> application</c>

00:12:20.050 --> 00:12:20.060 align:start position:0%
configuration for this application
 

00:12:20.060 --> 00:12:22.190 align:start position:0%
configuration for this application
sometimes<00:12:21.060><c> you</c><00:12:21.420><c> may</c><00:12:21.540><c> want</c><00:12:21.780><c> to</c><00:12:21.840><c> store</c>

00:12:22.190 --> 00:12:22.200 align:start position:0%
sometimes you may want to store
 

00:12:22.200 --> 00:12:24.200 align:start position:0%
sometimes you may want to store
connection<00:12:22.950><c> strings</c><00:12:23.280><c> to</c><00:12:23.430><c> the</c><00:12:23.460><c> database</c><00:12:23.970><c> or</c>

00:12:24.200 --> 00:12:24.210 align:start position:0%
connection strings to the database or
 

00:12:24.210 --> 00:12:26.390 align:start position:0%
connection strings to the database or
you<00:12:24.300><c> may</c><00:12:25.110><c> want</c><00:12:25.260><c> to</c><00:12:25.380><c> have</c><00:12:25.590><c> some</c><00:12:25.890><c> settings</c><00:12:26.280><c> about</c>

00:12:26.390 --> 00:12:26.400 align:start position:0%
you may want to have some settings about
 

00:12:26.400 --> 00:12:29.330 align:start position:0%
you may want to have some settings about
your<00:12:26.640><c> application</c><00:12:27.290><c> all</c><00:12:28.290><c> of</c><00:12:28.650><c> them</c><00:12:28.800><c> will</c><00:12:29.010><c> end</c><00:12:29.130><c> up</c>

00:12:29.330 --> 00:12:29.340 align:start position:0%
your application all of them will end up
 

00:12:29.340 --> 00:12:30.350 align:start position:0%
your application all of them will end up
here

00:12:30.350 --> 00:12:30.360 align:start position:0%
here
 

00:12:30.360 --> 00:12:32.740 align:start position:0%
here
and<00:12:30.450><c> finally</c><00:12:31.110><c> you</c><00:12:31.230><c> see</c><00:12:31.260><c> program</c><00:12:32.010><c> dot</c><00:12:32.220><c> C</c><00:12:32.250><c> s</c>

00:12:32.740 --> 00:12:32.750 align:start position:0%
and finally you see program dot C s
 

00:12:32.750 --> 00:12:34.699 align:start position:0%
and finally you see program dot C s
which<00:12:33.750><c> is</c><00:12:33.899><c> where</c><00:12:34.110><c> we</c><00:12:34.230><c> are</c><00:12:34.320><c> going</c><00:12:34.410><c> to</c><00:12:34.500><c> start</c>

00:12:34.699 --> 00:12:34.709 align:start position:0%
which is where we are going to start
 

00:12:34.709 --> 00:12:37.639 align:start position:0%
which is where we are going to start
writing<00:12:34.890><c> code</c><00:12:35.160><c> all</c><00:12:36.200><c> right</c><00:12:37.200><c> let's</c><00:12:37.380><c> see</c><00:12:37.500><c> what's</c>

00:12:37.639 --> 00:12:37.649 align:start position:0%
writing code all right let's see what's
 

00:12:37.649 --> 00:12:38.329 align:start position:0%
writing code all right let's see what's
happening<00:12:38.010><c> here</c>

00:12:38.329 --> 00:12:38.339 align:start position:0%
happening here
 

00:12:38.339 --> 00:12:41.540 align:start position:0%
happening here
so<00:12:39.120><c> in</c><00:12:39.450><c> this</c><00:12:39.779><c> file</c><00:12:40.019><c> program</c><00:12:40.500><c> that</c><00:12:40.740><c> C</c><00:12:40.890><c> S</c><00:12:41.010><c> on</c><00:12:41.279><c> the</c>

00:12:41.540 --> 00:12:41.550 align:start position:0%
so in this file program that C S on the
 

00:12:41.550 --> 00:12:43.630 align:start position:0%
so in this file program that C S on the
top<00:12:41.760><c> you</c><00:12:41.880><c> see</c><00:12:42.029><c> a</c><00:12:42.060><c> bunch</c><00:12:42.300><c> of</c><00:12:42.420><c> using</c><00:12:42.959><c> statements</c>

00:12:43.630 --> 00:12:43.640 align:start position:0%
top you see a bunch of using statements
 

00:12:43.640 --> 00:12:45.440 align:start position:0%
top you see a bunch of using statements
what<00:12:44.640><c> is</c><00:12:44.730><c> this</c><00:12:44.910><c> all</c><00:12:45.029><c> about</c>

00:12:45.440 --> 00:12:45.450 align:start position:0%
what is this all about
 

00:12:45.450 --> 00:12:48.259 align:start position:0%
what is this all about
well<00:12:45.930><c> our</c><00:12:46.399><c> project</c><00:12:47.399><c> is</c><00:12:47.490><c> called</c><00:12:47.700><c> hello</c><00:12:47.970><c> world</c>

00:12:48.259 --> 00:12:48.269 align:start position:0%
well our project is called hello world
 

00:12:48.269 --> 00:12:50.930 align:start position:0%
well our project is called hello world
so<00:12:48.930><c> by</c><00:12:49.079><c> default</c><00:12:49.320><c> Visual</c><00:12:49.950><c> Studio</c><00:12:50.070><c> creates</c><00:12:50.790><c> a</c>

00:12:50.930 --> 00:12:50.940 align:start position:0%
so by default Visual Studio creates a
 

00:12:50.940 --> 00:12:54.259 align:start position:0%
so by default Visual Studio creates a
namespace<00:12:51.300><c> called</c><00:12:52.200><c> hello</c><00:12:52.470><c> world</c><00:12:53.180><c> when</c><00:12:54.180><c> we</c>

00:12:54.259 --> 00:12:54.269 align:start position:0%
namespace called hello world when we
 

00:12:54.269 --> 00:12:56.090 align:start position:0%
namespace called hello world when we
write<00:12:54.480><c> code</c><00:12:54.690><c> in</c><00:12:54.750><c> this</c><00:12:54.990><c> namespace</c><00:12:55.230><c> we</c><00:12:55.920><c> have</c>

00:12:56.090 --> 00:12:56.100 align:start position:0%
write code in this namespace we have
 

00:12:56.100 --> 00:12:58.370 align:start position:0%
write code in this namespace we have
access<00:12:56.519><c> to</c><00:12:56.760><c> any</c><00:12:57.029><c> classes</c><00:12:57.450><c> defined</c><00:12:57.870><c> in</c><00:12:58.230><c> this</c>

00:12:58.370 --> 00:12:58.380 align:start position:0%
access to any classes defined in this
 

00:12:58.380 --> 00:13:00.769 align:start position:0%
access to any classes defined in this
namespace<00:12:58.700><c> so</c><00:12:59.700><c> if</c><00:12:59.850><c> you</c><00:12:59.940><c> want</c><00:13:00.120><c> to</c><00:13:00.180><c> use</c><00:13:00.390><c> a</c><00:13:00.420><c> class</c>

00:13:00.769 --> 00:13:00.779 align:start position:0%
namespace so if you want to use a class
 

00:13:00.779 --> 00:13:02.690 align:start position:0%
namespace so if you want to use a class
that<00:13:01.019><c> is</c><00:13:01.079><c> defined</c><00:13:01.560><c> in</c><00:13:01.740><c> a</c><00:13:01.829><c> different</c><00:13:01.860><c> namespace</c>

00:13:02.690 --> 00:13:02.700 align:start position:0%
that is defined in a different namespace
 

00:13:02.700 --> 00:13:05.210 align:start position:0%
that is defined in a different namespace
we<00:13:03.570><c> need</c><00:13:03.750><c> to</c><00:13:03.899><c> import</c><00:13:04.440><c> it</c><00:13:04.529><c> in</c><00:13:04.649><c> our</c><00:13:04.769><c> code</c><00:13:05.010><c> file</c>

00:13:05.210 --> 00:13:05.220 align:start position:0%
we need to import it in our code file
 

00:13:05.220 --> 00:13:07.280 align:start position:0%
we need to import it in our code file
and<00:13:05.459><c> that's</c><00:13:06.089><c> why</c><00:13:06.300><c> we</c><00:13:06.540><c> use</c><00:13:06.570><c> the</c><00:13:06.870><c> using</c>

00:13:07.280 --> 00:13:07.290 align:start position:0%
and that's why we use the using
 

00:13:07.290 --> 00:13:10.430 align:start position:0%
and that's why we use the using
statement<00:13:07.490><c> so</c><00:13:08.490><c> by</c><00:13:08.640><c> default</c><00:13:08.899><c> Visual</c><00:13:09.899><c> Studio</c><00:13:10.019><c> as</c>

00:13:10.430 --> 00:13:10.440 align:start position:0%
statement so by default Visual Studio as
 

00:13:10.440 --> 00:13:13.850 align:start position:0%
statement so by default Visual Studio as
these<00:13:11.010><c> five</c><00:13:11.579><c> using</c><00:13:11.970><c> statements</c><00:13:12.649><c> system</c><00:13:13.649><c> is</c><00:13:13.800><c> a</c>

00:13:13.850 --> 00:13:13.860 align:start position:0%
these five using statements system is a
 

00:13:13.860 --> 00:13:16.460 align:start position:0%
these five using statements system is a
namespace<00:13:14.610><c> in</c><00:13:15.000><c> dotnet</c><00:13:15.450><c> framework</c><00:13:15.570><c> and</c><00:13:16.019><c> that's</c>

00:13:16.460 --> 00:13:16.470 align:start position:0%
namespace in dotnet framework and that's
 

00:13:16.470 --> 00:13:18.949 align:start position:0%
namespace in dotnet framework and that's
where<00:13:16.769><c> we</c><00:13:16.950><c> have</c><00:13:17.160><c> all</c><00:13:17.430><c> these</c><00:13:17.640><c> basic</c><00:13:17.970><c> utility</c>

00:13:18.949 --> 00:13:18.959 align:start position:0%
where we have all these basic utility
 

00:13:18.959 --> 00:13:21.960 align:start position:0%
where we have all these basic utility
classes<00:13:19.440><c> and</c><00:13:19.709><c> primitive</c><00:13:20.070><c> types</c><00:13:20.490><c> there</c>

00:13:21.960 --> 00:13:21.970 align:start position:0%
classes and primitive types there
 

00:13:21.970 --> 00:13:24.269 align:start position:0%
classes and primitive types there
system<00:13:22.839><c> that</c><00:13:23.049><c> collections</c><00:13:23.529><c> that</c><00:13:23.679><c> generic</c><00:13:24.099><c> is</c>

00:13:24.269 --> 00:13:24.279 align:start position:0%
system that collections that generic is
 

00:13:24.279 --> 00:13:26.489 align:start position:0%
system that collections that generic is
used<00:13:24.609><c> to</c><00:13:24.729><c> work</c><00:13:24.909><c> with</c><00:13:24.939><c> lists</c><00:13:25.569><c> collections</c><00:13:26.259><c> and</c>

00:13:26.489 --> 00:13:26.499 align:start position:0%
used to work with lists collections and
 

00:13:26.499 --> 00:13:28.080 align:start position:0%
used to work with lists collections and
so<00:13:26.769><c> on</c>

00:13:28.080 --> 00:13:28.090 align:start position:0%
so on
 

00:13:28.090 --> 00:13:30.690 align:start position:0%
so on
system<00:13:29.020><c> that</c><00:13:29.170><c> link</c><00:13:29.380><c> is</c><00:13:29.590><c> used</c><00:13:30.190><c> to</c><00:13:30.340><c> work</c><00:13:30.490><c> with</c>

00:13:30.690 --> 00:13:30.700 align:start position:0%
system that link is used to work with
 

00:13:30.700 --> 00:13:33.330 align:start position:0%
system that link is used to work with
data<00:13:30.910><c> and</c><00:13:31.240><c> it's</c><00:13:32.110><c> a</c><00:13:32.200><c> comprehensive</c><00:13:32.800><c> topic</c><00:13:33.160><c> that</c>

00:13:33.330 --> 00:13:33.340 align:start position:0%
data and it's a comprehensive topic that
 

00:13:33.340 --> 00:13:35.160 align:start position:0%
data and it's a comprehensive topic that
I<00:13:33.370><c> have</c><00:13:33.610><c> covered</c><00:13:34.270><c> in</c><00:13:34.390><c> my</c><00:13:34.510><c> C</c><00:13:34.690><c> sharp</c><00:13:34.870><c> Advanced</c>

00:13:35.160 --> 00:13:35.170 align:start position:0%
I have covered in my C sharp Advanced
 

00:13:35.170 --> 00:13:37.830 align:start position:0%
I have covered in my C sharp Advanced
Course<00:13:35.700><c> system</c><00:13:36.700><c> the</c><00:13:36.820><c> text</c><00:13:37.180><c> is</c><00:13:37.300><c> used</c><00:13:37.570><c> to</c><00:13:37.720><c> work</c>

00:13:37.830 --> 00:13:37.840 align:start position:0%
Course system the text is used to work
 

00:13:37.840 --> 00:13:40.110 align:start position:0%
Course system the text is used to work
with<00:13:37.870><c> tags</c><00:13:38.320><c> and</c><00:13:38.560><c> coding</c><00:13:39.100><c> and</c><00:13:39.430><c> stuff</c><00:13:39.760><c> like</c><00:13:39.880><c> that</c>

00:13:40.110 --> 00:13:40.120 align:start position:0%
with tags and coding and stuff like that
 

00:13:40.120 --> 00:13:43.440 align:start position:0%
with tags and coding and stuff like that
and<00:13:40.590><c> finally</c><00:13:41.590><c> system</c><00:13:42.220><c> the</c><00:13:42.340><c> threading</c><00:13:42.850><c> is</c><00:13:43.000><c> used</c>

00:13:43.440 --> 00:13:43.450 align:start position:0%
and finally system the threading is used
 

00:13:43.450 --> 00:13:45.360 align:start position:0%
and finally system the threading is used
to<00:13:43.660><c> build</c><00:13:43.780><c> multi-threaded</c><00:13:44.590><c> applications</c><00:13:45.190><c> in</c>

00:13:45.360 --> 00:13:45.370 align:start position:0%
to build multi-threaded applications in
 

00:13:45.370 --> 00:13:47.940 align:start position:0%
to build multi-threaded applications in
this<00:13:46.240><c> video</c><00:13:46.570><c> we're</c><00:13:46.780><c> going</c><00:13:46.900><c> to</c><00:13:46.960><c> create</c><00:13:47.200><c> a</c><00:13:47.500><c> very</c>

00:13:47.940 --> 00:13:47.950 align:start position:0%
this video we're going to create a very
 

00:13:47.950 --> 00:13:49.740 align:start position:0%
this video we're going to create a very
simple<00:13:48.130><c> application</c><00:13:48.430><c> and</c><00:13:49.120><c> we're</c><00:13:49.330><c> not</c><00:13:49.510><c> going</c>

00:13:49.740 --> 00:13:49.750 align:start position:0%
simple application and we're not going
 

00:13:49.750 --> 00:13:52.440 align:start position:0%
simple application and we're not going
to<00:13:49.780><c> use</c><00:13:49.840><c> any</c><00:13:50.260><c> of</c><00:13:50.350><c> these</c><00:13:50.530><c> for</c><00:13:51.180><c> namespaces</c><00:13:52.180><c> here</c>

00:13:52.440 --> 00:13:52.450 align:start position:0%
to use any of these for namespaces here
 

00:13:52.450 --> 00:13:56.310 align:start position:0%
to use any of these for namespaces here
so<00:13:53.290><c> we're</c><00:13:53.890><c> just</c><00:13:54.040><c> going</c><00:13:54.190><c> to</c><00:13:54.220><c> use</c><00:13:54.430><c> system</c><00:13:55.320><c> for</c>

00:13:56.310 --> 00:13:56.320 align:start position:0%
so we're just going to use system for
 

00:13:56.320 --> 00:13:57.690 align:start position:0%
so we're just going to use system for
now<00:13:56.440><c> I'll</c><00:13:56.650><c> leave</c><00:13:56.680><c> them</c><00:13:57.040><c> there</c><00:13:57.190><c> and</c><00:13:57.430><c> then</c><00:13:57.610><c> I</c>

00:13:57.690 --> 00:13:57.700 align:start position:0%
now I'll leave them there and then I
 

00:13:57.700 --> 00:13:59.210 align:start position:0%
now I'll leave them there and then I
will<00:13:57.850><c> show</c><00:13:57.970><c> you</c><00:13:58.030><c> how</c><00:13:58.240><c> to</c><00:13:58.300><c> clean</c><00:13:58.630><c> them</c><00:13:58.750><c> up</c><00:13:58.870><c> all</c>

00:13:59.210 --> 00:13:59.220 align:start position:0%
will show you how to clean them up all
 

00:13:59.220 --> 00:14:01.760 align:start position:0%
will show you how to clean them up all
right<00:14:00.220><c> so</c><00:14:00.400><c> here's</c><00:14:00.760><c> our</c><00:14:00.910><c> namespace</c><00:14:01.360><c> and</c>

00:14:01.760 --> 00:14:01.770 align:start position:0%
right so here's our namespace and
 

00:14:01.770 --> 00:14:04.260 align:start position:0%
right so here's our namespace and
insight<00:14:02.770><c> namespace</c><00:14:03.190><c> by</c><00:14:03.460><c> default</c><00:14:03.940><c> we</c><00:14:04.090><c> have</c><00:14:04.240><c> a</c>

00:14:04.260 --> 00:14:04.270 align:start position:0%
insight namespace by default we have a
 

00:14:04.270 --> 00:14:07.050 align:start position:0%
insight namespace by default we have a
class<00:14:04.630><c> called</c><00:14:04.960><c> program</c><00:14:05.500><c> so</c><00:14:06.430><c> every</c><00:14:06.670><c> console</c>

00:14:07.050 --> 00:14:07.060 align:start position:0%
class called program so every console
 

00:14:07.060 --> 00:14:08.610 align:start position:0%
class called program so every console
application<00:14:07.600><c> you</c><00:14:07.690><c> create</c><00:14:07.990><c> with</c><00:14:08.230><c> Visual</c>

00:14:08.610 --> 00:14:08.620 align:start position:0%
application you create with Visual
 

00:14:08.620 --> 00:14:11.910 align:start position:0%
application you create with Visual
Studio<00:14:08.740><c> has</c><00:14:09.190><c> a</c><00:14:09.490><c> class</c><00:14:09.940><c> called</c><00:14:10.210><c> program</c><00:14:10.920><c> inside</c>

00:14:11.910 --> 00:14:11.920 align:start position:0%
Studio has a class called program inside
 

00:14:11.920 --> 00:14:14.400 align:start position:0%
Studio has a class called program inside
program<00:14:12.370><c> by</c><00:14:12.730><c> default</c><00:14:12.790><c> we</c><00:14:13.330><c> have</c><00:14:13.570><c> a</c><00:14:13.780><c> method</c><00:14:14.200><c> or</c><00:14:14.350><c> a</c>

00:14:14.400 --> 00:14:14.410 align:start position:0%
program by default we have a method or a
 

00:14:14.410 --> 00:14:17.580 align:start position:0%
program by default we have a method or a
function<00:14:14.520><c> called</c><00:14:15.520><c> main</c><00:14:15.970><c> and</c><00:14:16.500><c> that's</c><00:14:17.500><c> the</c>

00:14:17.580 --> 00:14:17.590 align:start position:0%
function called main and that's the
 

00:14:17.590 --> 00:14:19.770 align:start position:0%
function called main and that's the
entry<00:14:17.860><c> point</c><00:14:18.100><c> to</c><00:14:18.160><c> the</c><00:14:18.220><c> application</c><00:14:18.570><c> so</c><00:14:19.570><c> when</c>

00:14:19.770 --> 00:14:19.780 align:start position:0%
entry point to the application so when
 

00:14:19.780 --> 00:14:22.980 align:start position:0%
entry point to the application so when
you<00:14:19.900><c> run</c><00:14:20.020><c> your</c><00:14:20.140><c> application</c><00:14:20.770><c> CLR</c><00:14:21.760><c> execute</c><00:14:22.660><c> the</c>

00:14:22.980 --> 00:14:22.990 align:start position:0%
you run your application CLR execute the
 

00:14:22.990 --> 00:14:25.110 align:start position:0%
you run your application CLR execute the
code<00:14:23.200><c> inside</c><00:14:23.650><c> main</c><00:14:23.860><c> method</c><00:14:23.890><c> and</c><00:14:24.370><c> that's</c><00:14:24.970><c> where</c>

00:14:25.110 --> 00:14:25.120 align:start position:0%
code inside main method and that's where
 

00:14:25.120 --> 00:14:27.630 align:start position:0%
code inside main method and that's where
everything<00:14:25.360><c> kicks</c><00:14:25.690><c> off</c><00:14:26.100><c> this</c><00:14:27.100><c> method</c><00:14:27.490><c> is</c>

00:14:27.630 --> 00:14:27.640 align:start position:0%
everything kicks off this method is
 

00:14:27.640 --> 00:14:30.210 align:start position:0%
everything kicks off this method is
declared<00:14:27.880><c> as</c><00:14:28.360><c> static</c><00:14:28.630><c> and</c><00:14:29.110><c> that's</c><00:14:29.950><c> something</c>

00:14:30.210 --> 00:14:30.220 align:start position:0%
declared as static and that's something
 

00:14:30.220 --> 00:14:31.560 align:start position:0%
declared as static and that's something
I'm<00:14:30.310><c> going</c><00:14:30.430><c> to</c><00:14:30.490><c> cover</c><00:14:30.730><c> later</c><00:14:31.120><c> in</c><00:14:31.360><c> the</c><00:14:31.450><c> next</c>

00:14:31.560 --> 00:14:31.570 align:start position:0%
I'm going to cover later in the next
 

00:14:31.570 --> 00:14:36.570 align:start position:0%
I'm going to cover later in the next
section<00:14:33.450><c> methods</c><00:14:34.450><c> have</c><00:14:34.690><c> input</c><00:14:35.290><c> and</c><00:14:35.530><c> output</c><00:14:35.950><c> so</c>

00:14:36.570 --> 00:14:36.580 align:start position:0%
section methods have input and output so
 

00:14:36.580 --> 00:14:38.820 align:start position:0%
section methods have input and output so
what<00:14:37.030><c> goes</c><00:14:37.300><c> inside</c><00:14:37.630><c> parenthesis</c><00:14:38.440><c> is</c><00:14:38.620><c> the</c>

00:14:38.820 --> 00:14:38.830 align:start position:0%
what goes inside parenthesis is the
 

00:14:38.830 --> 00:14:40.200 align:start position:0%
what goes inside parenthesis is the
input<00:14:39.010><c> to</c><00:14:39.310><c> the</c><00:14:39.400><c> method</c><00:14:39.520><c> which</c><00:14:39.880><c> we</c><00:14:40.000><c> call</c>

00:14:40.200 --> 00:14:40.210 align:start position:0%
input to the method which we call
 

00:14:40.210 --> 00:14:42.600 align:start position:0%
input to the method which we call
parameter<00:14:40.840><c> or</c><00:14:41.080><c> argument</c><00:14:41.650><c> note</c><00:14:42.580><c> that</c>

00:14:42.600 --> 00:14:42.610 align:start position:0%
parameter or argument note that
 

00:14:42.610 --> 00:14:45.000 align:start position:0%
parameter or argument note that
parameters<00:14:43.270><c> are</c><00:14:43.510><c> optional</c><00:14:43.990><c> but</c><00:14:44.530><c> in</c><00:14:44.680><c> this</c><00:14:44.800><c> case</c>

00:14:45.000 --> 00:14:45.010 align:start position:0%
parameters are optional but in this case
 

00:14:45.010 --> 00:14:47.220 align:start position:0%
parameters are optional but in this case
in<00:14:45.190><c> the</c><00:14:45.280><c> default</c><00:14:45.670><c> template</c><00:14:46.120><c> the</c><00:14:46.660><c> main</c><00:14:46.900><c> method</c>

00:14:47.220 --> 00:14:47.230 align:start position:0%
in the default template the main method
 

00:14:47.230 --> 00:14:49.590 align:start position:0%
in the default template the main method
has<00:14:47.440><c> a</c><00:14:47.650><c> parameter</c><00:14:47.950><c> called</c><00:14:48.250><c> args</c><00:14:49.090><c> which</c><00:14:49.330><c> is</c><00:14:49.480><c> of</c>

00:14:49.590 --> 00:14:49.600 align:start position:0%
has a parameter called args which is of
 

00:14:49.600 --> 00:14:51.810 align:start position:0%
has a parameter called args which is of
type<00:14:49.810><c> string</c><00:14:50.050><c> array</c><00:14:50.860><c> we're</c><00:14:51.490><c> going</c><00:14:51.520><c> to</c><00:14:51.700><c> learn</c>

00:14:51.810 --> 00:14:51.820 align:start position:0%
type string array we're going to learn
 

00:14:51.820 --> 00:14:54.440 align:start position:0%
type string array we're going to learn
about<00:14:51.970><c> string</c><00:14:52.390><c> array</c><00:14:52.570><c> in</c><00:14:52.750><c> the</c><00:14:52.840><c> next</c><00:14:53.140><c> section</c>

00:14:54.440 --> 00:14:54.450 align:start position:0%
about string array in the next section
 

00:14:54.450 --> 00:14:56.480 align:start position:0%
about string array in the next section
what<00:14:55.050><c> you</c><00:14:55.139><c> see</c><00:14:55.320><c> before</c><00:14:55.680><c> the</c><00:14:55.769><c> method</c><00:14:56.130><c> name</c><00:14:56.310><c> is</c>

00:14:56.480 --> 00:14:56.490 align:start position:0%
what you see before the method name is
 

00:14:56.490 --> 00:14:58.910 align:start position:0%
what you see before the method name is
the<00:14:57.060><c> return</c><00:14:57.389><c> type</c><00:14:57.630><c> or</c><00:14:57.870><c> the</c><00:14:58.139><c> output</c><00:14:58.649><c> of</c><00:14:58.680><c> the</c>

00:14:58.910 --> 00:14:58.920 align:start position:0%
the return type or the output of the
 

00:14:58.920 --> 00:15:01.879 align:start position:0%
the return type or the output of the
method<00:14:59.250><c> void</c><00:15:00.089><c> in</c><00:15:00.389><c> c-sharp</c><00:15:00.810><c> means</c><00:15:01.079><c> nothing</c>

00:15:01.879 --> 00:15:01.889 align:start position:0%
method void in c-sharp means nothing
 

00:15:01.889 --> 00:15:03.980 align:start position:0%
method void in c-sharp means nothing
that<00:15:02.250><c> means</c><00:15:02.430><c> this</c><00:15:02.639><c> method</c><00:15:03.120><c> does</c><00:15:03.389><c> not</c><00:15:03.420><c> return</c>

00:15:03.980 --> 00:15:03.990 align:start position:0%
that means this method does not return
 

00:15:03.990 --> 00:15:06.769 align:start position:0%
that means this method does not return
any<00:15:04.230><c> value</c><00:15:04.589><c> it</c><00:15:05.100><c> just</c><00:15:05.940><c> contains</c><00:15:06.269><c> some</c><00:15:06.510><c> code</c>

00:15:06.769 --> 00:15:06.779 align:start position:0%
any value it just contains some code
 

00:15:06.779 --> 00:15:07.900 align:start position:0%
any value it just contains some code
that's<00:15:07.320><c> it</c>

00:15:07.900 --> 00:15:07.910 align:start position:0%
that's it
 

00:15:07.910 --> 00:15:10.250 align:start position:0%
that's it
also<00:15:08.910><c> note</c><00:15:09.209><c> that</c><00:15:09.240><c> C</c><00:15:09.570><c> sharp</c><00:15:09.810><c> is</c><00:15:09.899><c> a</c><00:15:09.959><c> case</c>

00:15:10.250 --> 00:15:10.260 align:start position:0%
also note that C sharp is a case
 

00:15:10.260 --> 00:15:13.759 align:start position:0%
also note that C sharp is a case
sensitive<00:15:10.769><c> language</c><00:15:11.160><c> so</c><00:15:11.930><c> this</c><00:15:12.930><c> main</c><00:15:13.230><c> has</c><00:15:13.560><c> to</c>

00:15:13.759 --> 00:15:13.769 align:start position:0%
sensitive language so this main has to
 

00:15:13.769 --> 00:15:16.639 align:start position:0%
sensitive language so this main has to
be<00:15:13.889><c> with</c><00:15:14.130><c> capital</c><00:15:14.880><c> M</c><00:15:15.060><c> otherwise</c><00:15:15.540><c> CLR</c><00:15:16.230><c> is</c><00:15:16.440><c> not</c>

00:15:16.639 --> 00:15:16.649 align:start position:0%
be with capital M otherwise CLR is not
 

00:15:16.649 --> 00:15:18.410 align:start position:0%
be with capital M otherwise CLR is not
going<00:15:16.860><c> to</c><00:15:16.920><c> find</c><00:15:17.190><c> this</c><00:15:17.370><c> method</c><00:15:17.639><c> as</c><00:15:17.910><c> the</c><00:15:18.060><c> entry</c>

00:15:18.410 --> 00:15:18.420 align:start position:0%
going to find this method as the entry
 

00:15:18.420 --> 00:15:21.050 align:start position:0%
going to find this method as the entry
point<00:15:18.660><c> of</c><00:15:18.779><c> the</c><00:15:18.839><c> application</c><00:15:19.730><c> okay</c><00:15:20.730><c> and</c><00:15:20.910><c> one</c>

00:15:21.050 --> 00:15:21.060 align:start position:0%
point of the application okay and one
 

00:15:21.060 --> 00:15:23.780 align:start position:0%
point of the application okay and one
last<00:15:21.089><c> thing</c><00:15:21.449><c> is</c><00:15:21.660><c> note</c><00:15:21.990><c> these</c><00:15:22.230><c> curly</c><00:15:22.649><c> braces</c><00:15:22.860><c> so</c>

00:15:23.780 --> 00:15:23.790 align:start position:0%
last thing is note these curly braces so
 

00:15:23.790 --> 00:15:27.139 align:start position:0%
last thing is note these curly braces so
where<00:15:24.029><c> we</c><00:15:24.540><c> have</c><00:15:24.750><c> a</c><00:15:25.019><c> block</c><00:15:25.440><c> of</c><00:15:25.649><c> code</c><00:15:25.860><c> we</c><00:15:26.760><c> need</c><00:15:26.940><c> to</c>

00:15:27.139 --> 00:15:27.149 align:start position:0%
where we have a block of code we need to
 

00:15:27.149 --> 00:15:31.040 align:start position:0%
where we have a block of code we need to
surround<00:15:27.870><c> it</c><00:15:28.050><c> with</c><00:15:28.290><c> curly</c><00:15:29.160><c> braces</c><00:15:29.389><c> so</c><00:15:30.389><c> that</c><00:15:30.750><c> is</c>

00:15:31.040 --> 00:15:31.050 align:start position:0%
surround it with curly braces so that is
 

00:15:31.050 --> 00:15:33.949 align:start position:0%
surround it with curly braces so that is
applicable<00:15:31.560><c> for</c><00:15:31.709><c> methods</c><00:15:32.250><c> for</c><00:15:32.970><c> classes</c><00:15:33.660><c> and</c>

00:15:33.949 --> 00:15:33.959 align:start position:0%
applicable for methods for classes and
 

00:15:33.959 --> 00:15:36.430 align:start position:0%
applicable for methods for classes and
for<00:15:34.320><c> namespaces</c>

00:15:36.430 --> 00:15:36.440 align:start position:0%
for namespaces
 

00:15:36.440 --> 00:15:38.410 align:start position:0%
for namespaces
alright<00:15:36.980><c> now</c><00:15:37.130><c> let's</c><00:15:37.370><c> write</c><00:15:37.610><c> a</c><00:15:37.640><c> very</c><00:15:38.030><c> simple</c>

00:15:38.410 --> 00:15:38.420 align:start position:0%
alright now let's write a very simple
 

00:15:38.420 --> 00:15:42.760 align:start position:0%
alright now let's write a very simple
c-sharp<00:15:38.720><c> program</c><00:15:39.460><c> so</c><00:15:40.460><c> let's</c><00:15:40.490><c> go</c><00:15:40.910><c> here</c><00:15:41.620><c> we</c><00:15:42.620><c> have</c>

00:15:42.760 --> 00:15:42.770 align:start position:0%
c-sharp program so let's go here we have
 

00:15:42.770 --> 00:15:46.630 align:start position:0%
c-sharp program so let's go here we have
a<00:15:42.800><c> class</c><00:15:43.070><c> called</c><00:15:43.430><c> console</c><00:15:45.040><c> which</c><00:15:46.040><c> is</c><00:15:46.070><c> used</c><00:15:46.430><c> to</c>

00:15:46.630 --> 00:15:46.640 align:start position:0%
a class called console which is used to
 

00:15:46.640 --> 00:15:49.000 align:start position:0%
a class called console which is used to
read<00:15:47.240><c> data</c><00:15:47.510><c> from</c><00:15:47.630><c> console</c><00:15:48.200><c> or</c><00:15:48.380><c> write</c><00:15:48.650><c> data</c><00:15:48.860><c> to</c>

00:15:49.000 --> 00:15:49.010 align:start position:0%
read data from console or write data to
 

00:15:49.010 --> 00:15:52.240 align:start position:0%
read data from console or write data to
it<00:15:49.360><c> it</c><00:15:50.360><c> has</c><00:15:50.510><c> a</c><00:15:50.540><c> bunch</c><00:15:50.750><c> of</c><00:15:50.840><c> methods</c>

00:15:52.240 --> 00:15:52.250 align:start position:0%
it it has a bunch of methods
 

00:15:52.250 --> 00:15:53.770 align:start position:0%
it it has a bunch of methods
access<00:15:52.640><c> this</c><00:15:52.760><c> method</c><00:15:53.150><c> using</c><00:15:53.540><c> the</c><00:15:53.570><c> dot</c>

00:15:53.770 --> 00:15:53.780 align:start position:0%
access this method using the dot
 

00:15:53.780 --> 00:15:55.680 align:start position:0%
access this method using the dot
notation

00:15:55.680 --> 00:15:55.690 align:start position:0%
notation
 

00:15:55.690 --> 00:15:59.220 align:start position:0%
notation
and<00:15:56.130><c> here</c><00:15:57.130><c> you</c><00:15:57.280><c> see</c><00:15:57.490><c> various</c><00:15:58.450><c> members</c><00:15:58.930><c> of</c><00:15:59.110><c> this</c>

00:15:59.220 --> 00:15:59.230 align:start position:0%
and here you see various members of this
 

00:15:59.230 --> 00:16:02.520 align:start position:0%
and here you see various members of this
class<00:16:00.030><c> methods</c><00:16:01.030><c> are</c><00:16:01.210><c> indicated</c><00:16:01.750><c> by</c><00:16:01.960><c> a</c><00:16:01.990><c> purple</c>

00:16:02.520 --> 00:16:02.530 align:start position:0%
class methods are indicated by a purple
 

00:16:02.530 --> 00:16:05.550 align:start position:0%
class methods are indicated by a purple
cube<00:16:02.830><c> so</c><00:16:03.430><c> beep</c><00:16:03.820><c> is</c><00:16:04.060><c> used</c><00:16:04.660><c> to</c><00:16:04.870><c> play</c><00:16:05.230><c> a</c><00:16:05.260><c> beep</c>

00:16:05.550 --> 00:16:05.560 align:start position:0%
cube so beep is used to play a beep
 

00:16:05.560 --> 00:16:07.980 align:start position:0%
cube so beep is used to play a beep
sound<00:16:05.590><c> or</c><00:16:06.150><c> clear</c><00:16:07.150><c> is</c><00:16:07.360><c> used</c><00:16:07.570><c> to</c><00:16:07.690><c> clear</c><00:16:07.870><c> the</c>

00:16:07.980 --> 00:16:07.990 align:start position:0%
sound or clear is used to clear the
 

00:16:07.990 --> 00:16:10.110 align:start position:0%
sound or clear is used to clear the
console<00:16:08.380><c> we're</c><00:16:09.340><c> going</c><00:16:09.460><c> to</c><00:16:09.520><c> use</c><00:16:09.670><c> the</c><00:16:09.880><c> right</c>

00:16:10.110 --> 00:16:10.120 align:start position:0%
console we're going to use the right
 

00:16:10.120 --> 00:16:12.760 align:start position:0%
console we're going to use the right
line<00:16:10.480><c> method</c>

00:16:12.760 --> 00:16:12.770 align:start position:0%
line method
 

00:16:12.770 --> 00:16:14.949 align:start position:0%
line method
this<00:16:13.339><c> method</c><00:16:13.760><c> can</c><00:16:14.029><c> optionally</c><00:16:14.240><c> take</c><00:16:14.899><c> a</c>

00:16:14.949 --> 00:16:14.959 align:start position:0%
this method can optionally take a
 

00:16:14.959 --> 00:16:18.070 align:start position:0%
this method can optionally take a
parameter<00:16:15.940><c> so</c><00:16:16.940><c> I'm</c><00:16:17.120><c> going</c><00:16:17.300><c> to</c><00:16:17.330><c> pass</c><00:16:17.480><c> a</c><00:16:17.720><c> string</c>

00:16:18.070 --> 00:16:18.080 align:start position:0%
parameter so I'm going to pass a string
 

00:16:18.080 --> 00:16:23.040 align:start position:0%
parameter so I'm going to pass a string
here<00:16:18.670><c> hello</c><00:16:19.670><c> world</c><00:16:20.560><c> just</c><00:16:21.560><c> that</c><00:16:21.740><c> I</c><00:16:21.890><c> note</c><00:16:22.550><c> that</c>

00:16:23.040 --> 00:16:23.050 align:start position:0%
here hello world just that I note that
 

00:16:23.050 --> 00:16:25.150 align:start position:0%
here hello world just that I note that
statements<00:16:24.050><c> in</c><00:16:24.140><c> c-sharp</c><00:16:24.380><c> terminate</c><00:16:24.980><c> with</c><00:16:25.130><c> a</c>

00:16:25.150 --> 00:16:25.160 align:start position:0%
statements in c-sharp terminate with a
 

00:16:25.160 --> 00:16:27.960 align:start position:0%
statements in c-sharp terminate with a
semicolon<00:16:25.399><c> as</c><00:16:25.940><c> you</c><00:16:26.060><c> see</c><00:16:26.209><c> here</c>

00:16:27.960 --> 00:16:27.970 align:start position:0%
semicolon as you see here
 

00:16:27.970 --> 00:16:30.389 align:start position:0%
semicolon as you see here
now<00:16:28.119><c> take</c><00:16:28.359><c> a</c><00:16:28.389><c> look</c><00:16:28.479><c> at</c><00:16:28.779><c> using</c><00:16:29.709><c> system</c><00:16:30.129><c> on</c><00:16:30.249><c> the</c>

00:16:30.389 --> 00:16:30.399 align:start position:0%
now take a look at using system on the
 

00:16:30.399 --> 00:16:31.880 align:start position:0%
now take a look at using system on the
top

00:16:31.880 --> 00:16:31.890 align:start position:0%
top
 

00:16:31.890 --> 00:16:34.370 align:start position:0%
top
do<00:16:32.399><c> you</c><00:16:32.490><c> see</c><00:16:32.640><c> that</c><00:16:32.820><c> it's</c><00:16:33.000><c> highlighted</c><00:16:33.690><c> whereas</c>

00:16:34.370 --> 00:16:34.380 align:start position:0%
do you see that it's highlighted whereas
 

00:16:34.380 --> 00:16:36.800 align:start position:0%
do you see that it's highlighted whereas
the<00:16:34.620><c> others</c><00:16:34.890><c> are</c><00:16:35.130><c> grayed</c><00:16:35.519><c> out</c><00:16:35.550><c> the</c><00:16:36.480><c> reason</c><00:16:36.779><c> for</c>

00:16:36.800 --> 00:16:36.810 align:start position:0%
the others are grayed out the reason for
 

00:16:36.810 --> 00:16:39.380 align:start position:0%
the others are grayed out the reason for
that<00:16:36.990><c> is</c><00:16:37.410><c> in</c><00:16:37.709><c> this</c><00:16:38.399><c> file</c><00:16:38.640><c> we</c><00:16:38.910><c> are</c><00:16:38.940><c> using</c><00:16:39.149><c> a</c>

00:16:39.380 --> 00:16:39.390 align:start position:0%
that is in this file we are using a
 

00:16:39.390 --> 00:16:41.690 align:start position:0%
that is in this file we are using a
class<00:16:39.720><c> called</c><00:16:40.200><c> console</c><00:16:40.740><c> which</c><00:16:40.980><c> is</c><00:16:41.130><c> defined</c><00:16:41.550><c> in</c>

00:16:41.690 --> 00:16:41.700 align:start position:0%
class called console which is defined in
 

00:16:41.700 --> 00:16:44.210 align:start position:0%
class called console which is defined in
the<00:16:41.850><c> system</c><00:16:42.209><c> namespace</c><00:16:42.470><c> that's</c><00:16:43.470><c> why</c><00:16:43.649><c> that</c>

00:16:44.210 --> 00:16:44.220 align:start position:0%
the system namespace that's why that
 

00:16:44.220 --> 00:16:46.910 align:start position:0%
the system namespace that's why that
using<00:16:44.610><c> statement</c><00:16:45.029><c> is</c><00:16:45.149><c> active</c><00:16:45.649><c> we</c><00:16:46.649><c> are</c><00:16:46.680><c> not</c>

00:16:46.910 --> 00:16:46.920 align:start position:0%
using statement is active we are not
 

00:16:46.920 --> 00:16:48.650 align:start position:0%
using statement is active we are not
using<00:16:47.220><c> any</c><00:16:47.339><c> classes</c><00:16:47.820><c> defined</c><00:16:48.209><c> in</c><00:16:48.420><c> other</c>

00:16:48.650 --> 00:16:48.660 align:start position:0%
using any classes defined in other
 

00:16:48.660 --> 00:16:50.990 align:start position:0%
using any classes defined in other
namespaces<00:16:49.380><c> and</c><00:16:49.500><c> that's</c><00:16:49.950><c> why</c><00:16:50.130><c> they're</c><00:16:50.730><c> grayed</c>

00:16:50.990 --> 00:16:51.000 align:start position:0%
namespaces and that's why they're grayed
 

00:16:51.000 --> 00:16:53.070 align:start position:0%
namespaces and that's why they're grayed
out

00:16:53.070 --> 00:16:53.080 align:start position:0%
 
 

00:16:53.080 --> 00:16:54.480 align:start position:0%
 
so<00:16:53.260><c> we</c><00:16:53.350><c> can</c><00:16:53.500><c> get</c><00:16:53.620><c> rid</c><00:16:53.769><c> of</c><00:16:53.830><c> them</c><00:16:54.010><c> to</c><00:16:54.190><c> make</c><00:16:54.339><c> our</c>

00:16:54.480 --> 00:16:54.490 align:start position:0%
so we can get rid of them to make our
 

00:16:54.490 --> 00:16:56.910 align:start position:0%
so we can get rid of them to make our
code<00:16:54.700><c> cleaner</c><00:16:55.140><c> we</c><00:16:56.140><c> can</c><00:16:56.320><c> either</c><00:16:56.470><c> delete</c><00:16:56.649><c> each</c>

00:16:56.910 --> 00:16:56.920 align:start position:0%
code cleaner we can either delete each
 

00:16:56.920 --> 00:17:01.800 align:start position:0%
code cleaner we can either delete each
one<00:16:57.190><c> by</c><00:16:57.399><c> ctrl</c><00:16:58.060><c> X</c><00:16:58.620><c> like</c><00:16:59.620><c> that</c><00:17:00.269><c> or</c><00:17:01.269><c> if</c><00:17:01.690><c> you're</c>

00:17:01.800 --> 00:17:01.810 align:start position:0%
one by ctrl X like that or if you're
 

00:17:01.810 --> 00:17:03.630 align:start position:0%
one by ctrl X like that or if you're
using<00:17:01.990><c> resharper</c><00:17:02.620><c> you</c><00:17:02.830><c> can</c><00:17:02.980><c> get</c><00:17:03.160><c> rid</c><00:17:03.339><c> of</c><00:17:03.370><c> all</c>

00:17:03.630 --> 00:17:03.640 align:start position:0%
using resharper you can get rid of all
 

00:17:03.640 --> 00:17:04.110 align:start position:0%
using resharper you can get rid of all
of<00:17:03.670><c> them</c>

00:17:04.110 --> 00:17:04.120 align:start position:0%
of them
 

00:17:04.120 --> 00:17:06.439 align:start position:0%
of them
by<00:17:04.569><c> pressing</c><00:17:04.809><c> Alt</c><00:17:05.170><c> +</c><00:17:05.350><c> Enter</c><00:17:05.589><c> here</c><00:17:05.829><c> and</c>

00:17:06.439 --> 00:17:06.449 align:start position:0%
by pressing Alt + Enter here and
 

00:17:06.449 --> 00:17:08.370 align:start position:0%
by pressing Alt + Enter here and
selecting<00:17:07.449><c> the</c><00:17:07.569><c> first</c><00:17:07.809><c> option</c><00:17:08.199><c> which</c><00:17:08.350><c> is</c>

00:17:08.370 --> 00:17:08.380 align:start position:0%
selecting the first option which is
 

00:17:08.380 --> 00:17:11.910 align:start position:0%
selecting the first option which is
remove<00:17:08.980><c> unused</c><00:17:09.250><c> directives</c><00:17:10.059><c> in</c><00:17:10.179><c> file</c><00:17:10.530><c> so</c><00:17:11.530><c> it's</c>

00:17:11.910 --> 00:17:11.920 align:start position:0%
remove unused directives in file so it's
 

00:17:11.920 --> 00:17:14.010 align:start position:0%
remove unused directives in file so it's
faster<00:17:12.400><c> now</c><00:17:13.360><c> let's</c><00:17:13.630><c> run</c><00:17:13.750><c> the</c><00:17:13.809><c> application</c>

00:17:14.010 --> 00:17:14.020 align:start position:0%
faster now let's run the application
 

00:17:14.020 --> 00:17:20.420 align:start position:0%
faster now let's run the application
with<00:17:15.010><c> ctrl</c><00:17:15.610><c> +</c><00:17:15.819><c> f5</c>

00:17:20.420 --> 00:17:20.430 align:start position:0%
 
 

00:17:20.430 --> 00:17:22.670 align:start position:0%
 
so<00:17:21.000><c> this</c><00:17:21.420><c> window</c><00:17:21.810><c> that</c><00:17:21.960><c> you</c><00:17:22.140><c> see</c><00:17:22.290><c> here</c><00:17:22.530><c> this</c>

00:17:22.670 --> 00:17:22.680 align:start position:0%
so this window that you see here this
 

00:17:22.680 --> 00:17:24.790 align:start position:0%
so this window that you see here this
black<00:17:22.950><c> window</c><00:17:23.250><c> is</c><00:17:23.430><c> what</c><00:17:23.610><c> we</c><00:17:23.730><c> call</c><00:17:23.910><c> console</c><00:17:24.390><c> and</c>

00:17:24.790 --> 00:17:24.800 align:start position:0%
black window is what we call console and
 

00:17:24.800 --> 00:17:27.050 align:start position:0%
black window is what we call console and
that's<00:17:25.800><c> why</c><00:17:25.980><c> this</c><00:17:26.220><c> kind</c><00:17:26.430><c> of</c><00:17:26.490><c> project</c><00:17:26.970><c> is</c>

00:17:27.050 --> 00:17:27.060 align:start position:0%
that's why this kind of project is
 

00:17:27.060 --> 00:17:29.450 align:start position:0%
that's why this kind of project is
called<00:17:27.300><c> console</c><00:17:27.810><c> application</c>

00:17:29.450 --> 00:17:29.460 align:start position:0%
called console application
 

00:17:29.460 --> 00:17:31.460 align:start position:0%
called console application
you

00:17:31.460 --> 00:17:31.470 align:start position:0%
you
 

00:17:31.470 --> 00:17:33.710 align:start position:0%
you
okay<00:17:31.950><c> that's</c><00:17:32.159><c> it</c><00:17:32.279><c> for</c><00:17:32.309><c> this</c><00:17:32.519><c> lecture</c><00:17:32.759><c> from</c>

00:17:33.710 --> 00:17:33.720 align:start position:0%
okay that's it for this lecture from
 

00:17:33.720 --> 00:17:35.360 align:start position:0%
okay that's it for this lecture from
this<00:17:33.929><c> point</c><00:17:34.200><c> in</c><00:17:34.470><c> every</c><00:17:34.799><c> lecture</c><00:17:35.100><c> we're</c><00:17:35.250><c> going</c>

00:17:35.360 --> 00:17:35.370 align:start position:0%
this point in every lecture we're going
 

00:17:35.370 --> 00:17:36.919 align:start position:0%
this point in every lecture we're going
to<00:17:35.460><c> learn</c><00:17:35.580><c> something</c><00:17:35.879><c> new</c><00:17:36.029><c> about</c><00:17:36.149><c> c-sharp</c><00:17:36.720><c> and</c>

00:17:36.919 --> 00:17:36.929 align:start position:0%
to learn something new about c-sharp and
 

00:17:36.929 --> 00:17:38.960 align:start position:0%
to learn something new about c-sharp and
we<00:17:37.350><c> can</c><00:17:37.500><c> write</c><00:17:37.740><c> more</c><00:17:38.100><c> interesting</c><00:17:38.700><c> and</c><00:17:38.850><c> more</c>

00:17:38.960 --> 00:17:38.970 align:start position:0%
we can write more interesting and more
 

00:17:38.970 --> 00:17:40.820 align:start position:0%
we can write more interesting and more
complex<00:17:39.330><c> programs</c><00:17:39.570><c> I</c><00:17:40.019><c> hope</c><00:17:40.440><c> you</c><00:17:40.529><c> enjoyed</c><00:17:40.740><c> this</c>

00:17:40.820 --> 00:17:40.830 align:start position:0%
complex programs I hope you enjoyed this
 

00:17:40.830 --> 00:17:42.430 align:start position:0%
complex programs I hope you enjoyed this
lecture<00:17:41.159><c> and</c><00:17:41.340><c> thank</c><00:17:41.639><c> you</c><00:17:41.700><c> for</c><00:17:41.850><c> watching</c>

00:17:42.430 --> 00:17:42.440 align:start position:0%
lecture and thank you for watching
 

00:17:42.440 --> 00:17:45.889 align:start position:0%
lecture and thank you for watching
well<00:17:43.440><c> hello</c><00:17:44.039><c> it's</c><00:17:44.610><c> mush</c><00:17:44.850><c> here</c><00:17:45.149><c> your</c><00:17:45.480><c> C</c><00:17:45.659><c> sharp</c>

00:17:45.889 --> 00:17:45.899 align:start position:0%
well hello it's mush here your C sharp
 

00:17:45.899 --> 00:17:48.139 align:start position:0%
well hello it's mush here your C sharp
instructor<00:17:46.409><c> I</c><00:17:46.649><c> just</c><00:17:47.490><c> wanted</c><00:17:47.669><c> to</c><00:17:47.759><c> quickly</c><00:17:47.879><c> let</c>

00:17:48.139 --> 00:17:48.149 align:start position:0%
instructor I just wanted to quickly let
 

00:17:48.149 --> 00:17:49.610 align:start position:0%
instructor I just wanted to quickly let
you<00:17:48.299><c> know</c><00:17:48.419><c> that</c><00:17:48.990><c> this</c><00:17:49.139><c> video</c><00:17:49.470><c> you've</c><00:17:49.590><c> been</c>

00:17:49.610 --> 00:17:49.620 align:start position:0%
you know that this video you've been
 

00:17:49.620 --> 00:17:51.860 align:start position:0%
you know that this video you've been
watching<00:17:49.799><c> is</c><00:17:50.309><c> actually</c><00:17:51.029><c> part</c><00:17:51.240><c> of</c><00:17:51.299><c> my</c><00:17:51.360><c> c-sharp</c>

00:17:51.860 --> 00:17:51.870 align:start position:0%
watching is actually part of my c-sharp
 

00:17:51.870 --> 00:17:54.649 align:start position:0%
watching is actually part of my c-sharp
basics<00:17:52.289><c> course</c><00:17:52.470><c> on</c><00:17:52.740><c> udemy</c><00:17:53.100><c> in</c><00:17:53.370><c> this</c><00:17:54.210><c> course</c><00:17:54.450><c> I</c>

00:17:54.649 --> 00:17:54.659 align:start position:0%
basics course on udemy in this course I
 

00:17:54.659 --> 00:17:56.570 align:start position:0%
basics course on udemy in this course I
walk<00:17:55.139><c> you</c><00:17:55.259><c> through</c><00:17:55.440><c> all</c><00:17:55.470><c> the</c><00:17:55.919><c> core</c><00:17:56.129><c> concepts</c>

00:17:56.570 --> 00:17:56.580 align:start position:0%
walk you through all the core concepts
 

00:17:56.580 --> 00:17:58.450 align:start position:0%
walk you through all the core concepts
of<00:17:56.669><c> c-sharp</c><00:17:56.909><c> in</c><00:17:57.269><c> a</c><00:17:57.539><c> step-by-step</c><00:17:57.840><c> fashion</c>

00:17:58.450 --> 00:17:58.460 align:start position:0%
of c-sharp in a step-by-step fashion
 

00:17:58.460 --> 00:18:01.759 align:start position:0%
of c-sharp in a step-by-step fashion
plus<00:17:59.460><c> you</c><00:17:59.850><c> get</c><00:18:00.000><c> access</c><00:18:00.240><c> to</c><00:18:00.450><c> exercises</c><00:18:01.259><c> cheat</c>

00:18:01.759 --> 00:18:01.769 align:start position:0%
plus you get access to exercises cheat
 

00:18:01.769 --> 00:18:03.529 align:start position:0%
plus you get access to exercises cheat
sheets<00:18:02.039><c> and</c><00:18:02.190><c> a</c><00:18:02.519><c> discussion</c><00:18:02.850><c> board</c><00:18:03.210><c> to</c><00:18:03.389><c> ask</c>

00:18:03.529 --> 00:18:03.539 align:start position:0%
sheets and a discussion board to ask
 

00:18:03.539 --> 00:18:05.539 align:start position:0%
sheets and a discussion board to ask
your<00:18:03.750><c> questions</c><00:18:04.139><c> in</c><00:18:04.320><c> case</c><00:18:05.220><c> you're</c><00:18:05.370><c> interested</c>

00:18:05.539 --> 00:18:05.549 align:start position:0%
your questions in case you're interested
 

00:18:05.549 --> 00:18:07.610 align:start position:0%
your questions in case you're interested
you<00:18:06.149><c> can</c><00:18:06.299><c> get</c><00:18:06.480><c> this</c><00:18:06.600><c> course</c><00:18:06.870><c> with</c><00:18:07.110><c> a</c><00:18:07.139><c> discount</c>

00:18:07.610 --> 00:18:07.620 align:start position:0%
you can get this course with a discount
 

00:18:07.620 --> 00:18:09.310 align:start position:0%
you can get this course with a discount
using<00:18:08.039><c> the</c><00:18:08.279><c> link</c><00:18:08.519><c> in</c><00:18:08.669><c> the</c><00:18:08.940><c> video</c><00:18:09.120><c> description</c>

00:18:09.310 --> 00:18:09.320 align:start position:0%
using the link in the video description
 

00:18:09.320 --> 00:18:11.629 align:start position:0%
using the link in the video description
and<00:18:10.320><c> if</c><00:18:10.470><c> not</c><00:18:10.620><c> that's</c><00:18:11.009><c> perfectly</c><00:18:11.399><c> fine</c>

00:18:11.629 --> 00:18:11.639 align:start position:0%
and if not that's perfectly fine
 

00:18:11.639 --> 00:18:14.090 align:start position:0%
and if not that's perfectly fine
continue<00:18:12.509><c> watching</c><00:18:12.690><c> as</c><00:18:13.080><c> the</c><00:18:13.379><c> next</c><00:18:13.679><c> section</c><00:18:13.980><c> is</c>

00:18:14.090 --> 00:18:14.100 align:start position:0%
continue watching as the next section is
 

00:18:14.100 --> 00:18:21.259 align:start position:0%
continue watching as the next section is
coming<00:18:14.370><c> up</c><00:18:19.309><c> okay</c><00:18:20.309><c> this</c><00:18:20.490><c> section</c><00:18:20.850><c> is</c><00:18:21.029><c> going</c><00:18:21.210><c> to</c>

00:18:21.259 --> 00:18:21.269 align:start position:0%
coming up okay this section is going to
 

00:18:21.269 --> 00:18:23.029 align:start position:0%
coming up okay this section is going to
be<00:18:21.389><c> the</c><00:18:21.509><c> first</c><00:18:21.809><c> step</c><00:18:22.049><c> in</c><00:18:22.200><c> your</c><00:18:22.529><c> journey</c><00:18:22.889><c> to</c>

00:18:23.029 --> 00:18:23.039 align:start position:0%
be the first step in your journey to
 

00:18:23.039 --> 00:18:25.070 align:start position:0%
be the first step in your journey to
learn<00:18:23.279><c> c-sharp</c><00:18:23.909><c> so</c><00:18:24.539><c> I'm</c><00:18:24.629><c> going</c><00:18:24.750><c> to</c><00:18:24.840><c> introduce</c>

00:18:25.070 --> 00:18:25.080 align:start position:0%
learn c-sharp so I'm going to introduce
 

00:18:25.080 --> 00:18:27.110 align:start position:0%
learn c-sharp so I'm going to introduce
you<00:18:25.379><c> to</c><00:18:25.409><c> variables</c><00:18:26.039><c> and</c><00:18:26.220><c> constants</c><00:18:26.759><c> I'm</c><00:18:26.940><c> going</c>

00:18:27.110 --> 00:18:27.120 align:start position:0%
you to variables and constants I'm going
 

00:18:27.120 --> 00:18:29.299 align:start position:0%
you to variables and constants I'm going
to<00:18:27.179><c> talk</c><00:18:27.330><c> about</c><00:18:27.509><c> various</c><00:18:28.350><c> data</c><00:18:28.649><c> types</c><00:18:28.769><c> and</c>

00:18:29.299 --> 00:18:29.309 align:start position:0%
to talk about various data types and
 

00:18:29.309 --> 00:18:31.669 align:start position:0%
to talk about various data types and
type<00:18:29.879><c> conversion</c><00:18:30.509><c> I'm</c><00:18:30.629><c> going</c><00:18:31.289><c> to</c><00:18:31.350><c> talk</c><00:18:31.529><c> about</c>

00:18:31.669 --> 00:18:31.679 align:start position:0%
type conversion I'm going to talk about
 

00:18:31.679 --> 00:18:35.029 align:start position:0%
type conversion I'm going to talk about
scope<00:18:32.429><c> and</c><00:18:32.929><c> overflowing</c><00:18:33.929><c> and</c><00:18:34.080><c> finally</c><00:18:34.919><c> I'm</c>

00:18:35.029 --> 00:18:35.039 align:start position:0%
scope and overflowing and finally I'm
 

00:18:35.039 --> 00:18:37.009 align:start position:0%
scope and overflowing and finally I'm
going<00:18:35.159><c> to</c><00:18:35.250><c> talk</c><00:18:35.399><c> about</c><00:18:35.580><c> various</c><00:18:36.179><c> operators</c><00:18:36.690><c> we</c>

00:18:37.009 --> 00:18:37.019 align:start position:0%
going to talk about various operators we
 

00:18:37.019 --> 00:18:42.860 align:start position:0%
going to talk about various operators we
have<00:18:37.230><c> in</c><00:18:37.470><c> c-sharp</c><00:18:37.919><c> so</c><00:18:38.429><c> let's</c><00:18:38.730><c> get</c><00:18:38.850><c> started</c>

00:18:42.860 --> 00:18:42.870 align:start position:0%
 
 

00:18:42.870 --> 00:18:44.690 align:start position:0%
 
okay<00:18:43.650><c> we</c><00:18:44.070><c> are</c><00:18:44.130><c> going</c><00:18:44.310><c> to</c><00:18:44.370><c> start</c><00:18:44.580><c> our</c><00:18:44.670><c> journey</c>

00:18:44.690 --> 00:18:44.700 align:start position:0%
okay we are going to start our journey
 

00:18:44.700 --> 00:18:46.550 align:start position:0%
okay we are going to start our journey
by<00:18:45.300><c> learning</c><00:18:45.570><c> about</c><00:18:45.780><c> variables</c><00:18:46.410><c> and</c>

00:18:46.550 --> 00:18:46.560 align:start position:0%
by learning about variables and
 

00:18:46.560 --> 00:18:50.380 align:start position:0%
by learning about variables and
constants

00:18:50.380 --> 00:18:50.390 align:start position:0%
 
 

00:18:50.390 --> 00:18:53.020 align:start position:0%
 
a<00:18:50.420><c> variable</c><00:18:51.110><c> is</c><00:18:51.350><c> a</c><00:18:51.440><c> name</c><00:18:51.800><c> that</c><00:18:52.010><c> we</c><00:18:52.340><c> give</c><00:18:52.550><c> to</c><00:18:52.790><c> a</c>

00:18:53.020 --> 00:18:53.030 align:start position:0%
a variable is a name that we give to a
 

00:18:53.030 --> 00:18:55.240 align:start position:0%
a variable is a name that we give to a
storage<00:18:53.450><c> location</c><00:18:53.660><c> in</c><00:18:54.080><c> memory</c><00:18:54.230><c> where</c><00:18:54.950><c> we</c><00:18:55.100><c> can</c>

00:18:55.240 --> 00:18:55.250 align:start position:0%
storage location in memory where we can
 

00:18:55.250 --> 00:18:57.970 align:start position:0%
storage location in memory where we can
store<00:18:55.490><c> a</c><00:18:55.520><c> value</c><00:18:56.020><c> any</c><00:18:57.020><c> constant</c><00:18:57.560><c> in</c><00:18:57.740><c> an</c>

00:18:57.970 --> 00:18:57.980 align:start position:0%
store a value any constant in an
 

00:18:57.980 --> 00:19:00.520 align:start position:0%
store a value any constant in an
immutable<00:18:58.370><c> value</c><00:18:58.880><c> that</c><00:18:59.540><c> is</c><00:18:59.690><c> a</c><00:18:59.720><c> value</c><00:19:00.080><c> that</c><00:19:00.320><c> we</c>

00:19:00.520 --> 00:19:00.530 align:start position:0%
immutable value that is a value that we
 

00:19:00.530 --> 00:19:02.800 align:start position:0%
immutable value that is a value that we
know<00:19:00.710><c> at</c><00:19:00.980><c> compile</c><00:19:01.400><c> time</c><00:19:01.430><c> and</c><00:19:01.820><c> that</c><00:19:02.540><c> value</c>

00:19:02.800 --> 00:19:02.810 align:start position:0%
know at compile time and that value
 

00:19:02.810 --> 00:19:04.570 align:start position:0%
know at compile time and that value
cannot<00:19:03.140><c> change</c><00:19:03.410><c> throughout</c><00:19:03.920><c> the</c><00:19:03.980><c> life</c><00:19:04.310><c> of</c><00:19:04.430><c> the</c>

00:19:04.570 --> 00:19:04.580 align:start position:0%
cannot change throughout the life of the
 

00:19:04.580 --> 00:19:07.660 align:start position:0%
cannot change throughout the life of the
application<00:19:05.120><c> why</c><00:19:06.080><c> do</c><00:19:06.140><c> we</c><00:19:06.320><c> use</c><00:19:06.350><c> constants</c><00:19:07.100><c> the</c>

00:19:07.660 --> 00:19:07.670 align:start position:0%
application why do we use constants the
 

00:19:07.670 --> 00:19:09.370 align:start position:0%
application why do we use constants the
reason<00:19:07.970><c> for</c><00:19:08.090><c> that</c><00:19:08.240><c> is</c><00:19:08.510><c> to</c><00:19:08.660><c> create</c><00:19:08.930><c> safety</c><00:19:09.170><c> in</c>

00:19:09.370 --> 00:19:09.380 align:start position:0%
reason for that is to create safety in
 

00:19:09.380 --> 00:19:12.100 align:start position:0%
reason for that is to create safety in
our<00:19:09.470><c> application</c><00:19:10.450><c> imagine</c><00:19:11.450><c> you're</c><00:19:11.630><c> creating</c>

00:19:12.100 --> 00:19:12.110 align:start position:0%
our application imagine you're creating
 

00:19:12.110 --> 00:19:13.840 align:start position:0%
our application imagine you're creating
an<00:19:12.230><c> application</c><00:19:12.380><c> that</c><00:19:13.070><c> involves</c><00:19:13.400><c> some</c>

00:19:13.840 --> 00:19:13.850 align:start position:0%
an application that involves some
 

00:19:13.850 --> 00:19:15.960 align:start position:0%
an application that involves some
mathematical<00:19:14.450><c> computation</c><00:19:14.780><c> around</c><00:19:15.440><c> circles</c>

00:19:15.960 --> 00:19:15.970 align:start position:0%
mathematical computation around circles
 

00:19:15.970 --> 00:19:18.510 align:start position:0%
mathematical computation around circles
we<00:19:16.970><c> have</c><00:19:17.120><c> this</c><00:19:17.240><c> number</c><00:19:17.420><c> called</c><00:19:17.840><c> P</c><00:19:18.080><c> which</c><00:19:18.410><c> is</c>

00:19:18.510 --> 00:19:18.520 align:start position:0%
we have this number called P which is
 

00:19:18.520 --> 00:19:22.480 align:start position:0%
we have this number called P which is
3.14<00:19:19.520><c> and</c><00:19:20.180><c> we</c><00:19:20.750><c> use</c><00:19:20.930><c> that</c><00:19:21.140><c> to</c><00:19:21.410><c> calculate</c><00:19:21.980><c> the</c>

00:19:22.480 --> 00:19:22.490 align:start position:0%
3.14 and we use that to calculate the
 

00:19:22.490 --> 00:19:25.270 align:start position:0%
3.14 and we use that to calculate the
area<00:19:22.640><c> of</c><00:19:23.000><c> a</c><00:19:23.090><c> circle</c><00:19:23.590><c> that</c><00:19:24.590><c> number</c><00:19:24.980><c> should</c>

00:19:25.270 --> 00:19:25.280 align:start position:0%
area of a circle that number should
 

00:19:25.280 --> 00:19:27.550 align:start position:0%
area of a circle that number should
always<00:19:25.490><c> be</c><00:19:25.880><c> the</c><00:19:26.000><c> same</c><00:19:26.180><c> we</c><00:19:27.080><c> don't</c><00:19:27.290><c> want</c><00:19:27.440><c> to</c>

00:19:27.550 --> 00:19:27.560 align:start position:0%
always be the same we don't want to
 

00:19:27.560 --> 00:19:29.290 align:start position:0%
always be the same we don't want to
accidentally<00:19:28.070><c> change</c><00:19:28.430><c> that</c><00:19:28.640><c> in</c><00:19:28.760><c> our</c><00:19:28.880><c> program</c>

00:19:29.290 --> 00:19:29.300 align:start position:0%
accidentally change that in our program
 

00:19:29.300 --> 00:19:32.140 align:start position:0%
accidentally change that in our program
if<00:19:30.260><c> you</c><00:19:30.440><c> accidently</c><00:19:30.950><c> change</c><00:19:31.190><c> that</c><00:19:31.430><c> everything</c>

00:19:32.140 --> 00:19:32.150 align:start position:0%
if you accidently change that everything
 

00:19:32.150 --> 00:19:33.520 align:start position:0%
if you accidently change that everything
is<00:19:32.240><c> going</c><00:19:32.420><c> to</c><00:19:32.450><c> blow</c><00:19:32.630><c> up</c><00:19:32.810><c> in</c><00:19:32.990><c> terms</c><00:19:33.230><c> of</c><00:19:33.410><c> the</c>

00:19:33.520 --> 00:19:33.530 align:start position:0%
is going to blow up in terms of the
 

00:19:33.530 --> 00:19:36.790 align:start position:0%
is going to blow up in terms of the
results<00:19:33.980><c> the</c><00:19:34.160><c> program</c><00:19:34.580><c> produces</c><00:19:35.680><c> so</c><00:19:36.680><c> we</c>

00:19:36.790 --> 00:19:36.800 align:start position:0%
results the program produces so we
 

00:19:36.800 --> 00:19:39.510 align:start position:0%
results the program produces so we
declare<00:19:37.160><c> that</c><00:19:37.190><c> number</c><00:19:37.700><c> as</c><00:19:37.910><c> a</c><00:19:37.970><c> constant</c>

00:19:39.510 --> 00:19:39.520 align:start position:0%
declare that number as a constant
 

00:19:39.520 --> 00:19:41.610 align:start position:0%
declare that number as a constant
and<00:19:39.610><c> this</c><00:19:40.150><c> way</c><00:19:40.330><c> we</c><00:19:40.570><c> create</c><00:19:40.720><c> safety</c><00:19:41.410><c> in</c><00:19:41.530><c> our</c>

00:19:41.610 --> 00:19:41.620 align:start position:0%
and this way we create safety in our
 

00:19:41.620 --> 00:19:45.780 align:start position:0%
and this way we create safety in our
application<00:19:42.220><c> in</c><00:19:43.980><c> c-sharp</c><00:19:44.980><c> to</c><00:19:45.430><c> declare</c><00:19:45.760><c> a</c>

00:19:45.780 --> 00:19:45.790 align:start position:0%
application in c-sharp to declare a
 

00:19:45.790 --> 00:19:48.420 align:start position:0%
application in c-sharp to declare a
variable<00:19:45.970><c> we</c><00:19:46.540><c> start</c><00:19:46.810><c> with</c><00:19:46.960><c> the</c><00:19:47.020><c> type</c><00:19:47.430><c> followed</c>

00:19:48.420 --> 00:19:48.430 align:start position:0%
variable we start with the type followed
 

00:19:48.430 --> 00:19:52.340 align:start position:0%
variable we start with the type followed
by<00:19:48.580><c> an</c><00:19:48.670><c> identifier</c><00:19:49.300><c> and</c><00:19:50.010><c> finally</c><00:19:51.010><c> semicolon</c>

00:19:52.340 --> 00:19:52.350 align:start position:0%
by an identifier and finally semicolon
 

00:19:52.350 --> 00:19:56.010 align:start position:0%
by an identifier and finally semicolon
here<00:19:53.350><c> ain't</c><00:19:53.710><c> represent</c><00:19:54.640><c> integer</c><00:19:55.270><c> which</c><00:19:55.840><c> is</c><00:19:55.870><c> a</c>

00:19:56.010 --> 00:19:56.020 align:start position:0%
here ain't represent integer which is a
 

00:19:56.020 --> 00:19:58.710 align:start position:0%
here ain't represent integer which is a
number<00:19:56.380><c> between</c><00:19:56.830><c> minus</c><00:19:57.040><c> 2</c><00:19:57.430><c> billion</c><00:19:57.970><c> and</c><00:19:58.120><c> plus</c>

00:19:58.710 --> 00:19:58.720 align:start position:0%
number between minus 2 billion and plus
 

00:19:58.720 --> 00:20:00.930 align:start position:0%
number between minus 2 billion and plus
2<00:19:58.930><c> billion</c><00:19:59.230><c> later</c><00:20:00.070><c> in</c><00:20:00.310><c> this</c><00:20:00.430><c> video</c><00:20:00.700><c> I</c><00:20:00.880><c> will</c>

00:20:00.930 --> 00:20:00.940 align:start position:0%
2 billion later in this video I will
 

00:20:00.940 --> 00:20:02.820 align:start position:0%
2 billion later in this video I will
show<00:20:01.180><c> you</c><00:20:01.210><c> all</c><00:20:01.630><c> the</c><00:20:01.810><c> primitive</c><00:20:02.080><c> types</c><00:20:02.500><c> that</c>

00:20:02.820 --> 00:20:02.830 align:start position:0%
show you all the primitive types that
 

00:20:02.830 --> 00:20:03.830 align:start position:0%
show you all the primitive types that
you<00:20:02.950><c> need</c><00:20:03.100><c> to</c><00:20:03.190><c> know</c>

00:20:03.830 --> 00:20:03.840 align:start position:0%
you need to know
 

00:20:03.840 --> 00:20:06.600 align:start position:0%
you need to know
also<00:20:04.840><c> note</c><00:20:05.170><c> that</c><00:20:05.410><c> C</c><00:20:05.740><c> sharp</c><00:20:06.010><c> is</c><00:20:06.160><c> a</c><00:20:06.220><c> case</c>

00:20:06.600 --> 00:20:06.610 align:start position:0%
also note that C sharp is a case
 

00:20:06.610 --> 00:20:08.790 align:start position:0%
also note that C sharp is a case
sensitive<00:20:07.150><c> language</c><00:20:07.570><c> which</c><00:20:08.140><c> means</c><00:20:08.350><c> in</c><00:20:08.590><c> this</c>

00:20:08.790 --> 00:20:08.800 align:start position:0%
sensitive language which means in this
 

00:20:08.800 --> 00:20:11.310 align:start position:0%
sensitive language which means in this
case<00:20:09.010><c> these</c><00:20:09.520><c> two</c><00:20:09.580><c> identifiers</c><00:20:10.300><c> are</c><00:20:10.690><c> different</c>

00:20:11.310 --> 00:20:11.320 align:start position:0%
case these two identifiers are different
 

00:20:11.320 --> 00:20:14.490 align:start position:0%
case these two identifiers are different
one<00:20:11.890><c> has</c><00:20:12.130><c> lowercase</c><00:20:12.910><c> n</c><00:20:13.150><c> and</c><00:20:13.390><c> 1</c><00:20:13.660><c> has</c><00:20:13.900><c> uppercase</c>

00:20:14.490 --> 00:20:14.500 align:start position:0%
one has lowercase n and 1 has uppercase
 

00:20:14.500 --> 00:20:16.509 align:start position:0%
one has lowercase n and 1 has uppercase
n

00:20:16.509 --> 00:20:16.519 align:start position:0%
n
 

00:20:16.519 --> 00:20:18.009 align:start position:0%
n
when<00:20:16.609><c> declaring</c><00:20:16.820><c> a</c><00:20:17.209><c> variable</c><00:20:17.239><c> we</c><00:20:17.899><c> can</c>

00:20:18.009 --> 00:20:18.019 align:start position:0%
when declaring a variable we can
 

00:20:18.019 --> 00:20:20.320 align:start position:0%
when declaring a variable we can
optionally<00:20:18.259><c> assign</c><00:20:18.739><c> it</c><00:20:19.039><c> the</c><00:20:19.070><c> value</c><00:20:19.179><c> like</c><00:20:20.179><c> what</c>

00:20:20.320 --> 00:20:20.330 align:start position:0%
optionally assign it the value like what
 

00:20:20.330 --> 00:20:23.139 align:start position:0%
optionally assign it the value like what
you<00:20:20.419><c> see</c><00:20:20.539><c> here</c><00:20:20.839><c> you</c><00:20:21.739><c> don't</c><00:20:21.889><c> have</c><00:20:22.039><c> to</c><00:20:22.190><c> but</c><00:20:22.999><c> there</c>

00:20:23.139 --> 00:20:23.149 align:start position:0%
you see here you don't have to but there
 

00:20:23.149 --> 00:20:24.099 align:start position:0%
you see here you don't have to but there
is<00:20:23.239><c> one</c><00:20:23.419><c> thing</c><00:20:23.599><c> you</c><00:20:23.629><c> need</c><00:20:23.809><c> to</c><00:20:23.929><c> know</c><00:20:24.049><c> about</c>

00:20:24.099 --> 00:20:24.109 align:start position:0%
is one thing you need to know about
 

00:20:24.109 --> 00:20:26.919 align:start position:0%
is one thing you need to know about
variables<00:20:24.739><c> and</c><00:20:24.950><c> that</c><00:20:25.369><c> is</c><00:20:25.519><c> you</c><00:20:26.089><c> cannot</c><00:20:26.539><c> use</c><00:20:26.899><c> a</c>

00:20:26.919 --> 00:20:26.929 align:start position:0%
variables and that is you cannot use a
 

00:20:26.929 --> 00:20:29.919 align:start position:0%
variables and that is you cannot use a
variable<00:20:27.379><c> unless</c><00:20:28.099><c> you</c><00:20:28.249><c> initialize</c><00:20:28.759><c> it</c><00:20:28.940><c> so</c>

00:20:29.919 --> 00:20:29.929 align:start position:0%
variable unless you initialize it so
 

00:20:29.929 --> 00:20:31.899 align:start position:0%
variable unless you initialize it so
let's<00:20:30.139><c> say</c><00:20:30.259><c> if</c><00:20:30.409><c> I</c><00:20:30.529><c> declare</c><00:20:30.919><c> this</c><00:20:31.129><c> int</c><00:20:31.399><c> number</c>

00:20:31.899 --> 00:20:31.909 align:start position:0%
let's say if I declare this int number
 

00:20:31.909 --> 00:20:34.509 align:start position:0%
let's say if I declare this int number
here<00:20:32.419><c> and</c><00:20:32.599><c> I</c><00:20:32.869><c> decide</c><00:20:33.229><c> to</c><00:20:33.279><c> display</c><00:20:34.279><c> it</c><00:20:34.369><c> on</c><00:20:34.459><c> the</c>

00:20:34.509 --> 00:20:34.519 align:start position:0%
here and I decide to display it on the
 

00:20:34.519 --> 00:20:36.669 align:start position:0%
here and I decide to display it on the
console<00:20:35.059><c> my</c><00:20:35.479><c> application</c><00:20:36.019><c> will</c><00:20:36.169><c> not</c><00:20:36.349><c> become</c>

00:20:36.669 --> 00:20:36.679 align:start position:0%
console my application will not become
 

00:20:36.679 --> 00:20:39.369 align:start position:0%
console my application will not become
part<00:20:36.950><c> I</c><00:20:37.190><c> have</c><00:20:38.029><c> to</c><00:20:38.149><c> assign</c><00:20:38.359><c> it</c><00:20:38.419><c> a</c><00:20:38.629><c> value</c><00:20:38.659><c> before</c>

00:20:39.369 --> 00:20:39.379 align:start position:0%
part I have to assign it a value before
 

00:20:39.379 --> 00:20:41.889 align:start position:0%
part I have to assign it a value before
I<00:20:39.409><c> can</c><00:20:39.679><c> use</c><00:20:39.709><c> it</c><00:20:40.039><c> before</c><00:20:40.219><c> I</c><00:20:40.429><c> can</c><00:20:40.669><c> read</c><00:20:40.879><c> it</c><00:20:41.029><c> I</c><00:20:41.179><c> will</c>

00:20:41.889 --> 00:20:41.899 align:start position:0%
I can use it before I can read it I will
 

00:20:41.899 --> 00:20:43.479 align:start position:0%
I can use it before I can read it I will
show<00:20:42.169><c> you</c><00:20:42.229><c> that</c><00:20:42.409><c> later</c><00:20:42.679><c> when</c><00:20:42.950><c> we</c><00:20:43.099><c> jump</c><00:20:43.339><c> to</c>

00:20:43.479 --> 00:20:43.489 align:start position:0%
show you that later when we jump to
 

00:20:43.489 --> 00:20:44.900 align:start position:0%
show you that later when we jump to
coding

00:20:44.900 --> 00:20:44.910 align:start position:0%
coding
 

00:20:44.910 --> 00:20:47.000 align:start position:0%
coding
to<00:20:45.180><c> declare</c><00:20:45.450><c> constant</c><00:20:46.080><c> we</c><00:20:46.320><c> start</c><00:20:46.710><c> with</c><00:20:46.890><c> the</c>

00:20:47.000 --> 00:20:47.010 align:start position:0%
to declare constant we start with the
 

00:20:47.010 --> 00:20:49.730 align:start position:0%
to declare constant we start with the
keyword<00:20:47.780><c> next</c><00:20:48.780><c> we</c><00:20:48.900><c> have</c><00:20:49.080><c> the</c><00:20:49.260><c> datatype</c>

00:20:49.730 --> 00:20:49.740 align:start position:0%
keyword next we have the datatype
 

00:20:49.740 --> 00:20:52.880 align:start position:0%
keyword next we have the datatype
and<00:20:50.010><c> an</c><00:20:50.730><c> identifier</c><00:20:51.360><c> and</c><00:20:51.600><c> here</c><00:20:52.290><c> we</c><00:20:52.440><c> have</c><00:20:52.680><c> to</c>

00:20:52.880 --> 00:20:52.890 align:start position:0%
and an identifier and here we have to
 

00:20:52.890 --> 00:20:55.130 align:start position:0%
and an identifier and here we have to
initialize<00:20:53.370><c> it</c><00:20:53.400><c> with</c><00:20:53.610><c> some</c><00:20:53.880><c> value</c><00:20:54.180><c> we</c><00:20:54.900><c> cannot</c>

00:20:55.130 --> 00:20:55.140 align:start position:0%
initialize it with some value we cannot
 

00:20:55.140 --> 00:20:57.020 align:start position:0%
initialize it with some value we cannot
define<00:20:55.500><c> a</c><00:20:55.560><c> constant</c><00:20:55.950><c> without</c><00:20:56.490><c> setting</c><00:20:56.880><c> its</c>

00:20:57.020 --> 00:20:57.030 align:start position:0%
define a constant without setting its
 

00:20:57.030 --> 00:20:59.430 align:start position:0%
define a constant without setting its
value

00:20:59.430 --> 00:20:59.440 align:start position:0%
 
 

00:20:59.440 --> 00:21:00.990 align:start position:0%
 
there<00:20:59.980><c> are</c><00:21:00.130><c> a</c><00:21:00.160><c> few</c><00:21:00.400><c> things</c><00:21:00.550><c> you</c><00:21:00.730><c> need</c><00:21:00.850><c> to</c><00:21:00.910><c> know</c>

00:21:00.990 --> 00:21:01.000 align:start position:0%
there are a few things you need to know
 

00:21:01.000 --> 00:21:03.600 align:start position:0%
there are a few things you need to know
about<00:21:01.180><c> identifiers</c><00:21:01.980><c> first</c><00:21:02.980><c> one</c><00:21:03.130><c> is</c><00:21:03.250><c> that</c><00:21:03.430><c> an</c>

00:21:03.600 --> 00:21:03.610 align:start position:0%
about identifiers first one is that an
 

00:21:03.610 --> 00:21:06.270 align:start position:0%
about identifiers first one is that an
identifier<00:21:04.240><c> cannot</c><00:21:04.720><c> start</c><00:21:04.990><c> with</c><00:21:05.200><c> a</c><00:21:05.230><c> number</c><00:21:05.290><c> so</c>

00:21:06.270 --> 00:21:06.280 align:start position:0%
identifier cannot start with a number so
 

00:21:06.280 --> 00:21:07.920 align:start position:0%
identifier cannot start with a number so
you<00:21:06.370><c> cannot</c><00:21:06.700><c> have</c><00:21:06.760><c> an</c><00:21:07.060><c> identifier</c><00:21:07.600><c> like</c><00:21:07.840><c> the</c>

00:21:07.920 --> 00:21:07.930 align:start position:0%
you cannot have an identifier like the
 

00:21:07.930 --> 00:21:09.810 align:start position:0%
you cannot have an identifier like the
one<00:21:08.050><c> you</c><00:21:08.170><c> see</c><00:21:08.320><c> here</c><00:21:08.400><c> instead</c><00:21:09.400><c> you</c><00:21:09.580><c> need</c><00:21:09.700><c> to</c>

00:21:09.810 --> 00:21:09.820 align:start position:0%
one you see here instead you need to
 

00:21:09.820 --> 00:21:14.310 align:start position:0%
one you see here instead you need to
replace<00:21:10.060><c> one</c><00:21:10.510><c> with</c><00:21:11.140><c> the</c><00:21:11.260><c> word</c><00:21:11.470><c> one</c>

00:21:14.310 --> 00:21:14.320 align:start position:0%
 
 

00:21:14.320 --> 00:21:15.840 align:start position:0%
 
so<00:21:14.409><c> an</c><00:21:14.559><c> identifier</c><00:21:15.130><c> cannot</c><00:21:15.610><c> include</c>

00:21:15.840 --> 00:21:15.850 align:start position:0%
so an identifier cannot include
 

00:21:15.850 --> 00:21:17.759 align:start position:0%
so an identifier cannot include
whitespace<00:21:16.389><c> so</c><00:21:16.960><c> you</c><00:21:17.049><c> cannot</c><00:21:17.409><c> have</c><00:21:17.470><c> an</c>

00:21:17.759 --> 00:21:17.769 align:start position:0%
whitespace so you cannot have an
 

00:21:17.769 --> 00:21:21.090 align:start position:0%
whitespace so you cannot have an
identifier<00:21:18.340><c> like</c><00:21:18.370><c> first</c><00:21:19.179><c> space</c><00:21:19.870><c> name</c><00:21:20.350><c> it</c><00:21:20.649><c> has</c>

00:21:21.090 --> 00:21:21.100 align:start position:0%
identifier like first space name it has
 

00:21:21.100 --> 00:21:24.720 align:start position:0%
identifier like first space name it has
to<00:21:21.220><c> be</c><00:21:21.340><c> one</c><00:21:21.549><c> word</c><00:21:21.759><c> an</c><00:21:23.159><c> identifier</c><00:21:24.159><c> cannot</c><00:21:24.580><c> be</c><00:21:24.700><c> a</c>

00:21:24.720 --> 00:21:24.730 align:start position:0%
to be one word an identifier cannot be a
 

00:21:24.730 --> 00:21:26.850 align:start position:0%
to be one word an identifier cannot be a
reserved<00:21:25.059><c> keyword</c><00:21:25.299><c> like</c><00:21:25.899><c> int</c><00:21:26.169><c> that</c><00:21:26.590><c> you</c><00:21:26.710><c> saw</c>

00:21:26.850 --> 00:21:26.860 align:start position:0%
reserved keyword like int that you saw
 

00:21:26.860 --> 00:21:29.460 align:start position:0%
reserved keyword like int that you saw
earlier<00:21:27.210><c> if</c><00:21:28.210><c> you</c><00:21:28.389><c> are</c><00:21:28.450><c> desperate</c><00:21:28.960><c> to</c><00:21:29.289><c> use</c><00:21:29.440><c> a</c>

00:21:29.460 --> 00:21:29.470 align:start position:0%
earlier if you are desperate to use a
 

00:21:29.470 --> 00:21:31.799 align:start position:0%
earlier if you are desperate to use a
word<00:21:29.740><c> that</c><00:21:29.769><c> coincidentally</c><00:21:30.700><c> clashes</c><00:21:31.389><c> with</c>

00:21:31.799 --> 00:21:31.809 align:start position:0%
word that coincidentally clashes with
 

00:21:31.809 --> 00:21:33.930 align:start position:0%
word that coincidentally clashes with
one<00:21:32.080><c> of</c><00:21:32.169><c> the</c><00:21:32.320><c> C</c><00:21:32.529><c> sharp</c><00:21:32.679><c> keywords</c><00:21:33.159><c> you</c><00:21:33.730><c> can</c>

00:21:33.930 --> 00:21:33.940 align:start position:0%
one of the C sharp keywords you can
 

00:21:33.940 --> 00:21:36.720 align:start position:0%
one of the C sharp keywords you can
perfect<00:21:34.240><c> that</c><00:21:34.630><c> with</c><00:21:34.809><c> the</c><00:21:34.899><c> add</c><00:21:35.049><c> sign</c>

00:21:36.720 --> 00:21:36.730 align:start position:0%
perfect that with the add sign
 

00:21:36.730 --> 00:21:39.240 align:start position:0%
perfect that with the add sign
and<00:21:36.820><c> finally</c><00:21:37.510><c> as</c><00:21:37.690><c> a</c><00:21:37.750><c> recommendation</c><00:21:38.290><c> always</c>

00:21:39.240 --> 00:21:39.250 align:start position:0%
and finally as a recommendation always
 

00:21:39.250 --> 00:21:42.090 align:start position:0%
and finally as a recommendation always
use<00:21:39.520><c> meaningful</c><00:21:40.270><c> names</c><00:21:40.510><c> for</c><00:21:41.350><c> example</c><00:21:41.380><c> avoid</c><00:21:42.070><c> a</c>

00:21:42.090 --> 00:21:42.100 align:start position:0%
use meaningful names for example avoid a
 

00:21:42.100 --> 00:21:45.210 align:start position:0%
use meaningful names for example avoid a
name<00:21:42.490><c> like</c><00:21:42.730><c> f</c><00:21:43.000><c> n</c><00:21:43.540><c> instead</c><00:21:44.410><c> use</c><00:21:44.620><c> first</c><00:21:44.980><c> name</c>

00:21:45.210 --> 00:21:45.220 align:start position:0%
name like f n instead use first name
 

00:21:45.220 --> 00:21:47.430 align:start position:0%
name like f n instead use first name
this<00:21:45.790><c> way</c><00:21:45.970><c> your</c><00:21:46.210><c> code</c><00:21:46.450><c> will</c><00:21:46.660><c> be</c><00:21:46.780><c> more</c><00:21:46.960><c> readable</c>

00:21:47.430 --> 00:21:47.440 align:start position:0%
this way your code will be more readable
 

00:21:47.440 --> 00:21:49.169 align:start position:0%
this way your code will be more readable
or<00:21:47.650><c> maintainable</c><00:21:48.429><c> and</c><00:21:48.490><c> cleaner</c><00:21:48.970><c> and</c>

00:21:49.169 --> 00:21:49.179 align:start position:0%
or maintainable and cleaner and
 

00:21:49.179 --> 00:21:52.720 align:start position:0%
or maintainable and cleaner and
everybody<00:21:49.809><c> will</c><00:21:49.929><c> understand</c><00:21:50.410><c> that</c>

00:21:52.720 --> 00:21:52.730 align:start position:0%
 
 

00:21:52.730 --> 00:21:55.120 align:start position:0%
 
in<00:21:52.790><c> terms</c><00:21:53.330><c> of</c><00:21:53.480><c> naming</c><00:21:53.720><c> convention</c><00:21:54.410><c> here</c><00:21:54.980><c> are</c>

00:21:55.120 --> 00:21:55.130 align:start position:0%
in terms of naming convention here are
 

00:21:55.130 --> 00:21:57.549 align:start position:0%
in terms of naming convention here are
three<00:21:55.520><c> popular</c><00:21:55.850><c> naming</c><00:21:56.450><c> conventions</c><00:21:57.049><c> that</c>

00:21:57.549 --> 00:21:57.559 align:start position:0%
three popular naming conventions that
 

00:21:57.559 --> 00:21:58.990 align:start position:0%
three popular naming conventions that
have<00:21:57.740><c> been</c><00:21:57.890><c> around</c><00:21:58.130><c> in</c><00:21:58.370><c> the</c><00:21:58.549><c> C</c><00:21:58.790><c> language</c>

00:21:58.990 --> 00:21:59.000 align:start position:0%
have been around in the C language
 

00:21:59.000 --> 00:21:59.970 align:start position:0%
have been around in the C language
family

00:21:59.970 --> 00:21:59.980 align:start position:0%
family
 

00:21:59.980 --> 00:22:03.580 align:start position:0%
family
we've<00:22:00.980><c> got</c><00:22:01.220><c> camelcase</c><00:22:02.110><c> Pascal</c><00:22:03.110><c> case</c><00:22:03.350><c> and</c>

00:22:03.580 --> 00:22:03.590 align:start position:0%
we've got camelcase Pascal case and
 

00:22:03.590 --> 00:22:07.570 align:start position:0%
we've got camelcase Pascal case and
Hungarian<00:22:04.460><c> notation</c><00:22:05.410><c> with</c><00:22:06.410><c> camelcase</c><00:22:06.830><c> as</c><00:22:07.220><c> you</c>

00:22:07.570 --> 00:22:07.580 align:start position:0%
Hungarian notation with camelcase as you
 

00:22:07.580 --> 00:22:09.789 align:start position:0%
Hungarian notation with camelcase as you
see<00:22:07.760><c> I</c><00:22:07.790><c> have</c><00:22:07.880><c> bolded</c><00:22:08.419><c> here</c><00:22:08.450><c> the</c><00:22:09.230><c> first</c><00:22:09.559><c> letter</c>

00:22:09.789 --> 00:22:09.799 align:start position:0%
see I have bolded here the first letter
 

00:22:09.799 --> 00:22:13.000 align:start position:0%
see I have bolded here the first letter
of<00:22:10.010><c> the</c><00:22:10.340><c> first</c><00:22:10.370><c> word</c><00:22:10.730><c> is</c><00:22:11.120><c> lowercase</c><00:22:11.540><c> and</c><00:22:12.010><c> the</c>

00:22:13.000 --> 00:22:13.010 align:start position:0%
of the first word is lowercase and the
 

00:22:13.010 --> 00:22:15.130 align:start position:0%
of the first word is lowercase and the
first<00:22:13.250><c> letter</c><00:22:13.460><c> of</c><00:22:13.520><c> every</c><00:22:13.940><c> word</c><00:22:14.120><c> after</c><00:22:14.660><c> has</c><00:22:14.960><c> to</c>

00:22:15.130 --> 00:22:15.140 align:start position:0%
first letter of every word after has to
 

00:22:15.140 --> 00:22:18.820 align:start position:0%
first letter of every word after has to
be<00:22:15.230><c> uppercase</c><00:22:16.299><c> with</c><00:22:17.299><c> Pascal</c><00:22:17.780><c> case</c><00:22:18.020><c> the</c><00:22:18.500><c> first</c>

00:22:18.820 --> 00:22:18.830 align:start position:0%
be uppercase with Pascal case the first
 

00:22:18.830 --> 00:22:21.090 align:start position:0%
be uppercase with Pascal case the first
letter<00:22:19.070><c> of</c><00:22:19.130><c> every</c><00:22:19.520><c> word</c><00:22:19.760><c> has</c><00:22:20.240><c> to</c><00:22:20.419><c> be</c><00:22:20.450><c> uppercase</c>

00:22:21.090 --> 00:22:21.100 align:start position:0%
letter of every word has to be uppercase
 

00:22:21.100 --> 00:22:24.340 align:start position:0%
letter of every word has to be uppercase
with<00:22:22.100><c> Hungarian</c><00:22:22.429><c> notation</c><00:22:22.790><c> we</c><00:22:23.570><c> prefix</c><00:22:24.110><c> the</c>

00:22:24.340 --> 00:22:24.350 align:start position:0%
with Hungarian notation we prefix the
 

00:22:24.350 --> 00:22:27.070 align:start position:0%
with Hungarian notation we prefix the
name<00:22:24.530><c> of</c><00:22:24.710><c> a</c><00:22:24.830><c> variable</c><00:22:25.130><c> with</c><00:22:25.940><c> the</c><00:22:26.270><c> datatype</c><00:22:26.900><c> it</c>

00:22:27.070 --> 00:22:27.080 align:start position:0%
name of a variable with the datatype it
 

00:22:27.080 --> 00:22:30.600 align:start position:0%
name of a variable with the datatype it
uses<00:22:27.440><c> so</c><00:22:27.860><c> here</c><00:22:28.250><c> str</c><00:22:28.820><c> represents</c><00:22:29.510><c> a</c><00:22:29.600><c> string</c>

00:22:30.600 --> 00:22:30.610 align:start position:0%
uses so here str represents a string
 

00:22:30.610 --> 00:22:32.919 align:start position:0%
uses so here str represents a string
Hungarian<00:22:31.610><c> notation</c><00:22:32.120><c> is</c><00:22:32.270><c> not</c><00:22:32.540><c> used</c><00:22:32.780><c> in</c>

00:22:32.919 --> 00:22:32.929 align:start position:0%
Hungarian notation is not used in
 

00:22:32.929 --> 00:22:35.500 align:start position:0%
Hungarian notation is not used in
c-sharp<00:22:33.350><c> and</c><00:22:33.530><c> I</c><00:22:34.040><c> have</c><00:22:34.160><c> noticed</c><00:22:34.549><c> programmers</c>

00:22:35.500 --> 00:22:35.510 align:start position:0%
c-sharp and I have noticed programmers
 

00:22:35.510 --> 00:22:38.650 align:start position:0%
c-sharp and I have noticed programmers
coming<00:22:35.870><c> from</c><00:22:36.140><c> C</c><00:22:36.500><c> or</c><00:22:36.679><c> C++</c><00:22:37.100><c> background</c><00:22:38.000><c> use</c><00:22:38.450><c> that</c>

00:22:38.650 --> 00:22:38.660 align:start position:0%
coming from C or C++ background use that
 

00:22:38.660 --> 00:22:40.960 align:start position:0%
coming from C or C++ background use that
in<00:22:38.780><c> their</c><00:22:38.900><c> code</c><00:22:39.140><c> if</c><00:22:39.380><c> you're</c><00:22:40.280><c> one</c><00:22:40.520><c> of</c><00:22:40.640><c> them</c><00:22:40.760><c> I</c>

00:22:40.960 --> 00:22:40.970 align:start position:0%
in their code if you're one of them I
 

00:22:40.970 --> 00:22:42.400 align:start position:0%
in their code if you're one of them I
highly<00:22:41.480><c> recommend</c><00:22:41.900><c> you</c><00:22:41.990><c> not</c><00:22:42.200><c> to</c><00:22:42.260><c> use</c>

00:22:42.400 --> 00:22:42.410 align:start position:0%
highly recommend you not to use
 

00:22:42.410 --> 00:22:44.590 align:start position:0%
highly recommend you not to use
Hungarian<00:22:43.070><c> notation</c><00:22:43.580><c> because</c><00:22:44.240><c> c-sharp</c>

00:22:44.590 --> 00:22:44.600 align:start position:0%
Hungarian notation because c-sharp
 

00:22:44.600 --> 00:22:46.270 align:start position:0%
Hungarian notation because c-sharp
developers<00:22:45.110><c> are</c><00:22:45.290><c> not</c><00:22:45.440><c> used</c><00:22:45.650><c> to</c><00:22:45.770><c> that</c><00:22:45.890><c> and</c><00:22:46.190><c> they</c>

00:22:46.270 --> 00:22:46.280 align:start position:0%
developers are not used to that and they
 

00:22:46.280 --> 00:22:47.980 align:start position:0%
developers are not used to that and they
don't<00:22:46.460><c> like</c><00:22:46.640><c> to</c><00:22:46.669><c> see</c><00:22:46.820><c> Hungarian</c><00:22:47.390><c> notation</c><00:22:47.540><c> in</c>

00:22:47.980 --> 00:22:47.990 align:start position:0%
don't like to see Hungarian notation in
 

00:22:47.990 --> 00:22:49.780 align:start position:0%
don't like to see Hungarian notation in
the<00:22:48.110><c> code</c><00:22:48.290><c> it</c><00:22:48.500><c> makes</c><00:22:49.070><c> your</c><00:22:49.250><c> code</c><00:22:49.429><c> look</c><00:22:49.700><c> a</c>

00:22:49.780 --> 00:22:49.790 align:start position:0%
the code it makes your code look a
 

00:22:49.790 --> 00:22:50.620 align:start position:0%
the code it makes your code look a
little<00:22:49.940><c> bit</c><00:22:50.150><c> ugly</c>

00:22:50.620 --> 00:22:50.630 align:start position:0%
little bit ugly
 

00:22:50.630 --> 00:22:52.990 align:start position:0%
little bit ugly
so<00:22:51.620><c> in</c><00:22:51.740><c> c-sharp</c><00:22:51.919><c> to</c><00:22:52.309><c> name</c><00:22:52.490><c> your</c><00:22:52.640><c> local</c>

00:22:52.990 --> 00:22:53.000 align:start position:0%
so in c-sharp to name your local
 

00:22:53.000 --> 00:22:55.720 align:start position:0%
so in c-sharp to name your local
variables<00:22:53.480><c> use</c><00:22:53.780><c> camel</c><00:22:54.169><c> case</c><00:22:54.340><c> so</c><00:22:55.340><c> as</c><00:22:55.460><c> you</c><00:22:55.580><c> see</c>

00:22:55.720 --> 00:22:55.730 align:start position:0%
variables use camel case so as you see
 

00:22:55.730 --> 00:22:57.820 align:start position:0%
variables use camel case so as you see
here<00:22:55.760><c> the</c><00:22:56.510><c> first</c><00:22:56.840><c> letter</c><00:22:57.049><c> of</c><00:22:57.260><c> the</c><00:22:57.350><c> first</c><00:22:57.559><c> word</c>

00:22:57.820 --> 00:22:57.830 align:start position:0%
here the first letter of the first word
 

00:22:57.830 --> 00:23:00.549 align:start position:0%
here the first letter of the first word
is<00:22:58.130><c> lowercase</c><00:22:58.429><c> and</c><00:22:58.790><c> if</c><00:22:59.660><c> we</c><00:22:59.840><c> had</c><00:23:00.020><c> more</c><00:23:00.049><c> words</c>

00:23:00.549 --> 00:23:00.559 align:start position:0%
is lowercase and if we had more words
 

00:23:00.559 --> 00:23:02.860 align:start position:0%
is lowercase and if we had more words
here<00:23:00.860><c> in</c><00:23:01.010><c> the</c><00:23:01.130><c> identifier</c><00:23:01.700><c> the</c><00:23:02.299><c> first</c><00:23:02.630><c> letter</c>

00:23:02.860 --> 00:23:02.870 align:start position:0%
here in the identifier the first letter
 

00:23:02.870 --> 00:23:06.549 align:start position:0%
here in the identifier the first letter
of<00:23:02.929><c> every</c><00:23:03.410><c> word</c><00:23:03.559><c> had</c><00:23:04.100><c> to</c><00:23:04.130><c> be</c><00:23:04.340><c> uppercase</c><00:23:05.559><c> four</c>

00:23:06.549 --> 00:23:06.559 align:start position:0%
of every word had to be uppercase four
 

00:23:06.559 --> 00:23:08.799 align:start position:0%
of every word had to be uppercase four
constants<00:23:07.040><c> use</c><00:23:07.280><c> Pascal</c><00:23:07.730><c> case</c><00:23:07.940><c> so</c><00:23:08.419><c> here</c><00:23:08.660><c> you</c>

00:23:08.799 --> 00:23:08.809 align:start position:0%
constants use Pascal case so here you
 

00:23:08.809 --> 00:23:10.510 align:start position:0%
constants use Pascal case so here you
see<00:23:08.960><c> I've</c><00:23:09.110><c> got</c><00:23:09.140><c> a</c><00:23:09.350><c> constant</c><00:23:09.830><c> here</c><00:23:10.010><c> constant</c>

00:23:10.510 --> 00:23:10.520 align:start position:0%
see I've got a constant here constant
 

00:23:10.520 --> 00:23:12.730 align:start position:0%
see I've got a constant here constant
integer<00:23:11.059><c> and</c><00:23:11.240><c> the</c><00:23:11.870><c> first</c><00:23:12.140><c> letter</c><00:23:12.320><c> of</c><00:23:12.410><c> every</c>

00:23:12.730 --> 00:23:12.740 align:start position:0%
integer and the first letter of every
 

00:23:12.740 --> 00:23:16.360 align:start position:0%
integer and the first letter of every
word<00:23:12.860><c> is</c><00:23:13.309><c> uppercase</c><00:23:14.740><c> here</c><00:23:15.740><c> is</c><00:23:15.860><c> the</c><00:23:16.040><c> list</c><00:23:16.220><c> of</c>

00:23:16.360 --> 00:23:16.370 align:start position:0%
word is uppercase here is the list of
 

00:23:16.370 --> 00:23:18.549 align:start position:0%
word is uppercase here is the list of
most<00:23:16.580><c> commonly</c><00:23:17.120><c> used</c><00:23:17.360><c> primitive</c><00:23:17.990><c> types</c><00:23:18.260><c> in</c>

00:23:18.549 --> 00:23:18.559 align:start position:0%
most commonly used primitive types in
 

00:23:18.559 --> 00:23:21.159 align:start position:0%
most commonly used primitive types in
c-sharp<00:23:19.040><c> in</c><00:23:19.400><c> fact</c><00:23:20.330><c> the</c><00:23:20.450><c> actual</c><00:23:20.600><c> list</c><00:23:20.990><c> is</c>

00:23:21.159 --> 00:23:21.169 align:start position:0%
c-sharp in fact the actual list is
 

00:23:21.169 --> 00:23:22.990 align:start position:0%
c-sharp in fact the actual list is
slightly<00:23:21.590><c> bigger</c><00:23:21.890><c> than</c><00:23:22.040><c> this</c><00:23:22.340><c> but</c><00:23:22.970><c> I</c>

00:23:22.990 --> 00:23:23.000 align:start position:0%
slightly bigger than this but I
 

00:23:23.000 --> 00:23:24.940 align:start position:0%
slightly bigger than this but I
deliberately<00:23:23.660><c> decided</c><00:23:24.290><c> not</c><00:23:24.530><c> to</c><00:23:24.590><c> include</c>

00:23:24.940 --> 00:23:24.950 align:start position:0%
deliberately decided not to include
 

00:23:24.950 --> 00:23:26.919 align:start position:0%
deliberately decided not to include
those<00:23:25.220><c> data</c><00:23:25.490><c> types</c><00:23:25.700><c> because</c><00:23:26.000><c> they're</c><00:23:26.660><c> hardly</c>

00:23:26.919 --> 00:23:26.929 align:start position:0%
those data types because they're hardly
 

00:23:26.929 --> 00:23:29.250 align:start position:0%
those data types because they're hardly
ever<00:23:27.140><c> used</c><00:23:27.500><c> in</c><00:23:27.710><c> fact</c><00:23:28.429><c> they</c><00:23:28.730><c> are</c><00:23:28.850><c> there</c><00:23:29.059><c> for</c>

00:23:29.250 --> 00:23:29.260 align:start position:0%
ever used in fact they are there for
 

00:23:29.260 --> 00:23:31.919 align:start position:0%
ever used in fact they are there for
interoperability<00:23:30.260><c> with</c><00:23:30.679><c> other</c><00:23:30.710><c> languages</c><00:23:31.400><c> I</c>

00:23:31.919 --> 00:23:31.929 align:start position:0%
interoperability with other languages I
 

00:23:31.929 --> 00:23:34.570 align:start position:0%
interoperability with other languages I
personally<00:23:32.929><c> over</c><00:23:33.350><c> the</c><00:23:33.470><c> past</c><00:23:33.740><c> 12</c><00:23:34.040><c> years</c><00:23:34.280><c> of</c><00:23:34.400><c> me</c>

00:23:34.570 --> 00:23:34.580 align:start position:0%
personally over the past 12 years of me
 

00:23:34.580 --> 00:23:36.760 align:start position:0%
personally over the past 12 years of me
coding<00:23:34.970><c> in</c><00:23:35.090><c> c-sharp</c><00:23:35.330><c> I've</c><00:23:35.870><c> hardly</c><00:23:36.290><c> ever</c><00:23:36.380><c> used</c>

00:23:36.760 --> 00:23:36.770 align:start position:0%
coding in c-sharp I've hardly ever used
 

00:23:36.770 --> 00:23:39.669 align:start position:0%
coding in c-sharp I've hardly ever used
them<00:23:36.919><c> in</c><00:23:37.040><c> fact</c><00:23:37.610><c> never</c><00:23:37.910><c> so</c><00:23:38.750><c> I</c><00:23:39.020><c> decided</c><00:23:39.440><c> not</c><00:23:39.530><c> to</c>

00:23:39.669 --> 00:23:39.679 align:start position:0%
them in fact never so I decided not to
 

00:23:39.679 --> 00:23:41.350 align:start position:0%
them in fact never so I decided not to
confuse<00:23:40.070><c> you</c><00:23:40.280><c> with</c><00:23:40.490><c> too</c><00:23:40.640><c> much</c><00:23:40.760><c> details</c><00:23:41.179><c> that</c>

00:23:41.350 --> 00:23:41.360 align:start position:0%
confuse you with too much details that
 

00:23:41.360 --> 00:23:43.630 align:start position:0%
confuse you with too much details that
you<00:23:41.450><c> don't</c><00:23:41.630><c> need</c><00:23:41.780><c> in</c><00:23:41.929><c> the</c><00:23:41.990><c> next</c><00:23:42.860><c> slide</c><00:23:43.370><c> I've</c>

00:23:43.630 --> 00:23:43.640 align:start position:0%
you don't need in the next slide I've
 

00:23:43.640 --> 00:23:45.070 align:start position:0%
you don't need in the next slide I've
got<00:23:43.850><c> a</c><00:23:43.880><c> link</c><00:23:44.120><c> here</c><00:23:44.330><c> in</c><00:23:44.600><c> case</c><00:23:44.780><c> you</c><00:23:44.870><c> want</c><00:23:45.020><c> to</c>

00:23:45.070 --> 00:23:45.080 align:start position:0%
got a link here in case you want to
 

00:23:45.080 --> 00:23:47.409 align:start position:0%
got a link here in case you want to
learn<00:23:45.230><c> about</c><00:23:45.530><c> the</c><00:23:45.710><c> other</c><00:23:45.830><c> primitive</c><00:23:46.340><c> types</c><00:23:46.549><c> so</c>

00:23:47.409 --> 00:23:47.419 align:start position:0%
learn about the other primitive types so
 

00:23:47.419 --> 00:23:48.970 align:start position:0%
learn about the other primitive types so
let's<00:23:47.660><c> take</c><00:23:47.809><c> a</c><00:23:47.840><c> look</c><00:23:47.990><c> at</c><00:23:48.140><c> the</c><00:23:48.260><c> table</c><00:23:48.440><c> here</c><00:23:48.860><c> on</c>

00:23:48.970 --> 00:23:48.980 align:start position:0%
let's take a look at the table here on
 

00:23:48.980 --> 00:23:51.100 align:start position:0%
let's take a look at the table here on
the<00:23:49.640><c> left</c><00:23:49.880><c> side</c><00:23:50.059><c> I</c><00:23:50.270><c> have</c><00:23:50.480><c> divided</c><00:23:50.870><c> these</c>

00:23:51.100 --> 00:23:51.110 align:start position:0%
the left side I have divided these
 

00:23:51.110 --> 00:23:54.130 align:start position:0%
the left side I have divided these
datatypes<00:23:51.650><c> into</c><00:23:52.070><c> four</c><00:23:52.309><c> categories</c><00:23:53.140><c> integral</c>

00:23:54.130 --> 00:23:54.140 align:start position:0%
datatypes into four categories integral
 

00:23:54.140 --> 00:23:56.650 align:start position:0%
datatypes into four categories integral
numbers<00:23:54.500><c> real</c><00:23:55.100><c> numbers</c><00:23:55.490><c> character</c><00:23:56.450><c> and</c>

00:23:56.650 --> 00:23:56.660 align:start position:0%
numbers real numbers character and
 

00:23:56.660 --> 00:23:58.030 align:start position:0%
numbers real numbers character and
boolean

00:23:58.030 --> 00:23:58.040 align:start position:0%
boolean
 

00:23:58.040 --> 00:24:00.400 align:start position:0%
boolean
this<00:23:58.610><c> column</c><00:23:59.000><c> shows</c><00:23:59.360><c> the</c><00:23:59.390><c> C</c><00:23:59.750><c> sharp</c><00:23:59.900><c> data</c><00:24:00.140><c> times</c>

00:24:00.400 --> 00:24:00.410 align:start position:0%
this column shows the C sharp data times
 

00:24:00.410 --> 00:24:03.370 align:start position:0%
this column shows the C sharp data times
and<00:24:00.650><c> these</c><00:24:01.160><c> are</c><00:24:01.340><c> C</c><00:24:01.520><c> sharp</c><00:24:01.730><c> keywords</c><00:24:02.170><c> note</c><00:24:03.170><c> that</c>

00:24:03.370 --> 00:24:03.380 align:start position:0%
and these are C sharp keywords note that
 

00:24:03.380 --> 00:24:05.400 align:start position:0%
and these are C sharp keywords note that
C<00:24:03.530><c> sharp</c><00:24:03.740><c> keywords</c><00:24:04.040><c> are</c><00:24:04.220><c> always</c><00:24:04.610><c> lowercase</c>

00:24:05.400 --> 00:24:05.410 align:start position:0%
C sharp keywords are always lowercase
 

00:24:05.410 --> 00:24:08.110 align:start position:0%
C sharp keywords are always lowercase
each<00:24:06.410><c> of</c><00:24:06.650><c> these</c><00:24:06.800><c> C</c><00:24:06.980><c> sharp</c><00:24:07.190><c> keywords</c><00:24:07.610><c> or</c><00:24:07.820><c> C</c>

00:24:08.110 --> 00:24:08.120 align:start position:0%
each of these C sharp keywords or C
 

00:24:08.120 --> 00:24:10.570 align:start position:0%
each of these C sharp keywords or C
sharp<00:24:08.150><c> types</c><00:24:08.570><c> maps</c><00:24:09.260><c> to</c><00:24:09.560><c> a</c><00:24:09.620><c> type</c><00:24:09.920><c> in</c><00:24:10.160><c> dotnet</c>

00:24:10.570 --> 00:24:10.580 align:start position:0%
sharp types maps to a type in dotnet
 

00:24:10.580 --> 00:24:12.130 align:start position:0%
sharp types maps to a type in dotnet
framework<00:24:10.730><c> which</c><00:24:11.360><c> is</c><00:24:11.480><c> displayed</c><00:24:11.840><c> in</c><00:24:11.990><c> this</c>

00:24:12.130 --> 00:24:12.140 align:start position:0%
framework which is displayed in this
 

00:24:12.140 --> 00:24:13.860 align:start position:0%
framework which is displayed in this
column

00:24:13.860 --> 00:24:13.870 align:start position:0%
column
 

00:24:13.870 --> 00:24:15.990 align:start position:0%
column
so<00:24:14.740><c> these</c><00:24:14.890><c> types</c><00:24:15.220><c> are</c><00:24:15.429><c> part</c><00:24:15.760><c> of</c><00:24:15.880><c> the.net</c>

00:24:15.990 --> 00:24:16.000 align:start position:0%
so these types are part of the.net
 

00:24:16.000 --> 00:24:18.390 align:start position:0%
so these types are part of the.net
framework<00:24:16.510><c> and</c><00:24:16.990><c> when</c><00:24:17.890><c> you</c><00:24:17.980><c> compile</c><00:24:18.370><c> your</c>

00:24:18.390 --> 00:24:18.400 align:start position:0%
framework and when you compile your
 

00:24:18.400 --> 00:24:20.940 align:start position:0%
framework and when you compile your
application<00:24:18.600><c> the</c><00:24:19.600><c> compiler</c><00:24:20.020><c> internally</c>

00:24:20.940 --> 00:24:20.950 align:start position:0%
application the compiler internally
 

00:24:20.950 --> 00:24:23.159 align:start position:0%
application the compiler internally
would<00:24:21.159><c> translate</c><00:24:21.640><c> the</c><00:24:22.210><c> C</c><00:24:22.480><c> sharp</c><00:24:22.600><c> keyword</c><00:24:23.049><c> you</c>

00:24:23.159 --> 00:24:23.169 align:start position:0%
would translate the C sharp keyword you
 

00:24:23.169 --> 00:24:27.190 align:start position:0%
would translate the C sharp keyword you
use<00:24:23.320><c> here</c><00:24:23.650><c> two</c><00:24:24.100><c> equivalent</c><00:24:24.700><c> dotnet</c><00:24:25.090><c> type</c>

00:24:27.190 --> 00:24:27.200 align:start position:0%
use here two equivalent dotnet type
 

00:24:27.200 --> 00:24:29.230 align:start position:0%
use here two equivalent dotnet type
the<00:24:27.500><c> third</c><00:24:27.740><c> column</c><00:24:27.950><c> here</c><00:24:28.340><c> shows</c><00:24:28.460><c> the</c><00:24:28.940><c> number</c>

00:24:29.230 --> 00:24:29.240 align:start position:0%
the third column here shows the number
 

00:24:29.240 --> 00:24:31.840 align:start position:0%
the third column here shows the number
of<00:24:29.330><c> bytes</c><00:24:29.570><c> each</c><00:24:29.840><c> data</c><00:24:30.410><c> type</c><00:24:30.620><c> uses</c><00:24:31.040><c> and</c><00:24:31.610><c> I</c><00:24:31.700><c> have</c>

00:24:31.840 --> 00:24:31.850 align:start position:0%
of bytes each data type uses and I have
 

00:24:31.850 --> 00:24:33.310 align:start position:0%
of bytes each data type uses and I have
listed<00:24:32.060><c> these</c><00:24:32.330><c> data</c><00:24:32.540><c> types</c><00:24:32.810><c> from</c><00:24:33.110><c> the</c>

00:24:33.310 --> 00:24:33.320 align:start position:0%
listed these data types from the
 

00:24:33.320 --> 00:24:35.500 align:start position:0%
listed these data types from the
smallest<00:24:33.590><c> to</c><00:24:33.980><c> the</c><00:24:34.010><c> largest</c><00:24:34.130><c> in</c><00:24:34.610><c> each</c><00:24:35.030><c> category</c>

00:24:35.500 --> 00:24:35.510 align:start position:0%
smallest to the largest in each category
 

00:24:35.510 --> 00:24:37.960 align:start position:0%
smallest to the largest in each category
so<00:24:35.720><c> in</c><00:24:36.530><c> the</c><00:24:36.590><c> category</c><00:24:36.800><c> of</c><00:24:37.100><c> integral</c><00:24:37.670><c> numbers</c>

00:24:37.960 --> 00:24:37.970 align:start position:0%
so in the category of integral numbers
 

00:24:37.970 --> 00:24:39.820 align:start position:0%
so in the category of integral numbers
you<00:24:38.180><c> see</c><00:24:38.330><c> byte</c><00:24:38.570><c> is</c><00:24:38.870><c> the</c><00:24:39.020><c> smallest</c><00:24:39.290><c> it</c><00:24:39.590><c> takes</c>

00:24:39.820 --> 00:24:39.830 align:start position:0%
you see byte is the smallest it takes
 

00:24:39.830 --> 00:24:42.250 align:start position:0%
you see byte is the smallest it takes
only<00:24:40.070><c> one</c><00:24:40.400><c> byte</c><00:24:40.640><c> whereas</c><00:24:41.450><c> long</c><00:24:41.810><c> is</c><00:24:42.050><c> the</c>

00:24:42.250 --> 00:24:42.260 align:start position:0%
only one byte whereas long is the
 

00:24:42.260 --> 00:24:45.310 align:start position:0%
only one byte whereas long is the
largest<00:24:42.560><c> and</c><00:24:42.920><c> it</c><00:24:43.010><c> takes</c><00:24:43.220><c> 8</c><00:24:43.430><c> bytes</c><00:24:44.080><c> the</c><00:24:45.080><c> more</c>

00:24:45.310 --> 00:24:45.320 align:start position:0%
largest and it takes 8 bytes the more
 

00:24:45.320 --> 00:24:47.140 align:start position:0%
largest and it takes 8 bytes the more
bytes<00:24:45.530><c> we</c><00:24:45.740><c> have</c><00:24:45.920><c> the</c><00:24:46.400><c> more</c><00:24:46.610><c> storage</c><00:24:46.910><c> we</c><00:24:47.120><c> have</c>

00:24:47.140 --> 00:24:47.150 align:start position:0%
bytes we have the more storage we have
 

00:24:47.150 --> 00:24:50.380 align:start position:0%
bytes we have the more storage we have
and<00:24:47.540><c> we</c><00:24:48.230><c> can</c><00:24:48.380><c> store</c><00:24:48.590><c> larger</c><00:24:48.980><c> numbers</c><00:24:49.390><c> you</c>

00:24:50.380 --> 00:24:50.390 align:start position:0%
and we can store larger numbers you
 

00:24:50.390 --> 00:24:51.850 align:start position:0%
and we can store larger numbers you
don't<00:24:50.480><c> really</c><00:24:50.660><c> have</c><00:24:50.900><c> to</c><00:24:51.080><c> memorize</c><00:24:51.470><c> the</c><00:24:51.620><c> range</c>

00:24:51.850 --> 00:24:51.860 align:start position:0%
don't really have to memorize the range
 

00:24:51.860 --> 00:24:54.820 align:start position:0%
don't really have to memorize the range
of<00:24:52.040><c> each</c><00:24:52.220><c> data</c><00:24:52.490><c> type</c><00:24:52.700><c> but</c><00:24:53.330><c> remember</c><00:24:53.810><c> white</c><00:24:54.350><c> can</c>

00:24:54.820 --> 00:24:54.830 align:start position:0%
of each data type but remember white can
 

00:24:54.830 --> 00:24:58.930 align:start position:0%
of each data type but remember white can
store<00:24:55.100><c> a</c><00:24:55.130><c> value</c><00:24:55.370><c> between</c><00:24:55.790><c> 0</c><00:24:56.330><c> to</c><00:24:56.720><c> 255</c><00:24:57.670><c> short</c><00:24:58.670><c> can</c>

00:24:58.930 --> 00:24:58.940 align:start position:0%
store a value between 0 to 255 short can
 

00:24:58.940 --> 00:25:01.720 align:start position:0%
store a value between 0 to 255 short can
store<00:24:59.180><c> a</c><00:24:59.210><c> value</c><00:24:59.390><c> between</c><00:24:59.720><c> minus</c><00:25:00.550><c> 32,000</c><00:25:01.580><c> to</c>

00:25:01.720 --> 00:25:01.730 align:start position:0%
store a value between minus 32,000 to
 

00:25:01.730 --> 00:25:05.440 align:start position:0%
store a value between minus 32,000 to
plus<00:25:02.200><c> 32,000</c><00:25:03.760><c> integer</c><00:25:04.760><c> can</c><00:25:04.970><c> store</c><00:25:05.240><c> a</c><00:25:05.270><c> value</c>

00:25:05.440 --> 00:25:05.450 align:start position:0%
plus 32,000 integer can store a value
 

00:25:05.450 --> 00:25:07.600 align:start position:0%
plus 32,000 integer can store a value
between<00:25:05.810><c> minus</c><00:25:06.200><c> 2</c><00:25:06.500><c> billion</c><00:25:06.980><c> to</c><00:25:07.190><c> Plus</c><00:25:07.430><c> 2</c>

00:25:07.600 --> 00:25:07.610 align:start position:0%
between minus 2 billion to Plus 2
 

00:25:07.610 --> 00:25:09.580 align:start position:0%
between minus 2 billion to Plus 2
billion<00:25:07.880><c> and</c><00:25:08.090><c> long</c><00:25:08.810><c> is</c><00:25:08.990><c> even</c><00:25:09.230><c> bigger</c><00:25:09.410><c> than</c>

00:25:09.580 --> 00:25:09.590 align:start position:0%
billion and long is even bigger than
 

00:25:09.590 --> 00:25:10.740 align:start position:0%
billion and long is even bigger than
that

00:25:10.740 --> 00:25:10.750 align:start position:0%
that
 

00:25:10.750 --> 00:25:12.450 align:start position:0%
that
in<00:25:10.809><c> terms</c><00:25:11.110><c> of</c><00:25:11.260><c> real</c><00:25:11.440><c> numbers</c><00:25:11.799><c> we</c><00:25:11.980><c> have</c><00:25:12.130><c> three</c>

00:25:12.450 --> 00:25:12.460 align:start position:0%
in terms of real numbers we have three
 

00:25:12.460 --> 00:25:15.380 align:start position:0%
in terms of real numbers we have three
data<00:25:12.640><c> types</c><00:25:12.940><c> float</c><00:25:13.720><c> double</c><00:25:14.470><c> and</c><00:25:14.650><c> decimal</c>

00:25:15.380 --> 00:25:15.390 align:start position:0%
data types float double and decimal
 

00:25:15.390 --> 00:25:18.180 align:start position:0%
data types float double and decimal
float<00:25:16.390><c> maps</c><00:25:16.659><c> to</c><00:25:16.960><c> the</c><00:25:17.230><c> single</c><00:25:17.620><c> type</c><00:25:17.799><c> in</c><00:25:18.039><c> that</c>

00:25:18.180 --> 00:25:18.190 align:start position:0%
float maps to the single type in that
 

00:25:18.190 --> 00:25:20.610 align:start position:0%
float maps to the single type in that
framework<00:25:18.580><c> and</c><00:25:18.880><c> it</c><00:25:19.030><c> takes</c><00:25:19.210><c> four</c><00:25:19.450><c> bytes</c><00:25:19.600><c> and</c><00:25:20.409><c> as</c>

00:25:20.610 --> 00:25:20.620 align:start position:0%
framework and it takes four bytes and as
 

00:25:20.620 --> 00:25:22.820 align:start position:0%
framework and it takes four bytes and as
you<00:25:20.770><c> see</c><00:25:20.919><c> it</c><00:25:21.070><c> can</c><00:25:21.250><c> store</c><00:25:21.429><c> a</c><00:25:21.490><c> very</c><00:25:21.850><c> large</c><00:25:22.030><c> number</c>

00:25:22.820 --> 00:25:22.830 align:start position:0%
you see it can store a very large number
 

00:25:22.830 --> 00:25:25.770 align:start position:0%
you see it can store a very large number
double<00:25:23.830><c> is</c><00:25:24.010><c> twice</c><00:25:24.520><c> as</c><00:25:24.700><c> big</c><00:25:24.909><c> so</c><00:25:25.150><c> it</c><00:25:25.270><c> uses</c><00:25:25.480><c> eight</c>

00:25:25.770 --> 00:25:25.780 align:start position:0%
double is twice as big so it uses eight
 

00:25:25.780 --> 00:25:29.610 align:start position:0%
double is twice as big so it uses eight
bytes<00:25:26.049><c> and</c><00:25:26.610><c> decimal</c><00:25:27.610><c> uses</c><00:25:28.090><c> sixteen</c><00:25:28.480><c> bytes</c><00:25:28.690><c> the</c>

00:25:29.610 --> 00:25:29.620 align:start position:0%
bytes and decimal uses sixteen bytes the
 

00:25:29.620 --> 00:25:31.409 align:start position:0%
bytes and decimal uses sixteen bytes the
more<00:25:29.799><c> precision</c><00:25:30.159><c> you</c><00:25:30.370><c> need</c><00:25:30.520><c> the</c><00:25:30.940><c> bigger</c><00:25:31.240><c> data</c>

00:25:31.409 --> 00:25:31.419 align:start position:0%
more precision you need the bigger data
 

00:25:31.419 --> 00:25:34.380 align:start position:0%
more precision you need the bigger data
type<00:25:31.630><c> you</c><00:25:31.840><c> use</c><00:25:32.460><c> we</c><00:25:33.460><c> also</c><00:25:33.640><c> have</c><00:25:33.850><c> character</c>

00:25:34.380 --> 00:25:34.390 align:start position:0%
type you use we also have character
 

00:25:34.390 --> 00:25:36.810 align:start position:0%
type you use we also have character
which<00:25:34.929><c> is</c><00:25:34.960><c> represented</c><00:25:35.650><c> by</c><00:25:35.679><c> char</c><00:25:36.070><c> keyword</c><00:25:36.580><c> and</c>

00:25:36.810 --> 00:25:36.820 align:start position:0%
which is represented by char keyword and
 

00:25:36.820 --> 00:25:39.659 align:start position:0%
which is represented by char keyword and
it's<00:25:37.630><c> two</c><00:25:37.780><c> bytes</c><00:25:38.020><c> so</c><00:25:38.830><c> characters</c><00:25:39.309><c> in</c><00:25:39.490><c> c-sharp</c>

00:25:39.659 --> 00:25:39.669 align:start position:0%
it's two bytes so characters in c-sharp
 

00:25:39.669 --> 00:25:42.570 align:start position:0%
it's two bytes so characters in c-sharp
are<00:25:40.000><c> unicode</c><00:25:40.450><c> and</c><00:25:40.919><c> finally</c><00:25:41.919><c> we</c><00:25:42.100><c> have</c><00:25:42.280><c> bull</c>

00:25:42.570 --> 00:25:42.580 align:start position:0%
are unicode and finally we have bull
 

00:25:42.580 --> 00:25:44.640 align:start position:0%
are unicode and finally we have bull
which<00:25:43.000><c> represents</c><00:25:43.570><c> boolean</c><00:25:43.960><c> which</c><00:25:44.110><c> can</c><00:25:44.530><c> be</c>

00:25:44.640 --> 00:25:44.650 align:start position:0%
which represents boolean which can be
 

00:25:44.650 --> 00:25:46.560 align:start position:0%
which represents boolean which can be
either<00:25:44.770><c> true</c><00:25:45.070><c> or</c><00:25:45.159><c> false</c>

00:25:46.560 --> 00:25:46.570 align:start position:0%
either true or false
 

00:25:46.570 --> 00:25:48.690 align:start position:0%
either true or false
in<00:25:46.630><c> case</c><00:25:47.320><c> you</c><00:25:47.440><c> want</c><00:25:47.590><c> to</c><00:25:47.620><c> learn</c><00:25:47.830><c> more</c><00:25:48.159><c> about</c><00:25:48.340><c> the</c>

00:25:48.690 --> 00:25:48.700 align:start position:0%
in case you want to learn more about the
 

00:25:48.700 --> 00:25:50.460 align:start position:0%
in case you want to learn more about the
other<00:25:48.850><c> data</c><00:25:49.149><c> types</c><00:25:49.419><c> that</c><00:25:49.720><c> I</c><00:25:49.779><c> told</c><00:25:50.019><c> you</c><00:25:50.200><c> they're</c>

00:25:50.460 --> 00:25:50.470 align:start position:0%
other data types that I told you they're
 

00:25:50.470 --> 00:25:52.200 align:start position:0%
other data types that I told you they're
not<00:25:50.620><c> really</c><00:25:50.799><c> used</c><00:25:51.100><c> you</c><00:25:51.639><c> can</c><00:25:51.789><c> simply</c><00:25:52.059><c> go</c><00:25:52.179><c> to</c>

00:25:52.200 --> 00:25:52.210 align:start position:0%
not really used you can simply go to
 

00:25:52.210 --> 00:25:54.210 align:start position:0%
not really used you can simply go to
Google<00:25:52.600><c> and</c><00:25:52.809><c> search</c><00:25:53.080><c> for</c><00:25:53.289><c> c-sharp</c><00:25:53.740><c> built-in</c>

00:25:54.210 --> 00:25:54.220 align:start position:0%
Google and search for c-sharp built-in
 

00:25:54.220 --> 00:25:56.730 align:start position:0%
Google and search for c-sharp built-in
types<00:25:54.460><c> and</c><00:25:54.730><c> the</c><00:25:55.269><c> first</c><00:25:55.539><c> page</c><00:25:55.779><c> is</c><00:25:55.990><c> the</c><00:25:56.169><c> MSDN</c>

00:25:56.730 --> 00:25:56.740 align:start position:0%
types and the first page is the MSDN
 

00:25:56.740 --> 00:25:59.159 align:start position:0%
types and the first page is the MSDN
page<00:25:57.039><c> that</c><00:25:57.519><c> lists</c><00:25:58.029><c> all</c><00:25:58.179><c> the</c><00:25:58.269><c> primitive</c><00:25:58.929><c> types</c>

00:25:59.159 --> 00:25:59.169 align:start position:0%
page that lists all the primitive types
 

00:25:59.169 --> 00:26:01.400 align:start position:0%
page that lists all the primitive types
in<00:25:59.409><c> c-sharp</c>

00:26:01.400 --> 00:26:01.410 align:start position:0%
in c-sharp
 

00:26:01.410 --> 00:26:03.290 align:start position:0%
in c-sharp
and<00:26:01.500><c> most</c><00:26:02.040><c> of</c><00:26:02.160><c> these</c><00:26:02.280><c> data</c><00:26:02.550><c> types</c><00:26:02.760><c> are</c><00:26:03.000><c> pretty</c>

00:26:03.290 --> 00:26:03.300 align:start position:0%
and most of these data types are pretty
 

00:26:03.300 --> 00:26:04.730 align:start position:0%
and most of these data types are pretty
straightforward<00:26:03.600><c> but</c><00:26:04.320><c> there</c><00:26:04.470><c> is</c><00:26:04.560><c> something</c>

00:26:04.730 --> 00:26:04.740 align:start position:0%
straightforward but there is something
 

00:26:04.740 --> 00:26:07.430 align:start position:0%
straightforward but there is something
tricky<00:26:05.250><c> about</c><00:26:05.340><c> real</c><00:26:05.730><c> numbers</c><00:26:06.150><c> in</c><00:26:07.110><c> this</c><00:26:07.230><c> table</c>

00:26:07.430 --> 00:26:07.440 align:start position:0%
tricky about real numbers in this table
 

00:26:07.440 --> 00:26:09.560 align:start position:0%
tricky about real numbers in this table
I<00:26:07.650><c> have</c><00:26:07.770><c> listed</c><00:26:07.980><c> the</c><00:26:08.310><c> data</c><00:26:08.760><c> types</c><00:26:09.030><c> we</c><00:26:09.210><c> have</c><00:26:09.360><c> for</c>

00:26:09.560 --> 00:26:09.570 align:start position:0%
I have listed the data types we have for
 

00:26:09.570 --> 00:26:12.140 align:start position:0%
I have listed the data types we have for
real<00:26:09.720><c> numbers</c><00:26:10.110><c> load</c><00:26:10.860><c> double</c><00:26:11.490><c> and</c><00:26:11.670><c> decimal</c>

00:26:12.140 --> 00:26:12.150 align:start position:0%
real numbers load double and decimal
 

00:26:12.150 --> 00:26:14.510 align:start position:0%
real numbers load double and decimal
I've<00:26:12.270><c> highlighted</c><00:26:13.170><c> double</c><00:26:13.890><c> because</c><00:26:14.280><c> that's</c>

00:26:14.510 --> 00:26:14.520 align:start position:0%
I've highlighted double because that's
 

00:26:14.520 --> 00:26:17.720 align:start position:0%
I've highlighted double because that's
the<00:26:14.670><c> default</c><00:26:15.300><c> data</c><00:26:15.780><c> type</c><00:26:16.110><c> used</c><00:26:16.980><c> by</c><00:26:17.220><c> a</c><00:26:17.250><c> c-sharp</c>

00:26:17.720 --> 00:26:17.730 align:start position:0%
the default data type used by a c-sharp
 

00:26:17.730 --> 00:26:20.110 align:start position:0%
the default data type used by a c-sharp
compiler<00:26:18.210><c> when</c><00:26:18.960><c> you're</c><00:26:19.110><c> using</c><00:26:19.350><c> real</c><00:26:19.650><c> numbers</c>

00:26:20.110 --> 00:26:20.120 align:start position:0%
compiler when you're using real numbers
 

00:26:20.120 --> 00:26:23.420 align:start position:0%
compiler when you're using real numbers
so<00:26:21.120><c> if</c><00:26:21.360><c> you</c><00:26:21.480><c> want</c><00:26:21.630><c> to</c><00:26:21.690><c> declare</c><00:26:21.900><c> a</c><00:26:22.260><c> float</c><00:26:22.620><c> you</c>

00:26:23.420 --> 00:26:23.430 align:start position:0%
so if you want to declare a float you
 

00:26:23.430 --> 00:26:25.820 align:start position:0%
so if you want to declare a float you
need<00:26:23.580><c> to</c><00:26:23.730><c> explicitly</c><00:26:24.210><c> tell</c><00:26:24.930><c> the</c><00:26:25.110><c> compiler</c><00:26:25.530><c> to</c>

00:26:25.820 --> 00:26:25.830 align:start position:0%
need to explicitly tell the compiler to
 

00:26:25.830 --> 00:26:28.460 align:start position:0%
need to explicitly tell the compiler to
treat<00:26:26.520><c> the</c><00:26:26.700><c> number</c><00:26:27.120><c> you</c><00:26:27.300><c> have</c><00:26:27.510><c> as</c><00:26:27.780><c> a</c><00:26:27.840><c> float</c>

00:26:28.460 --> 00:26:28.470 align:start position:0%
treat the number you have as a float
 

00:26:28.470 --> 00:26:31.190 align:start position:0%
treat the number you have as a float
here<00:26:28.920><c> is</c><00:26:29.070><c> an</c><00:26:29.160><c> example</c><00:26:29.430><c> I've</c><00:26:29.790><c> declared</c><00:26:30.540><c> a</c><00:26:30.750><c> float</c>

00:26:31.190 --> 00:26:31.200 align:start position:0%
here is an example I've declared a float
 

00:26:31.200 --> 00:26:33.920 align:start position:0%
here is an example I've declared a float
call<00:26:31.740><c> it</c><00:26:31.860><c> number</c><00:26:32.070><c> as</c><00:26:32.430><c> I</c><00:26:32.670><c> need</c><00:26:32.880><c> one</c><00:26:33.390><c> point</c><00:26:33.720><c> two</c>

00:26:33.920 --> 00:26:33.930 align:start position:0%
call it number as I need one point two
 

00:26:33.930 --> 00:26:37.280 align:start position:0%
call it number as I need one point two
here<00:26:34.710><c> I</c><00:26:34.950><c> have</c><00:26:35.160><c> added</c><00:26:35.400><c> the</c><00:26:35.640><c> suffix</c><00:26:35.850><c> F</c><00:26:36.270><c> and</c><00:26:36.750><c> that</c>

00:26:37.280 --> 00:26:37.290 align:start position:0%
here I have added the suffix F and that
 

00:26:37.290 --> 00:26:39.350 align:start position:0%
here I have added the suffix F and that
is<00:26:37.440><c> to</c><00:26:37.680><c> tell</c><00:26:37.890><c> the</c><00:26:38.010><c> compiler</c><00:26:38.340><c> to</c><00:26:38.760><c> trade</c><00:26:39.180><c> this</c>

00:26:39.350 --> 00:26:39.360 align:start position:0%
is to tell the compiler to trade this
 

00:26:39.360 --> 00:26:41.900 align:start position:0%
is to tell the compiler to trade this
number<00:26:39.720><c> as</c><00:26:39.900><c> a</c><00:26:39.960><c> float</c><00:26:40.350><c> if</c><00:26:40.590><c> I</c><00:26:41.340><c> didn't</c><00:26:41.670><c> have</c><00:26:41.760><c> this</c>

00:26:41.900 --> 00:26:41.910 align:start position:0%
number as a float if I didn't have this
 

00:26:41.910 --> 00:26:44.270 align:start position:0%
number as a float if I didn't have this
F<00:26:42.120><c> here</c><00:26:42.150><c> compiler</c><00:26:43.080><c> would</c><00:26:43.380><c> think</c><00:26:43.650><c> one</c><00:26:44.070><c> point</c>

00:26:44.270 --> 00:26:44.280 align:start position:0%
F here compiler would think one point
 

00:26:44.280 --> 00:26:47.270 align:start position:0%
F here compiler would think one point
two<00:26:44.520><c> is</c><00:26:44.730><c> a</c><00:26:45.030><c> double</c><00:26:45.480><c> because</c><00:26:46.110><c> double</c><00:26:46.620><c> is</c><00:26:46.800><c> the</c>

00:26:47.270 --> 00:26:47.280 align:start position:0%
two is a double because double is the
 

00:26:47.280 --> 00:26:49.280 align:start position:0%
two is a double because double is the
default<00:26:47.850><c> data</c><00:26:48.060><c> type</c><00:26:48.300><c> for</c><00:26:48.570><c> real</c><00:26:48.720><c> numbers</c><00:26:48.930><c> and</c>

00:26:49.280 --> 00:26:49.290 align:start position:0%
default data type for real numbers and
 

00:26:49.290 --> 00:26:51.410 align:start position:0%
default data type for real numbers and
of<00:26:49.890><c> course</c><00:26:50.130><c> I</c><00:26:50.310><c> cannot</c><00:26:50.610><c> assign</c><00:26:50.910><c> a</c><00:26:50.970><c> double</c>

00:26:51.410 --> 00:26:51.420 align:start position:0%
of course I cannot assign a double
 

00:26:51.420 --> 00:26:53.780 align:start position:0%
of course I cannot assign a double
number<00:26:51.750><c> into</c><00:26:52.290><c> a</c><00:26:52.320><c> float</c><00:26:52.620><c> so</c><00:26:52.950><c> the</c><00:26:53.310><c> program</c><00:26:53.670><c> would</c>

00:26:53.780 --> 00:26:53.790 align:start position:0%
number into a float so the program would
 

00:26:53.790 --> 00:26:56.900 align:start position:0%
number into a float so the program would
not<00:26:53.970><c> compile</c><00:26:54.710><c> same</c><00:26:55.710><c> applies</c><00:26:56.070><c> to</c><00:26:56.100><c> decimals</c><00:26:56.760><c> so</c>

00:26:56.900 --> 00:26:56.910 align:start position:0%
not compile same applies to decimals so
 

00:26:56.910 --> 00:26:58.820 align:start position:0%
not compile same applies to decimals so
if<00:26:57.420><c> you</c><00:26:57.480><c> want</c><00:26:57.630><c> to</c><00:26:57.690><c> declare</c><00:26:57.810><c> a</c><00:26:57.990><c> decimal</c><00:26:58.530><c> you</c>

00:26:58.820 --> 00:26:58.830 align:start position:0%
if you want to declare a decimal you
 

00:26:58.830 --> 00:27:01.910 align:start position:0%
if you want to declare a decimal you
need<00:26:59.010><c> to</c><00:26:59.130><c> add</c><00:26:59.310><c> the</c><00:26:59.610><c> suffix</c><00:26:59.850><c> M</c><00:27:00.210><c> at</c><00:27:00.680><c> the</c><00:27:01.680><c> end</c><00:27:01.800><c> of</c>

00:27:01.910 --> 00:27:01.920 align:start position:0%
need to add the suffix M at the end of
 

00:27:01.920 --> 00:27:03.490 align:start position:0%
need to add the suffix M at the end of
the<00:27:02.040><c> number</c>

00:27:03.490 --> 00:27:03.500 align:start position:0%
the number
 

00:27:03.500 --> 00:27:05.169 align:start position:0%
the number
in<00:27:03.559><c> c-sharp</c><00:27:04.010><c> we</c><00:27:04.280><c> also</c><00:27:04.429><c> have</c><00:27:04.700><c> a</c><00:27:04.730><c> few</c><00:27:05.000><c> other</c>

00:27:05.169 --> 00:27:05.179 align:start position:0%
in c-sharp we also have a few other
 

00:27:05.179 --> 00:27:07.149 align:start position:0%
in c-sharp we also have a few other
types<00:27:05.480><c> which</c><00:27:05.750><c> are</c><00:27:05.900><c> not</c><00:27:06.110><c> considered</c><00:27:06.380><c> primitive</c>

00:27:07.149 --> 00:27:07.159 align:start position:0%
types which are not considered primitive
 

00:27:07.159 --> 00:27:10.060 align:start position:0%
types which are not considered primitive
types<00:27:07.370><c> and</c><00:27:07.610><c> they</c><00:27:07.760><c> are</c><00:27:07.940><c> string</c><00:27:08.480><c> array</c><00:27:09.169><c> enum</c><00:27:09.860><c> and</c>

00:27:10.060 --> 00:27:10.070 align:start position:0%
types and they are string array enum and
 

00:27:10.070 --> 00:27:12.310 align:start position:0%
types and they are string array enum and
class<00:27:10.460><c> we'll</c><00:27:11.390><c> learn</c><00:27:11.419><c> more</c><00:27:11.659><c> about</c><00:27:11.960><c> them</c>

00:27:12.310 --> 00:27:12.320 align:start position:0%
class we'll learn more about them
 

00:27:12.320 --> 00:27:15.070 align:start position:0%
class we'll learn more about them
throughout<00:27:12.679><c> this</c><00:27:12.830><c> course</c><00:27:13.570><c> okay</c><00:27:14.570><c> that's</c><00:27:14.929><c> it</c>

00:27:15.070 --> 00:27:15.080 align:start position:0%
throughout this course okay that's it
 

00:27:15.080 --> 00:27:16.690 align:start position:0%
throughout this course okay that's it
for<00:27:15.230><c> this</c><00:27:15.320><c> lecture</c><00:27:15.500><c> in</c><00:27:15.890><c> the</c><00:27:16.039><c> next</c><00:27:16.429><c> lecture</c>

00:27:16.690 --> 00:27:16.700 align:start position:0%
for this lecture in the next lecture
 

00:27:16.700 --> 00:27:18.310 align:start position:0%
for this lecture in the next lecture
we're<00:27:16.850><c> going</c><00:27:16.940><c> to</c><00:27:17.000><c> talk</c><00:27:17.090><c> about</c><00:27:17.510><c> the</c><00:27:17.690><c> concept</c><00:27:18.169><c> of</c>

00:27:18.310 --> 00:27:18.320 align:start position:0%
we're going to talk about the concept of
 

00:27:18.320 --> 00:27:20.230 align:start position:0%
we're going to talk about the concept of
overflowing<00:27:19.130><c> I</c><00:27:19.309><c> hope</c><00:27:19.820><c> you</c><00:27:19.940><c> enjoyed</c><00:27:20.150><c> this</c>

00:27:20.230 --> 00:27:20.240 align:start position:0%
overflowing I hope you enjoyed this
 

00:27:20.240 --> 00:27:24.169 align:start position:0%
overflowing I hope you enjoyed this
lecture<00:27:20.390><c> and</c><00:27:20.750><c> thank</c><00:27:21.080><c> you</c><00:27:21.140><c> for</c><00:27:21.260><c> watching</c>

00:27:24.169 --> 00:27:24.179 align:start position:0%
 
 

00:27:24.179 --> 00:27:25.999 align:start position:0%
 
okay<00:27:24.419><c> now</c><00:27:24.570><c> let's</c><00:27:24.779><c> talk</c><00:27:24.929><c> about</c><00:27:25.080><c> the</c><00:27:25.409><c> concept</c><00:27:25.889><c> of</c>

00:27:25.999 --> 00:27:26.009 align:start position:0%
okay now let's talk about the concept of
 

00:27:26.009 --> 00:27:28.730 align:start position:0%
okay now let's talk about the concept of
overflowing<00:27:27.139><c> here</c><00:27:28.139><c> I've</c><00:27:28.320><c> declared</c><00:27:28.590><c> a</c>

00:27:28.730 --> 00:27:28.740 align:start position:0%
overflowing here I've declared a
 

00:27:28.740 --> 00:27:31.220 align:start position:0%
overflowing here I've declared a
variable<00:27:28.889><c> of</c><00:27:29.340><c> type</c><00:27:29.429><c> byte</c><00:27:29.970><c> cut</c><00:27:30.509><c> the</c><00:27:30.600><c> number</c><00:27:30.960><c> and</c>

00:27:31.220 --> 00:27:31.230 align:start position:0%
variable of type byte cut the number and
 

00:27:31.230 --> 00:27:35.359 align:start position:0%
variable of type byte cut the number and
assign<00:27:31.980><c> it</c><00:27:32.009><c> to</c><00:27:32.389><c> 255</c><00:27:33.389><c> as</c><00:27:33.710><c> I</c><00:27:34.710><c> told</c><00:27:34.919><c> you</c><00:27:35.070><c> earlier</c>

00:27:35.359 --> 00:27:35.369 align:start position:0%
assign it to 255 as I told you earlier
 

00:27:35.369 --> 00:27:36.109 align:start position:0%
assign it to 255 as I told you earlier
in<00:27:35.519><c> the</c><00:27:35.639><c> slide</c>

00:27:36.109 --> 00:27:36.119 align:start position:0%
in the slide
 

00:27:36.119 --> 00:27:38.930 align:start position:0%
in the slide
255<00:27:37.080><c> is</c><00:27:37.289><c> the</c><00:27:37.590><c> largest</c><00:27:37.919><c> value</c><00:27:38.159><c> you</c><00:27:38.519><c> can</c><00:27:38.669><c> store</c>

00:27:38.930 --> 00:27:38.940 align:start position:0%
255 is the largest value you can store
 

00:27:38.940 --> 00:27:41.600 align:start position:0%
255 is the largest value you can store
in<00:27:39.119><c> a</c><00:27:39.210><c> byte</c><00:27:39.649><c> now</c><00:27:40.649><c> in</c><00:27:40.769><c> the</c><00:27:40.830><c> next</c><00:27:41.039><c> line</c><00:27:41.369><c> I'm</c>

00:27:41.600 --> 00:27:41.610 align:start position:0%
in a byte now in the next line I'm
 

00:27:41.610 --> 00:27:43.850 align:start position:0%
in a byte now in the next line I'm
increasing<00:27:42.539><c> the</c><00:27:42.570><c> value</c><00:27:42.960><c> of</c><00:27:43.049><c> number</c><00:27:43.230><c> by</c><00:27:43.619><c> one</c>

00:27:43.850 --> 00:27:43.860 align:start position:0%
increasing the value of number by one
 

00:27:43.860 --> 00:27:46.869 align:start position:0%
increasing the value of number by one
and<00:27:44.100><c> trying</c><00:27:44.669><c> to</c><00:27:44.850><c> store</c><00:27:45.090><c> 256</c><00:27:45.869><c> in</c><00:27:46.080><c> the</c><00:27:46.470><c> number</c>

00:27:46.869 --> 00:27:46.879 align:start position:0%
and trying to store 256 in the number
 

00:27:46.879 --> 00:27:49.369 align:start position:0%
and trying to store 256 in the number
but<00:27:47.879><c> if</c><00:27:48.029><c> you</c><00:27:48.119><c> compile</c><00:27:48.480><c> the</c><00:27:48.629><c> application</c><00:27:48.659><c> and</c>

00:27:49.369 --> 00:27:49.379 align:start position:0%
but if you compile the application and
 

00:27:49.379 --> 00:27:51.619 align:start position:0%
but if you compile the application and
display<00:27:49.919><c> number</c><00:27:50.190><c> on</c><00:27:50.519><c> the</c><00:27:50.700><c> console</c><00:27:51.149><c> you</c><00:27:51.480><c> will</c>

00:27:51.619 --> 00:27:51.629 align:start position:0%
display number on the console you will
 

00:27:51.629 --> 00:27:54.529 align:start position:0%
display number on the console you will
see<00:27:51.840><c> zero</c><00:27:52.529><c> and</c><00:27:52.850><c> this</c><00:27:53.850><c> is</c><00:27:53.909><c> what</c><00:27:54.179><c> we</c><00:27:54.330><c> call</c>

00:27:54.529 --> 00:27:54.539 align:start position:0%
see zero and this is what we call
 

00:27:54.539 --> 00:27:57.230 align:start position:0%
see zero and this is what we call
overflowing<00:27:55.440><c> so</c><00:27:55.950><c> we</c><00:27:56.159><c> have</c><00:27:56.340><c> exceeded</c><00:27:56.850><c> the</c>

00:27:57.230 --> 00:27:57.240 align:start position:0%
overflowing so we have exceeded the
 

00:27:57.240 --> 00:27:59.919 align:start position:0%
overflowing so we have exceeded the
boundary<00:27:57.749><c> of</c><00:27:57.960><c> the</c><00:27:58.259><c> byte</c><00:27:58.529><c> data</c><00:27:58.919><c> type</c><00:27:59.220><c> in</c>

00:27:59.919 --> 00:27:59.929 align:start position:0%
boundary of the byte data type in
 

00:27:59.929 --> 00:28:02.629 align:start position:0%
boundary of the byte data type in
c-sharp<00:28:00.929><c> by</c><00:28:01.499><c> default</c><00:28:02.009><c> we</c><00:28:02.279><c> don't</c><00:28:02.309><c> have</c>

00:28:02.629 --> 00:28:02.639 align:start position:0%
c-sharp by default we don't have
 

00:28:02.639 --> 00:28:05.060 align:start position:0%
c-sharp by default we don't have
overflow<00:28:03.179><c> checking</c><00:28:03.600><c> which</c><00:28:04.350><c> means</c><00:28:04.619><c> we</c><00:28:04.889><c> can</c>

00:28:05.060 --> 00:28:05.070 align:start position:0%
overflow checking which means we can
 

00:28:05.070 --> 00:28:07.009 align:start position:0%
overflow checking which means we can
modify<00:28:05.369><c> the</c><00:28:05.580><c> value</c><00:28:06.059><c> of</c><00:28:06.240><c> a</c><00:28:06.330><c> variable</c><00:28:06.509><c> at</c>

00:28:07.009 --> 00:28:07.019 align:start position:0%
modify the value of a variable at
 

00:28:07.019 --> 00:28:10.430 align:start position:0%
modify the value of a variable at
runtime<00:28:07.320><c> and</c><00:28:07.799><c> if</c><00:28:08.610><c> we</c><00:28:09.179><c> go</c><00:28:09.360><c> beyond</c><00:28:09.720><c> the</c><00:28:09.899><c> boundary</c>

00:28:10.430 --> 00:28:10.440 align:start position:0%
runtime and if we go beyond the boundary
 

00:28:10.440 --> 00:28:13.279 align:start position:0%
runtime and if we go beyond the boundary
of<00:28:10.590><c> its</c><00:28:11.369><c> underlying</c><00:28:11.940><c> data</c><00:28:12.149><c> type</c><00:28:12.389><c> we</c><00:28:13.019><c> will</c><00:28:13.110><c> get</c>

00:28:13.279 --> 00:28:13.289 align:start position:0%
of its underlying data type we will get
 

00:28:13.289 --> 00:28:15.980 align:start position:0%
of its underlying data type we will get
overflow<00:28:14.059><c> now</c><00:28:15.059><c> sometimes</c><00:28:15.570><c> this</c><00:28:15.720><c> is</c><00:28:15.869><c> not</c>

00:28:15.980 --> 00:28:15.990 align:start position:0%
overflow now sometimes this is not
 

00:28:15.990 --> 00:28:17.960 align:start position:0%
overflow now sometimes this is not
desirable<00:28:16.350><c> in</c><00:28:16.619><c> your</c><00:28:16.830><c> application</c><00:28:17.429><c> you</c><00:28:17.820><c> want</c>

00:28:17.960 --> 00:28:17.970 align:start position:0%
desirable in your application you want
 

00:28:17.970 --> 00:28:20.450 align:start position:0%
desirable in your application you want
to<00:28:18.090><c> stop</c><00:28:18.330><c> overflowing</c><00:28:19.080><c> if</c><00:28:19.830><c> that's</c><00:28:20.129><c> the</c><00:28:20.309><c> case</c>

00:28:20.450 --> 00:28:20.460 align:start position:0%
to stop overflowing if that's the case
 

00:28:20.460 --> 00:28:24.710 align:start position:0%
to stop overflowing if that's the case
you<00:28:20.850><c> need</c><00:28:20.999><c> to</c><00:28:21.119><c> use</c><00:28:21.299><c> the</c><00:28:21.809><c> check</c><00:28:22.080><c> keyword</c><00:28:23.720><c> so</c>

00:28:24.710 --> 00:28:24.720 align:start position:0%
you need to use the check keyword so
 

00:28:24.720 --> 00:28:26.570 align:start position:0%
you need to use the check keyword so
here<00:28:24.990><c> is</c><00:28:25.110><c> how</c><00:28:25.259><c> it</c><00:28:25.289><c> works</c><00:28:25.619><c> we</c><00:28:26.039><c> have</c><00:28:26.070><c> the</c><00:28:26.309><c> checked</c>

00:28:26.570 --> 00:28:26.580 align:start position:0%
here is how it works we have the checked
 

00:28:26.580 --> 00:28:29.419 align:start position:0%
here is how it works we have the checked
keyword<00:28:26.940><c> followed</c><00:28:27.809><c> by</c><00:28:27.990><c> curly</c><00:28:28.769><c> braces</c><00:28:29.009><c> which</c>

00:28:29.419 --> 00:28:29.429 align:start position:0%
keyword followed by curly braces which
 

00:28:29.429 --> 00:28:31.700 align:start position:0%
keyword followed by curly braces which
indicate<00:28:29.850><c> the</c><00:28:29.940><c> code</c><00:28:30.179><c> block</c><00:28:30.389><c> and</c><00:28:30.779><c> inside</c><00:28:31.679><c> that</c>

00:28:31.700 --> 00:28:31.710 align:start position:0%
indicate the code block and inside that
 

00:28:31.710 --> 00:28:33.859 align:start position:0%
indicate the code block and inside that
block<00:28:32.070><c> we</c><00:28:32.460><c> have</c><00:28:32.490><c> the</c><00:28:32.820><c> variable</c><00:28:33.240><c> declaration</c>

00:28:33.859 --> 00:28:33.869 align:start position:0%
block we have the variable declaration
 

00:28:33.869 --> 00:28:36.340 align:start position:0%
block we have the variable declaration
and<00:28:34.080><c> any</c><00:28:34.289><c> kind</c><00:28:34.559><c> of</c><00:28:34.679><c> arithmetic</c><00:28:35.279><c> operations</c>

00:28:36.340 --> 00:28:36.350 align:start position:0%
and any kind of arithmetic operations
 

00:28:36.350 --> 00:28:39.139 align:start position:0%
and any kind of arithmetic operations
with<00:28:37.350><c> this</c><00:28:37.529><c> code</c><00:28:37.769><c> overflow</c><00:28:38.549><c> will</c><00:28:38.730><c> not</c><00:28:38.909><c> happen</c>

00:28:39.139 --> 00:28:39.149 align:start position:0%
with this code overflow will not happen
 

00:28:39.149 --> 00:28:42.049 align:start position:0%
with this code overflow will not happen
at<00:28:39.480><c> runtime</c><00:28:39.860><c> instead</c><00:28:40.860><c> an</c><00:28:41.039><c> exception</c><00:28:41.879><c> will</c><00:28:42.029><c> be</c>

00:28:42.049 --> 00:28:42.059 align:start position:0%
at runtime instead an exception will be
 

00:28:42.059 --> 00:28:44.539 align:start position:0%
at runtime instead an exception will be
thrown<00:28:42.179><c> and</c><00:28:42.659><c> the</c><00:28:43.139><c> program</c><00:28:43.559><c> will</c><00:28:43.710><c> crash</c><00:28:43.980><c> unless</c>

00:28:44.539 --> 00:28:44.549 align:start position:0%
thrown and the program will crash unless
 

00:28:44.549 --> 00:28:46.999 align:start position:0%
thrown and the program will crash unless
you<00:28:44.700><c> handle</c><00:28:44.999><c> the</c><00:28:45.149><c> exception</c><00:28:45.559><c> the</c><00:28:46.559><c> topic</c><00:28:46.919><c> of</c>

00:28:46.999 --> 00:28:47.009 align:start position:0%
you handle the exception the topic of
 

00:28:47.009 --> 00:28:49.129 align:start position:0%
you handle the exception the topic of
exceptions<00:28:47.549><c> is</c><00:28:47.759><c> an</c><00:28:47.879><c> advanced</c><00:28:48.330><c> topic</c><00:28:48.509><c> and</c><00:28:48.960><c> I</c>

00:28:49.129 --> 00:28:49.139 align:start position:0%
exceptions is an advanced topic and I
 

00:28:49.139 --> 00:28:50.869 align:start position:0%
exceptions is an advanced topic and I
have<00:28:49.259><c> covered</c><00:28:49.619><c> it</c><00:28:49.769><c> in</c><00:28:49.919><c> my</c><00:28:50.100><c> C</c><00:28:50.309><c> sharp</c><00:28:50.549><c> advanced</c>

00:28:50.869 --> 00:28:50.879 align:start position:0%
have covered it in my C sharp advanced
 

00:28:50.879 --> 00:28:53.629 align:start position:0%
have covered it in my C sharp advanced
course<00:28:51.289><c> for</c><00:28:52.289><c> now</c><00:28:52.409><c> all</c><00:28:52.649><c> I</c><00:28:52.710><c> want</c><00:28:53.039><c> you</c><00:28:53.159><c> to</c><00:28:53.279><c> know</c><00:28:53.399><c> is</c>

00:28:53.629 --> 00:28:53.639 align:start position:0%
course for now all I want you to know is
 

00:28:53.639 --> 00:28:55.279 align:start position:0%
course for now all I want you to know is
that<00:28:53.700><c> if</c><00:28:54.210><c> you</c><00:28:54.360><c> use</c><00:28:54.480><c> the</c><00:28:54.629><c> check</c><00:28:54.899><c> keyword</c>

00:28:55.279 --> 00:28:55.289 align:start position:0%
that if you use the check keyword
 

00:28:55.289 --> 00:28:57.859 align:start position:0%
that if you use the check keyword
overflow<00:28:56.129><c> will</c><00:28:56.279><c> not</c><00:28:56.429><c> happen</c><00:28:56.610><c> and</c><00:28:56.999><c> instead</c><00:28:57.450><c> the</c>

00:28:57.859 --> 00:28:57.869 align:start position:0%
overflow will not happen and instead the
 

00:28:57.869 --> 00:29:00.590 align:start position:0%
overflow will not happen and instead the
program<00:28:58.259><c> will</c><00:28:58.440><c> throw</c><00:28:58.649><c> an</c><00:28:58.769><c> exception</c><00:28:59.539><c> now</c><00:29:00.539><c> do</c>

00:29:00.590 --> 00:29:00.600 align:start position:0%
program will throw an exception now do
 

00:29:00.600 --> 00:29:03.259 align:start position:0%
program will throw an exception now do
we<00:29:00.899><c> really</c><00:29:01.080><c> need</c><00:29:01.289><c> that</c><00:29:01.350><c> in</c><00:29:01.619><c> reality</c><00:29:02.269><c> honestly</c>

00:29:03.259 --> 00:29:03.269 align:start position:0%
we really need that in reality honestly
 

00:29:03.269 --> 00:29:06.289 align:start position:0%
we really need that in reality honestly
I<00:29:03.450><c> have</c><00:29:03.899><c> never</c><00:29:04.169><c> ever</c><00:29:04.529><c> ever</c><00:29:04.789><c> came</c><00:29:05.789><c> across</c><00:29:05.940><c> this</c>

00:29:06.289 --> 00:29:06.299 align:start position:0%
I have never ever ever came across this
 

00:29:06.299 --> 00:29:09.019 align:start position:0%
I have never ever ever came across this
situation<00:29:06.840><c> because</c><00:29:07.559><c> if</c><00:29:08.279><c> I</c><00:29:08.429><c> was</c><00:29:08.610><c> concerned</c>

00:29:09.019 --> 00:29:09.029 align:start position:0%
situation because if I was concerned
 

00:29:09.029 --> 00:29:11.450 align:start position:0%
situation because if I was concerned
that<00:29:09.509><c> in</c><00:29:09.779><c> this</c><00:29:09.960><c> case</c><00:29:10.200><c> my</c><00:29:10.259><c> number</c><00:29:10.950><c> variable</c>

00:29:11.450 --> 00:29:11.460 align:start position:0%
that in this case my number variable
 

00:29:11.460 --> 00:29:13.369 align:start position:0%
that in this case my number variable
would<00:29:11.669><c> overflow</c><00:29:11.909><c> I</c><00:29:12.330><c> would</c><00:29:12.779><c> just</c><00:29:12.899><c> simply</c><00:29:13.080><c> use</c>

00:29:13.369 --> 00:29:13.379 align:start position:0%
would overflow I would just simply use
 

00:29:13.379 --> 00:29:16.100 align:start position:0%
would overflow I would just simply use
the<00:29:13.559><c> short</c><00:29:13.830><c> data</c><00:29:14.070><c> type</c><00:29:14.279><c> instead</c><00:29:14.639><c> of</c><00:29:14.759><c> byte</c><00:29:15.110><c> but</c>

00:29:16.100 --> 00:29:16.110 align:start position:0%
the short data type instead of byte but
 

00:29:16.110 --> 00:29:17.869 align:start position:0%
the short data type instead of byte but
I<00:29:16.139><c> decided</c><00:29:16.559><c> to</c><00:29:16.710><c> include</c><00:29:17.039><c> the</c><00:29:17.340><c> concept</c><00:29:17.730><c> of</c>

00:29:17.869 --> 00:29:17.879 align:start position:0%
I decided to include the concept of
 

00:29:17.879 --> 00:29:19.310 align:start position:0%
I decided to include the concept of
overflowing<00:29:18.419><c> because</c><00:29:18.720><c> I</c><00:29:18.960><c> wanted</c><00:29:19.200><c> my</c>

00:29:19.310 --> 00:29:19.320 align:start position:0%
overflowing because I wanted my
 

00:29:19.320 --> 00:29:21.889 align:start position:0%
overflowing because I wanted my
sous-chef<00:29:19.710><c> course</c><00:29:19.980><c> to</c><00:29:20.190><c> be</c><00:29:20.309><c> comprehensive</c><00:29:20.899><c> so</c>

00:29:21.889 --> 00:29:21.899 align:start position:0%
sous-chef course to be comprehensive so
 

00:29:21.899 --> 00:29:24.019 align:start position:0%
sous-chef course to be comprehensive so
just<00:29:22.289><c> be</c><00:29:22.409><c> aware</c><00:29:22.440><c> of</c><00:29:22.619><c> that</c><00:29:22.830><c> in</c><00:29:23.129><c> case</c><00:29:23.340><c> you</c><00:29:23.639><c> hear</c>

00:29:24.019 --> 00:29:24.029 align:start position:0%
just be aware of that in case you hear
 

00:29:24.029 --> 00:29:26.029 align:start position:0%
just be aware of that in case you hear
about<00:29:24.149><c> overflowing</c><00:29:24.539><c> somewhere</c><00:29:25.200><c> but</c><00:29:25.649><c> you're</c>

00:29:26.029 --> 00:29:26.039 align:start position:0%
about overflowing somewhere but you're
 

00:29:26.039 --> 00:29:27.680 align:start position:0%
about overflowing somewhere but you're
probably<00:29:26.429><c> not</c><00:29:26.730><c> going</c><00:29:26.909><c> to</c><00:29:26.970><c> use</c><00:29:27.029><c> that</c><00:29:27.419><c> in</c><00:29:27.600><c> the</c>

00:29:27.680 --> 00:29:27.690 align:start position:0%
probably not going to use that in the
 

00:29:27.690 --> 00:29:29.629 align:start position:0%
probably not going to use that in the
real<00:29:27.840><c> world</c><00:29:28.080><c> in</c><00:29:28.259><c> the</c><00:29:29.070><c> next</c><00:29:29.279><c> lecture</c><00:29:29.519><c> we're</c>

00:29:29.629 --> 00:29:29.639 align:start position:0%
real world in the next lecture we're
 

00:29:29.639 --> 00:29:33.890 align:start position:0%
real world in the next lecture we're
going<00:29:29.730><c> to</c><00:29:29.789><c> talk</c><00:29:29.879><c> about</c><00:29:30.330><c> the</c><00:29:30.480><c> concept</c><00:29:30.960><c> of</c><00:29:31.049><c> scope</c>

00:29:33.890 --> 00:29:33.900 align:start position:0%
 
 

00:29:33.900 --> 00:29:35.840 align:start position:0%
 
okay<00:29:34.590><c> let's</c><00:29:34.800><c> talk</c><00:29:34.920><c> about</c><00:29:34.980><c> the</c><00:29:35.309><c> concept</c><00:29:35.730><c> of</c>

00:29:35.840 --> 00:29:35.850 align:start position:0%
okay let's talk about the concept of
 

00:29:35.850 --> 00:29:39.500 align:start position:0%
okay let's talk about the concept of
scope<00:29:36.350><c> what</c><00:29:37.350><c> is</c><00:29:37.500><c> the</c><00:29:37.620><c> scope</c><00:29:37.890><c> scope</c><00:29:38.820><c> is</c><00:29:39.030><c> where</c><00:29:39.360><c> a</c>

00:29:39.500 --> 00:29:39.510 align:start position:0%
scope what is the scope scope is where a
 

00:29:39.510 --> 00:29:42.560 align:start position:0%
scope what is the scope scope is where a
variable<00:29:39.990><c> or</c><00:29:40.380><c> a</c><00:29:40.410><c> constant</c><00:29:40.559><c> as</c><00:29:41.250><c> meaning</c><00:29:41.940><c> and</c><00:29:42.150><c> is</c>

00:29:42.560 --> 00:29:42.570 align:start position:0%
variable or a constant as meaning and is
 

00:29:42.570 --> 00:29:45.680 align:start position:0%
variable or a constant as meaning and is
accessible<00:29:43.700><c> take</c><00:29:44.700><c> a</c><00:29:44.730><c> look</c><00:29:44.940><c> at</c><00:29:45.030><c> this</c><00:29:45.150><c> block</c><00:29:45.510><c> of</c>

00:29:45.680 --> 00:29:45.690 align:start position:0%
accessible take a look at this block of
 

00:29:45.690 --> 00:29:47.720 align:start position:0%
accessible take a look at this block of
code<00:29:45.720><c> here</c><00:29:46.140><c> as</c><00:29:46.260><c> you</c><00:29:46.530><c> know</c><00:29:46.680><c> a</c><00:29:46.890><c> block</c><00:29:47.490><c> is</c>

00:29:47.720 --> 00:29:47.730 align:start position:0%
code here as you know a block is
 

00:29:47.730 --> 00:29:50.930 align:start position:0%
code here as you know a block is
indicated<00:29:48.330><c> by</c><00:29:48.360><c> curly</c><00:29:49.050><c> braces</c><00:29:49.670><c> here</c><00:29:50.670><c> we</c><00:29:50.790><c> have</c>

00:29:50.930 --> 00:29:50.940 align:start position:0%
indicated by curly braces here we have
 

00:29:50.940 --> 00:29:54.049 align:start position:0%
indicated by curly braces here we have
three<00:29:51.450><c> blocks</c><00:29:51.809><c> of</c><00:29:52.020><c> code</c><00:29:52.230><c> here's</c><00:29:52.830><c> one</c><00:29:53.160><c> here</c><00:29:53.940><c> is</c>

00:29:54.049 --> 00:29:54.059 align:start position:0%
three blocks of code here's one here is
 

00:29:54.059 --> 00:29:57.020 align:start position:0%
three blocks of code here's one here is
another<00:29:54.180><c> and</c><00:29:54.660><c> here</c><00:29:55.230><c> is</c><00:29:55.320><c> the</c><00:29:55.380><c> last</c><00:29:55.559><c> one</c><00:29:56.030><c> inside</c>

00:29:57.020 --> 00:29:57.030 align:start position:0%
another and here is the last one inside
 

00:29:57.030 --> 00:29:58.730 align:start position:0%
another and here is the last one inside
the<00:29:57.059><c> first</c><00:29:57.360><c> block</c><00:29:57.630><c> I've</c><00:29:57.870><c> got</c><00:29:58.440><c> a</c><00:29:58.470><c> variable</c>

00:29:58.730 --> 00:29:58.740 align:start position:0%
the first block I've got a variable
 

00:29:58.740 --> 00:30:01.850 align:start position:0%
the first block I've got a variable
called<00:29:59.070><c> a</c><00:29:59.250><c> an</c><00:29:59.580><c> a</c><00:30:00.510><c> is</c><00:30:00.720><c> accessible</c><00:30:01.410><c> anywhere</c>

00:30:01.850 --> 00:30:01.860 align:start position:0%
called a an a is accessible anywhere
 

00:30:01.860 --> 00:30:04.160 align:start position:0%
called a an a is accessible anywhere
inside<00:30:02.280><c> this</c><00:30:02.430><c> block</c><00:30:02.730><c> or</c><00:30:02.970><c> any</c><00:30:03.480><c> of</c><00:30:03.660><c> these</c><00:30:03.780><c> child</c>

00:30:04.160 --> 00:30:04.170 align:start position:0%
inside this block or any of these child
 

00:30:04.170 --> 00:30:05.980 align:start position:0%
inside this block or any of these child
blocks

00:30:05.980 --> 00:30:05.990 align:start position:0%
blocks
 

00:30:05.990 --> 00:30:07.810 align:start position:0%
blocks
if<00:30:06.320><c> I</c><00:30:06.500><c> go</c><00:30:06.679><c> out</c><00:30:06.770><c> of</c><00:30:06.919><c> this</c><00:30:07.039><c> block</c><00:30:07.309><c> and</c><00:30:07.580><c> try</c><00:30:07.760><c> to</c>

00:30:07.810 --> 00:30:07.820 align:start position:0%
if I go out of this block and try to
 

00:30:07.820 --> 00:30:10.470 align:start position:0%
if I go out of this block and try to
access<00:30:08.240><c> a</c><00:30:08.419><c> the</c><00:30:08.929><c> program</c><00:30:09.320><c> will</c><00:30:09.470><c> not</c><00:30:09.679><c> compile</c>

00:30:10.470 --> 00:30:10.480 align:start position:0%
access a the program will not compile
 

00:30:10.480 --> 00:30:13.450 align:start position:0%
access a the program will not compile
the<00:30:11.480><c> same</c><00:30:11.720><c> rule</c><00:30:11.899><c> applies</c><00:30:12.260><c> to</c><00:30:12.529><c> other</c><00:30:12.890><c> variables</c>

00:30:13.450 --> 00:30:13.460 align:start position:0%
the same rule applies to other variables
 

00:30:13.460 --> 00:30:15.600 align:start position:0%
the same rule applies to other variables
so<00:30:14.149><c> let's</c><00:30:14.360><c> take</c><00:30:14.480><c> a</c><00:30:14.510><c> look</c><00:30:14.659><c> at</c><00:30:14.809><c> this</c><00:30:14.929><c> block</c><00:30:15.200><c> here</c>

00:30:15.600 --> 00:30:15.610 align:start position:0%
so let's take a look at this block here
 

00:30:15.610 --> 00:30:19.180 align:start position:0%
so let's take a look at this block here
B<00:30:16.610><c> is</c><00:30:16.820><c> meaningful</c><00:30:17.570><c> anywhere</c><00:30:18.500><c> inside</c><00:30:18.980><c> this</c>

00:30:19.180 --> 00:30:19.190 align:start position:0%
B is meaningful anywhere inside this
 

00:30:19.190 --> 00:30:21.700 align:start position:0%
B is meaningful anywhere inside this
block<00:30:19.429><c> or</c><00:30:19.669><c> any</c><00:30:19.850><c> of</c><00:30:20.000><c> its</c><00:30:20.090><c> children</c><00:30:20.380><c> if</c><00:30:21.380><c> I</c><00:30:21.559><c> go</c>

00:30:21.700 --> 00:30:21.710 align:start position:0%
block or any of its children if I go
 

00:30:21.710 --> 00:30:23.950 align:start position:0%
block or any of its children if I go
outside<00:30:21.890><c> this</c><00:30:22.250><c> block</c><00:30:22.520><c> and</c><00:30:22.789><c> try</c><00:30:23.360><c> to</c><00:30:23.419><c> access</c><00:30:23.630><c> B</c>

00:30:23.950 --> 00:30:23.960 align:start position:0%
outside this block and try to access B
 

00:30:23.960 --> 00:30:27.100 align:start position:0%
outside this block and try to access B
I'm<00:30:24.230><c> going</c><00:30:24.559><c> to</c><00:30:24.620><c> get</c><00:30:24.740><c> a</c><00:30:24.890><c> compile</c><00:30:25.399><c> time</c><00:30:25.429><c> error</c>

00:30:27.100 --> 00:30:27.110 align:start position:0%
I'm going to get a compile time error
 

00:30:27.110 --> 00:30:28.480 align:start position:0%
I'm going to get a compile time error
okay<00:30:27.350><c> I</c><00:30:27.380><c> think</c><00:30:27.530><c> that's</c><00:30:27.710><c> enough</c><00:30:27.890><c> theory</c><00:30:28.309><c> for</c>

00:30:28.480 --> 00:30:28.490 align:start position:0%
okay I think that's enough theory for
 

00:30:28.490 --> 00:30:30.820 align:start position:0%
okay I think that's enough theory for
now<00:30:28.610><c> let's</c><00:30:29.299><c> open</c><00:30:29.420><c> up</c><00:30:29.690><c> visual</c><00:30:29.809><c> studio</c><00:30:30.020><c> and</c><00:30:30.530><c> do</c>

00:30:30.820 --> 00:30:30.830 align:start position:0%
now let's open up visual studio and do
 

00:30:30.830 --> 00:30:33.400 align:start position:0%
now let's open up visual studio and do
some<00:30:31.040><c> coding</c>

00:30:33.400 --> 00:30:33.410 align:start position:0%
 
 

00:30:33.410 --> 00:30:35.230 align:start position:0%
 
okay<00:30:33.890><c> let's</c><00:30:34.130><c> start</c><00:30:34.400><c> by</c><00:30:34.610><c> declaring</c><00:30:34.820><c> a</c><00:30:35.210><c> variable</c>

00:30:35.230 --> 00:30:35.240 align:start position:0%
okay let's start by declaring a variable
 

00:30:35.240 --> 00:30:41.070 align:start position:0%
okay let's start by declaring a variable
of<00:30:35.900><c> type</c><00:30:35.990><c> byte</c><00:30:36.560><c> and</c><00:30:36.800><c> call</c><00:30:37.160><c> it</c><00:30:37.280><c> number</c>

00:30:41.070 --> 00:30:41.080 align:start position:0%
 
 

00:30:41.080 --> 00:30:43.049 align:start position:0%
 
now<00:30:41.679><c> we</c><00:30:41.739><c> want</c><00:30:42.009><c> to</c><00:30:42.039><c> display</c><00:30:42.279><c> it</c><00:30:42.429><c> on</c><00:30:42.549><c> the</c><00:30:42.610><c> console</c>

00:30:43.049 --> 00:30:43.059 align:start position:0%
now we want to display it on the console
 

00:30:43.059 --> 00:30:45.269 align:start position:0%
now we want to display it on the console
so<00:30:43.749><c> as</c><00:30:43.899><c> you</c><00:30:44.049><c> remember</c><00:30:44.139><c> from</c><00:30:44.679><c> the</c><00:30:44.860><c> last</c><00:30:45.039><c> lecture</c>

00:30:45.269 --> 00:30:45.279 align:start position:0%
so as you remember from the last lecture
 

00:30:45.279 --> 00:30:49.830 align:start position:0%
so as you remember from the last lecture
we<00:30:45.639><c> type</c><00:30:46.119><c> console</c><00:30:46.690><c> dot</c><00:30:47.409><c> write</c><00:30:48.249><c> line</c><00:30:48.549><c> and</c><00:30:48.840><c> put</c>

00:30:49.830 --> 00:30:49.840 align:start position:0%
we type console dot write line and put
 

00:30:49.840 --> 00:30:52.950 align:start position:0%
we type console dot write line and put
the<00:30:49.960><c> variable</c><00:30:50.350><c> here</c><00:30:51.269><c> note</c><00:30:52.269><c> that</c><00:30:52.450><c> as</c><00:30:52.600><c> I</c><00:30:52.809><c> was</c>

00:30:52.950 --> 00:30:52.960 align:start position:0%
the variable here note that as I was
 

00:30:52.960 --> 00:30:54.989 align:start position:0%
the variable here note that as I was
typing<00:30:53.169><c> console</c><00:30:53.799><c> dot</c><00:30:53.950><c> write</c><00:30:54.159><c> line</c><00:30:54.429><c> my</c>

00:30:54.989 --> 00:30:54.999 align:start position:0%
typing console dot write line my
 

00:30:54.999 --> 00:30:56.970 align:start position:0%
typing console dot write line my
resharper<00:30:55.570><c> plugin</c><00:30:55.989><c> automatically</c><00:30:56.710><c> added</c>

00:30:56.970 --> 00:30:56.980 align:start position:0%
resharper plugin automatically added
 

00:30:56.980 --> 00:31:00.060 align:start position:0%
resharper plugin automatically added
this<00:30:57.159><c> using</c><00:30:57.669><c> statement</c><00:30:58.149><c> on</c><00:30:58.269><c> the</c><00:30:58.419><c> top</c><00:30:59.070><c> system</c>

00:31:00.060 --> 00:31:00.070 align:start position:0%
this using statement on the top system
 

00:31:00.070 --> 00:31:02.549 align:start position:0%
this using statement on the top system
is<00:31:00.190><c> a</c><00:31:00.220><c> namespace</c><00:31:00.669><c> and</c><00:31:00.989><c> console</c><00:31:01.989><c> is</c><00:31:02.139><c> a</c><00:31:02.169><c> class</c>

00:31:02.549 --> 00:31:02.559 align:start position:0%
is a namespace and console is a class
 

00:31:02.559 --> 00:31:04.399 align:start position:0%
is a namespace and console is a class
that<00:31:02.860><c> is</c><00:31:02.919><c> defined</c><00:31:03.399><c> in</c><00:31:03.580><c> the</c><00:31:03.700><c> system</c><00:31:04.029><c> namespace</c>

00:31:04.399 --> 00:31:04.409 align:start position:0%
that is defined in the system namespace
 

00:31:04.409 --> 00:31:07.200 align:start position:0%
that is defined in the system namespace
so<00:31:05.409><c> in</c><00:31:05.529><c> order</c><00:31:05.830><c> to</c><00:31:05.919><c> use</c><00:31:06.039><c> the</c><00:31:06.220><c> console</c><00:31:06.580><c> class</c><00:31:06.759><c> we</c>

00:31:07.200 --> 00:31:07.210 align:start position:0%
so in order to use the console class we
 

00:31:07.210 --> 00:31:09.870 align:start position:0%
so in order to use the console class we
need<00:31:07.330><c> that</c><00:31:07.509><c> declaration</c><00:31:07.869><c> here</c><00:31:08.200><c> on</c><00:31:08.289><c> the</c><00:31:08.379><c> top</c>

00:31:09.870 --> 00:31:09.880 align:start position:0%
need that declaration here on the top
 

00:31:09.880 --> 00:31:11.580 align:start position:0%
need that declaration here on the top
if<00:31:09.940><c> you're</c><00:31:10.390><c> not</c><00:31:10.570><c> using</c><00:31:10.840><c> resharper</c><00:31:11.290><c> you</c><00:31:11.440><c> have</c>

00:31:11.580 --> 00:31:11.590 align:start position:0%
if you're not using resharper you have
 

00:31:11.590 --> 00:31:14.490 align:start position:0%
if you're not using resharper you have
to<00:31:11.740><c> go</c><00:31:11.890><c> here</c><00:31:12.130><c> and</c><00:31:12.310><c> manually</c><00:31:12.820><c> type</c><00:31:13.500><c> using</c>

00:31:14.490 --> 00:31:14.500 align:start position:0%
to go here and manually type using
 

00:31:14.500 --> 00:31:18.570 align:start position:0%
to go here and manually type using
system<00:31:15.220><c> semicolon</c><00:31:16.830><c> okay</c><00:31:17.830><c> now</c><00:31:17.980><c> take</c><00:31:18.040><c> a</c><00:31:18.220><c> look</c><00:31:18.400><c> at</c>

00:31:18.570 --> 00:31:18.580 align:start position:0%
system semicolon okay now take a look at
 

00:31:18.580 --> 00:31:21.000 align:start position:0%
system semicolon okay now take a look at
this<00:31:18.730><c> number</c><00:31:18.970><c> here</c><00:31:19.150><c> it</c><00:31:19.600><c> has</c><00:31:20.230><c> a</c><00:31:20.260><c> red</c><00:31:20.620><c> underline</c>

00:31:21.000 --> 00:31:21.010 align:start position:0%
this number here it has a red underline
 

00:31:21.010 --> 00:31:23.670 align:start position:0%
this number here it has a red underline
and<00:31:21.370><c> if</c><00:31:22.180><c> we</c><00:31:22.300><c> put</c><00:31:22.540><c> the</c><00:31:22.660><c> mouse</c><00:31:22.810><c> cursor</c><00:31:23.080><c> here</c><00:31:23.500><c> it</c>

00:31:23.670 --> 00:31:23.680 align:start position:0%
and if we put the mouse cursor here it
 

00:31:23.680 --> 00:31:26.400 align:start position:0%
and if we put the mouse cursor here it
says<00:31:24.190><c> local</c><00:31:24.730><c> variable</c><00:31:25.330><c> number</c><00:31:25.690><c> might</c><00:31:26.080><c> not</c><00:31:26.260><c> be</c>

00:31:26.400 --> 00:31:26.410 align:start position:0%
says local variable number might not be
 

00:31:26.410 --> 00:31:29.430 align:start position:0%
says local variable number might not be
initialized<00:31:26.920><c> before</c><00:31:27.100><c> accessing</c><00:31:27.990><c> if</c><00:31:28.990><c> you</c>

00:31:29.430 --> 00:31:29.440 align:start position:0%
initialized before accessing if you
 

00:31:29.440 --> 00:31:31.350 align:start position:0%
initialized before accessing if you
remember<00:31:29.800><c> from</c><00:31:29.980><c> the</c><00:31:30.070><c> slides</c><00:31:30.460><c> I</c><00:31:30.670><c> told</c><00:31:31.000><c> you</c><00:31:31.150><c> in</c>

00:31:31.350 --> 00:31:31.360 align:start position:0%
remember from the slides I told you in
 

00:31:31.360 --> 00:31:33.260 align:start position:0%
remember from the slides I told you in
c-sharp<00:31:31.840><c> before</c><00:31:32.350><c> you</c><00:31:32.470><c> can</c><00:31:32.590><c> access</c><00:31:32.950><c> a</c><00:31:32.980><c> variable</c>

00:31:33.260 --> 00:31:33.270 align:start position:0%
c-sharp before you can access a variable
 

00:31:33.270 --> 00:31:35.640 align:start position:0%
c-sharp before you can access a variable
you<00:31:34.270><c> need</c><00:31:34.390><c> to</c><00:31:34.480><c> set</c><00:31:34.690><c> it</c><00:31:34.720><c> you</c><00:31:35.380><c> need</c><00:31:35.560><c> to</c>

00:31:35.640 --> 00:31:35.650 align:start position:0%
you need to set it you need to
 

00:31:35.650 --> 00:31:38.040 align:start position:0%
you need to set it you need to
initialize<00:31:36.070><c> it</c><00:31:36.280><c> and</c><00:31:36.390><c> that's</c><00:31:37.390><c> the</c><00:31:37.510><c> reason</c><00:31:37.810><c> here</c>

00:31:38.040 --> 00:31:38.050 align:start position:0%
initialize it and that's the reason here
 

00:31:38.050 --> 00:31:39.930 align:start position:0%
initialize it and that's the reason here
we<00:31:38.170><c> have</c><00:31:38.290><c> the</c><00:31:38.440><c> red</c><00:31:38.560><c> underline</c><00:31:39.040><c> we</c><00:31:39.640><c> cannot</c>

00:31:39.930 --> 00:31:39.940 align:start position:0%
we have the red underline we cannot
 

00:31:39.940 --> 00:31:41.550 align:start position:0%
we have the red underline we cannot
display<00:31:40.210><c> the</c><00:31:40.270><c> number</c><00:31:40.510><c> on</c><00:31:40.840><c> the</c><00:31:40.960><c> console</c><00:31:41.350><c> before</c>

00:31:41.550 --> 00:31:41.560 align:start position:0%
display the number on the console before
 

00:31:41.560 --> 00:31:44.160 align:start position:0%
display the number on the console before
initializing<00:31:42.280><c> that</c><00:31:42.400><c> so</c><00:31:43.240><c> if</c><00:31:43.360><c> I</c><00:31:43.450><c> try</c><00:31:43.660><c> to</c><00:31:43.720><c> compile</c>

00:31:44.160 --> 00:31:44.170 align:start position:0%
initializing that so if I try to compile
 

00:31:44.170 --> 00:31:45.510 align:start position:0%
initializing that so if I try to compile
the<00:31:44.320><c> application</c><00:31:44.350><c> we're</c><00:31:45.070><c> going</c><00:31:45.100><c> to</c><00:31:45.280><c> get</c><00:31:45.400><c> an</c>

00:31:45.510 --> 00:31:45.520 align:start position:0%
the application we're going to get an
 

00:31:45.520 --> 00:31:47.970 align:start position:0%
the application we're going to get an
error<00:31:45.670><c> to</c><00:31:46.660><c> compile</c><00:31:46.990><c> an</c><00:31:47.110><c> application</c><00:31:47.680><c> you</c>

00:31:47.970 --> 00:31:47.980 align:start position:0%
error to compile an application you
 

00:31:47.980 --> 00:31:52.830 align:start position:0%
error to compile an application you
press<00:31:48.220><c> ctrl</c><00:31:48.730><c> shift</c><00:31:48.880><c> +</c><00:31:49.390><c> B</c><00:31:49.660><c> and</c><00:31:51.630><c> here</c><00:31:52.630><c> is</c><00:31:52.720><c> the</c>

00:31:52.830 --> 00:31:52.840 align:start position:0%
press ctrl shift + B and here is the
 

00:31:52.840 --> 00:31:55.800 align:start position:0%
press ctrl shift + B and here is the
error<00:31:52.990><c> list</c><00:31:53.310><c> use</c><00:31:54.310><c> of</c><00:31:54.490><c> unassigned</c><00:31:55.120><c> local</c>

00:31:55.800 --> 00:31:55.810 align:start position:0%
error list use of unassigned local
 

00:31:55.810 --> 00:31:57.990 align:start position:0%
error list use of unassigned local
variable<00:31:56.230><c> number</c><00:31:56.560><c> we</c><00:31:57.520><c> can</c><00:31:57.700><c> solve</c><00:31:57.880><c> this</c>

00:31:57.990 --> 00:31:58.000 align:start position:0%
variable number we can solve this
 

00:31:58.000 --> 00:32:01.020 align:start position:0%
variable number we can solve this
problem<00:31:58.090><c> by</c><00:31:58.630><c> initializing</c><00:31:59.350><c> number</c><00:32:00.030><c> like</c>

00:32:01.020 --> 00:32:01.030 align:start position:0%
problem by initializing number like
 

00:32:01.030 --> 00:32:03.330 align:start position:0%
problem by initializing number like
setting<00:32:01.300><c> it</c><00:32:01.390><c> to</c><00:32:01.570><c> 2</c><00:32:02.080><c> for</c><00:32:02.290><c> example</c><00:32:02.680><c> and</c><00:32:02.860><c> you</c><00:32:03.310><c> see</c>

00:32:03.330 --> 00:32:03.340 align:start position:0%
setting it to 2 for example and you see
 

00:32:03.340 --> 00:32:05.910 align:start position:0%
setting it to 2 for example and you see
the<00:32:03.580><c> red</c><00:32:03.760><c> underline</c><00:32:04.180><c> is</c><00:32:04.360><c> gone</c>

00:32:05.910 --> 00:32:05.920 align:start position:0%
the red underline is gone
 

00:32:05.920 --> 00:32:09.030 align:start position:0%
the red underline is gone
we<00:32:06.920><c> can</c><00:32:07.070><c> compile</c><00:32:07.430><c> again</c><00:32:07.700><c> control-shift</c><00:32:08.480><c> be</c>

00:32:09.030 --> 00:32:09.040 align:start position:0%
we can compile again control-shift be
 

00:32:09.040 --> 00:32:12.460 align:start position:0%
we can compile again control-shift be
build<00:32:10.040><c> succeeded</c><00:32:10.550><c> take</c><00:32:10.940><c> a</c><00:32:10.970><c> look</c><00:32:11.150><c> here</c>

00:32:12.460 --> 00:32:12.470 align:start position:0%
build succeeded take a look here
 

00:32:12.470 --> 00:32:14.830 align:start position:0%
build succeeded take a look here
okay<00:32:12.920><c> now</c><00:32:13.400><c> we</c><00:32:13.460><c> can</c><00:32:13.550><c> run</c><00:32:13.850><c> the</c><00:32:13.970><c> application</c><00:32:14.510><c> by</c>

00:32:14.830 --> 00:32:14.840 align:start position:0%
okay now we can run the application by
 

00:32:14.840 --> 00:32:20.530 align:start position:0%
okay now we can run the application by
pressing<00:32:14.870><c> ctrl</c><00:32:15.620><c> +</c><00:32:15.770><c> f5</c><00:32:18.760><c> okay</c><00:32:19.760><c> so</c><00:32:19.820><c> we</c><00:32:20.030><c> got</c><00:32:20.180><c> two</c><00:32:20.360><c> on</c>

00:32:20.530 --> 00:32:20.540 align:start position:0%
pressing ctrl + f5 okay so we got two on
 

00:32:20.540 --> 00:32:23.770 align:start position:0%
pressing ctrl + f5 okay so we got two on
the<00:32:20.660><c> console</c><00:32:22.120><c> now</c><00:32:23.120><c> let's</c><00:32:23.360><c> extend</c><00:32:23.600><c> this</c>

00:32:23.770 --> 00:32:23.780 align:start position:0%
the console now let's extend this
 

00:32:23.780 --> 00:32:27.610 align:start position:0%
the console now let's extend this
example<00:32:24.170><c> and</c><00:32:24.590><c> declare</c><00:32:25.040><c> a</c><00:32:25.070><c> few</c><00:32:25.280><c> more</c><00:32:25.430><c> variables</c>

00:32:27.610 --> 00:32:27.620 align:start position:0%
example and declare a few more variables
 

00:32:27.620 --> 00:32:31.380 align:start position:0%
example and declare a few more variables
define<00:32:27.890><c> an</c><00:32:28.040><c> integer</c><00:32:28.370><c> int</c><00:32:29.150><c> count</c><00:32:30.140><c> equals</c><00:32:31.070><c> 10</c>

00:32:31.380 --> 00:32:31.390 align:start position:0%
define an integer int count equals 10
 

00:32:31.390 --> 00:32:37.210 align:start position:0%
define an integer int count equals 10
and<00:32:32.390><c> a</c><00:32:32.590><c> float</c><00:32:33.610><c> float</c><00:32:34.610><c> say</c><00:32:35.450><c> total</c><00:32:35.900><c> price</c><00:32:36.220><c> equals</c>

00:32:37.210 --> 00:32:37.220 align:start position:0%
and a float float say total price equals
 

00:32:37.220 --> 00:32:42.900 align:start position:0%
and a float float say total price equals
20<00:32:38.650><c> $95</c><00:32:40.059><c> now</c><00:32:41.059><c> note</c><00:32:41.300><c> this</c><00:32:41.480><c> red</c><00:32:41.780><c> underlined</c><00:32:42.320><c> here</c>

00:32:42.900 --> 00:32:42.910 align:start position:0%
20 $95 now note this red underlined here
 

00:32:42.910 --> 00:32:45.310 align:start position:0%
20 $95 now note this red underlined here
let's<00:32:43.910><c> find</c><00:32:44.059><c> out</c><00:32:44.210><c> what's</c><00:32:44.420><c> happening</c><00:32:44.750><c> here</c><00:32:44.809><c> so</c>

00:32:45.310 --> 00:32:45.320 align:start position:0%
let's find out what's happening here so
 

00:32:45.320 --> 00:32:48.610 align:start position:0%
let's find out what's happening here so
I<00:32:45.350><c> put</c><00:32:45.590><c> the</c><00:32:45.680><c> mouse</c><00:32:45.860><c> cursor</c><00:32:46.070><c> here</c><00:32:46.460><c> it</c><00:32:47.620><c> says</c>

00:32:48.610 --> 00:32:48.620 align:start position:0%
I put the mouse cursor here it says
 

00:32:48.620 --> 00:32:51.100 align:start position:0%
I put the mouse cursor here it says
cannot<00:32:49.160><c> convert</c><00:32:49.610><c> source</c><00:32:50.059><c> type</c><00:32:50.300><c> double</c><00:32:50.780><c> to</c>

00:32:51.100 --> 00:32:51.110 align:start position:0%
cannot convert source type double to
 

00:32:51.110 --> 00:32:53.890 align:start position:0%
cannot convert source type double to
target<00:32:51.500><c> type</c><00:32:51.650><c> float</c><00:32:51.980><c> if</c><00:32:52.520><c> you</c><00:32:53.360><c> remember</c><00:32:53.750><c> from</c>

00:32:53.890 --> 00:32:53.900 align:start position:0%
target type float if you remember from
 

00:32:53.900 --> 00:32:55.360 align:start position:0%
target type float if you remember from
the<00:32:54.080><c> slides</c><00:32:54.380><c> I</c><00:32:54.590><c> told</c><00:32:55.010><c> you</c>

00:32:55.360 --> 00:32:55.370 align:start position:0%
the slides I told you
 

00:32:55.370 --> 00:32:57.880 align:start position:0%
the slides I told you
by<00:32:55.550><c> default</c><00:32:55.850><c> the</c><00:32:56.240><c> sea-shore</c><00:32:56.600><c> compiler</c><00:32:57.020><c> traits</c>

00:32:57.880 --> 00:32:57.890 align:start position:0%
by default the sea-shore compiler traits
 

00:32:57.890 --> 00:32:59.830 align:start position:0%
by default the sea-shore compiler traits
real<00:32:58.400><c> numbers</c><00:32:58.850><c> like</c><00:32:59.090><c> this</c><00:32:59.240><c> one</c><00:32:59.420><c> here</c><00:32:59.720><c> as</c>

00:32:59.830 --> 00:32:59.840 align:start position:0%
real numbers like this one here as
 

00:32:59.840 --> 00:33:03.950 align:start position:0%
real numbers like this one here as
double<00:33:00.559><c> whereas</c><00:33:01.429><c> we</c><00:33:01.580><c> are</c><00:33:01.610><c> declaring</c><00:33:01.910><c> a</c><00:33:02.179><c> float</c>

00:33:03.950 --> 00:33:03.960 align:start position:0%
double whereas we are declaring a float
 

00:33:03.960 --> 00:33:06.200 align:start position:0%
double whereas we are declaring a float
so<00:33:04.289><c> here</c><00:33:04.590><c> we</c><00:33:04.740><c> need</c><00:33:04.860><c> to</c><00:33:04.919><c> explicitly</c><00:33:05.399><c> tell</c><00:33:06.059><c> the</c>

00:33:06.200 --> 00:33:06.210 align:start position:0%
so here we need to explicitly tell the
 

00:33:06.210 --> 00:33:07.999 align:start position:0%
so here we need to explicitly tell the
c-sharp<00:33:06.539><c> compiler</c><00:33:06.929><c> to</c><00:33:07.320><c> treat</c><00:33:07.619><c> this</c><00:33:07.830><c> real</c>

00:33:07.999 --> 00:33:08.009 align:start position:0%
c-sharp compiler to treat this real
 

00:33:08.009 --> 00:33:10.609 align:start position:0%
c-sharp compiler to treat this real
number<00:33:08.399><c> as</c><00:33:08.610><c> a</c><00:33:08.669><c> float</c><00:33:09.090><c> and</c><00:33:09.330><c> we</c><00:33:09.809><c> can</c><00:33:09.990><c> do</c><00:33:10.139><c> that</c><00:33:10.289><c> by</c>

00:33:10.609 --> 00:33:10.619 align:start position:0%
number as a float and we can do that by
 

00:33:10.619 --> 00:33:13.169 align:start position:0%
number as a float and we can do that by
appending<00:33:10.950><c> an</c><00:33:11.190><c> F</c><00:33:11.399><c> at</c><00:33:11.669><c> the</c><00:33:11.789><c> end</c>

00:33:13.169 --> 00:33:13.179 align:start position:0%
appending an F at the end
 

00:33:13.179 --> 00:33:16.799 align:start position:0%
appending an F at the end
so<00:33:13.929><c> the</c><00:33:14.109><c> error</c><00:33:14.259><c> is</c><00:33:14.349><c> gone</c><00:33:15.539><c> let's</c><00:33:16.539><c> take</c><00:33:16.690><c> your</c>

00:33:16.799 --> 00:33:16.809 align:start position:0%
so the error is gone let's take your
 

00:33:16.809 --> 00:33:22.820 align:start position:0%
so the error is gone let's take your
character<00:33:18.419><c> so</c><00:33:19.419><c> char</c><00:33:19.979><c> character</c><00:33:20.979><c> equals</c><00:33:21.549><c> a</c>

00:33:22.820 --> 00:33:22.830 align:start position:0%
character so char character equals a
 

00:33:22.830 --> 00:33:25.320 align:start position:0%
character so char character equals a
note<00:33:23.830><c> that</c><00:33:23.979><c> in</c><00:33:24.129><c> c-sharp</c><00:33:24.549><c> we</c><00:33:25.029><c> enclose</c>

00:33:25.320 --> 00:33:25.330 align:start position:0%
note that in c-sharp we enclose
 

00:33:25.330 --> 00:33:29.639 align:start position:0%
note that in c-sharp we enclose
characters<00:33:25.929><c> by</c><00:33:26.379><c> single</c><00:33:26.799><c> quote</c><00:33:27.009><c> like</c><00:33:27.999><c> here</c><00:33:28.649><c> we</c>

00:33:29.639 --> 00:33:29.649 align:start position:0%
characters by single quote like here we
 

00:33:29.649 --> 00:33:32.969 align:start position:0%
characters by single quote like here we
can<00:33:29.799><c> also</c><00:33:29.950><c> declare</c><00:33:30.369><c> a</c><00:33:30.429><c> string</c><00:33:31.559><c> string</c><00:33:32.559><c> is</c><00:33:32.769><c> not</c>

00:33:32.969 --> 00:33:32.979 align:start position:0%
can also declare a string string is not
 

00:33:32.979 --> 00:33:34.799 align:start position:0%
can also declare a string string is not
one<00:33:33.129><c> of</c><00:33:33.249><c> the</c><00:33:33.369><c> primitive</c><00:33:33.609><c> types</c><00:33:34.089><c> and</c><00:33:34.359><c> have</c>

00:33:34.799 --> 00:33:34.809 align:start position:0%
one of the primitive types and have
 

00:33:34.809 --> 00:33:36.599 align:start position:0%
one of the primitive types and have
covered<00:33:35.229><c> it</c><00:33:35.349><c> in</c><00:33:35.499><c> a</c><00:33:35.589><c> separate</c><00:33:35.950><c> lecture</c><00:33:36.159><c> in</c><00:33:36.489><c> this</c>

00:33:36.599 --> 00:33:36.609 align:start position:0%
covered it in a separate lecture in this
 

00:33:36.609 --> 00:33:38.609 align:start position:0%
covered it in a separate lecture in this
course<00:33:36.909><c> but</c><00:33:37.479><c> for</c><00:33:37.719><c> now</c><00:33:37.839><c> let</c><00:33:38.019><c> me</c><00:33:38.109><c> show</c><00:33:38.289><c> you</c><00:33:38.349><c> how</c>

00:33:38.609 --> 00:33:38.619 align:start position:0%
course but for now let me show you how
 

00:33:38.619 --> 00:33:41.839 align:start position:0%
course but for now let me show you how
to<00:33:38.679><c> declare</c><00:33:39.129><c> a</c><00:33:39.190><c> string</c><00:33:39.659><c> which</c><00:33:40.659><c> is</c><00:33:40.690><c> type</c><00:33:40.960><c> string</c>

00:33:41.839 --> 00:33:41.849 align:start position:0%
to declare a string which is type string
 

00:33:41.849 --> 00:33:47.869 align:start position:0%
to declare a string which is type string
give<00:33:42.849><c> it</c><00:33:42.940><c> a</c><00:33:43.029><c> name</c><00:33:43.739><c> first</c><00:33:44.739><c> name</c><00:33:44.919><c> equals</c><00:33:45.789><c> mosh</c>

00:33:47.869 --> 00:33:47.879 align:start position:0%
give it a name first name equals mosh
 

00:33:47.879 --> 00:33:50.459 align:start position:0%
give it a name first name equals mosh
note<00:33:48.879><c> that</c><00:33:48.909><c> with</c><00:33:49.239><c> strings</c><00:33:49.570><c> we</c><00:33:49.809><c> enclose</c><00:33:50.200><c> them</c>

00:33:50.459 --> 00:33:50.469 align:start position:0%
note that with strings we enclose them
 

00:33:50.469 --> 00:33:53.249 align:start position:0%
note that with strings we enclose them
in<00:33:50.499><c> double</c><00:33:51.129><c> quote</c><00:33:51.570><c> so</c><00:33:52.570><c> that's</c><00:33:52.960><c> one</c><00:33:53.139><c> of</c><00:33:53.169><c> the</c>

00:33:53.249 --> 00:33:53.259 align:start position:0%
in double quote so that's one of the
 

00:33:53.259 --> 00:33:54.959 align:start position:0%
in double quote so that's one of the
differences<00:33:53.799><c> between</c><00:33:53.859><c> strings</c><00:33:54.729><c> and</c>

00:33:54.959 --> 00:33:54.969 align:start position:0%
differences between strings and
 

00:33:54.969 --> 00:33:57.060 align:start position:0%
differences between strings and
characters

00:33:57.060 --> 00:33:57.070 align:start position:0%
characters
 

00:33:57.070 --> 00:34:01.639 align:start position:0%
characters
and<00:33:57.159><c> finally</c><00:33:57.759><c> let's</c><00:33:58.059><c> declare</c><00:33:58.240><c> a</c><00:33:58.570><c> bull</c><00:33:59.970><c> bull</c><00:34:00.970><c> is</c>

00:34:01.639 --> 00:34:01.649 align:start position:0%
and finally let's declare a bull bull is
 

00:34:01.649 --> 00:34:05.999 align:start position:0%
and finally let's declare a bull bull is
working<00:34:02.649><c> equals</c><00:34:03.340><c> true</c><00:34:04.259><c> so</c><00:34:05.259><c> with</c><00:34:05.440><c> bulls</c><00:34:05.679><c> we</c><00:34:05.860><c> can</c>

00:34:05.999 --> 00:34:06.009 align:start position:0%
working equals true so with bulls we can
 

00:34:06.009 --> 00:34:10.050 align:start position:0%
working equals true so with bulls we can
either<00:34:06.159><c> set</c><00:34:06.460><c> them</c><00:34:06.580><c> to</c><00:34:06.730><c> true</c><00:34:07.000><c> or</c><00:34:07.210><c> false</c><00:34:09.060><c> both</c>

00:34:10.050 --> 00:34:10.060 align:start position:0%
either set them to true or false both
 

00:34:10.060 --> 00:34:12.000 align:start position:0%
either set them to true or false both
true<00:34:10.359><c> and</c><00:34:10.389><c> false</c><00:34:10.599><c> our</c><00:34:10.960><c> keywords</c><00:34:11.379><c> as</c><00:34:11.530><c> you</c><00:34:11.589><c> can</c>

00:34:12.000 --> 00:34:12.010 align:start position:0%
true and false our keywords as you can
 

00:34:12.010 --> 00:34:13.559 align:start position:0%
true and false our keywords as you can
see<00:34:12.190><c> they're</c><00:34:12.429><c> indicated</c><00:34:12.909><c> by</c><00:34:13.060><c> the</c><00:34:13.119><c> blue</c><00:34:13.329><c> color</c>

00:34:13.559 --> 00:34:13.569 align:start position:0%
see they're indicated by the blue color
 

00:34:13.569 --> 00:34:16.770 align:start position:0%
see they're indicated by the blue color
here<00:34:13.690><c> and</c><00:34:14.020><c> they're</c><00:34:14.649><c> lowercase</c><00:34:15.329><c> so</c><00:34:16.329><c> everything</c>

00:34:16.770 --> 00:34:16.780 align:start position:0%
here and they're lowercase so everything
 

00:34:16.780 --> 00:34:18.659 align:start position:0%
here and they're lowercase so everything
you<00:34:16.899><c> see</c><00:34:16.929><c> here</c><00:34:17.379><c> that</c><00:34:17.409><c> is</c><00:34:17.740><c> blue</c><00:34:17.980><c> is</c><00:34:18.220><c> a</c><00:34:18.280><c> keyword</c>

00:34:18.659 --> 00:34:18.669 align:start position:0%
you see here that is blue is a keyword
 

00:34:18.669 --> 00:34:24.149 align:start position:0%
you see here that is blue is a keyword
like<00:34:19.450><c> static</c><00:34:20.020><c> void</c><00:34:21.000><c> string</c><00:34:22.000><c> class</c><00:34:22.829><c> name</c><00:34:23.829><c> space</c>

00:34:24.149 --> 00:34:24.159 align:start position:0%
like static void string class name space
 

00:34:24.159 --> 00:34:27.020 align:start position:0%
like static void string class name space
and<00:34:24.520><c> all</c><00:34:25.030><c> these</c><00:34:25.149><c> data</c><00:34:25.450><c> types</c><00:34:25.659><c> here</c>

00:34:27.020 --> 00:34:27.030 align:start position:0%
and all these data types here
 

00:34:27.030 --> 00:34:29.090 align:start position:0%
and all these data types here
now<00:34:27.720><c> let's</c><00:34:27.960><c> display</c><00:34:28.260><c> these</c><00:34:28.409><c> variables</c><00:34:28.889><c> on</c><00:34:28.980><c> the</c>

00:34:29.090 --> 00:34:29.100 align:start position:0%
now let's display these variables on the
 

00:34:29.100 --> 00:34:36.550 align:start position:0%
now let's display these variables on the
console<00:34:30.830><c> so</c><00:34:33.950><c> let</c><00:34:34.950><c> me</c><00:34:35.070><c> show</c><00:34:35.220><c> you</c><00:34:35.310><c> a</c><00:34:35.340><c> trick</c>

00:34:36.550 --> 00:34:36.560 align:start position:0%
console so let me show you a trick
 

00:34:36.560 --> 00:34:38.750 align:start position:0%
console so let me show you a trick
instead<00:34:37.560><c> of</c><00:34:37.649><c> writing</c><00:34:37.830><c> constant</c><00:34:38.429><c> the</c><00:34:38.520><c> right</c>

00:34:38.750 --> 00:34:38.760 align:start position:0%
instead of writing constant the right
 

00:34:38.760 --> 00:34:41.690 align:start position:0%
instead of writing constant the right
line<00:34:39.000><c> we</c><00:34:39.240><c> can</c><00:34:39.389><c> do</c><00:34:39.510><c> a</c><00:34:39.540><c> shortcut</c><00:34:40.399><c> this</c><00:34:41.399><c> is</c><00:34:41.550><c> what</c>

00:34:41.690 --> 00:34:41.700 align:start position:0%
line we can do a shortcut this is what
 

00:34:41.700 --> 00:34:45.290 align:start position:0%
line we can do a shortcut this is what
we<00:34:41.820><c> call</c><00:34:42.030><c> a</c><00:34:42.210><c> code</c><00:34:42.570><c> snippet</c><00:34:42.919><c> so</c><00:34:43.919><c> we</c><00:34:44.129><c> type</c><00:34:44.340><c> CW</c>

00:34:45.290 --> 00:34:45.300 align:start position:0%
we call a code snippet so we type CW
 

00:34:45.300 --> 00:34:47.629 align:start position:0%
we call a code snippet so we type CW
that<00:34:45.600><c> is</c><00:34:45.720><c> short</c><00:34:45.990><c> for</c><00:34:46.169><c> console.writeline</c><00:34:47.159><c> and</c>

00:34:47.629 --> 00:34:47.639 align:start position:0%
that is short for console.writeline and
 

00:34:47.639 --> 00:34:50.750 align:start position:0%
that is short for console.writeline and
then<00:34:48.210><c> press</c><00:34:48.450><c> tab</c><00:34:48.720><c> and</c><00:34:49.639><c> Visual</c><00:34:50.639><c> Studio</c>

00:34:50.750 --> 00:34:50.760 align:start position:0%
then press tab and Visual Studio
 

00:34:50.760 --> 00:34:52.879 align:start position:0%
then press tab and Visual Studio
automatically<00:34:51.480><c> converts</c><00:34:52.050><c> that</c><00:34:52.230><c> to</c><00:34:52.500><c> console</c>

00:34:52.879 --> 00:34:52.889 align:start position:0%
automatically converts that to console
 

00:34:52.889 --> 00:34:55.250 align:start position:0%
automatically converts that to console
the<00:34:53.010><c> right</c><00:34:53.190><c> line</c><00:34:53.629><c> there</c><00:34:54.629><c> are</c><00:34:54.750><c> various</c><00:34:55.050><c> code</c>

00:34:55.250 --> 00:34:55.260 align:start position:0%
the right line there are various code
 

00:34:55.260 --> 00:34:56.920 align:start position:0%
the right line there are various code
snippets<00:34:55.679><c> that</c><00:34:55.919><c> help</c><00:34:56.100><c> you</c><00:34:56.220><c> write</c><00:34:56.370><c> code</c><00:34:56.580><c> faster</c>

00:34:56.920 --> 00:34:56.930 align:start position:0%
snippets that help you write code faster
 

00:34:56.930 --> 00:34:58.940 align:start position:0%
snippets that help you write code faster
and<00:34:57.930><c> I</c><00:34:57.990><c> will</c><00:34:58.140><c> try</c><00:34:58.320><c> to</c><00:34:58.350><c> point</c><00:34:58.650><c> them</c><00:34:58.830><c> out</c>

00:34:58.940 --> 00:34:58.950 align:start position:0%
and I will try to point them out
 

00:34:58.950 --> 00:35:02.300 align:start position:0%
and I will try to point them out
throughout<00:34:59.280><c> this</c><00:34:59.430><c> course</c><00:35:00.830><c> so</c><00:35:01.830><c> let's</c><00:35:02.040><c> display</c>

00:35:02.300 --> 00:35:02.310 align:start position:0%
throughout this course so let's display
 

00:35:02.310 --> 00:35:08.510 align:start position:0%
throughout this course so let's display
count<00:35:04.160><c> now</c><00:35:05.160><c> another</c><00:35:05.430><c> one</c><00:35:07.250><c> totalprice</c>

00:35:08.510 --> 00:35:08.520 align:start position:0%
count now another one totalprice
 

00:35:08.520 --> 00:35:10.880 align:start position:0%
count now another one totalprice
and<00:35:08.760><c> note</c><00:35:09.180><c> that</c><00:35:09.210><c> i</c><00:35:09.390><c> can</c><00:35:09.690><c> just</c><00:35:09.840><c> type</c><00:35:10.050><c> t</c><00:35:10.410><c> oh</c><00:35:10.440><c> and</c>

00:35:10.880 --> 00:35:10.890 align:start position:0%
and note that i can just type t oh and
 

00:35:10.890 --> 00:35:13.640 align:start position:0%
and note that i can just type t oh and
here<00:35:11.700><c> is</c><00:35:11.790><c> what</c><00:35:12.000><c> we</c><00:35:12.030><c> call</c><00:35:12.270><c> intellisense</c><00:35:12.900><c> it's</c>

00:35:13.640 --> 00:35:13.650 align:start position:0%
here is what we call intellisense it's
 

00:35:13.650 --> 00:35:15.980 align:start position:0%
here is what we call intellisense it's
visual<00:35:14.040><c> studios</c><00:35:14.430><c> auto</c><00:35:14.700><c> completion</c><00:35:15.270><c> mechanism</c>

00:35:15.980 --> 00:35:15.990 align:start position:0%
visual studios auto completion mechanism
 

00:35:15.990 --> 00:35:18.020 align:start position:0%
visual studios auto completion mechanism
you<00:35:16.620><c> don't</c><00:35:16.800><c> have</c><00:35:16.950><c> to</c><00:35:17.100><c> type</c><00:35:17.280><c> the</c><00:35:17.460><c> full</c><00:35:17.730><c> name</c><00:35:18.000><c> of</c>

00:35:18.020 --> 00:35:18.030 align:start position:0%
you don't have to type the full name of
 

00:35:18.030 --> 00:35:20.840 align:start position:0%
you don't have to type the full name of
a<00:35:18.270><c> type</c><00:35:18.510><c> or</c><00:35:18.720><c> a</c><00:35:18.810><c> variable</c><00:35:19.440><c> as</c><00:35:19.710><c> long</c><00:35:20.580><c> as</c><00:35:20.730><c> the</c>

00:35:20.840 --> 00:35:20.850 align:start position:0%
a type or a variable as long as the
 

00:35:20.850 --> 00:35:22.700 align:start position:0%
a type or a variable as long as the
intellisense<00:35:21.270><c> detects</c><00:35:21.930><c> tab</c><00:35:22.110><c> and</c><00:35:22.350><c> is</c>

00:35:22.700 --> 00:35:22.710 align:start position:0%
intellisense detects tab and is
 

00:35:22.710 --> 00:35:24.920 align:start position:0%
intellisense detects tab and is
highlighted<00:35:23.310><c> here</c><00:35:23.460><c> like</c><00:35:23.700><c> total</c><00:35:24.150><c> price</c><00:35:24.420><c> you</c>

00:35:24.920 --> 00:35:24.930 align:start position:0%
highlighted here like total price you
 

00:35:24.930 --> 00:35:27.350 align:start position:0%
highlighted here like total price you
can<00:35:25.080><c> simply</c><00:35:25.410><c> press</c><00:35:25.530><c> tab</c><00:35:25.920><c> and</c><00:35:26.190><c> there</c><00:35:27.090><c> you</c><00:35:27.180><c> go</c>

00:35:27.350 --> 00:35:27.360 align:start position:0%
can simply press tab and there you go
 

00:35:27.360 --> 00:35:29.660 align:start position:0%
can simply press tab and there you go
visual<00:35:28.290><c> studio</c><00:35:28.440><c> automatically</c><00:35:29.190><c> completes</c>

00:35:29.660 --> 00:35:29.670 align:start position:0%
visual studio automatically completes
 

00:35:29.670 --> 00:35:33.220 align:start position:0%
visual studio automatically completes
that<00:35:29.790><c> for</c><00:35:30.000><c> us</c><00:35:30.770><c> let's</c><00:35:31.770><c> display</c><00:35:32.040><c> the</c><00:35:32.100><c> character</c>

00:35:33.220 --> 00:35:33.230 align:start position:0%
that for us let's display the character
 

00:35:33.230 --> 00:35:39.140 align:start position:0%
that for us let's display the character
same<00:35:34.230><c> here</c><00:35:34.590><c> I</c><00:35:34.740><c> just</c><00:35:34.890><c> press</c><00:35:35.250><c> tab</c><00:35:35.490><c> again</c><00:35:37.790><c> I</c><00:35:38.790><c> type</c>

00:35:39.140 --> 00:35:39.150 align:start position:0%
same here I just press tab again I type
 

00:35:39.150 --> 00:35:41.780 align:start position:0%
same here I just press tab again I type
only<00:35:39.390><c> a</c><00:35:39.510><c> few</c><00:35:39.720><c> characters</c><00:35:40.250><c> it</c><00:35:41.250><c> can</c><00:35:41.430><c> press</c><00:35:41.610><c> tab</c>

00:35:41.780 --> 00:35:41.790 align:start position:0%
only a few characters it can press tab
 

00:35:41.790 --> 00:35:47.060 align:start position:0%
only a few characters it can press tab
or<00:35:42.000><c> enter</c><00:35:42.030><c> and</c><00:35:43.640><c> finally</c><00:35:44.640><c> is</c><00:35:44.850><c> working</c><00:35:45.890><c> we</c><00:35:46.890><c> run</c>

00:35:47.060 --> 00:35:47.070 align:start position:0%
or enter and finally is working we run
 

00:35:47.070 --> 00:35:51.030 align:start position:0%
or enter and finally is working we run
the<00:35:47.190><c> application</c><00:35:47.280><c> by</c><00:35:47.850><c> ctrl</c><00:35:48.270><c> +</c><00:35:48.450><c> f5</c>

00:35:51.030 --> 00:35:51.040 align:start position:0%
 
 

00:35:51.040 --> 00:35:52.680 align:start position:0%
 
so<00:35:51.490><c> we</c><00:35:51.609><c> got</c><00:35:51.760><c> all</c><00:35:51.970><c> these</c><00:35:52.090><c> values</c><00:35:52.420><c> on</c><00:35:52.600><c> the</c>

00:35:52.680 --> 00:35:52.690 align:start position:0%
so we got all these values on the
 

00:35:52.690 --> 00:35:55.190 align:start position:0%
so we got all these values on the
console

00:35:55.190 --> 00:35:55.200 align:start position:0%
 
 

00:35:55.200 --> 00:35:57.360 align:start position:0%
 
okay<00:35:56.200><c> now</c><00:35:56.350><c> let</c><00:35:56.530><c> me</c><00:35:56.620><c> show</c><00:35:56.740><c> you</c><00:35:56.800><c> something</c><00:35:57.220><c> else</c>

00:35:57.360 --> 00:35:57.370 align:start position:0%
okay now let me show you something else
 

00:35:57.370 --> 00:36:01.200 align:start position:0%
okay now let me show you something else
in<00:35:58.260><c> c-sharp</c><00:35:59.260><c> we</c><00:35:59.590><c> have</c><00:35:59.770><c> a</c><00:35:59.800><c> keyword</c><00:36:00.280><c> called</c><00:36:00.730><c> var</c>

00:36:01.200 --> 00:36:01.210 align:start position:0%
in c-sharp we have a keyword called var
 

00:36:01.210 --> 00:36:03.840 align:start position:0%
in c-sharp we have a keyword called var
which<00:36:01.870><c> makes</c><00:36:02.110><c> variable</c><00:36:02.650><c> declarations</c><00:36:03.250><c> easier</c>

00:36:03.840 --> 00:36:03.850 align:start position:0%
which makes variable declarations easier
 

00:36:03.850 --> 00:36:07.050 align:start position:0%
which makes variable declarations easier
for<00:36:04.780><c> example</c><00:36:05.170><c> here</c><00:36:05.470><c> instead</c><00:36:06.130><c> of</c><00:36:06.190><c> explicitly</c>

00:36:07.050 --> 00:36:07.060 align:start position:0%
for example here instead of explicitly
 

00:36:07.060 --> 00:36:09.270 align:start position:0%
for example here instead of explicitly
specifying<00:36:07.960><c> the</c><00:36:08.110><c> datatype</c><00:36:08.650><c> for</c><00:36:08.680><c> each</c><00:36:09.070><c> of</c>

00:36:09.270 --> 00:36:09.280 align:start position:0%
specifying the datatype for each of
 

00:36:09.280 --> 00:36:14.140 align:start position:0%
specifying the datatype for each of
these<00:36:09.400><c> here</c><00:36:09.730><c> I</c><00:36:09.850><c> can</c><00:36:10.420><c> simply</c><00:36:10.570><c> type</c><00:36:10.960><c> var</c>

00:36:14.140 --> 00:36:14.150 align:start position:0%
 
 

00:36:14.150 --> 00:36:16.660 align:start position:0%
 
and<00:36:14.240><c> I</c><00:36:14.630><c> let</c><00:36:14.839><c> the</c><00:36:14.990><c> c-sharp</c><00:36:15.319><c> compiler</c><00:36:15.770><c> detect</c>

00:36:16.660 --> 00:36:16.670 align:start position:0%
and I let the c-sharp compiler detect
 

00:36:16.670 --> 00:36:20.140 align:start position:0%
and I let the c-sharp compiler detect
the<00:36:16.970><c> datatype</c><00:36:17.599><c> for</c><00:36:17.839><c> this</c><00:36:18.200><c> variable</c><00:36:18.470><c> here</c><00:36:19.150><c> so</c>

00:36:20.140 --> 00:36:20.150 align:start position:0%
the datatype for this variable here so
 

00:36:20.150 --> 00:36:32.859 align:start position:0%
the datatype for this variable here so
let<00:36:20.420><c> me</c><00:36:20.539><c> replace</c><00:36:20.779><c> all</c><00:36:21.109><c> of</c><00:36:21.140><c> this</c><00:36:21.380><c> with</c><00:36:21.619><c> var</c><00:36:31.869><c> okay</c>

00:36:32.859 --> 00:36:32.869 align:start position:0%
let me replace all of this with var okay
 

00:36:32.869 --> 00:36:35.559 align:start position:0%
let me replace all of this with var okay
now<00:36:33.049><c> if</c><00:36:33.260><c> we</c><00:36:33.410><c> hover</c><00:36:33.650><c> the</c><00:36:33.950><c> mouse</c><00:36:33.980><c> over</c><00:36:34.400><c> the</c><00:36:35.270><c> VAR</c>

00:36:35.559 --> 00:36:35.569 align:start position:0%
now if we hover the mouse over the VAR
 

00:36:35.569 --> 00:36:37.160 align:start position:0%
now if we hover the mouse over the VAR
keyword

00:36:37.160 --> 00:36:37.170 align:start position:0%
keyword
 

00:36:37.170 --> 00:36:39.349 align:start position:0%
keyword
we<00:36:37.710><c> can</c><00:36:37.859><c> see</c><00:36:38.099><c> the</c><00:36:38.250><c> underlying</c><00:36:38.519><c> data</c><00:36:38.880><c> type</c><00:36:39.150><c> in</c>

00:36:39.349 --> 00:36:39.359 align:start position:0%
we can see the underlying data type in
 

00:36:39.359 --> 00:36:41.930 align:start position:0%
we can see the underlying data type in
this<00:36:39.750><c> case</c><00:36:39.990><c> is</c><00:36:40.289><c> system</c><00:36:40.829><c> that</c><00:36:40.980><c> boolean</c><00:36:41.160><c> which</c>

00:36:41.930 --> 00:36:41.940 align:start position:0%
this case is system that boolean which
 

00:36:41.940 --> 00:36:44.210 align:start position:0%
this case is system that boolean which
is<00:36:42.089><c> the</c><00:36:42.210><c> data</c><00:36:42.450><c> type</c><00:36:42.779><c> which</c><00:36:43.440><c> maps</c><00:36:43.710><c> to</c><00:36:43.980><c> C</c><00:36:44.190><c> sharp</c>

00:36:44.210 --> 00:36:44.220 align:start position:0%
is the data type which maps to C sharp
 

00:36:44.220 --> 00:36:49.700 align:start position:0%
is the data type which maps to C sharp
pull<00:36:44.880><c> keyword</c><00:36:46.640><c> how</c><00:36:47.640><c> about</c><00:36:47.819><c> this</c><00:36:47.940><c> one</c><00:36:48.529><c> that's</c><00:36:49.529><c> a</c>

00:36:49.700 --> 00:36:49.710 align:start position:0%
pull keyword how about this one that's a
 

00:36:49.710 --> 00:36:51.400 align:start position:0%
pull keyword how about this one that's a
string

00:36:51.400 --> 00:36:51.410 align:start position:0%
string
 

00:36:51.410 --> 00:36:55.839 align:start position:0%
string
and<00:36:51.500><c> this</c><00:36:52.069><c> one</c><00:36:52.250><c> is</c><00:36:52.819><c> a</c><00:36:53.000><c> character</c><00:36:53.539><c> and</c><00:36:54.670><c> this</c><00:36:55.670><c> one</c>

00:36:55.839 --> 00:36:55.849 align:start position:0%
and this one is a character and this one
 

00:36:55.849 --> 00:36:58.420 align:start position:0%
and this one is a character and this one
is<00:36:56.030><c> system</c><00:36:56.720><c> that</c><00:36:56.869><c> single</c><00:36:57.289><c> which</c><00:36:57.859><c> maps</c><00:36:58.130><c> to</c>

00:36:58.420 --> 00:36:58.430 align:start position:0%
is system that single which maps to
 

00:36:58.430 --> 00:37:01.660 align:start position:0%
is system that single which maps to
float<00:36:58.940><c> in</c><00:36:59.150><c> c-sharp</c><00:37:00.130><c> and</c><00:37:01.130><c> in</c><00:37:01.250><c> the</c><00:37:01.339><c> case</c><00:37:01.520><c> of</c>

00:37:01.660 --> 00:37:01.670 align:start position:0%
float in c-sharp and in the case of
 

00:37:01.670 --> 00:37:05.160 align:start position:0%
float in c-sharp and in the case of
count<00:37:01.940><c> it's</c><00:37:02.240><c> in</c><00:37:02.480><c> 32</c><00:37:03.380><c> which</c><00:37:03.619><c> is</c><00:37:03.650><c> integer</c><00:37:04.069><c> and</c>

00:37:05.160 --> 00:37:05.170 align:start position:0%
count it's in 32 which is integer and
 

00:37:05.170 --> 00:37:08.200 align:start position:0%
count it's in 32 which is integer and
same<00:37:06.170><c> for</c><00:37:06.349><c> a</c><00:37:06.380><c> number</c><00:37:06.680><c> so</c><00:37:07.430><c> the</c><00:37:07.730><c> tricky</c><00:37:08.000><c> thing</c>

00:37:08.200 --> 00:37:08.210 align:start position:0%
same for a number so the tricky thing
 

00:37:08.210 --> 00:37:10.930 align:start position:0%
same for a number so the tricky thing
here<00:37:08.240><c> is</c><00:37:08.599><c> by</c><00:37:09.109><c> default</c><00:37:09.490><c> c-sharp</c><00:37:10.490><c> treats</c>

00:37:10.930 --> 00:37:10.940 align:start position:0%
here is by default c-sharp treats
 

00:37:10.940 --> 00:37:14.170 align:start position:0%
here is by default c-sharp treats
integral<00:37:11.839><c> numbers</c><00:37:12.200><c> as</c><00:37:12.410><c> integer</c><00:37:13.099><c> and</c><00:37:13.280><c> when</c><00:37:14.059><c> you</c>

00:37:14.170 --> 00:37:14.180 align:start position:0%
integral numbers as integer and when you
 

00:37:14.180 --> 00:37:16.390 align:start position:0%
integral numbers as integer and when you
use<00:37:14.329><c> the</c><00:37:14.510><c> VAR</c><00:37:14.750><c> keyword</c><00:37:14.780><c> it</c><00:37:15.440><c> assumes</c><00:37:16.069><c> that</c><00:37:16.160><c> it's</c>

00:37:16.390 --> 00:37:16.400 align:start position:0%
use the VAR keyword it assumes that it's
 

00:37:16.400 --> 00:37:18.579 align:start position:0%
use the VAR keyword it assumes that it's
an<00:37:16.520><c> integer</c><00:37:16.819><c> if</c><00:37:17.180><c> you</c><00:37:17.780><c> really</c><00:37:18.079><c> want</c><00:37:18.230><c> to</c><00:37:18.289><c> go</c><00:37:18.380><c> for</c>

00:37:18.579 --> 00:37:18.589 align:start position:0%
an integer if you really want to go for
 

00:37:18.589 --> 00:37:19.779 align:start position:0%
an integer if you really want to go for
a<00:37:18.619><c> byte</c><00:37:18.859><c> then</c><00:37:19.069><c> you</c><00:37:19.220><c> have</c><00:37:19.369><c> to</c><00:37:19.490><c> explicitly</c>

00:37:19.779 --> 00:37:19.789 align:start position:0%
a byte then you have to explicitly
 

00:37:19.789 --> 00:37:22.539 align:start position:0%
a byte then you have to explicitly
specify<00:37:20.450><c> it</c><00:37:20.869><c> as</c><00:37:20.990><c> byte</c><00:37:21.230><c> here</c><00:37:21.530><c> but</c><00:37:22.250><c> tell</c><00:37:22.369><c> you</c>

00:37:22.539 --> 00:37:22.549 align:start position:0%
specify it as byte here but tell you
 

00:37:22.549 --> 00:37:25.029 align:start position:0%
specify it as byte here but tell you
from<00:37:22.700><c> experience</c><00:37:22.849><c> it's</c><00:37:23.839><c> safe</c><00:37:24.079><c> to</c><00:37:24.289><c> use</c><00:37:24.319><c> integer</c>

00:37:25.029 --> 00:37:25.039 align:start position:0%
from experience it's safe to use integer
 

00:37:25.039 --> 00:37:27.400 align:start position:0%
from experience it's safe to use integer
in<00:37:25.220><c> most</c><00:37:25.430><c> cases</c><00:37:25.670><c> in</c><00:37:26.030><c> fact</c><00:37:26.690><c> if</c><00:37:26.869><c> you</c><00:37:27.020><c> look</c><00:37:27.170><c> at</c><00:37:27.260><c> the</c>

00:37:27.400 --> 00:37:27.410 align:start position:0%
in most cases in fact if you look at the
 

00:37:27.410 --> 00:37:29.500 align:start position:0%
in most cases in fact if you look at the
classes<00:37:27.920><c> in</c><00:37:28.039><c> the.net</c><00:37:28.339><c> framework</c><00:37:28.609><c> in</c><00:37:29.059><c> most</c>

00:37:29.500 --> 00:37:29.510 align:start position:0%
classes in the.net framework in most
 

00:37:29.510 --> 00:37:32.980 align:start position:0%
classes in the.net framework in most
cases<00:37:29.890><c> integer</c><00:37:30.890><c> is</c><00:37:31.069><c> the</c><00:37:31.520><c> data</c><00:37:31.789><c> type</c><00:37:32.089><c> used</c><00:37:32.359><c> for</c>

00:37:32.980 --> 00:37:32.990 align:start position:0%
cases integer is the data type used for
 

00:37:32.990 --> 00:37:37.089 align:start position:0%
cases integer is the data type used for
representing<00:37:33.559><c> integral</c><00:37:34.309><c> numbers</c><00:37:36.069><c> okay</c><00:37:37.069><c> I</c>

00:37:37.089 --> 00:37:37.099 align:start position:0%
representing integral numbers okay I
 

00:37:37.099 --> 00:37:39.250 align:start position:0%
representing integral numbers okay I
revert<00:37:37.430><c> this</c><00:37:37.579><c> back</c>

00:37:39.250 --> 00:37:39.260 align:start position:0%
revert this back
 

00:37:39.260 --> 00:37:41.470 align:start position:0%
revert this back
now<00:37:39.530><c> I</c><00:37:39.560><c> show</c><00:37:39.770><c> you</c><00:37:39.800><c> something</c><00:37:40.100><c> else</c><00:37:40.369><c> so</c><00:37:41.150><c> let's</c>

00:37:41.470 --> 00:37:41.480 align:start position:0%
now I show you something else so let's
 

00:37:41.480 --> 00:37:43.510 align:start position:0%
now I show you something else so let's
take<00:37:41.720><c> a</c><00:37:41.750><c> look</c><00:37:41.869><c> at</c><00:37:42.020><c> this</c><00:37:42.170><c> one</c><00:37:42.350><c> here</c><00:37:42.530><c> so</c><00:37:43.280><c> it's</c><00:37:43.430><c> a</c>

00:37:43.510 --> 00:37:43.520 align:start position:0%
take a look at this one here so it's a
 

00:37:43.520 --> 00:37:46.290 align:start position:0%
take a look at this one here so it's a
char<00:37:43.820><c> which</c><00:37:44.210><c> is</c><00:37:44.330><c> a</c><00:37:44.359><c> character</c>

00:37:46.290 --> 00:37:46.300 align:start position:0%
char which is a character
 

00:37:46.300 --> 00:37:47.880 align:start position:0%
char which is a character
I<00:37:46.330><c> can</c><00:37:46.660><c> put</c><00:37:46.810><c> the</c><00:37:46.930><c> mouse</c><00:37:47.080><c> cursor</c><00:37:47.290><c> here</c><00:37:47.710><c> and</c>

00:37:47.880 --> 00:37:47.890 align:start position:0%
I can put the mouse cursor here and
 

00:37:47.890 --> 00:37:53.530 align:start position:0%
I can put the mouse cursor here and
press<00:37:48.400><c> control</c><00:37:48.970><c> and</c><00:37:49.180><c> then</c><00:37:49.540><c> click</c>

00:37:53.530 --> 00:37:53.540 align:start position:0%
 
 

00:37:53.540 --> 00:37:56.870 align:start position:0%
 
that<00:37:54.540><c> opens</c><00:37:54.960><c> the</c><00:37:55.260><c> object</c><00:37:55.829><c> browser</c><00:37:55.980><c> window</c>

00:37:56.870 --> 00:37:56.880 align:start position:0%
that opens the object browser window
 

00:37:56.880 --> 00:38:00.170 align:start position:0%
that opens the object browser window
take<00:37:57.569><c> a</c><00:37:57.599><c> look</c><00:37:57.780><c> here</c><00:37:57.960><c> it's</c><00:37:58.200><c> object</c><00:37:58.470><c> browser</c><00:37:59.180><c> and</c>

00:38:00.170 --> 00:38:00.180 align:start position:0%
take a look here it's object browser and
 

00:38:00.180 --> 00:38:01.760 align:start position:0%
take a look here it's object browser and
it's<00:38:00.329><c> a</c><00:38:00.420><c> way</c><00:38:00.540><c> to</c><00:38:00.569><c> look</c><00:38:00.900><c> at</c><00:38:01.079><c> the</c><00:38:01.260><c> various</c>

00:38:01.760 --> 00:38:01.770 align:start position:0%
it's a way to look at the various
 

00:38:01.770 --> 00:38:03.680 align:start position:0%
it's a way to look at the various
classes<00:38:02.280><c> in</c><00:38:02.460><c> your</c><00:38:02.490><c> project</c><00:38:03.060><c> or</c><00:38:03.180><c> in</c><00:38:03.390><c> the.net</c>

00:38:03.680 --> 00:38:03.690 align:start position:0%
classes in your project or in the.net
 

00:38:03.690 --> 00:38:06.589 align:start position:0%
classes in your project or in the.net
framework<00:38:03.960><c> in</c><00:38:04.890><c> this</c><00:38:05.010><c> case</c><00:38:05.250><c> because</c><00:38:05.700><c> I</c><00:38:05.970><c> did</c><00:38:06.569><c> a</c>

00:38:06.589 --> 00:38:06.599 align:start position:0%
framework in this case because I did a
 

00:38:06.599 --> 00:38:09.950 align:start position:0%
framework in this case because I did a
ctrl<00:38:07.109><c> click</c><00:38:07.290><c> on</c><00:38:07.560><c> the</c><00:38:07.829><c> char</c><00:38:08.160><c> or</c><00:38:08.400><c> VAR</c><00:38:08.960><c> keyword</c>

00:38:09.950 --> 00:38:09.960 align:start position:0%
ctrl click on the char or VAR keyword
 

00:38:09.960 --> 00:38:11.990 align:start position:0%
ctrl click on the char or VAR keyword
this<00:38:10.740><c> is</c><00:38:11.010><c> what</c><00:38:11.339><c> we</c><00:38:11.460><c> got</c><00:38:11.609><c> here</c>

00:38:11.990 --> 00:38:12.000 align:start position:0%
this is what we got here
 

00:38:12.000 --> 00:38:14.390 align:start position:0%
this is what we got here
so<00:38:12.510><c> char</c><00:38:12.810><c> is</c><00:38:13.020><c> highlighted</c><00:38:13.560><c> in</c><00:38:13.710><c> the</c><00:38:13.890><c> object</c>

00:38:14.390 --> 00:38:14.400 align:start position:0%
so char is highlighted in the object
 

00:38:14.400 --> 00:38:16.030 align:start position:0%
so char is highlighted in the object
browser

00:38:16.030 --> 00:38:16.040 align:start position:0%
browser
 

00:38:16.040 --> 00:38:17.890 align:start position:0%
browser
on<00:38:16.100><c> the</c><00:38:16.760><c> right</c><00:38:16.940><c> side</c><00:38:17.180><c> you</c><00:38:17.330><c> see</c><00:38:17.360><c> all</c><00:38:17.720><c> the</c>

00:38:17.890 --> 00:38:17.900 align:start position:0%
on the right side you see all the
 

00:38:17.900 --> 00:38:19.300 align:start position:0%
on the right side you see all the
members<00:38:18.080><c> of</c><00:38:18.260><c> the</c><00:38:18.590><c> chart</c><00:38:18.860><c> type</c>

00:38:19.300 --> 00:38:19.310 align:start position:0%
members of the chart type
 

00:38:19.310 --> 00:38:22.090 align:start position:0%
members of the chart type
so<00:38:19.910><c> these</c><00:38:20.480><c> purple</c><00:38:20.870><c> ones</c><00:38:20.900><c> are</c><00:38:21.290><c> functions</c><00:38:21.920><c> or</c>

00:38:22.090 --> 00:38:22.100 align:start position:0%
so these purple ones are functions or
 

00:38:22.100 --> 00:38:25.900 align:start position:0%
so these purple ones are functions or
methods<00:38:23.290><c> if</c><00:38:24.290><c> you</c><00:38:24.410><c> scroll</c><00:38:24.650><c> down</c><00:38:24.710><c> here</c><00:38:24.880><c> you</c><00:38:25.880><c> see</c>

00:38:25.900 --> 00:38:25.910 align:start position:0%
methods if you scroll down here you see
 

00:38:25.910 --> 00:38:28.600 align:start position:0%
methods if you scroll down here you see
two<00:38:26.210><c> fields</c><00:38:26.510><c> here</c><00:38:26.720><c> min</c><00:38:27.200><c> value</c><00:38:27.560><c> and</c><00:38:27.800><c> Max</c><00:38:28.220><c> value</c>

00:38:28.600 --> 00:38:28.610 align:start position:0%
two fields here min value and Max value
 

00:38:28.610 --> 00:38:32.680 align:start position:0%
two fields here min value and Max value
we'll<00:38:29.570><c> explore</c><00:38:29.960><c> them</c><00:38:30.170><c> shortly</c><00:38:30.500><c> and</c><00:38:31.510><c> note</c><00:38:32.510><c> that</c>

00:38:32.680 --> 00:38:32.690 align:start position:0%
we'll explore them shortly and note that
 

00:38:32.690 --> 00:38:35.320 align:start position:0%
we'll explore them shortly and note that
here<00:38:33.020><c> is</c><00:38:33.140><c> the</c><00:38:33.590><c> Declaration</c><00:38:34.130><c> of</c><00:38:34.250><c> Char</c><00:38:34.520><c> Char</c><00:38:34.760><c> is</c>

00:38:35.320 --> 00:38:35.330 align:start position:0%
here is the Declaration of Char Char is
 

00:38:35.330 --> 00:38:37.450 align:start position:0%
here is the Declaration of Char Char is
a<00:38:35.360><c> structure</c><00:38:35.900><c> we</c><00:38:36.560><c> will</c><00:38:36.650><c> cover</c><00:38:36.860><c> structures</c>

00:38:37.450 --> 00:38:37.460 align:start position:0%
a structure we will cover structures
 

00:38:37.460 --> 00:38:38.410 align:start position:0%
a structure we will cover structures
later<00:38:37.730><c> in</c><00:38:37.970><c> this</c><00:38:38.060><c> course</c>

00:38:38.410 --> 00:38:38.420 align:start position:0%
later in this course
 

00:38:38.420 --> 00:38:40.990 align:start position:0%
later in this course
and<00:38:38.810><c> note</c><00:38:39.200><c> that</c><00:38:39.230><c> it's</c><00:38:39.620><c> a</c><00:38:39.740><c> member</c><00:38:40.100><c> of</c><00:38:40.250><c> system</c>

00:38:40.990 --> 00:38:41.000 align:start position:0%
and note that it's a member of system
 

00:38:41.000 --> 00:38:42.740 align:start position:0%
and note that it's a member of system
namespace

00:38:42.740 --> 00:38:42.750 align:start position:0%
namespace
 

00:38:42.750 --> 00:38:46.460 align:start position:0%
namespace
it<00:38:43.260><c> can</c><00:38:43.440><c> click</c><00:38:43.650><c> system</c><00:38:44.099><c> and</c><00:38:44.930><c> that</c><00:38:45.930><c> shows</c><00:38:46.230><c> the</c>

00:38:46.460 --> 00:38:46.470 align:start position:0%
it can click system and that shows the
 

00:38:46.470 --> 00:38:48.920 align:start position:0%
it can click system and that shows the
system<00:38:46.650><c> namespace</c><00:38:46.980><c> as</c><00:38:47.400><c> well</c><00:38:48.210><c> as</c><00:38:48.330><c> all</c><00:38:48.540><c> the</c>

00:38:48.920 --> 00:38:48.930 align:start position:0%
system namespace as well as all the
 

00:38:48.930 --> 00:38:51.980 align:start position:0%
system namespace as well as all the
types<00:38:49.230><c> defined</c><00:38:49.680><c> in</c><00:38:50.160><c> the</c><00:38:50.400><c> system</c><00:38:50.550><c> namespace</c><00:38:50.990><c> so</c>

00:38:51.980 --> 00:38:51.990 align:start position:0%
types defined in the system namespace so
 

00:38:51.990 --> 00:38:55.910 align:start position:0%
types defined in the system namespace so
these<00:38:52.200><c> are</c><00:38:52.380><c> part</c><00:38:52.710><c> of</c><00:38:52.770><c> the.net</c><00:38:52.920><c> framework</c><00:38:54.920><c> ok</c>

00:38:55.910 --> 00:38:55.920 align:start position:0%
these are part of the.net framework ok
 

00:38:55.920 --> 00:38:59.510 align:start position:0%
these are part of the.net framework ok
let's<00:38:56.130><c> close</c><00:38:56.220><c> this</c><00:38:56.400><c> for</c><00:38:56.609><c> now</c><00:38:58.190><c> let's</c><00:38:59.190><c> explore</c>

00:38:59.510 --> 00:38:59.520 align:start position:0%
let's close this for now let's explore
 

00:38:59.520 --> 00:39:01.760 align:start position:0%
let's close this for now let's explore
another<00:38:59.820><c> example</c><00:39:00.330><c> so</c><00:39:01.170><c> I'm</c><00:39:01.260><c> going</c><00:39:01.440><c> to</c><00:39:01.470><c> get</c><00:39:01.619><c> rid</c>

00:39:01.760 --> 00:39:01.770 align:start position:0%
another example so I'm going to get rid
 

00:39:01.770 --> 00:39:04.130 align:start position:0%
another example so I'm going to get rid
of<00:39:01.859><c> all</c><00:39:02.070><c> the</c><00:39:02.220><c> code</c><00:39:02.400><c> here</c><00:39:02.760><c> we</c><00:39:03.510><c> can</c><00:39:03.660><c> simply</c><00:39:03.960><c> press</c>

00:39:04.130 --> 00:39:04.140 align:start position:0%
of all the code here we can simply press
 

00:39:04.140 --> 00:39:11.030 align:start position:0%
of all the code here we can simply press
control<00:39:04.590><c> X</c><00:39:04.800><c> on</c><00:39:05.010><c> each</c><00:39:05.130><c> line</c><00:39:07.460><c> and</c><00:39:09.590><c> that</c><00:39:10.590><c> deletes</c>

00:39:11.030 --> 00:39:11.040 align:start position:0%
control X on each line and that deletes
 

00:39:11.040 --> 00:39:14.150 align:start position:0%
control X on each line and that deletes
all<00:39:11.310><c> these</c><00:39:11.700><c> lines</c><00:39:11.910><c> here</c><00:39:12.800><c> ok</c><00:39:13.800><c> let's</c><00:39:13.950><c> do</c><00:39:14.130><c> a</c>

00:39:14.150 --> 00:39:14.160 align:start position:0%
all these lines here ok let's do a
 

00:39:14.160 --> 00:39:18.349 align:start position:0%
all these lines here ok let's do a
console<00:39:14.609><c> the</c><00:39:14.700><c> right</c><00:39:14.880><c> line</c><00:39:15.090><c> so</c><00:39:15.450><c> CW</c><00:39:16.020><c> tab</c><00:39:17.359><c> this</c>

00:39:18.349 --> 00:39:18.359 align:start position:0%
console the right line so CW tab this
 

00:39:18.359 --> 00:39:22.250 align:start position:0%
console the right line so CW tab this
time<00:39:18.570><c> I</c><00:39:18.750><c> pass</c><00:39:18.990><c> a</c><00:39:19.020><c> string</c><00:39:19.470><c> here</c><00:39:19.740><c> I</c><00:39:21.200><c> specify</c><00:39:22.200><c> two</c>

00:39:22.250 --> 00:39:22.260 align:start position:0%
time I pass a string here I specify two
 

00:39:22.260 --> 00:39:26.420 align:start position:0%
time I pass a string here I specify two
placeholders

00:39:26.420 --> 00:39:26.430 align:start position:0%
 
 

00:39:26.430 --> 00:39:35.540 align:start position:0%
 
and<00:39:26.520><c> finally</c><00:39:27.270><c> supply</c><00:39:27.809><c> a</c><00:39:28.020><c> couple</c><00:39:28.319><c> of</c><00:39:28.380><c> arguments</c>

00:39:35.540 --> 00:39:35.550 align:start position:0%
 
 

00:39:35.550 --> 00:39:38.520 align:start position:0%
 
okay<00:39:36.550><c> let's</c><00:39:36.730><c> see</c><00:39:36.850><c> what's</c><00:39:37.000><c> going</c><00:39:37.240><c> on</c><00:39:37.360><c> here</c><00:39:37.600><c> so</c>

00:39:38.520 --> 00:39:38.530 align:start position:0%
okay let's see what's going on here so
 

00:39:38.530 --> 00:39:41.790 align:start position:0%
okay let's see what's going on here so
here<00:39:38.910><c> what</c><00:39:39.910><c> we</c><00:39:40.060><c> have</c><00:39:40.090><c> is</c><00:39:40.450><c> called</c><00:39:40.660><c> a</c><00:39:41.080><c> format</c>

00:39:41.790 --> 00:39:41.800 align:start position:0%
here what we have is called a format
 

00:39:41.800 --> 00:39:44.160 align:start position:0%
here what we have is called a format
string<00:39:42.160><c> it's</c><00:39:42.940><c> a</c><00:39:43.060><c> kind</c><00:39:43.270><c> of</c><00:39:43.330><c> string</c><00:39:43.630><c> that</c><00:39:43.870><c> can</c><00:39:44.020><c> be</c>

00:39:44.160 --> 00:39:44.170 align:start position:0%
string it's a kind of string that can be
 

00:39:44.170 --> 00:39:46.710 align:start position:0%
string it's a kind of string that can be
used<00:39:44.380><c> as</c><00:39:44.620><c> some</c><00:39:44.890><c> kind</c><00:39:44.920><c> of</c><00:39:45.160><c> template</c><00:39:45.640><c> so</c><00:39:46.630><c> at</c>

00:39:46.710 --> 00:39:46.720 align:start position:0%
used as some kind of template so at
 

00:39:46.720 --> 00:39:50.220 align:start position:0%
used as some kind of template so at
runtime<00:39:46.990><c> what</c><00:39:47.560><c> we</c><00:39:47.710><c> have</c><00:39:47.860><c> here</c><00:39:49.080><c> indicated</c><00:39:50.080><c> by</c>

00:39:50.220 --> 00:39:50.230 align:start position:0%
runtime what we have here indicated by
 

00:39:50.230 --> 00:39:53.280 align:start position:0%
runtime what we have here indicated by
curly<00:39:50.620><c> braces</c><00:39:50.860><c> and</c><00:39:51.100><c> 0</c><00:39:51.730><c> as</c><00:39:52.000><c> the</c><00:39:52.210><c> argument</c><00:39:52.690><c> will</c>

00:39:53.280 --> 00:39:53.290 align:start position:0%
curly braces and 0 as the argument will
 

00:39:53.290 --> 00:39:56.730 align:start position:0%
curly braces and 0 as the argument will
be<00:39:53.320><c> replaced</c><00:39:53.890><c> by</c><00:39:54.520><c> the</c><00:39:54.580><c> value</c><00:39:55.180><c> we</c><00:39:55.270><c> pass</c><00:39:55.480><c> here</c><00:39:55.810><c> so</c>

00:39:56.730 --> 00:39:56.740 align:start position:0%
be replaced by the value we pass here so
 

00:39:56.740 --> 00:39:59.310 align:start position:0%
be replaced by the value we pass here so
0<00:39:56.770><c> represents</c><00:39:57.640><c> the</c><00:39:57.790><c> first</c><00:39:58.000><c> argument</c><00:39:58.330><c> after</c>

00:39:59.310 --> 00:39:59.320 align:start position:0%
0 represents the first argument after
 

00:39:59.320 --> 00:40:03.510 align:start position:0%
0 represents the first argument after
this<00:39:59.700><c> format</c><00:40:00.700><c> string</c><00:40:01.060><c> and</c><00:40:01.350><c> 1</c><00:40:02.350><c> represents</c><00:40:03.190><c> the</c>

00:40:03.510 --> 00:40:03.520 align:start position:0%
this format string and 1 represents the
 

00:40:03.520 --> 00:40:06.030 align:start position:0%
this format string and 1 represents the
second<00:40:03.970><c> argument</c><00:40:04.180><c> after</c><00:40:04.750><c> this</c><00:40:05.440><c> format</c><00:40:05.800><c> string</c>

00:40:06.030 --> 00:40:06.040 align:start position:0%
second argument after this format string
 

00:40:06.040 --> 00:40:09.510 align:start position:0%
second argument after this format string
in<00:40:06.160><c> this</c><00:40:06.250><c> case</c><00:40:06.340><c> bited</c><00:40:07.180><c> max</c><00:40:07.390><c> value</c><00:40:08.310><c> so</c><00:40:09.310><c> let's</c>

00:40:09.510 --> 00:40:09.520 align:start position:0%
in this case bited max value so let's
 

00:40:09.520 --> 00:40:13.670 align:start position:0%
in this case bited max value so let's
run<00:40:09.670><c> this</c><00:40:09.820><c> application</c>

00:40:13.670 --> 00:40:13.680 align:start position:0%
 
 

00:40:13.680 --> 00:40:17.720 align:start position:0%
 
we<00:40:14.490><c> got</c><00:40:14.700><c> 0</c><00:40:15.089><c> and</c><00:40:15.359><c> 255</c><00:40:15.960><c> and</c><00:40:16.619><c> that's</c><00:40:17.369><c> the</c><00:40:17.490><c> range</c>

00:40:17.720 --> 00:40:17.730 align:start position:0%
we got 0 and 255 and that's the range
 

00:40:17.730 --> 00:40:22.120 align:start position:0%
we got 0 and 255 and that's the range
that<00:40:17.970><c> you</c><00:40:18.029><c> can</c><00:40:18.270><c> store</c><00:40:18.510><c> in</c><00:40:18.660><c> a</c><00:40:18.750><c> byte</c>

00:40:22.120 --> 00:40:22.130 align:start position:0%
 
 

00:40:22.130 --> 00:40:27.099 align:start position:0%
 
we<00:40:23.130><c> can</c><00:40:23.309><c> do</c><00:40:23.430><c> the</c><00:40:23.550><c> same</c><00:40:23.730><c> with</c><00:40:23.910><c> a</c><00:40:23.970><c> float</c><00:40:24.300><c> so</c><00:40:26.059><c> CW</c>

00:40:27.099 --> 00:40:27.109 align:start position:0%
we can do the same with a float so CW
 

00:40:27.109 --> 00:40:35.599 align:start position:0%
we can do the same with a float so CW
tap<00:40:28.109><c> a</c><00:40:29.150><c> format</c><00:40:30.150><c> string</c><00:40:32.930><c> float</c><00:40:34.250><c> mean</c><00:40:35.250><c> value</c>

00:40:35.599 --> 00:40:35.609 align:start position:0%
tap a format string float mean value
 

00:40:35.609 --> 00:40:45.400 align:start position:0%
tap a format string float mean value
float<00:40:36.390><c> Max</c><00:40:36.990><c> value</c><00:40:39.530><c> run</c><00:40:40.530><c> the</c><00:40:40.680><c> application</c>

00:40:45.400 --> 00:40:45.410 align:start position:0%
 
 

00:40:45.410 --> 00:40:48.050 align:start position:0%
 
so<00:40:46.410><c> this</c><00:40:46.560><c> is</c><00:40:46.680><c> the</c><00:40:46.800><c> range</c><00:40:47.010><c> we</c><00:40:47.160><c> can</c><00:40:47.280><c> store</c><00:40:47.610><c> with</c><00:40:48.030><c> a</c>

00:40:48.050 --> 00:40:48.060 align:start position:0%
so this is the range we can store with a
 

00:40:48.060 --> 00:40:50.690 align:start position:0%
so this is the range we can store with a
float<00:40:48.740><c> it's</c><00:40:49.740><c> a</c><00:40:49.830><c> huge</c><00:40:50.010><c> number</c><00:40:50.190><c> that</c><00:40:50.610><c> is</c>

00:40:50.690 --> 00:40:50.700 align:start position:0%
float it's a huge number that is
 

00:40:50.700 --> 00:40:57.020 align:start position:0%
float it's a huge number that is
displayed<00:40:51.120><c> using</c><00:40:51.390><c> the</c><00:40:51.660><c> scientific</c><00:40:51.990><c> notation</c>

00:40:57.020 --> 00:40:57.030 align:start position:0%
 
 

00:40:57.030 --> 00:41:00.620 align:start position:0%
 
okay<00:40:58.030><c> now</c><00:40:58.180><c> let's</c><00:40:58.420><c> take</c><00:40:58.540><c> a</c><00:40:58.570><c> look</c><00:40:58.780><c> at</c><00:40:58.900><c> constants</c>

00:41:00.620 --> 00:41:00.630 align:start position:0%
okay now let's take a look at constants
 

00:41:00.630 --> 00:41:02.460 align:start position:0%
okay now let's take a look at constants
so<00:41:01.630><c> I</c><00:41:01.660><c> get</c><00:41:01.869><c> rid</c><00:41:02.020><c> of</c><00:41:02.110><c> these</c><00:41:02.230><c> two</c>

00:41:02.460 --> 00:41:02.470 align:start position:0%
so I get rid of these two
 

00:41:02.470 --> 00:41:07.620 align:start position:0%
so I get rid of these two
lines<00:41:02.619><c> here</c><00:41:02.890><c> control</c><00:41:03.730><c> X</c><00:41:03.910><c> control</c><00:41:04.000><c> X</c><00:41:06.480><c> we</c><00:41:07.480><c> define</c>

00:41:07.620 --> 00:41:07.630 align:start position:0%
lines here control X control X we define
 

00:41:07.630 --> 00:41:10.490 align:start position:0%
lines here control X control X we define
a<00:41:07.780><c> constant</c><00:41:08.170><c> with</c><00:41:08.500><c> the</c><00:41:08.590><c> Const</c><00:41:08.859><c> keyword</c><00:41:09.010><c> Const</c>

00:41:10.490 --> 00:41:10.500 align:start position:0%
a constant with the Const keyword Const
 

00:41:10.500 --> 00:41:16.290 align:start position:0%
a constant with the Const keyword Const
float<00:41:11.670><c> P</c><00:41:13.590><c> 3.14</c><00:41:14.590><c> and</c><00:41:14.890><c> we</c><00:41:15.220><c> have</c><00:41:15.340><c> to</c><00:41:15.460><c> put</c><00:41:15.640><c> F</c><00:41:15.820><c> at</c><00:41:16.180><c> the</c>

00:41:16.290 --> 00:41:16.300 align:start position:0%
float P 3.14 and we have to put F at the
 

00:41:16.300 --> 00:41:19.230 align:start position:0%
float P 3.14 and we have to put F at the
end<00:41:16.330><c> because</c><00:41:16.750><c> it's</c><00:41:16.930><c> a</c><00:41:17.020><c> float</c><00:41:17.760><c> now</c><00:41:18.760><c> because</c><00:41:19.090><c> we</c>

00:41:19.230 --> 00:41:19.240 align:start position:0%
end because it's a float now because we
 

00:41:19.240 --> 00:41:22.020 align:start position:0%
end because it's a float now because we
declared<00:41:19.630><c> P</c><00:41:19.840><c> as</c><00:41:20.050><c> a</c><00:41:20.109><c> constant</c><00:41:20.830><c> here</c><00:41:21.160><c> I</c><00:41:21.340><c> cannot</c>

00:41:22.020 --> 00:41:22.030 align:start position:0%
declared P as a constant here I cannot
 

00:41:22.030 --> 00:41:24.420 align:start position:0%
declared P as a constant here I cannot
change<00:41:22.359><c> it</c><00:41:22.510><c> in</c><00:41:22.720><c> my</c><00:41:22.840><c> program</c><00:41:23.320><c> so</c><00:41:23.500><c> I</c><00:41:23.950><c> cannot</c><00:41:24.190><c> go</c>

00:41:24.420 --> 00:41:24.430 align:start position:0%
change it in my program so I cannot go
 

00:41:24.430 --> 00:41:30.030 align:start position:0%
change it in my program so I cannot go
here<00:41:24.760><c> and</c><00:41:24.970><c> say</c><00:41:25.210><c> P</c><00:41:25.480><c> equals</c><00:41:25.960><c> 1</c><00:41:28.470><c> the</c><00:41:29.470><c> compiler</c><00:41:29.830><c> is</c>

00:41:30.030 --> 00:41:30.040 align:start position:0%
here and say P equals 1 the compiler is
 

00:41:30.040 --> 00:41:32.430 align:start position:0%
here and say P equals 1 the compiler is
not<00:41:30.070><c> happy</c><00:41:30.609><c> and</c><00:41:30.760><c> that's</c><00:41:31.510><c> why</c><00:41:31.660><c> we</c><00:41:31.869><c> see</c><00:41:32.020><c> that</c><00:41:32.170><c> red</c>

00:41:32.430 --> 00:41:32.440 align:start position:0%
not happy and that's why we see that red
 

00:41:32.440 --> 00:41:34.290 align:start position:0%
not happy and that's why we see that red
underline<00:41:32.920><c> here</c><00:41:33.160><c> if</c><00:41:33.730><c> you</c><00:41:33.880><c> hover</c><00:41:34.030><c> the</c><00:41:34.270><c> mouse</c>

00:41:34.290 --> 00:41:34.300 align:start position:0%
underline here if you hover the mouse
 

00:41:34.300 --> 00:41:36.540 align:start position:0%
underline here if you hover the mouse
here<00:41:34.599><c> it</c><00:41:34.750><c> says</c>

00:41:36.540 --> 00:41:36.550 align:start position:0%
here it says
 

00:41:36.550 --> 00:41:39.090 align:start position:0%
here it says
read<00:41:37.120><c> only</c><00:41:37.300><c> local</c><00:41:37.900><c> constant</c><00:41:38.380><c> cannot</c><00:41:38.770><c> be</c><00:41:38.890><c> used</c>

00:41:39.090 --> 00:41:39.100 align:start position:0%
read only local constant cannot be used
 

00:41:39.100 --> 00:41:41.070 align:start position:0%
read only local constant cannot be used
as<00:41:39.280><c> an</c><00:41:39.400><c> assignment</c><00:41:39.880><c> target</c><00:41:40.240><c> it's</c><00:41:40.450><c> a</c><00:41:40.810><c> little</c>

00:41:41.070 --> 00:41:41.080 align:start position:0%
as an assignment target it's a little
 

00:41:41.080 --> 00:41:42.720 align:start position:0%
as an assignment target it's a little
weird<00:41:41.320><c> expression</c><00:41:41.920><c> to</c><00:41:42.070><c> understand</c><00:41:42.520><c> but</c>

00:41:42.720 --> 00:41:42.730 align:start position:0%
weird expression to understand but
 

00:41:42.730 --> 00:41:44.610 align:start position:0%
weird expression to understand but
basically<00:41:43.180><c> the</c><00:41:43.900><c> intention</c><00:41:44.380><c> of</c><00:41:44.440><c> using</c>

00:41:44.610 --> 00:41:44.620 align:start position:0%
basically the intention of using
 

00:41:44.620 --> 00:41:46.950 align:start position:0%
basically the intention of using
constants<00:41:45.370><c> is</c><00:41:45.490><c> to</c><00:41:46.030><c> have</c><00:41:46.210><c> some</c><00:41:46.390><c> kind</c><00:41:46.540><c> of</c><00:41:46.660><c> safety</c>

00:41:46.950 --> 00:41:46.960 align:start position:0%
constants is to have some kind of safety
 

00:41:46.960 --> 00:41:49.230 align:start position:0%
constants is to have some kind of safety
in<00:41:47.200><c> your</c><00:41:47.320><c> program</c><00:41:47.770><c> so</c><00:41:48.430><c> if</c><00:41:48.580><c> there</c><00:41:48.760><c> are</c><00:41:48.820><c> values</c>

00:41:49.230 --> 00:41:49.240 align:start position:0%
in your program so if there are values
 

00:41:49.240 --> 00:41:50.940 align:start position:0%
in your program so if there are values
that<00:41:49.510><c> should</c><00:41:49.690><c> not</c><00:41:49.900><c> be</c><00:41:49.930><c> changed</c><00:41:50.500><c> throughout</c>

00:41:50.940 --> 00:41:50.950 align:start position:0%
that should not be changed throughout
 

00:41:50.950 --> 00:41:52.890 align:start position:0%
that should not be changed throughout
your<00:41:51.100><c> program</c><00:41:51.340><c> you</c><00:41:51.790><c> define</c><00:41:52.120><c> them</c><00:41:52.270><c> as</c><00:41:52.390><c> constant</c>

00:41:52.890 --> 00:41:52.900 align:start position:0%
your program you define them as constant
 

00:41:52.900 --> 00:41:56.370 align:start position:0%
your program you define them as constant
and<00:41:53.770><c> this</c><00:41:54.760><c> way</c><00:41:54.940><c> you</c><00:41:55.450><c> want</c><00:41:55.660><c> to</c><00:41:55.750><c> accidentally</c>

00:41:56.370 --> 00:41:56.380 align:start position:0%
and this way you want to accidentally
 

00:41:56.380 --> 00:42:00.030 align:start position:0%
and this way you want to accidentally
modify<00:41:56.830><c> their</c><00:41:56.980><c> values</c><00:41:58.440><c> well</c><00:41:59.440><c> if</c><00:41:59.680><c> you</c><00:41:59.770><c> made</c><00:41:59.920><c> it</c>

00:42:00.030 --> 00:42:00.040 align:start position:0%
modify their values well if you made it
 

00:42:00.040 --> 00:42:01.550 align:start position:0%
modify their values well if you made it
this<00:42:00.130><c> far</c><00:42:00.190><c> you</c><00:42:00.700><c> seem</c><00:42:01.120><c> to</c><00:42:01.240><c> be</c><00:42:01.330><c> very</c>

00:42:01.550 --> 00:42:01.560 align:start position:0%
this far you seem to be very
 

00:42:01.560 --> 00:42:04.140 align:start position:0%
this far you seem to be very
enthusiastic<00:42:02.560><c> about</c><00:42:02.680><c> learning</c><00:42:03.040><c> c-sharp</c><00:42:03.610><c> and</c>

00:42:04.140 --> 00:42:04.150 align:start position:0%
enthusiastic about learning c-sharp and
 

00:42:04.150 --> 00:42:06.060 align:start position:0%
enthusiastic about learning c-sharp and
I<00:42:04.300><c> highly</c><00:42:04.510><c> recommend</c><00:42:04.630><c> you</c><00:42:05.110><c> to</c><00:42:05.440><c> take</c><00:42:05.620><c> my</c><00:42:05.830><c> C</c>

00:42:06.060 --> 00:42:06.070 align:start position:0%
I highly recommend you to take my C
 

00:42:06.070 --> 00:42:07.950 align:start position:0%
I highly recommend you to take my C
sharp<00:42:06.250><c> basics</c><00:42:06.640><c> course</c><00:42:06.820><c> using</c><00:42:07.450><c> the</c><00:42:07.570><c> link</c><00:42:07.810><c> in</c>

00:42:07.950 --> 00:42:07.960 align:start position:0%
sharp basics course using the link in
 

00:42:07.960 --> 00:42:10.200 align:start position:0%
sharp basics course using the link in
the<00:42:08.140><c> video</c><00:42:08.290><c> description</c><00:42:08.820><c> this</c><00:42:09.820><c> way</c>

00:42:10.200 --> 00:42:10.210 align:start position:0%
the video description this way
 

00:42:10.210 --> 00:42:12.120 align:start position:0%
the video description this way
you<00:42:10.360><c> can</c><00:42:10.510><c> learn</c><00:42:10.660><c> all</c><00:42:10.870><c> the</c><00:42:11.140><c> core</c><00:42:11.350><c> concepts</c><00:42:11.830><c> in</c><00:42:12.010><c> a</c>

00:42:12.120 --> 00:42:12.130 align:start position:0%
you can learn all the core concepts in a
 

00:42:12.130 --> 00:42:13.890 align:start position:0%
you can learn all the core concepts in a
structured<00:42:12.580><c> way</c><00:42:12.730><c> and</c><00:42:12.970><c> you</c><00:42:13.540><c> don't</c><00:42:13.630><c> have</c><00:42:13.780><c> to</c>

00:42:13.890 --> 00:42:13.900 align:start position:0%
structured way and you don't have to
 

00:42:13.900 --> 00:42:15.810 align:start position:0%
structured way and you don't have to
waste<00:42:14.110><c> time</c><00:42:14.200><c> jumping</c><00:42:15.130><c> from</c><00:42:15.310><c> one</c><00:42:15.550><c> free</c>

00:42:15.810 --> 00:42:15.820 align:start position:0%
waste time jumping from one free
 

00:42:15.820 --> 00:42:18.210 align:start position:0%
waste time jumping from one free
tutorial<00:42:16.300><c> to</c><00:42:16.420><c> another</c><00:42:16.720><c> you</c><00:42:17.710><c> can</c><00:42:17.770><c> see</c><00:42:18.040><c> that</c>

00:42:18.210 --> 00:42:18.220 align:start position:0%
tutorial to another you can see that
 

00:42:18.220 --> 00:42:20.220 align:start position:0%
tutorial to another you can see that
currently<00:42:18.520><c> this</c><00:42:18.730><c> course</c><00:42:18.970><c> has</c><00:42:19.180><c> over</c><00:42:19.480><c> 5,000</c>

00:42:20.220 --> 00:42:20.230 align:start position:0%
currently this course has over 5,000
 

00:42:20.230 --> 00:42:22.830 align:start position:0%
currently this course has over 5,000
students<00:42:20.560><c> with</c><00:42:21.010><c> over</c><00:42:21.280><c> 400</c><00:42:21.970><c> five-star</c><00:42:22.480><c> reviews</c>

00:42:22.830 --> 00:42:22.840 align:start position:0%
students with over 400 five-star reviews
 

00:42:22.840 --> 00:42:25.680 align:start position:0%
students with over 400 five-star reviews
plus<00:42:23.830><c> it</c><00:42:24.040><c> comes</c><00:42:24.490><c> with</c><00:42:24.640><c> a</c><00:42:24.790><c> 30-day</c><00:42:25.150><c> money-back</c>

00:42:25.680 --> 00:42:25.690 align:start position:0%
plus it comes with a 30-day money-back
 

00:42:25.690 --> 00:42:28.260 align:start position:0%
plus it comes with a 30-day money-back
guarantee<00:42:26.230><c> so</c><00:42:26.950><c> if</c><00:42:26.980><c> you're</c><00:42:27.190><c> not</c><00:42:27.370><c> satisfied</c><00:42:27.580><c> you</c>

00:42:28.260 --> 00:42:28.270 align:start position:0%
guarantee so if you're not satisfied you
 

00:42:28.270 --> 00:42:30.330 align:start position:0%
guarantee so if you're not satisfied you
can<00:42:28.420><c> ask</c><00:42:28.630><c> udemy</c><00:42:29.110><c> for</c><00:42:29.410><c> a</c><00:42:29.440><c> full</c><00:42:29.680><c> refund</c><00:42:29.860><c> within</c>

00:42:30.330 --> 00:42:30.340 align:start position:0%
can ask udemy for a full refund within
 

00:42:30.340 --> 00:42:32.430 align:start position:0%
can ask udemy for a full refund within
30<00:42:30.670><c> days</c><00:42:30.760><c> and</c><00:42:31.120><c> you</c><00:42:31.450><c> get</c><00:42:31.600><c> all</c><00:42:31.750><c> your</c><00:42:32.050><c> money</c><00:42:32.230><c> back</c>

00:42:32.430 --> 00:42:32.440 align:start position:0%
30 days and you get all your money back
 

00:42:32.440 --> 00:42:35.010 align:start position:0%
30 days and you get all your money back
no<00:42:32.860><c> questions</c><00:42:33.370><c> asked</c><00:42:33.600><c> again</c><00:42:34.600><c> you</c><00:42:34.780><c> can</c><00:42:34.900><c> get</c>

00:42:35.010 --> 00:42:35.020 align:start position:0%
no questions asked again you can get
 

00:42:35.020 --> 00:42:36.570 align:start position:0%
no questions asked again you can get
this<00:42:35.140><c> course</c><00:42:35.410><c> using</c><00:42:35.890><c> the</c><00:42:35.980><c> link</c><00:42:36.190><c> in</c><00:42:36.370><c> the</c><00:42:36.460><c> video</c>

00:42:36.570 --> 00:42:36.580 align:start position:0%
this course using the link in the video
 

00:42:36.580 --> 00:42:38.100 align:start position:0%
this course using the link in the video
description<00:42:36.700><c> I</c><00:42:37.330><c> hope</c><00:42:37.720><c> to</c><00:42:37.840><c> see</c><00:42:37.900><c> you</c><00:42:37.990><c> in</c><00:42:38.050><c> the</c>

00:42:38.100 --> 00:42:38.110 align:start position:0%
description I hope to see you in the
 

00:42:38.110 --> 00:42:41.370 align:start position:0%
description I hope to see you in the
course

00:42:41.370 --> 00:42:41.380 align:start position:0%
 
 

00:42:41.380 --> 00:42:43.050 align:start position:0%
 
in<00:42:41.440><c> this</c><00:42:42.100><c> video</c><00:42:42.340><c> I'm</c><00:42:42.490><c> going</c><00:42:42.670><c> to</c><00:42:42.760><c> talk</c><00:42:43.030><c> about</c>

00:42:43.050 --> 00:42:43.060 align:start position:0%
in this video I'm going to talk about
 

00:42:43.060 --> 00:42:45.450 align:start position:0%
in this video I'm going to talk about
various<00:42:43.810><c> kinds</c><00:42:44.230><c> of</c><00:42:44.320><c> type</c><00:42:44.620><c> conversion</c><00:42:45.190><c> in</c>

00:42:45.450 --> 00:42:45.460 align:start position:0%
various kinds of type conversion in
 

00:42:45.460 --> 00:42:48.320 align:start position:0%
various kinds of type conversion in
c-sharp<00:42:45.880><c> we</c><00:42:46.750><c> have</c><00:42:46.900><c> implicit</c><00:42:47.410><c> type</c><00:42:47.710><c> conversion</c>

00:42:48.320 --> 00:42:48.330 align:start position:0%
c-sharp we have implicit type conversion
 

00:42:48.330 --> 00:42:50.580 align:start position:0%
c-sharp we have implicit type conversion
explicit<00:42:49.330><c> type</c><00:42:49.510><c> conversion</c><00:42:49.540><c> which</c><00:42:50.290><c> is</c><00:42:50.410><c> also</c>

00:42:50.580 --> 00:42:50.590 align:start position:0%
explicit type conversion which is also
 

00:42:50.590 --> 00:42:52.890 align:start position:0%
explicit type conversion which is also
called<00:42:50.890><c> casting</c><00:42:51.550><c> and</c><00:42:51.760><c> we</c><00:42:52.420><c> also</c><00:42:52.570><c> have</c>

00:42:52.890 --> 00:42:52.900 align:start position:0%
called casting and we also have
 

00:42:52.900 --> 00:42:55.940 align:start position:0%
called casting and we also have
conversion<00:42:53.830><c> between</c><00:42:54.070><c> non</c><00:42:54.400><c> compatible</c><00:42:55.090><c> types</c>

00:42:55.940 --> 00:42:55.950 align:start position:0%
conversion between non compatible types
 

00:42:55.950 --> 00:42:58.680 align:start position:0%
conversion between non compatible types
here<00:42:56.950><c> is</c><00:42:57.070><c> an</c><00:42:57.190><c> example</c><00:42:57.490><c> of</c><00:42:57.790><c> implicit</c><00:42:58.240><c> type</c>

00:42:58.680 --> 00:42:58.690 align:start position:0%
here is an example of implicit type
 

00:42:58.690 --> 00:43:01.080 align:start position:0%
here is an example of implicit type
conversion<00:42:59.290><c> a</c><00:42:59.440><c> blight</c><00:43:00.250><c> as</c><00:43:00.490><c> you</c><00:43:00.610><c> know</c><00:43:00.730><c> takes</c>

00:43:01.080 --> 00:43:01.090 align:start position:0%
conversion a blight as you know takes
 

00:43:01.090 --> 00:43:03.780 align:start position:0%
conversion a blight as you know takes
only<00:43:01.420><c> one</c><00:43:01.660><c> byte</c><00:43:01.870><c> of</c><00:43:01.900><c> memory</c><00:43:02.050><c> and</c><00:43:02.560><c> an</c><00:43:03.430><c> integer</c>

00:43:03.780 --> 00:43:03.790 align:start position:0%
only one byte of memory and an integer
 

00:43:03.790 --> 00:43:06.930 align:start position:0%
only one byte of memory and an integer
takes<00:43:04.270><c> four</c><00:43:04.540><c> bytes</c><00:43:04.720><c> so</c><00:43:05.710><c> we</c><00:43:05.830><c> can</c><00:43:05.980><c> easily</c><00:43:06.220><c> copy</c><00:43:06.610><c> a</c>

00:43:06.930 --> 00:43:06.940 align:start position:0%
takes four bytes so we can easily copy a
 

00:43:06.940 --> 00:43:08.540 align:start position:0%
takes four bytes so we can easily copy a
byte<00:43:07.330><c> to</c><00:43:07.870><c> an</c><00:43:07.960><c> integer</c>

00:43:08.540 --> 00:43:08.550 align:start position:0%
byte to an integer
 

00:43:08.550 --> 00:43:11.580 align:start position:0%
byte to an integer
what<00:43:09.550><c> happens</c><00:43:09.940><c> at</c><00:43:10.060><c> runtime</c><00:43:10.270><c> is</c><00:43:10.720><c> let's</c><00:43:11.350><c> take</c><00:43:11.560><c> a</c>

00:43:11.580 --> 00:43:11.590 align:start position:0%
what happens at runtime is let's take a
 

00:43:11.590 --> 00:43:14.400 align:start position:0%
what happens at runtime is let's take a
look<00:43:11.800><c> at</c><00:43:11.860><c> this</c><00:43:12.010><c> slide</c><00:43:12.190><c> so</c><00:43:12.970><c> here's</c><00:43:13.420><c> the</c><00:43:13.720><c> binary</c>

00:43:14.400 --> 00:43:14.410 align:start position:0%
look at this slide so here's the binary
 

00:43:14.410 --> 00:43:17.250 align:start position:0%
look at this slide so here's the binary
representation<00:43:15.250><c> of</c><00:43:15.340><c> our</c><00:43:15.580><c> B</c><00:43:16.030><c> variable</c><00:43:16.390><c> here</c><00:43:16.840><c> so</c>

00:43:17.250 --> 00:43:17.260 align:start position:0%
representation of our B variable here so
 

00:43:17.260 --> 00:43:20.730 align:start position:0%
representation of our B variable here so
one<00:43:17.650><c> is</c><00:43:17.910><c> represented</c><00:43:18.910><c> as</c><00:43:19.060><c> seven</c><00:43:19.810><c> bits</c><00:43:20.140><c> of</c><00:43:20.410><c> zero</c>

00:43:20.730 --> 00:43:20.740 align:start position:0%
one is represented as seven bits of zero
 

00:43:20.740 --> 00:43:23.910 align:start position:0%
one is represented as seven bits of zero
and<00:43:20.950><c> one</c><00:43:21.010><c> bit</c><00:43:21.610><c> of</c><00:43:21.820><c> one</c><00:43:22.170><c> when</c><00:43:23.170><c> we</c><00:43:23.290><c> copy</c><00:43:23.530><c> a</c><00:43:23.650><c> byte</c>

00:43:23.910 --> 00:43:23.920 align:start position:0%
and one bit of one when we copy a byte
 

00:43:23.920 --> 00:43:26.370 align:start position:0%
and one bit of one when we copy a byte
to<00:43:24.160><c> an</c><00:43:24.250><c> integer</c><00:43:24.550><c> what</c><00:43:25.360><c> the</c><00:43:25.480><c> runtime</c><00:43:25.840><c> does</c><00:43:26.050><c> is</c>

00:43:26.370 --> 00:43:26.380 align:start position:0%
to an integer what the runtime does is
 

00:43:26.380 --> 00:43:29.280 align:start position:0%
to an integer what the runtime does is
it<00:43:26.650><c> prefixes</c><00:43:27.580><c> that</c><00:43:27.610><c> value</c><00:43:28.150><c> with</c><00:43:28.840><c> a</c><00:43:28.870><c> bunch</c><00:43:29.170><c> of</c>

00:43:29.280 --> 00:43:29.290 align:start position:0%
it prefixes that value with a bunch of
 

00:43:29.290 --> 00:43:32.450 align:start position:0%
it prefixes that value with a bunch of
zeros<00:43:29.650><c> to</c><00:43:30.190><c> fill</c><00:43:30.430><c> the</c><00:43:30.610><c> four</c><00:43:30.850><c> bytes</c>

00:43:32.450 --> 00:43:32.460 align:start position:0%
zeros to fill the four bytes
 

00:43:32.460 --> 00:43:34.340 align:start position:0%
zeros to fill the four bytes
there<00:43:32.550><c> is</c><00:43:32.609><c> no</c><00:43:32.730><c> data</c><00:43:33.000><c> loss</c>

00:43:34.340 --> 00:43:34.350 align:start position:0%
there is no data loss
 

00:43:34.350 --> 00:43:35.900 align:start position:0%
there is no data loss
in<00:43:34.410><c> situations</c><00:43:35.100><c> like</c><00:43:35.130><c> that</c><00:43:35.280><c> when</c><00:43:35.820><c> the</c>

00:43:35.900 --> 00:43:35.910 align:start position:0%
in situations like that when the
 

00:43:35.910 --> 00:43:39.080 align:start position:0%
in situations like that when the
compiler<00:43:36.240><c> is</c><00:43:36.570><c> 100%</c><00:43:37.050><c> sure</c><00:43:37.290><c> that</c><00:43:37.710><c> the</c><00:43:38.670><c> types</c><00:43:38.910><c> are</c>

00:43:39.080 --> 00:43:39.090 align:start position:0%
compiler is 100% sure that the types are
 

00:43:39.090 --> 00:43:41.240 align:start position:0%
compiler is 100% sure that the types are
compatible<00:43:39.240><c> and</c><00:43:39.870><c> no</c><00:43:40.170><c> data</c><00:43:40.410><c> loss</c><00:43:40.560><c> will</c><00:43:40.890><c> happen</c>

00:43:41.240 --> 00:43:41.250 align:start position:0%
compatible and no data loss will happen
 

00:43:41.250 --> 00:43:43.460 align:start position:0%
compatible and no data loss will happen
values<00:43:42.030><c> can</c><00:43:42.240><c> be</c><00:43:42.390><c> converted</c><00:43:42.720><c> to</c><00:43:42.930><c> a</c><00:43:43.050><c> different</c>

00:43:43.460 --> 00:43:43.470 align:start position:0%
values can be converted to a different
 

00:43:43.470 --> 00:43:45.580 align:start position:0%
values can be converted to a different
type<00:43:43.620><c> implicitly</c>

00:43:45.580 --> 00:43:45.590 align:start position:0%
type implicitly
 

00:43:45.590 --> 00:43:47.650 align:start position:0%
type implicitly
here<00:43:46.040><c> is</c><00:43:46.160><c> another</c><00:43:46.400><c> example</c><00:43:46.580><c> of</c><00:43:46.970><c> implicit</c><00:43:47.330><c> type</c>

00:43:47.650 --> 00:43:47.660 align:start position:0%
here is another example of implicit type
 

00:43:47.660 --> 00:43:50.290 align:start position:0%
here is another example of implicit type
conversion<00:43:48.230><c> so</c><00:43:48.920><c> we</c><00:43:49.070><c> have</c><00:43:49.220><c> an</c><00:43:49.370><c> integer</c><00:43:49.700><c> set</c><00:43:50.210><c> it</c>

00:43:50.290 --> 00:43:50.300 align:start position:0%
conversion so we have an integer set it
 

00:43:50.300 --> 00:43:54.100 align:start position:0%
conversion so we have an integer set it
to<00:43:50.390><c> one</c><00:43:50.600><c> and</c><00:43:50.840><c> we</c><00:43:51.830><c> copy</c><00:43:52.010><c> that</c><00:43:52.160><c> to</c><00:43:52.490><c> a</c><00:43:52.550><c> float</c><00:43:53.110><c> again</c>

00:43:54.100 --> 00:43:54.110 align:start position:0%
to one and we copy that to a float again
 

00:43:54.110 --> 00:43:56.310 align:start position:0%
to one and we copy that to a float again
in<00:43:54.260><c> this</c><00:43:54.320><c> example</c><00:43:54.380><c> no</c><00:43:55.040><c> data</c><00:43:55.250><c> loss</c><00:43:55.370><c> will</c><00:43:55.670><c> happen</c>

00:43:56.310 --> 00:43:56.320 align:start position:0%
in this example no data loss will happen
 

00:43:56.320 --> 00:43:59.710 align:start position:0%
in this example no data loss will happen
but<00:43:57.320><c> let's</c><00:43:57.500><c> take</c><00:43:57.590><c> a</c><00:43:57.650><c> look</c><00:43:57.770><c> at</c><00:43:57.920><c> this</c><00:43:58.040><c> one</c><00:43:58.720><c> here</c>

00:43:59.710 --> 00:43:59.720 align:start position:0%
but let's take a look at this one here
 

00:43:59.720 --> 00:44:02.110 align:start position:0%
but let's take a look at this one here
we<00:43:59.900><c> have</c><00:44:00.020><c> declared</c><00:44:00.380><c> an</c><00:44:00.500><c> integer</c><00:44:00.650><c> and</c><00:44:01.190><c> we're</c>

00:44:02.110 --> 00:44:02.120 align:start position:0%
we have declared an integer and we're
 

00:44:02.120 --> 00:44:05.339 align:start position:0%
we have declared an integer and we're
trying<00:44:02.450><c> to</c><00:44:02.990><c> copy</c><00:44:03.230><c> that</c><00:44:03.470><c> to</c><00:44:04.070><c> a</c><00:44:04.100><c> byte</c>

00:44:05.339 --> 00:44:05.349 align:start position:0%
trying to copy that to a byte
 

00:44:05.349 --> 00:44:07.769 align:start position:0%
trying to copy that to a byte
and<00:44:05.440><c> integer</c><00:44:05.859><c> is</c><00:44:06.099><c> four</c><00:44:06.460><c> bytes</c><00:44:06.670><c> so</c><00:44:07.479><c> when</c><00:44:07.660><c> we</c>

00:44:07.769 --> 00:44:07.779 align:start position:0%
and integer is four bytes so when we
 

00:44:07.779 --> 00:44:10.170 align:start position:0%
and integer is four bytes so when we
convert<00:44:08.170><c> that</c><00:44:08.200><c> to</c><00:44:08.499><c> a</c><00:44:08.529><c> byte</c><00:44:08.799><c> three</c><00:44:09.670><c> bytes</c><00:44:09.970><c> out</c>

00:44:10.170 --> 00:44:10.180 align:start position:0%
convert that to a byte three bytes out
 

00:44:10.180 --> 00:44:13.019 align:start position:0%
convert that to a byte three bytes out
of<00:44:10.479><c> four</c><00:44:10.720><c> bytes</c><00:44:10.930><c> will</c><00:44:11.229><c> be</c><00:44:11.410><c> gone</c><00:44:11.589><c> and</c><00:44:11.940><c> there</c><00:44:12.940><c> is</c>

00:44:13.019 --> 00:44:13.029 align:start position:0%
of four bytes will be gone and there is
 

00:44:13.029 --> 00:44:14.339 align:start position:0%
of four bytes will be gone and there is
a<00:44:13.059><c> chance</c><00:44:13.359><c> for</c><00:44:13.630><c> data</c><00:44:13.839><c> loss</c>

00:44:14.339 --> 00:44:14.349 align:start position:0%
a chance for data loss
 

00:44:14.349 --> 00:44:17.099 align:start position:0%
a chance for data loss
now<00:44:15.069><c> data</c><00:44:15.309><c> loss</c><00:44:15.579><c> doesn't</c><00:44:15.940><c> always</c><00:44:16.119><c> happen</c><00:44:16.479><c> it</c>

00:44:17.099 --> 00:44:17.109 align:start position:0%
now data loss doesn't always happen it
 

00:44:17.109 --> 00:44:19.380 align:start position:0%
now data loss doesn't always happen it
only<00:44:17.319><c> happens</c><00:44:17.799><c> if</c><00:44:18.009><c> the</c><00:44:18.069><c> value</c><00:44:18.460><c> restored</c><00:44:19.210><c> in</c>

00:44:19.380 --> 00:44:19.390 align:start position:0%
only happens if the value restored in
 

00:44:19.390 --> 00:44:22.829 align:start position:0%
only happens if the value restored in
the<00:44:19.509><c> integer</c><00:44:19.960><c> is</c><00:44:20.670><c> beyond</c><00:44:21.670><c> the</c><00:44:21.940><c> capacity</c><00:44:22.150><c> of</c><00:44:22.660><c> a</c>

00:44:22.829 --> 00:44:22.839 align:start position:0%
the integer is beyond the capacity of a
 

00:44:22.839 --> 00:44:26.489 align:start position:0%
the integer is beyond the capacity of a
byte<00:44:23.049><c> in</c><00:44:23.289><c> this</c><00:44:24.220><c> example</c><00:44:24.630><c> one</c><00:44:25.630><c> can</c><00:44:26.079><c> be</c><00:44:26.200><c> stored</c>

00:44:26.489 --> 00:44:26.499 align:start position:0%
byte in this example one can be stored
 

00:44:26.499 --> 00:44:27.089 align:start position:0%
byte in this example one can be stored
in<00:44:26.619><c> a</c><00:44:26.680><c> byte</c>

00:44:27.089 --> 00:44:27.099 align:start position:0%
in a byte
 

00:44:27.099 --> 00:44:29.640 align:start position:0%
in a byte
so<00:44:27.339><c> no</c><00:44:27.519><c> data</c><00:44:27.759><c> loss</c><00:44:27.880><c> will</c><00:44:28.180><c> happen</c><00:44:28.539><c> but</c><00:44:29.319><c> if</c><00:44:29.499><c> we</c>

00:44:29.640 --> 00:44:29.650 align:start position:0%
so no data loss will happen but if we
 

00:44:29.650 --> 00:44:32.759 align:start position:0%
so no data loss will happen but if we
had<00:44:29.859><c> let's</c><00:44:30.220><c> say</c><00:44:30.369><c> 300</c><00:44:30.789><c> here</c><00:44:31.450><c> we</c><00:44:32.229><c> cannot</c><00:44:32.499><c> store</c>

00:44:32.759 --> 00:44:32.769 align:start position:0%
had let's say 300 here we cannot store
 

00:44:32.769 --> 00:44:35.460 align:start position:0%
had let's say 300 here we cannot store
300<00:44:33.430><c> in</c><00:44:33.549><c> a</c><00:44:33.609><c> byte</c><00:44:33.819><c> so</c><00:44:34.660><c> as</c><00:44:34.809><c> a</c><00:44:34.839><c> result</c><00:44:35.079><c> of</c><00:44:35.349><c> that</c>

00:44:35.460 --> 00:44:35.470 align:start position:0%
300 in a byte so as a result of that
 

00:44:35.470 --> 00:44:38.249 align:start position:0%
300 in a byte so as a result of that
conversion<00:44:35.890><c> data</c><00:44:36.519><c> will</c><00:44:36.729><c> be</c><00:44:36.819><c> lost</c><00:44:37.059><c> when</c><00:44:37.329><c> the</c>

00:44:38.249 --> 00:44:38.259 align:start position:0%
conversion data will be lost when the
 

00:44:38.259 --> 00:44:39.809 align:start position:0%
conversion data will be lost when the
compiler<00:44:38.589><c> knows</c><00:44:38.769><c> that</c><00:44:39.220><c> there</c><00:44:39.400><c> is</c><00:44:39.489><c> a</c><00:44:39.519><c> chance</c>

00:44:39.809 --> 00:44:39.819 align:start position:0%
compiler knows that there is a chance
 

00:44:39.819 --> 00:44:42.390 align:start position:0%
compiler knows that there is a chance
for<00:44:39.970><c> data</c><00:44:40.299><c> loss</c><00:44:40.539><c> it</c><00:44:40.900><c> doesn't</c><00:44:41.559><c> allow</c><00:44:41.799><c> implicit</c>

00:44:42.390 --> 00:44:42.400 align:start position:0%
for data loss it doesn't allow implicit
 

00:44:42.400 --> 00:44:44.910 align:start position:0%
for data loss it doesn't allow implicit
type<00:44:42.729><c> conversion</c><00:44:43.299><c> and</c><00:44:43.450><c> you</c><00:44:43.799><c> need</c><00:44:44.799><c> to</c>

00:44:44.910 --> 00:44:44.920 align:start position:0%
type conversion and you need to
 

00:44:44.920 --> 00:44:47.219 align:start position:0%
type conversion and you need to
explicitly<00:44:45.369><c> tell</c><00:44:45.910><c> the</c><00:44:46.059><c> compiler</c><00:44:46.390><c> that</c><00:44:46.749><c> you're</c>

00:44:47.219 --> 00:44:47.229 align:start position:0%
explicitly tell the compiler that you're
 

00:44:47.229 --> 00:44:49.109 align:start position:0%
explicitly tell the compiler that you're
aware<00:44:47.559><c> of</c><00:44:47.619><c> the</c><00:44:47.829><c> data</c><00:44:47.979><c> loss</c><00:44:48.279><c> and</c><00:44:48.579><c> you</c><00:44:48.910><c> still</c>

00:44:49.109 --> 00:44:49.119 align:start position:0%
aware of the data loss and you still
 

00:44:49.119 --> 00:44:50.989 align:start position:0%
aware of the data loss and you still
want<00:44:49.269><c> to</c><00:44:49.329><c> go</c><00:44:49.479><c> ahead</c><00:44:49.749><c> with</c><00:44:49.930><c> the</c><00:44:50.019><c> conversion</c><00:44:50.410><c> in</c>

00:44:50.989 --> 00:44:50.999 align:start position:0%
want to go ahead with the conversion in
 

00:44:50.999 --> 00:44:53.519 align:start position:0%
want to go ahead with the conversion in
situations<00:44:51.999><c> like</c><00:44:52.029><c> that</c><00:44:52.299><c> what</c><00:44:52.660><c> we</c><00:44:52.809><c> do</c><00:44:52.960><c> is</c><00:44:53.229><c> we</c>

00:44:53.519 --> 00:44:53.529 align:start position:0%
situations like that what we do is we
 

00:44:53.529 --> 00:44:56.609 align:start position:0%
situations like that what we do is we
prefix<00:44:54.039><c> the</c><00:44:54.640><c> variable</c><00:44:55.450><c> with</c><00:44:55.960><c> the</c><00:44:56.049><c> target</c><00:44:56.410><c> type</c>

00:44:56.609 --> 00:44:56.619 align:start position:0%
prefix the variable with the target type
 

00:44:56.619 --> 00:44:59.579 align:start position:0%
prefix the variable with the target type
so<00:44:57.489><c> here</c><00:44:57.729><c> I'm</c><00:44:57.940><c> trying</c><00:44:58.329><c> to</c><00:44:58.509><c> convert</c><00:44:58.930><c> I</c><00:44:59.049><c> to</c><00:44:59.559><c> a</c>

00:44:59.579 --> 00:44:59.589 align:start position:0%
so here I'm trying to convert I to a
 

00:44:59.589 --> 00:45:00.910 align:start position:0%
so here I'm trying to convert I to a
byte

00:45:00.910 --> 00:45:00.920 align:start position:0%
byte
 

00:45:00.920 --> 00:45:04.940 align:start position:0%
byte
this<00:45:01.520><c> is</c><00:45:01.640><c> what</c><00:45:01.790><c> we</c><00:45:01.940><c> call</c><00:45:02.120><c> as</c><00:45:02.360><c> casting</c>

00:45:04.940 --> 00:45:04.950 align:start position:0%
 
 

00:45:04.950 --> 00:45:07.160 align:start position:0%
 
here<00:45:05.460><c> is</c><00:45:05.580><c> another</c><00:45:05.790><c> example</c><00:45:06.000><c> so</c><00:45:06.870><c> we</c><00:45:06.990><c> have</c><00:45:07.140><c> a</c>

00:45:07.160 --> 00:45:07.170 align:start position:0%
here is another example so we have a
 

00:45:07.170 --> 00:45:10.340 align:start position:0%
here is another example so we have a
float<00:45:07.500><c> set</c><00:45:08.160><c> to</c><00:45:08.340><c> 1.0</c><00:45:09.090><c> and</c><00:45:09.780><c> if</c><00:45:10.020><c> we</c><00:45:10.140><c> try</c><00:45:10.320><c> to</c>

00:45:10.340 --> 00:45:10.350 align:start position:0%
float set to 1.0 and if we try to
 

00:45:10.350 --> 00:45:12.350 align:start position:0%
float set to 1.0 and if we try to
convert<00:45:10.800><c> that</c><00:45:10.920><c> to</c><00:45:10.980><c> an</c><00:45:11.160><c> integer</c><00:45:11.310><c> the</c><00:45:11.970><c> compiler</c>

00:45:12.350 --> 00:45:12.360 align:start position:0%
convert that to an integer the compiler
 

00:45:12.360 --> 00:45:13.940 align:start position:0%
convert that to an integer the compiler
would<00:45:12.600><c> complain</c><00:45:12.930><c> I</c><00:45:13.200><c> will</c><00:45:13.590><c> show</c><00:45:13.710><c> you</c><00:45:13.770><c> that</c>

00:45:13.940 --> 00:45:13.950 align:start position:0%
would complain I will show you that
 

00:45:13.950 --> 00:45:17.060 align:start position:0%
would complain I will show you that
later<00:45:14.100><c> in</c><00:45:14.430><c> the</c><00:45:14.520><c> coding</c><00:45:14.910><c> demo</c><00:45:15.650><c> so</c><00:45:16.650><c> we</c><00:45:16.770><c> need</c><00:45:16.950><c> to</c>

00:45:17.060 --> 00:45:17.070 align:start position:0%
later in the coding demo so we need to
 

00:45:17.070 --> 00:45:19.430 align:start position:0%
later in the coding demo so we need to
tell<00:45:17.250><c> the</c><00:45:17.370><c> compiler</c><00:45:17.700><c> that</c><00:45:18.420><c> we</c><00:45:19.110><c> are</c><00:45:19.170><c> aware</c><00:45:19.290><c> of</c>

00:45:19.430 --> 00:45:19.440 align:start position:0%
tell the compiler that we are aware of
 

00:45:19.440 --> 00:45:20.810 align:start position:0%
tell the compiler that we are aware of
the<00:45:19.620><c> data</c><00:45:19.770><c> loss</c><00:45:20.070><c> and</c><00:45:20.340><c> we</c><00:45:20.460><c> still</c><00:45:20.640><c> want</c><00:45:20.730><c> to</c>

00:45:20.810 --> 00:45:20.820 align:start position:0%
the data loss and we still want to
 

00:45:20.820 --> 00:45:23.510 align:start position:0%
the data loss and we still want to
convert<00:45:21.180><c> F</c><00:45:21.380><c> which</c><00:45:22.380><c> is</c><00:45:22.500><c> a</c><00:45:22.530><c> float</c><00:45:22.830><c> to</c><00:45:23.130><c> an</c><00:45:23.160><c> integer</c>

00:45:23.510 --> 00:45:23.520 align:start position:0%
convert F which is a float to an integer
 

00:45:23.520 --> 00:45:27.200 align:start position:0%
convert F which is a float to an integer
so<00:45:24.270><c> we</c><00:45:24.390><c> cast</c><00:45:24.630><c> it</c><00:45:24.810><c> like</c><00:45:25.350><c> here</c>

00:45:27.200 --> 00:45:27.210 align:start position:0%
so we cast it like here
 

00:45:27.210 --> 00:45:29.059 align:start position:0%
so we cast it like here
sometimes<00:45:28.020><c> we</c><00:45:28.170><c> are</c><00:45:28.260><c> working</c><00:45:28.410><c> with</c><00:45:28.680><c> types</c><00:45:28.920><c> that</c>

00:45:29.059 --> 00:45:29.069 align:start position:0%
sometimes we are working with types that
 

00:45:29.069 --> 00:45:31.370 align:start position:0%
sometimes we are working with types that
are<00:45:29.220><c> not</c><00:45:29.369><c> compatible</c><00:45:29.670><c> but</c><00:45:30.119><c> you</c><00:45:30.930><c> still</c><00:45:31.140><c> need</c><00:45:31.230><c> to</c>

00:45:31.370 --> 00:45:31.380 align:start position:0%
are not compatible but you still need to
 

00:45:31.380 --> 00:45:33.470 align:start position:0%
are not compatible but you still need to
convert<00:45:31.680><c> them</c><00:45:31.920><c> for</c><00:45:32.490><c> example</c><00:45:32.910><c> we</c><00:45:33.089><c> might</c><00:45:33.240><c> have</c><00:45:33.450><c> a</c>

00:45:33.470 --> 00:45:33.480 align:start position:0%
convert them for example we might have a
 

00:45:33.480 --> 00:45:35.540 align:start position:0%
convert them for example we might have a
number<00:45:33.740><c> represented</c><00:45:34.740><c> as</c><00:45:34.859><c> a</c><00:45:34.890><c> string</c><00:45:35.069><c> as</c><00:45:35.490><c> you</c>

00:45:35.540 --> 00:45:35.550 align:start position:0%
number represented as a string as you
 

00:45:35.550 --> 00:45:38.000 align:start position:0%
number represented as a string as you
see<00:45:35.790><c> here</c><00:45:36.059><c> and</c><00:45:36.240><c> we</c><00:45:37.079><c> need</c><00:45:37.230><c> to</c><00:45:37.349><c> convert</c><00:45:37.680><c> it</c><00:45:37.740><c> to</c><00:45:37.890><c> an</c>

00:45:38.000 --> 00:45:38.010 align:start position:0%
see here and we need to convert it to an
 

00:45:38.010 --> 00:45:40.880 align:start position:0%
see here and we need to convert it to an
integer<00:45:38.309><c> in</c><00:45:38.839><c> situations</c><00:45:39.839><c> like</c><00:45:39.869><c> that</c><00:45:40.020><c> because</c>

00:45:40.880 --> 00:45:40.890 align:start position:0%
integer in situations like that because
 

00:45:40.890 --> 00:45:43.549 align:start position:0%
integer in situations like that because
string<00:45:41.400><c> and</c><00:45:41.609><c> int</c><00:45:42.150><c> are</c><00:45:42.359><c> not</c><00:45:42.660><c> compatible</c><00:45:43.020><c> they</c>

00:45:43.549 --> 00:45:43.559 align:start position:0%
string and int are not compatible they
 

00:45:43.559 --> 00:45:46.070 align:start position:0%
string and int are not compatible they
cannot<00:45:43.859><c> use</c><00:45:43.920><c> explicit</c><00:45:44.520><c> casting</c>

00:45:46.070 --> 00:45:46.080 align:start position:0%
cannot use explicit casting
 

00:45:46.080 --> 00:45:48.140 align:start position:0%
cannot use explicit casting
so<00:45:46.710><c> we</c><00:45:46.830><c> need</c><00:45:46.950><c> a</c><00:45:46.980><c> different</c><00:45:47.220><c> mechanism</c><00:45:47.550><c> for</c>

00:45:48.140 --> 00:45:48.150 align:start position:0%
so we need a different mechanism for
 

00:45:48.150 --> 00:45:50.600 align:start position:0%
so we need a different mechanism for
converting<00:45:48.360><c> a</c><00:45:48.780><c> string</c><00:45:49.110><c> to</c><00:45:49.350><c> a</c><00:45:49.380><c> number</c>

00:45:50.600 --> 00:45:50.610 align:start position:0%
converting a string to a number
 

00:45:50.610 --> 00:45:52.310 align:start position:0%
converting a string to a number
in<00:45:50.730><c> situations</c><00:45:51.300><c> like</c><00:45:51.330><c> that</c><00:45:51.480><c> we</c><00:45:51.930><c> need</c><00:45:52.080><c> to</c><00:45:52.200><c> use</c>

00:45:52.310 --> 00:45:52.320 align:start position:0%
in situations like that we need to use
 

00:45:52.320 --> 00:45:54.260 align:start position:0%
in situations like that we need to use
the<00:45:52.500><c> convert</c><00:45:52.860><c> class</c><00:45:53.100><c> or</c><00:45:53.430><c> use</c><00:45:53.850><c> the</c><00:45:54.000><c> parse</c>

00:45:54.260 --> 00:45:54.270 align:start position:0%
the convert class or use the parse
 

00:45:54.270 --> 00:45:55.579 align:start position:0%
the convert class or use the parse
method

00:45:55.579 --> 00:45:55.589 align:start position:0%
method
 

00:45:55.589 --> 00:45:57.229 align:start position:0%
method
so<00:45:55.799><c> convert</c><00:45:56.130><c> class</c><00:45:56.339><c> is</c><00:45:56.549><c> part</c><00:45:56.729><c> of</c><00:45:56.880><c> dotnet</c>

00:45:57.229 --> 00:45:57.239 align:start position:0%
so convert class is part of dotnet
 

00:45:57.239 --> 00:45:59.599 align:start position:0%
so convert class is part of dotnet
framework<00:45:57.390><c> and</c><00:45:57.869><c> is</c><00:45:58.680><c> defined</c><00:45:59.099><c> in</c><00:45:59.309><c> the</c><00:45:59.430><c> system</c>

00:45:59.599 --> 00:45:59.609 align:start position:0%
framework and is defined in the system
 

00:45:59.609 --> 00:46:02.000 align:start position:0%
framework and is defined in the system
namespace

00:46:02.000 --> 00:46:02.010 align:start position:0%
namespace
 

00:46:02.010 --> 00:46:03.980 align:start position:0%
namespace
of<00:46:02.130><c> methods</c><00:46:02.550><c> for</c><00:46:02.820><c> converting</c><00:46:03.090><c> various</c><00:46:03.750><c> types</c>

00:46:03.980 --> 00:46:03.990 align:start position:0%
of methods for converting various types
 

00:46:03.990 --> 00:46:06.140 align:start position:0%
of methods for converting various types
to<00:46:04.350><c> other</c><00:46:04.470><c> types</c><00:46:04.770><c> and</c><00:46:05.010><c> they</c><00:46:05.700><c> all</c><00:46:05.790><c> start</c><00:46:06.090><c> with</c>

00:46:06.140 --> 00:46:06.150 align:start position:0%
to other types and they all start with
 

00:46:06.150 --> 00:46:08.630 align:start position:0%
to other types and they all start with
two<00:46:06.480><c> in</c><00:46:06.720><c> this</c><00:46:07.500><c> case</c><00:46:07.680><c> we're</c><00:46:07.890><c> trying</c><00:46:08.040><c> to</c><00:46:08.250><c> convert</c>

00:46:08.630 --> 00:46:08.640 align:start position:0%
two in this case we're trying to convert
 

00:46:08.640 --> 00:46:12.740 align:start position:0%
two in this case we're trying to convert
s<00:46:08.850><c> which</c><00:46:09.150><c> is</c><00:46:09.270><c> a</c><00:46:09.300><c> string</c><00:46:09.690><c> to</c><00:46:10.140><c> an</c><00:46:10.200><c> int</c><00:46:10.440><c> 32</c><00:46:11.070><c> in</c><00:46:12.000><c> 32</c>

00:46:12.740 --> 00:46:12.750 align:start position:0%
s which is a string to an int 32 in 32
 

00:46:12.750 --> 00:46:14.660 align:start position:0%
s which is a string to an int 32 in 32
as<00:46:12.960><c> you</c><00:46:13.320><c> know</c><00:46:13.440><c> is</c><00:46:13.620><c> a</c><00:46:13.680><c> dotnet</c><00:46:14.100><c> framework</c><00:46:14.250><c> type</c>

00:46:14.660 --> 00:46:14.670 align:start position:0%
as you know is a dotnet framework type
 

00:46:14.670 --> 00:46:17.170 align:start position:0%
as you know is a dotnet framework type
which<00:46:15.210><c> maps</c><00:46:15.480><c> to</c><00:46:15.720><c> a</c><00:46:15.780><c> sushar</c><00:46:16.200><c> p--</c><00:46:16.230><c> integer</c><00:46:16.860><c> type</c>

00:46:17.170 --> 00:46:17.180 align:start position:0%
which maps to a sushar p-- integer type
 

00:46:17.180 --> 00:46:20.570 align:start position:0%
which maps to a sushar p-- integer type
remember<00:46:18.180><c> a</c><00:46:18.300><c> blight</c><00:46:18.600><c> is</c><00:46:18.810><c> one</c><00:46:19.170><c> byte</c><00:46:19.380><c> short</c><00:46:20.310><c> is</c>

00:46:20.570 --> 00:46:20.580 align:start position:0%
remember a blight is one byte short is
 

00:46:20.580 --> 00:46:23.270 align:start position:0%
remember a blight is one byte short is
two<00:46:20.970><c> bytes</c><00:46:21.210><c> and</c><00:46:21.480><c> integer</c><00:46:22.320><c> is</c><00:46:22.500><c> 4</c><00:46:22.530><c> bytes</c><00:46:23.040><c> and</c>

00:46:23.270 --> 00:46:23.280 align:start position:0%
two bytes and integer is 4 bytes and
 

00:46:23.280 --> 00:46:26.180 align:start position:0%
two bytes and integer is 4 bytes and
long<00:46:24.000><c> is</c><00:46:24.240><c> eight</c><00:46:24.510><c> bytes</c><00:46:24.720><c> you</c><00:46:25.020><c> probably</c><00:46:26.010><c> know</c>

00:46:26.180 --> 00:46:26.190 align:start position:0%
long is eight bytes you probably know
 

00:46:26.190 --> 00:46:29.510 align:start position:0%
long is eight bytes you probably know
that<00:46:26.430><c> each</c><00:46:26.640><c> byte</c><00:46:27.000><c> has</c><00:46:27.210><c> 8</c><00:46:27.510><c> bits</c><00:46:27.810><c> so</c><00:46:28.070><c> an</c><00:46:29.070><c> integer</c>

00:46:29.510 --> 00:46:29.520 align:start position:0%
that each byte has 8 bits so an integer
 

00:46:29.520 --> 00:46:33.110 align:start position:0%
that each byte has 8 bits so an integer
which<00:46:30.180><c> has</c><00:46:30.420><c> four</c><00:46:30.990><c> bytes</c><00:46:31.260><c> times</c><00:46:32.190><c> eight</c><00:46:32.520><c> bits</c>

00:46:33.110 --> 00:46:33.120 align:start position:0%
which has four bytes times eight bits
 

00:46:33.120 --> 00:46:36.260 align:start position:0%
which has four bytes times eight bits
ends<00:46:33.750><c> up</c><00:46:33.840><c> being</c><00:46:34.050><c> 32</c><00:46:34.590><c> bits</c><00:46:34.950><c> that's</c><00:46:35.850><c> why</c><00:46:36.060><c> it's</c>

00:46:36.260 --> 00:46:36.270 align:start position:0%
ends up being 32 bits that's why it's
 

00:46:36.270 --> 00:46:39.920 align:start position:0%
ends up being 32 bits that's why it's
called<00:46:36.450><c> two</c><00:46:36.780><c> in</c><00:46:36.990><c> 32</c><00:46:37.620><c> and</c><00:46:38.090><c> in</c><00:46:39.090><c> 16</c><00:46:39.660><c> which</c>

00:46:39.920 --> 00:46:39.930 align:start position:0%
called two in 32 and in 16 which
 

00:46:39.930 --> 00:46:42.830 align:start position:0%
called two in 32 and in 16 which
represents<00:46:40.530><c> 16</c><00:46:41.160><c> bits</c><00:46:41.400><c> equals</c><00:46:42.150><c> to</c><00:46:42.330><c> short</c><00:46:42.630><c> which</c>

00:46:42.830 --> 00:46:42.840 align:start position:0%
represents 16 bits equals to short which
 

00:46:42.840 --> 00:46:45.710 align:start position:0%
represents 16 bits equals to short which
is<00:46:42.870><c> 2</c><00:46:43.140><c> bytes</c><00:46:43.880><c> we</c><00:46:44.880><c> also</c><00:46:45.060><c> have</c><00:46:45.300><c> this</c><00:46:45.420><c> parse</c>

00:46:45.710 --> 00:46:45.720 align:start position:0%
is 2 bytes we also have this parse
 

00:46:45.720 --> 00:46:48.440 align:start position:0%
is 2 bytes we also have this parse
method<00:46:45.900><c> here</c><00:46:46.320><c> all</c><00:46:47.310><c> the</c><00:46:47.580><c> primitive</c><00:46:47.820><c> types</c><00:46:48.210><c> that</c>

00:46:48.440 --> 00:46:48.450 align:start position:0%
method here all the primitive types that
 

00:46:48.450 --> 00:46:49.940 align:start position:0%
method here all the primitive types that
I<00:46:48.510><c> explained</c><00:46:48.930><c> in</c><00:46:49.080><c> the</c><00:46:49.110><c> last</c><00:46:49.200><c> lecture</c>

00:46:49.940 --> 00:46:49.950 align:start position:0%
I explained in the last lecture
 

00:46:49.950 --> 00:46:53.570 align:start position:0%
I explained in the last lecture
like<00:46:50.310><c> integer</c><00:46:50.850><c> long</c><00:46:51.270><c> float</c><00:46:51.930><c> boolean</c><00:46:52.560><c> they</c><00:46:53.430><c> all</c>

00:46:53.570 --> 00:46:53.580 align:start position:0%
like integer long float boolean they all
 

00:46:53.580 --> 00:46:56.030 align:start position:0%
like integer long float boolean they all
have<00:46:53.850><c> this</c><00:46:54.090><c> parse</c><00:46:54.390><c> method</c><00:46:54.600><c> and</c><00:46:54.930><c> the</c><00:46:55.800><c> parsh</c>

00:46:56.030 --> 00:46:56.040 align:start position:0%
have this parse method and the parsh
 

00:46:56.040 --> 00:46:58.160 align:start position:0%
have this parse method and the parsh
method<00:46:56.400><c> takes</c><00:46:56.820><c> a</c><00:46:56.940><c> string</c><00:46:57.240><c> and</c><00:46:57.450><c> tries</c><00:46:58.140><c> to</c>

00:46:58.160 --> 00:46:58.170 align:start position:0%
method takes a string and tries to
 

00:46:58.170 --> 00:46:59.960 align:start position:0%
method takes a string and tries to
convert<00:46:58.620><c> that</c><00:46:58.800><c> to</c><00:46:59.130><c> the</c><00:46:59.160><c> target</c><00:46:59.520><c> type</c><00:46:59.670><c> in</c><00:46:59.880><c> this</c>

00:46:59.960 --> 00:46:59.970 align:start position:0%
convert that to the target type in this
 

00:46:59.970 --> 00:47:02.350 align:start position:0%
convert that to the target type in this
case<00:47:00.180><c> an</c><00:47:00.390><c> integer</c>

00:47:02.350 --> 00:47:02.360 align:start position:0%
case an integer
 

00:47:02.360 --> 00:47:04.030 align:start position:0%
case an integer
here<00:47:02.930><c> are</c><00:47:03.080><c> some</c><00:47:03.230><c> of</c><00:47:03.290><c> the</c><00:47:03.440><c> methods</c><00:47:03.650><c> that</c><00:47:03.890><c> you</c>

00:47:04.030 --> 00:47:04.040 align:start position:0%
here are some of the methods that you
 

00:47:04.040 --> 00:47:06.430 align:start position:0%
here are some of the methods that you
can<00:47:04.160><c> find</c><00:47:04.430><c> in</c><00:47:04.610><c> the</c><00:47:04.700><c> convert</c><00:47:05.000><c> class</c><00:47:05.270><c> to</c><00:47:06.230><c> byte</c>

00:47:06.430 --> 00:47:06.440 align:start position:0%
can find in the convert class to byte
 

00:47:06.440 --> 00:47:08.680 align:start position:0%
can find in the convert class to byte
which<00:47:07.070><c> converts</c><00:47:07.490><c> the</c><00:47:07.670><c> given</c><00:47:07.940><c> value</c><00:47:08.210><c> to</c><00:47:08.360><c> a</c><00:47:08.390><c> byte</c>

00:47:08.680 --> 00:47:08.690 align:start position:0%
which converts the given value to a byte
 

00:47:08.690 --> 00:47:12.100 align:start position:0%
which converts the given value to a byte
2<00:47:09.680><c> in</c><00:47:09.830><c> 16</c><00:47:10.310><c> to</c><00:47:10.850><c> convert</c><00:47:11.210><c> the</c><00:47:11.360><c> given</c><00:47:11.480><c> value</c><00:47:11.900><c> to</c><00:47:12.050><c> a</c>

00:47:12.100 --> 00:47:12.110 align:start position:0%
2 in 16 to convert the given value to a
 

00:47:12.110 --> 00:47:15.640 align:start position:0%
2 in 16 to convert the given value to a
short<00:47:12.440><c> 2</c><00:47:13.310><c> in</c><00:47:13.460><c> 32</c><00:47:13.970><c> to</c><00:47:14.600><c> convert</c><00:47:14.960><c> the</c><00:47:15.110><c> given</c><00:47:15.380><c> value</c>

00:47:15.640 --> 00:47:15.650 align:start position:0%
short 2 in 32 to convert the given value
 

00:47:15.650 --> 00:47:19.030 align:start position:0%
short 2 in 32 to convert the given value
to<00:47:15.800><c> an</c><00:47:15.860><c> integer</c><00:47:16.220><c> and</c><00:47:16.550><c> to</c><00:47:17.300><c> n64</c><00:47:17.750><c> to</c><00:47:18.530><c> convert</c><00:47:18.890><c> the</c>

00:47:19.030 --> 00:47:19.040 align:start position:0%
to an integer and to n64 to convert the
 

00:47:19.040 --> 00:47:21.790 align:start position:0%
to an integer and to n64 to convert the
given<00:47:19.160><c> value</c><00:47:19.550><c> to</c><00:47:19.700><c> a</c><00:47:19.730><c> long</c><00:47:20.200><c> okay</c><00:47:21.200><c> in</c><00:47:21.380><c> a</c><00:47:21.440><c> theory</c>

00:47:21.790 --> 00:47:21.800 align:start position:0%
given value to a long okay in a theory
 

00:47:21.800 --> 00:47:23.590 align:start position:0%
given value to a long okay in a theory
let's<00:47:22.100><c> jump</c><00:47:22.340><c> into</c><00:47:22.520><c> code</c><00:47:22.790><c> and</c><00:47:22.970><c> see</c><00:47:23.300><c> all</c><00:47:23.480><c> this</c>

00:47:23.590 --> 00:47:23.600 align:start position:0%
let's jump into code and see all this
 

00:47:23.600 --> 00:47:27.130 align:start position:0%
let's jump into code and see all this
concept<00:47:24.080><c> in</c><00:47:24.230><c> action</c>

00:47:27.130 --> 00:47:27.140 align:start position:0%
 
 

00:47:27.140 --> 00:47:29.319 align:start position:0%
 
okay<00:47:27.589><c> let's</c><00:47:27.859><c> say</c><00:47:28.009><c> implicit</c><00:47:28.460><c> type</c><00:47:28.759><c> conversion</c>

00:47:29.319 --> 00:47:29.329 align:start position:0%
okay let's say implicit type conversion
 

00:47:29.329 --> 00:47:32.589 align:start position:0%
okay let's say implicit type conversion
in<00:47:29.509><c> action</c><00:47:29.960><c> first</c><00:47:30.799><c> I</c><00:47:30.920><c> declare</c><00:47:31.099><c> a</c><00:47:31.400><c> bite</c><00:47:31.670><c> call</c><00:47:32.480><c> it</c>

00:47:32.589 --> 00:47:32.599 align:start position:0%
in action first I declare a bite call it
 

00:47:32.599 --> 00:47:35.560 align:start position:0%
in action first I declare a bite call it
B<00:47:32.839><c> and</c><00:47:33.140><c> set</c><00:47:33.410><c> it</c><00:47:33.499><c> to</c><00:47:33.589><c> 1</c>

00:47:35.560 --> 00:47:35.570 align:start position:0%
B and set it to 1
 

00:47:35.570 --> 00:47:39.490 align:start position:0%
B and set it to 1
now<00:47:36.020><c> I</c><00:47:36.050><c> declare</c><00:47:36.440><c> an</c><00:47:36.530><c> integer</c><00:47:36.770><c> and</c><00:47:38.290><c> set</c><00:47:39.290><c> it</c><00:47:39.410><c> to</c>

00:47:39.490 --> 00:47:39.500 align:start position:0%
now I declare an integer and set it to
 

00:47:39.500 --> 00:47:43.480 align:start position:0%
now I declare an integer and set it to
be<00:47:40.480><c> again</c><00:47:41.480><c> to</c><00:47:41.630><c> recap</c><00:47:41.930><c> a</c><00:47:42.230><c> byte</c><00:47:42.560><c> is</c><00:47:42.800><c> only</c><00:47:43.250><c> one</c>

00:47:43.480 --> 00:47:43.490 align:start position:0%
be again to recap a byte is only one
 

00:47:43.490 --> 00:47:47.110 align:start position:0%
be again to recap a byte is only one
byte<00:47:43.700><c> and</c><00:47:43.970><c> an</c><00:47:44.600><c> integer</c><00:47:44.900><c> is</c><00:47:45.260><c> 4</c><00:47:45.320><c> bytes</c><00:47:45.950><c> so</c><00:47:46.880><c> we</c><00:47:47.000><c> can</c>

00:47:47.110 --> 00:47:47.120 align:start position:0%
byte and an integer is 4 bytes so we can
 

00:47:47.120 --> 00:47:50.200 align:start position:0%
byte and an integer is 4 bytes so we can
copy<00:47:47.360><c> b2i</c><00:47:47.870><c> without</c><00:47:48.590><c> data</c><00:47:48.800><c> loss</c><00:47:48.950><c> and</c><00:47:49.340><c> as</c><00:47:50.060><c> you</c>

00:47:50.200 --> 00:47:50.210 align:start position:0%
copy b2i without data loss and as you
 

00:47:50.210 --> 00:47:52.710 align:start position:0%
copy b2i without data loss and as you
see<00:47:50.360><c> there</c><00:47:50.540><c> is</c><00:47:50.630><c> no</c><00:47:50.780><c> compile</c><00:47:51.170><c> time</c><00:47:51.320><c> error</c><00:47:51.530><c> here</c>

00:47:52.710 --> 00:47:52.720 align:start position:0%
see there is no compile time error here
 

00:47:52.720 --> 00:47:56.320 align:start position:0%
see there is no compile time error here
let's<00:47:53.720><c> put</c><00:47:53.900><c> on</c><00:47:54.230><c> the</c><00:47:54.260><c> console</c><00:47:54.740><c> so</c><00:47:55.460><c> console</c><00:47:56.000><c> dot</c>

00:47:56.320 --> 00:47:56.330 align:start position:0%
let's put on the console so console dot
 

00:47:56.330 --> 00:48:01.540 align:start position:0%
let's put on the console so console dot
write<00:47:56.600><c> line</c><00:47:56.870><c> and</c><00:47:57.700><c> we</c><00:47:58.700><c> pass</c><00:47:58.880><c> I</c><00:47:59.120><c> here</c><00:48:00.370><c> note</c><00:48:01.370><c> that</c>

00:48:01.540 --> 00:48:01.550 align:start position:0%
write line and we pass I here note that
 

00:48:01.550 --> 00:48:03.940 align:start position:0%
write line and we pass I here note that
as<00:48:01.730><c> I</c><00:48:01.970><c> typed</c><00:48:02.210><c> consult</c><00:48:02.810><c> the</c><00:48:02.930><c> right</c><00:48:03.140><c> line</c><00:48:03.380><c> my</c>

00:48:03.940 --> 00:48:03.950 align:start position:0%
as I typed consult the right line my
 

00:48:03.950 --> 00:48:05.800 align:start position:0%
as I typed consult the right line my
resharper<00:48:04.490><c> plugin</c><00:48:04.850><c> automatically</c><00:48:05.540><c> added</c>

00:48:05.800 --> 00:48:05.810 align:start position:0%
resharper plugin automatically added
 

00:48:05.810 --> 00:48:08.370 align:start position:0%
resharper plugin automatically added
this<00:48:05.930><c> using</c><00:48:06.530><c> system</c><00:48:07.040><c> statement</c><00:48:07.490><c> on</c><00:48:07.640><c> the</c><00:48:07.790><c> top</c>

00:48:08.370 --> 00:48:08.380 align:start position:0%
this using system statement on the top
 

00:48:08.380 --> 00:48:10.570 align:start position:0%
this using system statement on the top
again<00:48:09.380><c> if</c><00:48:09.560><c> you</c><00:48:09.650><c> don't</c><00:48:09.830><c> have</c><00:48:09.980><c> resharper</c><00:48:10.400><c> you</c>

00:48:10.570 --> 00:48:10.580 align:start position:0%
again if you don't have resharper you
 

00:48:10.580 --> 00:48:12.340 align:start position:0%
again if you don't have resharper you
need<00:48:10.700><c> to</c><00:48:10.820><c> go</c><00:48:10.940><c> manually</c><00:48:11.480><c> add</c><00:48:11.720><c> this</c><00:48:11.990><c> statement</c>

00:48:12.340 --> 00:48:12.350 align:start position:0%
need to go manually add this statement
 

00:48:12.350 --> 00:48:19.280 align:start position:0%
need to go manually add this statement
here<00:48:13.690><c> we</c><00:48:14.690><c> run</c><00:48:14.840><c> the</c><00:48:14.960><c> application</c><00:48:15.080><c> by</c><00:48:15.650><c> ctrl</c><00:48:16.160><c> +</c><00:48:16.310><c> f5</c>

00:48:19.280 --> 00:48:19.290 align:start position:0%
 
 

00:48:19.290 --> 00:48:23.390 align:start position:0%
 
so<00:48:20.160><c> we</c><00:48:20.310><c> got</c><00:48:20.460><c> on</c><00:48:20.790><c> the</c><00:48:20.910><c> console</c>

00:48:23.390 --> 00:48:23.400 align:start position:0%
 
 

00:48:23.400 --> 00:48:25.460 align:start position:0%
 
now<00:48:23.970><c> let's</c><00:48:24.180><c> reverse</c><00:48:24.509><c> this</c><00:48:24.720><c> and</c><00:48:24.990><c> see</c><00:48:25.319><c> what</c>

00:48:25.460 --> 00:48:25.470 align:start position:0%
now let's reverse this and see what
 

00:48:25.470 --> 00:48:27.829 align:start position:0%
now let's reverse this and see what
happens<00:48:26.039><c> so</c><00:48:27.029><c> I'm</c><00:48:27.119><c> going</c><00:48:27.299><c> to</c><00:48:27.329><c> get</c><00:48:27.480><c> rid</c><00:48:27.599><c> of</c><00:48:27.660><c> this</c>

00:48:27.829 --> 00:48:27.839 align:start position:0%
happens so I'm going to get rid of this
 

00:48:27.839 --> 00:48:31.870 align:start position:0%
happens so I'm going to get rid of this
code<00:48:28.049><c> here</c><00:48:28.430><c> control</c><00:48:29.430><c> X</c><00:48:29.670><c> control</c><00:48:29.849><c> X</c><00:48:30.690><c> control</c><00:48:30.779><c> X</c>

00:48:31.870 --> 00:48:31.880 align:start position:0%
code here control X control X control X
 

00:48:31.880 --> 00:48:37.390 align:start position:0%
code here control X control X control X
first<00:48:32.880><c> I</c><00:48:33.029><c> declare</c><00:48:33.299><c> an</c><00:48:33.390><c> integer</c><00:48:34.640><c> set</c><00:48:35.640><c> it</c><00:48:35.759><c> to</c><00:48:35.910><c> one</c>

00:48:37.390 --> 00:48:37.400 align:start position:0%
first I declare an integer set it to one
 

00:48:37.400 --> 00:48:40.940 align:start position:0%
first I declare an integer set it to one
then<00:48:38.400><c> I</c><00:48:38.430><c> declare</c><00:48:38.670><c> a</c><00:48:38.819><c> byte</c><00:48:39.089><c> and</c><00:48:39.440><c> try</c><00:48:40.440><c> to</c><00:48:40.499><c> copy</c><00:48:40.829><c> I</c>

00:48:40.940 --> 00:48:40.950 align:start position:0%
then I declare a byte and try to copy I
 

00:48:40.950 --> 00:48:45.019 align:start position:0%
then I declare a byte and try to copy I
to<00:48:41.430><c> B</c><00:48:42.829><c> we</c><00:48:43.829><c> immediately</c><00:48:44.279><c> got</c><00:48:44.579><c> this</c><00:48:44.730><c> red</c>

00:48:45.019 --> 00:48:45.029 align:start position:0%
to B we immediately got this red
 

00:48:45.029 --> 00:48:47.210 align:start position:0%
to B we immediately got this red
underline<00:48:45.539><c> here</c><00:48:45.809><c> if</c><00:48:45.960><c> you</c><00:48:46.859><c> hover</c><00:48:47.009><c> the</c><00:48:47.190><c> mouse</c>

00:48:47.210 --> 00:48:47.220 align:start position:0%
underline here if you hover the mouse
 

00:48:47.220 --> 00:48:50.480 align:start position:0%
underline here if you hover the mouse
here<00:48:47.809><c> the</c><00:48:48.809><c> tooltip</c><00:48:49.259><c> says</c><00:48:49.289><c> cannot</c><00:48:50.069><c> convert</c>

00:48:50.480 --> 00:48:50.490 align:start position:0%
here the tooltip says cannot convert
 

00:48:50.490 --> 00:48:52.960 align:start position:0%
here the tooltip says cannot convert
source<00:48:50.759><c> type</c><00:48:50.970><c> int</c><00:48:51.269><c> to</c><00:48:51.809><c> target</c><00:48:52.170><c> type</c><00:48:52.349><c> byte</c>

00:48:52.960 --> 00:48:52.970 align:start position:0%
source type int to target type byte
 

00:48:52.970 --> 00:48:54.829 align:start position:0%
source type int to target type byte
sometimes<00:48:53.970><c> this</c><00:48:54.089><c> error</c><00:48:54.329><c> might</c><00:48:54.569><c> be</c><00:48:54.690><c> in</c><00:48:54.779><c> a</c>

00:48:54.829 --> 00:48:54.839 align:start position:0%
sometimes this error might be in a
 

00:48:54.839 --> 00:48:56.509 align:start position:0%
sometimes this error might be in a
different<00:48:55.200><c> file</c><00:48:55.410><c> which</c><00:48:55.650><c> is</c><00:48:55.769><c> not</c><00:48:55.920><c> open</c><00:48:56.309><c> in</c>

00:48:56.509 --> 00:48:56.519 align:start position:0%
different file which is not open in
 

00:48:56.519 --> 00:48:58.880 align:start position:0%
different file which is not open in
Visual<00:48:56.999><c> Studio</c><00:48:57.119><c> here</c><00:48:57.660><c> so</c><00:48:58.319><c> you</c><00:48:58.410><c> may</c><00:48:58.619><c> see</c><00:48:58.680><c> the</c>

00:48:58.880 --> 00:48:58.890 align:start position:0%
Visual Studio here so you may see the
 

00:48:58.890 --> 00:49:00.470 align:start position:0%
Visual Studio here so you may see the
error<00:48:59.069><c> when</c><00:48:59.309><c> compiling</c><00:48:59.759><c> the</c><00:48:59.940><c> application</c>

00:49:00.470 --> 00:49:00.480 align:start position:0%
error when compiling the application
 

00:49:00.480 --> 00:49:02.839 align:start position:0%
error when compiling the application
let's<00:49:01.049><c> simulate</c><00:49:01.259><c> that</c><00:49:01.650><c> so</c><00:49:02.339><c> I</c><00:49:02.369><c> compile</c><00:49:02.819><c> this</c>

00:49:02.839 --> 00:49:02.849 align:start position:0%
let's simulate that so I compile this
 

00:49:02.849 --> 00:49:06.140 align:start position:0%
let's simulate that so I compile this
application<00:49:03.539><c> by</c><00:49:03.690><c> ctrl</c><00:49:04.200><c> shift</c><00:49:04.349><c> and</c><00:49:04.799><c> B</c><00:49:05.150><c> which</c>

00:49:06.140 --> 00:49:06.150 align:start position:0%
application by ctrl shift and B which
 

00:49:06.150 --> 00:49:12.339 align:start position:0%
application by ctrl shift and B which
stands<00:49:06.450><c> for</c><00:49:06.569><c> build</c><00:49:09.589><c> so</c><00:49:10.589><c> here's</c><00:49:10.829><c> the</c><00:49:10.980><c> error</c>

00:49:12.339 --> 00:49:12.349 align:start position:0%
stands for build so here's the error
 

00:49:12.349 --> 00:49:15.410 align:start position:0%
stands for build so here's the error
cannot<00:49:13.349><c> implicitly</c><00:49:13.980><c> convert</c><00:49:14.519><c> type</c><00:49:14.730><c> int</c><00:49:15.029><c> to</c>

00:49:15.410 --> 00:49:15.420 align:start position:0%
cannot implicitly convert type int to
 

00:49:15.420 --> 00:49:18.140 align:start position:0%
cannot implicitly convert type int to
byte<00:49:15.630><c> an</c><00:49:16.009><c> explicit</c><00:49:17.009><c> conversion</c><00:49:17.220><c> exists</c><00:49:18.029><c> are</c>

00:49:18.140 --> 00:49:18.150 align:start position:0%
byte an explicit conversion exists are
 

00:49:18.150 --> 00:49:21.739 align:start position:0%
byte an explicit conversion exists are
you<00:49:18.869><c> missing</c><00:49:19.170><c> a</c><00:49:19.230><c> caste</c><00:49:20.569><c> so</c><00:49:21.569><c> now</c><00:49:21.690><c> you</c>

00:49:21.739 --> 00:49:21.749 align:start position:0%
you missing a caste so now you
 

00:49:21.749 --> 00:49:23.349 align:start position:0%
you missing a caste so now you
understand<00:49:22.289><c> the</c><00:49:22.440><c> concept</c><00:49:22.859><c> of</c><00:49:22.920><c> implicit</c>

00:49:23.349 --> 00:49:23.359 align:start position:0%
understand the concept of implicit
 

00:49:23.359 --> 00:49:26.900 align:start position:0%
understand the concept of implicit
versus<00:49:24.359><c> explicit</c><00:49:24.390><c> type</c><00:49:25.170><c> conversion</c><00:49:25.730><c> so</c><00:49:26.730><c> what</c>

00:49:26.900 --> 00:49:26.910 align:start position:0%
versus explicit type conversion so what
 

00:49:26.910 --> 00:49:31.460 align:start position:0%
versus explicit type conversion so what
we<00:49:26.999><c> need</c><00:49:27.150><c> to</c><00:49:27.240><c> do</c><00:49:27.329><c> here</c><00:49:27.630><c> is</c><00:49:27.779><c> to</c><00:49:28.319><c> do</c><00:49:28.410><c> a</c><00:49:28.440><c> cast</c><00:49:29.569><c> so</c><00:49:30.569><c> we</c>

00:49:31.460 --> 00:49:31.470 align:start position:0%
we need to do here is to do a cast so we
 

00:49:31.470 --> 00:49:34.549 align:start position:0%
we need to do here is to do a cast so we
casted<00:49:32.009><c> integer</c><00:49:32.460><c> to</c><00:49:32.640><c> a</c><00:49:32.670><c> byte</c><00:49:33.380><c> now</c><00:49:34.380><c> in</c><00:49:34.440><c> this</c>

00:49:34.549 --> 00:49:34.559 align:start position:0%
casted integer to a byte now in this
 

00:49:34.559 --> 00:49:36.769 align:start position:0%
casted integer to a byte now in this
case<00:49:34.769><c> no</c><00:49:35.160><c> data</c><00:49:35.400><c> loss</c><00:49:35.519><c> will</c><00:49:35.849><c> happen</c><00:49:36.210><c> because</c>

00:49:36.769 --> 00:49:36.779 align:start position:0%
case no data loss will happen because
 

00:49:36.779 --> 00:49:39.200 align:start position:0%
case no data loss will happen because
the<00:49:37.109><c> value</c><00:49:37.380><c> is</c><00:49:37.529><c> small</c><00:49:38.279><c> enough</c><00:49:38.519><c> to</c><00:49:38.789><c> be</c><00:49:38.819><c> stored</c>

00:49:39.200 --> 00:49:39.210 align:start position:0%
the value is small enough to be stored
 

00:49:39.210 --> 00:49:42.999 align:start position:0%
the value is small enough to be stored
in<00:49:39.390><c> one</c><00:49:39.569><c> bite</c><00:49:40.309><c> let's</c><00:49:41.309><c> put</c><00:49:41.519><c> B</c><00:49:41.700><c> on</c><00:49:41.730><c> the</c><00:49:41.999><c> console</c>

00:49:42.999 --> 00:49:43.009 align:start position:0%
in one bite let's put B on the console
 

00:49:43.009 --> 00:49:48.229 align:start position:0%
in one bite let's put B on the console
console<00:49:44.009><c> by</c><00:49:44.249><c> right</c><00:49:44.489><c> line</c><00:49:45.079><c> B</c><00:49:46.970><c> we</c><00:49:47.970><c> run</c><00:49:48.150><c> the</c>

00:49:48.229 --> 00:49:48.239 align:start position:0%
console by right line B we run the
 

00:49:48.239 --> 00:49:51.470 align:start position:0%
console by right line B we run the
application

00:49:51.470 --> 00:49:51.480 align:start position:0%
 
 

00:49:51.480 --> 00:49:53.720 align:start position:0%
 
so<00:49:51.930><c> everything</c><00:49:52.260><c> is</c><00:49:52.380><c> good</c><00:49:52.500><c> but</c><00:49:53.310><c> let's</c><00:49:53.490><c> see</c><00:49:53.580><c> what</c>

00:49:53.720 --> 00:49:53.730 align:start position:0%
so everything is good but let's see what
 

00:49:53.730 --> 00:49:57.380 align:start position:0%
so everything is good but let's see what
happens<00:49:54.120><c> if</c><00:49:54.360><c> we</c><00:49:55.190><c> said</c><00:49:56.190><c> I</c><00:49:56.340><c> -</c><00:49:56.490><c> let's</c><00:49:57.240><c> say</c>

00:49:57.380 --> 00:49:57.390 align:start position:0%
happens if we said I - let's say
 

00:49:57.390 --> 00:50:00.500 align:start position:0%
happens if we said I - let's say
thousand<00:49:58.580><c> we</c><00:49:59.580><c> cannot</c><00:49:59.850><c> store</c><00:50:00.090><c> the</c><00:50:00.210><c> number</c>

00:50:00.500 --> 00:50:00.510 align:start position:0%
thousand we cannot store the number
 

00:50:00.510 --> 00:50:03.140 align:start position:0%
thousand we cannot store the number
thousand<00:50:01.050><c> in</c><00:50:01.230><c> a</c><00:50:01.470><c> byte</c><00:50:01.680><c> the</c><00:50:02.460><c> maximum</c><00:50:02.940><c> we</c><00:50:03.030><c> can</c>

00:50:03.140 --> 00:50:03.150 align:start position:0%
thousand in a byte the maximum we can
 

00:50:03.150 --> 00:50:06.230 align:start position:0%
thousand in a byte the maximum we can
store<00:50:03.360><c> in</c><00:50:03.450><c> a</c><00:50:03.510><c> byte</c><00:50:03.690><c> is</c><00:50:03.720><c> 255</c><00:50:04.730><c> so</c><00:50:05.730><c> if</c><00:50:05.880><c> you</c><00:50:05.970><c> run</c><00:50:06.120><c> the</c>

00:50:06.230 --> 00:50:06.240 align:start position:0%
store in a byte is 255 so if you run the
 

00:50:06.240 --> 00:50:08.680 align:start position:0%
store in a byte is 255 so if you run the
application<00:50:06.390><c> now</c>

00:50:08.680 --> 00:50:08.690 align:start position:0%
application now
 

00:50:08.690 --> 00:50:11.950 align:start position:0%
application now
we<00:50:09.410><c> got</c><00:50:09.590><c> to</c><00:50:09.770><c> 32</c><00:50:10.250><c> because</c><00:50:11.180><c> some</c><00:50:11.510><c> of</c><00:50:11.540><c> the</c><00:50:11.720><c> bits</c>

00:50:11.950 --> 00:50:11.960 align:start position:0%
we got to 32 because some of the bits
 

00:50:11.960 --> 00:50:15.990 align:start position:0%
we got to 32 because some of the bits
were<00:50:12.410><c> lost</c><00:50:12.680><c> and</c><00:50:14.050><c> this</c><00:50:15.050><c> is</c><00:50:15.170><c> the</c><00:50:15.320><c> reason</c><00:50:15.500><c> that</c>

00:50:15.990 --> 00:50:16.000 align:start position:0%
were lost and this is the reason that
 

00:50:16.000 --> 00:50:18.310 align:start position:0%
were lost and this is the reason that
c-sharp<00:50:17.000><c> compiler</c><00:50:17.420><c> knows</c><00:50:17.600><c> that</c><00:50:17.960><c> there</c><00:50:18.200><c> is</c><00:50:18.230><c> a</c>

00:50:18.310 --> 00:50:18.320 align:start position:0%
c-sharp compiler knows that there is a
 

00:50:18.320 --> 00:50:20.890 align:start position:0%
c-sharp compiler knows that there is a
chance<00:50:18.650><c> for</c><00:50:18.740><c> data</c><00:50:19.070><c> loss</c><00:50:19.310><c> and</c><00:50:19.640><c> it</c><00:50:20.150><c> enforces</c><00:50:20.690><c> you</c>

00:50:20.890 --> 00:50:20.900 align:start position:0%
chance for data loss and it enforces you
 

00:50:20.900 --> 00:50:24.910 align:start position:0%
chance for data loss and it enforces you
to<00:50:21.410><c> explicitly</c><00:50:22.190><c> specify</c><00:50:23.060><c> the</c><00:50:23.120><c> cast</c><00:50:23.920><c> sometimes</c>

00:50:24.910 --> 00:50:24.920 align:start position:0%
to explicitly specify the cast sometimes
 

00:50:24.920 --> 00:50:27.040 align:start position:0%
to explicitly specify the cast sometimes
you<00:50:25.160><c> know</c><00:50:25.280><c> that</c><00:50:25.490><c> despite</c><00:50:25.970><c> the</c><00:50:26.300><c> differences</c><00:50:26.540><c> in</c>

00:50:27.040 --> 00:50:27.050 align:start position:0%
you know that despite the differences in
 

00:50:27.050 --> 00:50:29.050 align:start position:0%
you know that despite the differences in
data<00:50:27.260><c> types</c><00:50:27.590><c> there</c><00:50:28.190><c> is</c><00:50:28.280><c> no</c><00:50:28.400><c> chance</c><00:50:28.640><c> of</c><00:50:28.790><c> data</c>

00:50:29.050 --> 00:50:29.060 align:start position:0%
data types there is no chance of data
 

00:50:29.060 --> 00:50:31.210 align:start position:0%
data types there is no chance of data
loss<00:50:29.330><c> like</c><00:50:29.780><c> in</c><00:50:29.960><c> the</c><00:50:30.050><c> last</c><00:50:30.230><c> example</c><00:50:30.410><c> where</c><00:50:31.010><c> I</c>

00:50:31.210 --> 00:50:31.220 align:start position:0%
loss like in the last example where I
 

00:50:31.220 --> 00:50:33.490 align:start position:0%
loss like in the last example where I
was<00:50:31.550><c> set</c><00:50:31.760><c> to</c><00:50:31.880><c> 1</c><00:50:32.090><c> in</c><00:50:32.630><c> those</c><00:50:32.750><c> cases</c><00:50:33.020><c> we</c><00:50:33.380><c> can</c>

00:50:33.490 --> 00:50:33.500 align:start position:0%
was set to 1 in those cases we can
 

00:50:33.500 --> 00:50:36.640 align:start position:0%
was set to 1 in those cases we can
safely<00:50:33.740><c> apply</c><00:50:34.220><c> a</c><00:50:34.730><c> cast</c><00:50:35.150><c> okay</c><00:50:36.110><c> now</c><00:50:36.380><c> let's</c><00:50:36.560><c> take</c>

00:50:36.640 --> 00:50:36.650 align:start position:0%
safely apply a cast okay now let's take
 

00:50:36.650 --> 00:50:39.730 align:start position:0%
safely apply a cast okay now let's take
a<00:50:36.710><c> look</c><00:50:36.890><c> at</c><00:50:37.040><c> non</c><00:50:37.250><c> compatible</c><00:50:37.820><c> types</c><00:50:38.530><c> so</c><00:50:39.530><c> let's</c>

00:50:39.730 --> 00:50:39.740 align:start position:0%
a look at non compatible types so let's
 

00:50:39.740 --> 00:50:43.390 align:start position:0%
a look at non compatible types so let's
clean<00:50:39.920><c> up</c><00:50:39.950><c> this</c><00:50:40.130><c> code</c><00:50:40.370><c> I</c><00:50:42.070><c> start</c><00:50:43.070><c> by</c><00:50:43.220><c> declaring</c>

00:50:43.390 --> 00:50:43.400 align:start position:0%
clean up this code I start by declaring
 

00:50:43.400 --> 00:50:47.170 align:start position:0%
clean up this code I start by declaring
a<00:50:43.760><c> string</c><00:50:44.650><c> let's</c><00:50:45.650><c> call</c><00:50:45.830><c> it</c><00:50:45.920><c> number</c><00:50:46.280><c> and</c><00:50:46.550><c> set</c><00:50:47.060><c> it</c>

00:50:47.170 --> 00:50:47.180 align:start position:0%
a string let's call it number and set it
 

00:50:47.180 --> 00:50:50.220 align:start position:0%
a string let's call it number and set it
to<00:50:47.330><c> one</c><00:50:47.660><c> two</c><00:50:47.810><c> three</c><00:50:48.020><c> four</c>

00:50:50.220 --> 00:50:50.230 align:start position:0%
to one two three four
 

00:50:50.230 --> 00:50:52.050 align:start position:0%
to one two three four
recapping<00:50:50.560><c> from</c><00:50:50.830><c> the</c><00:50:50.950><c> last</c><00:50:51.160><c> lecture</c><00:50:51.369><c> note</c>

00:50:52.050 --> 00:50:52.060 align:start position:0%
recapping from the last lecture note
 

00:50:52.060 --> 00:50:54.000 align:start position:0%
recapping from the last lecture note
that<00:50:52.210><c> here</c><00:50:52.480><c> I</c><00:50:52.630><c> could</c><00:50:52.960><c> declare</c><00:50:53.320><c> this</c><00:50:53.500><c> with</c><00:50:53.890><c> the</c>

00:50:54.000 --> 00:50:54.010 align:start position:0%
that here I could declare this with the
 

00:50:54.010 --> 00:50:56.730 align:start position:0%
that here I could declare this with the
VAR<00:50:54.250><c> keyword</c><00:50:54.280><c> and</c><00:50:55.260><c> since</c><00:50:56.260><c> our</c><00:50:56.320><c> compiler</c>

00:50:56.730 --> 00:50:56.740 align:start position:0%
VAR keyword and since our compiler
 

00:50:56.740 --> 00:50:58.620 align:start position:0%
VAR keyword and since our compiler
automatically<00:50:57.460><c> detects</c><00:50:57.820><c> that</c><00:50:58.060><c> this</c><00:50:58.480><c> is</c><00:50:58.600><c> a</c>

00:50:58.620 --> 00:50:58.630 align:start position:0%
automatically detects that this is a
 

00:50:58.630 --> 00:51:00.990 align:start position:0%
automatically detects that this is a
string<00:50:59.050><c> so</c><00:50:59.590><c> number</c><00:50:59.980><c> will</c><00:51:00.190><c> be</c><00:51:00.340><c> defined</c><00:51:00.790><c> as</c><00:51:00.940><c> a</c>

00:51:00.990 --> 00:51:01.000 align:start position:0%
string so number will be defined as a
 

00:51:01.000 --> 00:51:03.510 align:start position:0%
string so number will be defined as a
string<00:51:01.570><c> and</c><00:51:01.810><c> we</c><00:51:02.680><c> can</c><00:51:02.830><c> see</c><00:51:03.010><c> that</c><00:51:03.160><c> by</c><00:51:03.340><c> hovering</c>

00:51:03.510 --> 00:51:03.520 align:start position:0%
string and we can see that by hovering
 

00:51:03.520 --> 00:51:05.520 align:start position:0%
string and we can see that by hovering
the<00:51:03.730><c> mouse</c><00:51:03.790><c> here</c><00:51:04.210><c> it</c><00:51:04.390><c> says</c><00:51:04.810><c> system</c><00:51:05.350><c> that</c>

00:51:05.520 --> 00:51:05.530 align:start position:0%
the mouse here it says system that
 

00:51:05.530 --> 00:51:07.130 align:start position:0%
the mouse here it says system that
string

00:51:07.130 --> 00:51:07.140 align:start position:0%
string
 

00:51:07.140 --> 00:51:09.480 align:start position:0%
string
now<00:51:08.140><c> let's</c><00:51:08.350><c> say</c><00:51:08.500><c> we</c><00:51:08.680><c> want</c><00:51:08.860><c> to</c><00:51:08.950><c> convert</c><00:51:09.310><c> that</c><00:51:09.340><c> to</c>

00:51:09.480 --> 00:51:09.490 align:start position:0%
now let's say we want to convert that to
 

00:51:09.490 --> 00:51:10.850 align:start position:0%
now let's say we want to convert that to
a<00:51:09.670><c> number</c>

00:51:10.850 --> 00:51:10.860 align:start position:0%
a number
 

00:51:10.860 --> 00:51:14.000 align:start position:0%
a number
if<00:51:10.980><c> I</c><00:51:11.130><c> declare</c><00:51:11.460><c> an</c><00:51:11.550><c> integer</c><00:51:11.880><c> like</c><00:51:12.360><c> I</c><00:51:13.110><c> I</c><00:51:13.500><c> cannot</c>

00:51:14.000 --> 00:51:14.010 align:start position:0%
if I declare an integer like I I cannot
 

00:51:14.010 --> 00:51:17.000 align:start position:0%
if I declare an integer like I I cannot
cast<00:51:14.310><c> that</c><00:51:14.610><c> number</c><00:51:15.080><c> to</c><00:51:16.080><c> an</c><00:51:16.170><c> integer</c><00:51:16.470><c> because</c>

00:51:17.000 --> 00:51:17.010 align:start position:0%
cast that number to an integer because
 

00:51:17.010 --> 00:51:19.070 align:start position:0%
cast that number to an integer because
they're<00:51:17.340><c> not</c><00:51:17.490><c> compatible</c><00:51:17.790><c> let's</c><00:51:18.750><c> take</c><00:51:18.870><c> a</c><00:51:18.900><c> look</c>

00:51:19.070 --> 00:51:19.080 align:start position:0%
they're not compatible let's take a look
 

00:51:19.080 --> 00:51:22.100 align:start position:0%
they're not compatible let's take a look
at<00:51:19.170><c> the</c><00:51:19.260><c> error</c><00:51:20.090><c> cannot</c><00:51:21.090><c> cast</c><00:51:21.360><c> expression</c><00:51:22.020><c> of</c>

00:51:22.100 --> 00:51:22.110 align:start position:0%
at the error cannot cast expression of
 

00:51:22.110 --> 00:51:24.770 align:start position:0%
at the error cannot cast expression of
type<00:51:22.260><c> string</c><00:51:22.740><c> to</c><00:51:23.040><c> type</c><00:51:23.220><c> int</c><00:51:23.550><c> so</c><00:51:24.390><c> if</c><00:51:24.510><c> you</c><00:51:24.630><c> see</c>

00:51:24.770 --> 00:51:24.780 align:start position:0%
type string to type int so if you see
 

00:51:24.780 --> 00:51:26.690 align:start position:0%
type string to type int so if you see
that<00:51:24.810><c> error</c><00:51:25.140><c> that's</c><00:51:25.860><c> the</c><00:51:26.010><c> time</c><00:51:26.220><c> when</c><00:51:26.430><c> you</c><00:51:26.460><c> need</c>

00:51:26.690 --> 00:51:26.700 align:start position:0%
that error that's the time when you need
 

00:51:26.700 --> 00:51:29.860 align:start position:0%
that error that's the time when you need
to<00:51:26.730><c> use</c><00:51:26.970><c> the</c><00:51:27.120><c> convert</c><00:51:27.450><c> class</c>

00:51:29.860 --> 00:51:29.870 align:start position:0%
 
 

00:51:29.870 --> 00:51:32.530 align:start position:0%
 
so<00:51:30.020><c> we</c><00:51:30.140><c> type</c><00:51:30.290><c> in</c><00:51:30.410><c> convert</c><00:51:30.830><c> dot</c><00:51:31.430><c> take</c><00:51:32.210><c> a</c><00:51:32.240><c> look</c><00:51:32.450><c> at</c>

00:51:32.530 --> 00:51:32.540 align:start position:0%
so we type in convert dot take a look at
 

00:51:32.540 --> 00:51:36.430 align:start position:0%
so we type in convert dot take a look at
this<00:51:32.630><c> method</c><00:51:33.020><c> here</c><00:51:33.260><c> -</c><00:51:34.220><c> bite</c><00:51:34.490><c> -</c><00:51:34.790><c> char</c><00:51:35.240><c> -</c><00:51:35.510><c> in</c><00:51:35.810><c> 16</c>

00:51:36.430 --> 00:51:36.440 align:start position:0%
this method here - bite - char - in 16
 

00:51:36.440 --> 00:51:41.560 align:start position:0%
this method here - bite - char - in 16
in<00:51:36.890><c> 32</c><00:51:37.550><c> and</c><00:51:37.870><c> many</c><00:51:38.870><c> other</c><00:51:39.050><c> methods</c><00:51:39.260><c> here</c><00:51:40.570><c> so</c>

00:51:41.560 --> 00:51:41.570 align:start position:0%
in 32 and many other methods here so
 

00:51:41.570 --> 00:51:43.090 align:start position:0%
in 32 and many other methods here so
let's<00:51:41.750><c> convert</c><00:51:41.930><c> that</c><00:51:42.170><c> to</c><00:51:42.350><c> an</c><00:51:42.440><c> integer</c><00:51:42.470><c> which</c>

00:51:43.090 --> 00:51:43.100 align:start position:0%
let's convert that to an integer which
 

00:51:43.100 --> 00:51:47.770 align:start position:0%
let's convert that to an integer which
is<00:51:43.130><c> int</c><00:51:43.520><c> 32</c><00:51:44.060><c> and</c><00:51:45.280><c> pass</c><00:51:46.280><c> number</c><00:51:46.790><c> as</c><00:51:47.000><c> an</c><00:51:47.420><c> argument</c>

00:51:47.770 --> 00:51:47.780 align:start position:0%
is int 32 and pass number as an argument
 

00:51:47.780 --> 00:51:51.640 align:start position:0%
is int 32 and pass number as an argument
here<00:51:49.450><c> now</c><00:51:50.450><c> let's</c><00:51:50.660><c> print</c><00:51:50.810><c> out</c><00:51:51.020><c> the</c><00:51:51.200><c> I</c><00:51:51.230><c> on</c><00:51:51.530><c> the</c>

00:51:51.640 --> 00:51:51.650 align:start position:0%
here now let's print out the I on the
 

00:51:51.650 --> 00:52:02.830 align:start position:0%
here now let's print out the I on the
console<00:51:57.820><c> run</c><00:51:58.820><c> application</c><00:52:00.400><c> so</c><00:52:01.400><c> I</c><00:52:01.430><c> is</c><00:52:01.610><c> 1</c><00:52:02.150><c> 2</c><00:52:02.360><c> 3</c><00:52:02.540><c> 4</c>

00:52:02.830 --> 00:52:02.840 align:start position:0%
console run application so I is 1 2 3 4
 

00:52:02.840 --> 00:52:06.370 align:start position:0%
console run application so I is 1 2 3 4
all<00:52:03.050><c> good</c><00:52:03.550><c> but</c><00:52:04.550><c> let's</c><00:52:04.730><c> see</c><00:52:04.820><c> what</c><00:52:04.940><c> happens</c><00:52:05.380><c> if</c>

00:52:06.370 --> 00:52:06.380 align:start position:0%
all good but let's see what happens if
 

00:52:06.380 --> 00:52:10.440 align:start position:0%
all good but let's see what happens if
instead<00:52:06.620><c> I</c><00:52:07.040><c> declare</c><00:52:07.640><c> this</c><00:52:07.850><c> as</c><00:52:08.090><c> a</c><00:52:08.150><c> byte</c><00:52:08.750><c> and</c>

00:52:10.440 --> 00:52:10.450 align:start position:0%
instead I declare this as a byte and
 

00:52:10.450 --> 00:52:14.650 align:start position:0%
instead I declare this as a byte and
here<00:52:11.450><c> we</c><00:52:11.810><c> need</c><00:52:11.930><c> to</c><00:52:12.020><c> use</c><00:52:12.280><c> convert</c><00:52:13.280><c> dot</c><00:52:13.700><c> 2</c><00:52:14.090><c> byte</c>

00:52:14.650 --> 00:52:14.660 align:start position:0%
here we need to use convert dot 2 byte
 

00:52:14.660 --> 00:52:20.070 align:start position:0%
here we need to use convert dot 2 byte
and<00:52:16.270><c> here</c><00:52:17.270><c> we</c><00:52:17.480><c> display</c><00:52:17.720><c> B</c><00:52:18.440><c> on</c><00:52:18.680><c> the</c><00:52:18.800><c> console</c><00:52:19.190><c> a</c>

00:52:20.070 --> 00:52:20.080 align:start position:0%
and here we display B on the console a
 

00:52:20.080 --> 00:52:23.170 align:start position:0%
and here we display B on the console a
byte<00:52:21.080><c> does</c><00:52:21.650><c> not</c><00:52:21.830><c> have</c><00:52:22.010><c> enough</c><00:52:22.250><c> storage</c><00:52:22.490><c> to</c>

00:52:23.170 --> 00:52:23.180 align:start position:0%
byte does not have enough storage to
 

00:52:23.180 --> 00:52:27.970 align:start position:0%
byte does not have enough storage to
store<00:52:23.210><c> the</c><00:52:23.690><c> value</c><00:52:23.720><c> of</c><00:52:25.390><c> 1234</c><00:52:26.390><c> so</c><00:52:26.680><c> when</c><00:52:27.680><c> we</c><00:52:27.800><c> run</c>

00:52:27.970 --> 00:52:27.980 align:start position:0%
store the value of 1234 so when we run
 

00:52:27.980 --> 00:52:32.760 align:start position:0%
store the value of 1234 so when we run
the<00:52:28.100><c> application</c><00:52:28.190><c> now</c>

00:52:32.760 --> 00:52:32.770 align:start position:0%
 
 

00:52:32.770 --> 00:52:36.230 align:start position:0%
 
the<00:52:33.770><c> application</c><00:52:34.280><c> crashed</c>

00:52:36.230 --> 00:52:36.240 align:start position:0%
the application crashed
 

00:52:36.240 --> 00:52:39.180 align:start position:0%
the application crashed
the<00:52:37.240><c> cancel</c><00:52:37.630><c> is</c><00:52:37.750><c> here</c><00:52:38.080><c> and</c><00:52:38.260><c> here</c><00:52:38.980><c> is</c><00:52:39.070><c> the</c>

00:52:39.180 --> 00:52:39.190 align:start position:0%
the cancel is here and here is the
 

00:52:39.190 --> 00:52:41.640 align:start position:0%
the cancel is here and here is the
exception<00:52:39.990><c> exception</c><00:52:40.990><c> is</c><00:52:41.140><c> Dartmouth</c>

00:52:41.640 --> 00:52:41.650 align:start position:0%
exception exception is Dartmouth
 

00:52:41.650 --> 00:52:43.740 align:start position:0%
exception exception is Dartmouth
frameworks<00:52:42.100><c> error</c><00:52:42.400><c> reporting</c><00:52:43.150><c> mechanism</c>

00:52:43.740 --> 00:52:43.750 align:start position:0%
frameworks error reporting mechanism
 

00:52:43.750 --> 00:52:45.690 align:start position:0%
frameworks error reporting mechanism
it's<00:52:44.470><c> an</c><00:52:44.620><c> advanced</c><00:52:45.040><c> topic</c><00:52:45.160><c> and</c><00:52:45.520><c> I</c><00:52:45.610><c> have</c>

00:52:45.690 --> 00:52:45.700 align:start position:0%
it's an advanced topic and I have
 

00:52:45.700 --> 00:52:47.520 align:start position:0%
it's an advanced topic and I have
covered<00:52:45.940><c> it</c><00:52:46.180><c> in</c><00:52:46.300><c> detail</c><00:52:46.750><c> in</c><00:52:46.960><c> my</c><00:52:47.110><c> C</c><00:52:47.320><c> sharp</c>

00:52:47.520 --> 00:52:47.530 align:start position:0%
covered it in detail in my C sharp
 

00:52:47.530 --> 00:52:49.950 align:start position:0%
covered it in detail in my C sharp
Advanced<00:52:47.860><c> Course</c><00:52:48.150><c> but</c><00:52:49.150><c> in</c><00:52:49.240><c> this</c><00:52:49.330><c> video</c><00:52:49.540><c> I</c><00:52:49.900><c> will</c>

00:52:49.950 --> 00:52:49.960 align:start position:0%
Advanced Course but in this video I will
 

00:52:49.960 --> 00:52:51.420 align:start position:0%
Advanced Course but in this video I will
briefly<00:52:50.440><c> show</c><00:52:50.530><c> you</c><00:52:50.680><c> how</c><00:52:50.980><c> to</c><00:52:51.040><c> handle</c>

00:52:51.420 --> 00:52:51.430 align:start position:0%
briefly show you how to handle
 

00:52:51.430 --> 00:52:54.690 align:start position:0%
briefly show you how to handle
exceptions<00:52:52.380><c> so</c><00:52:53.380><c> here</c><00:52:53.590><c> it</c><00:52:53.860><c> says</c><00:52:53.920><c> unhandled</c>

00:52:54.690 --> 00:52:54.700 align:start position:0%
exceptions so here it says unhandled
 

00:52:54.700 --> 00:52:56.940 align:start position:0%
exceptions so here it says unhandled
exception<00:52:55.240><c> the</c><00:52:55.840><c> type</c><00:52:56.110><c> of</c><00:52:56.140><c> exception</c><00:52:56.590><c> is</c>

00:52:56.940 --> 00:52:56.950 align:start position:0%
exception the type of exception is
 

00:52:56.950 --> 00:52:59.760 align:start position:0%
exception the type of exception is
system<00:52:57.550><c> that</c><00:52:57.760><c> overflow</c><00:52:58.450><c> exception</c><00:52:58.960><c> which</c>

00:52:59.760 --> 00:52:59.770 align:start position:0%
system that overflow exception which
 

00:52:59.770 --> 00:53:02.130 align:start position:0%
system that overflow exception which
means<00:53:00.040><c> we</c><00:53:00.220><c> try</c><00:53:00.460><c> to</c><00:53:00.520><c> store</c><00:53:00.910><c> a</c><00:53:00.940><c> value</c><00:53:01.030><c> that</c><00:53:01.900><c> was</c>

00:53:02.130 --> 00:53:02.140 align:start position:0%
means we try to store a value that was
 

00:53:02.140 --> 00:53:04.800 align:start position:0%
means we try to store a value that was
too<00:53:02.530><c> large</c><00:53:02.770><c> or</c><00:53:03.100><c> too</c><00:53:03.340><c> small</c><00:53:03.760><c> for</c><00:53:04.210><c> a</c><00:53:04.270><c> byte</c>

00:53:04.800 --> 00:53:04.810 align:start position:0%
too large or too small for a byte
 

00:53:04.810 --> 00:53:08.370 align:start position:0%
too large or too small for a byte
so<00:53:05.740><c> each</c><00:53:05.890><c> exception</c><00:53:06.550><c> or</c><00:53:06.730><c> error</c><00:53:07.240><c> as</c><00:53:07.510><c> a</c><00:53:07.570><c> type</c><00:53:08.170><c> in</c>

00:53:08.370 --> 00:53:08.380 align:start position:0%
so each exception or error as a type in
 

00:53:08.380 --> 00:53:10.620 align:start position:0%
so each exception or error as a type in
this<00:53:08.530><c> case</c><00:53:08.710><c> overflow</c><00:53:09.340><c> exception</c><00:53:09.820><c> and</c><00:53:10.000><c> has</c><00:53:10.600><c> a</c>

00:53:10.620 --> 00:53:10.630 align:start position:0%
this case overflow exception and has a
 

00:53:10.630 --> 00:53:13.260 align:start position:0%
this case overflow exception and has a
message<00:53:11.280><c> value</c><00:53:12.280><c> was</c><00:53:12.460><c> either</c><00:53:12.670><c> too</c><00:53:12.940><c> large</c><00:53:12.970><c> or</c>

00:53:13.260 --> 00:53:13.270 align:start position:0%
message value was either too large or
 

00:53:13.270 --> 00:53:17.970 align:start position:0%
message value was either too large or
too<00:53:13.450><c> small</c><00:53:13.960><c> for</c><00:53:14.200><c> an</c><00:53:14.350><c> unsigned</c><00:53:14.920><c> byte</c><00:53:16.980><c> sometimes</c>

00:53:17.970 --> 00:53:17.980 align:start position:0%
too small for an unsigned byte sometimes
 

00:53:17.980 --> 00:53:19.650 align:start position:0%
too small for an unsigned byte sometimes
the<00:53:18.160><c> exception</c><00:53:18.640><c> messages</c><00:53:19.060><c> are</c><00:53:19.210><c> friendly</c>

00:53:19.650 --> 00:53:19.660 align:start position:0%
the exception messages are friendly
 

00:53:19.660 --> 00:53:21.120 align:start position:0%
the exception messages are friendly
enough<00:53:19.840><c> that</c><00:53:20.080><c> are</c><00:53:20.350><c> easy</c><00:53:20.530><c> to</c><00:53:20.710><c> understand</c>

00:53:21.120 --> 00:53:21.130 align:start position:0%
enough that are easy to understand
 

00:53:21.130 --> 00:53:23.040 align:start position:0%
enough that are easy to understand
sometimes<00:53:21.880><c> they're</c><00:53:22.240><c> a</c><00:53:22.270><c> little</c><00:53:22.360><c> bit</c><00:53:22.660><c> tricky</c>

00:53:23.040 --> 00:53:23.050 align:start position:0%
sometimes they're a little bit tricky
 

00:53:23.050 --> 00:53:24.660 align:start position:0%
sometimes they're a little bit tricky
and<00:53:23.230><c> the</c><00:53:23.410><c> best</c><00:53:23.590><c> way</c><00:53:23.740><c> to</c><00:53:23.770><c> work</c><00:53:24.070><c> out</c><00:53:24.340><c> what</c><00:53:24.550><c> is</c>

00:53:24.660 --> 00:53:24.670 align:start position:0%
and the best way to work out what is
 

00:53:24.670 --> 00:53:26.760 align:start position:0%
and the best way to work out what is
going<00:53:24.820><c> wrong</c><00:53:25.060><c> is</c><00:53:25.270><c> to</c><00:53:25.660><c> jump</c><00:53:26.020><c> on</c><00:53:26.170><c> Google</c><00:53:26.530><c> and</c>

00:53:26.760 --> 00:53:26.770 align:start position:0%
going wrong is to jump on Google and
 

00:53:26.770 --> 00:53:28.470 align:start position:0%
going wrong is to jump on Google and
search<00:53:27.370><c> for</c><00:53:27.520><c> the</c><00:53:27.640><c> error</c><00:53:27.790><c> and</c><00:53:28.060><c> there's</c><00:53:28.270><c> pretty</c>

00:53:28.470 --> 00:53:28.480 align:start position:0%
search for the error and there's pretty
 

00:53:28.480 --> 00:53:30.990 align:start position:0%
search for the error and there's pretty
much<00:53:28.600><c> always</c><00:53:29.140><c> a</c><00:53:29.350><c> Stack</c><00:53:29.860><c> Overflow</c><00:53:30.040><c> page</c><00:53:30.640><c> that</c>

00:53:30.990 --> 00:53:31.000 align:start position:0%
much always a Stack Overflow page that
 

00:53:31.000 --> 00:53:35.270 align:start position:0%
much always a Stack Overflow page that
explains<00:53:31.180><c> that</c><00:53:32.310><c> now</c><00:53:33.310><c> let's</c><00:53:33.550><c> describe</c><00:53:33.790><c> that</c>

00:53:35.270 --> 00:53:35.280 align:start position:0%
explains that now let's describe that
 

00:53:35.280 --> 00:53:37.350 align:start position:0%
explains that now let's describe that
let's<00:53:36.280><c> see</c><00:53:36.400><c> how</c><00:53:36.550><c> to</c><00:53:36.610><c> handle</c><00:53:36.730><c> the</c><00:53:37.180><c> exception</c>

00:53:37.350 --> 00:53:37.360 align:start position:0%
let's see how to handle the exception
 

00:53:37.360 --> 00:53:39.359 align:start position:0%
let's see how to handle the exception
here

00:53:39.359 --> 00:53:39.369 align:start position:0%
here
 

00:53:39.369 --> 00:53:41.700 align:start position:0%
here
happened<00:53:39.849><c> during</c><00:53:40.089><c> conversion</c><00:53:40.569><c> of</c><00:53:40.960><c> that</c>

00:53:41.700 --> 00:53:41.710 align:start position:0%
happened during conversion of that
 

00:53:41.710 --> 00:53:44.640 align:start position:0%
happened during conversion of that
string<00:53:42.069><c> to</c><00:53:42.519><c> bite</c><00:53:42.900><c> what</c><00:53:43.900><c> we</c><00:53:44.049><c> need</c><00:53:44.170><c> to</c><00:53:44.289><c> do</c><00:53:44.380><c> here</c>

00:53:44.640 --> 00:53:44.650 align:start position:0%
string to bite what we need to do here
 

00:53:44.650 --> 00:53:47.789 align:start position:0%
string to bite what we need to do here
is<00:53:44.890><c> to</c><00:53:45.279><c> wrap</c><00:53:46.029><c> these</c><00:53:46.539><c> few</c><00:53:46.809><c> statements</c><00:53:47.079><c> with</c><00:53:47.769><c> a</c>

00:53:47.789 --> 00:53:47.799 align:start position:0%
is to wrap these few statements with a
 

00:53:47.799 --> 00:53:52.579 align:start position:0%
is to wrap these few statements with a
try-catch<00:53:48.549><c> block</c><00:53:48.940><c> let's</c><00:53:49.660><c> see</c><00:53:49.779><c> how</c><00:53:49.900><c> it</c><00:53:50.049><c> works</c>

00:53:52.579 --> 00:53:52.589 align:start position:0%
 
 

00:53:52.589 --> 00:53:55.589 align:start position:0%
 
so<00:53:53.589><c> I</c><00:53:53.619><c> just</c><00:53:53.859><c> typed</c><00:53:54.130><c> try</c><00:53:54.579><c> and</c><00:53:54.819><c> press</c><00:53:55.150><c> the</c><00:53:55.299><c> enter</c>

00:53:55.589 --> 00:53:55.599 align:start position:0%
so I just typed try and press the enter
 

00:53:55.599 --> 00:53:57.779 align:start position:0%
so I just typed try and press the enter
and<00:53:55.950><c> visual</c><00:53:56.950><c> studio</c><00:53:57.130><c> automatically</c>

00:53:57.779 --> 00:53:57.789 align:start position:0%
and visual studio automatically
 

00:53:57.789 --> 00:53:59.940 align:start position:0%
and visual studio automatically
generated<00:53:58.329><c> this</c><00:53:58.420><c> block</c><00:53:58.720><c> for</c><00:53:58.960><c> me</c><00:53:59.079><c> again</c><00:53:59.769><c> this</c>

00:53:59.940 --> 00:53:59.950 align:start position:0%
generated this block for me again this
 

00:53:59.950 --> 00:54:02.700 align:start position:0%
generated this block for me again this
is<00:54:00.069><c> what</c><00:54:00.220><c> we</c><00:54:00.339><c> call</c><00:54:00.549><c> a</c><00:54:00.730><c> code</c><00:54:01.420><c> snippet</c><00:54:01.599><c> let</c><00:54:02.559><c> me</c>

00:54:02.700 --> 00:54:02.710 align:start position:0%
is what we call a code snippet let me
 

00:54:02.710 --> 00:54:04.920 align:start position:0%
is what we call a code snippet let me
undo<00:54:02.980><c> this</c><00:54:03.039><c> I'll</c><00:54:03.339><c> show</c><00:54:03.369><c> you</c><00:54:03.579><c> one</c><00:54:03.759><c> more</c><00:54:03.789><c> time</c><00:54:04.150><c> so</c>

00:54:04.920 --> 00:54:04.930 align:start position:0%
undo this I'll show you one more time so
 

00:54:04.930 --> 00:54:08.130 align:start position:0%
undo this I'll show you one more time so
try<00:54:05.759><c> see</c><00:54:06.759><c> this</c><00:54:06.910><c> try</c><00:54:07.660><c> here</c><00:54:07.930><c> in</c><00:54:07.960><c> the</c>

00:54:08.130 --> 00:54:08.140 align:start position:0%
try see this try here in the
 

00:54:08.140 --> 00:54:10.769 align:start position:0%
try see this try here in the
intellisense<00:54:08.499><c> and</c><00:54:08.859><c> this</c><00:54:09.730><c> icon</c><00:54:10.119><c> represents</c><00:54:10.690><c> a</c>

00:54:10.769 --> 00:54:10.779 align:start position:0%
intellisense and this icon represents a
 

00:54:10.779 --> 00:54:13.700 align:start position:0%
intellisense and this icon represents a
code<00:54:11.019><c> snippet</c><00:54:11.200><c> so</c><00:54:12.160><c> if</c><00:54:12.400><c> I</c><00:54:12.490><c> press</c><00:54:12.700><c> enter</c><00:54:13.180><c> or</c><00:54:13.329><c> tab</c>

00:54:13.700 --> 00:54:13.710 align:start position:0%
code snippet so if I press enter or tab
 

00:54:13.710 --> 00:54:17.339 align:start position:0%
code snippet so if I press enter or tab
you<00:54:14.710><c> automatically</c><00:54:15.160><c> get</c><00:54:15.670><c> this</c><00:54:15.910><c> code</c><00:54:16.180><c> block</c><00:54:16.349><c> so</c>

00:54:17.339 --> 00:54:17.349 align:start position:0%
you automatically get this code block so
 

00:54:17.349 --> 00:54:19.620 align:start position:0%
you automatically get this code block so
what<00:54:17.499><c> I'm</c><00:54:17.589><c> going</c><00:54:17.740><c> to</c><00:54:17.769><c> do</c><00:54:17.920><c> now</c><00:54:18.130><c> is</c><00:54:18.400><c> to</c><00:54:18.849><c> move</c><00:54:19.390><c> this</c>

00:54:19.620 --> 00:54:19.630 align:start position:0%
what I'm going to do now is to move this
 

00:54:19.630 --> 00:54:24.329 align:start position:0%
what I'm going to do now is to move this
code<00:54:20.700><c> enter</c><00:54:21.700><c> a</c><00:54:21.730><c> try</c><00:54:22.029><c> block</c><00:54:22.329><c> and</c><00:54:23.160><c> the</c><00:54:24.160><c> catch</c>

00:54:24.329 --> 00:54:24.339 align:start position:0%
code enter a try block and the catch
 

00:54:24.339 --> 00:54:27.420 align:start position:0%
code enter a try block and the catch
block<00:54:24.700><c> gets</c><00:54:25.390><c> an</c><00:54:25.539><c> exception</c><00:54:26.049><c> by</c><00:54:26.950><c> default</c>

00:54:27.420 --> 00:54:27.430 align:start position:0%
block gets an exception by default
 

00:54:27.430 --> 00:54:29.549 align:start position:0%
block gets an exception by default
visual<00:54:27.730><c> studio</c><00:54:28.089><c> as</c><00:54:28.269><c> this</c><00:54:28.539><c> throw</c><00:54:28.960><c> here</c><00:54:29.259><c> don't</c>

00:54:29.549 --> 00:54:29.559 align:start position:0%
visual studio as this throw here don't
 

00:54:29.559 --> 00:54:31.230 align:start position:0%
visual studio as this throw here don't
worry<00:54:29.710><c> about</c><00:54:29.799><c> it</c><00:54:30.099><c> just</c><00:54:30.279><c> delete</c><00:54:30.519><c> it</c><00:54:30.549><c> again</c><00:54:31.089><c> I</c>

00:54:31.230 --> 00:54:31.240 align:start position:0%
worry about it just delete it again I
 

00:54:31.240 --> 00:54:33.480 align:start position:0%
worry about it just delete it again I
will<00:54:31.359><c> explain</c><00:54:31.630><c> it</c><00:54:31.809><c> in</c><00:54:31.960><c> detail</c><00:54:32.680><c> in</c><00:54:32.920><c> my</c><00:54:33.130><c> sushar</c>

00:54:33.480 --> 00:54:33.490 align:start position:0%
will explain it in detail in my sushar
 

00:54:33.490 --> 00:54:35.970 align:start position:0%
will explain it in detail in my sushar
Advanced<00:54:33.789><c> Course</c><00:54:34.289><c> for</c><00:54:35.289><c> now</c><00:54:35.440><c> let's</c><00:54:35.710><c> see</c><00:54:35.799><c> what's</c>

00:54:35.970 --> 00:54:35.980 align:start position:0%
Advanced Course for now let's see what's
 

00:54:35.980 --> 00:54:37.859 align:start position:0%
Advanced Course for now let's see what's
going<00:54:36.160><c> on</c><00:54:36.309><c> here</c><00:54:36.549><c> so</c><00:54:37.210><c> the</c><00:54:37.359><c> code</c><00:54:37.569><c> that</c><00:54:37.599><c> you</c><00:54:37.839><c> put</c>

00:54:37.859 --> 00:54:37.869 align:start position:0%
going on here so the code that you put
 

00:54:37.869 --> 00:54:40.440 align:start position:0%
going on here so the code that you put
inside<00:54:38.349><c> the</c><00:54:38.470><c> try</c><00:54:38.710><c> block</c><00:54:38.970><c> will</c><00:54:39.970><c> be</c><00:54:39.999><c> somehow</c>

00:54:40.440 --> 00:54:40.450 align:start position:0%
inside the try block will be somehow
 

00:54:40.450 --> 00:54:44.029 align:start position:0%
inside the try block will be somehow
monitored<00:54:41.319><c> and</c><00:54:41.589><c> if</c><00:54:42.549><c> an</c><00:54:42.700><c> exception</c><00:54:42.999><c> happens</c>

00:54:44.029 --> 00:54:44.039 align:start position:0%
monitored and if an exception happens
 

00:54:44.039 --> 00:54:47.729 align:start position:0%
monitored and if an exception happens
this<00:54:45.039><c> block</c><00:54:45.369><c> will</c><00:54:45.549><c> be</c><00:54:45.579><c> executed</c><00:54:46.739><c> this</c>

00:54:47.729 --> 00:54:47.739 align:start position:0%
this block will be executed this
 

00:54:47.739 --> 00:54:49.710 align:start position:0%
this block will be executed this
prevents<00:54:48.249><c> your</c><00:54:48.339><c> application</c><00:54:48.880><c> from</c><00:54:49.029><c> crashing</c>

00:54:49.710 --> 00:54:49.720 align:start position:0%
prevents your application from crashing
 

00:54:49.720 --> 00:54:51.599 align:start position:0%
prevents your application from crashing
the<00:54:50.349><c> reason</c><00:54:50.680><c> our</c><00:54:50.739><c> application</c><00:54:51.339><c> crashed</c>

00:54:51.599 --> 00:54:51.609 align:start position:0%
the reason our application crashed
 

00:54:51.609 --> 00:54:54.059 align:start position:0%
the reason our application crashed
earlier<00:54:52.029><c> was</c><00:54:52.630><c> because</c><00:54:52.660><c> we</c><00:54:53.230><c> did</c><00:54:53.410><c> not</c><00:54:53.440><c> handle</c>

00:54:54.059 --> 00:54:54.069 align:start position:0%
earlier was because we did not handle
 

00:54:54.069 --> 00:54:56.309 align:start position:0%
earlier was because we did not handle
the<00:54:54.190><c> exception</c><00:54:54.660><c> so</c><00:54:55.660><c> if</c><00:54:55.749><c> you</c><00:54:55.839><c> don't</c><00:54:56.049><c> handle</c>

00:54:56.309 --> 00:54:56.319 align:start position:0%
the exception so if you don't handle
 

00:54:56.319 --> 00:54:57.950 align:start position:0%
the exception so if you don't handle
exception<00:54:56.859><c> the</c><00:54:57.039><c> exception</c><00:54:57.519><c> will</c><00:54:57.700><c> be</c>

00:54:57.950 --> 00:54:57.960 align:start position:0%
exception the exception will be
 

00:54:57.960 --> 00:55:00.210 align:start position:0%
exception the exception will be
propagated<00:54:58.960><c> to</c><00:54:59.079><c> the</c><00:54:59.170><c> dotnet</c><00:54:59.499><c> runtime</c><00:55:00.009><c> and</c>

00:55:00.210 --> 00:55:00.220 align:start position:0%
propagated to the dotnet runtime and
 

00:55:00.220 --> 00:55:02.910 align:start position:0%
propagated to the dotnet runtime and
that<00:55:01.180><c> the</c><00:55:01.329><c> run</c><00:55:01.480><c> times</c><00:55:01.720><c> mechanism</c><00:55:02.289><c> is</c><00:55:02.470><c> to</c><00:55:02.680><c> stop</c>

00:55:02.910 --> 00:55:02.920 align:start position:0%
that the run times mechanism is to stop
 

00:55:02.920 --> 00:55:05.150 align:start position:0%
that the run times mechanism is to stop
your<00:55:03.039><c> application</c><00:55:03.670><c> and</c><00:55:03.849><c> display</c><00:55:04.599><c> the</c><00:55:04.749><c> error</c>

00:55:05.150 --> 00:55:05.160 align:start position:0%
your application and display the error
 

00:55:05.160 --> 00:55:07.589 align:start position:0%
your application and display the error
here<00:55:06.160><c> we</c><00:55:06.309><c> can</c><00:55:06.460><c> handle</c><00:55:06.789><c> the</c><00:55:06.940><c> exception</c><00:55:07.180><c> and</c>

00:55:07.589 --> 00:55:07.599 align:start position:0%
here we can handle the exception and
 

00:55:07.599 --> 00:55:09.390 align:start position:0%
here we can handle the exception and
that<00:55:08.200><c> would</c><00:55:08.349><c> prevent</c><00:55:08.680><c> the</c><00:55:08.829><c> exception</c><00:55:09.249><c> from</c>

00:55:09.390 --> 00:55:09.400 align:start position:0%
that would prevent the exception from
 

00:55:09.400 --> 00:55:12.299 align:start position:0%
that would prevent the exception from
being<00:55:09.640><c> propagated</c><00:55:09.999><c> to</c><00:55:10.450><c> dotnet</c><00:55:11.049><c> runtime</c><00:55:11.410><c> so</c>

00:55:12.299 --> 00:55:12.309 align:start position:0%
being propagated to dotnet runtime so
 

00:55:12.309 --> 00:55:13.829 align:start position:0%
being propagated to dotnet runtime so
instead<00:55:12.579><c> we</c><00:55:12.759><c> can</c><00:55:12.910><c> display</c><00:55:13.269><c> a</c><00:55:13.299><c> friendly</c>

00:55:13.829 --> 00:55:13.839 align:start position:0%
instead we can display a friendly
 

00:55:13.839 --> 00:55:17.150 align:start position:0%
instead we can display a friendly
message<00:55:14.289><c> to</c><00:55:14.650><c> the</c><00:55:14.739><c> user</c><00:55:14.920><c> saying</c><00:55:15.670><c> for</c><00:55:15.970><c> example</c>

00:55:17.150 --> 00:55:17.160 align:start position:0%
message to the user saying for example
 

00:55:17.160 --> 00:55:20.089 align:start position:0%
message to the user saying for example
console.writeline

00:55:20.089 --> 00:55:20.099 align:start position:0%
console.writeline
 

00:55:20.099 --> 00:55:25.170 align:start position:0%
console.writeline
the<00:55:21.099><c> number</c><00:55:21.460><c> could</c><00:55:22.029><c> not</c><00:55:22.089><c> be</c><00:55:22.420><c> converted</c><00:55:23.049><c> to</c><00:55:24.180><c> a</c>

00:55:25.170 --> 00:55:25.180 align:start position:0%
the number could not be converted to a
 

00:55:25.180 --> 00:55:28.760 align:start position:0%
the number could not be converted to a
byte

00:55:28.760 --> 00:55:28.770 align:start position:0%
 
 

00:55:28.770 --> 00:55:33.650 align:start position:0%
 
now<00:55:29.310><c> let's</c><00:55:29.490><c> run</c><00:55:29.640><c> the</c><00:55:29.760><c> application</c><00:55:30.150><c> again</c>

00:55:33.650 --> 00:55:33.660 align:start position:0%
 
 

00:55:33.660 --> 00:55:36.289 align:start position:0%
 
see<00:55:34.319><c> we</c><00:55:34.559><c> got</c><00:55:34.710><c> the</c><00:55:34.950><c> firmly</c><00:55:35.309><c> message</c><00:55:35.759><c> and</c><00:55:35.940><c> the</c>

00:55:36.289 --> 00:55:36.299 align:start position:0%
see we got the firmly message and the
 

00:55:36.299 --> 00:55:39.800 align:start position:0%
see we got the firmly message and the
application<00:55:36.750><c> didn't</c><00:55:36.960><c> crash</c>

00:55:39.800 --> 00:55:39.810 align:start position:0%
 
 

00:55:39.810 --> 00:55:41.510 align:start position:0%
 
so<00:55:40.140><c> what</c><00:55:40.380><c> I</c><00:55:40.410><c> want</c><00:55:40.620><c> you</c><00:55:40.710><c> to</c><00:55:40.830><c> take</c><00:55:41.010><c> away</c><00:55:41.160><c> from</c>

00:55:41.510 --> 00:55:41.520 align:start position:0%
so what I want you to take away from
 

00:55:41.520 --> 00:55:43.460 align:start position:0%
so what I want you to take away from
this<00:55:41.640><c> lecture</c><00:55:41.700><c> is</c><00:55:42.270><c> this</c>

00:55:43.460 --> 00:55:43.470 align:start position:0%
this lecture is this
 

00:55:43.470 --> 00:55:45.800 align:start position:0%
this lecture is this
we're<00:55:43.590><c> class</c><00:55:43.830><c> works</c><00:55:44.790><c> pretty</c><00:55:45.119><c> well</c><00:55:45.240><c> in</c><00:55:45.630><c> most</c>

00:55:45.800 --> 00:55:45.810 align:start position:0%
we're class works pretty well in most
 

00:55:45.810 --> 00:55:48.859 align:start position:0%
we're class works pretty well in most
cases<00:55:46.080><c> but</c><00:55:46.470><c> in</c><00:55:46.619><c> cases</c><00:55:47.040><c> where</c><00:55:47.310><c> the</c><00:55:47.940><c> source</c><00:55:48.570><c> type</c>

00:55:48.859 --> 00:55:48.869 align:start position:0%
cases but in cases where the source type
 

00:55:48.869 --> 00:55:50.720 align:start position:0%
cases but in cases where the source type
cannot<00:55:49.260><c> be</c><00:55:49.380><c> converted</c><00:55:49.770><c> to</c><00:55:49.980><c> the</c><00:55:50.220><c> target</c><00:55:50.550><c> type</c>

00:55:50.720 --> 00:55:50.730 align:start position:0%
cannot be converted to the target type
 

00:55:50.730 --> 00:55:52.760 align:start position:0%
cannot be converted to the target type
there<00:55:51.270><c> is</c><00:55:51.300><c> a</c><00:55:51.420><c> chance</c><00:55:51.720><c> for</c><00:55:51.810><c> exception</c><00:55:52.349><c> and</c><00:55:52.530><c> you</c>

00:55:52.760 --> 00:55:52.770 align:start position:0%
there is a chance for exception and you
 

00:55:52.770 --> 00:55:54.650 align:start position:0%
there is a chance for exception and you
need<00:55:52.890><c> to</c><00:55:52.950><c> be</c><00:55:53.070><c> aware</c><00:55:53.310><c> of</c><00:55:53.460><c> that</c><00:55:53.609><c> and</c><00:55:53.820><c> what</c><00:55:54.540><c> you</c>

00:55:54.650 --> 00:55:54.660 align:start position:0%
need to be aware of that and what you
 

00:55:54.660 --> 00:55:56.270 align:start position:0%
need to be aware of that and what you
need<00:55:54.750><c> to</c><00:55:54.869><c> do</c><00:55:54.990><c> is</c><00:55:55.200><c> to</c><00:55:55.440><c> wrap</c><00:55:55.619><c> this</c><00:55:55.830><c> block</c><00:55:56.099><c> of</c><00:55:56.250><c> code</c>

00:55:56.270 --> 00:55:56.280 align:start position:0%
need to do is to wrap this block of code
 

00:55:56.280 --> 00:55:59.450 align:start position:0%
need to do is to wrap this block of code
with<00:55:57.060><c> try-catch</c><00:55:57.740><c> let's</c><00:55:58.740><c> take</c><00:55:58.890><c> a</c><00:55:58.920><c> look</c><00:55:59.130><c> at</c><00:55:59.250><c> one</c>

00:55:59.450 --> 00:55:59.460 align:start position:0%
with try-catch let's take a look at one
 

00:55:59.460 --> 00:56:00.890 align:start position:0%
with try-catch let's take a look at one
more<00:55:59.490><c> example</c><00:55:59.670><c> before</c><00:56:00.300><c> we</c><00:56:00.450><c> finish</c><00:56:00.780><c> this</c>

00:56:00.890 --> 00:56:00.900 align:start position:0%
more example before we finish this
 

00:56:00.900 --> 00:56:06.370 align:start position:0%
more example before we finish this
lecture<00:56:01.369><c> let's</c><00:56:02.369><c> remove</c><00:56:02.640><c> this</c><00:56:03.349><c> and</c><00:56:04.349><c> instead</c>

00:56:06.370 --> 00:56:06.380 align:start position:0%
lecture let's remove this and instead
 

00:56:06.380 --> 00:56:09.009 align:start position:0%
lecture let's remove this and instead
-<00:56:06.620><c> drink</c>

00:56:09.009 --> 00:56:09.019 align:start position:0%
 
 

00:56:09.019 --> 00:56:12.370 align:start position:0%
 
call<00:56:09.199><c> it</c><00:56:09.319><c> STR</c><00:56:09.829><c> and</c><00:56:10.099><c> set</c><00:56:10.579><c> it</c><00:56:10.669><c> to</c><00:56:10.699><c> true</c><00:56:11.229><c> we</c><00:56:12.229><c> can</c>

00:56:12.370 --> 00:56:12.380 align:start position:0%
call it STR and set it to true we can
 

00:56:12.380 --> 00:56:14.289 align:start position:0%
call it STR and set it to true we can
use<00:56:12.529><c> the</c><00:56:12.619><c> convert</c><00:56:12.979><c> class</c><00:56:13.219><c> to</c><00:56:13.729><c> convert</c><00:56:13.969><c> that</c>

00:56:14.289 --> 00:56:14.299 align:start position:0%
use the convert class to convert that
 

00:56:14.299 --> 00:56:17.829 align:start position:0%
use the convert class to convert that
value<00:56:14.689><c> to</c><00:56:14.869><c> a</c><00:56:14.899><c> boolean</c><00:56:15.199><c> so</c><00:56:16.009><c> bull</c><00:56:16.279><c> P</c><00:56:17.209><c> equals</c>

00:56:17.829 --> 00:56:17.839 align:start position:0%
value to a boolean so bull P equals
 

00:56:17.839 --> 00:56:21.549 align:start position:0%
value to a boolean so bull P equals
convert<00:56:18.499><c> that</c><00:56:18.979><c> to</c><00:56:19.339><c> boolean</c><00:56:19.759><c> and</c><00:56:20.140><c> we</c><00:56:21.140><c> pass</c><00:56:21.349><c> that</c>

00:56:21.549 --> 00:56:21.559 align:start position:0%
convert that to boolean and we pass that
 

00:56:21.559 --> 00:56:24.319 align:start position:0%
convert that to boolean and we pass that
STR<00:56:22.009><c> here</c>

00:56:24.319 --> 00:56:24.329 align:start position:0%
 
 

00:56:24.329 --> 00:56:27.539 align:start position:0%
 
again<00:56:25.329><c> in</c><00:56:25.420><c> this</c><00:56:25.569><c> example</c><00:56:25.930><c> string</c><00:56:26.859><c> and</c><00:56:27.099><c> bull</c>

00:56:27.539 --> 00:56:27.549 align:start position:0%
again in this example string and bull
 

00:56:27.549 --> 00:56:29.880 align:start position:0%
again in this example string and bull
are<00:56:27.789><c> not</c><00:56:28.029><c> compatible</c><00:56:28.390><c> and</c><00:56:28.719><c> that's</c><00:56:29.589><c> why</c><00:56:29.709><c> we</c>

00:56:29.880 --> 00:56:29.890 align:start position:0%
are not compatible and that's why we
 

00:56:29.890 --> 00:56:32.969 align:start position:0%
are not compatible and that's why we
cannot<00:56:30.069><c> use</c><00:56:30.279><c> explicit</c><00:56:30.699><c> casting</c><00:56:31.289><c> so</c><00:56:32.289><c> here</c><00:56:32.859><c> we</c>

00:56:32.969 --> 00:56:32.979 align:start position:0%
cannot use explicit casting so here we
 

00:56:32.979 --> 00:56:36.059 align:start position:0%
cannot use explicit casting so here we
are<00:56:33.039><c> using</c><00:56:33.190><c> the</c><00:56:33.400><c> convert</c><00:56:33.729><c> class</c><00:56:34.920><c> we</c><00:56:35.920><c> can</c>

00:56:36.059 --> 00:56:36.069 align:start position:0%
are using the convert class we can
 

00:56:36.069 --> 00:56:41.860 align:start position:0%
are using the convert class we can
display<00:56:36.430><c> B</c><00:56:36.699><c> on</c><00:56:36.849><c> the</c><00:56:36.940><c> console</c>

00:56:41.860 --> 00:56:41.870 align:start position:0%
 
 

00:56:41.870 --> 00:56:44.210 align:start position:0%
 
application

00:56:44.210 --> 00:56:44.220 align:start position:0%
application
 

00:56:44.220 --> 00:56:46.490 align:start position:0%
application
so<00:56:44.819><c> the</c><00:56:45.089><c> true</c><00:56:45.329><c> string</c><00:56:45.720><c> was</c><00:56:45.930><c> successfully</c>

00:56:46.490 --> 00:56:46.500 align:start position:0%
so the true string was successfully
 

00:56:46.500 --> 00:56:50.620 align:start position:0%
so the true string was successfully
converted<00:56:46.980><c> to</c><00:56:47.010><c> a</c><00:56:47.250><c> boolean</c><00:56:47.700><c> value</c>

00:56:50.620 --> 00:56:50.630 align:start position:0%
 
 

00:56:50.630 --> 00:56:51.910 align:start position:0%
 
that's<00:56:50.960><c> pretty</c><00:56:51.200><c> much</c><00:56:51.289><c> it</c><00:56:51.440><c> for</c><00:56:51.589><c> this</c><00:56:51.710><c> lecture</c>

00:56:51.910 --> 00:56:51.920 align:start position:0%
that's pretty much it for this lecture
 

00:56:51.920 --> 00:56:54.430 align:start position:0%
that's pretty much it for this lecture
before<00:56:52.819><c> I</c><00:56:53.000><c> finish</c><00:56:53.420><c> I</c><00:56:53.569><c> just</c><00:56:53.599><c> need</c><00:56:53.930><c> to</c><00:56:54.079><c> emphasize</c>

00:56:54.430 --> 00:56:54.440 align:start position:0%
before I finish I just need to emphasize
 

00:56:54.440 --> 00:56:56.559 align:start position:0%
before I finish I just need to emphasize
something<00:56:55.160><c> here</c><00:56:55.430><c> that</c><00:56:56.029><c> throughout</c><00:56:56.299><c> this</c>

00:56:56.559 --> 00:56:56.569 align:start position:0%
something here that throughout this
 

00:56:56.569 --> 00:56:59.319 align:start position:0%
something here that throughout this
course<00:56:56.900><c> during</c><00:56:57.589><c> early</c><00:56:58.039><c> lectures</c><00:56:58.190><c> you</c><00:56:58.940><c> may</c><00:56:59.089><c> see</c>

00:56:59.319 --> 00:56:59.329 align:start position:0%
course during early lectures you may see
 

00:56:59.329 --> 00:57:01.930 align:start position:0%
course during early lectures you may see
me<00:56:59.509><c> using</c><00:56:59.990><c> some</c><00:57:00.039><c> short</c><00:57:01.039><c> variable</c><00:57:01.490><c> names</c><00:57:01.730><c> like</c>

00:57:01.930 --> 00:57:01.940 align:start position:0%
me using some short variable names like
 

00:57:01.940 --> 00:57:04.960 align:start position:0%
me using some short variable names like
P<00:57:02.210><c> or</c><00:57:02.480><c> STR</c><00:57:02.930><c> here</c><00:57:03.319><c> that's</c><00:57:04.160><c> purely</c><00:57:04.430><c> for</c>

00:57:04.960 --> 00:57:04.970 align:start position:0%
P or STR here that's purely for
 

00:57:04.970 --> 00:57:07.120 align:start position:0%
P or STR here that's purely for
demonstration<00:57:05.359><c> and</c><00:57:06.140><c> keeping</c><00:57:06.740><c> things</c><00:57:06.890><c> simple</c>

00:57:07.120 --> 00:57:07.130 align:start position:0%
demonstration and keeping things simple
 

00:57:07.130 --> 00:57:09.789 align:start position:0%
demonstration and keeping things simple
and<00:57:07.519><c> in</c><00:57:08.480><c> building</c><00:57:08.690><c> real-world</c><00:57:09.170><c> applications</c>

00:57:09.789 --> 00:57:09.799 align:start position:0%
and in building real-world applications
 

00:57:09.799 --> 00:57:11.650 align:start position:0%
and in building real-world applications
we<00:57:09.980><c> should</c><00:57:10.130><c> really</c><00:57:10.460><c> avoid</c><00:57:10.579><c> naming</c><00:57:11.539><c> our</c>

00:57:11.650 --> 00:57:11.660 align:start position:0%
we should really avoid naming our
 

00:57:11.660 --> 00:57:14.950 align:start position:0%
we should really avoid naming our
variables<00:57:12.430><c> ABC</c><00:57:13.430><c> STR</c><00:57:14.000><c> it's</c><00:57:14.180><c> not</c><00:57:14.359><c> really</c><00:57:14.660><c> a</c><00:57:14.690><c> good</c>

00:57:14.950 --> 00:57:14.960 align:start position:0%
variables ABC STR it's not really a good
 

00:57:14.960 --> 00:57:17.920 align:start position:0%
variables ABC STR it's not really a good
practice<00:57:15.529><c> the</c><00:57:16.519><c> only</c><00:57:16.670><c> exception</c><00:57:17.269><c> is</c><00:57:17.420><c> when</c><00:57:17.779><c> we</c>

00:57:17.920 --> 00:57:17.930 align:start position:0%
practice the only exception is when we
 

00:57:17.930 --> 00:57:19.960 align:start position:0%
practice the only exception is when we
get<00:57:18.049><c> to</c><00:57:18.109><c> loops</c><00:57:18.769><c> which</c><00:57:19.130><c> you</c><00:57:19.279><c> will</c><00:57:19.400><c> see</c><00:57:19.549><c> later</c><00:57:19.730><c> in</c>

00:57:19.960 --> 00:57:19.970 align:start position:0%
get to loops which you will see later in
 

00:57:19.970 --> 00:57:23.470 align:start position:0%
get to loops which you will see later in
this<00:57:20.059><c> course</c><00:57:20.299><c> in</c><00:57:21.039><c> for</c><00:57:22.039><c> loops</c><00:57:22.279><c> we</c><00:57:22.849><c> use</c><00:57:23.000><c> counter</c>

00:57:23.470 --> 00:57:23.480 align:start position:0%
this course in for loops we use counter
 

00:57:23.480 --> 00:57:25.870 align:start position:0%
this course in for loops we use counter
variables<00:57:23.960><c> and</c><00:57:24.200><c> we</c><00:57:24.319><c> call</c><00:57:24.500><c> them</c><00:57:24.680><c> I</c><00:57:24.799><c> or</c><00:57:25.220><c> J</c><00:57:25.519><c> it's</c><00:57:25.759><c> a</c>

00:57:25.870 --> 00:57:25.880 align:start position:0%
variables and we call them I or J it's a
 

00:57:25.880 --> 00:57:28.390 align:start position:0%
variables and we call them I or J it's a
common<00:57:26.240><c> convention</c><00:57:26.710><c> now</c><00:57:27.710><c> here</c><00:57:28.009><c> we</c><00:57:28.130><c> are</c><00:57:28.160><c> just</c>

00:57:28.390 --> 00:57:28.400 align:start position:0%
common convention now here we are just
 

00:57:28.400 --> 00:57:30.640 align:start position:0%
common convention now here we are just
starting<00:57:28.609><c> to</c><00:57:28.759><c> learn</c><00:57:28.880><c> c-sharp</c><00:57:29.660><c> and</c><00:57:29.900><c> it's</c>

00:57:30.640 --> 00:57:30.650 align:start position:0%
starting to learn c-sharp and it's
 

00:57:30.650 --> 00:57:32.140 align:start position:0%
starting to learn c-sharp and it's
really<00:57:30.920><c> impossible</c><00:57:31.220><c> for</c><00:57:31.549><c> me</c><00:57:31.819><c> to</c><00:57:31.970><c> demonstrate</c>

00:57:32.140 --> 00:57:32.150 align:start position:0%
really impossible for me to demonstrate
 

00:57:32.150 --> 00:57:33.430 align:start position:0%
really impossible for me to demonstrate
building<00:57:32.839><c> a</c><00:57:32.930><c> real</c><00:57:33.109><c> world</c><00:57:33.319><c> application</c>

00:57:33.430 --> 00:57:33.440 align:start position:0%
building a real world application
 

00:57:33.440 --> 00:57:35.370 align:start position:0%
building a real world application
because<00:57:34.250><c> you're</c><00:57:34.490><c> just</c><00:57:34.670><c> covering</c><00:57:34.970><c> their</c>

00:57:35.370 --> 00:57:35.380 align:start position:0%
because you're just covering their
 

00:57:35.380 --> 00:57:39.339 align:start position:0%
because you're just covering their
basics<00:57:36.380><c> or</c><00:57:36.559><c> alphabets</c><00:57:37.250><c> I</c><00:57:38.049><c> hope</c><00:57:39.049><c> you</c><00:57:39.140><c> enjoyed</c>

00:57:39.339 --> 00:57:39.349 align:start position:0%
basics or alphabets I hope you enjoyed
 

00:57:39.349 --> 00:57:43.360 align:start position:0%
basics or alphabets I hope you enjoyed
this<00:57:39.440><c> lecture</c><00:57:39.619><c> and</c><00:57:39.950><c> thank</c><00:57:40.220><c> you</c><00:57:40.309><c> for</c><00:57:40.460><c> watching</c>

00:57:43.360 --> 00:57:43.370 align:start position:0%
 
 

00:57:43.370 --> 00:57:47.320 align:start position:0%
 
okay<00:57:44.300><c> we</c><00:57:44.450><c> got</c><00:57:44.570><c> two</c><00:57:44.720><c> operators</c><00:57:45.140><c> in</c><00:57:45.880><c> C</c><00:57:46.880><c> sharp</c><00:57:46.910><c> we</c>

00:57:47.320 --> 00:57:47.330 align:start position:0%
okay we got two operators in C sharp we
 

00:57:47.330 --> 00:57:50.670 align:start position:0%
okay we got two operators in C sharp we
have<00:57:47.510><c> five</c><00:57:47.990><c> types</c><00:57:48.320><c> of</c><00:57:48.500><c> operators</c><00:57:49.420><c> arithmetic</c>

00:57:50.670 --> 00:57:50.680 align:start position:0%
have five types of operators arithmetic
 

00:57:50.680 --> 00:57:54.160 align:start position:0%
have five types of operators arithmetic
comparison<00:57:51.820><c> assignment</c><00:57:52.960><c> logical</c><00:57:53.960><c> and</c>

00:57:54.160 --> 00:57:54.170 align:start position:0%
comparison assignment logical and
 

00:57:54.170 --> 00:57:57.370 align:start position:0%
comparison assignment logical and
bitwise<00:57:55.090><c> let's</c><00:57:56.090><c> take</c><00:57:56.240><c> a</c><00:57:56.270><c> closer</c><00:57:56.570><c> look</c><00:57:56.840><c> at</c><00:57:57.020><c> each</c>

00:57:57.370 --> 00:57:57.380 align:start position:0%
bitwise let's take a closer look at each
 

00:57:57.380 --> 00:58:01.000 align:start position:0%
bitwise let's take a closer look at each
of<00:57:57.440><c> these</c><00:57:57.680><c> operators</c><00:57:59.260><c> we</c><00:58:00.260><c> use</c><00:58:00.410><c> arithmetic</c>

00:58:01.000 --> 00:58:01.010 align:start position:0%
of these operators we use arithmetic
 

00:58:01.010 --> 00:58:03.340 align:start position:0%
of these operators we use arithmetic
operators<00:58:01.550><c> in</c><00:58:01.790><c> computations</c><00:58:02.570><c> where</c><00:58:02.930><c> we</c><00:58:03.290><c> are</c>

00:58:03.340 --> 00:58:03.350 align:start position:0%
operators in computations where we are
 

00:58:03.350 --> 00:58:06.160 align:start position:0%
operators in computations where we are
working<00:58:03.530><c> with</c><00:58:03.800><c> numbers</c><00:58:04.540><c> so</c><00:58:05.540><c> as</c><00:58:05.780><c> you</c><00:58:05.930><c> see</c><00:58:06.080><c> in</c>

00:58:06.160 --> 00:58:06.170 align:start position:0%
working with numbers so as you see in
 

00:58:06.170 --> 00:58:09.210 align:start position:0%
working with numbers so as you see in
this<00:58:06.260><c> slide</c><00:58:06.380><c> we</c><00:58:06.950><c> have</c><00:58:07.190><c> add</c><00:58:07.840><c> subtract</c><00:58:08.840><c> multiply</c>

00:58:09.210 --> 00:58:09.220 align:start position:0%
this slide we have add subtract multiply
 

00:58:09.220 --> 00:58:14.530 align:start position:0%
this slide we have add subtract multiply
divide<00:58:10.220><c> and</c><00:58:11.120><c> remainder</c><00:58:11.900><c> of</c><00:58:11.930><c> division</c><00:58:13.360><c> we</c><00:58:14.360><c> also</c>

00:58:14.530 --> 00:58:14.540 align:start position:0%
divide and remainder of division we also
 

00:58:14.540 --> 00:58:16.540 align:start position:0%
divide and remainder of division we also
have<00:58:14.840><c> two</c><00:58:15.080><c> arithmetic</c><00:58:15.590><c> operators</c><00:58:16.070><c> called</c>

00:58:16.540 --> 00:58:16.550 align:start position:0%
have two arithmetic operators called
 

00:58:16.550 --> 00:58:18.970 align:start position:0%
have two arithmetic operators called
increment<00:58:17.120><c> and</c><00:58:17.300><c> decrement</c><00:58:18.110><c> which</c><00:58:18.770><c> are</c><00:58:18.950><c> a</c>

00:58:18.970 --> 00:58:18.980 align:start position:0%
increment and decrement which are a
 

00:58:18.980 --> 00:58:22.360 align:start position:0%
increment and decrement which are a
shortcut<00:58:19.520><c> for</c><00:58:19.790><c> adding</c><00:58:20.570><c> one</c><00:58:20.870><c> or</c><00:58:21.370><c> subtracting</c>

00:58:22.360 --> 00:58:22.370 align:start position:0%
shortcut for adding one or subtracting
 

00:58:22.370 --> 00:58:25.750 align:start position:0%
shortcut for adding one or subtracting
one<00:58:22.580><c> from</c><00:58:22.610><c> a</c><00:58:23.090><c> variable</c><00:58:23.860><c> so</c><00:58:24.860><c> a</c><00:58:24.890><c> plus</c><00:58:25.310><c> plus</c><00:58:25.550><c> is</c>

00:58:25.750 --> 00:58:25.760 align:start position:0%
one from a variable so a plus plus is
 

00:58:25.760 --> 00:58:30.400 align:start position:0%
one from a variable so a plus plus is
equivalent<00:58:26.720><c> to</c><00:58:26.870><c> a</c><00:58:27.080><c> equals</c><00:58:27.980><c> any</c><00:58:28.280><c> plus</c><00:58:28.640><c> one</c><00:58:29.410><c> now</c>

00:58:30.400 --> 00:58:30.410 align:start position:0%
equivalent to a equals any plus one now
 

00:58:30.410 --> 00:58:32.260 align:start position:0%
equivalent to a equals any plus one now
with<00:58:30.650><c> this</c><00:58:30.770><c> increment</c><00:58:31.280><c> and</c><00:58:31.670><c> decrement</c>

00:58:32.260 --> 00:58:32.270 align:start position:0%
with this increment and decrement
 

00:58:32.270 --> 00:58:33.910 align:start position:0%
with this increment and decrement
operator<00:58:32.720><c> there</c><00:58:33.170><c> are</c><00:58:33.260><c> two</c><00:58:33.470><c> ways</c><00:58:33.680><c> you</c><00:58:33.740><c> can</c>

00:58:33.910 --> 00:58:33.920 align:start position:0%
operator there are two ways you can
 

00:58:33.920 --> 00:58:36.450 align:start position:0%
operator there are two ways you can
apply<00:58:34.160><c> them</c><00:58:34.460><c> you</c><00:58:35.270><c> can</c><00:58:35.420><c> use</c><00:58:35.570><c> them</c><00:58:35.600><c> as</c><00:58:35.900><c> a</c><00:58:35.930><c> postfix</c>

00:58:36.450 --> 00:58:36.460 align:start position:0%
apply them you can use them as a postfix
 

00:58:36.460 --> 00:58:40.720 align:start position:0%
apply them you can use them as a postfix
so<00:58:37.460><c> in</c><00:58:37.550><c> this</c><00:58:37.700><c> example</c><00:58:38.030><c> a</c><00:58:38.360><c> is</c><00:58:39.110><c> 1</c><00:58:39.350><c> and</c><00:58:39.580><c> when</c><00:58:40.580><c> we</c>

00:58:40.720 --> 00:58:40.730 align:start position:0%
so in this example a is 1 and when we
 

00:58:40.730 --> 00:58:43.560 align:start position:0%
so in this example a is 1 and when we
apply<00:58:41.060><c> the</c><00:58:41.480><c> postfix</c><00:58:41.960><c> increment</c><00:58:42.320><c> operator</c>

00:58:43.560 --> 00:58:43.570 align:start position:0%
apply the postfix increment operator
 

00:58:43.570 --> 00:58:47.410 align:start position:0%
apply the postfix increment operator
first<00:58:44.570><c> the</c><00:58:44.840><c> value</c><00:58:45.110><c> of</c><00:58:45.170><c> a</c><00:58:45.320><c> is</c><00:58:45.650><c> assigned</c><00:58:46.400><c> to</c><00:58:46.520><c> B</c><00:58:46.760><c> so</c>

00:58:47.410 --> 00:58:47.420 align:start position:0%
first the value of a is assigned to B so
 

00:58:47.420 --> 00:58:50.260 align:start position:0%
first the value of a is assigned to B so
B<00:58:47.600><c> is</c><00:58:47.660><c> going</c><00:58:47.840><c> to</c><00:58:47.930><c> be</c><00:58:48.020><c> 1</c><00:58:48.230><c> and</c><00:58:48.440><c> then</c><00:58:49.340><c> a</c><00:58:49.670><c> is</c>

00:58:50.260 --> 00:58:50.270 align:start position:0%
B is going to be 1 and then a is
 

00:58:50.270 --> 00:58:53.230 align:start position:0%
B is going to be 1 and then a is
incremented<00:58:50.510><c> by</c><00:58:51.050><c> 1</c><00:58:51.790><c> so</c><00:58:52.790><c> in</c><00:58:53.000><c> this</c><00:58:53.090><c> example</c>

00:58:53.230 --> 00:58:53.240 align:start position:0%
incremented by 1 so in this example
 

00:58:53.240 --> 00:58:56.500 align:start position:0%
incremented by 1 so in this example
after<00:58:53.780><c> the</c><00:58:54.320><c> second</c><00:58:54.710><c> line</c><00:58:54.830><c> is</c><00:58:54.980><c> executed</c><00:58:55.580><c> a</c><00:58:55.730><c> is</c>

00:58:56.500 --> 00:58:56.510 align:start position:0%
after the second line is executed a is
 

00:58:56.510 --> 00:59:00.190 align:start position:0%
after the second line is executed a is
going<00:58:56.690><c> to</c><00:58:56.780><c> be</c><00:58:56.900><c> 2</c><00:58:57.080><c> and</c><00:58:57.350><c> B</c><00:58:57.920><c> is</c><00:58:57.950><c> going</c><00:58:58.190><c> to</c><00:58:58.370><c> be</c><00:58:58.490><c> 1</c><00:58:59.200><c> now</c>

00:59:00.190 --> 00:59:00.200 align:start position:0%
going to be 2 and B is going to be 1 now
 

00:59:00.200 --> 00:59:01.630 align:start position:0%
going to be 2 and B is going to be 1 now
let's<00:59:00.410><c> take</c><00:59:00.530><c> a</c><00:59:00.560><c> look</c><00:59:00.770><c> at</c><00:59:00.980><c> a</c><00:59:01.040><c> different</c><00:59:01.280><c> way</c><00:59:01.610><c> of</c>

00:59:01.630 --> 00:59:01.640 align:start position:0%
let's take a look at a different way of
 

00:59:01.640 --> 00:59:05.130 align:start position:0%
let's take a look at a different way of
applying<00:59:02.510><c> increment</c><00:59:03.050><c> operator</c><00:59:03.440><c> as</c><00:59:03.680><c> a</c><00:59:04.370><c> prefix</c>

00:59:05.130 --> 00:59:05.140 align:start position:0%
applying increment operator as a prefix
 

00:59:05.140 --> 00:59:08.470 align:start position:0%
applying increment operator as a prefix
so<00:59:06.140><c> in</c><00:59:06.290><c> this</c><00:59:06.380><c> example</c><00:59:06.530><c> in</c><00:59:07.130><c> the</c><00:59:08.000><c> second</c><00:59:08.300><c> line</c>

00:59:08.470 --> 00:59:08.480 align:start position:0%
so in this example in the second line
 

00:59:08.480 --> 00:59:12.160 align:start position:0%
so in this example in the second line
first<00:59:09.410><c> a</c><00:59:09.680><c> is</c><00:59:10.100><c> incremented</c><00:59:10.580><c> by</c><00:59:10.790><c> 1</c><00:59:11.120><c> and</c><00:59:11.300><c> then</c>

00:59:12.160 --> 00:59:12.170 align:start position:0%
first a is incremented by 1 and then
 

00:59:12.170 --> 00:59:15.850 align:start position:0%
first a is incremented by 1 and then
it's<00:59:12.530><c> assigned</c><00:59:12.890><c> to</c><00:59:13.100><c> B</c><00:59:13.960><c> so</c><00:59:14.960><c> after</c><00:59:15.380><c> the</c><00:59:15.530><c> second</c>

00:59:15.850 --> 00:59:15.860 align:start position:0%
it's assigned to B so after the second
 

00:59:15.860 --> 00:59:19.360 align:start position:0%
it's assigned to B so after the second
line<00:59:16.010><c> both</c><00:59:16.670><c> a</c><00:59:17.030><c> and</c><00:59:17.060><c> B</c><00:59:17.390><c> are</c><00:59:17.570><c> going</c><00:59:17.660><c> to</c><00:59:17.900><c> be</c><00:59:17.990><c> 2</c><00:59:18.370><c> so</c>

00:59:19.360 --> 00:59:19.370 align:start position:0%
line both a and B are going to be 2 so
 

00:59:19.370 --> 00:59:23.440 align:start position:0%
line both a and B are going to be 2 so
be<00:59:19.880><c> aware</c><00:59:20.060><c> of</c><00:59:20.210><c> this</c><00:59:20.420><c> difference</c><00:59:22.090><c> ok</c><00:59:23.090><c> next</c>

00:59:23.440 --> 00:59:23.450 align:start position:0%
be aware of this difference ok next
 

00:59:23.450 --> 00:59:26.530 align:start position:0%
be aware of this difference ok next
comparison<00:59:24.230><c> operators</c><00:59:24.910><c> so</c><00:59:25.910><c> we</c><00:59:26.030><c> got</c><00:59:26.180><c> equal</c>

00:59:26.530 --> 00:59:26.540 align:start position:0%
comparison operators so we got equal
 

00:59:26.540 --> 00:59:29.610 align:start position:0%
comparison operators so we got equal
which<00:59:26.960><c> is</c><00:59:27.110><c> indicated</c><00:59:27.740><c> by</c><00:59:27.770><c> double</c><00:59:28.580><c> equal</c><00:59:28.730><c> sign</c>

00:59:29.610 --> 00:59:29.620 align:start position:0%
which is indicated by double equal sign
 

00:59:29.620 --> 00:59:33.790 align:start position:0%
which is indicated by double equal sign
not<00:59:30.620><c> equal</c><00:59:31.040><c> greater</c><00:59:31.820><c> than</c><00:59:32.350><c> greater</c><00:59:33.350><c> than</c><00:59:33.500><c> or</c>

00:59:33.790 --> 00:59:33.800 align:start position:0%
not equal greater than greater than or
 

00:59:33.800 --> 00:59:37.210 align:start position:0%
not equal greater than greater than or
equal<00:59:34.190><c> to</c><00:59:34.400><c> less</c><00:59:35.300><c> than</c><00:59:35.360><c> and</c><00:59:35.810><c> less</c><00:59:36.680><c> than</c><00:59:36.890><c> or</c>

00:59:37.210 --> 00:59:37.220 align:start position:0%
equal to less than and less than or
 

00:59:37.220 --> 00:59:39.550 align:start position:0%
equal to less than and less than or
equal<00:59:37.520><c> to</c><00:59:37.670><c> now</c><00:59:38.660><c> what</c><00:59:38.930><c> I</c><00:59:38.960><c> want</c><00:59:39.200><c> you</c><00:59:39.230><c> to</c><00:59:39.350><c> pay</c>

00:59:39.550 --> 00:59:39.560 align:start position:0%
equal to now what I want you to pay
 

00:59:39.560 --> 00:59:41.800 align:start position:0%
equal to now what I want you to pay
attention<00:59:39.860><c> to</c><00:59:40.100><c> in</c><00:59:40.280><c> this</c><00:59:40.400><c> list</c><00:59:40.670><c> is</c><00:59:40.880><c> that</c><00:59:40.940><c> the</c>

00:59:41.800 --> 00:59:41.810 align:start position:0%
attention to in this list is that the
 

00:59:41.810 --> 00:59:44.230 align:start position:0%
attention to in this list is that the
testing<00:59:42.260><c> for</c><00:59:42.380><c> equality</c><00:59:42.440><c> is</c><00:59:43.130><c> accomplished</c><00:59:44.120><c> by</c>

00:59:44.230 --> 00:59:44.240 align:start position:0%
testing for equality is accomplished by
 

00:59:44.240 --> 00:59:47.260 align:start position:0%
testing for equality is accomplished by
double<00:59:45.170><c> equal</c><00:59:45.740><c> sign</c><00:59:46.010><c> and</c><00:59:46.190><c> that's</c><00:59:46.880><c> different</c>

00:59:47.260 --> 00:59:47.270 align:start position:0%
double equal sign and that's different
 

00:59:47.270 --> 00:59:49.660 align:start position:0%
double equal sign and that's different
from<00:59:47.540><c> a</c><00:59:47.720><c> single</c><00:59:48.320><c> equal</c><00:59:48.620><c> which</c><00:59:49.100><c> is</c><00:59:49.280><c> the</c>

00:59:49.660 --> 00:59:49.670 align:start position:0%
from a single equal which is the
 

00:59:49.670 --> 00:59:52.900 align:start position:0%
from a single equal which is the
assignment<00:59:49.850><c> operator</c><00:59:51.100><c> next</c><00:59:52.100><c> assignment</c>

00:59:52.900 --> 00:59:52.910 align:start position:0%
assignment operator next assignment
 

00:59:52.910 --> 00:59:55.840 align:start position:0%
assignment operator next assignment
operators<00:59:53.710><c> so</c><00:59:54.710><c> the</c><00:59:54.830><c> most</c><00:59:54.980><c> commonly</c><00:59:55.370><c> used</c><00:59:55.460><c> is</c>

00:59:55.840 --> 00:59:55.850 align:start position:0%
operators so the most commonly used is
 

00:59:55.850 --> 00:59:57.160 align:start position:0%
operators so the most commonly used is
the<00:59:56.270><c> one</c><00:59:56.450><c> with</c><00:59:56.810><c> a</c><00:59:56.840><c> seen</c>

00:59:57.160 --> 00:59:57.170 align:start position:0%
the one with a seen
 

00:59:57.170 --> 00:59:59.829 align:start position:0%
the one with a seen
the<00:59:57.260><c> equal</c><00:59:57.559><c> sign</c><00:59:57.770><c> so</c><00:59:58.010><c> here</c><00:59:58.880><c> we</c><00:59:59.030><c> set</c><00:59:59.210><c> a</c><00:59:59.359><c> 2/1</c>

00:59:59.829 --> 00:59:59.839 align:start position:0%
the equal sign so here we set a 2/1
 

00:59:59.839 --> 01:00:03.190 align:start position:0%
the equal sign so here we set a 2/1
pretty<01:00:00.619><c> basic</c><01:00:01.180><c> now</c><01:00:02.180><c> look</c><01:00:02.450><c> at</c><01:00:02.510><c> the</c><01:00:02.630><c> next</c><01:00:02.990><c> four</c>

01:00:03.190 --> 01:00:03.200 align:start position:0%
pretty basic now look at the next four
 

01:00:03.200 --> 01:00:05.680 align:start position:0%
pretty basic now look at the next four
types<01:00:03.530><c> of</c><01:00:03.740><c> assignment</c><01:00:04.220><c> operators</c><01:00:04.700><c> addition</c>

01:00:05.680 --> 01:00:05.690 align:start position:0%
types of assignment operators addition
 

01:00:05.690 --> 01:00:07.829 align:start position:0%
types of assignment operators addition
assignment<01:00:06.280><c> subtraction</c><01:00:07.280><c> assignment</c>

01:00:07.829 --> 01:00:07.839 align:start position:0%
assignment subtraction assignment
 

01:00:07.839 --> 01:00:10.210 align:start position:0%
assignment subtraction assignment
multiplication<01:00:08.839><c> assignment</c><01:00:09.319><c> and</c><01:00:09.440><c> division</c>

01:00:10.210 --> 01:00:10.220 align:start position:0%
multiplication assignment and division
 

01:00:10.220 --> 01:00:13.690 align:start position:0%
multiplication assignment and division
assignment<01:00:11.049><c> let's</c><01:00:12.049><c> see</c><01:00:12.200><c> how</c><01:00:12.290><c> they</c><01:00:12.470><c> work</c><01:00:12.700><c> for</c>

01:00:13.690 --> 01:00:13.700 align:start position:0%
assignment let's see how they work for
 

01:00:13.700 --> 01:00:17.410 align:start position:0%
assignment let's see how they work for
example<01:00:14.059><c> addition</c><01:00:14.540><c> assignment</c><01:00:15.020><c> a</c><01:00:15.940><c> plus</c><01:00:16.940><c> equal</c>

01:00:17.410 --> 01:00:17.420 align:start position:0%
example addition assignment a plus equal
 

01:00:17.420 --> 01:00:21.520 align:start position:0%
example addition assignment a plus equal
3<01:00:17.750><c> means</c><01:00:18.260><c> add</c><01:00:18.549><c> 3</c><01:00:19.549><c> to</c><01:00:19.819><c> a</c><01:00:19.849><c> so</c><01:00:20.780><c> it's</c><01:00:20.900><c> equivalent</c><01:00:21.440><c> to</c>

01:00:21.520 --> 01:00:21.530 align:start position:0%
3 means add 3 to a so it's equivalent to
 

01:00:21.530 --> 01:00:25.480 align:start position:0%
3 means add 3 to a so it's equivalent to
writing<01:00:21.650><c> a</c><01:00:22.010><c> equals</c><01:00:22.970><c> a</c><01:00:23.210><c> plus</c><01:00:23.630><c> 3</c><01:00:24.049><c> and</c><01:00:24.260><c> the</c><01:00:25.250><c> same</c>

01:00:25.480 --> 01:00:25.490 align:start position:0%
writing a equals a plus 3 and the same
 

01:00:25.490 --> 01:00:27.970 align:start position:0%
writing a equals a plus 3 and the same
rule<01:00:25.670><c> applies</c><01:00:26.000><c> to</c><01:00:26.270><c> other</c><01:00:26.750><c> 4</c><01:00:27.170><c> assignment</c>

01:00:27.970 --> 01:00:27.980 align:start position:0%
rule applies to other 4 assignment
 

01:00:27.980 --> 01:00:32.380 align:start position:0%
rule applies to other 4 assignment
operators<01:00:30.250><c> logical</c><01:00:31.250><c> operators</c><01:00:31.700><c> are</c><01:00:31.880><c> used</c><01:00:32.150><c> in</c>

01:00:32.380 --> 01:00:32.390 align:start position:0%
operators logical operators are used in
 

01:00:32.390 --> 01:00:34.780 align:start position:0%
operators logical operators are used in
boolean<01:00:32.869><c> expressions</c><01:00:33.470><c> which</c><01:00:34.160><c> are</c><01:00:34.309><c> often</c><01:00:34.460><c> used</c>

01:00:34.780 --> 01:00:34.790 align:start position:0%
boolean expressions which are often used
 

01:00:34.790 --> 01:00:37.510 align:start position:0%
boolean expressions which are often used
in<01:00:35.000><c> conditional</c><01:00:35.809><c> statements</c><01:00:36.319><c> will</c><01:00:37.220><c> get</c><01:00:37.400><c> two</c>

01:00:37.510 --> 01:00:37.520 align:start position:0%
in conditional statements will get two
 

01:00:37.520 --> 01:00:39.190 align:start position:0%
in conditional statements will get two
conditional<01:00:37.940><c> statements</c><01:00:38.510><c> later</c><01:00:38.900><c> in</c><01:00:39.079><c> this</c>

01:00:39.190 --> 01:00:39.200 align:start position:0%
conditional statements later in this
 

01:00:39.200 --> 01:00:42.099 align:start position:0%
conditional statements later in this
course<01:00:39.549><c> so</c><01:00:40.549><c> a</c><01:00:40.579><c> real-world</c><01:00:41.030><c> example</c><01:00:41.329><c> is</c><01:00:41.809><c> where</c>

01:00:42.099 --> 01:00:42.109 align:start position:0%
course so a real-world example is where
 

01:00:42.109 --> 01:00:44.230 align:start position:0%
course so a real-world example is where
you<01:00:42.470><c> have</c><01:00:42.619><c> a</c><01:00:42.650><c> condition</c><01:00:43.190><c> and</c><01:00:43.309><c> you</c><01:00:44.030><c> want</c><01:00:44.180><c> to</c>

01:00:44.230 --> 01:00:44.240 align:start position:0%
you have a condition and you want to
 

01:00:44.240 --> 01:00:46.870 align:start position:0%
you have a condition and you want to
make<01:00:44.359><c> sure</c><01:00:44.569><c> that</c><01:00:45.049><c> condition</c><01:00:45.710><c> and</c><01:00:45.920><c> another</c>

01:00:46.870 --> 01:00:46.880 align:start position:0%
make sure that condition and another
 

01:00:46.880 --> 01:00:49.630 align:start position:0%
make sure that condition and another
condition<01:00:47.180><c> both</c><01:00:47.780><c> are</c><01:00:48.109><c> true</c><01:00:48.380><c> or</c><01:00:48.619><c> maybe</c><01:00:49.250><c> one</c><01:00:49.520><c> of</c>

01:00:49.630 --> 01:00:49.640 align:start position:0%
condition both are true or maybe one of
 

01:00:49.640 --> 01:00:52.120 align:start position:0%
condition both are true or maybe one of
them<01:00:49.819><c> is</c><01:00:49.940><c> true</c><01:00:50.260><c> so</c><01:00:51.260><c> that's</c><01:00:51.440><c> where</c><01:00:51.619><c> you</c><01:00:51.740><c> use</c><01:00:51.770><c> a</c>

01:00:52.120 --> 01:00:52.130 align:start position:0%
them is true so that's where you use a
 

01:00:52.130 --> 01:00:55.960 align:start position:0%
them is true so that's where you use a
logical<01:00:52.790><c> operator</c><01:00:53.150><c> in</c><01:00:53.829><c> c-sharp</c><01:00:54.829><c> the</c><01:00:55.520><c> logical</c>

01:00:55.960 --> 01:00:55.970 align:start position:0%
logical operator in c-sharp the logical
 

01:00:55.970 --> 01:00:58.750 align:start position:0%
logical operator in c-sharp the logical
end<01:00:56.119><c> is</c><01:00:56.390><c> indicated</c><01:00:57.049><c> by</c><01:00:57.170><c> double</c><01:00:57.980><c> ampersand</c><01:00:58.460><c> and</c>

01:00:58.750 --> 01:00:58.760 align:start position:0%
end is indicated by double ampersand and
 

01:00:58.760 --> 01:01:01.930 align:start position:0%
end is indicated by double ampersand and
the<01:00:59.299><c> logical</c><01:00:59.660><c> or</c><01:00:59.869><c> is</c><01:01:00.109><c> implemented</c><01:01:01.099><c> by</c><01:01:01.250><c> double</c>

01:01:01.930 --> 01:01:01.940 align:start position:0%
the logical or is implemented by double
 

01:01:01.940 --> 01:01:04.809 align:start position:0%
the logical or is implemented by double
vertical<01:01:02.119><c> line</c><01:01:02.950><c> we</c><01:01:03.950><c> also</c><01:01:04.099><c> have</c><01:01:04.430><c> the</c><01:01:04.640><c> not</c>

01:01:04.809 --> 01:01:04.819 align:start position:0%
vertical line we also have the not
 

01:01:04.819 --> 01:01:07.000 align:start position:0%
vertical line we also have the not
operator<01:01:05.270><c> which</c><01:01:05.839><c> is</c><01:01:05.960><c> indicated</c><01:01:06.559><c> by</c><01:01:06.710><c> an</c>

01:01:07.000 --> 01:01:07.010 align:start position:0%
operator which is indicated by an
 

01:01:07.010 --> 01:01:10.270 align:start position:0%
operator which is indicated by an
exclamation<01:01:07.190><c> mark</c><01:01:07.609><c> and</c><01:01:08.920><c> finally</c><01:01:09.920><c> in</c><01:01:09.980><c> here</c>

01:01:10.270 --> 01:01:10.280 align:start position:0%
exclamation mark and finally in here
 

01:01:10.280 --> 01:01:13.180 align:start position:0%
exclamation mark and finally in here
we've<01:01:10.460><c> got</c><01:01:10.640><c> the</c><01:01:10.880><c> bitwise</c><01:01:11.119><c> operators</c><01:01:12.190><c> bitwise</c>

01:01:13.180 --> 01:01:13.190 align:start position:0%
we've got the bitwise operators bitwise
 

01:01:13.190 --> 01:01:15.160 align:start position:0%
we've got the bitwise operators bitwise
operators<01:01:13.760><c> are</c><01:01:13.970><c> often</c><01:01:14.299><c> used</c><01:01:14.540><c> in</c><01:01:14.750><c> low-level</c>

01:01:15.160 --> 01:01:15.170 align:start position:0%
operators are often used in low-level
 

01:01:15.170 --> 01:01:17.289 align:start position:0%
operators are often used in low-level
programming<01:01:15.640><c> like</c><01:01:16.640><c> when</c><01:01:16.849><c> working</c><01:01:17.030><c> with</c>

01:01:17.289 --> 01:01:17.299 align:start position:0%
programming like when working with
 

01:01:17.299 --> 01:01:21.660 align:start position:0%
programming like when working with
windows<01:01:17.690><c> api</c><01:01:17.990><c> or</c><01:01:18.349><c> in</c><01:01:18.950><c> sockets</c><01:01:19.460><c> or</c><01:01:19.780><c> encryption</c>

01:01:21.660 --> 01:01:21.670 align:start position:0%
windows api or in sockets or encryption
 

01:01:21.670 --> 01:01:24.130 align:start position:0%
windows api or in sockets or encryption
explanation<01:01:22.670><c> of</c><01:01:22.760><c> these</c><01:01:22.940><c> is</c><01:01:23.150><c> beyond</c><01:01:23.780><c> the</c><01:01:23.930><c> scope</c>

01:01:24.130 --> 01:01:24.140 align:start position:0%
explanation of these is beyond the scope
 

01:01:24.140 --> 01:01:26.230 align:start position:0%
explanation of these is beyond the scope
of<01:01:24.260><c> this</c><01:01:24.380><c> course</c><01:01:24.619><c> but</c><01:01:25.400><c> if</c><01:01:25.549><c> you</c><01:01:25.670><c> are</c><01:01:25.730><c> interested</c>

01:01:26.230 --> 01:01:26.240 align:start position:0%
of this course but if you are interested
 

01:01:26.240 --> 01:01:28.089 align:start position:0%
of this course but if you are interested
let<01:01:26.390><c> me</c><01:01:26.510><c> know</c><01:01:26.630><c> and</c><01:01:26.900><c> I</c><01:01:27.020><c> write</c><01:01:27.260><c> a</c><01:01:27.290><c> blog</c><01:01:27.559><c> post</c><01:01:27.680><c> for</c>

01:01:28.089 --> 01:01:28.099 align:start position:0%
let me know and I write a blog post for
 

01:01:28.099 --> 01:01:30.160 align:start position:0%
let me know and I write a blog post for
you<01:01:28.220><c> now</c><01:01:29.000><c> what</c><01:01:29.240><c> I</c><01:01:29.270><c> want</c><01:01:29.480><c> you</c><01:01:29.540><c> to</c><01:01:29.630><c> take</c><01:01:29.930><c> away</c>

01:01:30.160 --> 01:01:30.170 align:start position:0%
you now what I want you to take away
 

01:01:30.170 --> 01:01:32.250 align:start position:0%
you now what I want you to take away
here<01:01:30.530><c> is</c><01:01:30.650><c> that</c><01:01:31.099><c> the</c><01:01:31.250><c> bitwise</c><01:01:31.460><c> End</c><01:01:31.970><c> is</c>

01:01:32.250 --> 01:01:32.260 align:start position:0%
here is that the bitwise End is
 

01:01:32.260 --> 01:01:35.500 align:start position:0%
here is that the bitwise End is
indicated<01:01:33.260><c> by</c><01:01:33.410><c> a</c><01:01:33.619><c> single</c><01:01:34.160><c> ampersand</c><01:01:34.730><c> whereas</c>

01:01:35.500 --> 01:01:35.510 align:start position:0%
indicated by a single ampersand whereas
 

01:01:35.510 --> 01:01:37.150 align:start position:0%
indicated by a single ampersand whereas
the<01:01:35.660><c> logical</c><01:01:36.109><c> end</c><01:01:36.290><c> which</c><01:01:36.650><c> we</c><01:01:36.829><c> use</c><01:01:36.950><c> in</c>

01:01:37.150 --> 01:01:37.160 align:start position:0%
the logical end which we use in
 

01:01:37.160 --> 01:01:39.520 align:start position:0%
the logical end which we use in
conditional<01:01:37.670><c> statements</c><01:01:38.180><c> is</c><01:01:38.380><c> indicated</c><01:01:39.380><c> by</c>

01:01:39.520 --> 01:01:39.530 align:start position:0%
conditional statements is indicated by
 

01:01:39.530 --> 01:01:42.789 align:start position:0%
conditional statements is indicated by
double<01:01:40.220><c> ampersand</c><01:01:40.690><c> same</c><01:01:41.690><c> for</c><01:01:41.900><c> bitwise</c><01:01:42.260><c> or</c><01:01:42.530><c> and</c>

01:01:42.789 --> 01:01:42.799 align:start position:0%
double ampersand same for bitwise or and
 

01:01:42.799 --> 01:01:46.960 align:start position:0%
double ampersand same for bitwise or and
logical<01:01:43.700><c> or</c><01:01:43.880><c> so</c><01:01:44.750><c> remember</c><01:01:45.200><c> the</c><01:01:45.319><c> difference</c><01:01:45.970><c> ok</c>

01:01:46.960 --> 01:01:46.970 align:start position:0%
logical or so remember the difference ok
 

01:01:46.970 --> 01:01:49.000 align:start position:0%
logical or so remember the difference ok
enough<01:01:47.270><c> theory</c><01:01:47.599><c> let's</c><01:01:48.079><c> flip</c><01:01:48.349><c> over</c><01:01:48.470><c> to</c><01:01:48.829><c> visual</c>

01:01:49.000 --> 01:01:49.010 align:start position:0%
enough theory let's flip over to visual
 

01:01:49.010 --> 01:01:51.069 align:start position:0%
enough theory let's flip over to visual
studio<01:01:49.309><c> and</c><01:01:49.700><c> see</c><01:01:50.150><c> all</c><01:01:50.299><c> these</c><01:01:50.480><c> concepts</c><01:01:50.900><c> in</c>

01:01:51.069 --> 01:01:51.079 align:start position:0%
studio and see all these concepts in
 

01:01:51.079 --> 01:01:54.660 align:start position:0%
studio and see all these concepts in
action

01:01:54.660 --> 01:01:54.670 align:start position:0%
 
 

01:01:54.670 --> 01:01:56.160 align:start position:0%
 
okay<01:01:55.180><c> let's</c><01:01:55.480><c> start</c><01:01:55.690><c> with</c><01:01:55.750><c> the</c><01:01:55.930><c> arithmetic</c>

01:01:56.160 --> 01:01:56.170 align:start position:0%
okay let's start with the arithmetic
 

01:01:56.170 --> 01:01:59.130 align:start position:0%
okay let's start with the arithmetic
operators<01:01:56.589><c> first</c><01:01:57.599><c> so</c><01:01:58.599><c> I</c><01:01:58.660><c> define</c><01:01:58.839><c> two</c>

01:01:59.130 --> 01:01:59.140 align:start position:0%
operators first so I define two
 

01:01:59.140 --> 01:02:05.759 align:start position:0%
operators first so I define two
variables<01:01:59.650><c> a</c><01:01:59.940><c> equals</c><01:02:00.940><c> 10</c><01:02:01.890><c> B</c><01:02:02.890><c> equals</c><01:02:03.430><c> 3</c><01:02:04.769><c> let's</c>

01:02:05.759 --> 01:02:05.769 align:start position:0%
variables a equals 10 B equals 3 let's
 

01:02:05.769 --> 01:02:07.140 align:start position:0%
variables a equals 10 B equals 3 let's
add<01:02:05.920><c> them</c><01:02:06.099><c> together</c><01:02:06.250><c> and</c><01:02:06.519><c> display</c><01:02:07.000><c> the</c>

01:02:07.140 --> 01:02:07.150 align:start position:0%
add them together and display the
 

01:02:07.150 --> 01:02:12.929 align:start position:0%
add them together and display the
results<01:02:07.569><c> in</c><01:02:07.690><c> the</c><01:02:07.779><c> console</c>

01:02:12.929 --> 01:02:12.939 align:start position:0%
 
 

01:02:12.939 --> 01:02:16.269 align:start position:0%
 
that's<01:02:13.939><c> pretty</c><01:02:14.119><c> easy</c><01:02:14.239><c> right</c><01:02:15.130><c> run</c><01:02:16.130><c> the</c>

01:02:16.269 --> 01:02:16.279 align:start position:0%
that's pretty easy right run the
 

01:02:16.279 --> 01:02:20.499 align:start position:0%
that's pretty easy right run the
application<01:02:16.839><c> so</c><01:02:17.839><c> the</c><01:02:17.959><c> result</c><01:02:18.319><c> is</c><01:02:18.439><c> 13</c><01:02:19.509><c> now</c>

01:02:20.499 --> 01:02:20.509 align:start position:0%
application so the result is 13 now
 

01:02:20.509 --> 01:02:22.870 align:start position:0%
application so the result is 13 now
let's<01:02:20.779><c> take</c><01:02:20.900><c> a</c><01:02:20.929><c> look</c><01:02:21.140><c> at</c><01:02:21.259><c> division</c><01:02:21.849><c> so</c><01:02:22.849><c> I</c>

01:02:22.870 --> 01:02:22.880 align:start position:0%
let's take a look at division so I
 

01:02:22.880 --> 01:02:26.750 align:start position:0%
let's take a look at division so I
replace<01:02:23.359><c> the</c><01:02:23.569><c> ad</c><01:02:23.809><c> operator</c><01:02:24.499><c> with</c><01:02:24.979><c> division</c>

01:02:26.750 --> 01:02:26.760 align:start position:0%
replace the ad operator with division
 

01:02:26.760 --> 01:02:28.980 align:start position:0%
replace the ad operator with division
you

01:02:28.980 --> 01:02:28.990 align:start position:0%
 
 

01:02:28.990 --> 01:02:33.150 align:start position:0%
 
the<01:02:29.650><c> result</c><01:02:30.040><c> is</c><01:02:30.250><c> three</c><01:02:31.589><c> the</c><01:02:32.589><c> interesting</c>

01:02:33.150 --> 01:02:33.160 align:start position:0%
the result is three the interesting
 

01:02:33.160 --> 01:02:36.900 align:start position:0%
the result is three the interesting
thing<01:02:33.310><c> here</c><01:02:33.490><c> is</c><01:02:33.730><c> because</c><01:02:34.359><c> both</c><01:02:34.930><c> a</c><01:02:35.230><c> and</c><01:02:35.859><c> B</c><01:02:36.640><c> are</c>

01:02:36.900 --> 01:02:36.910 align:start position:0%
thing here is because both a and B are
 

01:02:36.910 --> 01:02:40.800 align:start position:0%
thing here is because both a and B are
integers<01:02:37.859><c> the</c><01:02:38.859><c> result</c><01:02:39.280><c> of</c><01:02:39.430><c> the</c><01:02:39.520><c> division</c><01:02:39.810><c> ends</c>

01:02:40.800 --> 01:02:40.810 align:start position:0%
integers the result of the division ends
 

01:02:40.810 --> 01:02:43.170 align:start position:0%
integers the result of the division ends
up<01:02:40.930><c> being</c><01:02:41.140><c> an</c><01:02:41.349><c> integer</c><01:02:41.950><c> if</c><01:02:42.790><c> you</c><01:02:42.970><c> like</c><01:02:43.150><c> a</c>

01:02:43.170 --> 01:02:43.180 align:start position:0%
up being an integer if you like a
 

01:02:43.180 --> 01:02:45.060 align:start position:0%
up being an integer if you like a
floating-point<01:02:43.780><c> number</c><01:02:44.260><c> as</c><01:02:44.440><c> the</c><01:02:44.619><c> result</c><01:02:44.950><c> of</c>

01:02:45.060 --> 01:02:45.070 align:start position:0%
floating-point number as the result of
 

01:02:45.070 --> 01:02:47.430 align:start position:0%
floating-point number as the result of
the<01:02:45.160><c> division</c><01:02:45.640><c> you</c><01:02:45.820><c> need</c><01:02:46.180><c> to</c><01:02:46.300><c> cast</c><01:02:46.540><c> both</c><01:02:47.140><c> these</c>

01:02:47.430 --> 01:02:47.440 align:start position:0%
the division you need to cast both these
 

01:02:47.440 --> 01:02:55.990 align:start position:0%
the division you need to cast both these
numbers<01:02:47.500><c> to</c><01:02:48.310><c> a</c><01:02:48.369><c> float</c><01:02:48.900><c> so</c><01:02:53.400><c> like</c><01:02:54.400><c> this</c>

01:02:55.990 --> 01:02:56.000 align:start position:0%
numbers to a float so like this
 

01:02:56.000 --> 01:03:00.040 align:start position:0%
numbers to a float so like this
now<01:02:56.330><c> if</c><01:02:56.390><c> you're</c><01:02:56.600><c> on</c><01:02:56.720><c> the</c><01:02:56.840><c> application</c>

01:03:00.040 --> 01:03:00.050 align:start position:0%
 
 

01:03:00.050 --> 01:03:04.809 align:start position:0%
 
the<01:03:00.380><c> result</c><01:03:00.770><c> is</c><01:03:00.980><c> a</c><01:03:01.010><c> floating-point</c><01:03:01.520><c> number</c>

01:03:04.809 --> 01:03:04.819 align:start position:0%
 
 

01:03:04.819 --> 01:03:10.700 align:start position:0%
 
now<01:03:05.819><c> let's</c><01:03:06.059><c> look</c><01:03:06.180><c> at</c><01:03:06.299><c> a</c><01:03:06.359><c> more</c><01:03:06.539><c> tricky</c><01:03:06.869><c> example</c>

01:03:10.700 --> 01:03:10.710 align:start position:0%
 
 

01:03:10.710 --> 01:03:16.579 align:start position:0%
 
let's<01:03:11.310><c> say</c><01:03:11.520><c> C's</c><01:03:11.849><c> 3</c><01:03:12.800><c> B's</c><01:03:13.800><c> 2</c><01:03:14.190><c> and</c><01:03:14.460><c> a</c><01:03:14.790><c> is</c><01:03:14.820><c> 1</c><01:03:15.210><c> I</c><01:03:15.589><c> want</c>

01:03:16.579 --> 01:03:16.589 align:start position:0%
let's say C's 3 B's 2 and a is 1 I want
 

01:03:16.589 --> 01:03:19.070 align:start position:0%
let's say C's 3 B's 2 and a is 1 I want
to<01:03:16.710><c> show</c><01:03:16.890><c> you</c><01:03:16.950><c> the</c><01:03:17.640><c> concept</c><01:03:18.119><c> of</c><01:03:18.270><c> operator</c>

01:03:19.070 --> 01:03:19.080 align:start position:0%
to show you the concept of operator
 

01:03:19.080 --> 01:03:22.410 align:start position:0%
to show you the concept of operator
precedence

01:03:22.410 --> 01:03:22.420 align:start position:0%
 
 

01:03:22.420 --> 01:03:27.809 align:start position:0%
 
so<01:03:22.779><c> if</c><01:03:22.930><c> I</c><01:03:23.049><c> type</c><01:03:23.289><c> a</c><01:03:23.559><c> plus</c><01:03:24.220><c> B</c><01:03:24.579><c> times</c><01:03:25.240><c> C</c><01:03:26.760><c> what</c><01:03:27.760><c> do</c>

01:03:27.809 --> 01:03:27.819 align:start position:0%
so if I type a plus B times C what do
 

01:03:27.819 --> 01:03:30.660 align:start position:0%
so if I type a plus B times C what do
you<01:03:27.880><c> expect</c><01:03:28.180><c> the</c><01:03:28.359><c> result</c><01:03:28.720><c> to</c><01:03:28.779><c> be</c><01:03:29.579><c> from</c><01:03:30.579><c> a</c>

01:03:30.660 --> 01:03:30.670 align:start position:0%
you expect the result to be from a
 

01:03:30.670 --> 01:03:33.420 align:start position:0%
you expect the result to be from a
mathematical<01:03:30.880><c> perspective</c><01:03:32.130><c> B</c><01:03:33.130><c> should</c><01:03:33.279><c> be</c>

01:03:33.420 --> 01:03:33.430 align:start position:0%
mathematical perspective B should be
 

01:03:33.430 --> 01:03:36.120 align:start position:0%
mathematical perspective B should be
multiplied<01:03:34.059><c> by</c><01:03:34.299><c> C</c><01:03:34.569><c> first</c><01:03:34.839><c> which</c><01:03:35.500><c> means</c><01:03:35.529><c> two</c>

01:03:36.120 --> 01:03:36.130 align:start position:0%
multiplied by C first which means two
 

01:03:36.130 --> 01:03:38.640 align:start position:0%
multiplied by C first which means two
times<01:03:36.369><c> three</c><01:03:36.789><c> equals</c><01:03:36.819><c> six</c><01:03:37.539><c> and</c><01:03:37.839><c> then</c><01:03:38.440><c> it</c>

01:03:38.640 --> 01:03:38.650 align:start position:0%
times three equals six and then it
 

01:03:38.650 --> 01:03:41.069 align:start position:0%
times three equals six and then it
should<01:03:39.220><c> be</c><01:03:39.369><c> added</c><01:03:39.609><c> to</c><01:03:39.640><c> one</c><01:03:39.760><c> so</c><01:03:40.630><c> the</c><01:03:40.750><c> result</c>

01:03:41.069 --> 01:03:41.079 align:start position:0%
should be added to one so the result
 

01:03:41.079 --> 01:03:43.410 align:start position:0%
should be added to one so the result
should<01:03:41.349><c> be</c><01:03:41.470><c> seven</c><01:03:42.150><c> let's</c><01:03:43.150><c> run</c><01:03:43.299><c> the</c>

01:03:43.410 --> 01:03:43.420 align:start position:0%
should be seven let's run the
 

01:03:43.420 --> 01:03:46.490 align:start position:0%
should be seven let's run the
application

01:03:46.490 --> 01:03:46.500 align:start position:0%
 
 

01:03:46.500 --> 01:03:49.040 align:start position:0%
 
so<01:03:46.859><c> c-sharp</c><01:03:47.340><c> behaves</c><01:03:47.730><c> exactly</c><01:03:48.000><c> as</c><01:03:48.660><c> what</c><01:03:48.900><c> we</c>

01:03:49.040 --> 01:03:49.050 align:start position:0%
so c-sharp behaves exactly as what we
 

01:03:49.050 --> 01:03:52.520 align:start position:0%
so c-sharp behaves exactly as what we
expected<01:03:49.910><c> so</c><01:03:50.910><c> multiply</c><01:03:51.480><c> or</c><01:03:51.810><c> division</c>

01:03:52.520 --> 01:03:52.530 align:start position:0%
expected so multiply or division
 

01:03:52.530 --> 01:03:54.620 align:start position:0%
expected so multiply or division
operators<01:03:53.070><c> have</c><01:03:53.280><c> higher</c><01:03:53.670><c> precedence</c><01:03:54.030><c> than</c>

01:03:54.620 --> 01:03:54.630 align:start position:0%
operators have higher precedence than
 

01:03:54.630 --> 01:03:57.560 align:start position:0%
operators have higher precedence than
add<01:03:54.990><c> or</c><01:03:55.200><c> subtract</c><01:03:55.970><c> if</c><01:03:56.970><c> you'd</c><01:03:57.180><c> like</c><01:03:57.300><c> to</c><01:03:57.420><c> change</c>

01:03:57.560 --> 01:03:57.570 align:start position:0%
add or subtract if you'd like to change
 

01:03:57.570 --> 01:03:59.480 align:start position:0%
add or subtract if you'd like to change
the<01:03:57.720><c> precedence</c><01:03:58.320><c> you</c><01:03:58.619><c> can</c><01:03:58.770><c> do</c><01:03:58.920><c> so</c><01:03:59.099><c> by</c><01:03:59.280><c> using</c>

01:03:59.480 --> 01:03:59.490 align:start position:0%
the precedence you can do so by using
 

01:03:59.490 --> 01:04:01.790 align:start position:0%
the precedence you can do so by using
parentheses<01:03:59.840><c> so</c><01:04:00.840><c> in</c><01:04:00.930><c> this</c><01:04:01.020><c> case</c><01:04:01.230><c> if</c><01:04:01.470><c> you</c><01:04:01.650><c> would</c>

01:04:01.790 --> 01:04:01.800 align:start position:0%
parentheses so in this case if you would
 

01:04:01.800 --> 01:04:05.240 align:start position:0%
parentheses so in this case if you would
like<01:04:01.950><c> to</c><01:04:01.980><c> have</c><01:04:02.760><c> a</c><01:04:03.090><c> and</c><01:04:03.570><c> B</c><01:04:04.099><c> added</c><01:04:05.099><c> together</c>

01:04:05.240 --> 01:04:05.250 align:start position:0%
like to have a and B added together
 

01:04:05.250 --> 01:04:08.330 align:start position:0%
like to have a and B added together
first<01:04:05.760><c> and</c><01:04:06.030><c> then</c><01:04:06.810><c> multiply</c><01:04:07.290><c> it</c><01:04:07.320><c> by</c><01:04:07.530><c> C</c><01:04:07.830><c> this</c><01:04:08.160><c> is</c>

01:04:08.330 --> 01:04:08.340 align:start position:0%
first and then multiply it by C this is
 

01:04:08.340 --> 01:04:10.430 align:start position:0%
first and then multiply it by C this is
how<01:04:08.490><c> we</c><01:04:08.550><c> would</c><01:04:08.760><c> achieve</c><01:04:08.880><c> that</c><01:04:09.270><c> in</c><01:04:09.420><c> this</c><01:04:10.230><c> case</c>

01:04:10.430 --> 01:04:10.440 align:start position:0%
how we would achieve that in this case
 

01:04:10.440 --> 01:04:14.720 align:start position:0%
how we would achieve that in this case
the<01:04:10.650><c> result</c><01:04:11.010><c> will</c><01:04:11.430><c> be</c><01:04:11.609><c> 9</c>

01:04:14.720 --> 01:04:14.730 align:start position:0%
 
 

01:04:14.730 --> 01:04:17.610 align:start position:0%
 
there<01:04:15.210><c> you</c><01:04:15.300><c> go</c>

01:04:17.610 --> 01:04:17.620 align:start position:0%
 
 

01:04:17.620 --> 01:04:20.050 align:start position:0%
 
okay<01:04:18.620><c> now</c><01:04:18.800><c> let's</c><01:04:19.010><c> take</c><01:04:19.160><c> a</c><01:04:19.190><c> look</c><01:04:19.430><c> at</c><01:04:19.550><c> comparison</c>

01:04:20.050 --> 01:04:20.060 align:start position:0%
okay now let's take a look at comparison
 

01:04:20.060 --> 01:04:21.860 align:start position:0%
okay now let's take a look at comparison
operators

01:04:21.860 --> 01:04:21.870 align:start position:0%
operators
 

01:04:21.870 --> 01:04:24.850 align:start position:0%
operators
so<01:04:22.020><c> let's</c><01:04:22.350><c> get</c><01:04:22.470><c> rid</c><01:04:22.650><c> of</c><01:04:22.710><c> C</c><01:04:22.980><c> here</c><01:04:23.280><c> and</c><01:04:23.690><c> instead</c>

01:04:24.850 --> 01:04:24.860 align:start position:0%
so let's get rid of C here and instead
 

01:04:24.860 --> 01:04:30.050 align:start position:0%
so let's get rid of C here and instead
see<01:04:25.860><c> if</c><01:04:26.010><c> a</c><01:04:26.220><c> is</c><01:04:26.640><c> greater</c><01:04:26.760><c> than</c><01:04:27.290><c> B</c><01:04:28.730><c> very</c><01:04:29.730><c> simple</c>

01:04:30.050 --> 01:04:30.060 align:start position:0%
see if a is greater than B very simple
 

01:04:30.060 --> 01:04:33.030 align:start position:0%
see if a is greater than B very simple
example<01:04:30.480><c> right</c>

01:04:33.030 --> 01:04:33.040 align:start position:0%
 
 

01:04:33.040 --> 01:04:35.880 align:start position:0%
 
the<01:04:33.400><c> result</c><01:04:33.790><c> is</c><01:04:33.940><c> false</c><01:04:34.350><c> so</c><01:04:35.350><c> what</c><01:04:35.530><c> I</c><01:04:35.560><c> want</c><01:04:35.770><c> you</c>

01:04:35.880 --> 01:04:35.890 align:start position:0%
the result is false so what I want you
 

01:04:35.890 --> 01:04:38.520 align:start position:0%
the result is false so what I want you
to<01:04:35.980><c> know</c><01:04:36.130><c> here</c><01:04:36.460><c> is</c><01:04:36.580><c> the</c><01:04:37.450><c> result</c><01:04:37.900><c> of</c><01:04:38.080><c> the</c>

01:04:38.520 --> 01:04:38.530 align:start position:0%
to know here is the result of the
 

01:04:38.530 --> 01:04:40.980 align:start position:0%
to know here is the result of the
comparison<01:04:39.060><c> expression</c><01:04:40.060><c> is</c><01:04:40.210><c> always</c><01:04:40.690><c> a</c>

01:04:40.980 --> 01:04:40.990 align:start position:0%
comparison expression is always a
 

01:04:40.990 --> 01:04:44.220 align:start position:0%
comparison expression is always a
boolean<01:04:41.410><c> value</c><01:04:41.590><c> which</c><01:04:42.130><c> is</c><01:04:42.280><c> true</c><01:04:42.700><c> or</c><01:04:42.910><c> false</c><01:04:43.270><c> we</c>

01:04:44.220 --> 01:04:44.230 align:start position:0%
boolean value which is true or false we
 

01:04:44.230 --> 01:04:47.280 align:start position:0%
boolean value which is true or false we
can<01:04:44.410><c> test</c><01:04:44.590><c> for</c><01:04:44.770><c> equality</c><01:04:45.570><c> so</c><01:04:46.570><c> double</c><01:04:46.960><c> equal</c>

01:04:47.280 --> 01:04:47.290 align:start position:0%
can test for equality so double equal
 

01:04:47.290 --> 01:04:50.820 align:start position:0%
can test for equality so double equal
sign<01:04:47.530><c> in</c><01:04:47.820><c> this</c><01:04:48.820><c> case</c><01:04:49.030><c> a</c><01:04:49.240><c> is</c><01:04:49.450><c> not</c><01:04:50.020><c> equal</c><01:04:50.320><c> to</c><01:04:50.350><c> B</c><01:04:50.590><c> so</c>

01:04:50.820 --> 01:04:50.830 align:start position:0%
sign in this case a is not equal to B so
 

01:04:50.830 --> 01:04:57.380 align:start position:0%
sign in this case a is not equal to B so
the<01:04:50.980><c> result</c><01:04:51.310><c> should</c><01:04:51.580><c> be</c><01:04:51.700><c> false</c>

01:04:57.380 --> 01:04:57.390 align:start position:0%
 
 

01:04:57.390 --> 01:05:01.069 align:start position:0%
 
now<01:04:57.960><c> let's</c><01:04:58.230><c> see</c><01:04:58.380><c> the</c><01:04:58.559><c> not</c><01:04:58.739><c> equal</c><01:04:59.190><c> operator</c><01:05:00.079><c> so</c>

01:05:01.069 --> 01:05:01.079 align:start position:0%
now let's see the not equal operator so
 

01:05:01.079 --> 01:05:02.839 align:start position:0%
now let's see the not equal operator so
simply<01:05:01.559><c> have</c><01:05:01.710><c> an</c><01:05:01.859><c> exclamation</c><01:05:02.130><c> mark</c><01:05:02.430><c> here</c>

01:05:02.839 --> 01:05:02.849 align:start position:0%
simply have an exclamation mark here
 

01:05:02.849 --> 01:05:05.690 align:start position:0%
simply have an exclamation mark here
followed<01:05:03.569><c> by</c><01:05:03.720><c> an</c><01:05:03.809><c> equal</c><01:05:04.109><c> sign</c><01:05:04.309><c> in</c><01:05:05.309><c> this</c><01:05:05.519><c> case</c>

01:05:05.690 --> 01:05:05.700 align:start position:0%
followed by an equal sign in this case
 

01:05:05.700 --> 01:05:07.940 align:start position:0%
followed by an equal sign in this case
because<01:05:06.150><c> a</c><01:05:06.359><c> is</c><01:05:06.569><c> not</c><01:05:06.749><c> equal</c><01:05:07.079><c> to</c><01:05:07.109><c> B</c><01:05:07.259><c> the</c><01:05:07.589><c> result</c>

01:05:07.940 --> 01:05:07.950 align:start position:0%
because a is not equal to B the result
 

01:05:07.950 --> 01:05:10.740 align:start position:0%
because a is not equal to B the result
should<01:05:08.069><c> be</c><01:05:08.130><c> true</c>

01:05:10.740 --> 01:05:10.750 align:start position:0%
 
 

01:05:10.750 --> 01:05:13.060 align:start position:0%
 
okay<01:05:11.750><c> now</c><01:05:11.900><c> let</c><01:05:12.110><c> me</c><01:05:12.200><c> show</c><01:05:12.350><c> you</c><01:05:12.380><c> a</c><01:05:12.470><c> more</c><01:05:12.800><c> tricky</c>

01:05:13.060 --> 01:05:13.070 align:start position:0%
okay now let me show you a more tricky
 

01:05:13.070 --> 01:05:23.260 align:start position:0%
okay now let me show you a more tricky
example<01:05:20.050><c> what</c><01:05:21.050><c> do</c><01:05:21.110><c> you</c><01:05:21.200><c> expect</c><01:05:21.500><c> here</c><01:05:22.270><c> well</c>

01:05:23.260 --> 01:05:23.270 align:start position:0%
example what do you expect here well
 

01:05:23.270 --> 01:05:26.710 align:start position:0%
example what do you expect here well
first<01:05:23.860><c> this</c><01:05:24.860><c> is</c><01:05:24.920><c> the</c><01:05:25.220><c> not</c><01:05:25.430><c> operator</c><01:05:25.910><c> which</c><01:05:26.570><c> is</c>

01:05:26.710 --> 01:05:26.720 align:start position:0%
first this is the not operator which is
 

01:05:26.720 --> 01:05:28.960 align:start position:0%
first this is the not operator which is
applied<01:05:27.110><c> on</c><01:05:27.350><c> boolean</c><01:05:27.950><c> values</c><01:05:28.370><c> or</c><01:05:28.610><c> boolean</c>

01:05:28.960 --> 01:05:28.970 align:start position:0%
applied on boolean values or boolean
 

01:05:28.970 --> 01:05:31.000 align:start position:0%
applied on boolean values or boolean
expressions<01:05:29.510><c> in</c><01:05:29.660><c> this</c><01:05:30.260><c> case</c><01:05:30.470><c> this</c><01:05:30.800><c> is</c><01:05:30.860><c> a</c>

01:05:31.000 --> 01:05:31.010 align:start position:0%
expressions in this case this is a
 

01:05:31.010 --> 01:05:33.370 align:start position:0%
expressions in this case this is a
boolean<01:05:31.280><c> expression</c><01:05:31.400><c> and</c><01:05:32.110><c> as</c><01:05:33.110><c> you</c><01:05:33.260><c> saw</c>

01:05:33.370 --> 01:05:33.380 align:start position:0%
boolean expression and as you saw
 

01:05:33.380 --> 01:05:36.160 align:start position:0%
boolean expression and as you saw
earlier<01:05:33.580><c> it</c><01:05:34.580><c> was</c><01:05:34.790><c> true</c><01:05:35.210><c> because</c><01:05:35.600><c> a</c><01:05:35.810><c> is</c><01:05:35.990><c> not</c>

01:05:36.160 --> 01:05:36.170 align:start position:0%
earlier it was true because a is not
 

01:05:36.170 --> 01:05:39.310 align:start position:0%
earlier it was true because a is not
equal<01:05:36.500><c> to</c><01:05:36.530><c> B</c><01:05:37.030><c> so</c><01:05:38.030><c> we</c><01:05:38.180><c> apply</c><01:05:38.480><c> the</c><01:05:38.540><c> not</c><01:05:38.840><c> operator</c>

01:05:39.310 --> 01:05:39.320 align:start position:0%
equal to B so we apply the not operator
 

01:05:39.320 --> 01:05:41.200 align:start position:0%
equal to B so we apply the not operator
to<01:05:39.530><c> that</c><01:05:39.710><c> and</c><01:05:39.920><c> the</c><01:05:40.220><c> result</c><01:05:40.550><c> ends</c><01:05:40.760><c> up</c><01:05:41.000><c> being</c>

01:05:41.200 --> 01:05:41.210 align:start position:0%
to that and the result ends up being
 

01:05:41.210 --> 01:05:46.940 align:start position:0%
to that and the result ends up being
false<01:05:41.860><c> let's</c><01:05:42.860><c> run</c><01:05:43.010><c> the</c><01:05:43.100><c> application</c>

01:05:46.940 --> 01:05:46.950 align:start position:0%
 
 

01:05:46.950 --> 01:05:50.370 align:start position:0%
 
so<01:05:47.950><c> we</c><01:05:48.160><c> got</c><01:05:48.339><c> files</c><01:05:48.609><c> here</c><01:05:48.849><c> but</c><01:05:49.690><c> this</c><01:05:49.900><c> code</c><01:05:50.170><c> is</c>

01:05:50.370 --> 01:05:50.380 align:start position:0%
so we got files here but this code is
 

01:05:50.380 --> 01:05:52.620 align:start position:0%
so we got files here but this code is
not<01:05:50.440><c> easy</c><01:05:50.980><c> to</c><01:05:51.280><c> understand</c><01:05:51.760><c> or</c><01:05:51.970><c> easy</c><01:05:52.210><c> to</c><01:05:52.480><c> read</c>

01:05:52.620 --> 01:05:52.630 align:start position:0%
not easy to understand or easy to read
 

01:05:52.630 --> 01:05:55.920 align:start position:0%
not easy to understand or easy to read
because<01:05:53.109><c> here</c><01:05:53.559><c> we</c><01:05:53.710><c> have</c><01:05:53.859><c> two</c><01:05:54.099><c> negatives</c><01:05:54.930><c> one</c>

01:05:55.920 --> 01:05:55.930 align:start position:0%
because here we have two negatives one
 

01:05:55.930 --> 01:05:58.319 align:start position:0%
because here we have two negatives one
negative<01:05:56.140><c> and</c><01:05:56.500><c> two</c><01:05:56.920><c> negative</c><01:05:57.130><c> and</c><01:05:57.490><c> for</c><01:05:58.180><c> us</c>

01:05:58.319 --> 01:05:58.329 align:start position:0%
negative and two negative and for us
 

01:05:58.329 --> 01:06:01.730 align:start position:0%
negative and two negative and for us
humans<01:05:58.780><c> to</c><01:05:59.260><c> negative</c><01:05:59.680><c> is</c><01:05:59.859><c> hard</c><01:06:00.730><c> to</c><01:06:01.030><c> comprehend</c>

01:06:01.730 --> 01:06:01.740 align:start position:0%
humans to negative is hard to comprehend
 

01:06:01.740 --> 01:06:05.130 align:start position:0%
humans to negative is hard to comprehend
two<01:06:02.740><c> negatives</c><01:06:03.160><c> always</c><01:06:03.640><c> equal</c><01:06:04.240><c> to</c><01:06:04.450><c> one</c>

01:06:05.130 --> 01:06:05.140 align:start position:0%
two negatives always equal to one
 

01:06:05.140 --> 01:06:07.890 align:start position:0%
two negatives always equal to one
positive<01:06:05.520><c> so</c><01:06:06.520><c> in</c><01:06:06.670><c> your</c><01:06:06.819><c> program</c><01:06:07.359><c> if</c><01:06:07.540><c> you</c><01:06:07.720><c> end</c>

01:06:07.890 --> 01:06:07.900 align:start position:0%
positive so in your program if you end
 

01:06:07.900 --> 01:06:09.480 align:start position:0%
positive so in your program if you end
up<01:06:08.079><c> in</c><01:06:08.200><c> situations</c><01:06:08.740><c> where</c><01:06:08.920><c> you</c><01:06:09.069><c> have</c><01:06:09.250><c> two</c>

01:06:09.480 --> 01:06:09.490 align:start position:0%
up in situations where you have two
 

01:06:09.490 --> 01:06:12.359 align:start position:0%
up in situations where you have two
negatives<01:06:09.970><c> make</c><01:06:10.059><c> sure</c><01:06:10.900><c> to</c><01:06:11.170><c> always</c><01:06:11.380><c> inverse</c>

01:06:12.359 --> 01:06:12.369 align:start position:0%
negatives make sure to always inverse
 

01:06:12.369 --> 01:06:14.579 align:start position:0%
negatives make sure to always inverse
them<01:06:12.640><c> with</c><01:06:12.819><c> one</c><01:06:13.000><c> positive</c><01:06:13.240><c> so</c><01:06:13.960><c> in</c><01:06:14.049><c> that</c><01:06:14.140><c> case</c><01:06:14.380><c> I</c>

01:06:14.579 --> 01:06:14.589 align:start position:0%
them with one positive so in that case I
 

01:06:14.589 --> 01:06:16.200 align:start position:0%
them with one positive so in that case I
can<01:06:14.740><c> get</c><01:06:14.920><c> rid</c><01:06:15.040><c> of</c><01:06:15.160><c> the</c><01:06:15.280><c> first</c><01:06:15.520><c> negative</c><01:06:16.000><c> and</c>

01:06:16.200 --> 01:06:16.210 align:start position:0%
can get rid of the first negative and
 

01:06:16.210 --> 01:06:18.420 align:start position:0%
can get rid of the first negative and
convert<01:06:17.020><c> the</c><01:06:17.140><c> second</c><01:06:17.530><c> negative</c><01:06:17.680><c> to</c><01:06:18.400><c> a</c>

01:06:18.420 --> 01:06:18.430 align:start position:0%
convert the second negative to a
 

01:06:18.430 --> 01:06:20.430 align:start position:0%
convert the second negative to a
positive<01:06:18.520><c> like</c><01:06:19.150><c> that</c><01:06:19.359><c> and</c><01:06:19.599><c> we</c><01:06:20.020><c> will</c><01:06:20.109><c> get</c><01:06:20.290><c> the</c>

01:06:20.430 --> 01:06:20.440 align:start position:0%
positive like that and we will get the
 

01:06:20.440 --> 01:06:23.670 align:start position:0%
positive like that and we will get the
same<01:06:20.680><c> result</c><01:06:21.099><c> which</c><01:06:21.490><c> is</c><01:06:21.640><c> false</c><01:06:22.440><c> now</c><01:06:23.440><c> let's</c>

01:06:23.670 --> 01:06:23.680 align:start position:0%
same result which is false now let's
 

01:06:23.680 --> 01:06:27.089 align:start position:0%
same result which is false now let's
take<01:06:23.799><c> a</c><01:06:23.829><c> look</c><01:06:24.040><c> at</c><01:06:24.220><c> logical</c><01:06:24.940><c> operators</c><01:06:26.069><c> so</c><01:06:27.069><c> I</c>

01:06:27.089 --> 01:06:27.099 align:start position:0%
take a look at logical operators so I
 

01:06:27.099 --> 01:06:29.730 align:start position:0%
take a look at logical operators so I
create<01:06:27.760><c> another</c><01:06:27.970><c> variable</c><01:06:28.690><c> here</c><01:06:28.720><c> VAR</c><01:06:29.410><c> c</c>

01:06:29.730 --> 01:06:29.740 align:start position:0%
create another variable here VAR c
 

01:06:29.740 --> 01:06:35.520 align:start position:0%
create another variable here VAR c
equals<01:06:30.099><c> 3</c><01:06:31.770><c> I'm</c><01:06:32.770><c> going</c><01:06:32.920><c> to</c><01:06:32.980><c> change</c><01:06:33.220><c> that</c><01:06:33.460><c> to</c><01:06:34.530><c> C</c>

01:06:35.520 --> 01:06:35.530 align:start position:0%
equals 3 I'm going to change that to C
 

01:06:35.530 --> 01:06:41.579 align:start position:0%
equals 3 I'm going to change that to C
greater<01:06:36.430><c> than</c><01:06:36.549><c> B</c><01:06:37.240><c> and</c><01:06:38.069><c> C</c><01:06:39.069><c> greater</c><01:06:39.609><c> than</c><01:06:39.760><c> a</c><01:06:40.589><c> what</c>

01:06:41.579 --> 01:06:41.589 align:start position:0%
greater than B and C greater than a what
 

01:06:41.589 --> 01:06:44.250 align:start position:0%
greater than B and C greater than a what
do<01:06:41.650><c> you</c><01:06:41.680><c> expect</c><01:06:41.799><c> here</c><01:06:42.220><c> as</c><01:06:42.339><c> the</c><01:06:42.490><c> result</c><01:06:42.819><c> well</c><01:06:43.480><c> C</c>

01:06:44.250 --> 01:06:44.260 align:start position:0%
do you expect here as the result well C
 

01:06:44.260 --> 01:06:46.650 align:start position:0%
do you expect here as the result well C
is<01:06:44.470><c> greater</c><01:06:44.950><c> than</c><01:06:45.190><c> B</c><01:06:45.430><c> so</c><01:06:45.910><c> the</c><01:06:46.059><c> result</c><01:06:46.420><c> of</c><01:06:46.540><c> that</c>

01:06:46.650 --> 01:06:46.660 align:start position:0%
is greater than B so the result of that
 

01:06:46.660 --> 01:06:49.980 align:start position:0%
is greater than B so the result of that
expression<01:06:46.990><c> is</c><01:06:47.319><c> true</c><01:06:47.880><c> also</c><01:06:48.880><c> C</c><01:06:49.569><c> is</c><01:06:49.720><c> greater</c>

01:06:49.980 --> 01:06:49.990 align:start position:0%
expression is true also C is greater
 

01:06:49.990 --> 01:06:51.809 align:start position:0%
expression is true also C is greater
than<01:06:50.079><c> a</c><01:06:50.440><c> so</c><01:06:50.859><c> the</c><01:06:51.010><c> result</c><01:06:51.309><c> of</c><01:06:51.430><c> that</c><01:06:51.549><c> expression</c>

01:06:51.809 --> 01:06:51.819 align:start position:0%
than a so the result of that expression
 

01:06:51.819 --> 01:06:54.390 align:start position:0%
than a so the result of that expression
is<01:06:52.150><c> true</c><01:06:52.299><c> as</c><01:06:52.480><c> well</c><01:06:52.660><c> and</c><01:06:52.930><c> here</c><01:06:53.799><c> we</c><01:06:53.920><c> have</c><01:06:54.069><c> the</c><01:06:54.220><c> end</c>

01:06:54.390 --> 01:06:54.400 align:start position:0%
is true as well and here we have the end
 

01:06:54.400 --> 01:06:59.069 align:start position:0%
is true as well and here we have the end
operator<01:06:54.880><c> so</c><01:06:55.630><c> true</c><01:06:56.020><c> and</c><01:06:56.970><c> true</c><01:06:57.970><c> equals</c><01:06:58.599><c> to</c><01:06:58.780><c> true</c>

01:06:59.069 --> 01:06:59.079 align:start position:0%
operator so true and true equals to true
 

01:06:59.079 --> 01:07:03.160 align:start position:0%
operator so true and true equals to true
let's<01:06:59.950><c> run</c><01:07:00.069><c> the</c><01:07:00.220><c> application</c>

01:07:03.160 --> 01:07:03.170 align:start position:0%
 
 

01:07:03.170 --> 01:07:06.940 align:start position:0%
 
there<01:07:03.770><c> you</c><01:07:03.860><c> go</c><01:07:05.290><c> now</c><01:07:06.290><c> let's</c><01:07:06.530><c> make</c><01:07:06.650><c> a</c><01:07:06.710><c> tiny</c>

01:07:06.940 --> 01:07:06.950 align:start position:0%
there you go now let's make a tiny
 

01:07:06.950 --> 01:07:12.160 align:start position:0%
there you go now let's make a tiny
change<01:07:07.250><c> here</c><01:07:07.490><c> so</c><01:07:09.790><c> this</c><01:07:10.790><c> time</c><01:07:11.060><c> because</c><01:07:11.900><c> we</c><01:07:12.050><c> know</c>

01:07:12.160 --> 01:07:12.170 align:start position:0%
change here so this time because we know
 

01:07:12.170 --> 01:07:14.860 align:start position:0%
change here so this time because we know
C<01:07:12.560><c> is</c><01:07:12.710><c> not</c><01:07:12.890><c> equal</c><01:07:13.310><c> to</c><01:07:13.340><c> a</c><01:07:13.490><c> this</c><01:07:14.240><c> expression</c>

01:07:14.860 --> 01:07:14.870 align:start position:0%
C is not equal to a this expression
 

01:07:14.870 --> 01:07:18.190 align:start position:0%
C is not equal to a this expression
evaluates<01:07:15.440><c> to</c><01:07:15.590><c> false</c><01:07:16.150><c> true</c><01:07:17.150><c> and</c><01:07:17.390><c> false</c>

01:07:18.190 --> 01:07:18.200 align:start position:0%
evaluates to false true and false
 

01:07:18.200 --> 01:07:21.010 align:start position:0%
evaluates to false true and false
results<01:07:19.190><c> in</c><01:07:19.340><c> false</c><01:07:19.750><c> let's</c><01:07:20.750><c> run</c><01:07:20.900><c> the</c>

01:07:21.010 --> 01:07:21.020 align:start position:0%
results in false let's run the
 

01:07:21.020 --> 01:07:24.420 align:start position:0%
results in false let's run the
application

01:07:24.420 --> 01:07:24.430 align:start position:0%
 
 

01:07:24.430 --> 01:07:29.310 align:start position:0%
 
so<01:07:25.030><c> we</c><01:07:25.150><c> got</c><01:07:25.300><c> false</c><01:07:27.510><c> now</c><01:07:28.510><c> let's</c><01:07:28.780><c> see</c><01:07:28.900><c> the</c><01:07:29.050><c> effect</c>

01:07:29.310 --> 01:07:29.320 align:start position:0%
so we got false now let's see the effect
 

01:07:29.320 --> 01:07:31.320 align:start position:0%
so we got false now let's see the effect
of<01:07:29.470><c> the</c><01:07:29.770><c> or</c><01:07:29.950><c> operator</c><01:07:30.370><c> so</c><01:07:31.060><c> I'm</c><01:07:31.150><c> going</c><01:07:31.300><c> to</c>

01:07:31.320 --> 01:07:31.330 align:start position:0%
of the or operator so I'm going to
 

01:07:31.330 --> 01:07:35.040 align:start position:0%
of the or operator so I'm going to
replace<01:07:31.630><c> the</c><01:07:31.840><c> end</c><01:07:32.580><c> with</c><01:07:33.580><c> or</c><01:07:33.880><c> which</c><01:07:34.600><c> is</c><01:07:34.630><c> double</c>

01:07:35.040 --> 01:07:35.050 align:start position:0%
replace the end with or which is double
 

01:07:35.050 --> 01:07:38.420 align:start position:0%
replace the end with or which is double
vertical<01:07:35.260><c> line</c><01:07:35.680><c> in</c><01:07:36.060><c> this</c><01:07:37.060><c> case</c><01:07:37.270><c> that</c><01:07:38.050><c> is</c><01:07:38.260><c> true</c>

01:07:38.420 --> 01:07:38.430 align:start position:0%
vertical line in this case that is true
 

01:07:38.430 --> 01:07:46.880 align:start position:0%
vertical line in this case that is true
or<01:07:39.510><c> false</c><01:07:40.510><c> the</c><01:07:41.230><c> result</c><01:07:41.650><c> ends</c><01:07:41.890><c> up</c><01:07:42.190><c> being</c><01:07:42.400><c> true</c>

01:07:46.880 --> 01:07:46.890 align:start position:0%
 
 

01:07:46.890 --> 01:07:49.830 align:start position:0%
 
and<01:07:47.890><c> of</c><01:07:48.070><c> course</c><01:07:48.310><c> we</c><01:07:48.550><c> can</c><01:07:48.700><c> apply</c><01:07:49.000><c> not</c><01:07:49.390><c> operator</c>

01:07:49.830 --> 01:07:49.840 align:start position:0%
and of course we can apply not operator
 

01:07:49.840 --> 01:07:54.480 align:start position:0%
and of course we can apply not operator
here<01:07:50.170><c> as</c><01:07:50.320><c> you</c><01:07:50.440><c> saw</c><01:07:50.590><c> earlier</c><01:07:53.010><c> which</c><01:07:54.010><c> changes</c>

01:07:54.480 --> 01:07:54.490 align:start position:0%
here as you saw earlier which changes
 

01:07:54.490 --> 01:07:59.200 align:start position:0%
here as you saw earlier which changes
the<01:07:54.640><c> true</c><01:07:54.940><c> to</c><01:07:55.330><c> false</c>

01:07:59.200 --> 01:07:59.210 align:start position:0%
 
 

01:07:59.210 --> 01:08:01.690 align:start position:0%
 
now<01:07:59.599><c> this</c><01:07:59.839><c> expression</c><01:08:00.319><c> doesn't</c><01:08:00.619><c> really</c><01:08:00.770><c> look</c>

01:08:01.690 --> 01:08:01.700 align:start position:0%
now this expression doesn't really look
 

01:08:01.700 --> 01:08:04.150 align:start position:0%
now this expression doesn't really look
easy<01:08:02.089><c> to</c><01:08:02.240><c> understand</c><01:08:03.109><c> it's</c><01:08:03.500><c> just</c><01:08:03.710><c> purely</c><01:08:03.950><c> for</c>

01:08:04.150 --> 01:08:04.160 align:start position:0%
easy to understand it's just purely for
 

01:08:04.160 --> 01:08:05.950 align:start position:0%
easy to understand it's just purely for
demonstration<01:08:04.369><c> of</c><01:08:05.030><c> how</c><01:08:05.240><c> we</c><01:08:05.300><c> can</c><01:08:05.540><c> combine</c>

01:08:05.950 --> 01:08:05.960 align:start position:0%
demonstration of how we can combine
 

01:08:05.960 --> 01:08:08.290 align:start position:0%
demonstration of how we can combine
different<01:08:05.990><c> operators</c><01:08:06.829><c> and</c><01:08:07.069><c> make</c><01:08:07.550><c> up</c><01:08:07.760><c> more</c>

01:08:08.290 --> 01:08:08.300 align:start position:0%
different operators and make up more
 

01:08:08.300 --> 01:08:10.690 align:start position:0%
different operators and make up more
complicated<01:08:08.930><c> expressions</c><01:08:09.440><c> okay</c><01:08:10.339><c> that's</c><01:08:10.579><c> it</c>

01:08:10.690 --> 01:08:10.700 align:start position:0%
complicated expressions okay that's it
 

01:08:10.700 --> 01:08:12.430 align:start position:0%
complicated expressions okay that's it
for<01:08:10.849><c> this</c><01:08:10.940><c> lecture</c><01:08:11.150><c> I</c><01:08:11.540><c> hope</c><01:08:11.930><c> you</c><01:08:12.050><c> enjoyed</c><01:08:12.319><c> it</c>

01:08:12.430 --> 01:08:12.440 align:start position:0%
for this lecture I hope you enjoyed it
 

01:08:12.440 --> 01:08:15.910 align:start position:0%
for this lecture I hope you enjoyed it
and<01:08:12.559><c> thank</c><01:08:12.890><c> you</c><01:08:12.980><c> for</c><01:08:13.130><c> watching</c>

01:08:15.910 --> 01:08:15.920 align:start position:0%
 
 

01:08:15.920 --> 01:08:19.780 align:start position:0%
 
okay<01:08:16.730><c> so</c><01:08:16.790><c> we</c><01:08:16.969><c> got</c><01:08:17.120><c> to</c><01:08:17.239><c> comment</c><01:08:17.719><c> a</c><01:08:18.609><c> comment</c><01:08:19.609><c> is</c>

01:08:19.780 --> 01:08:19.790 align:start position:0%
okay so we got to comment a comment is
 

01:08:19.790 --> 01:08:22.450 align:start position:0%
okay so we got to comment a comment is
text<01:08:20.449><c> that</c><01:08:20.810><c> we</c><01:08:20.989><c> put</c><01:08:21.199><c> in</c><01:08:21.319><c> our</c><01:08:21.409><c> code</c><01:08:21.650><c> to</c><01:08:21.889><c> improve</c>

01:08:22.450 --> 01:08:22.460 align:start position:0%
text that we put in our code to improve
 

01:08:22.460 --> 01:08:25.320 align:start position:0%
text that we put in our code to improve
its<01:08:22.759><c> readability</c><01:08:23.359><c> and</c><01:08:23.900><c> maintainability</c><01:08:24.620><c> in</c>

01:08:25.320 --> 01:08:25.330 align:start position:0%
its readability and maintainability in
 

01:08:25.330 --> 01:08:27.789 align:start position:0%
its readability and maintainability in
c-sharp<01:08:26.330><c> we</c><01:08:26.690><c> have</c><01:08:26.839><c> two</c><01:08:27.080><c> ways</c><01:08:27.290><c> to</c><01:08:27.650><c> write</c>

01:08:27.789 --> 01:08:27.799 align:start position:0%
c-sharp we have two ways to write
 

01:08:27.799 --> 01:08:30.399 align:start position:0%
c-sharp we have two ways to write
comments<01:08:28.449><c> if</c><01:08:29.449><c> your</c><01:08:29.659><c> comment</c><01:08:30.020><c> is</c><01:08:30.109><c> only</c><01:08:30.319><c> a</c>

01:08:30.399 --> 01:08:30.409 align:start position:0%
comments if your comment is only a
 

01:08:30.409 --> 01:08:32.680 align:start position:0%
comments if your comment is only a
single<01:08:30.739><c> line</c><01:08:31.040><c> you</c><01:08:31.580><c> can</c><01:08:31.730><c> prefix</c><01:08:32.179><c> the</c><01:08:32.299><c> comment</c>

01:08:32.680 --> 01:08:32.690 align:start position:0%
single line you can prefix the comment
 

01:08:32.690 --> 01:08:35.530 align:start position:0%
single line you can prefix the comment
with<01:08:33.020><c> double</c><01:08:33.380><c> slash</c><01:08:33.850><c> but</c><01:08:34.850><c> if</c><01:08:35.000><c> your</c><01:08:35.120><c> comment</c><01:08:35.449><c> is</c>

01:08:35.530 --> 01:08:35.540 align:start position:0%
with double slash but if your comment is
 

01:08:35.540 --> 01:08:38.110 align:start position:0%
with double slash but if your comment is
longer<01:08:35.929><c> and</c><01:08:36.080><c> it's</c><01:08:36.560><c> multiple</c><01:08:36.739><c> lines</c><01:08:37.219><c> you</c><01:08:37.969><c> need</c>

01:08:38.110 --> 01:08:38.120 align:start position:0%
longer and it's multiple lines you need
 

01:08:38.120 --> 01:08:40.780 align:start position:0%
longer and it's multiple lines you need
to<01:08:38.239><c> start</c><01:08:38.540><c> it</c><01:08:38.659><c> with</c><01:08:38.690><c> slash</c><01:08:39.350><c> star</c><01:08:39.859><c> and</c><01:08:40.130><c> then</c>

01:08:40.780 --> 01:08:40.790 align:start position:0%
to start it with slash star and then
 

01:08:40.790 --> 01:08:44.439 align:start position:0%
to start it with slash star and then
finish<01:08:41.150><c> it</c><01:08:41.179><c> with</c><01:08:41.299><c> star</c><01:08:42.020><c> slash</c><01:08:43.060><c> this</c><01:08:44.060><c> type</c><01:08:44.299><c> of</c>

01:08:44.439 --> 01:08:44.449 align:start position:0%
finish it with star slash this type of
 

01:08:44.449 --> 01:08:46.660 align:start position:0%
finish it with star slash this type of
comment<01:08:44.870><c> is</c><01:08:45.080><c> more</c><01:08:45.409><c> like</c><01:08:45.980><c> the</c><01:08:46.130><c> comments</c><01:08:46.549><c> we</c>

01:08:46.660 --> 01:08:46.670 align:start position:0%
comment is more like the comments we
 

01:08:46.670 --> 01:08:49.660 align:start position:0%
comment is more like the comments we
used<01:08:46.790><c> to</c><01:08:46.909><c> write</c><01:08:47.060><c> in</c><01:08:47.270><c> C</c><01:08:47.509><c> and</c><01:08:47.750><c> C++</c><01:08:47.989><c> code</c><01:08:48.679><c> these</c>

01:08:49.660 --> 01:08:49.670 align:start position:0%
used to write in C and C++ code these
 

01:08:49.670 --> 01:08:51.700 align:start position:0%
used to write in C and C++ code these
days<01:08:49.969><c> it's</c><01:08:50.239><c> more</c><01:08:50.449><c> conventional</c><01:08:51.080><c> to</c><01:08:51.529><c> write</c>

01:08:51.700 --> 01:08:51.710 align:start position:0%
days it's more conventional to write
 

01:08:51.710 --> 01:08:53.590 align:start position:0%
days it's more conventional to write
either<01:08:52.009><c> single</c><01:08:52.639><c> line</c><01:08:52.819><c> or</c><01:08:52.969><c> multi-line</c>

01:08:53.590 --> 01:08:53.600 align:start position:0%
either single line or multi-line
 

01:08:53.600 --> 01:08:57.010 align:start position:0%
either single line or multi-line
comments<01:08:54.170><c> prefixing</c><01:08:54.980><c> with</c><01:08:55.159><c> double</c><01:08:55.759><c> slash</c><01:08:56.020><c> so</c>

01:08:57.010 --> 01:08:57.020 align:start position:0%
comments prefixing with double slash so
 

01:08:57.020 --> 01:08:58.840 align:start position:0%
comments prefixing with double slash so
in<01:08:57.139><c> this</c><01:08:57.259><c> example</c><01:08:57.589><c> we</c><01:08:58.159><c> can</c><01:08:58.190><c> rewrite</c><01:08:58.670><c> this</c>

01:08:58.840 --> 01:08:58.850 align:start position:0%
in this example we can rewrite this
 

01:08:58.850 --> 01:09:00.700 align:start position:0%
in this example we can rewrite this
multi-line<01:08:59.330><c> comment</c><01:08:59.810><c> with</c><01:09:00.139><c> double</c><01:09:00.469><c> slash</c>

01:09:00.700 --> 01:09:00.710 align:start position:0%
multi-line comment with double slash
 

01:09:00.710 --> 01:09:04.629 align:start position:0%
multi-line comment with double slash
style<01:09:01.130><c> like</c><01:09:01.339><c> this</c><01:09:02.920><c> now</c><01:09:03.920><c> as</c><01:09:04.219><c> a</c><01:09:04.250><c> rule</c><01:09:04.460><c> of</c><01:09:04.609><c> thumb</c>

01:09:04.629 --> 01:09:04.639 align:start position:0%
style like this now as a rule of thumb
 

01:09:04.639 --> 01:09:07.749 align:start position:0%
style like this now as a rule of thumb
keep<01:09:05.359><c> your</c><01:09:05.540><c> comments</c><01:09:05.839><c> to</c><01:09:06.199><c> minimum</c><01:09:06.799><c> use</c>

01:09:07.749 --> 01:09:07.759 align:start position:0%
keep your comments to minimum use
 

01:09:07.759 --> 01:09:09.910 align:start position:0%
keep your comments to minimum use
comments<01:09:08.270><c> only</c><01:09:08.389><c> win</c><01:09:08.929><c> required</c><01:09:09.380><c> and</c><01:09:09.620><c> that's</c>

01:09:09.910 --> 01:09:09.920 align:start position:0%
comments only win required and that's
 

01:09:09.920 --> 01:09:13.660 align:start position:0%
comments only win required and that's
when<01:09:10.429><c> explaining</c><01:09:10.790><c> wise</c><01:09:11.299><c> house</c><01:09:12.670><c> constraints</c>

01:09:13.660 --> 01:09:13.670 align:start position:0%
when explaining wise house constraints
 

01:09:13.670 --> 01:09:16.180 align:start position:0%
when explaining wise house constraints
and<01:09:13.819><c> things</c><01:09:14.120><c> like</c><01:09:14.270><c> that</c><01:09:14.330><c> do</c><01:09:15.170><c> not</c><01:09:15.350><c> explain</c><01:09:15.889><c> what</c>

01:09:16.180 --> 01:09:16.190 align:start position:0%
and things like that do not explain what
 

01:09:16.190 --> 01:09:18.340 align:start position:0%
and things like that do not explain what
the<01:09:16.339><c> code</c><01:09:16.549><c> is</c><01:09:16.580><c> doing</c><01:09:16.730><c> your</c><01:09:17.630><c> code</c><01:09:17.839><c> should</c><01:09:18.049><c> be</c><01:09:18.080><c> so</c>

01:09:18.340 --> 01:09:18.350 align:start position:0%
the code is doing your code should be so
 

01:09:18.350 --> 01:09:20.260 align:start position:0%
the code is doing your code should be so
clean<01:09:18.679><c> and</c><01:09:18.830><c> straightforward</c><01:09:19.429><c> that</c><01:09:20.150><c> it</c>

01:09:20.260 --> 01:09:20.270 align:start position:0%
clean and straightforward that it
 

01:09:20.270 --> 01:09:22.749 align:start position:0%
clean and straightforward that it
doesn't<01:09:20.540><c> need</c><01:09:20.659><c> comment</c><01:09:21.139><c> if</c><01:09:21.650><c> a</c><01:09:22.339><c> comment</c>

01:09:22.749 --> 01:09:22.759 align:start position:0%
doesn't need comment if a comment
 

01:09:22.759 --> 01:09:25.149 align:start position:0%
doesn't need comment if a comment
explains<01:09:23.359><c> just</c><01:09:23.929><c> what</c><01:09:24.139><c> the</c><01:09:24.290><c> code</c><01:09:24.469><c> is</c><01:09:24.500><c> doing</c><01:09:24.679><c> is</c>

01:09:25.149 --> 01:09:25.159 align:start position:0%
explains just what the code is doing is
 

01:09:25.159 --> 01:09:27.820 align:start position:0%
explains just what the code is doing is
redundant<01:09:25.940><c> and</c><01:09:26.089><c> the</c><01:09:26.750><c> problem</c><01:09:27.199><c> with</c><01:09:27.350><c> redundant</c>

01:09:27.820 --> 01:09:27.830 align:start position:0%
redundant and the problem with redundant
 

01:09:27.830 --> 01:09:30.039 align:start position:0%
redundant and the problem with redundant
comments<01:09:28.250><c> is</c><01:09:28.400><c> we</c><01:09:28.909><c> change</c><01:09:29.150><c> the</c><01:09:29.210><c> code</c><01:09:29.480><c> but</c><01:09:30.020><c> not</c>

01:09:30.039 --> 01:09:30.049 align:start position:0%
comments is we change the code but not
 

01:09:30.049 --> 01:09:32.649 align:start position:0%
comments is we change the code but not
everyone<01:09:30.650><c> is</c><01:09:30.859><c> very</c><01:09:31.460><c> consistent</c><01:09:32.029><c> in</c><01:09:32.210><c> changing</c>

01:09:32.649 --> 01:09:32.659 align:start position:0%
everyone is very consistent in changing
 

01:09:32.659 --> 01:09:34.660 align:start position:0%
everyone is very consistent in changing
the<01:09:32.750><c> comments</c><01:09:33.199><c> so</c><01:09:33.739><c> after</c><01:09:34.040><c> a</c><01:09:34.069><c> while</c><01:09:34.279><c> these</c>

01:09:34.660 --> 01:09:34.670 align:start position:0%
the comments so after a while these
 

01:09:34.670 --> 01:09:37.120 align:start position:0%
the comments so after a while these
comments<01:09:35.179><c> become</c><01:09:35.509><c> outdated</c><01:09:35.739><c> and</c><01:09:36.739><c> because</c>

01:09:37.120 --> 01:09:37.130 align:start position:0%
comments become outdated and because
 

01:09:37.130 --> 01:09:38.680 align:start position:0%
comments become outdated and because
they<01:09:37.310><c> don't</c><01:09:37.429><c> get</c><01:09:37.609><c> compiled</c><01:09:38.120><c> like</c><01:09:38.330><c> the</c><01:09:38.449><c> code</c>

01:09:38.680 --> 01:09:38.690 align:start position:0%
they don't get compiled like the code
 

01:09:38.690 --> 01:09:40.749 align:start position:0%
they don't get compiled like the code
there<01:09:39.259><c> is</c><01:09:39.290><c> no</c><01:09:39.529><c> way</c><01:09:39.710><c> to</c><01:09:39.739><c> validate</c><01:09:40.130><c> them</c><01:09:40.549><c> and</c>

01:09:40.749 --> 01:09:40.759 align:start position:0%
there is no way to validate them and
 

01:09:40.759 --> 01:09:43.959 align:start position:0%
there is no way to validate them and
after<01:09:41.569><c> a</c><01:09:41.600><c> while</c><01:09:41.779><c> they</c><01:09:42.049><c> become</c><01:09:42.319><c> useless</c><01:09:42.969><c> so</c>

01:09:43.959 --> 01:09:43.969 align:start position:0%
after a while they become useless so
 

01:09:43.969 --> 01:09:45.939 align:start position:0%
after a while they become useless so
again<01:09:44.210><c> keep</c><01:09:44.569><c> them</c><01:09:44.719><c> to</c><01:09:44.870><c> minimum</c><01:09:45.170><c> and</c><01:09:45.290><c> explain</c>

01:09:45.939 --> 01:09:45.949 align:start position:0%
again keep them to minimum and explain
 

01:09:45.949 --> 01:09:48.820 align:start position:0%
again keep them to minimum and explain
wise<01:09:46.520><c> house</c><01:09:47.270><c> and</c><01:09:47.690><c> constraints</c><01:09:48.440><c> that</c><01:09:48.469><c> you</c><01:09:48.650><c> had</c>

01:09:48.820 --> 01:09:48.830 align:start position:0%
wise house and constraints that you had
 

01:09:48.830 --> 01:09:50.829 align:start position:0%
wise house and constraints that you had
at<01:09:49.130><c> the</c><01:09:49.400><c> time</c><01:09:49.580><c> you</c><01:09:49.699><c> wrote</c><01:09:49.850><c> the</c><01:09:50.000><c> code</c><01:09:50.179><c> so</c><01:09:50.690><c> the</c>

01:09:50.829 --> 01:09:50.839 align:start position:0%
at the time you wrote the code so the
 

01:09:50.839 --> 01:09:52.720 align:start position:0%
at the time you wrote the code so the
next<01:09:51.109><c> person</c><01:09:51.560><c> who</c><01:09:51.589><c> is</c><01:09:51.799><c> reading</c><01:09:52.310><c> your</c><01:09:52.520><c> code</c>

01:09:52.720 --> 01:09:52.730 align:start position:0%
next person who is reading your code
 

01:09:52.730 --> 01:09:54.879 align:start position:0%
next person who is reading your code
knows<01:09:53.270><c> the</c><01:09:53.509><c> reason</c><01:09:53.900><c> why</c><01:09:54.139><c> you</c><01:09:54.199><c> wrote</c><01:09:54.560><c> the</c><01:09:54.710><c> code</c>

01:09:54.879 --> 01:09:54.889 align:start position:0%
knows the reason why you wrote the code
 

01:09:54.889 --> 01:09:59.910 align:start position:0%
knows the reason why you wrote the code
that<01:09:55.190><c> way</c>

01:09:59.910 --> 01:09:59.920 align:start position:0%
 
 

01:09:59.920 --> 01:10:03.490 align:start position:0%
 
in<01:10:00.940><c> this</c><01:10:01.940><c> section</c><01:10:02.180><c> you</c><01:10:02.540><c> learn</c><01:10:02.719><c> that</c><01:10:02.960><c> C</c><01:10:03.200><c> sharp</c>

01:10:03.490 --> 01:10:03.500 align:start position:0%
in this section you learn that C sharp
 

01:10:03.500 --> 01:10:05.709 align:start position:0%
in this section you learn that C sharp
is<01:10:03.620><c> a</c><01:10:03.710><c> statically</c><01:10:04.250><c> typed</c><01:10:04.370><c> language</c><01:10:05.090><c> which</c>

01:10:05.709 --> 01:10:05.719 align:start position:0%
is a statically typed language which
 

01:10:05.719 --> 01:10:07.840 align:start position:0%
is a statically typed language which
means<01:10:05.900><c> once</c><01:10:06.410><c> you</c><01:10:06.469><c> ticular</c><01:10:06.860><c> a</c><01:10:06.890><c> variable</c><01:10:07.400><c> you</c>

01:10:07.840 --> 01:10:07.850 align:start position:0%
means once you ticular a variable you
 

01:10:07.850 --> 01:10:09.940 align:start position:0%
means once you ticular a variable you
need<01:10:08.030><c> to</c><01:10:08.150><c> specify</c><01:10:08.360><c> its</c><01:10:08.780><c> type</c><01:10:09.050><c> and</c><01:10:09.320><c> that</c><01:10:09.350><c> type</c>

01:10:09.940 --> 01:10:09.950 align:start position:0%
need to specify its type and that type
 

01:10:09.950 --> 01:10:12.580 align:start position:0%
need to specify its type and that type
cannot<01:10:10.850><c> change</c><01:10:11.239><c> during</c><01:10:11.840><c> the</c><01:10:11.930><c> lifetime</c><01:10:12.170><c> of</c>

01:10:12.580 --> 01:10:12.590 align:start position:0%
cannot change during the lifetime of
 

01:10:12.590 --> 01:10:14.770 align:start position:0%
cannot change during the lifetime of
that<01:10:12.710><c> variable</c><01:10:13.190><c> you</c><01:10:14.000><c> also</c><01:10:14.150><c> learn</c><01:10:14.450><c> about</c><01:10:14.630><c> the</c>

01:10:14.770 --> 01:10:14.780 align:start position:0%
that variable you also learn about the
 

01:10:14.780 --> 01:10:16.510 align:start position:0%
that variable you also learn about the
primitive<01:10:15.320><c> types</c><01:10:15.530><c> in</c><01:10:15.710><c> c-sharp</c><01:10:15.860><c> such</c><01:10:16.370><c> as</c>

01:10:16.510 --> 01:10:16.520 align:start position:0%
primitive types in c-sharp such as
 

01:10:16.520 --> 01:10:19.780 align:start position:0%
primitive types in c-sharp such as
integer<01:10:16.850><c> character</c><01:10:17.810><c> boolean</c><01:10:18.410><c> and</c><01:10:18.650><c> so</c><01:10:18.860><c> on</c><01:10:19.040><c> now</c>

01:10:19.780 --> 01:10:19.790 align:start position:0%
integer character boolean and so on now
 

01:10:19.790 --> 01:10:21.160 align:start position:0%
integer character boolean and so on now
in<01:10:19.940><c> the</c><01:10:19.969><c> next</c><01:10:20.239><c> section</c><01:10:20.450><c> I'm</c><01:10:20.870><c> going</c><01:10:21.110><c> to</c>

01:10:21.160 --> 01:10:21.170 align:start position:0%
in the next section I'm going to
 

01:10:21.170 --> 01:10:23.410 align:start position:0%
in the next section I'm going to
introduce<01:10:21.410><c> you</c><01:10:21.620><c> to</c><01:10:22.160><c> non</c><01:10:22.340><c> primitive</c><01:10:22.700><c> types</c><01:10:23.150><c> in</c>

01:10:23.410 --> 01:10:23.420 align:start position:0%
introduce you to non primitive types in
 

01:10:23.420 --> 01:10:26.290 align:start position:0%
introduce you to non primitive types in
c-sharp<01:10:23.870><c> such</c><01:10:24.560><c> as</c><01:10:24.680><c> classes</c><01:10:25.219><c> or</c><01:10:25.640><c> structures</c>

01:10:26.290 --> 01:10:26.300 align:start position:0%
c-sharp such as classes or structures
 

01:10:26.300 --> 01:10:29.830 align:start position:0%
c-sharp such as classes or structures
arrays<01:10:27.140><c> strings</c><01:10:28.100><c> and</c><01:10:28.370><c> in</c><01:10:28.580><c> ohms</c><01:10:28.820><c> so</c><01:10:29.360><c> I'll</c><01:10:29.600><c> see</c>

01:10:29.830 --> 01:10:29.840 align:start position:0%
arrays strings and in ohms so I'll see
 

01:10:29.840 --> 01:10:32.560 align:start position:0%
arrays strings and in ohms so I'll see
you<01:10:29.930><c> the</c><01:10:30.020><c> next</c><01:10:30.260><c> section</c>

