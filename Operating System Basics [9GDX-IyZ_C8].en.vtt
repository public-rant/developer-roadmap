WEBVTT



00:00:08.540 --> 00:00:10.910 align:start position:0%
 
when<00:00:09.540><c> a</c><00:00:09.570><c> computer</c><00:00:09.750><c> starts</c><00:00:10.080><c> up</c><00:00:10.290><c> it</c><00:00:10.530><c> loads</c><00:00:10.740><c> an</c>

00:00:10.910 --> 00:00:10.920 align:start position:0%
when a computer starts up it loads an
 

00:00:10.920 --> 00:00:13.310 align:start position:0%
when a computer starts up it loads an
operating<00:00:11.430><c> system</c><00:00:11.550><c> also</c><00:00:12.000><c> known</c><00:00:12.420><c> as</c><00:00:12.480><c> an</c><00:00:12.660><c> OS</c><00:00:13.049><c> a</c>

00:00:13.310 --> 00:00:13.320 align:start position:0%
operating system also known as an OS a
 

00:00:13.320 --> 00:00:15.170 align:start position:0%
operating system also known as an OS a
program<00:00:13.980><c> for</c><00:00:14.160><c> managing</c><00:00:14.520><c> the</c><00:00:14.639><c> hardware</c><00:00:14.760><c> and</c>

00:00:15.170 --> 00:00:15.180 align:start position:0%
program for managing the hardware and
 

00:00:15.180 --> 00:00:18.470 align:start position:0%
program for managing the hardware and
running<00:00:15.719><c> other</c><00:00:15.900><c> programs</c><00:00:16.439><c> in</c><00:00:17.220><c> OS</c><00:00:17.700><c> terminology</c>

00:00:18.470 --> 00:00:18.480 align:start position:0%
running other programs in OS terminology
 

00:00:18.480 --> 00:00:19.970 align:start position:0%
running other programs in OS terminology
a<00:00:18.630><c> running</c><00:00:18.990><c> program</c><00:00:19.140><c> is</c><00:00:19.439><c> called</c><00:00:19.619><c> a</c><00:00:19.710><c> process</c>

00:00:19.970 --> 00:00:19.980 align:start position:0%
a running program is called a process
 

00:00:19.980 --> 00:00:22.700 align:start position:0%
a running program is called a process
and<00:00:20.460><c> it</c><00:00:20.910><c> is</c><00:00:21.029><c> the</c><00:00:21.150><c> OSS</c><00:00:21.630><c> responsibility</c><00:00:22.380><c> to</c><00:00:22.529><c> keep</c>

00:00:22.700 --> 00:00:22.710 align:start position:0%
and it is the OSS responsibility to keep
 

00:00:22.710 --> 00:00:24.439 align:start position:0%
and it is the OSS responsibility to keep
the<00:00:22.830><c> processes</c><00:00:23.460><c> from</c><00:00:23.640><c> interfering</c><00:00:24.180><c> with</c><00:00:24.300><c> one</c>

00:00:24.439 --> 00:00:24.449 align:start position:0%
the processes from interfering with one
 

00:00:24.449 --> 00:00:26.150 align:start position:0%
the processes from interfering with one
another<00:00:24.690><c> even</c><00:00:25.170><c> as</c><00:00:25.440><c> they</c><00:00:25.590><c> run</c><00:00:25.770><c> on</c><00:00:25.920><c> the</c><00:00:26.010><c> same</c>

00:00:26.150 --> 00:00:26.160 align:start position:0%
another even as they run on the same
 

00:00:26.160 --> 00:00:28.760 align:start position:0%
another even as they run on the same
system<00:00:26.460><c> at</c><00:00:26.760><c> the</c><00:00:26.910><c> same</c><00:00:27.119><c> time</c><00:00:27.449><c> it's</c><00:00:28.350><c> also</c><00:00:28.560><c> the</c>

00:00:28.760 --> 00:00:28.770 align:start position:0%
system at the same time it's also the
 

00:00:28.770 --> 00:00:30.590 align:start position:0%
system at the same time it's also the
OSS<00:00:29.189><c> job</c><00:00:29.400><c> to</c><00:00:29.550><c> provide</c><00:00:29.789><c> an</c><00:00:29.939><c> interface</c><00:00:30.330><c> to</c><00:00:30.510><c> the</c>

00:00:30.590 --> 00:00:30.600 align:start position:0%
OSS job to provide an interface to the
 

00:00:30.600 --> 00:00:32.720 align:start position:0%
OSS job to provide an interface to the
hardware<00:00:30.930><c> for</c><00:00:31.140><c> the</c><00:00:31.230><c> processes</c><00:00:31.740><c> such</c><00:00:32.369><c> that</c><00:00:32.610><c> the</c>

00:00:32.720 --> 00:00:32.730 align:start position:0%
hardware for the processes such that the
 

00:00:32.730 --> 00:00:34.820 align:start position:0%
hardware for the processes such that the
OS<00:00:33.059><c> retains</c><00:00:33.510><c> old</c><00:00:33.809><c> direct</c><00:00:34.140><c> control</c><00:00:34.590><c> of</c><00:00:34.620><c> the</c>

00:00:34.820 --> 00:00:34.830 align:start position:0%
OS retains old direct control of the
 

00:00:34.830 --> 00:00:37.189 align:start position:0%
OS retains old direct control of the
hardware<00:00:35.190><c> devices</c><00:00:35.519><c> with</c><00:00:36.300><c> the</c><00:00:36.390><c> processes</c><00:00:36.870><c> only</c>

00:00:37.189 --> 00:00:37.199 align:start position:0%
hardware devices with the processes only
 

00:00:37.199 --> 00:00:38.630 align:start position:0%
hardware devices with the processes only
interacting<00:00:37.650><c> with</c><00:00:37.769><c> the</c><00:00:37.830><c> devices</c><00:00:38.250><c> via</c><00:00:38.430><c> so</c>

00:00:38.630 --> 00:00:38.640 align:start position:0%
interacting with the devices via so
 

00:00:38.640 --> 00:00:40.840 align:start position:0%
interacting with the devices via so
called<00:00:38.970><c> system</c><00:00:39.420><c> calls</c><00:00:39.660><c> provided</c><00:00:40.320><c> by</c><00:00:40.410><c> the</c><00:00:40.469><c> OS</c>

00:00:40.840 --> 00:00:40.850 align:start position:0%
called system calls provided by the OS
 

00:00:40.850 --> 00:00:44.090 align:start position:0%
called system calls provided by the OS
the<00:00:41.850><c> OS</c><00:00:42.149><c> also</c><00:00:42.540><c> provides</c><00:00:42.840><c> a</c><00:00:43.020><c> file</c><00:00:43.320><c> system</c><00:00:43.559><c> which</c>

00:00:44.090 --> 00:00:44.100 align:start position:0%
the OS also provides a file system which
 

00:00:44.100 --> 00:00:45.889 align:start position:0%
the OS also provides a file system which
abstract<00:00:44.520><c> over</c><00:00:44.820><c> the</c><00:00:44.910><c> storage</c><00:00:45.210><c> devices</c><00:00:45.540><c> such</c>

00:00:45.889 --> 00:00:45.899 align:start position:0%
abstract over the storage devices such
 

00:00:45.899 --> 00:00:47.750 align:start position:0%
abstract over the storage devices such
that<00:00:46.379><c> processes</c><00:00:46.920><c> can</c><00:00:47.100><c> read</c><00:00:47.280><c> and</c><00:00:47.430><c> write</c><00:00:47.520><c> files</c>

00:00:47.750 --> 00:00:47.760 align:start position:0%
that processes can read and write files
 

00:00:47.760 --> 00:00:49.760 align:start position:0%
that processes can read and write files
without<00:00:48.270><c> concern</c><00:00:48.570><c> for</c><00:00:48.600><c> how</c><00:00:48.989><c> precisely</c><00:00:49.440><c> they</c>

00:00:49.760 --> 00:00:49.770 align:start position:0%
without concern for how precisely they
 

00:00:49.770 --> 00:00:50.380 align:start position:0%
without concern for how precisely they
get<00:00:49.920><c> stored</c>

00:00:50.380 --> 00:00:50.390 align:start position:0%
get stored
 

00:00:50.390 --> 00:00:52.940 align:start position:0%
get stored
lastly<00:00:51.390><c> the</c><00:00:51.629><c> OS</c><00:00:51.899><c> provides</c><00:00:52.200><c> a</c><00:00:52.290><c> user</c><00:00:52.469><c> interface</c>

00:00:52.940 --> 00:00:52.950 align:start position:0%
lastly the OS provides a user interface
 

00:00:52.950 --> 00:00:55.369 align:start position:0%
lastly the OS provides a user interface
for<00:00:53.460><c> users</c><00:00:53.640><c> to</c><00:00:53.969><c> run</c><00:00:54.149><c> programs</c><00:00:54.390><c> and</c><00:00:54.899><c> manage</c><00:00:55.230><c> the</c>

00:00:55.369 --> 00:00:55.379 align:start position:0%
for users to run programs and manage the
 

00:00:55.379 --> 00:00:58.549 align:start position:0%
for users to run programs and manage the
file<00:00:55.559><c> system</c><00:00:56.989><c> the</c><00:00:57.989><c> most</c><00:00:58.110><c> widely</c><00:00:58.530><c> used</c>

00:00:58.549 --> 00:00:58.559 align:start position:0%
file system the most widely used
 

00:00:58.559 --> 00:01:00.650 align:start position:0%
file system the most widely used
operating<00:00:59.129><c> system</c><00:00:59.399><c> for</c><00:00:59.579><c> PCs</c><00:00:59.879><c> today</c><00:01:00.210><c> is</c><00:01:00.480><c> of</c>

00:01:00.650 --> 00:01:00.660 align:start position:0%
operating system for PCs today is of
 

00:01:00.660 --> 00:01:02.810 align:start position:0%
operating system for PCs today is of
course<00:01:00.899><c> Microsoft's</c><00:01:01.590><c> Windows</c><00:01:01.739><c> the</c><00:01:02.640><c> most</c>

00:01:02.810 --> 00:01:02.820 align:start position:0%
course Microsoft's Windows the most
 

00:01:02.820 --> 00:01:04.790 align:start position:0%
course Microsoft's Windows the most
recent<00:01:03.180><c> version</c><00:01:03.420><c> for</c><00:01:03.600><c> client</c><00:01:03.899><c> pcs</c><00:01:04.199><c> is</c><00:01:04.440><c> Windows</c>

00:01:04.790 --> 00:01:04.800 align:start position:0%
recent version for client pcs is Windows
 

00:01:04.800 --> 00:01:07.130 align:start position:0%
recent version for client pcs is Windows
8<00:01:05.009><c> and</c><00:01:05.220><c> the</c><00:01:05.729><c> variant</c><00:01:06.060><c> for</c><00:01:06.210><c> servers</c><00:01:06.539><c> is</c><00:01:06.690><c> Windows</c>

00:01:07.130 --> 00:01:07.140 align:start position:0%
8 and the variant for servers is Windows
 

00:01:07.140 --> 00:01:10.190 align:start position:0%
8 and the variant for servers is Windows
Server<00:01:07.440><c> 2012</c><00:01:08.390><c> the</c><00:01:09.390><c> main</c><00:01:09.539><c> alternatives</c><00:01:10.080><c> to</c>

00:01:10.190 --> 00:01:10.200 align:start position:0%
Server 2012 the main alternatives to
 

00:01:10.200 --> 00:01:11.900 align:start position:0%
Server 2012 the main alternatives to
Windows<00:01:10.470><c> are</c><00:01:10.649><c> all</c><00:01:10.770><c> descendants</c><00:01:11.310><c> of</c><00:01:11.399><c> the</c><00:01:11.520><c> UNIX</c>

00:01:11.900 --> 00:01:11.910 align:start position:0%
Windows are all descendants of the UNIX
 

00:01:11.910 --> 00:01:13.880 align:start position:0%
Windows are all descendants of the UNIX
operating<00:01:12.060><c> system</c><00:01:12.420><c> which</c><00:01:13.229><c> was</c><00:01:13.409><c> created</c><00:01:13.799><c> in</c>

00:01:13.880 --> 00:01:13.890 align:start position:0%
operating system which was created in
 

00:01:13.890 --> 00:01:16.789 align:start position:0%
operating system which was created in
the<00:01:13.950><c> early</c><00:01:14.040><c> 1970s</c><00:01:14.960><c> these</c><00:01:15.960><c> descendants</c><00:01:16.530><c> don't</c>

00:01:16.789 --> 00:01:16.799 align:start position:0%
the early 1970s these descendants don't
 

00:01:16.799 --> 00:01:18.560 align:start position:0%
the early 1970s these descendants don't
use<00:01:16.950><c> any</c><00:01:17.159><c> actual</c><00:01:17.640><c> code</c><00:01:17.970><c> from</c><00:01:18.150><c> the</c><00:01:18.270><c> original</c>

00:01:18.560 --> 00:01:18.570 align:start position:0%
use any actual code from the original
 

00:01:18.570 --> 00:01:19.760 align:start position:0%
use any actual code from the original
UNIX<00:01:18.869><c> but</c><00:01:19.290><c> they</c><00:01:19.380><c> share</c><00:01:19.560><c> some</c><00:01:19.740><c> common</c>

00:01:19.760 --> 00:01:19.770 align:start position:0%
UNIX but they share some common
 

00:01:19.770 --> 00:01:22.580 align:start position:0%
UNIX but they share some common
structure<00:01:20.340><c> and</c><00:01:20.549><c> conventions</c><00:01:21.119><c> both</c><00:01:21.990><c> linux</c><00:01:22.409><c> and</c>

00:01:22.580 --> 00:01:22.590 align:start position:0%
structure and conventions both linux and
 

00:01:22.590 --> 00:01:24.560 align:start position:0%
structure and conventions both linux and
bsd<00:01:22.850><c> short</c><00:01:23.850><c> for</c><00:01:24.000><c> berkeley</c><00:01:24.360><c> software</c>

00:01:24.560 --> 00:01:24.570 align:start position:0%
bsd short for berkeley software
 

00:01:24.570 --> 00:01:26.660 align:start position:0%
bsd short for berkeley software
distribution<00:01:24.869><c> are</c><00:01:25.470><c> unix-like</c><00:01:26.460><c> operating</c>

00:01:26.660 --> 00:01:26.670 align:start position:0%
distribution are unix-like operating
 

00:01:26.670 --> 00:01:28.580 align:start position:0%
distribution are unix-like operating
systems<00:01:27.360><c> that</c><00:01:27.479><c> are</c><00:01:27.780><c> free</c><00:01:27.990><c> and</c><00:01:28.080><c> open</c><00:01:28.170><c> source</c>

00:01:28.580 --> 00:01:28.590 align:start position:0%
systems that are free and open source
 

00:01:28.590 --> 00:01:30.320 align:start position:0%
systems that are free and open source
and<00:01:28.799><c> developed</c><00:01:29.310><c> by</c><00:01:29.340><c> a</c><00:01:29.460><c> scattered</c><00:01:29.909><c> community</c>

00:01:30.320 --> 00:01:30.330 align:start position:0%
and developed by a scattered community
 

00:01:30.330 --> 00:01:32.840 align:start position:0%
and developed by a scattered community
around<00:01:30.509><c> the</c><00:01:30.659><c> world</c><00:01:30.950><c> Apple's</c><00:01:31.950><c> OS</c><00:01:32.130><c> 10</c><00:01:32.549><c> was</c>

00:01:32.840 --> 00:01:32.850 align:start position:0%
around the world Apple's OS 10 was
 

00:01:32.850 --> 00:01:35.090 align:start position:0%
around the world Apple's OS 10 was
originally<00:01:33.210><c> based</c><00:01:33.330><c> on</c><00:01:33.540><c> a</c><00:01:33.570><c> variant</c><00:01:33.960><c> of</c><00:01:34.049><c> BSD</c><00:01:34.530><c> but</c>

00:01:35.090 --> 00:01:35.100 align:start position:0%
originally based on a variant of BSD but
 

00:01:35.100 --> 00:01:37.340 align:start position:0%
originally based on a variant of BSD but
is<00:01:35.310><c> itself</c><00:01:35.640><c> proprietary</c><00:01:36.330><c> and</c><00:01:36.600><c> only</c><00:01:36.960><c> legally</c>

00:01:37.340 --> 00:01:37.350 align:start position:0%
is itself proprietary and only legally
 

00:01:37.350 --> 00:01:39.530 align:start position:0%
is itself proprietary and only legally
available<00:01:37.560><c> for</c><00:01:37.979><c> Apple's</c><00:01:38.310><c> own</c><00:01:38.460><c> computers</c><00:01:39.030><c> even</c>

00:01:39.530 --> 00:01:39.540 align:start position:0%
available for Apple's own computers even
 

00:01:39.540 --> 00:01:41.090 align:start position:0%
available for Apple's own computers even
though<00:01:39.810><c> the</c><00:01:39.960><c> underlying</c><00:01:40.110><c> apple</c><00:01:40.619><c> hardware</c><00:01:40.950><c> is</c>

00:01:41.090 --> 00:01:41.100 align:start position:0%
though the underlying apple hardware is
 

00:01:41.100 --> 00:01:43.850 align:start position:0%
though the underlying apple hardware is
the<00:01:41.130><c> same</c><00:01:41.400><c> as</c><00:01:41.520><c> standard</c><00:01:41.820><c> PC</c><00:01:42.150><c> hardware</c><00:01:42.860><c> except</c>

00:01:43.850 --> 00:01:43.860 align:start position:0%
the same as standard PC hardware except
 

00:01:43.860 --> 00:01:45.350 align:start position:0%
the same as standard PC hardware except
when<00:01:43.979><c> we</c><00:01:44.070><c> discuss</c><00:01:44.400><c> file</c><00:01:44.640><c> systems</c><00:01:45.119><c> all</c><00:01:45.299><c> the</c>

00:01:45.350 --> 00:01:45.360 align:start position:0%
when we discuss file systems all the
 

00:01:45.360 --> 00:01:46.910 align:start position:0%
when we discuss file systems all the
information<00:01:46.229><c> in</c><00:01:46.350><c> this</c><00:01:46.470><c> unit</c><00:01:46.770><c> will</c><00:01:46.890><c> be</c>

00:01:46.910 --> 00:01:46.920 align:start position:0%
information in this unit will be
 

00:01:46.920 --> 00:01:49.160 align:start position:0%
information in this unit will be
platform<00:01:47.490><c> agnostic</c><00:01:47.689><c> applicable</c><00:01:48.689><c> to</c><00:01:49.049><c> both</c>

00:01:49.160 --> 00:01:49.170 align:start position:0%
platform agnostic applicable to both
 

00:01:49.170 --> 00:01:52.490 align:start position:0%
platform agnostic applicable to both
Windows<00:01:49.590><c> and</c><00:01:49.799><c> UNIX</c><00:01:50.009><c> systems</c>

00:01:52.490 --> 00:01:52.500 align:start position:0%
Windows and UNIX systems
 

00:01:52.500 --> 00:01:55.130 align:start position:0%
Windows and UNIX systems
a<00:01:52.530><c> device</c><00:01:53.520><c> driver</c><00:01:53.820><c> is</c><00:01:53.940><c> a</c><00:01:54.090><c> plug-in</c><00:01:54.600><c> module</c><00:01:54.990><c> of</c>

00:01:55.130 --> 00:01:55.140 align:start position:0%
a device driver is a plug-in module of
 

00:01:55.140 --> 00:01:57.230 align:start position:0%
a device driver is a plug-in module of
the<00:01:55.260><c> OS</c><00:01:55.560><c> that</c><00:01:55.950><c> handles</c><00:01:56.370><c> the</c><00:01:56.490><c> management</c><00:01:57.030><c> of</c><00:01:57.120><c> a</c>

00:01:57.230 --> 00:01:57.240 align:start position:0%
the OS that handles the management of a
 

00:01:57.240 --> 00:01:59.900 align:start position:0%
the OS that handles the management of a
particular<00:01:57.780><c> i/o</c><00:01:57.960><c> device</c><00:01:58.470><c> some</c><00:01:59.430><c> standardized</c>

00:01:59.900 --> 00:01:59.910 align:start position:0%
particular i/o device some standardized
 

00:01:59.910 --> 00:02:01.430 align:start position:0%
particular i/o device some standardized
devices<00:02:00.360><c> may</c><00:02:00.480><c> function</c><00:02:00.900><c> with</c><00:02:01.050><c> a</c><00:02:01.080><c> generic</c>

00:02:01.430 --> 00:02:01.440 align:start position:0%
devices may function with a generic
 

00:02:01.440 --> 00:02:03.950 align:start position:0%
devices may function with a generic
driver<00:02:01.740><c> eg</c><00:02:02.370><c> a</c><00:02:02.400><c> USB</c><00:02:02.970><c> mouse</c><00:02:03.120><c> may</c><00:02:03.420><c> perform</c><00:02:03.720><c> old</c>

00:02:03.950 --> 00:02:03.960 align:start position:0%
driver eg a USB mouse may perform old
 

00:02:03.960 --> 00:02:05.930 align:start position:0%
driver eg a USB mouse may perform old
common<00:02:04.380><c> USB</c><00:02:04.740><c> mouse</c><00:02:04.890><c> functionality</c><00:02:05.670><c> with</c><00:02:05.910><c> a</c>

00:02:05.930 --> 00:02:05.940 align:start position:0%
common USB mouse functionality with a
 

00:02:05.940 --> 00:02:07.600 align:start position:0%
common USB mouse functionality with a
driver<00:02:06.270><c> written</c><00:02:06.600><c> for</c><00:02:06.750><c> a</c><00:02:06.780><c> generic</c><00:02:07.020><c> USB</c><00:02:07.230><c> mouse</c>

00:02:07.600 --> 00:02:07.610 align:start position:0%
driver written for a generic USB mouse
 

00:02:07.610 --> 00:02:09.919 align:start position:0%
driver written for a generic USB mouse
however<00:02:08.610><c> many</c><00:02:08.940><c> devices</c><00:02:09.390><c> require</c><00:02:09.690><c> more</c>

00:02:09.919 --> 00:02:09.929 align:start position:0%
however many devices require more
 

00:02:09.929 --> 00:02:12.260 align:start position:0%
however many devices require more
specific<00:02:10.410><c> driver</c><00:02:10.619><c> for</c><00:02:11.280><c> example</c><00:02:11.610><c> in</c><00:02:11.760><c> my</c><00:02:11.880><c> system</c>

00:02:12.260 --> 00:02:12.270 align:start position:0%
specific driver for example in my system
 

00:02:12.270 --> 00:02:13.880 align:start position:0%
specific driver for example in my system
using<00:02:12.720><c> the</c><00:02:12.810><c> generic</c><00:02:13.110><c> graphic</c><00:02:13.530><c> strawberry</c>

00:02:13.880 --> 00:02:13.890 align:start position:0%
using the generic graphic strawberry
 

00:02:13.890 --> 00:02:15.680 align:start position:0%
using the generic graphic strawberry
provided<00:02:14.250><c> by</c><00:02:14.340><c> Windows</c><00:02:14.760><c> only</c><00:02:15.150><c> provides</c><00:02:15.450><c> bare</c>

00:02:15.680 --> 00:02:15.690 align:start position:0%
provided by Windows only provides bare
 

00:02:15.690 --> 00:02:17.690 align:start position:0%
provided by Windows only provides bare
minimum<00:02:16.080><c> functionality</c><00:02:16.560><c> to</c><00:02:17.340><c> run</c><00:02:17.490><c> high</c>

00:02:17.690 --> 00:02:17.700 align:start position:0%
minimum functionality to run high
 

00:02:17.700 --> 00:02:18.980 align:start position:0%
minimum functionality to run high
resolutions<00:02:18.270><c> and</c><00:02:18.390><c> play</c><00:02:18.540><c> games</c>

00:02:18.980 --> 00:02:18.990 align:start position:0%
resolutions and play games
 

00:02:18.990 --> 00:02:20.780 align:start position:0%
resolutions and play games
I<00:02:19.080><c> must</c><00:02:19.560><c> install</c><00:02:19.860><c> the</c><00:02:20.010><c> driver</c><00:02:20.220><c> provided</c><00:02:20.700><c> by</c>

00:02:20.780 --> 00:02:20.790 align:start position:0%
I must install the driver provided by
 

00:02:20.790 --> 00:02:24.150 align:start position:0%
I must install the driver provided by
AMD<00:02:21.150><c> for</c><00:02:21.600><c> my</c><00:02:21.750><c> Radeon</c><00:02:22.170><c> graphics</c><00:02:22.230><c> card</c>

00:02:24.150 --> 00:02:24.160 align:start position:0%
AMD for my Radeon graphics card
 

00:02:24.160 --> 00:02:26.400 align:start position:0%
AMD for my Radeon graphics card
a<00:02:24.190><c> primary</c><00:02:25.120><c> purpose</c><00:02:25.450><c> of</c><00:02:25.780><c> modern</c><00:02:26.140><c> operating</c>

00:02:26.400 --> 00:02:26.410 align:start position:0%
a primary purpose of modern operating
 

00:02:26.410 --> 00:02:28.020 align:start position:0%
a primary purpose of modern operating
systems<00:02:26.560><c> is</c><00:02:27.280><c> to</c><00:02:27.490><c> allow</c><00:02:27.640><c> for</c><00:02:27.880><c> multiple</c>

00:02:28.020 --> 00:02:28.030 align:start position:0%
systems is to allow for multiple
 

00:02:28.030 --> 00:02:30.660 align:start position:0%
systems is to allow for multiple
processes<00:02:28.720><c> to</c><00:02:28.900><c> run</c><00:02:29.080><c> concurrently</c><00:02:29.860><c> meaning</c><00:02:30.550><c> at</c>

00:02:30.660 --> 00:02:30.670 align:start position:0%
processes to run concurrently meaning at
 

00:02:30.670 --> 00:02:33.000 align:start position:0%
processes to run concurrently meaning at
the<00:02:30.790><c> same</c><00:02:30.940><c> time</c><00:02:31.270><c> the</c><00:02:32.170><c> problem</c><00:02:32.500><c> of</c><00:02:32.620><c> course</c><00:02:32.770><c> is</c>

00:02:33.000 --> 00:02:33.010 align:start position:0%
the same time the problem of course is
 

00:02:33.010 --> 00:02:35.100 align:start position:0%
the same time the problem of course is
that<00:02:33.070><c> each</c><00:02:33.340><c> CPU</c><00:02:33.760><c> core</c><00:02:34.030><c> can</c><00:02:34.240><c> only</c><00:02:34.480><c> execute</c><00:02:34.840><c> the</c>

00:02:35.100 --> 00:02:35.110 align:start position:0%
that each CPU core can only execute the
 

00:02:35.110 --> 00:02:37.410 align:start position:0%
that each CPU core can only execute the
code<00:02:35.260><c> of</c><00:02:35.440><c> one</c><00:02:35.620><c> process</c><00:02:36.130><c> at</c><00:02:36.280><c> a</c><00:02:36.310><c> time</c><00:02:36.610><c> and</c><00:02:36.820><c> the</c>

00:02:37.410 --> 00:02:37.420 align:start position:0%
code of one process at a time and the
 

00:02:37.420 --> 00:02:39.570 align:start position:0%
code of one process at a time and the
OSS<00:02:37.930><c> own</c><00:02:38.110><c> code</c><00:02:38.380><c> can't</c><00:02:38.680><c> run</c><00:02:38.890><c> on</c><00:02:38.920><c> a</c><00:02:39.070><c> core</c><00:02:39.310><c> at</c><00:02:39.520><c> the</c>

00:02:39.570 --> 00:02:39.580 align:start position:0%
OSS own code can't run on a core at the
 

00:02:39.580 --> 00:02:42.330 align:start position:0%
OSS own code can't run on a core at the
same<00:02:39.850><c> time</c><00:02:40.060><c> as</c><00:02:40.240><c> any</c><00:02:40.450><c> process</c><00:02:40.920><c> the</c><00:02:41.920><c> solution</c>

00:02:42.330 --> 00:02:42.340 align:start position:0%
same time as any process the solution
 

00:02:42.340 --> 00:02:44.550 align:start position:0%
same time as any process the solution
then<00:02:42.490><c> is</c><00:02:42.700><c> to</c><00:02:42.850><c> have</c><00:02:43.000><c> each</c><00:02:43.210><c> CPU</c><00:02:43.480><c> core</c><00:02:43.930><c> alternate</c>

00:02:44.550 --> 00:02:44.560 align:start position:0%
then is to have each CPU core alternate
 

00:02:44.560 --> 00:02:46.320 align:start position:0%
then is to have each CPU core alternate
between<00:02:44.740><c> running</c><00:02:45.190><c> each</c><00:02:45.430><c> open</c><00:02:45.820><c> process</c><00:02:46.240><c> and</c>

00:02:46.320 --> 00:02:46.330 align:start position:0%
between running each open process and
 

00:02:46.330 --> 00:02:48.720 align:start position:0%
between running each open process and
alternate<00:02:47.320><c> running</c><00:02:47.620><c> processes</c><00:02:48.040><c> with</c><00:02:48.370><c> running</c>

00:02:48.720 --> 00:02:48.730 align:start position:0%
alternate running processes with running
 

00:02:48.730 --> 00:02:52.020 align:start position:0%
alternate running processes with running
OS<00:02:49.090><c> code</c><00:02:49.470><c> so</c><00:02:50.470><c> here</c><00:02:50.770><c> if</c><00:02:50.890><c> we</c><00:02:51.010><c> have</c><00:02:51.190><c> two</c><00:02:51.370><c> CPU</c><00:02:51.760><c> cores</c>

00:02:52.020 --> 00:02:52.030 align:start position:0%
OS code so here if we have two CPU cores
 

00:02:52.030 --> 00:02:54.150 align:start position:0%
OS code so here if we have two CPU cores
and<00:02:52.270><c> three</c><00:02:52.540><c> open</c><00:02:52.660><c> processes</c><00:02:53.200><c> a</c><00:02:53.500><c> B</c><00:02:53.800><c> and</c><00:02:53.950><c> C</c>

00:02:54.150 --> 00:02:54.160 align:start position:0%
and three open processes a B and C
 

00:02:54.160 --> 00:02:56.340 align:start position:0%
and three open processes a B and C
notice<00:02:54.850><c> that</c><00:02:55.060><c> each</c><00:02:55.180><c> process</c><00:02:55.450><c> only</c><00:02:55.870><c> runs</c><00:02:56.140><c> on</c>

00:02:56.340 --> 00:02:56.350 align:start position:0%
notice that each process only runs on
 

00:02:56.350 --> 00:02:58.920 align:start position:0%
notice that each process only runs on
one<00:02:56.560><c> core</c><00:02:56.830><c> at</c><00:02:57.010><c> a</c><00:02:57.040><c> time</c><00:02:57.370><c> at</c><00:02:57.640><c> no</c><00:02:58.240><c> point</c><00:02:58.450><c> does</c><00:02:58.690><c> say</c>

00:02:58.920 --> 00:02:58.930 align:start position:0%
one core at a time at no point does say
 

00:02:58.930 --> 00:03:01.140 align:start position:0%
one core at a time at no point does say
process<00:02:59.440><c> B</c><00:02:59.650><c> run</c><00:02:59.980><c> simultaneously</c><00:03:00.340><c> on</c><00:03:00.850><c> both</c><00:03:00.880><c> of</c>

00:03:01.140 --> 00:03:01.150 align:start position:0%
process B run simultaneously on both of
 

00:03:01.150 --> 00:03:03.990 align:start position:0%
process B run simultaneously on both of
the<00:03:01.210><c> two</c><00:03:01.360><c> cores</c><00:03:02.010><c> also</c><00:03:03.010><c> notice</c><00:03:03.280><c> that</c><00:03:03.310><c> OS</c><00:03:03.760><c> code</c>

00:03:03.990 --> 00:03:04.000 align:start position:0%
the two cores also notice that OS code
 

00:03:04.000 --> 00:03:05.970 align:start position:0%
the two cores also notice that OS code
always<00:03:04.300><c> runs</c><00:03:04.510><c> on</c><00:03:04.750><c> each</c><00:03:04.900><c> core</c><00:03:05.170><c> in</c><00:03:05.380><c> between</c><00:03:05.800><c> each</c>

00:03:05.970 --> 00:03:05.980 align:start position:0%
always runs on each core in between each
 

00:03:05.980 --> 00:03:08.160 align:start position:0%
always runs on each core in between each
process<00:03:06.490><c> what's</c><00:03:07.270><c> happening</c><00:03:07.360><c> here</c><00:03:07.840><c> is</c><00:03:07.990><c> that</c><00:03:08.020><c> a</c>

00:03:08.160 --> 00:03:08.170 align:start position:0%
process what's happening here is that a
 

00:03:08.170 --> 00:03:10.170 align:start position:0%
process what's happening here is that a
portion<00:03:08.620><c> of</c><00:03:08.740><c> the</c><00:03:08.920><c> OS</c><00:03:09.220><c> called</c><00:03:09.550><c> the</c><00:03:09.670><c> scheduler</c>

00:03:10.170 --> 00:03:10.180 align:start position:0%
portion of the OS called the scheduler
 

00:03:10.180 --> 00:03:12.420 align:start position:0%
portion of the OS called the scheduler
runs<00:03:10.780><c> after</c><00:03:10.990><c> each</c><00:03:11.200><c> process</c><00:03:11.710><c> to</c><00:03:11.920><c> decide</c><00:03:12.070><c> what</c>

00:03:12.420 --> 00:03:12.430 align:start position:0%
runs after each process to decide what
 

00:03:12.430 --> 00:03:14.580 align:start position:0%
runs after each process to decide what
OS<00:03:12.700><c> work</c><00:03:12.940><c> if</c><00:03:13.090><c> any</c><00:03:13.270><c> should</c><00:03:13.510><c> be</c><00:03:13.600><c> done</c><00:03:13.810><c> and</c><00:03:14.020><c> which</c>

00:03:14.580 --> 00:03:14.590 align:start position:0%
OS work if any should be done and which
 

00:03:14.590 --> 00:03:17.250 align:start position:0%
OS work if any should be done and which
process<00:03:15.040><c> should</c><00:03:15.220><c> run</c><00:03:15.400><c> next</c><00:03:15.870><c> the</c><00:03:16.870><c> question</c>

00:03:17.250 --> 00:03:17.260 align:start position:0%
process should run next the question
 

00:03:17.260 --> 00:03:18.750 align:start position:0%
process should run next the question
then<00:03:17.440><c> is</c><00:03:17.650><c> how</c><00:03:17.950><c> does</c><00:03:18.160><c> the</c><00:03:18.280><c> currently</c><00:03:18.580><c> running</c>

00:03:18.750 --> 00:03:18.760 align:start position:0%
then is how does the currently running
 

00:03:18.760 --> 00:03:21.360 align:start position:0%
then is how does the currently running
process<00:03:19.240><c> get</c><00:03:19.450><c> interrupted</c><00:03:19.830><c> left</c><00:03:20.830><c> on</c><00:03:21.010><c> its</c><00:03:21.220><c> own</c>

00:03:21.360 --> 00:03:21.370 align:start position:0%
process get interrupted left on its own
 

00:03:21.370 --> 00:03:22.950 align:start position:0%
process get interrupted left on its own
a<00:03:21.550><c> running</c><00:03:21.880><c> process</c><00:03:22.030><c> would</c><00:03:22.510><c> continue</c>

00:03:22.950 --> 00:03:22.960 align:start position:0%
a running process would continue
 

00:03:22.960 --> 00:03:25.170 align:start position:0%
a running process would continue
indefinitely<00:03:23.260><c> when</c><00:03:24.190><c> any</c><00:03:24.400><c> hardware</c><00:03:24.700><c> interrupt</c>

00:03:25.170 --> 00:03:25.180 align:start position:0%
indefinitely when any hardware interrupt
 

00:03:25.180 --> 00:03:26.790 align:start position:0%
indefinitely when any hardware interrupt
is<00:03:25.300><c> triggered</c><00:03:25.600><c> however</c><00:03:25.900><c> the</c><00:03:26.410><c> interrupt</c>

00:03:26.790 --> 00:03:26.800 align:start position:0%
is triggered however the interrupt
 

00:03:26.800 --> 00:03:28.350 align:start position:0%
is triggered however the interrupt
handler<00:03:27.100><c> passes</c><00:03:27.580><c> off</c><00:03:27.700><c> control</c><00:03:28.120><c> to</c><00:03:28.240><c> the</c>

00:03:28.350 --> 00:03:28.360 align:start position:0%
handler passes off control to the
 

00:03:28.360 --> 00:03:29.910 align:start position:0%
handler passes off control to the
scheduler<00:03:28.810><c> rather</c><00:03:29.320><c> than</c><00:03:29.530><c> handing</c><00:03:29.860><c> the</c>

00:03:29.910 --> 00:03:29.920 align:start position:0%
scheduler rather than handing the
 

00:03:29.920 --> 00:03:31.620 align:start position:0%
scheduler rather than handing the
processor<00:03:30.400><c> core</c><00:03:30.610><c> back</c><00:03:30.910><c> to</c><00:03:31.060><c> the</c><00:03:31.150><c> interrupted</c>

00:03:31.620 --> 00:03:31.630 align:start position:0%
processor core back to the interrupted
 

00:03:31.630 --> 00:03:33.780 align:start position:0%
processor core back to the interrupted
process<00:03:32.050><c> the</c><00:03:32.620><c> scheduler</c><00:03:33.040><c> then</c><00:03:33.220><c> decides</c><00:03:33.550><c> what</c>

00:03:33.780 --> 00:03:33.790 align:start position:0%
process the scheduler then decides what
 

00:03:33.790 --> 00:03:36.060 align:start position:0%
process the scheduler then decides what
OS<00:03:34.060><c> code</c><00:03:34.270><c> to</c><00:03:34.390><c> run</c><00:03:34.540><c> if</c><00:03:34.780><c> any</c><00:03:35.020><c> and</c><00:03:35.260><c> what</c><00:03:35.650><c> process</c>

00:03:36.060 --> 00:03:36.070 align:start position:0%
OS code to run if any and what process
 

00:03:36.070 --> 00:03:38.520 align:start position:0%
OS code to run if any and what process
should<00:03:36.250><c> run</c><00:03:36.400><c> next</c><00:03:36.730><c> laid</c><00:03:37.630><c> out</c><00:03:37.780><c> in</c><00:03:37.930><c> full</c><00:03:38.200><c> the</c>

00:03:38.520 --> 00:03:38.530 align:start position:0%
should run next laid out in full the
 

00:03:38.530 --> 00:03:39.950 align:start position:0%
should run next laid out in full the
scheme<00:03:38.860><c> called</c><00:03:39.220><c> pre-emptive</c><00:03:39.790><c> multitasking</c>

00:03:39.950 --> 00:03:39.960 align:start position:0%
scheme called pre-emptive multitasking
 

00:03:39.960 --> 00:03:43.110 align:start position:0%
scheme called pre-emptive multitasking
works<00:03:40.960><c> like</c><00:03:41.140><c> this</c><00:03:41.320><c> first</c><00:03:42.220><c> the</c><00:03:42.460><c> CPU</c><00:03:42.820><c> receives</c>

00:03:43.110 --> 00:03:43.120 align:start position:0%
works like this first the CPU receives
 

00:03:43.120 --> 00:03:44.880 align:start position:0%
works like this first the CPU receives
some<00:03:43.330><c> hardware</c><00:03:43.690><c> interrupts</c><00:03:44.110><c> then</c><00:03:44.740><c> the</c>

00:03:44.880 --> 00:03:44.890 align:start position:0%
some hardware interrupts then the
 

00:03:44.890 --> 00:03:46.590 align:start position:0%
some hardware interrupts then the
interrupt<00:03:45.280><c> stores</c><00:03:45.520><c> the</c><00:03:45.700><c> program</c><00:03:46.030><c> counter</c><00:03:46.210><c> so</c>

00:03:46.590 --> 00:03:46.600 align:start position:0%
interrupt stores the program counter so
 

00:03:46.600 --> 00:03:47.880 align:start position:0%
interrupt stores the program counter so
that<00:03:46.750><c> the</c><00:03:46.840><c> interrupted</c><00:03:47.260><c> code</c><00:03:47.470><c> can</c><00:03:47.680><c> resume</c>

00:03:47.880 --> 00:03:47.890 align:start position:0%
that the interrupted code can resume
 

00:03:47.890 --> 00:03:49.830 align:start position:0%
that the interrupted code can resume
later<00:03:48.160><c> the</c><00:03:48.910><c> interrupt</c><00:03:49.330><c> invokes</c><00:03:49.660><c> the</c>

00:03:49.830 --> 00:03:49.840 align:start position:0%
later the interrupt invokes the
 

00:03:49.840 --> 00:03:51.930 align:start position:0%
later the interrupt invokes the
appropriate<00:03:50.290><c> handler</c><00:03:50.650><c> the</c><00:03:51.280><c> handler</c><00:03:51.580><c> itself</c>

00:03:51.930 --> 00:03:51.940 align:start position:0%
appropriate handler the handler itself
 

00:03:51.940 --> 00:03:53.460 align:start position:0%
appropriate handler the handler itself
saves<00:03:52.210><c> the</c><00:03:52.390><c> state</c><00:03:52.450><c> of</c><00:03:52.780><c> the</c><00:03:52.870><c> other</c><00:03:52.990><c> CPU</c>

00:03:53.460 --> 00:03:53.470 align:start position:0%
saves the state of the other CPU
 

00:03:53.470 --> 00:03:54.870 align:start position:0%
saves the state of the other CPU
registers<00:03:53.920><c> so</c><00:03:54.220><c> that</c><00:03:54.370><c> the</c><00:03:54.459><c> interrupted</c>

00:03:54.870 --> 00:03:54.880 align:start position:0%
registers so that the interrupted
 

00:03:54.880 --> 00:03:56.910 align:start position:0%
registers so that the interrupted
process<00:03:55.240><c> can</c><00:03:55.390><c> be</c><00:03:55.450><c> resumed</c><00:03:55.690><c> later</c><00:03:55.840><c> the</c><00:03:56.620><c> handler</c>

00:03:56.910 --> 00:03:56.920 align:start position:0%
process can be resumed later the handler
 

00:03:56.920 --> 00:03:58.230 align:start position:0%
process can be resumed later the handler
does<00:03:57.070><c> whatever</c><00:03:57.370><c> business</c><00:03:57.610><c> the</c><00:03:57.880><c> interrupting</c>

00:03:58.230 --> 00:03:58.240 align:start position:0%
does whatever business the interrupting
 

00:03:58.240 --> 00:04:00.390 align:start position:0%
does whatever business the interrupting
device<00:03:58.450><c> needs</c><00:03:58.780><c> the</c><00:03:59.500><c> handler</c><00:03:59.800><c> then</c><00:03:59.980><c> invokes</c><00:04:00.280><c> a</c>

00:04:00.390 --> 00:04:00.400 align:start position:0%
device needs the handler then invokes a
 

00:04:00.400 --> 00:04:02.010 align:start position:0%
device needs the handler then invokes a
scheduler<00:04:00.850><c> and</c><00:04:01.030><c> the</c><00:04:01.360><c> scheduler</c><00:04:01.720><c> selects</c><00:04:01.930><c> a</c>

00:04:02.010 --> 00:04:02.020 align:start position:0%
scheduler and the scheduler selects a
 

00:04:02.020 --> 00:04:03.810 align:start position:0%
scheduler and the scheduler selects a
process<00:04:02.350><c> to</c><00:04:02.470><c> run</c><00:04:02.650><c> the</c><00:04:03.220><c> scheduler</c><00:04:03.640><c> then</c>

00:04:03.810 --> 00:04:03.820 align:start position:0%
process to run the scheduler then
 

00:04:03.820 --> 00:04:05.580 align:start position:0%
process to run the scheduler then
restores<00:04:04.180><c> the</c><00:04:04.300><c> CPU</c><00:04:04.690><c> registers</c><00:04:05.140><c> to</c><00:04:05.320><c> the</c><00:04:05.350><c> state</c>

00:04:05.580 --> 00:04:05.590 align:start position:0%
restores the CPU registers to the state
 

00:04:05.590 --> 00:04:07.170 align:start position:0%
restores the CPU registers to the state
they<00:04:05.709><c> were</c><00:04:05.770><c> in</c><00:04:05.980><c> when</c><00:04:06.160><c> that</c><00:04:06.310><c> process</c><00:04:06.760><c> was</c><00:04:06.940><c> last</c>

00:04:07.170 --> 00:04:07.180 align:start position:0%
they were in when that process was last
 

00:04:07.180 --> 00:04:08.610 align:start position:0%
they were in when that process was last
running<00:04:07.540><c> so</c><00:04:07.750><c> that</c><00:04:07.780><c> that</c><00:04:08.050><c> process</c><00:04:08.290><c> may</c>

00:04:08.610 --> 00:04:08.620 align:start position:0%
running so that that process may
 

00:04:08.620 --> 00:04:10.949 align:start position:0%
running so that that process may
continue<00:04:09.100><c> and</c><00:04:09.250><c> finally</c><00:04:10.120><c> the</c><00:04:10.300><c> scheduler</c><00:04:10.660><c> jumps</c>

00:04:10.949 --> 00:04:10.959 align:start position:0%
continue and finally the scheduler jumps
 

00:04:10.959 --> 00:04:14.280 align:start position:0%
continue and finally the scheduler jumps
execution<00:04:11.530><c> to</c><00:04:11.680><c> that</c><00:04:11.830><c> process</c><00:04:12.840><c> you</c><00:04:13.840><c> may</c><00:04:13.959><c> now</c><00:04:14.140><c> be</c>

00:04:14.280 --> 00:04:14.290 align:start position:0%
execution to that process you may now be
 

00:04:14.290 --> 00:04:16.590 align:start position:0%
execution to that process you may now be
wondering<00:04:14.650><c> two</c><00:04:14.830><c> things</c><00:04:15.190><c> first</c><00:04:16.030><c> what</c><00:04:16.330><c> if</c><00:04:16.480><c> no</c>

00:04:16.590 --> 00:04:16.600 align:start position:0%
wondering two things first what if no
 

00:04:16.600 --> 00:04:18.330 align:start position:0%
wondering two things first what if no
interrupt<00:04:17.020><c> is</c><00:04:17.170><c> triggered</c><00:04:17.500><c> by</c><00:04:17.590><c> any</c><00:04:17.770><c> device</c><00:04:18.100><c> for</c>

00:04:18.330 --> 00:04:18.340 align:start position:0%
interrupt is triggered by any device for
 

00:04:18.340 --> 00:04:19.979 align:start position:0%
interrupt is triggered by any device for
a<00:04:18.400><c> long</c><00:04:18.580><c> time</c><00:04:18.910><c> that</c><00:04:19.570><c> would</c><00:04:19.750><c> allow</c><00:04:19.930><c> the</c>

00:04:19.979 --> 00:04:19.989 align:start position:0%
a long time that would allow the
 

00:04:19.989 --> 00:04:21.960 align:start position:0%
a long time that would allow the
currently<00:04:20.410><c> running</c><00:04:20.590><c> process</c><00:04:21.070><c> to</c><00:04:21.250><c> hog</c><00:04:21.400><c> the</c><00:04:21.549><c> CPU</c>

00:04:21.960 --> 00:04:21.970 align:start position:0%
currently running process to hog the CPU
 

00:04:21.970 --> 00:04:23.910 align:start position:0%
currently running process to hog the CPU
when<00:04:22.300><c> generally</c><00:04:22.780><c> we</c><00:04:22.930><c> want</c><00:04:23.080><c> each</c><00:04:23.290><c> process</c><00:04:23.740><c> to</c>

00:04:23.910 --> 00:04:23.920 align:start position:0%
when generally we want each process to
 

00:04:23.920 --> 00:04:25.260 align:start position:0%
when generally we want each process to
at<00:04:24.070><c> least</c><00:04:24.220><c> get</c><00:04:24.430><c> a</c><00:04:24.490><c> little</c><00:04:24.580><c> time</c><00:04:24.970><c> on</c><00:04:25.000><c> a</c><00:04:25.180><c> regular</c>

00:04:25.260 --> 00:04:25.270 align:start position:0%
at least get a little time on a regular
 

00:04:25.270 --> 00:04:27.720 align:start position:0%
at least get a little time on a regular
basis<00:04:25.930><c> say</c><00:04:26.350><c> every</c><00:04:26.620><c> several</c><00:04:26.920><c> seconds</c><00:04:27.280><c> or</c><00:04:27.370><c> so</c><00:04:27.520><c> a</c>

00:04:27.720 --> 00:04:27.730 align:start position:0%
basis say every several seconds or so a
 

00:04:27.730 --> 00:04:30.000 align:start position:0%
basis say every several seconds or so a
videogame<00:04:28.720><c> for</c><00:04:28.930><c> example</c><00:04:29.260><c> typically</c><00:04:29.590><c> can't</c><00:04:29.830><c> go</c>

00:04:30.000 --> 00:04:30.010 align:start position:0%
videogame for example typically can't go
 

00:04:30.010 --> 00:04:31.500 align:start position:0%
videogame for example typically can't go
without<00:04:30.130><c> CPU</c><00:04:30.700><c> time</c><00:04:30.880><c> for</c><00:04:31.120><c> more</c><00:04:31.330><c> than</c><00:04:31.480><c> a</c>

00:04:31.500 --> 00:04:31.510 align:start position:0%
without CPU time for more than a
 

00:04:31.510 --> 00:04:33.420 align:start position:0%
without CPU time for more than a
fraction<00:04:31.720><c> of</c><00:04:31.990><c> a</c><00:04:32.080><c> second</c><00:04:32.410><c> so</c><00:04:32.530><c> it</c><00:04:33.070><c> would</c><00:04:33.160><c> be</c><00:04:33.280><c> no</c>

00:04:33.420 --> 00:04:33.430 align:start position:0%
fraction of a second so it would be no
 

00:04:33.430 --> 00:04:34.950 align:start position:0%
fraction of a second so it would be no
good<00:04:33.640><c> if</c><00:04:33.850><c> some</c><00:04:34.000><c> other</c><00:04:34.120><c> process</c><00:04:34.600><c> ran</c><00:04:34.810><c> without</c>

00:04:34.950 --> 00:04:34.960 align:start position:0%
good if some other process ran without
 

00:04:34.960 --> 00:04:36.810 align:start position:0%
good if some other process ran without
interruption<00:04:35.620><c> for</c><00:04:35.830><c> a</c><00:04:35.860><c> second</c><00:04:36.190><c> or</c><00:04:36.310><c> more</c>

00:04:36.810 --> 00:04:36.820 align:start position:0%
interruption for a second or more
 

00:04:36.820 --> 00:04:38.610 align:start position:0%
interruption for a second or more
to<00:04:37.300><c> ensure</c><00:04:37.540><c> that</c><00:04:37.570><c> the</c><00:04:37.810><c> scheduler</c><00:04:38.170><c> gets</c><00:04:38.350><c> to</c><00:04:38.470><c> run</c>

00:04:38.610 --> 00:04:38.620 align:start position:0%
to ensure that the scheduler gets to run
 

00:04:38.620 --> 00:04:40.410 align:start position:0%
to ensure that the scheduler gets to run
on<00:04:38.770><c> a</c><00:04:38.800><c> regular</c><00:04:39.160><c> basis</c><00:04:39.550><c> whether</c><00:04:39.850><c> any</c><00:04:40.150><c> i/o</c>

00:04:40.410 --> 00:04:40.420 align:start position:0%
on a regular basis whether any i/o
 

00:04:40.420 --> 00:04:42.600 align:start position:0%
on a regular basis whether any i/o
devices<00:04:40.840><c> need</c><00:04:41.170><c> attention</c><00:04:41.470><c> or</c><00:04:41.680><c> not</c><00:04:41.860><c> a</c><00:04:42.070><c> clock</c>

00:04:42.600 --> 00:04:42.610 align:start position:0%
devices need attention or not a clock
 

00:04:42.610 --> 00:04:44.340 align:start position:0%
devices need attention or not a clock
device<00:04:42.970><c> on</c><00:04:43.210><c> the</c><00:04:43.330><c> mainboard</c><00:04:43.660><c> is</c><00:04:43.870><c> configured</c><00:04:44.320><c> to</c>

00:04:44.340 --> 00:04:44.350 align:start position:0%
device on the mainboard is configured to
 

00:04:44.350 --> 00:04:46.680 align:start position:0%
device on the mainboard is configured to
send<00:04:44.560><c> an</c><00:04:44.740><c> interrupt</c><00:04:45.130><c> on</c><00:04:45.280><c> a</c><00:04:45.310><c> regular</c><00:04:45.700><c> basis</c><00:04:46.120><c> say</c>

00:04:46.680 --> 00:04:46.690 align:start position:0%
send an interrupt on a regular basis say
 

00:04:46.690 --> 00:04:49.020 align:start position:0%
send an interrupt on a regular basis say
once<00:04:46.930><c> every</c><00:04:47.200><c> 10</c><00:04:47.410><c> or</c><00:04:47.440><c> 20</c><00:04:47.770><c> milliseconds</c><00:04:48.370><c> thus</c>

00:04:49.020 --> 00:04:49.030 align:start position:0%
once every 10 or 20 milliseconds thus
 

00:04:49.030 --> 00:04:50.790 align:start position:0%
once every 10 or 20 milliseconds thus
the<00:04:49.240><c> system</c><00:04:49.390><c> guarantees</c><00:04:49.990><c> that</c><00:04:50.020><c> the</c><00:04:50.410><c> scheduler</c>

00:04:50.790 --> 00:04:50.800 align:start position:0%
the system guarantees that the scheduler
 

00:04:50.800 --> 00:04:52.260 align:start position:0%
the system guarantees that the scheduler
gets<00:04:50.950><c> the</c><00:04:51.040><c> opportunity</c><00:04:51.280><c> to</c><00:04:51.820><c> change</c><00:04:52.120><c> the</c>

00:04:52.260 --> 00:04:52.270 align:start position:0%
gets the opportunity to change the
 

00:04:52.270 --> 00:04:54.210 align:start position:0%
gets the opportunity to change the
running<00:04:52.510><c> process</c><00:04:52.900><c> on</c><00:04:53.050><c> each</c><00:04:53.080><c> core</c><00:04:53.500><c> at</c><00:04:53.950><c> least</c>

00:04:54.210 --> 00:04:54.220 align:start position:0%
running process on each core at least
 

00:04:54.220 --> 00:04:56.850 align:start position:0%
running process on each core at least
several<00:04:54.580><c> times</c><00:04:54.700><c> a</c><00:04:55.060><c> second</c><00:04:55.470><c> the</c><00:04:56.470><c> next</c><00:04:56.710><c> thing</c>

00:04:56.850 --> 00:04:56.860 align:start position:0%
several times a second the next thing
 

00:04:56.860 --> 00:04:58.350 align:start position:0%
several times a second the next thing
you<00:04:56.980><c> might</c><00:04:57.010><c> wonder</c><00:04:57.340><c> is</c><00:04:57.460><c> how</c><00:04:57.790><c> the</c><00:04:57.850><c> scheduler</c>

00:04:58.350 --> 00:04:58.360 align:start position:0%
you might wonder is how the scheduler
 

00:04:58.360 --> 00:05:00.660 align:start position:0%
you might wonder is how the scheduler
chooses<00:04:58.720><c> which</c><00:04:58.870><c> process</c><00:04:59.350><c> to</c><00:04:59.500><c> run</c><00:04:59.650><c> next</c><00:04:59.890><c> using</c>

00:05:00.660 --> 00:05:00.670 align:start position:0%
chooses which process to run next using
 

00:05:00.670 --> 00:05:02.460 align:start position:0%
chooses which process to run next using
the<00:05:00.910><c> simplest</c><00:05:01.210><c> algorithm</c><00:05:01.750><c> the</c><00:05:01.990><c> round-robin</c>

00:05:02.460 --> 00:05:02.470 align:start position:0%
the simplest algorithm the round-robin
 

00:05:02.470 --> 00:05:04.890 align:start position:0%
the simplest algorithm the round-robin
algorithm<00:05:03.310><c> the</c><00:05:03.760><c> scheduler</c><00:05:04.180><c> simply</c><00:05:04.510><c> runs</c><00:05:04.720><c> each</c>

00:05:04.890 --> 00:05:04.900 align:start position:0%
algorithm the scheduler simply runs each
 

00:05:04.900 --> 00:05:06.480 align:start position:0%
algorithm the scheduler simply runs each
process<00:05:05.350><c> in</c><00:05:05.500><c> turn</c><00:05:05.710><c> one</c><00:05:06.070><c> after</c><00:05:06.340><c> the</c><00:05:06.460><c> other</c>

00:05:06.480 --> 00:05:06.490 align:start position:0%
process in turn one after the other
 

00:05:06.490 --> 00:05:08.490 align:start position:0%
process in turn one after the other
while<00:05:07.360><c> this</c><00:05:07.510><c> ensures</c><00:05:07.810><c> that</c><00:05:07.840><c> every</c><00:05:08.290><c> process</c>

00:05:08.490 --> 00:05:08.500 align:start position:0%
while this ensures that every process
 

00:05:08.500 --> 00:05:10.650 align:start position:0%
while this ensures that every process
gets<00:05:08.920><c> run</c><00:05:09.100><c> on</c><00:05:09.250><c> a</c><00:05:09.280><c> regular</c><00:05:09.430><c> basis</c><00:05:10.000><c> the</c><00:05:10.480><c> more</c>

00:05:10.650 --> 00:05:10.660 align:start position:0%
gets run on a regular basis the more
 

00:05:10.660 --> 00:05:12.540 align:start position:0%
gets run on a regular basis the more
sophisticated<00:05:10.810><c> algorithms</c><00:05:11.530><c> used</c><00:05:11.950><c> by</c><00:05:12.100><c> Windows</c>

00:05:12.540 --> 00:05:12.550 align:start position:0%
sophisticated algorithms used by Windows
 

00:05:12.550 --> 00:05:14.100 align:start position:0%
sophisticated algorithms used by Windows
Linux<00:05:12.820><c> and</c><00:05:13.090><c> other</c><00:05:13.270><c> modern</c><00:05:13.570><c> operating</c><00:05:13.930><c> systems</c>

00:05:14.100 --> 00:05:14.110 align:start position:0%
Linux and other modern operating systems
 

00:05:14.110 --> 00:05:16.050 align:start position:0%
Linux and other modern operating systems
attempt<00:05:15.010><c> to</c><00:05:15.100><c> take</c><00:05:15.280><c> into</c><00:05:15.550><c> account</c><00:05:15.760><c> which</c>

00:05:16.050 --> 00:05:16.060 align:start position:0%
attempt to take into account which
 

00:05:16.060 --> 00:05:17.940 align:start position:0%
attempt to take into account which
crosses<00:05:16.330><c> season</c><00:05:16.750><c> each</c><00:05:16.900><c> processor</c><00:05:17.440><c> time</c><00:05:17.680><c> more</c>

00:05:17.940 --> 00:05:17.950 align:start position:0%
crosses season each processor time more
 

00:05:17.950 --> 00:05:21.230 align:start position:0%
crosses season each processor time more
than<00:05:18.100><c> others</c>

00:05:21.230 --> 00:05:21.240 align:start position:0%
 
 

00:05:21.240 --> 00:05:23.760 align:start position:0%
 
processes<00:05:22.240><c> not</c><00:05:22.479><c> only</c><00:05:22.720><c> share</c><00:05:22.930><c> the</c><00:05:23.080><c> CPU</c><00:05:23.470><c> cores</c>

00:05:23.760 --> 00:05:23.770 align:start position:0%
processes not only share the CPU cores
 

00:05:23.770 --> 00:05:25.920 align:start position:0%
processes not only share the CPU cores
the<00:05:24.250><c> of</c><00:05:24.370><c> course</c><00:05:24.610><c> must</c><00:05:24.880><c> also</c><00:05:25.090><c> share</c><00:05:25.419><c> the</c><00:05:25.600><c> system</c>

00:05:25.920 --> 00:05:25.930 align:start position:0%
the of course must also share the system
 

00:05:25.930 --> 00:05:26.400 align:start position:0%
the of course must also share the system
memory

00:05:26.400 --> 00:05:26.410 align:start position:0%
memory
 

00:05:26.410 --> 00:05:28.409 align:start position:0%
memory
it's<00:05:26.889><c> the</c><00:05:27.070><c> OSS</c><00:05:27.550><c> job</c><00:05:27.760><c> to</c><00:05:27.940><c> regulate</c><00:05:28.300><c> the</c>

00:05:28.409 --> 00:05:28.419 align:start position:0%
it's the OSS job to regulate the
 

00:05:28.419 --> 00:05:30.240 align:start position:0%
it's the OSS job to regulate the
processes<00:05:28.900><c> use</c><00:05:29.110><c> of</c><00:05:29.320><c> memory</c><00:05:29.620><c> to</c><00:05:29.830><c> ensure</c><00:05:30.070><c> that</c>

00:05:30.240 --> 00:05:30.250 align:start position:0%
processes use of memory to ensure that
 

00:05:30.250 --> 00:05:31.980 align:start position:0%
processes use of memory to ensure that
each<00:05:30.460><c> process</c><00:05:31.000><c> doesn't</c><00:05:31.240><c> interfere</c><00:05:31.570><c> with</c><00:05:31.780><c> the</c>

00:05:31.980 --> 00:05:31.990 align:start position:0%
each process doesn't interfere with the
 

00:05:31.990 --> 00:05:33.450 align:start position:0%
each process doesn't interfere with the
portions<00:05:32.380><c> of</c><00:05:32.530><c> memory</c><00:05:32.800><c> used</c><00:05:33.010><c> by</c><00:05:33.130><c> other</c>

00:05:33.450 --> 00:05:33.460 align:start position:0%
portions of memory used by other
 

00:05:33.460 --> 00:05:36.629 align:start position:0%
portions of memory used by other
processes<00:05:34.060><c> and</c><00:05:34.240><c> by</c><00:05:34.660><c> the</c><00:05:34.720><c> OS</c><00:05:35.110><c> itself</c><00:05:35.560><c> here</c><00:05:36.490><c> for</c>

00:05:36.629 --> 00:05:36.639 align:start position:0%
processes and by the OS itself here for
 

00:05:36.639 --> 00:05:38.730 align:start position:0%
processes and by the OS itself here for
example<00:05:37.030><c> the</c><00:05:37.150><c> processes</c><00:05:37.660><c> a</c><00:05:37.840><c> B</c><00:05:38.080><c> and</c><00:05:38.229><c> C</c><00:05:38.440><c> have</c>

00:05:38.730 --> 00:05:38.740 align:start position:0%
example the processes a B and C have
 

00:05:38.740 --> 00:05:40.409 align:start position:0%
example the processes a B and C have
been<00:05:39.040><c> allocated</c><00:05:39.310><c> their</c><00:05:39.699><c> own</c><00:05:39.820><c> portions</c><00:05:40.330><c> of</c>

00:05:40.409 --> 00:05:40.419 align:start position:0%
been allocated their own portions of
 

00:05:40.419 --> 00:05:42.900 align:start position:0%
been allocated their own portions of
system<00:05:40.750><c> memory</c><00:05:40.930><c> while</c><00:05:41.770><c> the</c><00:05:41.949><c> OS</c><00:05:42.280><c> may</c><00:05:42.550><c> access</c>

00:05:42.900 --> 00:05:42.910 align:start position:0%
system memory while the OS may access
 

00:05:42.910 --> 00:05:44.370 align:start position:0%
system memory while the OS may access
any<00:05:43.120><c> portion</c><00:05:43.510><c> of</c><00:05:43.630><c> memory</c><00:05:43.720><c> as</c><00:05:44.020><c> it</c><00:05:44.199><c> chooses</c>

00:05:44.370 --> 00:05:44.380 align:start position:0%
any portion of memory as it chooses
 

00:05:44.380 --> 00:05:46.260 align:start position:0%
any portion of memory as it chooses
because<00:05:45.040><c> the</c><00:05:45.340><c> OS</c><00:05:45.610><c> is</c><00:05:45.639><c> supposed</c><00:05:46.030><c> to</c><00:05:46.120><c> be</c><00:05:46.210><c> in</c>

00:05:46.260 --> 00:05:46.270 align:start position:0%
because the OS is supposed to be in
 

00:05:46.270 --> 00:05:48.330 align:start position:0%
because the OS is supposed to be in
charge<00:05:46.300><c> of</c><00:05:46.570><c> the</c><00:05:46.690><c> system</c><00:05:47.020><c> each</c><00:05:47.620><c> process</c><00:05:48.130><c> can</c>

00:05:48.330 --> 00:05:48.340 align:start position:0%
charge of the system each process can
 

00:05:48.340 --> 00:05:50.460 align:start position:0%
charge of the system each process can
only<00:05:48.520><c> access</c><00:05:48.880><c> its</c><00:05:49.270><c> own</c><00:05:49.389><c> portion</c><00:05:49.870><c> of</c><00:05:49.990><c> memory</c><00:05:50.320><c> as</c>

00:05:50.460 --> 00:05:50.470 align:start position:0%
only access its own portion of memory as
 

00:05:50.470 --> 00:05:52.710 align:start position:0%
only access its own portion of memory as
we'll<00:05:51.160><c> explain</c><00:05:51.400><c> shortly</c><00:05:51.669><c> this</c><00:05:52.210><c> restriction</c>

00:05:52.710 --> 00:05:52.720 align:start position:0%
we'll explain shortly this restriction
 

00:05:52.720 --> 00:05:54.750 align:start position:0%
we'll explain shortly this restriction
is<00:05:52.870><c> enforced</c><00:05:53.380><c> by</c><00:05:53.470><c> the</c><00:05:53.590><c> hardware</c><00:05:53.949><c> making</c><00:05:54.639><c> it</c>

00:05:54.750 --> 00:05:54.760 align:start position:0%
is enforced by the hardware making it
 

00:05:54.760 --> 00:05:56.370 align:start position:0%
is enforced by the hardware making it
impossible<00:05:55.030><c> for</c><00:05:55.360><c> a</c><00:05:55.510><c> process</c><00:05:55.720><c> to</c><00:05:56.050><c> muck</c><00:05:56.229><c> with</c>

00:05:56.370 --> 00:05:56.380 align:start position:0%
impossible for a process to muck with
 

00:05:56.380 --> 00:05:58.230 align:start position:0%
impossible for a process to muck with
addresses<00:05:56.830><c> outside</c><00:05:57.310><c> of</c><00:05:57.460><c> its</c><00:05:57.580><c> own</c><00:05:57.669><c> portion</c><00:05:58.000><c> of</c>

00:05:58.230 --> 00:05:58.240 align:start position:0%
addresses outside of its own portion of
 

00:05:58.240 --> 00:06:00.719 align:start position:0%
addresses outside of its own portion of
memory<00:05:58.530><c> however</c><00:05:59.530><c> we</c><00:05:59.949><c> need</c><00:06:00.070><c> a</c><00:06:00.130><c> loophole</c><00:06:00.400><c> for</c>

00:06:00.719 --> 00:06:00.729 align:start position:0%
memory however we need a loophole for
 

00:06:00.729 --> 00:06:02.490 align:start position:0%
memory however we need a loophole for
this<00:06:00.850><c> restriction</c><00:06:01.330><c> because</c><00:06:01.539><c> processes</c><00:06:02.260><c> must</c>

00:06:02.490 --> 00:06:02.500 align:start position:0%
this restriction because processes must
 

00:06:02.500 --> 00:06:04.320 align:start position:0%
this restriction because processes must
be<00:06:02.650><c> able</c><00:06:02.830><c> to</c><00:06:02.979><c> invoke</c><00:06:03.340><c> certain</c><00:06:03.760><c> routines</c><00:06:04.120><c> at</c>

00:06:04.320 --> 00:06:04.330 align:start position:0%
be able to invoke certain routines at
 

00:06:04.330 --> 00:06:06.689 align:start position:0%
be able to invoke certain routines at
fixed<00:06:04.690><c> addresses</c><00:06:05.020><c> in</c><00:06:05.320><c> the</c><00:06:05.710><c> OSS</c><00:06:06.160><c> portion</c><00:06:06.580><c> of</c>

00:06:06.689 --> 00:06:06.699 align:start position:0%
fixed addresses in the OSS portion of
 

00:06:06.699 --> 00:06:08.760 align:start position:0%
fixed addresses in the OSS portion of
memory<00:06:06.850><c> these</c><00:06:07.570><c> routines</c><00:06:07.990><c> called</c><00:06:08.350><c> system</c>

00:06:08.760 --> 00:06:08.770 align:start position:0%
memory these routines called system
 

00:06:08.770 --> 00:06:10.590 align:start position:0%
memory these routines called system
calls<00:06:09.010><c> are</c><00:06:09.280><c> the</c><00:06:09.520><c> means</c><00:06:09.820><c> by</c><00:06:09.940><c> which</c><00:06:10.030><c> processes</c>

00:06:10.590 --> 00:06:10.600 align:start position:0%
calls are the means by which processes
 

00:06:10.600 --> 00:06:12.480 align:start position:0%
calls are the means by which processes
initiate<00:06:11.199><c> requests</c><00:06:11.770><c> to</c><00:06:11.979><c> the</c><00:06:12.100><c> operating</c>

00:06:12.480 --> 00:06:12.490 align:start position:0%
initiate requests to the operating
 

00:06:12.490 --> 00:06:14.310 align:start position:0%
initiate requests to the operating
system<00:06:12.789><c> these</c><00:06:13.360><c> system</c><00:06:13.780><c> calls</c><00:06:13.990><c> provide</c>

00:06:14.310 --> 00:06:14.320 align:start position:0%
system these system calls provide
 

00:06:14.320 --> 00:06:15.810 align:start position:0%
system these system calls provide
functionality<00:06:14.949><c> for</c><00:06:15.100><c> things</c><00:06:15.340><c> like</c><00:06:15.460><c> say</c>

00:06:15.810 --> 00:06:15.820 align:start position:0%
functionality for things like say
 

00:06:15.820 --> 00:06:18.270 align:start position:0%
functionality for things like say
reading<00:06:16.360><c> and</c><00:06:16.570><c> writing</c><00:06:16.690><c> files</c><00:06:17.080><c> or</c><00:06:17.530><c> for</c><00:06:17.949><c> sending</c>

00:06:18.270 --> 00:06:18.280 align:start position:0%
reading and writing files or for sending
 

00:06:18.280 --> 00:06:19.860 align:start position:0%
reading and writing files or for sending
and<00:06:18.430><c> receiving</c><00:06:18.460><c> data</c><00:06:18.910><c> over</c><00:06:19.210><c> the</c><00:06:19.300><c> network</c><00:06:19.330><c> to</c>

00:06:19.860 --> 00:06:19.870 align:start position:0%
and receiving data over the network to
 

00:06:19.870 --> 00:06:22.469 align:start position:0%
and receiving data over the network to
invoke<00:06:20.770><c> a</c><00:06:20.830><c> system</c><00:06:21.220><c> call</c><00:06:21.430><c> a</c><00:06:21.610><c> process</c><00:06:22.060><c> must</c><00:06:22.270><c> use</c>

00:06:22.469 --> 00:06:22.479 align:start position:0%
invoke a system call a process must use
 

00:06:22.479 --> 00:06:24.480 align:start position:0%
invoke a system call a process must use
a<00:06:22.630><c> specific</c><00:06:22.840><c> CPU</c><00:06:23.440><c> instruction</c><00:06:23.889><c> usually</c>

00:06:24.480 --> 00:06:24.490 align:start position:0%
a specific CPU instruction usually
 

00:06:24.490 --> 00:06:26.460 align:start position:0%
a specific CPU instruction usually
called<00:06:24.700><c> Cisco</c><00:06:25.180><c> in</c><00:06:25.419><c> which</c><00:06:25.900><c> the</c><00:06:26.050><c> process</c>

00:06:26.460 --> 00:06:26.470 align:start position:0%
called Cisco in which the process
 

00:06:26.470 --> 00:06:29.010 align:start position:0%
called Cisco in which the process
specifies<00:06:26.950><c> a</c><00:06:26.979><c> system</c><00:06:27.460><c> call</c><00:06:27.639><c> number</c><00:06:28.000><c> when</c><00:06:28.900><c> this</c>

00:06:29.010 --> 00:06:29.020 align:start position:0%
specifies a system call number when this
 

00:06:29.020 --> 00:06:30.930 align:start position:0%
specifies a system call number when this
instruction<00:06:29.169><c> is</c><00:06:29.650><c> invoked</c><00:06:30.010><c> the</c><00:06:30.460><c> processor</c>

00:06:30.930 --> 00:06:30.940 align:start position:0%
instruction is invoked the processor
 

00:06:30.940 --> 00:06:33.089 align:start position:0%
instruction is invoked the processor
looks<00:06:31.210><c> in</c><00:06:31.389><c> the</c><00:06:31.510><c> system</c><00:06:31.900><c> called</c><00:06:32.169><c> table</c><00:06:32.560><c> for</c><00:06:33.010><c> the</c>

00:06:33.089 --> 00:06:33.099 align:start position:0%
looks in the system called table for the
 

00:06:33.099 --> 00:06:34.770 align:start position:0%
looks in the system called table for the
address<00:06:33.340><c> of</c><00:06:33.520><c> the</c><00:06:33.580><c> routine</c><00:06:33.880><c> corresponding</c><00:06:34.660><c> to</c>

00:06:34.770 --> 00:06:34.780 align:start position:0%
address of the routine corresponding to
 

00:06:34.780 --> 00:06:36.900 align:start position:0%
address of the routine corresponding to
the<00:06:34.870><c> number</c><00:06:35.169><c> and</c><00:06:35.289><c> jumps</c><00:06:36.010><c> execution</c><00:06:36.669><c> to</c><00:06:36.760><c> that</c>

00:06:36.900 --> 00:06:36.910 align:start position:0%
the number and jumps execution to that
 

00:06:36.910 --> 00:06:39.180 align:start position:0%
the number and jumps execution to that
address<00:06:37.349><c> because</c><00:06:38.349><c> the</c><00:06:38.500><c> operating</c><00:06:38.830><c> system</c>

00:06:39.180 --> 00:06:39.190 align:start position:0%
address because the operating system
 

00:06:39.190 --> 00:06:41.610 align:start position:0%
address because the operating system
controls<00:06:39.700><c> the</c><00:06:39.880><c> system</c><00:06:40.270><c> call</c><00:06:40.479><c> table</c><00:06:40.840><c> a</c><00:06:40.990><c> process</c>

00:06:41.610 --> 00:06:41.620 align:start position:0%
controls the system call table a process
 

00:06:41.620 --> 00:06:43.830 align:start position:0%
controls the system call table a process
can<00:06:41.800><c> only</c><00:06:41.979><c> jump</c><00:06:42.340><c> execution</c><00:06:43.030><c> to</c><00:06:43.180><c> addresses</c><00:06:43.690><c> of</c>

00:06:43.830 --> 00:06:43.840 align:start position:0%
can only jump execution to addresses of
 

00:06:43.840 --> 00:06:46.560 align:start position:0%
can only jump execution to addresses of
the<00:06:43.960><c> operating</c><00:06:44.349><c> systems</c><00:06:44.800><c> choosing</c><00:06:45.220><c> so</c><00:06:46.210><c> aside</c>

00:06:46.560 --> 00:06:46.570 align:start position:0%
the operating systems choosing so aside
 

00:06:46.570 --> 00:06:48.330 align:start position:0%
the operating systems choosing so aside
from<00:06:46.630><c> this</c><00:06:46.900><c> loophole</c><00:06:47.110><c> how</c><00:06:47.710><c> do</c><00:06:47.770><c> the</c><00:06:47.979><c> operating</c>

00:06:48.330 --> 00:06:48.340 align:start position:0%
from this loophole how do the operating
 

00:06:48.340 --> 00:06:50.250 align:start position:0%
from this loophole how do the operating
system<00:06:48.669><c> and</c><00:06:48.820><c> hardware</c><00:06:49.030><c> restrict</c><00:06:49.720><c> the</c><00:06:49.810><c> process</c>

00:06:50.250 --> 00:06:50.260 align:start position:0%
system and hardware restrict the process
 

00:06:50.260 --> 00:06:52.170 align:start position:0%
system and hardware restrict the process
to<00:06:50.470><c> only</c><00:06:50.620><c> access</c><00:06:50.889><c> its</c><00:06:51.310><c> own</c><00:06:51.460><c> portion</c><00:06:51.820><c> of</c><00:06:52.030><c> memory</c>

00:06:52.170 --> 00:06:52.180 align:start position:0%
to only access its own portion of memory
 

00:06:52.180 --> 00:06:54.839 align:start position:0%
to only access its own portion of memory
well<00:06:53.080><c> first</c><00:06:53.380><c> off</c><00:06:53.560><c> the</c><00:06:53.830><c> CPU</c><00:06:54.160><c> actually</c><00:06:54.490><c> runs</c><00:06:54.669><c> in</c>

00:06:54.839 --> 00:06:54.849 align:start position:0%
well first off the CPU actually runs in
 

00:06:54.849 --> 00:06:57.180 align:start position:0%
well first off the CPU actually runs in
two<00:06:55.090><c> different</c><00:06:55.389><c> privilege</c><00:06:55.870><c> levels</c><00:06:56.229><c> when</c><00:06:56.860><c> OS</c>

00:06:57.180 --> 00:06:57.190 align:start position:0%
two different privilege levels when OS
 

00:06:57.190 --> 00:06:59.250 align:start position:0%
two different privilege levels when OS
code<00:06:57.490><c> runs</c><00:06:57.760><c> the</c><00:06:58.300><c> CPU</c><00:06:58.720><c> is</c><00:06:58.840><c> put</c><00:06:59.050><c> into</c><00:06:59.169><c> a</c>

00:06:59.250 --> 00:06:59.260 align:start position:0%
code runs the CPU is put into a
 

00:06:59.260 --> 00:07:01.110 align:start position:0%
code runs the CPU is put into a
privilege<00:06:59.620><c> level</c><00:06:59.889><c> that</c><00:07:00.099><c> allows</c><00:07:00.370><c> access</c><00:07:01.000><c> of</c>

00:07:01.110 --> 00:07:01.120 align:start position:0%
privilege level that allows access of
 

00:07:01.120 --> 00:07:02.969 align:start position:0%
privilege level that allows access of
the<00:07:01.210><c> i/o</c><00:07:01.330><c> devices</c><00:07:01.750><c> and</c><00:07:02.199><c> any</c><00:07:02.470><c> address</c><00:07:02.830><c> of</c>

00:07:02.969 --> 00:07:02.979 align:start position:0%
the i/o devices and any address of
 

00:07:02.979 --> 00:07:05.339 align:start position:0%
the i/o devices and any address of
memory<00:07:03.310><c> when</c><00:07:04.030><c> a</c><00:07:04.060><c> process</c><00:07:04.510><c> runs</c><00:07:04.720><c> however</c><00:07:05.080><c> the</c>

00:07:05.339 --> 00:07:05.349 align:start position:0%
memory when a process runs however the
 

00:07:05.349 --> 00:07:06.990 align:start position:0%
memory when a process runs however the
CPU<00:07:05.680><c> is</c><00:07:05.770><c> put</c><00:07:05.949><c> into</c><00:07:06.099><c> a</c><00:07:06.190><c> privileged</c><00:07:06.550><c> level</c><00:07:06.820><c> that</c>

00:07:06.990 --> 00:07:07.000 align:start position:0%
CPU is put into a privileged level that
 

00:07:07.000 --> 00:07:08.850 align:start position:0%
CPU is put into a privileged level that
triggers<00:07:07.330><c> a</c><00:07:07.419><c> Hardware</c><00:07:07.840><c> exception</c><00:07:08.289><c> when</c><00:07:08.770><c> the</c>

00:07:08.850 --> 00:07:08.860 align:start position:0%
triggers a Hardware exception when the
 

00:07:08.860 --> 00:07:10.680 align:start position:0%
triggers a Hardware exception when the
code<00:07:09.070><c> attempts</c><00:07:09.460><c> to</c><00:07:09.550><c> directly</c><00:07:09.849><c> access</c><00:07:10.090><c> the</c><00:07:10.419><c> i/o</c>

00:07:10.680 --> 00:07:10.690 align:start position:0%
code attempts to directly access the i/o
 

00:07:10.690 --> 00:07:12.689 align:start position:0%
code attempts to directly access the i/o
devices<00:07:11.139><c> or</c><00:07:11.620><c> addresses</c><00:07:12.220><c> not</c><00:07:12.370><c> allowed</c><00:07:12.669><c> for</c>

00:07:12.689 --> 00:07:12.699 align:start position:0%
devices or addresses not allowed for
 

00:07:12.699 --> 00:07:15.450 align:start position:0%
devices or addresses not allowed for
that<00:07:12.910><c> process</c><00:07:13.710><c> processes</c><00:07:14.710><c> are</c><00:07:14.919><c> supposed</c><00:07:15.310><c> to</c>

00:07:15.450 --> 00:07:15.460 align:start position:0%
that process processes are supposed to
 

00:07:15.460 --> 00:07:17.820 align:start position:0%
that process processes are supposed to
directly<00:07:15.820><c> touch</c><00:07:16.090><c> only</c><00:07:16.360><c> their</c><00:07:16.690><c> own</c><00:07:16.870><c> memory</c><00:07:17.289><c> not</c>

00:07:17.820 --> 00:07:17.830 align:start position:0%
directly touch only their own memory not
 

00:07:17.830 --> 00:07:20.189 align:start position:0%
directly touch only their own memory not
anything<00:07:18.310><c> else</c><00:07:18.490><c> in</c><00:07:18.669><c> the</c><00:07:18.760><c> system</c><00:07:19.169><c> now</c><00:07:20.169><c> to</c>

00:07:20.189 --> 00:07:20.199 align:start position:0%
anything else in the system now to
 

00:07:20.199 --> 00:07:22.080 align:start position:0%
anything else in the system now to
understand<00:07:20.800><c> how</c><00:07:20.889><c> the</c><00:07:21.039><c> CPU</c><00:07:21.520><c> knows</c><00:07:21.760><c> which</c>

00:07:22.080 --> 00:07:22.090 align:start position:0%
understand how the CPU knows which
 

00:07:22.090 --> 00:07:23.760 align:start position:0%
understand how the CPU knows which
addresses<00:07:22.479><c> are</c><00:07:22.750><c> allowed</c><00:07:22.960><c> for</c><00:07:23.139><c> each</c><00:07:23.289><c> process</c>

00:07:23.760 --> 00:07:23.770 align:start position:0%
addresses are allowed for each process
 

00:07:23.770 --> 00:07:25.409 align:start position:0%
addresses are allowed for each process
we<00:07:23.919><c> have</c><00:07:24.340><c> to</c><00:07:24.460><c> first</c><00:07:24.610><c> look</c><00:07:24.820><c> at</c><00:07:24.970><c> how</c><00:07:25.090><c> a</c><00:07:25.120><c> process</c>

00:07:25.409 --> 00:07:25.419 align:start position:0%
we have to first look at how a process
 

00:07:25.419 --> 00:07:28.350 align:start position:0%
we have to first look at how a process
uses<00:07:26.080><c> memory</c>

00:07:28.350 --> 00:07:28.360 align:start position:0%
uses memory
 

00:07:28.360 --> 00:07:29.939 align:start position:0%
uses memory
each<00:07:28.419><c> process</c><00:07:28.900><c> uses</c><00:07:29.289><c> a</c><00:07:29.319><c> portion</c><00:07:29.740><c> of</c><00:07:29.830><c> its</c>

00:07:29.939 --> 00:07:29.949 align:start position:0%
each process uses a portion of its
 

00:07:29.949 --> 00:07:32.730 align:start position:0%
each process uses a portion of its
memory<00:07:30.219><c> for</c><00:07:30.490><c> a</c><00:07:30.520><c> stack</c><00:07:31.000><c> for</c><00:07:31.629><c> a</c><00:07:31.659><c> heap</c><00:07:32.020><c> and</c><00:07:32.259><c> for</c>

00:07:32.730 --> 00:07:32.740 align:start position:0%
memory for a stack for a heap and for
 

00:07:32.740 --> 00:07:34.830 align:start position:0%
memory for a stack for a heap and for
storing<00:07:33.039><c> the</c><00:07:33.129><c> processes</c><00:07:33.639><c> code</c><00:07:33.849><c> itself</c><00:07:34.210><c> in</c><00:07:34.449><c> a</c>

00:07:34.830 --> 00:07:34.840 align:start position:0%
storing the processes code itself in a
 

00:07:34.840 --> 00:07:36.510 align:start position:0%
storing the processes code itself in a
section<00:07:35.229><c> confusingly</c><00:07:35.770><c> called</c><00:07:35.860><c> the</c><00:07:36.159><c> text</c>

00:07:36.510 --> 00:07:36.520 align:start position:0%
section confusingly called the text
 

00:07:36.520 --> 00:07:37.950 align:start position:0%
section confusingly called the text
section<00:07:36.789><c> even</c><00:07:37.389><c> though</c><00:07:37.479><c> the</c><00:07:37.599><c> code</c><00:07:37.750><c> is</c><00:07:37.930><c> in</c>

00:07:37.950 --> 00:07:37.960 align:start position:0%
section even though the code is in
 

00:07:37.960 --> 00:07:40.350 align:start position:0%
section even though the code is in
binary<00:07:38.349><c> form</c><00:07:38.650><c> the</c><00:07:39.580><c> code</c><00:07:39.789><c> section</c><00:07:40.210><c> is</c>

00:07:40.350 --> 00:07:40.360 align:start position:0%
binary form the code section is
 

00:07:40.360 --> 00:07:42.179 align:start position:0%
binary form the code section is
straightforward<00:07:40.960><c> the</c><00:07:41.409><c> binary</c><00:07:41.740><c> instructions</c>

00:07:42.179 --> 00:07:42.189 align:start position:0%
straightforward the binary instructions
 

00:07:42.189 --> 00:07:43.589 align:start position:0%
straightforward the binary instructions
are<00:07:42.310><c> stored</c><00:07:42.580><c> in</c><00:07:42.699><c> a</c><00:07:42.759><c> contiguous</c><00:07:43.090><c> chunk</c><00:07:43.300><c> of</c>

00:07:43.589 --> 00:07:43.599 align:start position:0%
are stored in a contiguous chunk of
 

00:07:43.599 --> 00:07:45.270 align:start position:0%
are stored in a contiguous chunk of
memory<00:07:43.780><c> and</c><00:07:44.080><c> never</c><00:07:44.469><c> modified</c><00:07:45.009><c> for</c><00:07:45.250><c> the</c>

00:07:45.270 --> 00:07:45.280 align:start position:0%
memory and never modified for the
 

00:07:45.280 --> 00:07:47.490 align:start position:0%
memory and never modified for the
duration<00:07:45.550><c> of</c><00:07:45.819><c> the</c><00:07:45.909><c> process</c><00:07:46.360><c> except</c><00:07:47.289><c> for</c><00:07:47.439><c> the</c>

00:07:47.490 --> 00:07:47.500 align:start position:0%
duration of the process except for the
 

00:07:47.500 --> 00:07:48.959 align:start position:0%
duration of the process except for the
purpose<00:07:47.770><c> of</c><00:07:47.860><c> dynamic</c><00:07:48.280><c> linking</c><00:07:48.550><c> with</c><00:07:48.729><c> shared</c>

00:07:48.959 --> 00:07:48.969 align:start position:0%
purpose of dynamic linking with shared
 

00:07:48.969 --> 00:07:50.879 align:start position:0%
purpose of dynamic linking with shared
libraries<00:07:49.389><c> as</c><00:07:49.509><c> we</c><00:07:50.020><c> described</c><00:07:50.379><c> in</c><00:07:50.500><c> the</c><00:07:50.560><c> unit</c><00:07:50.800><c> on</c>

00:07:50.879 --> 00:07:50.889 align:start position:0%
libraries as we described in the unit on
 

00:07:50.889 --> 00:07:53.249 align:start position:0%
libraries as we described in the unit on
programming<00:07:51.310><c> languages</c><00:07:51.780><c> the</c><00:07:52.780><c> stack</c><00:07:53.020><c> and</c><00:07:53.229><c> heap</c>

00:07:53.249 --> 00:07:53.259 align:start position:0%
programming languages the stack and heap
 

00:07:53.259 --> 00:07:55.469 align:start position:0%
programming languages the stack and heap
though<00:07:53.590><c> are</c><00:07:53.830><c> both</c><00:07:54.069><c> for</c><00:07:54.310><c> storing</c><00:07:54.610><c> data</c><00:07:54.699><c> the</c>

00:07:55.469 --> 00:07:55.479 align:start position:0%
though are both for storing data the
 

00:07:55.479 --> 00:07:57.059 align:start position:0%
though are both for storing data the
difference<00:07:55.840><c> is</c><00:07:55.990><c> that</c><00:07:56.020><c> the</c><00:07:56.259><c> stack</c><00:07:56.500><c> stores</c><00:07:56.889><c> the</c>

00:07:57.059 --> 00:07:57.069 align:start position:0%
difference is that the stack stores the
 

00:07:57.069 --> 00:07:59.010 align:start position:0%
difference is that the stack stores the
local<00:07:57.460><c> variables</c><00:07:57.909><c> used</c><00:07:58.180><c> by</c><00:07:58.300><c> the</c><00:07:58.360><c> process</c><00:07:58.810><c> and</c>

00:07:59.010 --> 00:07:59.020 align:start position:0%
local variables used by the process and
 

00:07:59.020 --> 00:08:01.920 align:start position:0%
local variables used by the process and
the<00:07:59.439><c> heap</c><00:07:59.590><c> stores</c><00:07:59.889><c> everything</c><00:08:00.159><c> else</c><00:08:00.930><c> looking</c>

00:08:01.920 --> 00:08:01.930 align:start position:0%
the heap stores everything else looking
 

00:08:01.930 --> 00:08:03.570 align:start position:0%
the heap stores everything else looking
at<00:08:02.050><c> the</c><00:08:02.169><c> stack</c><00:08:02.379><c> first</c><00:08:02.650><c> the</c><00:08:03.129><c> stack</c><00:08:03.340><c> is</c><00:08:03.550><c> a</c>

00:08:03.570 --> 00:08:03.580 align:start position:0%
at the stack first the stack is a
 

00:08:03.580 --> 00:08:05.279 align:start position:0%
at the stack first the stack is a
contiguous<00:08:04.029><c> chunk</c><00:08:04.240><c> of</c><00:08:04.569><c> memory</c><00:08:04.719><c> that</c><00:08:04.840><c> starts</c>

00:08:05.279 --> 00:08:05.289 align:start position:0%
contiguous chunk of memory that starts
 

00:08:05.289 --> 00:08:07.499 align:start position:0%
contiguous chunk of memory that starts
out<00:08:05.409><c> unused</c><00:08:06.039><c> when</c><00:08:06.669><c> the</c><00:08:06.759><c> first</c><00:08:06.969><c> function</c><00:08:07.389><c> is</c>

00:08:07.499 --> 00:08:07.509 align:start position:0%
out unused when the first function is
 

00:08:07.509 --> 00:08:09.600 align:start position:0%
out unused when the first function is
called<00:08:07.689><c> let's</c><00:08:08.110><c> call</c><00:08:08.289><c> it</c><00:08:08.409><c> main</c><00:08:08.680><c> it's</c><00:08:09.250><c> local</c>

00:08:09.600 --> 00:08:09.610 align:start position:0%
called let's call it main it's local
 

00:08:09.610 --> 00:08:11.100 align:start position:0%
called let's call it main it's local
variables<00:08:09.969><c> are</c><00:08:10.060><c> stored</c><00:08:10.360><c> on</c><00:08:10.449><c> the</c><00:08:10.509><c> stack</c><00:08:10.629><c> in</c><00:08:11.020><c> a</c>

00:08:11.100 --> 00:08:11.110 align:start position:0%
variables are stored on the stack in a
 

00:08:11.110 --> 00:08:13.170 align:start position:0%
variables are stored on the stack in a
grouping<00:08:11.409><c> called</c><00:08:11.469><c> a</c><00:08:11.770><c> frame</c><00:08:12.129><c> when</c><00:08:12.939><c> the</c><00:08:13.029><c> main</c>

00:08:13.170 --> 00:08:13.180 align:start position:0%
grouping called a frame when the main
 

00:08:13.180 --> 00:08:14.939 align:start position:0%
grouping called a frame when the main
function<00:08:13.569><c> itself</c><00:08:13.840><c> invokes</c><00:08:14.199><c> another</c><00:08:14.500><c> function</c>

00:08:14.939 --> 00:08:14.949 align:start position:0%
function itself invokes another function
 

00:08:14.949 --> 00:08:17.129 align:start position:0%
function itself invokes another function
let's<00:08:15.250><c> call</c><00:08:15.340><c> it</c><00:08:15.550><c> cat</c><00:08:15.819><c> the</c><00:08:16.389><c> local</c><00:08:16.689><c> variables</c><00:08:17.020><c> of</c>

00:08:17.129 --> 00:08:17.139 align:start position:0%
let's call it cat the local variables of
 

00:08:17.139 --> 00:08:18.929 align:start position:0%
let's call it cat the local variables of
cat<00:08:17.349><c> are</c><00:08:17.590><c> stored</c><00:08:17.889><c> in</c><00:08:18.039><c> another</c><00:08:18.189><c> frame</c><00:08:18.639><c> on</c><00:08:18.819><c> top</c>

00:08:18.929 --> 00:08:18.939 align:start position:0%
cat are stored in another frame on top
 

00:08:18.939 --> 00:08:21.390 align:start position:0%
cat are stored in another frame on top
along<00:08:19.810><c> with</c><00:08:19.870><c> the</c><00:08:20.139><c> size</c><00:08:20.379><c> of</c><00:08:20.560><c> the</c><00:08:20.650><c> frame</c><00:08:20.860><c> and</c><00:08:21.099><c> the</c>

00:08:21.390 --> 00:08:21.400 align:start position:0%
along with the size of the frame and the
 

00:08:21.400 --> 00:08:23.369 align:start position:0%
along with the size of the frame and the
return<00:08:21.669><c> address</c><00:08:22.000><c> the</c><00:08:22.539><c> address</c><00:08:22.629><c> to</c><00:08:22.960><c> jump</c><00:08:23.169><c> back</c>

00:08:23.369 --> 00:08:23.379 align:start position:0%
return address the address to jump back
 

00:08:23.379 --> 00:08:25.820 align:start position:0%
return address the address to jump back
to<00:08:23.620><c> when</c><00:08:23.889><c> execution</c><00:08:24.610><c> returns</c><00:08:25.000><c> from</c><00:08:25.330><c> cat</c>

00:08:25.820 --> 00:08:25.830 align:start position:0%
to when execution returns from cat
 

00:08:25.830 --> 00:08:27.869 align:start position:0%
to when execution returns from cat
likewise<00:08:26.830><c> if</c><00:08:27.039><c> cat</c><00:08:27.250><c> calls</c><00:08:27.520><c> another</c><00:08:27.729><c> function</c>

00:08:27.869 --> 00:08:27.879 align:start position:0%
likewise if cat calls another function
 

00:08:27.879 --> 00:08:30.959 align:start position:0%
likewise if cat calls another function
dog<00:08:28.539><c> then</c><00:08:29.139><c> dogs</c><00:08:29.469><c> local</c><00:08:29.919><c> variables</c><00:08:30.310><c> the</c><00:08:30.729><c> size</c>

00:08:30.959 --> 00:08:30.969 align:start position:0%
dog then dogs local variables the size
 

00:08:30.969 --> 00:08:32.730 align:start position:0%
dog then dogs local variables the size
of<00:08:31.120><c> its</c><00:08:31.270><c> frame</c><00:08:31.479><c> and</c><00:08:31.719><c> the</c><00:08:32.019><c> return</c><00:08:32.289><c> address</c><00:08:32.589><c> to</c>

00:08:32.730 --> 00:08:32.740 align:start position:0%
of its frame and the return address to
 

00:08:32.740 --> 00:08:34.969 align:start position:0%
of its frame and the return address to
cat<00:08:32.949><c> are</c><00:08:33.159><c> stored</c><00:08:33.729><c> in</c><00:08:33.849><c> another</c><00:08:33.969><c> frame</c><00:08:34.449><c> on</c><00:08:34.630><c> top</c>

00:08:34.969 --> 00:08:34.979 align:start position:0%
cat are stored in another frame on top
 

00:08:34.979 --> 00:08:37.709 align:start position:0%
cat are stored in another frame on top
notice<00:08:35.979><c> that</c><00:08:36.190><c> as</c><00:08:36.399><c> we</c><00:08:36.430><c> add</c><00:08:36.729><c> frames</c><00:08:37.060><c> we</c><00:08:37.449><c> have</c><00:08:37.479><c> to</c>

00:08:37.709 --> 00:08:37.719 align:start position:0%
notice that as we add frames we have to
 

00:08:37.719 --> 00:08:39.029 align:start position:0%
notice that as we add frames we have to
keep<00:08:37.870><c> track</c><00:08:38.140><c> at</c><00:08:38.289><c> the</c><00:08:38.380><c> top</c><00:08:38.560><c> of</c><00:08:38.709><c> the</c><00:08:38.800><c> stack</c>

00:08:39.029 --> 00:08:39.039 align:start position:0%
keep track at the top of the stack
 

00:08:39.039 --> 00:08:40.920 align:start position:0%
keep track at the top of the stack
because<00:08:39.310><c> that's</c><00:08:39.880><c> where</c><00:08:40.120><c> we</c><00:08:40.209><c> add</c><00:08:40.360><c> a</c><00:08:40.390><c> frame</c><00:08:40.719><c> when</c>

00:08:40.920 --> 00:08:40.930 align:start position:0%
because that's where we add a frame when
 

00:08:40.930 --> 00:08:42.180 align:start position:0%
because that's where we add a frame when
the<00:08:41.019><c> next</c><00:08:41.260><c> function</c><00:08:41.409><c> is</c><00:08:41.649><c> cold</c>

00:08:42.180 --> 00:08:42.190 align:start position:0%
the next function is cold
 

00:08:42.190 --> 00:08:45.689 align:start position:0%
the next function is cold
many<00:08:43.120><c> CPUs</c><00:08:43.659><c> including</c><00:08:44.229><c> x86</c><00:08:44.800><c> CPUs</c><00:08:45.190><c> have</c><00:08:45.399><c> a</c>

00:08:45.689 --> 00:08:45.699 align:start position:0%
many CPUs including x86 CPUs have a
 

00:08:45.699 --> 00:08:47.370 align:start position:0%
many CPUs including x86 CPUs have a
specific<00:08:46.269><c> register</c><00:08:46.690><c> for</c><00:08:46.930><c> storing</c><00:08:47.260><c> this</c>

00:08:47.370 --> 00:08:47.380 align:start position:0%
specific register for storing this
 

00:08:47.380 --> 00:08:49.430 align:start position:0%
specific register for storing this
address<00:08:47.740><c> usually</c><00:08:48.279><c> called</c><00:08:48.490><c> the</c><00:08:48.550><c> stack</c><00:08:48.820><c> pointer</c>

00:08:49.430 --> 00:08:49.440 align:start position:0%
address usually called the stack pointer
 

00:08:49.440 --> 00:08:52.230 align:start position:0%
address usually called the stack pointer
when<00:08:50.440><c> a</c><00:08:50.470><c> function</c><00:08:50.680><c> returns</c><00:08:51.250><c> the</c><00:08:51.490><c> frame</c><00:08:52.000><c> size</c>

00:08:52.230 --> 00:08:52.240 align:start position:0%
when a function returns the frame size
 

00:08:52.240 --> 00:08:54.120 align:start position:0%
when a function returns the frame size
is<00:08:52.480><c> used</c><00:08:52.690><c> to</c><00:08:52.810><c> adjust</c><00:08:52.959><c> the</c><00:08:53.290><c> stack</c><00:08:53.529><c> pointer</c><00:08:53.560><c> back</c>

00:08:54.120 --> 00:08:54.130 align:start position:0%
is used to adjust the stack pointer back
 

00:08:54.130 --> 00:08:56.400 align:start position:0%
is used to adjust the stack pointer back
down<00:08:54.430><c> to</c><00:08:54.610><c> the</c><00:08:54.699><c> last</c><00:08:54.880><c> frame</c><00:08:55.240><c> and</c><00:08:55.449><c> execution</c>

00:08:56.400 --> 00:08:56.410 align:start position:0%
down to the last frame and execution
 

00:08:56.410 --> 00:08:58.920 align:start position:0%
down to the last frame and execution
jumps<00:08:56.709><c> back</c><00:08:56.890><c> to</c><00:08:56.920><c> the</c><00:08:57.100><c> return</c><00:08:57.370><c> address</c><00:08:57.730><c> so</c><00:08:58.660><c> when</c>

00:08:58.920 --> 00:08:58.930 align:start position:0%
jumps back to the return address so when
 

00:08:58.930 --> 00:09:01.290 align:start position:0%
jumps back to the return address so when
dog<00:08:59.199><c> returns</c><00:08:59.670><c> execution</c><00:09:00.670><c> returns</c><00:09:00.940><c> the</c><00:09:01.089><c> cat</c>

00:09:01.290 --> 00:09:01.300 align:start position:0%
dog returns execution returns the cat
 

00:09:01.300 --> 00:09:03.060 align:start position:0%
dog returns execution returns the cat
and<00:09:01.570><c> the</c><00:09:01.930><c> stack</c><00:09:02.140><c> pointer</c><00:09:02.170><c> will</c><00:09:02.620><c> point</c><00:09:02.649><c> to</c><00:09:02.949><c> the</c>

00:09:03.060 --> 00:09:03.070 align:start position:0%
and the stack pointer will point to the
 

00:09:03.070 --> 00:09:05.759 align:start position:0%
and the stack pointer will point to the
top<00:09:03.250><c> of</c><00:09:03.430><c> cats</c><00:09:03.640><c> frame</c><00:09:04.470><c> notice</c><00:09:05.470><c> that</c><00:09:05.560><c> we</c><00:09:05.649><c> don't</c>

00:09:05.759 --> 00:09:05.769 align:start position:0%
top of cats frame notice that we don't
 

00:09:05.769 --> 00:09:07.470 align:start position:0%
top of cats frame notice that we don't
have<00:09:05.980><c> to</c><00:09:06.100><c> actually</c><00:09:06.490><c> delete</c><00:09:06.820><c> any</c><00:09:07.120><c> frames</c>

00:09:07.470 --> 00:09:07.480 align:start position:0%
have to actually delete any frames
 

00:09:07.480 --> 00:09:09.300 align:start position:0%
have to actually delete any frames
because<00:09:07.839><c> the</c><00:09:08.079><c> space</c><00:09:08.260><c> of</c><00:09:08.410><c> frame</c><00:09:08.589><c> occupies</c><00:09:09.100><c> will</c>

00:09:09.300 --> 00:09:09.310 align:start position:0%
because the space of frame occupies will
 

00:09:09.310 --> 00:09:11.009 align:start position:0%
because the space of frame occupies will
simply<00:09:09.640><c> get</c><00:09:09.760><c> overwritten</c><00:09:10.209><c> by</c><00:09:10.510><c> subsequent</c>

00:09:11.009 --> 00:09:11.019 align:start position:0%
simply get overwritten by subsequent
 

00:09:11.019 --> 00:09:13.560 align:start position:0%
simply get overwritten by subsequent
frames<00:09:11.380><c> as</c><00:09:11.620><c> needed</c><00:09:12.160><c> also</c><00:09:13.089><c> notice</c><00:09:13.360><c> that</c><00:09:13.390><c> the</c>

00:09:13.560 --> 00:09:13.570 align:start position:0%
frames as needed also notice that the
 

00:09:13.570 --> 00:09:15.150 align:start position:0%
frames as needed also notice that the
first<00:09:13.750><c> frame</c><00:09:13.990><c> is</c><00:09:14.170><c> special</c><00:09:14.620><c> because</c><00:09:14.829><c> the</c>

00:09:15.150 --> 00:09:15.160 align:start position:0%
first frame is special because the
 

00:09:15.160 --> 00:09:16.769 align:start position:0%
first frame is special because the
program<00:09:15.550><c> ends</c><00:09:15.880><c> when</c><00:09:16.029><c> the</c><00:09:16.120><c> first</c><00:09:16.329><c> function</c>

00:09:16.769 --> 00:09:16.779 align:start position:0%
program ends when the first function
 

00:09:16.779 --> 00:09:18.960 align:start position:0%
program ends when the first function
returns<00:09:17.110><c> so</c><00:09:17.709><c> the</c><00:09:17.920><c> first</c><00:09:18.100><c> frame</c><00:09:18.370><c> needn't</c><00:09:18.760><c> store</c>

00:09:18.960 --> 00:09:18.970 align:start position:0%
returns so the first frame needn't store
 

00:09:18.970 --> 00:09:21.150 align:start position:0%
returns so the first frame needn't store
its<00:09:19.089><c> size</c><00:09:19.300><c> or</c><00:09:19.720><c> any</c><00:09:20.079><c> return</c><00:09:20.410><c> address</c><00:09:20.709><c> because</c>

00:09:21.150 --> 00:09:21.160 align:start position:0%
its size or any return address because
 

00:09:21.160 --> 00:09:24.360 align:start position:0%
its size or any return address because
there's<00:09:21.430><c> nothing</c><00:09:21.550><c> to</c><00:09:21.730><c> return</c><00:09:22.029><c> to</c><00:09:23.310><c> now</c><00:09:24.310><c> the</c>

00:09:24.360 --> 00:09:24.370 align:start position:0%
there's nothing to return to now the
 

00:09:24.370 --> 00:09:26.250 align:start position:0%
there's nothing to return to now the
diagram<00:09:24.760><c> here</c><00:09:25.149><c> suggests</c><00:09:25.690><c> that</c><00:09:25.870><c> the</c><00:09:26.019><c> stack</c>

00:09:26.250 --> 00:09:26.260 align:start position:0%
diagram here suggests that the stack
 

00:09:26.260 --> 00:09:28.290 align:start position:0%
diagram here suggests that the stack
grows<00:09:26.560><c> from</c><00:09:26.829><c> the</c><00:09:26.920><c> bottom</c><00:09:27.250><c> but</c><00:09:27.670><c> in</c><00:09:27.910><c> many</c><00:09:28.060><c> cases</c>

00:09:28.290 --> 00:09:28.300 align:start position:0%
grows from the bottom but in many cases
 

00:09:28.300 --> 00:09:30.060 align:start position:0%
grows from the bottom but in many cases
the<00:09:28.630><c> stack</c><00:09:28.870><c> frames</c><00:09:29.170><c> start</c><00:09:29.500><c> at</c><00:09:29.649><c> high</c><00:09:29.860><c> memory</c>

00:09:30.060 --> 00:09:30.070 align:start position:0%
the stack frames start at high memory
 

00:09:30.070 --> 00:09:32.519 align:start position:0%
the stack frames start at high memory
addresses<00:09:30.579><c> and</c><00:09:30.730><c> grow</c><00:09:31.149><c> downwards</c><00:09:31.660><c> this</c><00:09:32.320><c> in</c>

00:09:32.519 --> 00:09:32.529 align:start position:0%
addresses and grow downwards this in
 

00:09:32.529 --> 00:09:35.460 align:start position:0%
addresses and grow downwards this in
fact<00:09:32.740><c> is</c><00:09:32.920><c> the</c><00:09:33.040><c> case</c><00:09:33.220><c> with</c><00:09:33.459><c> x86</c><00:09:34.180><c> CPUs</c><00:09:34.630><c> this</c>

00:09:35.460 --> 00:09:35.470 align:start position:0%
fact is the case with x86 CPUs this
 

00:09:35.470 --> 00:09:38.819 align:start position:0%
fact is the case with x86 CPUs this
choice<00:09:35.829><c> though</c><00:09:36.100><c> is</c><00:09:36.250><c> mostly</c><00:09:36.640><c> arbitrary</c><00:09:37.829><c> the</c>

00:09:38.819 --> 00:09:38.829 align:start position:0%
choice though is mostly arbitrary the
 

00:09:38.829 --> 00:09:39.360 align:start position:0%
choice though is mostly arbitrary the
size<00:09:39.069><c> of</c>

00:09:39.360 --> 00:09:39.370 align:start position:0%
size of
 

00:09:39.370 --> 00:09:41.220 align:start position:0%
size of
stack<00:09:39.580><c> space</c><00:09:39.760><c> in</c><00:09:40.060><c> some</c><00:09:40.240><c> systems</c><00:09:40.630><c> is</c><00:09:40.960><c> kept</c>

00:09:41.220 --> 00:09:41.230 align:start position:0%
stack space in some systems is kept
 

00:09:41.230 --> 00:09:42.840 align:start position:0%
stack space in some systems is kept
track<00:09:41.440><c> of</c><00:09:41.470><c> with</c><00:09:41.770><c> another</c><00:09:42.040><c> pointer</c><00:09:42.460><c> usually</c>

00:09:42.840 --> 00:09:42.850 align:start position:0%
track of with another pointer usually
 

00:09:42.850 --> 00:09:44.670 align:start position:0%
track of with another pointer usually
called<00:09:43.240><c> the</c><00:09:43.360><c> stack</c><00:09:43.600><c> boundary</c><00:09:44.050><c> kept</c><00:09:44.560><c> in</c>

00:09:44.670 --> 00:09:44.680 align:start position:0%
called the stack boundary kept in
 

00:09:44.680 --> 00:09:47.640 align:start position:0%
called the stack boundary kept in
another<00:09:44.950><c> CPU</c><00:09:45.220><c> register</c><00:09:45.940><c> in</c><00:09:46.290><c> CPUs</c><00:09:47.290><c> with</c><00:09:47.500><c> this</c>

00:09:47.640 --> 00:09:47.650 align:start position:0%
another CPU register in CPUs with this
 

00:09:47.650 --> 00:09:49.560 align:start position:0%
another CPU register in CPUs with this
register<00:09:48.100><c> when</c><00:09:48.640><c> the</c><00:09:48.760><c> stack</c><00:09:48.970><c> pointer</c><00:09:49.000><c> runs</c>

00:09:49.560 --> 00:09:49.570 align:start position:0%
register when the stack pointer runs
 

00:09:49.570 --> 00:09:51.630 align:start position:0%
register when the stack pointer runs
past<00:09:49.960><c> the</c><00:09:50.170><c> stack</c><00:09:50.380><c> boundary</c><00:09:50.830><c> this</c><00:09:51.220><c> triggers</c><00:09:51.610><c> a</c>

00:09:51.630 --> 00:09:51.640 align:start position:0%
past the stack boundary this triggers a
 

00:09:51.640 --> 00:09:52.920 align:start position:0%
past the stack boundary this triggers a
hardware<00:09:52.060><c> exception</c><00:09:52.540><c> and</c><00:09:52.690><c> the</c><00:09:52.900><c> exception</c>

00:09:52.920 --> 00:09:52.930 align:start position:0%
hardware exception and the exception
 

00:09:52.930 --> 00:09:55.050 align:start position:0%
hardware exception and the exception
handler<00:09:53.440><c> may</c><00:09:53.800><c> increase</c><00:09:54.130><c> the</c><00:09:54.310><c> stack</c><00:09:54.550><c> space</c><00:09:54.820><c> by</c>

00:09:55.050 --> 00:09:55.060 align:start position:0%
handler may increase the stack space by
 

00:09:55.060 --> 00:09:56.370 align:start position:0%
handler may increase the stack space by
moving<00:09:55.300><c> the</c><00:09:55.540><c> stack</c><00:09:55.720><c> boundary</c>

00:09:56.370 --> 00:09:56.380 align:start position:0%
moving the stack boundary
 

00:09:56.380 --> 00:09:58.320 align:start position:0%
moving the stack boundary
however<00:09:57.040><c> the</c><00:09:57.279><c> exception</c><00:09:57.670><c> handler</c><00:09:57.790><c> may</c><00:09:58.060><c> decide</c>

00:09:58.320 --> 00:09:58.330 align:start position:0%
however the exception handler may decide
 

00:09:58.330 --> 00:09:59.850 align:start position:0%
however the exception handler may decide
at<00:09:58.570><c> some</c><00:09:58.600><c> point</c><00:09:58.750><c> that</c><00:09:59.170><c> the</c><00:09:59.260><c> stack</c><00:09:59.470><c> has</c><00:09:59.620><c> grown</c>

00:09:59.850 --> 00:09:59.860 align:start position:0%
at some point that the stack has grown
 

00:09:59.860 --> 00:10:02.190 align:start position:0%
at some point that the stack has grown
too<00:10:00.040><c> large</c><00:10:00.070><c> and</c><00:10:00.610><c> may</c><00:10:00.760><c> simply</c><00:10:01.120><c> refuse</c><00:10:01.540><c> and</c><00:10:01.750><c> then</c>

00:10:02.190 --> 00:10:02.200 align:start position:0%
too large and may simply refuse and then
 

00:10:02.200 --> 00:10:04.070 align:start position:0%
too large and may simply refuse and then
instead<00:10:02.529><c> simply</c><00:10:02.800><c> terminate</c><00:10:03.310><c> the</c><00:10:03.400><c> process</c>

00:10:04.070 --> 00:10:04.080 align:start position:0%
instead simply terminate the process
 

00:10:04.080 --> 00:10:06.360 align:start position:0%
instead simply terminate the process
generally<00:10:05.080><c> the</c><00:10:05.380><c> processes</c><00:10:05.860><c> stack</c><00:10:06.100><c> should</c>

00:10:06.360 --> 00:10:06.370 align:start position:0%
generally the processes stack should
 

00:10:06.370 --> 00:10:08.490 align:start position:0%
generally the processes stack should
only<00:10:06.670><c> get</c><00:10:06.820><c> so</c><00:10:07.000><c> big</c><00:10:07.240><c> a</c><00:10:07.420><c> megabyte</c><00:10:07.960><c> or</c><00:10:08.110><c> two</c><00:10:08.260><c> at</c><00:10:08.410><c> the</c>

00:10:08.490 --> 00:10:08.500 align:start position:0%
only get so big a megabyte or two at the
 

00:10:08.500 --> 00:10:10.530 align:start position:0%
only get so big a megabyte or two at the
high<00:10:08.650><c> end</c><00:10:08.680><c> when</c><00:10:09.460><c> stacks</c><00:10:09.700><c> grow</c><00:10:09.910><c> past</c><00:10:10.089><c> this</c><00:10:10.360><c> size</c>

00:10:10.530 --> 00:10:10.540 align:start position:0%
high end when stacks grow past this size
 

00:10:10.540 --> 00:10:12.090 align:start position:0%
high end when stacks grow past this size
it's<00:10:11.080><c> generally</c><00:10:11.470><c> a</c><00:10:11.500><c> sign</c><00:10:11.740><c> of</c><00:10:11.890><c> an</c><00:10:11.980><c> underlying</c>

00:10:12.090 --> 00:10:12.100 align:start position:0%
it's generally a sign of an underlying
 

00:10:12.100 --> 00:10:13.620 align:start position:0%
it's generally a sign of an underlying
programming<00:10:12.970><c> error</c><00:10:13.150><c> that</c><00:10:13.360><c> should</c><00:10:13.510><c> be</c>

00:10:13.620 --> 00:10:13.630 align:start position:0%
programming error that should be
 

00:10:13.630 --> 00:10:16.200 align:start position:0%
programming error that should be
corrected<00:10:14.110><c> not</c><00:10:14.680><c> accommodated</c><00:10:15.460><c> the</c><00:10:16.029><c> most</c>

00:10:16.200 --> 00:10:16.210 align:start position:0%
corrected not accommodated the most
 

00:10:16.210 --> 00:10:18.060 align:start position:0%
corrected not accommodated the most
common<00:10:16.510><c> cause</c><00:10:16.690><c> of</c><00:10:16.720><c> an</c><00:10:17.050><c> overly</c><00:10:17.380><c> large</c><00:10:17.529><c> stack</c><00:10:17.860><c> is</c>

00:10:18.060 --> 00:10:18.070 align:start position:0%
common cause of an overly large stack is
 

00:10:18.070 --> 00:10:20.160 align:start position:0%
common cause of an overly large stack is
an<00:10:18.550><c> overly</c><00:10:19.000><c> long</c><00:10:19.180><c> chain</c><00:10:19.540><c> of</c><00:10:19.720><c> recursive</c>

00:10:20.160 --> 00:10:20.170 align:start position:0%
an overly long chain of recursive
 

00:10:20.170 --> 00:10:22.650 align:start position:0%
an overly long chain of recursive
function<00:10:20.529><c> calls</c><00:10:20.940><c> when</c><00:10:21.940><c> the</c><00:10:22.000><c> program</c><00:10:22.300><c> exceeds</c>

00:10:22.650 --> 00:10:22.660 align:start position:0%
function calls when the program exceeds
 

00:10:22.660 --> 00:10:24.480 align:start position:0%
function calls when the program exceeds
its<00:10:22.839><c> available</c><00:10:23.170><c> stack</c><00:10:23.410><c> space</c><00:10:23.710><c> the</c><00:10:24.160><c> error</c><00:10:24.339><c> is</c>

00:10:24.480 --> 00:10:24.490 align:start position:0%
its available stack space the error is
 

00:10:24.490 --> 00:10:26.820 align:start position:0%
its available stack space the error is
called<00:10:24.700><c> a</c><00:10:24.880><c> stack</c><00:10:25.210><c> overflow</c><00:10:25.560><c> when</c><00:10:26.560><c> a</c><00:10:26.589><c> stack</c>

00:10:26.820 --> 00:10:26.830 align:start position:0%
called a stack overflow when a stack
 

00:10:26.830 --> 00:10:29.460 align:start position:0%
called a stack overflow when a stack
overflow<00:10:26.860><c> occurs</c><00:10:27.580><c> on</c><00:10:27.790><c> the</c><00:10:27.880><c> PC</c><00:10:28.300><c> the</c><00:10:28.750><c> OS</c><00:10:29.110><c> usually</c>

00:10:29.460 --> 00:10:29.470 align:start position:0%
overflow occurs on the PC the OS usually
 

00:10:29.470 --> 00:10:31.620 align:start position:0%
overflow occurs on the PC the OS usually
terminates<00:10:29.890><c> the</c><00:10:30.010><c> errant</c><00:10:30.250><c> process</c><00:10:30.730><c> and</c><00:10:30.940><c> very</c>

00:10:31.620 --> 00:10:31.630 align:start position:0%
terminates the errant process and very
 

00:10:31.630 --> 00:10:33.210 align:start position:0%
terminates the errant process and very
simple<00:10:31.930><c> computers</c><00:10:32.350><c> however</c><00:10:32.650><c> such</c><00:10:32.980><c> as</c><00:10:33.100><c> in</c>

00:10:33.210 --> 00:10:33.220 align:start position:0%
simple computers however such as in
 

00:10:33.220 --> 00:10:35.190 align:start position:0%
simple computers however such as in
embedded<00:10:33.460><c> systems</c><00:10:33.610><c> the</c><00:10:34.390><c> stack</c><00:10:34.600><c> size</c><00:10:34.839><c> is</c><00:10:35.080><c> not</c>

00:10:35.190 --> 00:10:35.200 align:start position:0%
embedded systems the stack size is not
 

00:10:35.200 --> 00:10:36.660 align:start position:0%
embedded systems the stack size is not
necessarily<00:10:35.740><c> monitored</c><00:10:36.250><c> with</c><00:10:36.370><c> a</c><00:10:36.400><c> stack</c>

00:10:36.660 --> 00:10:36.670 align:start position:0%
necessarily monitored with a stack
 

00:10:36.670 --> 00:10:38.760 align:start position:0%
necessarily monitored with a stack
boundary<00:10:37.089><c> and</c><00:10:37.240><c> so</c><00:10:37.810><c> when</c><00:10:37.960><c> a</c><00:10:37.990><c> program</c><00:10:38.230><c> consumes</c>

00:10:38.760 --> 00:10:38.770 align:start position:0%
boundary and so when a program consumes
 

00:10:38.770 --> 00:10:40.620 align:start position:0%
boundary and so when a program consumes
more<00:10:38.980><c> stack</c><00:10:39.279><c> space</c><00:10:39.460><c> than</c><00:10:39.790><c> it</c><00:10:39.910><c> should</c><00:10:40.089><c> the</c>

00:10:40.620 --> 00:10:40.630 align:start position:0%
more stack space than it should the
 

00:10:40.630 --> 00:10:42.269 align:start position:0%
more stack space than it should the
stack<00:10:40.870><c> may</c><00:10:41.050><c> poke</c><00:10:41.230><c> into</c><00:10:41.410><c> parts</c><00:10:41.740><c> of</c><00:10:41.800><c> memory</c><00:10:41.950><c> used</c>

00:10:42.269 --> 00:10:42.279 align:start position:0%
stack may poke into parts of memory used
 

00:10:42.279 --> 00:10:44.340 align:start position:0%
stack may poke into parts of memory used
for<00:10:42.460><c> other</c><00:10:42.580><c> data</c><00:10:42.880><c> or</c><00:10:43.060><c> code</c><00:10:43.270><c> likely</c><00:10:43.990><c> causing</c>

00:10:44.340 --> 00:10:44.350 align:start position:0%
for other data or code likely causing
 

00:10:44.350 --> 00:10:47.850 align:start position:0%
for other data or code likely causing
unpredictable<00:10:45.040><c> bugs</c>

00:10:47.850 --> 00:10:47.860 align:start position:0%
 
 

00:10:47.860 --> 00:10:50.860 align:start position:0%
 
the<00:10:48.860><c> common</c><00:10:49.190><c> arrangement</c><00:10:49.370><c> in</c><00:10:49.730><c> pcs</c><00:10:50.180><c> is</c><00:10:50.600><c> to</c>

00:10:50.860 --> 00:10:50.870 align:start position:0%
the common arrangement in pcs is to
 

00:10:50.870 --> 00:10:52.180 align:start position:0%
the common arrangement in pcs is to
store<00:10:51.079><c> the</c><00:10:51.200><c> stack</c><00:10:51.410><c> at</c><00:10:51.620><c> the</c><00:10:51.740><c> top</c><00:10:51.950><c> of</c><00:10:52.130><c> a</c>

00:10:52.180 --> 00:10:52.190 align:start position:0%
store the stack at the top of a
 

00:10:52.190 --> 00:10:54.370 align:start position:0%
store the stack at the top of a
processes<00:10:52.700><c> address</c><00:10:53.000><c> space</c><00:10:53.269><c> and</c><00:10:53.540><c> the</c><00:10:53.870><c> text</c><00:10:54.260><c> the</c>

00:10:54.370 --> 00:10:54.380 align:start position:0%
processes address space and the text the
 

00:10:54.380 --> 00:10:56.050 align:start position:0%
processes address space and the text the
code<00:10:54.529><c> of</c><00:10:54.680><c> the</c><00:10:54.740><c> process</c><00:10:55.130><c> at</c><00:10:55.310><c> the</c><00:10:55.370><c> bottom</c><00:10:55.880><c> all</c>

00:10:56.050 --> 00:10:56.060 align:start position:0%
code of the process at the bottom all
 

00:10:56.060 --> 00:10:58.000 align:start position:0%
code of the process at the bottom all
the<00:10:56.630><c> remaining</c><00:10:57.079><c> space</c><00:10:57.260><c> in</c><00:10:57.440><c> between</c><00:10:57.589><c> is</c>

00:10:58.000 --> 00:10:58.010 align:start position:0%
the remaining space in between is
 

00:10:58.010 --> 00:10:59.250 align:start position:0%
the remaining space in between is
available<00:10:58.519><c> for</c><00:10:58.640><c> the</c><00:10:58.760><c> heap</c>

00:10:59.250 --> 00:10:59.260 align:start position:0%
available for the heap
 

00:10:59.260 --> 00:11:02.110 align:start position:0%
available for the heap
unlike<00:11:00.260><c> the</c><00:11:00.380><c> stack</c><00:11:00.620><c> in</c><00:11:00.800><c> text</c><00:11:01.130><c> however</c><00:11:01.310><c> no</c><00:11:01.880><c> heap</c>

00:11:02.110 --> 00:11:02.120 align:start position:0%
unlike the stack in text however no heap
 

00:11:02.120 --> 00:11:03.910 align:start position:0%
unlike the stack in text however no heap
space<00:11:02.390><c> exists</c><00:11:02.959><c> when</c><00:11:03.110><c> the</c><00:11:03.200><c> process</c><00:11:03.589><c> starts</c>

00:11:03.910 --> 00:11:03.920 align:start position:0%
space exists when the process starts
 

00:11:03.920 --> 00:11:06.130 align:start position:0%
space exists when the process starts
executing<00:11:04.490><c> instead</c><00:11:05.329><c> the</c><00:11:05.510><c> process</c><00:11:05.899><c> must</c>

00:11:06.130 --> 00:11:06.140 align:start position:0%
executing instead the process must
 

00:11:06.140 --> 00:11:07.810 align:start position:0%
executing instead the process must
explicitly<00:11:06.500><c> request</c><00:11:07.130><c> chunks</c><00:11:07.550><c> of</c><00:11:07.670><c> heap</c>

00:11:07.810 --> 00:11:07.820 align:start position:0%
explicitly request chunks of heap
 

00:11:07.820 --> 00:11:09.699 align:start position:0%
explicitly request chunks of heap
storage<00:11:08.180><c> from</c><00:11:08.329><c> the</c><00:11:08.390><c> OS</c><00:11:08.779><c> with</c><00:11:09.050><c> a</c><00:11:09.079><c> system</c><00:11:09.470><c> coal</c>

00:11:09.699 --> 00:11:09.709 align:start position:0%
storage from the OS with a system coal
 

00:11:09.709 --> 00:11:12.310 align:start position:0%
storage from the OS with a system coal
in<00:11:09.920><c> the</c><00:11:10.670><c> coal</c><00:11:10.700><c> the</c><00:11:11.120><c> process</c><00:11:11.570><c> specifies</c><00:11:12.079><c> what</c>

00:11:12.310 --> 00:11:12.320 align:start position:0%
in the coal the process specifies what
 

00:11:12.320 --> 00:11:14.710 align:start position:0%
in the coal the process specifies what
size<00:11:12.529><c> contiguous</c><00:11:13.100><c> chunk</c><00:11:13.160><c> at</c><00:11:13.490><c> once</c><00:11:13.670><c> but</c><00:11:14.209><c> the</c><00:11:14.360><c> OS</c>

00:11:14.710 --> 00:11:14.720 align:start position:0%
size contiguous chunk at once but the OS
 

00:11:14.720 --> 00:11:16.569 align:start position:0%
size contiguous chunk at once but the OS
decides<00:11:15.170><c> where</c><00:11:15.440><c> to</c><00:11:15.470><c> locate</c><00:11:15.950><c> these</c><00:11:16.100><c> chunks</c><00:11:16.490><c> in</c>

00:11:16.569 --> 00:11:16.579 align:start position:0%
decides where to locate these chunks in
 

00:11:16.579 --> 00:11:18.160 align:start position:0%
decides where to locate these chunks in
the<00:11:16.670><c> address</c><00:11:16.910><c> space</c><00:11:17.149><c> and</c><00:11:17.390><c> the</c><00:11:17.930><c> chunk</c>

00:11:18.160 --> 00:11:18.170 align:start position:0%
the address space and the chunk
 

00:11:18.170 --> 00:11:20.220 align:start position:0%
the address space and the chunk
locations<00:11:18.709><c> are</c><00:11:18.860><c> not</c><00:11:19.070><c> necessarily</c><00:11:19.579><c> adjacent</c>

00:11:20.220 --> 00:11:20.230 align:start position:0%
locations are not necessarily adjacent
 

00:11:20.230 --> 00:11:22.600 align:start position:0%
locations are not necessarily adjacent
when<00:11:21.230><c> a</c><00:11:21.260><c> process</c><00:11:21.709><c> is</c><00:11:21.860><c> done</c><00:11:22.010><c> with</c><00:11:22.220><c> a</c><00:11:22.250><c> chunk</c><00:11:22.519><c> of</c>

00:11:22.600 --> 00:11:22.610 align:start position:0%
when a process is done with a chunk of
 

00:11:22.610 --> 00:11:24.310 align:start position:0%
when a process is done with a chunk of
heap<00:11:22.820><c> it</c><00:11:23.269><c> should</c><00:11:23.480><c> give</c><00:11:23.600><c> the</c><00:11:23.750><c> chunk</c><00:11:23.959><c> back</c><00:11:24.170><c> to</c>

00:11:24.310 --> 00:11:24.320 align:start position:0%
heap it should give the chunk back to
 

00:11:24.320 --> 00:11:26.139 align:start position:0%
heap it should give the chunk back to
the<00:11:24.440><c> OS</c><00:11:24.740><c> with</c><00:11:24.920><c> a</c><00:11:24.950><c> system</c><00:11:25.339><c> call</c><00:11:25.550><c> to</c><00:11:25.730><c> deallocate</c>

00:11:26.139 --> 00:11:26.149 align:start position:0%
the OS with a system call to deallocate
 

00:11:26.149 --> 00:11:29.319 align:start position:0%
the OS with a system call to deallocate
it<00:11:26.769><c> is</c><00:11:27.769><c> the</c><00:11:27.860><c> responsibility</c><00:11:28.370><c> of</c><00:11:28.550><c> the</c><00:11:28.790><c> OS</c><00:11:29.089><c> to</c>

00:11:29.319 --> 00:11:29.329 align:start position:0%
it is the responsibility of the OS to
 

00:11:29.329 --> 00:11:30.730 align:start position:0%
it is the responsibility of the OS to
keep<00:11:29.480><c> track</c><00:11:29.750><c> of</c><00:11:29.899><c> which</c><00:11:30.050><c> portions</c><00:11:30.500><c> of</c><00:11:30.620><c> the</c>

00:11:30.730 --> 00:11:30.740 align:start position:0%
keep track of which portions of the
 

00:11:30.740 --> 00:11:32.139 align:start position:0%
keep track of which portions of the
address<00:11:31.010><c> space</c><00:11:31.040><c> are</c><00:11:31.430><c> free</c><00:11:31.670><c> for</c><00:11:31.880><c> future</c>

00:11:32.139 --> 00:11:32.149 align:start position:0%
address space are free for future
 

00:11:32.149 --> 00:11:34.269 align:start position:0%
address space are free for future
allocations<00:11:32.350><c> but</c><00:11:33.350><c> notice</c><00:11:33.740><c> that</c><00:11:33.769><c> as</c><00:11:33.980><c> a</c><00:11:34.010><c> process</c>

00:11:34.269 --> 00:11:34.279 align:start position:0%
allocations but notice that as a process
 

00:11:34.279 --> 00:11:36.250 align:start position:0%
allocations but notice that as a process
allocates<00:11:34.970><c> and</c><00:11:35.209><c> D</c><00:11:35.360><c> allocates</c><00:11:35.810><c> chunks</c><00:11:36.140><c> in</c>

00:11:36.250 --> 00:11:36.260 align:start position:0%
allocates and D allocates chunks in
 

00:11:36.260 --> 00:11:38.170 align:start position:0%
allocates and D allocates chunks in
memory<00:11:36.529><c> the</c><00:11:36.980><c> memory</c><00:11:37.100><c> space</c><00:11:37.430><c> can</c><00:11:37.640><c> become</c><00:11:37.910><c> more</c>

00:11:38.170 --> 00:11:38.180 align:start position:0%
memory the memory space can become more
 

00:11:38.180 --> 00:11:39.910 align:start position:0%
memory the memory space can become more
and<00:11:38.269><c> more</c><00:11:38.360><c> fragmented</c><00:11:39.140><c> effectively</c>

00:11:39.910 --> 00:11:39.920 align:start position:0%
and more fragmented effectively
 

00:11:39.920 --> 00:11:41.440 align:start position:0%
and more fragmented effectively
shrinking<00:11:40.310><c> the</c><00:11:40.399><c> size</c><00:11:40.550><c> of</c><00:11:40.760><c> heat</c><00:11:40.910><c> chunks</c><00:11:41.269><c> which</c>

00:11:41.440 --> 00:11:41.450 align:start position:0%
shrinking the size of heat chunks which
 

00:11:41.450 --> 00:11:43.660 align:start position:0%
shrinking the size of heat chunks which
the<00:11:41.630><c> OS</c><00:11:41.870><c> can</c><00:11:42.019><c> allocate</c><00:11:42.440><c> because</c><00:11:43.100><c> each</c><00:11:43.370><c> chunk</c>

00:11:43.660 --> 00:11:43.670 align:start position:0%
the OS can allocate because each chunk
 

00:11:43.670 --> 00:11:46.030 align:start position:0%
the OS can allocate because each chunk
must<00:11:43.970><c> be</c><00:11:44.120><c> contiguous</c><00:11:44.450><c> here</c><00:11:45.380><c> for</c><00:11:45.560><c> example</c><00:11:45.920><c> the</c>

00:11:46.030 --> 00:11:46.040 align:start position:0%
must be contiguous here for example the
 

00:11:46.040 --> 00:11:47.410 align:start position:0%
must be contiguous here for example the
largest<00:11:46.250><c> heap</c><00:11:46.459><c> chunk</c><00:11:46.730><c> which</c><00:11:46.910><c> the</c><00:11:47.060><c> OS</c><00:11:47.269><c> could</c>

00:11:47.410 --> 00:11:47.420 align:start position:0%
largest heap chunk which the OS could
 

00:11:47.420 --> 00:11:48.850 align:start position:0%
largest heap chunk which the OS could
allocate<00:11:47.630><c> is</c><00:11:47.930><c> considerably</c><00:11:48.440><c> smaller</c><00:11:48.709><c> than</c>

00:11:48.850 --> 00:11:48.860 align:start position:0%
allocate is considerably smaller than
 

00:11:48.860 --> 00:11:51.160 align:start position:0%
allocate is considerably smaller than
the<00:11:49.040><c> amount</c><00:11:49.220><c> of</c><00:11:49.399><c> free</c><00:11:49.640><c> space</c><00:11:49.670><c> remaining</c><00:11:50.420><c> good</c>

00:11:51.160 --> 00:11:51.170 align:start position:0%
the amount of free space remaining good
 

00:11:51.170 --> 00:11:52.960 align:start position:0%
the amount of free space remaining good
allocation<00:11:51.769><c> algorithms</c><00:11:52.220><c> can</c><00:11:52.430><c> minimize</c><00:11:52.790><c> this</c>

00:11:52.960 --> 00:11:52.970 align:start position:0%
allocation algorithms can minimize this
 

00:11:52.970 --> 00:11:54.819 align:start position:0%
allocation algorithms can minimize this
fragmentation<00:11:53.449><c> but</c><00:11:54.170><c> the</c><00:11:54.230><c> problem</c><00:11:54.529><c> can't</c><00:11:54.769><c> be</c>

00:11:54.819 --> 00:11:54.829 align:start position:0%
fragmentation but the problem can't be
 

00:11:54.829 --> 00:11:57.490 align:start position:0%
fragmentation but the problem can't be
avoided<00:11:55.310><c> entirely</c><00:11:55.810><c> this</c><00:11:56.810><c> partly</c><00:11:57.110><c> explains</c>

00:11:57.490 --> 00:11:57.500 align:start position:0%
avoided entirely this partly explains
 

00:11:57.500 --> 00:11:59.560 align:start position:0%
avoided entirely this partly explains
why<00:11:57.829><c> you</c><00:11:57.890><c> should</c><00:11:58.250><c> deallocate</c><00:11:58.940><c> chunks</c><00:11:59.269><c> of</c><00:11:59.390><c> heap</c>

00:11:59.560 --> 00:11:59.570 align:start position:0%
why you should deallocate chunks of heap
 

00:11:59.570 --> 00:12:01.420 align:start position:0%
why you should deallocate chunks of heap
when<00:11:59.810><c> you</c><00:11:59.899><c> no</c><00:12:00.079><c> longer</c><00:12:00.110><c> need</c><00:12:00.440><c> them</c><00:12:00.829><c> by</c><00:12:01.370><c> D</c>

00:12:01.420 --> 00:12:01.430 align:start position:0%
when you no longer need them by D
 

00:12:01.430 --> 00:12:03.490 align:start position:0%
when you no longer need them by D
allocating<00:12:02.149><c> you</c><00:12:02.540><c> free</c><00:12:02.779><c> up</c><00:12:02.899><c> areas</c><00:12:03.260><c> in</c><00:12:03.410><c> the</c>

00:12:03.490 --> 00:12:03.500 align:start position:0%
allocating you free up areas in the
 

00:12:03.500 --> 00:12:04.930 align:start position:0%
allocating you free up areas in the
address<00:12:03.800><c> space</c><00:12:04.070><c> so</c><00:12:04.310><c> that</c><00:12:04.459><c> they</c><00:12:04.670><c> can</c><00:12:04.850><c> be</c>

00:12:04.930 --> 00:12:04.940 align:start position:0%
address space so that they can be
 

00:12:04.940 --> 00:12:07.449 align:start position:0%
address space so that they can be
allocated<00:12:05.120><c> again</c><00:12:05.720><c> later</c><00:12:05.990><c> the</c><00:12:06.860><c> broader</c><00:12:07.100><c> reason</c>

00:12:07.449 --> 00:12:07.459 align:start position:0%
allocated again later the broader reason
 

00:12:07.459 --> 00:12:09.069 align:start position:0%
allocated again later the broader reason
to<00:12:07.579><c> deallocate</c><00:12:07.850><c> of</c><00:12:08.300><c> course</c><00:12:08.510><c> is</c><00:12:08.750><c> that</c><00:12:08.930><c> your</c>

00:12:09.069 --> 00:12:09.079 align:start position:0%
to deallocate of course is that your
 

00:12:09.079 --> 00:12:10.600 align:start position:0%
to deallocate of course is that your
process<00:12:09.410><c> might</c><00:12:09.560><c> simply</c><00:12:09.860><c> run</c><00:12:10.070><c> out</c><00:12:10.100><c> of</c><00:12:10.339><c> address</c>

00:12:10.600 --> 00:12:10.610 align:start position:0%
process might simply run out of address
 

00:12:10.610 --> 00:12:12.670 align:start position:0%
process might simply run out of address
space<00:12:10.730><c> at</c><00:12:11.029><c> some</c><00:12:11.180><c> point</c><00:12:11.480><c> even</c><00:12:12.260><c> if</c><00:12:12.350><c> your</c><00:12:12.470><c> process</c>

00:12:12.670 --> 00:12:12.680 align:start position:0%
space at some point even if your process
 

00:12:12.680 --> 00:12:14.110 align:start position:0%
space at some point even if your process
only<00:12:13.010><c> needs</c><00:12:13.250><c> a</c><00:12:13.370><c> modest</c><00:12:13.699><c> amount</c><00:12:13.820><c> of</c><00:12:13.970><c> heat</c>

00:12:14.110 --> 00:12:14.120 align:start position:0%
only needs a modest amount of heat
 

00:12:14.120 --> 00:12:16.180 align:start position:0%
only needs a modest amount of heat
memory<00:12:14.390><c> at</c><00:12:14.540><c> any</c><00:12:14.690><c> one</c><00:12:14.899><c> time</c><00:12:14.930><c> if</c><00:12:15.740><c> your</c><00:12:15.980><c> process</c>

00:12:16.180 --> 00:12:16.190 align:start position:0%
memory at any one time if your process
 

00:12:16.190 --> 00:12:18.009 align:start position:0%
memory at any one time if your process
runs<00:12:16.550><c> long</c><00:12:16.760><c> enough</c><00:12:17.029><c> without</c><00:12:17.390><c> properly</c><00:12:17.810><c> the</c>

00:12:18.009 --> 00:12:18.019 align:start position:0%
runs long enough without properly the
 

00:12:18.019 --> 00:12:19.990 align:start position:0%
runs long enough without properly the
allocating<00:12:18.500><c> heap</c><00:12:18.649><c> memory</c><00:12:18.829><c> the</c><00:12:19.459><c> process</c><00:12:19.880><c> may</c>

00:12:19.990 --> 00:12:20.000 align:start position:0%
allocating heap memory the process may
 

00:12:20.000 --> 00:12:21.790 align:start position:0%
allocating heap memory the process may
eventually<00:12:20.300><c> run</c><00:12:20.690><c> out</c><00:12:20.720><c> of</c><00:12:20.990><c> address</c><00:12:21.260><c> space</c><00:12:21.380><c> at</c>

00:12:21.790 --> 00:12:21.800 align:start position:0%
eventually run out of address space at
 

00:12:21.800 --> 00:12:23.560 align:start position:0%
eventually run out of address space at
which<00:12:22.130><c> point</c><00:12:22.399><c> new</c><00:12:22.579><c> allocations</c><00:12:23.180><c> will</c><00:12:23.329><c> fail</c>

00:12:23.560 --> 00:12:23.570 align:start position:0%
which point new allocations will fail
 

00:12:23.570 --> 00:12:25.329 align:start position:0%
which point new allocations will fail
likely<00:12:24.290><c> requiring</c><00:12:24.680><c> your</c><00:12:24.920><c> process</c><00:12:25.310><c> to</c>

00:12:25.329 --> 00:12:25.339 align:start position:0%
likely requiring your process to
 

00:12:25.339 --> 00:12:27.850 align:start position:0%
likely requiring your process to
terminate<00:12:25.850><c> prematurely</c><00:12:26.390><c> so</c><00:12:27.320><c> failing</c><00:12:27.800><c> to</c>

00:12:27.850 --> 00:12:27.860 align:start position:0%
terminate prematurely so failing to
 

00:12:27.860 --> 00:12:29.620 align:start position:0%
terminate prematurely so failing to
properly<00:12:28.010><c> allocate</c><00:12:28.490><c> unneeded</c><00:12:29.120><c> heap</c><00:12:29.449><c> memory</c>

00:12:29.620 --> 00:12:29.630 align:start position:0%
properly allocate unneeded heap memory
 

00:12:29.630 --> 00:12:31.960 align:start position:0%
properly allocate unneeded heap memory
is<00:12:29.990><c> generally</c><00:12:30.620><c> regarded</c><00:12:30.740><c> as</c><00:12:31.100><c> a</c><00:12:31.160><c> bug</c><00:12:31.399><c> called</c><00:12:31.820><c> a</c>

00:12:31.960 --> 00:12:31.970 align:start position:0%
is generally regarded as a bug called a
 

00:12:31.970 --> 00:12:33.490 align:start position:0%
is generally regarded as a bug called a
memory<00:12:32.209><c> leak</c><00:12:32.449><c> because</c><00:12:33.079><c> the</c><00:12:33.170><c> memory</c><00:12:33.410><c> available</c>

00:12:33.490 --> 00:12:33.500 align:start position:0%
memory leak because the memory available
 

00:12:33.500 --> 00:12:35.350 align:start position:0%
memory leak because the memory available
to<00:12:33.920><c> your</c><00:12:33.980><c> program</c><00:12:34.370><c> effectively</c><00:12:34.880><c> dwindles</c>

00:12:35.350 --> 00:12:35.360 align:start position:0%
to your program effectively dwindles
 

00:12:35.360 --> 00:12:37.870 align:start position:0%
to your program effectively dwindles
away<00:12:35.540><c> over</c><00:12:35.810><c> time</c><00:12:36.279><c> we'll</c><00:12:37.279><c> discuss</c><00:12:37.579><c> this</c><00:12:37.730><c> issue</c>

00:12:37.870 --> 00:12:37.880 align:start position:0%
away over time we'll discuss this issue
 

00:12:37.880 --> 00:12:39.220 align:start position:0%
away over time we'll discuss this issue
in<00:12:38.060><c> more</c><00:12:38.209><c> detail</c><00:12:38.570><c> on</c><00:12:38.600><c> the</c><00:12:38.870><c> unit</c><00:12:39.140><c> on</c>

00:12:39.220 --> 00:12:39.230 align:start position:0%
in more detail on the unit on
 

00:12:39.230 --> 00:12:45.030 align:start position:0%
in more detail on the unit on
programming<00:12:39.709><c> languages</c><00:12:43.510><c> the</c><00:12:44.510><c> memory</c>

00:12:45.030 --> 00:12:45.040 align:start position:0%
programming languages the memory
 

00:12:45.040 --> 00:12:46.829 align:start position:0%
programming languages the memory
of<00:12:45.310><c> a</c><00:12:45.370><c> process</c><00:12:45.790><c> do</c><00:12:46.029><c> not</c><00:12:46.060><c> actually</c><00:12:46.600><c> refer</c>

00:12:46.829 --> 00:12:46.839 align:start position:0%
of a process do not actually refer
 

00:12:46.839 --> 00:12:48.569 align:start position:0%
of a process do not actually refer
directly<00:12:47.019><c> to</c><00:12:47.410><c> actual</c><00:12:47.829><c> bytes</c><00:12:48.040><c> of</c><00:12:48.190><c> system</c>

00:12:48.569 --> 00:12:48.579 align:start position:0%
directly to actual bytes of system
 

00:12:48.579 --> 00:12:50.699 align:start position:0%
directly to actual bytes of system
memory<00:12:48.730><c> instead</c><00:12:49.720><c> chunks</c><00:12:50.170><c> of</c><00:12:50.290><c> the</c><00:12:50.350><c> process</c>

00:12:50.699 --> 00:12:50.709 align:start position:0%
memory instead chunks of the process
 

00:12:50.709 --> 00:12:51.840 align:start position:0%
memory instead chunks of the process
address<00:12:50.920><c> space</c><00:12:51.040><c> are</c><00:12:51.430><c> mapped</c><00:12:51.639><c> by</c><00:12:51.820><c> the</c>

00:12:51.840 --> 00:12:51.850 align:start position:0%
address space are mapped by the
 

00:12:51.850 --> 00:12:53.730 align:start position:0%
address space are mapped by the
operating<00:12:52.300><c> system</c><00:12:52.360><c> to</c><00:12:52.690><c> chunks</c><00:12:53.259><c> of</c><00:12:53.380><c> system</c>

00:12:53.730 --> 00:12:53.740 align:start position:0%
operating system to chunks of system
 

00:12:53.740 --> 00:12:55.710 align:start position:0%
operating system to chunks of system
memory<00:12:53.889><c> but</c><00:12:54.610><c> not</c><00:12:54.790><c> necessarily</c><00:12:55.300><c> contiguous</c>

00:12:55.710 --> 00:12:55.720 align:start position:0%
memory but not necessarily contiguous
 

00:12:55.720 --> 00:12:58.319 align:start position:0%
memory but not necessarily contiguous
Lior<00:12:56.199><c> in</c><00:12:56.350><c> the</c><00:12:56.440><c> same</c><00:12:56.649><c> order</c><00:12:57.009><c> here</c><00:12:57.850><c> for</c><00:12:58.089><c> example</c>

00:12:58.319 --> 00:12:58.329 align:start position:0%
Lior in the same order here for example
 

00:12:58.329 --> 00:13:00.300 align:start position:0%
Lior in the same order here for example
the<00:12:58.690><c> stack</c><00:12:58.899><c> is</c><00:12:59.050><c> mapped</c><00:12:59.259><c> to</c><00:12:59.380><c> one</c><00:12:59.680><c> area</c><00:13:00.040><c> of</c><00:13:00.100><c> RAM</c>

00:13:00.300 --> 00:13:00.310 align:start position:0%
the stack is mapped to one area of RAM
 

00:13:00.310 --> 00:13:02.129 align:start position:0%
the stack is mapped to one area of RAM
in<00:13:00.459><c> the</c><00:13:00.550><c> middle</c><00:13:00.820><c> the</c><00:13:01.240><c> code</c><00:13:01.449><c> section</c><00:13:01.839><c> is</c><00:13:01.959><c> mapped</c>

00:13:02.129 --> 00:13:02.139 align:start position:0%
in the middle the code section is mapped
 

00:13:02.139 --> 00:13:03.780 align:start position:0%
in the middle the code section is mapped
to<00:13:02.319><c> another</c><00:13:02.589><c> non</c><00:13:02.829><c> adjacent</c><00:13:03.100><c> area</c><00:13:03.519><c> of</c><00:13:03.579><c> RAM</c>

00:13:03.780 --> 00:13:03.790 align:start position:0%
to another non adjacent area of RAM
 

00:13:03.790 --> 00:13:05.759 align:start position:0%
to another non adjacent area of RAM
above<00:13:04.089><c> it</c><00:13:04.240><c> and</c><00:13:04.389><c> the</c><00:13:04.899><c> portions</c><00:13:05.259><c> of</c><00:13:05.350><c> heap</c><00:13:05.560><c> are</c>

00:13:05.759 --> 00:13:05.769 align:start position:0%
above it and the portions of heap are
 

00:13:05.769 --> 00:13:07.889 align:start position:0%
above it and the portions of heap are
mapped<00:13:05.949><c> in</c><00:13:06.160><c> non</c><00:13:06.310><c> adjacent</c><00:13:06.579><c> parts</c><00:13:07.029><c> of</c><00:13:07.149><c> RAM</c><00:13:07.360><c> in</c><00:13:07.569><c> a</c>

00:13:07.889 --> 00:13:07.899 align:start position:0%
mapped in non adjacent parts of RAM in a
 

00:13:07.899 --> 00:13:10.620 align:start position:0%
mapped in non adjacent parts of RAM in a
seemingly<00:13:08.290><c> random</c><00:13:08.529><c> order</c><00:13:08.980><c> when</c><00:13:09.940><c> the</c><00:13:09.970><c> OS</c><00:13:10.329><c> runs</c>

00:13:10.620 --> 00:13:10.630 align:start position:0%
seemingly random order when the OS runs
 

00:13:10.630 --> 00:13:12.600 align:start position:0%
seemingly random order when the OS runs
a<00:13:10.779><c> process</c><00:13:11.230><c> it</c><00:13:11.470><c> lists</c><00:13:12.100><c> these</c><00:13:12.279><c> address</c>

00:13:12.600 --> 00:13:12.610 align:start position:0%
a process it lists these address
 

00:13:12.610 --> 00:13:14.819 align:start position:0%
a process it lists these address
mappings<00:13:13.029><c> in</c><00:13:13.120><c> a</c><00:13:13.240><c> table</c><00:13:13.600><c> and</c><00:13:14.079><c> as</c><00:13:14.230><c> the</c><00:13:14.410><c> process</c>

00:13:14.819 --> 00:13:14.829 align:start position:0%
mappings in a table and as the process
 

00:13:14.829 --> 00:13:17.220 align:start position:0%
mappings in a table and as the process
runs<00:13:15.100><c> the</c><00:13:15.490><c> CPU</c><00:13:15.940><c> consults</c><00:13:16.449><c> this</c><00:13:16.569><c> table</c><00:13:16.930><c> to</c>

00:13:17.220 --> 00:13:17.230 align:start position:0%
runs the CPU consults this table to
 

00:13:17.230 --> 00:13:19.230 align:start position:0%
runs the CPU consults this table to
translate<00:13:17.680><c> from</c><00:13:17.920><c> process</c><00:13:18.370><c> addresses</c><00:13:18.880><c> to</c>

00:13:19.230 --> 00:13:19.240 align:start position:0%
translate from process addresses to
 

00:13:19.240 --> 00:13:21.840 align:start position:0%
translate from process addresses to
addresses<00:13:19.720><c> of</c><00:13:19.839><c> actual</c><00:13:20.199><c> RAM</c><00:13:20.470><c> for</c><00:13:21.279><c> example</c><00:13:21.670><c> if</c>

00:13:21.840 --> 00:13:21.850 align:start position:0%
addresses of actual RAM for example if
 

00:13:21.850 --> 00:13:23.100 align:start position:0%
addresses of actual RAM for example if
the<00:13:22.000><c> chunk</c><00:13:22.209><c> of</c><00:13:22.360><c> process</c><00:13:22.779><c> address</c><00:13:22.990><c> space</c>

00:13:23.100 --> 00:13:23.110 align:start position:0%
the chunk of process address space
 

00:13:23.110 --> 00:13:25.939 align:start position:0%
the chunk of process address space
starting<00:13:23.769><c> at</c><00:13:23.889><c> address</c><00:13:24.160><c> 0</c><00:13:24.490><c> is</c><00:13:25.000><c> mapped</c><00:13:25.329><c> to</c><00:13:25.509><c> byte</c>

00:13:25.939 --> 00:13:25.949 align:start position:0%
starting at address 0 is mapped to byte
 

00:13:25.949 --> 00:13:30.210 align:start position:0%
starting at address 0 is mapped to byte
ffff<00:13:26.949><c> 0</c><00:13:27.370><c> 0</c><00:13:27.670><c> 0</c><00:13:27.850><c> 0</c><00:13:28.149><c> of</c><00:13:28.240><c> RAM</c><00:13:28.660><c> then</c><00:13:29.290><c> address</c><00:13:29.589><c> 5</c><00:13:29.920><c> of</c>

00:13:30.210 --> 00:13:30.220 align:start position:0%
ffff 0 0 0 0 of RAM then address 5 of
 

00:13:30.220 --> 00:13:32.430 align:start position:0%
ffff 0 0 0 0 of RAM then address 5 of
the<00:13:30.339><c> process</c><00:13:30.759><c> address</c><00:13:31.000><c> space</c><00:13:31.199><c> translates</c><00:13:32.199><c> to</c>

00:13:32.430 --> 00:13:32.440 align:start position:0%
the process address space translates to
 

00:13:32.440 --> 00:13:37.980 align:start position:0%
the process address space translates to
byte<00:13:32.730><c> ffff</c><00:13:33.730><c> 0</c><00:13:34.329><c> 0</c><00:13:34.630><c> 0</c><00:13:34.899><c> 5</c><00:13:35.259><c> of</c><00:13:35.620><c> RAM</c><00:13:36.420><c> be</c><00:13:37.420><c> clear</c><00:13:37.690><c> that</c>

00:13:37.980 --> 00:13:37.990 align:start position:0%
byte ffff 0 0 0 5 of RAM be clear that
 

00:13:37.990 --> 00:13:39.780 align:start position:0%
byte ffff 0 0 0 5 of RAM be clear that
each<00:13:38.170><c> process</c><00:13:38.680><c> has</c><00:13:38.709><c> its</c><00:13:38.920><c> own</c><00:13:39.279><c> complete</c>

00:13:39.780 --> 00:13:39.790 align:start position:0%
each process has its own complete
 

00:13:39.790 --> 00:13:41.879 align:start position:0%
each process has its own complete
address<00:13:40.180><c> space</c><00:13:40.420><c> and</c><00:13:40.660><c> that</c><00:13:41.050><c> the</c><00:13:41.170><c> OS</c><00:13:41.470><c> keeps</c><00:13:41.740><c> a</c>

00:13:41.879 --> 00:13:41.889 align:start position:0%
address space and that the OS keeps a
 

00:13:41.889 --> 00:13:43.759 align:start position:0%
address space and that the OS keeps a
separate<00:13:42.250><c> memory</c><00:13:42.399><c> table</c><00:13:42.790><c> for</c><00:13:42.970><c> each</c><00:13:43.060><c> process</c>

00:13:43.759 --> 00:13:43.769 align:start position:0%
separate memory table for each process
 

00:13:43.769 --> 00:13:45.689 align:start position:0%
separate memory table for each process
effectively<00:13:44.769><c> then</c><00:13:44.920><c> the</c><00:13:45.130><c> process</c><00:13:45.519><c> can</c><00:13:45.550><c> be</c>

00:13:45.689 --> 00:13:45.699 align:start position:0%
effectively then the process can be
 

00:13:45.699 --> 00:13:48.120 align:start position:0%
effectively then the process can be
located<00:13:46.240><c> by</c><00:13:46.329><c> the</c><00:13:46.360><c> OS</c><00:13:46.779><c> in</c><00:13:47.019><c> any</c><00:13:47.230><c> part</c><00:13:47.560><c> of</c><00:13:47.649><c> RAM</c><00:13:47.860><c> and</c>

00:13:48.120 --> 00:13:48.130 align:start position:0%
located by the OS in any part of RAM and
 

00:13:48.130 --> 00:13:50.460 align:start position:0%
located by the OS in any part of RAM and
each<00:13:48.730><c> process</c><00:13:49.209><c> can</c><00:13:49.420><c> only</c><00:13:49.540><c> access</c><00:13:49.870><c> its</c><00:13:50.290><c> own</c>

00:13:50.460 --> 00:13:50.470 align:start position:0%
each process can only access its own
 

00:13:50.470 --> 00:13:52.590 align:start position:0%
each process can only access its own
memory<00:13:50.709><c> not</c><00:13:51.370><c> the</c><00:13:51.519><c> memory</c><00:13:51.790><c> of</c><00:13:51.819><c> other</c><00:13:52.029><c> processes</c>

00:13:52.590 --> 00:13:52.600 align:start position:0%
memory not the memory of other processes
 

00:13:52.600 --> 00:13:55.470 align:start position:0%
memory not the memory of other processes
or<00:13:52.839><c> memory</c><00:13:53.230><c> used</c><00:13:53.440><c> by</c><00:13:53.529><c> the</c><00:13:53.649><c> OS</c><00:13:54.040><c> when</c><00:13:55.029><c> a</c><00:13:55.060><c> process</c>

00:13:55.470 --> 00:13:55.480 align:start position:0%
or memory used by the OS when a process
 

00:13:55.480 --> 00:13:56.730 align:start position:0%
or memory used by the OS when a process
attempts<00:13:55.839><c> to</c><00:13:55.959><c> is</c><00:13:56.079><c> a</c><00:13:56.110><c> part</c><00:13:56.350><c> of</c><00:13:56.440><c> his</c><00:13:56.529><c> address</c>

00:13:56.730 --> 00:13:56.740 align:start position:0%
attempts to is a part of his address
 

00:13:56.740 --> 00:13:58.650 align:start position:0%
attempts to is a part of his address
space<00:13:57.040><c> which</c><00:13:57.069><c> is</c><00:13:57.430><c> not</c><00:13:57.639><c> mapped</c><00:13:57.880><c> to</c><00:13:58.149><c> actual</c><00:13:58.480><c> RAM</c>

00:13:58.650 --> 00:13:58.660 align:start position:0%
space which is not mapped to actual RAM
 

00:13:58.660 --> 00:14:00.600 align:start position:0%
space which is not mapped to actual RAM
in<00:13:58.810><c> the</c><00:13:58.839><c> process</c><00:13:59.260><c> memory</c><00:13:59.410><c> table</c><00:13:59.800><c> the</c><00:14:00.250><c> CPU</c>

00:14:00.600 --> 00:14:00.610 align:start position:0%
in the process memory table the CPU
 

00:14:00.610 --> 00:14:02.819 align:start position:0%
in the process memory table the CPU
triggers<00:14:00.910><c> a</c><00:14:00.940><c> Hardware</c><00:14:01.389><c> exception</c><00:14:01.899><c> and</c><00:14:02.050><c> the</c><00:14:02.560><c> OS</c>

00:14:02.819 --> 00:14:02.829 align:start position:0%
triggers a Hardware exception and the OS
 

00:14:02.829 --> 00:14:05.009 align:start position:0%
triggers a Hardware exception and the OS
then<00:14:03.069><c> typically</c><00:14:03.490><c> aborts</c><00:14:03.940><c> the</c><00:14:04.000><c> process</c><00:14:04.510><c> with</c>

00:14:05.009 --> 00:14:05.019 align:start position:0%
then typically aborts the process with
 

00:14:05.019 --> 00:14:06.509 align:start position:0%
then typically aborts the process with
an<00:14:05.139><c> error</c><00:14:05.350><c> message</c><00:14:05.410><c> complaining</c><00:14:06.279><c> about</c><00:14:06.399><c> a</c>

00:14:06.509 --> 00:14:06.519 align:start position:0%
an error message complaining about a
 

00:14:06.519 --> 00:14:08.730 align:start position:0%
an error message complaining about a
page<00:14:06.880><c> fault</c><00:14:07.180><c> because</c><00:14:07.959><c> the</c><00:14:08.079><c> maps</c><00:14:08.260><c> chunks</c><00:14:08.620><c> of</c>

00:14:08.730 --> 00:14:08.740 align:start position:0%
page fault because the maps chunks of
 

00:14:08.740 --> 00:14:11.910 align:start position:0%
page fault because the maps chunks of
memory<00:14:08.860><c> are</c><00:14:09.100><c> called</c><00:14:09.310><c> pages</c><00:14:10.110><c> each</c><00:14:11.110><c> page</c><00:14:11.589><c> is</c>

00:14:11.910 --> 00:14:11.920 align:start position:0%
memory are called pages each page is
 

00:14:11.920 --> 00:14:13.710 align:start position:0%
memory are called pages each page is
usually<00:14:12.279><c> a</c><00:14:12.490><c> set</c><00:14:12.699><c> size</c><00:14:12.910><c> which</c><00:14:13.240><c> depends</c><00:14:13.660><c> upon</c>

00:14:13.710 --> 00:14:13.720 align:start position:0%
usually a set size which depends upon
 

00:14:13.720 --> 00:14:16.889 align:start position:0%
usually a set size which depends upon
the<00:14:13.899><c> CPU</c><00:14:14.490><c> 32-bit</c><00:14:15.490><c> x86</c><00:14:15.910><c> processors</c><00:14:16.660><c> for</c>

00:14:16.889 --> 00:14:16.899 align:start position:0%
the CPU 32-bit x86 processors for
 

00:14:16.899 --> 00:14:20.069 align:start position:0%
the CPU 32-bit x86 processors for
example<00:14:17.319><c> usually</c><00:14:17.980><c> use</c><00:14:18.130><c> 4</c><00:14:18.459><c> kilobyte</c><00:14:18.880><c> pages</c><00:14:19.329><c> so</c>

00:14:20.069 --> 00:14:20.079 align:start position:0%
example usually use 4 kilobyte pages so
 

00:14:20.079 --> 00:14:21.990 align:start position:0%
example usually use 4 kilobyte pages so
in<00:14:20.260><c> fact</c><00:14:20.440><c> a</c><00:14:20.649><c> more</c><00:14:20.920><c> realistic</c><00:14:21.279><c> diagram</c><00:14:21.880><c> would</c>

00:14:21.990 --> 00:14:22.000 align:start position:0%
in fact a more realistic diagram would
 

00:14:22.000 --> 00:14:23.490 align:start position:0%
in fact a more realistic diagram would
show<00:14:22.180><c> that</c><00:14:22.329><c> the</c><00:14:22.449><c> stack</c><00:14:22.720><c> heap</c><00:14:23.019><c> and</c><00:14:23.260><c> code</c>

00:14:23.490 --> 00:14:23.500 align:start position:0%
show that the stack heap and code
 

00:14:23.500 --> 00:14:25.199 align:start position:0%
show that the stack heap and code
portions<00:14:23.980><c> of</c><00:14:24.069><c> a</c><00:14:24.160><c> process</c><00:14:24.519><c> address</c><00:14:24.730><c> space</c><00:14:24.819><c> are</c>

00:14:25.199 --> 00:14:25.209 align:start position:0%
portions of a process address space are
 

00:14:25.209 --> 00:14:28.079 align:start position:0%
portions of a process address space are
most<00:14:25.720><c> likely</c><00:14:25.899><c> not</c><00:14:26.050><c> mapped</c><00:14:26.500><c> as</c><00:14:26.680><c> whole</c><00:14:26.860><c> units</c><00:14:27.279><c> eg</c>

00:14:28.079 --> 00:14:28.089 align:start position:0%
most likely not mapped as whole units eg
 

00:14:28.089 --> 00:14:29.790 align:start position:0%
most likely not mapped as whole units eg
each<00:14:28.329><c> page</c><00:14:28.660><c> of</c><00:14:28.779><c> the</c><00:14:28.839><c> stack</c><00:14:29.110><c> may</c><00:14:29.319><c> be</c><00:14:29.380><c> mapped</c><00:14:29.680><c> to</c>

00:14:29.790 --> 00:14:29.800 align:start position:0%
each page of the stack may be mapped to
 

00:14:29.800 --> 00:14:31.889 align:start position:0%
each page of the stack may be mapped to
different<00:14:30.279><c> non</c><00:14:30.579><c> adjacent</c><00:14:30.880><c> pages</c><00:14:31.360><c> of</c><00:14:31.480><c> RAM</c><00:14:31.660><c> and</c>

00:14:31.889 --> 00:14:31.899 align:start position:0%
different non adjacent pages of RAM and
 

00:14:31.899 --> 00:14:35.970 align:start position:0%
different non adjacent pages of RAM and
in<00:14:32.410><c> no</c><00:14:32.589><c> particular</c><00:14:32.709><c> order</c><00:14:34.649><c> to</c><00:14:35.649><c> free</c><00:14:35.860><c> up</c>

00:14:35.970 --> 00:14:35.980 align:start position:0%
in no particular order to free up
 

00:14:35.980 --> 00:14:38.309 align:start position:0%
in no particular order to free up
valuable<00:14:36.010><c> RAM</c><00:14:36.670><c> the</c><00:14:37.149><c> OS</c><00:14:37.449><c> may</c><00:14:37.630><c> decide</c><00:14:37.899><c> to</c><00:14:37.959><c> swap</c>

00:14:38.309 --> 00:14:38.319 align:start position:0%
valuable RAM the OS may decide to swap
 

00:14:38.319 --> 00:14:40.199 align:start position:0%
valuable RAM the OS may decide to swap
out<00:14:38.529><c> pages</c><00:14:38.980><c> of</c><00:14:39.100><c> a</c><00:14:39.189><c> process</c><00:14:39.610><c> to</c><00:14:39.639><c> storage</c>

00:14:40.199 --> 00:14:40.209 align:start position:0%
out pages of a process to storage
 

00:14:40.209 --> 00:14:42.689 align:start position:0%
out pages of a process to storage
usually<00:14:40.630><c> a</c><00:14:40.839><c> hard</c><00:14:41.110><c> drive</c><00:14:41.350><c> here</c><00:14:42.100><c> for</c><00:14:42.339><c> example</c>

00:14:42.689 --> 00:14:42.699 align:start position:0%
usually a hard drive here for example
 

00:14:42.699 --> 00:14:44.309 align:start position:0%
usually a hard drive here for example
these<00:14:42.939><c> pages</c><00:14:43.329><c> of</c><00:14:43.449><c> heap</c><00:14:43.600><c> memory</c><00:14:43.750><c> are</c><00:14:44.050><c> not</c>

00:14:44.309 --> 00:14:44.319 align:start position:0%
these pages of heap memory are not
 

00:14:44.319 --> 00:14:46.019 align:start position:0%
these pages of heap memory are not
currently<00:14:44.709><c> mapped</c><00:14:44.949><c> to</c><00:14:45.189><c> any</c><00:14:45.220><c> part</c><00:14:45.699><c> of</c><00:14:45.790><c> RAM</c>

00:14:46.019 --> 00:14:46.029 align:start position:0%
currently mapped to any part of RAM
 

00:14:46.029 --> 00:14:48.179 align:start position:0%
currently mapped to any part of RAM
instead<00:14:46.930><c> their</c><00:14:47.139><c> data</c><00:14:47.290><c> has</c><00:14:47.380><c> been</c><00:14:47.649><c> temporarily</c>

00:14:48.179 --> 00:14:48.189 align:start position:0%
instead their data has been temporarily
 

00:14:48.189 --> 00:14:50.249 align:start position:0%
instead their data has been temporarily
copied<00:14:48.699><c> out</c><00:14:48.850><c> to</c><00:14:49.029><c> a</c><00:14:49.060><c> hard</c><00:14:49.269><c> drive</c><00:14:49.420><c> and</c><00:14:49.720><c> in</c><00:14:50.170><c> the</c>

00:14:50.249 --> 00:14:50.259 align:start position:0%
copied out to a hard drive and in the
 

00:14:50.259 --> 00:14:52.379 align:start position:0%
copied out to a hard drive and in the
process<00:14:50.649><c> memory</c><00:14:50.829><c> table</c><00:14:51.250><c> these</c><00:14:51.699><c> heap</c><00:14:52.000><c> pages</c>

00:14:52.379 --> 00:14:52.389 align:start position:0%
process memory table these heap pages
 

00:14:52.389 --> 00:14:55.019 align:start position:0%
process memory table these heap pages
have<00:14:52.540><c> been</c><00:14:52.630><c> marked</c><00:14:52.959><c> swapped</c><00:14:53.380><c> and</c><00:14:53.910><c> attempt</c><00:14:54.910><c> by</c>

00:14:55.019 --> 00:14:55.029 align:start position:0%
have been marked swapped and attempt by
 

00:14:55.029 --> 00:14:56.850 align:start position:0%
have been marked swapped and attempt by
the<00:14:55.089><c> process</c><00:14:55.600><c> to</c><00:14:55.750><c> access</c><00:14:56.199><c> an</c><00:14:56.350><c> address</c><00:14:56.620><c> in</c><00:14:56.800><c> a</c>

00:14:56.850 --> 00:14:56.860 align:start position:0%
the process to access an address in a
 

00:14:56.860 --> 00:14:59.120 align:start position:0%
the process to access an address in a
swapped<00:14:57.130><c> page</c><00:14:57.399><c> will</c><00:14:57.910><c> trigger</c><00:14:58.120><c> an</c><00:14:58.300><c> exception</c>

00:14:59.120 --> 00:14:59.130 align:start position:0%
swapped page will trigger an exception
 

00:14:59.130 --> 00:15:00.890 align:start position:0%
swapped page will trigger an exception
at<00:14:59.220><c> which</c><00:14:59.520><c> point</c><00:14:59.790><c> the</c><00:14:59.940><c> OS</c><00:15:00.270><c> will</c><00:15:00.300><c> copy</c><00:15:00.690><c> the</c>

00:15:00.890 --> 00:15:00.900 align:start position:0%
at which point the OS will copy the
 

00:15:00.900 --> 00:15:03.140 align:start position:0%
at which point the OS will copy the
swaps<00:15:01.140><c> page</c><00:15:01.410><c> back</c><00:15:01.710><c> to</c><00:15:01.920><c> rim</c><00:15:02.130><c> and</c><00:15:02.400><c> adjust</c><00:15:03.060><c> the</c>

00:15:03.140 --> 00:15:03.150 align:start position:0%
swaps page back to rim and adjust the
 

00:15:03.150 --> 00:15:04.820 align:start position:0%
swaps page back to rim and adjust the
memory<00:15:03.270><c> table</c><00:15:03.690><c> accordingly</c><00:15:04.110><c> before</c><00:15:04.590><c> allowing</c>

00:15:04.820 --> 00:15:04.830 align:start position:0%
memory table accordingly before allowing
 

00:15:04.830 --> 00:15:07.160 align:start position:0%
memory table accordingly before allowing
the<00:15:05.040><c> process</c><00:15:05.250><c> to</c><00:15:05.520><c> proceed</c><00:15:06.050><c> thanks</c><00:15:07.050><c> to</c>

00:15:07.160 --> 00:15:07.170 align:start position:0%
the process to proceed thanks to
 

00:15:07.170 --> 00:15:08.870 align:start position:0%
the process to proceed thanks to
swapping<00:15:07.590><c> the</c><00:15:07.800><c> total</c><00:15:08.100><c> memory</c><00:15:08.310><c> used</c><00:15:08.520><c> by</c><00:15:08.640><c> all</c>

00:15:08.870 --> 00:15:08.880 align:start position:0%
swapping the total memory used by all
 

00:15:08.880 --> 00:15:10.670 align:start position:0%
swapping the total memory used by all
processes<00:15:09.480><c> may</c><00:15:09.720><c> actually</c><00:15:09.990><c> exceed</c><00:15:10.560><c> the</c>

00:15:10.670 --> 00:15:10.680 align:start position:0%
processes may actually exceed the
 

00:15:10.680 --> 00:15:13.250 align:start position:0%
processes may actually exceed the
capacity<00:15:10.800><c> of</c><00:15:11.280><c> RAM</c><00:15:11.580><c> in</c><00:15:11.730><c> the</c><00:15:11.760><c> system</c><00:15:12.260><c> swapping</c>

00:15:13.250 --> 00:15:13.260 align:start position:0%
capacity of RAM in the system swapping
 

00:15:13.260 --> 00:15:14.870 align:start position:0%
capacity of RAM in the system swapping
pages<00:15:13.590><c> in</c><00:15:13.740><c> and</c><00:15:13.890><c> out</c><00:15:13.950><c> of</c><00:15:14.070><c> storage</c><00:15:14.370><c> is</c><00:15:14.520><c> of</c><00:15:14.640><c> course</c>

00:15:14.870 --> 00:15:14.880 align:start position:0%
pages in and out of storage is of course
 

00:15:14.880 --> 00:15:16.940 align:start position:0%
pages in and out of storage is of course
relatively<00:15:15.510><c> slow</c><00:15:15.750><c> but</c><00:15:16.380><c> better</c><00:15:16.650><c> that</c><00:15:16.740><c> the</c>

00:15:16.940 --> 00:15:16.950 align:start position:0%
relatively slow but better that the
 

00:15:16.950 --> 00:15:18.440 align:start position:0%
relatively slow but better that the
system<00:15:17.250><c> occasionally</c><00:15:17.760><c> goes</c><00:15:17.880><c> a</c><00:15:17.910><c> bit</c><00:15:18.150><c> slow</c><00:15:18.390><c> to</c>

00:15:18.440 --> 00:15:18.450 align:start position:0%
system occasionally goes a bit slow to
 

00:15:18.450 --> 00:15:20.630 align:start position:0%
system occasionally goes a bit slow to
swap<00:15:18.810><c> pages</c><00:15:19.200><c> rather</c><00:15:19.740><c> than</c><00:15:19.950><c> simply</c><00:15:20.250><c> cease</c><00:15:20.490><c> the</c>

00:15:20.630 --> 00:15:20.640 align:start position:0%
swap pages rather than simply cease the
 

00:15:20.640 --> 00:15:22.760 align:start position:0%
swap pages rather than simply cease the
function<00:15:21.000><c> by</c><00:15:21.150><c> running</c><00:15:21.510><c> out</c><00:15:21.630><c> of</c><00:15:21.660><c> memory</c><00:15:22.050><c> with</c>

00:15:22.760 --> 00:15:22.770 align:start position:0%
function by running out of memory with
 

00:15:22.770 --> 00:15:24.530 align:start position:0%
function by running out of memory with
swap<00:15:23.070><c> in</c><00:15:23.250><c> the</c><00:15:23.400><c> processes</c><00:15:23.940><c> can</c><00:15:24.120><c> use</c><00:15:24.270><c> as</c><00:15:24.420><c> much</c>

00:15:24.530 --> 00:15:24.540 align:start position:0%
swap in the processes can use as much
 

00:15:24.540 --> 00:15:26.060 align:start position:0%
swap in the processes can use as much
memory<00:15:24.900><c> space</c><00:15:25.140><c> as</c><00:15:25.350><c> the</c><00:15:25.440><c> system</c><00:15:25.740><c> has</c><00:15:25.860><c> free</c>

00:15:26.060 --> 00:15:26.070 align:start position:0%
memory space as the system has free
 

00:15:26.070 --> 00:15:28.730 align:start position:0%
memory space as the system has free
storage<00:15:26.370><c> in</c><00:15:26.750><c> practice</c><00:15:27.750><c> the</c><00:15:27.930><c> small</c><00:15:28.110><c> pages</c><00:15:28.440><c> in</c><00:15:28.680><c> a</c>

00:15:28.730 --> 00:15:28.740 align:start position:0%
storage in practice the small pages in a
 

00:15:28.740 --> 00:15:30.590 align:start position:0%
storage in practice the small pages in a
typical<00:15:29.100><c> PC</c><00:15:29.400><c> at</c><00:15:29.610><c> any</c><00:15:29.820><c> moment</c><00:15:30.210><c> will</c><00:15:30.330><c> rarely</c>

00:15:30.590 --> 00:15:30.600 align:start position:0%
typical PC at any moment will rarely
 

00:15:30.600 --> 00:15:32.210 align:start position:0%
typical PC at any moment will rarely
exceed<00:15:30.990><c> more</c><00:15:31.200><c> than</c><00:15:31.260><c> a</c><00:15:31.380><c> gigabyte</c><00:15:31.590><c> or</c><00:15:31.860><c> two</c><00:15:32.100><c> of</c>

00:15:32.210 --> 00:15:32.220 align:start position:0%
exceed more than a gigabyte or two of
 

00:15:32.220 --> 00:15:34.280 align:start position:0%
exceed more than a gigabyte or two of
storage<00:15:32.550><c> but</c><00:15:33.150><c> most</c><00:15:33.450><c> pages</c><00:15:33.630><c> used</c><00:15:33.930><c> by</c><00:15:34.080><c> most</c>

00:15:34.280 --> 00:15:34.290 align:start position:0%
storage but most pages used by most
 

00:15:34.290 --> 00:15:35.840 align:start position:0%
storage but most pages used by most
processes<00:15:34.800><c> don't</c><00:15:35.100><c> get</c><00:15:35.340><c> used</c><00:15:35.550><c> very</c><00:15:35.820><c> frequently</c>

00:15:35.840 --> 00:15:35.850 align:start position:0%
processes don't get used very frequently
 

00:15:35.850 --> 00:15:38.120 align:start position:0%
processes don't get used very frequently
so<00:15:36.720><c> they</c><00:15:36.960><c> might</c><00:15:37.110><c> as</c><00:15:37.200><c> well</c><00:15:37.230><c> sit</c><00:15:37.560><c> in</c><00:15:37.650><c> swap</c><00:15:37.920><c> space</c>

00:15:38.120 --> 00:15:38.130 align:start position:0%
so they might as well sit in swap space
 

00:15:38.130 --> 00:15:43.430 align:start position:0%
so they might as well sit in swap space
most<00:15:38.430><c> of</c><00:15:38.580><c> the</c><00:15:38.670><c> time</c><00:15:41.030><c> in</c><00:15:42.030><c> its</c><00:15:42.750><c> life</c><00:15:42.930><c> cycle</c><00:15:43.110><c> a</c>

00:15:43.430 --> 00:15:43.440 align:start position:0%
most of the time in its life cycle a
 

00:15:43.440 --> 00:15:45.200 align:start position:0%
most of the time in its life cycle a
process<00:15:44.010><c> transitions</c><00:15:44.460><c> through</c><00:15:44.700><c> a</c><00:15:44.730><c> few</c><00:15:45.000><c> major</c>

00:15:45.200 --> 00:15:45.210 align:start position:0%
process transitions through a few major
 

00:15:45.210 --> 00:15:47.510 align:start position:0%
process transitions through a few major
States<00:15:45.600><c> after</c><00:15:46.320><c> the</c><00:15:46.590><c> OS</c><00:15:46.890><c> does</c><00:15:47.160><c> all</c><00:15:47.370><c> the</c>

00:15:47.510 --> 00:15:47.520 align:start position:0%
States after the OS does all the
 

00:15:47.520 --> 00:15:49.100 align:start position:0%
States after the OS does all the
business<00:15:47.820><c> it</c><00:15:47.970><c> needs</c><00:15:48.000><c> at</c><00:15:48.360><c> time</c><00:15:48.570><c> of</c><00:15:48.600><c> process</c>

00:15:49.100 --> 00:15:49.110 align:start position:0%
business it needs at time of process
 

00:15:49.110 --> 00:15:51.320 align:start position:0%
business it needs at time of process
creation<00:15:49.440><c> the</c><00:15:50.010><c> process</c><00:15:50.430><c> transitions</c><00:15:50.940><c> into</c>

00:15:51.320 --> 00:15:51.330 align:start position:0%
creation the process transitions into
 

00:15:51.330 --> 00:15:53.570 align:start position:0%
creation the process transitions into
the<00:15:51.450><c> waiting</c><00:15:51.810><c> state</c><00:15:52.110><c> the</c><00:15:52.860><c> sense</c><00:15:53.100><c> of</c><00:15:53.250><c> waiting</c>

00:15:53.570 --> 00:15:53.580 align:start position:0%
the waiting state the sense of waiting
 

00:15:53.580 --> 00:15:55.610 align:start position:0%
the waiting state the sense of waiting
here<00:15:54.030><c> is</c><00:15:54.180><c> waiting</c><00:15:54.840><c> to</c><00:15:54.960><c> be</c><00:15:55.050><c> selected</c><00:15:55.470><c> by</c><00:15:55.560><c> the</c>

00:15:55.610 --> 00:15:55.620 align:start position:0%
here is waiting to be selected by the
 

00:15:55.620 --> 00:15:57.980 align:start position:0%
here is waiting to be selected by the
scheduler<00:15:56.030><c> when</c><00:15:57.030><c> the</c><00:15:57.120><c> scheduler</c><00:15:57.540><c> selects</c><00:15:57.870><c> the</c>

00:15:57.980 --> 00:15:57.990 align:start position:0%
scheduler when the scheduler selects the
 

00:15:57.990 --> 00:15:59.930 align:start position:0%
scheduler when the scheduler selects the
process<00:15:58.350><c> to</c><00:15:58.500><c> run</c><00:15:58.650><c> and</c><00:15:59.100><c> then</c><00:15:59.250><c> of</c><00:15:59.370><c> course</c><00:15:59.400><c> enters</c>

00:15:59.930 --> 00:15:59.940 align:start position:0%
process to run and then of course enters
 

00:15:59.940 --> 00:16:01.910 align:start position:0%
process to run and then of course enters
the<00:16:00.120><c> running</c><00:16:00.450><c> state</c><00:16:00.720><c> when</c><00:16:01.470><c> the</c><00:16:01.560><c> scheduler</c>

00:16:01.910 --> 00:16:01.920 align:start position:0%
the running state when the scheduler
 

00:16:01.920 --> 00:16:03.350 align:start position:0%
the running state when the scheduler
selects<00:16:02.190><c> a</c><00:16:02.280><c> different</c><00:16:02.310><c> process</c><00:16:02.910><c> to</c><00:16:02.940><c> run</c><00:16:03.180><c> on</c>

00:16:03.350 --> 00:16:03.360 align:start position:0%
selects a different process to run on
 

00:16:03.360 --> 00:16:05.300 align:start position:0%
selects a different process to run on
the<00:16:03.480><c> same</c><00:16:03.600><c> core</c><00:16:03.960><c> this</c><00:16:04.440><c> process</c><00:16:04.920><c> is</c><00:16:05.070><c> placed</c>

00:16:05.300 --> 00:16:05.310 align:start position:0%
the same core this process is placed
 

00:16:05.310 --> 00:16:07.610 align:start position:0%
the same core this process is placed
back<00:16:05.520><c> into</c><00:16:05.790><c> the</c><00:16:05.970><c> waiting</c><00:16:06.240><c> State</c><00:16:06.480><c> a</c><00:16:06.720><c> process</c>

00:16:07.610 --> 00:16:07.620 align:start position:0%
back into the waiting State a process
 

00:16:07.620 --> 00:16:09.140 align:start position:0%
back into the waiting State a process
typically<00:16:08.040><c> goes</c><00:16:08.220><c> back</c><00:16:08.490><c> and</c><00:16:08.700><c> forth</c><00:16:08.730><c> many</c><00:16:09.030><c> times</c>

00:16:09.140 --> 00:16:09.150 align:start position:0%
typically goes back and forth many times
 

00:16:09.150 --> 00:16:11.240 align:start position:0%
typically goes back and forth many times
between<00:16:09.570><c> waiting</c><00:16:10.080><c> and</c><00:16:10.230><c> running</c><00:16:10.500><c> until</c><00:16:10.650><c> the</c>

00:16:11.240 --> 00:16:11.250 align:start position:0%
between waiting and running until the
 

00:16:11.250 --> 00:16:13.100 align:start position:0%
between waiting and running until the
process<00:16:11.460><c> ends</c><00:16:11.880><c> at</c><00:16:12.210><c> which</c><00:16:12.600><c> point</c><00:16:12.870><c> it</c><00:16:12.990><c> enters</c>

00:16:13.100 --> 00:16:13.110 align:start position:0%
process ends at which point it enters
 

00:16:13.110 --> 00:16:16.400 align:start position:0%
process ends at which point it enters
its<00:16:13.440><c> final</c><00:16:13.740><c> state</c><00:16:13.950><c> terminated</c><00:16:15.140><c> there</c><00:16:16.140><c> is</c><00:16:16.260><c> at</c>

00:16:16.400 --> 00:16:16.410 align:start position:0%
its final state terminated there is at
 

00:16:16.410 --> 00:16:18.380 align:start position:0%
its final state terminated there is at
least<00:16:16.530><c> one</c><00:16:16.800><c> more</c><00:16:17.040><c> important</c><00:16:17.490><c> state</c><00:16:17.730><c> blocked</c>

00:16:18.380 --> 00:16:18.390 align:start position:0%
least one more important state blocked
 

00:16:18.390 --> 00:16:20.870 align:start position:0%
least one more important state blocked
in<00:16:18.660><c> the</c><00:16:19.260><c> blocked</c><00:16:19.530><c> State</c><00:16:19.920><c> the</c><00:16:20.280><c> process</c><00:16:20.700><c> is</c>

00:16:20.870 --> 00:16:20.880 align:start position:0%
in the blocked State the process is
 

00:16:20.880 --> 00:16:22.790 align:start position:0%
in the blocked State the process is
waiting<00:16:21.420><c> for</c><00:16:21.720><c> some</c><00:16:21.900><c> external</c><00:16:22.320><c> event</c><00:16:22.590><c> in</c><00:16:22.710><c> the</c>

00:16:22.790 --> 00:16:22.800 align:start position:0%
waiting for some external event in the
 

00:16:22.800 --> 00:16:24.950 align:start position:0%
waiting for some external event in the
system<00:16:23.160><c> before</c><00:16:23.310><c> can</c><00:16:23.730><c> proceed</c><00:16:24.090><c> rather</c><00:16:24.720><c> than</c>

00:16:24.950 --> 00:16:24.960 align:start position:0%
system before can proceed rather than
 

00:16:24.960 --> 00:16:27.170 align:start position:0%
system before can proceed rather than
waiting<00:16:25.320><c> to</c><00:16:25.590><c> be</c><00:16:25.710><c> scheduled</c><00:16:26.130><c> so</c><00:16:26.760><c> it</c><00:16:26.940><c> is</c><00:16:27.060><c> in</c>

00:16:27.170 --> 00:16:27.180 align:start position:0%
waiting to be scheduled so it is in
 

00:16:27.180 --> 00:16:29.300 align:start position:0%
waiting to be scheduled so it is in
neither<00:16:27.360><c> the</c><00:16:27.600><c> state</c><00:16:27.810><c> of</c><00:16:27.990><c> running</c><00:16:28.290><c> nor</c><00:16:28.740><c> so</c><00:16:29.040><c> cold</c>

00:16:29.300 --> 00:16:29.310 align:start position:0%
neither the state of running nor so cold
 

00:16:29.310 --> 00:16:31.970 align:start position:0%
neither the state of running nor so cold
waiting<00:16:29.720><c> most</c><00:16:30.720><c> commonly</c><00:16:31.200><c> the</c><00:16:31.410><c> block</c><00:16:31.590><c> state</c><00:16:31.830><c> is</c>

00:16:31.970 --> 00:16:31.980 align:start position:0%
waiting most commonly the block state is
 

00:16:31.980 --> 00:16:33.560 align:start position:0%
waiting most commonly the block state is
triggered<00:16:32.280><c> when</c><00:16:32.400><c> a</c><00:16:32.430><c> process</c><00:16:32.880><c> invokes</c><00:16:33.210><c> certain</c>

00:16:33.560 --> 00:16:33.570 align:start position:0%
triggered when a process invokes certain
 

00:16:33.570 --> 00:16:35.660 align:start position:0%
triggered when a process invokes certain
system<00:16:33.990><c> calls</c><00:16:34.230><c> such</c><00:16:34.830><c> as</c><00:16:34.950><c> for</c><00:16:35.130><c> reading</c><00:16:35.370><c> files</c>

00:16:35.660 --> 00:16:35.670 align:start position:0%
system calls such as for reading files
 

00:16:35.670 --> 00:16:38.000 align:start position:0%
system calls such as for reading files
reading<00:16:36.570><c> a</c><00:16:36.630><c> file</c><00:16:36.810><c> often</c><00:16:37.230><c> blocks</c><00:16:37.440><c> the</c><00:16:37.590><c> process</c>

00:16:38.000 --> 00:16:38.010 align:start position:0%
reading a file often blocks the process
 

00:16:38.010 --> 00:16:39.620 align:start position:0%
reading a file often blocks the process
because<00:16:38.340><c> most</c><00:16:38.640><c> storage</c><00:16:38.940><c> devices</c><00:16:39.240><c> such</c><00:16:39.600><c> as</c>

00:16:39.620 --> 00:16:39.630 align:start position:0%
because most storage devices such as
 

00:16:39.630 --> 00:16:41.690 align:start position:0%
because most storage devices such as
hard<00:16:39.750><c> drives</c><00:16:40.050><c> are</c><00:16:40.620><c> relatively</c><00:16:41.070><c> much</c><00:16:41.400><c> slower</c>

00:16:41.690 --> 00:16:41.700 align:start position:0%
hard drives are relatively much slower
 

00:16:41.700 --> 00:16:44.270 align:start position:0%
hard drives are relatively much slower
than<00:16:41.820><c> the</c><00:16:42.030><c> operations</c><00:16:42.540><c> of</c><00:16:42.630><c> the</c><00:16:42.750><c> CPU</c><00:16:43.200><c> and</c><00:16:43.410><c> often</c>

00:16:44.270 --> 00:16:44.280 align:start position:0%
than the operations of the CPU and often
 

00:16:44.280 --> 00:16:45.560 align:start position:0%
than the operations of the CPU and often
a<00:16:44.370><c> program</c><00:16:44.640><c> cannot</c><00:16:44.880><c> do</c><00:16:45.060><c> anything</c><00:16:45.270><c> useful</c>

00:16:45.560 --> 00:16:45.570 align:start position:0%
a program cannot do anything useful
 

00:16:45.570 --> 00:16:47.540 align:start position:0%
a program cannot do anything useful
until<00:16:46.320><c> it</c><00:16:46.440><c> gets</c><00:16:46.590><c> the</c><00:16:46.710><c> data</c><00:16:46.830><c> it</c><00:16:47.070><c> needs</c><00:16:47.250><c> from</c><00:16:47.430><c> a</c>

00:16:47.540 --> 00:16:47.550 align:start position:0%
until it gets the data it needs from a
 

00:16:47.550 --> 00:16:50.030 align:start position:0%
until it gets the data it needs from a
file<00:16:47.820><c> in</c><00:16:48.060><c> such</c><00:16:48.840><c> cases</c><00:16:49.110><c> the</c><00:16:49.410><c> process</c><00:16:49.620><c> might</c><00:16:49.920><c> as</c>

00:16:50.030 --> 00:16:50.040 align:start position:0%
file in such cases the process might as
 

00:16:50.040 --> 00:16:51.530 align:start position:0%
file in such cases the process might as
well<00:16:50.130><c> relinquish</c><00:16:50.580><c> the</c><00:16:50.700><c> CPU</c><00:16:51.090><c> core</c><00:16:51.330><c> it</c><00:16:51.420><c> was</c>

00:16:51.530 --> 00:16:51.540 align:start position:0%
well relinquish the CPU core it was
 

00:16:51.540 --> 00:16:53.420 align:start position:0%
well relinquish the CPU core it was
using<00:16:51.720><c> and</c><00:16:52.020><c> take</c><00:16:52.470><c> itself</c><00:16:52.770><c> out</c><00:16:53.010><c> of</c><00:16:53.070><c> the</c><00:16:53.250><c> wading</c>

00:16:53.420 --> 00:16:53.430 align:start position:0%
using and take itself out of the wading
 

00:16:53.430 --> 00:16:55.580 align:start position:0%
using and take itself out of the wading
pool<00:16:53.580><c> allowing</c><00:16:54.510><c> other</c><00:16:54.690><c> processes</c><00:16:55.230><c> to</c><00:16:55.410><c> run</c>

00:16:55.580 --> 00:16:55.590 align:start position:0%
pool allowing other processes to run
 

00:16:55.590 --> 00:16:57.770 align:start position:0%
pool allowing other processes to run
while<00:16:55.770><c> it</c><00:16:55.950><c> waits</c><00:16:56.100><c> once</c><00:16:57.060><c> the</c><00:16:57.180><c> operating</c><00:16:57.510><c> system</c>

00:16:57.770 --> 00:16:57.780 align:start position:0%
while it waits once the operating system
 

00:16:57.780 --> 00:16:59.390 align:start position:0%
while it waits once the operating system
finishes<00:16:58.200><c> retrieving</c><00:16:58.680><c> the</c><00:16:58.770><c> requested</c><00:16:59.250><c> data</c>

00:16:59.390 --> 00:16:59.400 align:start position:0%
finishes retrieving the requested data
 

00:16:59.400 --> 00:17:01.550 align:start position:0%
finishes retrieving the requested data
from<00:16:59.640><c> storage</c><00:17:00.000><c> it</c><00:17:00.420><c> unblocks</c><00:17:00.930><c> the</c><00:17:01.110><c> process</c>

00:17:01.550 --> 00:17:01.560 align:start position:0%
from storage it unblocks the process
 

00:17:01.560 --> 00:17:03.320 align:start position:0%
from storage it unblocks the process
putting<00:17:02.130><c> it</c><00:17:02.250><c> back</c><00:17:02.400><c> into</c><00:17:02.610><c> the</c><00:17:02.790><c> waiting</c><00:17:02.940><c> state</c>

00:17:03.320 --> 00:17:03.330 align:start position:0%
putting it back into the waiting state
 

00:17:03.330 --> 00:17:04.850 align:start position:0%
putting it back into the waiting state
so<00:17:03.570><c> that</c><00:17:03.720><c> the</c><00:17:03.810><c> scheduler</c><00:17:04.230><c> will</c><00:17:04.380><c> consider</c><00:17:04.710><c> it</c>

00:17:04.850 --> 00:17:04.860 align:start position:0%
so that the scheduler will consider it
 

00:17:04.860 --> 00:17:08.570 align:start position:0%
so that the scheduler will consider it
again<00:17:04.950><c> for</c><00:17:05.280><c> execution</c><00:17:07.130><c> once</c><00:17:08.130><c> the</c><00:17:08.280><c> operating</c>

00:17:08.570 --> 00:17:08.580 align:start position:0%
again for execution once the operating
 

00:17:08.580 --> 00:17:10.250 align:start position:0%
again for execution once the operating
system<00:17:08.880><c> finishes</c><00:17:09.300><c> retrieving</c><00:17:09.750><c> the</c><00:17:09.810><c> requested</c>

00:17:10.250 --> 00:17:10.260 align:start position:0%
system finishes retrieving the requested
 

00:17:10.260 --> 00:17:11.780 align:start position:0%
system finishes retrieving the requested
data<00:17:10.380><c> from</c><00:17:10.650><c> storage</c><00:17:11.010><c> it</c>

00:17:11.780 --> 00:17:11.790 align:start position:0%
data from storage it
 

00:17:11.790 --> 00:17:13.790 align:start position:0%
data from storage it
blocks<00:17:12.060><c> the</c><00:17:12.240><c> process</c><00:17:12.690><c> putting</c><00:17:13.320><c> it</c><00:17:13.440><c> back</c><00:17:13.560><c> into</c>

00:17:13.790 --> 00:17:13.800 align:start position:0%
blocks the process putting it back into
 

00:17:13.800 --> 00:17:15.829 align:start position:0%
blocks the process putting it back into
the<00:17:13.980><c> waiting</c><00:17:14.190><c> state</c><00:17:14.610><c> so</c><00:17:15.150><c> that</c><00:17:15.329><c> the</c><00:17:15.420><c> scheduler</c>

00:17:15.829 --> 00:17:15.839 align:start position:0%
the waiting state so that the scheduler
 

00:17:15.839 --> 00:17:18.829 align:start position:0%
the waiting state so that the scheduler
will<00:17:15.870><c> consider</c><00:17:16.410><c> it</c><00:17:16.530><c> again</c><00:17:16.740><c> for</c><00:17:16.949><c> execution</c><00:17:17.839><c> so</c>

00:17:18.829 --> 00:17:18.839 align:start position:0%
will consider it again for execution so
 

00:17:18.839 --> 00:17:20.030 align:start position:0%
will consider it again for execution so
don't<00:17:19.290><c> get</c><00:17:19.380><c> confused</c>

00:17:20.030 --> 00:17:20.040 align:start position:0%
don't get confused
 

00:17:20.040 --> 00:17:21.829 align:start position:0%
don't get confused
both<00:17:20.339><c> the</c><00:17:20.520><c> blocked</c><00:17:20.820><c> and</c><00:17:21.030><c> waiting</c><00:17:21.540><c> states</c>

00:17:21.829 --> 00:17:21.839 align:start position:0%
both the blocked and waiting states
 

00:17:21.839 --> 00:17:24.319 align:start position:0%
both the blocked and waiting states
involve<00:17:22.290><c> waiting</c><00:17:22.500><c> but</c><00:17:23.250><c> only</c><00:17:23.550><c> in</c><00:17:23.760><c> the</c><00:17:23.880><c> waiting</c>

00:17:24.319 --> 00:17:24.329 align:start position:0%
involve waiting but only in the waiting
 

00:17:24.329 --> 00:17:26.030 align:start position:0%
involve waiting but only in the waiting
state<00:17:24.630><c> will</c><00:17:25.110><c> the</c><00:17:25.199><c> scheduler</c><00:17:25.620><c> select</c><00:17:25.949><c> the</c>

00:17:26.030 --> 00:17:26.040 align:start position:0%
state will the scheduler select the
 

00:17:26.040 --> 00:17:28.820 align:start position:0%
state will the scheduler select the
process<00:17:26.459><c> to</c><00:17:26.640><c> run</c><00:17:26.850><c> in</c><00:17:27.089><c> the</c><00:17:27.810><c> block</c><00:17:28.020><c> state</c><00:17:28.440><c> the</c>

00:17:28.820 --> 00:17:28.830 align:start position:0%
process to run in the block state the
 

00:17:28.830 --> 00:17:30.800 align:start position:0%
process to run in the block state the
process<00:17:29.280><c> waits</c><00:17:29.490><c> until</c><00:17:29.700><c> the</c><00:17:29.910><c> OS</c><00:17:30.240><c> puts</c><00:17:30.510><c> it</c><00:17:30.630><c> back</c>

00:17:30.800 --> 00:17:30.810 align:start position:0%
process waits until the OS puts it back
 

00:17:30.810 --> 00:17:32.750 align:start position:0%
process waits until the OS puts it back
in<00:17:31.020><c> the</c><00:17:31.110><c> waiting</c><00:17:31.290><c> state</c><00:17:31.710><c> there</c><00:17:32.460><c> are</c><00:17:32.490><c> several</c>

00:17:32.750 --> 00:17:32.760 align:start position:0%
in the waiting state there are several
 

00:17:32.760 --> 00:17:34.820 align:start position:0%
in the waiting state there are several
reasons<00:17:33.000><c> to</c><00:17:33.240><c> block</c><00:17:33.540><c> and</c><00:17:33.810><c> unblock</c><00:17:33.900><c> a</c><00:17:34.290><c> process</c>

00:17:34.820 --> 00:17:34.830 align:start position:0%
reasons to block and unblock a process
 

00:17:34.830 --> 00:17:36.440 align:start position:0%
reasons to block and unblock a process
but<00:17:35.340><c> the</c><00:17:35.430><c> most</c><00:17:35.550><c> common</c><00:17:35.850><c> reason</c><00:17:36.120><c> is</c><00:17:36.270><c> because</c>

00:17:36.440 --> 00:17:36.450 align:start position:0%
but the most common reason is because
 

00:17:36.450 --> 00:17:38.330 align:start position:0%
but the most common reason is because
that<00:17:36.600><c> process</c><00:17:36.960><c> has</c><00:17:37.320><c> to</c><00:17:37.500><c> wait</c><00:17:37.650><c> for</c><00:17:37.680><c> some</c><00:17:38.100><c> slow</c>

00:17:38.330 --> 00:17:38.340 align:start position:0%
that process has to wait for some slow
 

00:17:38.340 --> 00:17:41.720 align:start position:0%
that process has to wait for some slow
device<00:17:38.640><c> in</c><00:17:38.820><c> the</c><00:17:38.910><c> system</c>

00:17:41.720 --> 00:17:41.730 align:start position:0%
 
 

00:17:41.730 --> 00:17:45.380 align:start position:0%
 
as<00:17:42.919><c> we've</c><00:17:43.919><c> mentioned</c><00:17:43.950><c> device</c><00:17:44.640><c> drivers</c><00:17:45.030><c> handle</c>

00:17:45.380 --> 00:17:45.390 align:start position:0%
as we've mentioned device drivers handle
 

00:17:45.390 --> 00:17:47.150 align:start position:0%
as we've mentioned device drivers handle
the<00:17:45.450><c> business</c><00:17:45.600><c> of</c><00:17:45.929><c> how</c><00:17:46.110><c> exactly</c><00:17:46.290><c> to</c><00:17:46.770><c> talk</c><00:17:46.950><c> to</c>

00:17:47.150 --> 00:17:47.160 align:start position:0%
the business of how exactly to talk to
 

00:17:47.160 --> 00:17:49.280 align:start position:0%
the business of how exactly to talk to
an<00:17:47.250><c> i/o</c><00:17:47.429><c> device</c><00:17:47.880><c> and</c><00:17:48.150><c> that</c><00:17:48.630><c> includes</c><00:17:48.960><c> storage</c>

00:17:49.280 --> 00:17:49.290 align:start position:0%
an i/o device and that includes storage
 

00:17:49.290 --> 00:17:50.630 align:start position:0%
an i/o device and that includes storage
devices<00:17:49.590><c> like</c><00:17:49.860><c> hard</c><00:17:49.919><c> drives</c>

00:17:50.630 --> 00:17:50.640 align:start position:0%
devices like hard drives
 

00:17:50.640 --> 00:17:52.700 align:start position:0%
devices like hard drives
however<00:17:51.360><c> operating</c><00:17:51.990><c> systems</c><00:17:52.260><c> provide</c><00:17:52.559><c> an</c>

00:17:52.700 --> 00:17:52.710 align:start position:0%
however operating systems provide an
 

00:17:52.710 --> 00:17:54.470 align:start position:0%
however operating systems provide an
extra<00:17:53.160><c> layer</c><00:17:53.340><c> of</c><00:17:53.370><c> abstraction</c><00:17:53.640><c> for</c><00:17:54.179><c> storage</c>

00:17:54.470 --> 00:17:54.480 align:start position:0%
extra layer of abstraction for storage
 

00:17:54.480 --> 00:17:56.690 align:start position:0%
extra layer of abstraction for storage
devices<00:17:54.780><c> called</c><00:17:55.350><c> the</c><00:17:55.530><c> file</c><00:17:55.770><c> system</c><00:17:56.250><c> which</c>

00:17:56.690 --> 00:17:56.700 align:start position:0%
devices called the file system which
 

00:17:56.700 --> 00:17:58.640 align:start position:0%
devices called the file system which
presents<00:17:56.910><c> storage</c><00:17:57.419><c> space</c><00:17:57.690><c> as</c><00:17:57.929><c> a</c><00:17:57.960><c> hierarchy</c><00:17:58.559><c> of</c>

00:17:58.640 --> 00:17:58.650 align:start position:0%
presents storage space as a hierarchy of
 

00:17:58.650 --> 00:18:00.440 align:start position:0%
presents storage space as a hierarchy of
directories<00:17:58.770><c> and</c><00:17:59.280><c> files</c><00:17:59.340><c> stored</c><00:18:00.240><c> in</c><00:18:00.360><c> those</c>

00:18:00.440 --> 00:18:00.450 align:start position:0%
directories and files stored in those
 

00:18:00.450 --> 00:18:02.690 align:start position:0%
directories and files stored in those
directories<00:18:00.890><c> when</c><00:18:01.890><c> your</c><00:18:02.010><c> program</c><00:18:02.190><c> uses</c><00:18:02.669><c> a</c>

00:18:02.690 --> 00:18:02.700 align:start position:0%
directories when your program uses a
 

00:18:02.700 --> 00:18:04.640 align:start position:0%
directories when your program uses a
hard<00:18:03.000><c> drive</c><00:18:03.210><c> for</c><00:18:03.419><c> example</c><00:18:03.480><c> you</c><00:18:04.200><c> don't</c><00:18:04.230><c> want</c><00:18:04.440><c> to</c>

00:18:04.640 --> 00:18:04.650 align:start position:0%
hard drive for example you don't want to
 

00:18:04.650 --> 00:18:05.750 align:start position:0%
hard drive for example you don't want to
have<00:18:04.740><c> to</c><00:18:04.830><c> concern</c><00:18:05.160><c> yourself</c><00:18:05.520><c> with</c><00:18:05.580><c> the</c>

00:18:05.750 --> 00:18:05.760 align:start position:0%
have to concern yourself with the
 

00:18:05.760 --> 00:18:07.610 align:start position:0%
have to concern yourself with the
details<00:18:06.150><c> of</c><00:18:06.360><c> moving</c><00:18:06.750><c> heads</c><00:18:07.020><c> and</c><00:18:07.260><c> spinning</c>

00:18:07.610 --> 00:18:07.620 align:start position:0%
details of moving heads and spinning
 

00:18:07.620 --> 00:18:09.530 align:start position:0%
details of moving heads and spinning
platters<00:18:07.890><c> you</c><00:18:08.610><c> just</c><00:18:08.790><c> want</c><00:18:08.970><c> to</c><00:18:09.059><c> read</c><00:18:09.240><c> and</c><00:18:09.390><c> write</c>

00:18:09.530 --> 00:18:09.540 align:start position:0%
platters you just want to read and write
 

00:18:09.540 --> 00:18:11.000 align:start position:0%
platters you just want to read and write
data<00:18:09.750><c> and</c><00:18:10.020><c> contiguous</c><00:18:10.350><c> you</c><00:18:10.620><c> and</c><00:18:10.740><c> it's</c><00:18:10.830><c> called</c>

00:18:11.000 --> 00:18:11.010 align:start position:0%
data and contiguous you and it's called
 

00:18:11.010 --> 00:18:13.070 align:start position:0%
data and contiguous you and it's called
files<00:18:11.429><c> and</c><00:18:11.730><c> you</c><00:18:12.179><c> want</c><00:18:12.330><c> to</c><00:18:12.419><c> have</c><00:18:12.570><c> those</c><00:18:12.750><c> files</c>

00:18:13.070 --> 00:18:13.080 align:start position:0%
files and you want to have those files
 

00:18:13.080 --> 00:18:15.710 align:start position:0%
files and you want to have those files
organized<00:18:13.710><c> into</c><00:18:14.070><c> directories</c><00:18:14.580><c> the</c><00:18:15.510><c> file</c>

00:18:15.710 --> 00:18:15.720 align:start position:0%
organized into directories the file
 

00:18:15.720 --> 00:18:17.780 align:start position:0%
organized into directories the file
system<00:18:16.169><c> provides</c><00:18:16.500><c> a</c><00:18:16.620><c> subtraction</c><00:18:17.070><c> allowing</c>

00:18:17.780 --> 00:18:17.790 align:start position:0%
system provides a subtraction allowing
 

00:18:17.790 --> 00:18:19.430 align:start position:0%
system provides a subtraction allowing
program<00:18:18.120><c> is</c><00:18:18.240><c> to</c><00:18:18.360><c> read</c><00:18:18.540><c> and</c><00:18:18.750><c> write</c><00:18:18.900><c> data</c><00:18:19.140><c> from</c>

00:18:19.430 --> 00:18:19.440 align:start position:0%
program is to read and write data from
 

00:18:19.440 --> 00:18:20.930 align:start position:0%
program is to read and write data from
any<00:18:19.590><c> kind</c><00:18:19.860><c> of</c><00:18:19.980><c> storage</c><00:18:20.190><c> in</c><00:18:20.400><c> the</c><00:18:20.490><c> same</c><00:18:20.700><c> way</c>

00:18:20.930 --> 00:18:20.940 align:start position:0%
any kind of storage in the same way
 

00:18:20.940 --> 00:18:23.210 align:start position:0%
any kind of storage in the same way
whether<00:18:21.510><c> a</c><00:18:21.600><c> hard</c><00:18:21.900><c> drive</c><00:18:22.140><c> an</c><00:18:22.440><c> optical</c><00:18:22.799><c> disk</c><00:18:23.010><c> a</c>

00:18:23.210 --> 00:18:23.220 align:start position:0%
whether a hard drive an optical disk a
 

00:18:23.220 --> 00:18:25.850 align:start position:0%
whether a hard drive an optical disk a
flash<00:18:23.429><c> drive</c><00:18:23.610><c> or</c><00:18:23.910><c> whatever</c><00:18:24.260><c> the</c><00:18:25.260><c> storage</c><00:18:25.590><c> area</c>

00:18:25.850 --> 00:18:25.860 align:start position:0%
flash drive or whatever the storage area
 

00:18:25.860 --> 00:18:27.680 align:start position:0%
flash drive or whatever the storage area
of<00:18:26.040><c> each</c><00:18:26.160><c> drive</c><00:18:26.460><c> is</c><00:18:26.669><c> divided</c><00:18:27.179><c> into</c><00:18:27.390><c> one</c><00:18:27.570><c> or</c>

00:18:27.680 --> 00:18:27.690 align:start position:0%
of each drive is divided into one or
 

00:18:27.690 --> 00:18:29.690 align:start position:0%
of each drive is divided into one or
more<00:18:27.750><c> contiguous</c><00:18:28.410><c> chunks</c><00:18:28.770><c> called</c><00:18:29.010><c> partitions</c>

00:18:29.690 --> 00:18:29.700 align:start position:0%
more contiguous chunks called partitions
 

00:18:29.700 --> 00:18:31.940 align:start position:0%
more contiguous chunks called partitions
notice<00:18:30.660><c> that</c><00:18:30.750><c> some</c><00:18:30.960><c> areas</c><00:18:31.169><c> of</c><00:18:31.470><c> the</c><00:18:31.559><c> drive</c><00:18:31.770><c> may</c>

00:18:31.940 --> 00:18:31.950 align:start position:0%
notice that some areas of the drive may
 

00:18:31.950 --> 00:18:34.190 align:start position:0%
notice that some areas of the drive may
be<00:18:32.010><c> left</c><00:18:32.309><c> blank</c><00:18:32.610><c> unformatted</c><00:18:33.450><c> such</c><00:18:33.929><c> as</c><00:18:34.080><c> the</c>

00:18:34.190 --> 00:18:34.200 align:start position:0%
be left blank unformatted such as the
 

00:18:34.200 --> 00:18:35.330 align:start position:0%
be left blank unformatted such as the
gap<00:18:34.350><c> between</c><00:18:34.530><c> the</c><00:18:34.799><c> second</c><00:18:35.130><c> and</c><00:18:35.220><c> third</c>

00:18:35.330 --> 00:18:35.340 align:start position:0%
gap between the second and third
 

00:18:35.340 --> 00:18:37.159 align:start position:0%
gap between the second and third
partitions<00:18:35.880><c> of</c><00:18:36.090><c> this</c><00:18:36.240><c> first</c><00:18:36.450><c> hard</c><00:18:36.720><c> drive</c>

00:18:37.159 --> 00:18:37.169 align:start position:0%
partitions of this first hard drive
 

00:18:37.169 --> 00:18:38.900 align:start position:0%
partitions of this first hard drive
most<00:18:37.799><c> commonly</c><00:18:38.130><c> though</c><00:18:38.340><c> a</c><00:18:38.520><c> drive</c><00:18:38.790><c> is</c>

00:18:38.900 --> 00:18:38.910 align:start position:0%
most commonly though a drive is
 

00:18:38.910 --> 00:18:40.400 align:start position:0%
most commonly though a drive is
formatted<00:18:39.120><c> to</c><00:18:39.450><c> have</c><00:18:39.600><c> just</c><00:18:39.870><c> one</c><00:18:40.049><c> partition</c>

00:18:40.400 --> 00:18:40.410 align:start position:0%
formatted to have just one partition
 

00:18:40.410 --> 00:18:43.100 align:start position:0%
formatted to have just one partition
occupying<00:18:41.100><c> its</c><00:18:41.309><c> entire</c><00:18:41.610><c> storage</c><00:18:41.970><c> area</c><00:18:42.330><c> still</c>

00:18:43.100 --> 00:18:43.110 align:start position:0%
occupying its entire storage area still
 

00:18:43.110 --> 00:18:44.900 align:start position:0%
occupying its entire storage area still
creating<00:18:43.620><c> multiple</c><00:18:43.799><c> partitions</c><00:18:44.250><c> serve</c><00:18:44.640><c> some</c>

00:18:44.900 --> 00:18:44.910 align:start position:0%
creating multiple partitions serve some
 

00:18:44.910 --> 00:18:46.520 align:start position:0%
creating multiple partitions serve some
niche<00:18:45.120><c> use</c><00:18:45.360><c> cases</c><00:18:45.780><c> such</c><00:18:46.080><c> as</c><00:18:46.230><c> installing</c>

00:18:46.520 --> 00:18:46.530 align:start position:0%
niche use cases such as installing
 

00:18:46.530 --> 00:18:47.840 align:start position:0%
niche use cases such as installing
multiple<00:18:46.770><c> operating</c><00:18:47.309><c> systems</c><00:18:47.370><c> on</c><00:18:47.730><c> a</c><00:18:47.760><c> single</c>

00:18:47.840 --> 00:18:47.850 align:start position:0%
multiple operating systems on a single
 

00:18:47.850 --> 00:18:51.380 align:start position:0%
multiple operating systems on a single
drive<00:18:48.360><c> in</c><00:18:49.370><c> most</c><00:18:50.370><c> partition</c><00:18:50.850><c> formats</c><00:18:51.210><c> use</c>

00:18:51.380 --> 00:18:51.390 align:start position:0%
drive in most partition formats use
 

00:18:51.390 --> 00:18:53.419 align:start position:0%
drive in most partition formats use
today<00:18:51.720><c> each</c><00:18:52.169><c> file</c><00:18:52.530><c> in</c><00:18:52.740><c> directory</c><00:18:53.130><c> within</c><00:18:53.280><c> a</c>

00:18:53.419 --> 00:18:53.429 align:start position:0%
today each file in directory within a
 

00:18:53.429 --> 00:18:55.130 align:start position:0%
today each file in directory within a
partition<00:18:53.850><c> is</c><00:18:54.000><c> known</c><00:18:54.299><c> by</c><00:18:54.510><c> an</c><00:18:54.630><c> identifier</c>

00:18:55.130 --> 00:18:55.140 align:start position:0%
partition is known by an identifier
 

00:18:55.140 --> 00:18:57.650 align:start position:0%
partition is known by an identifier
number<00:18:55.470><c> unique</c><00:18:55.890><c> within</c><00:18:56.160><c> that</c><00:18:56.460><c> partition</c><00:18:56.820><c> so</c>

00:18:57.650 --> 00:18:57.660 align:start position:0%
number unique within that partition so
 

00:18:57.660 --> 00:18:59.539 align:start position:0%
number unique within that partition so
here<00:18:57.990><c> we</c><00:18:58.080><c> have</c><00:18:58.169><c> a</c><00:18:58.200><c> partition</c><00:18:58.650><c> with</c><00:18:58.770><c> a</c><00:18:58.830><c> file</c><00:18:59.040><c> 35</c>

00:18:59.539 --> 00:18:59.549 align:start position:0%
here we have a partition with a file 35
 

00:18:59.549 --> 00:19:01.610 align:start position:0%
here we have a partition with a file 35
and<00:18:59.850><c> so</c><00:19:00.299><c> we</c><00:19:00.419><c> can</c><00:19:00.540><c> have</c><00:19:00.720><c> no</c><00:19:00.900><c> other</c><00:19:01.049><c> files</c><00:19:01.350><c> within</c>

00:19:01.610 --> 00:19:01.620 align:start position:0%
and so we can have no other files within
 

00:19:01.620 --> 00:19:04.190 align:start position:0%
and so we can have no other files within
that<00:19:01.860><c> partition</c><00:19:02.190><c> with</c><00:19:02.520><c> the</c><00:19:02.610><c> ID</c><00:19:02.760><c> 35</c><00:19:03.360><c> nor</c><00:19:03.990><c> any</c>

00:19:04.190 --> 00:19:04.200 align:start position:0%
that partition with the ID 35 nor any
 

00:19:04.200 --> 00:19:07.580 align:start position:0%
that partition with the ID 35 nor any
directories<00:19:04.740><c> with</c><00:19:04.950><c> the</c><00:19:05.010><c> ID</c><00:19:05.160><c> 35</c><00:19:05.790><c> a</c><00:19:06.350><c> file</c><00:19:07.350><c> is</c>

00:19:07.580 --> 00:19:07.590 align:start position:0%
directories with the ID 35 a file is
 

00:19:07.590 --> 00:19:09.350 align:start position:0%
directories with the ID 35 a file is
simply<00:19:07.799><c> a</c><00:19:08.010><c> logically</c><00:19:08.460><c> contiguous</c><00:19:08.970><c> chunk</c><00:19:09.000><c> of</c>

00:19:09.350 --> 00:19:09.360 align:start position:0%
simply a logically contiguous chunk of
 

00:19:09.360 --> 00:19:11.900 align:start position:0%
simply a logically contiguous chunk of
data<00:19:09.540><c> a</c><00:19:09.780><c> sequential</c><00:19:10.410><c> series</c><00:19:10.830><c> of</c><00:19:10.980><c> bytes</c><00:19:11.160><c> what</c>

00:19:11.900 --> 00:19:11.910 align:start position:0%
data a sequential series of bytes what
 

00:19:11.910 --> 00:19:13.400 align:start position:0%
data a sequential series of bytes what
these<00:19:12.090><c> bytes</c><00:19:12.330><c> of</c><00:19:12.480><c> a</c><00:19:12.600><c> file</c><00:19:12.780><c> represent</c><00:19:13.290><c> is</c>

00:19:13.400 --> 00:19:13.410 align:start position:0%
these bytes of a file represent is
 

00:19:13.410 --> 00:19:15.080 align:start position:0%
these bytes of a file represent is
entirely<00:19:13.860><c> up</c><00:19:14.070><c> to</c><00:19:14.100><c> the</c><00:19:14.280><c> program</c><00:19:14.640><c> which</c><00:19:14.820><c> writes</c>

00:19:15.080 --> 00:19:15.090 align:start position:0%
entirely up to the program which writes
 

00:19:15.090 --> 00:19:17.539 align:start position:0%
entirely up to the program which writes
the<00:19:15.299><c> file</c><00:19:15.740><c> notice</c><00:19:16.740><c> though</c><00:19:17.010><c> I</c><00:19:17.040><c> said</c><00:19:17.370><c> that</c><00:19:17.520><c> a</c>

00:19:17.539 --> 00:19:17.549 align:start position:0%
the file notice though I said that a
 

00:19:17.549 --> 00:19:19.940 align:start position:0%
the file notice though I said that a
file<00:19:17.730><c> is</c><00:19:17.970><c> logically</c><00:19:18.570><c> contiguous</c><00:19:19.110><c> when</c><00:19:19.740><c> bytes</c>

00:19:19.940 --> 00:19:19.950 align:start position:0%
file is logically contiguous when bytes
 

00:19:19.950 --> 00:19:21.440 align:start position:0%
file is logically contiguous when bytes
are<00:19:20.100><c> read</c><00:19:20.250><c> and</c><00:19:20.400><c> written</c><00:19:20.490><c> by</c><00:19:20.700><c> a</c><00:19:20.730><c> program</c><00:19:21.179><c> the</c>

00:19:21.440 --> 00:19:21.450 align:start position:0%
are read and written by a program the
 

00:19:21.450 --> 00:19:22.610 align:start position:0%
are read and written by a program the
program<00:19:21.600><c> sees</c><00:19:21.990><c> them</c><00:19:22.140><c> is</c><00:19:22.260><c> a</c><00:19:22.290><c> contiguous</c>

00:19:22.610 --> 00:19:22.620 align:start position:0%
program sees them is a contiguous
 

00:19:22.620 --> 00:19:24.890 align:start position:0%
program sees them is a contiguous
sequential<00:19:23.280><c> series</c><00:19:23.580><c> but</c><00:19:24.179><c> a</c><00:19:24.210><c> file</c><00:19:24.510><c> stored</c><00:19:24.660><c> on</c>

00:19:24.890 --> 00:19:24.900 align:start position:0%
sequential series but a file stored on
 

00:19:24.900 --> 00:19:26.240 align:start position:0%
sequential series but a file stored on
disk<00:19:24.929><c> may</c><00:19:25.290><c> actually</c><00:19:25.470><c> be</c><00:19:25.740><c> stored</c><00:19:26.010><c> non</c>

00:19:26.240 --> 00:19:26.250 align:start position:0%
disk may actually be stored non
 

00:19:26.250 --> 00:19:28.669 align:start position:0%
disk may actually be stored non
contiguous<00:19:26.610><c> li</c><00:19:26.970><c> and</c><00:19:27.150><c> out</c><00:19:27.510><c> of</c><00:19:27.660><c> order</c><00:19:27.929><c> it's</c><00:19:28.559><c> a</c>

00:19:28.669 --> 00:19:28.679 align:start position:0%
contiguous li and out of order it's a
 

00:19:28.679 --> 00:19:30.080 align:start position:0%
contiguous li and out of order it's a
responsibility<00:19:29.100><c> of</c><00:19:29.370><c> the</c><00:19:29.400><c> filesystem</c><00:19:29.669><c> to</c>

00:19:30.080 --> 00:19:30.090 align:start position:0%
responsibility of the filesystem to
 

00:19:30.090 --> 00:19:31.940 align:start position:0%
responsibility of the filesystem to
ensure<00:19:30.419><c> that</c><00:19:30.450><c> the</c><00:19:30.809><c> logical</c><00:19:31.380><c> order</c><00:19:31.710><c> gets</c>

00:19:31.940 --> 00:19:31.950 align:start position:0%
ensure that the logical order gets
 

00:19:31.950 --> 00:19:34.039 align:start position:0%
ensure that the logical order gets
reconstructed<00:19:32.669><c> when</c><00:19:33.120><c> the</c><00:19:33.210><c> file</c><00:19:33.390><c> data</c><00:19:33.660><c> is</c><00:19:33.840><c> sent</c>

00:19:34.039 --> 00:19:34.049 align:start position:0%
reconstructed when the file data is sent
 

00:19:34.049 --> 00:19:37.700 align:start position:0%
reconstructed when the file data is sent
to<00:19:34.110><c> a</c><00:19:34.200><c> program</c><00:19:34.650><c> a</c><00:19:35.900><c> directory</c><00:19:36.900><c> quite</c><00:19:37.169><c> simply</c><00:19:37.530><c> is</c>

00:19:37.700 --> 00:19:37.710 align:start position:0%
to a program a directory quite simply is
 

00:19:37.710 --> 00:19:39.620 align:start position:0%
to a program a directory quite simply is
a<00:19:37.770><c> list</c><00:19:38.190><c> of</c><00:19:38.370><c> files</c><00:19:38.580><c> and</c><00:19:38.850><c> other</c><00:19:38.970><c> directories</c><00:19:39.480><c> on</c>

00:19:39.620 --> 00:19:39.630 align:start position:0%
a list of files and other directories on
 

00:19:39.630 --> 00:19:41.630 align:start position:0%
a list of files and other directories on
the<00:19:39.720><c> partition</c><00:19:40.020><c> the</c><00:19:40.740><c> directory</c><00:19:41.160><c> associates</c>

00:19:41.630 --> 00:19:41.640 align:start position:0%
the partition the directory associates
 

00:19:41.640 --> 00:19:43.880 align:start position:0%
the partition the directory associates
ID<00:19:41.910><c> numbers</c><00:19:42.480><c> for</c><00:19:42.690><c> files</c><00:19:42.870><c> or</c><00:19:43.080><c> directories</c><00:19:43.200><c> with</c>

00:19:43.880 --> 00:19:43.890 align:start position:0%
ID numbers for files or directories with
 

00:19:43.890 --> 00:19:46.190 align:start position:0%
ID numbers for files or directories with
names<00:19:44.250><c> names</c><00:19:44.970><c> which</c><00:19:45.179><c> must</c><00:19:45.390><c> be</c><00:19:45.510><c> unique</c><00:19:45.750><c> amongst</c>

00:19:46.190 --> 00:19:46.200 align:start position:0%
names names which must be unique amongst
 

00:19:46.200 --> 00:19:48.080 align:start position:0%
names names which must be unique amongst
all<00:19:46.380><c> other</c><00:19:46.620><c> files</c><00:19:46.860><c> of</c><00:19:47.130><c> directories</c><00:19:47.490><c> listed</c><00:19:47.730><c> in</c>

00:19:48.080 --> 00:19:48.090 align:start position:0%
all other files of directories listed in
 

00:19:48.090 --> 00:19:50.270 align:start position:0%
all other files of directories listed in
that<00:19:48.120><c> same</c><00:19:48.510><c> directory</c><00:19:49.020><c> so</c><00:19:49.830><c> within</c><00:19:50.100><c> a</c>

00:19:50.270 --> 00:19:50.280 align:start position:0%
that same directory so within a
 

00:19:50.280 --> 00:19:51.530 align:start position:0%
that same directory so within a
directory<00:19:50.640><c> you</c><00:19:50.730><c> can</c><00:19:50.880><c> have</c><00:19:51.030><c> a</c><00:19:51.059><c> file</c><00:19:51.330><c> and</c>

00:19:51.530 --> 00:19:51.540 align:start position:0%
directory you can have a file and
 

00:19:51.540 --> 00:19:53.810 align:start position:0%
directory you can have a file and
directory<00:19:51.600><c> both</c><00:19:52.080><c> names</c><00:19:52.380><c> say</c><00:19:52.650><c> Albert</c><00:19:53.159><c> but</c><00:19:53.700><c> you</c>

00:19:53.810 --> 00:19:53.820 align:start position:0%
directory both names say Albert but you
 

00:19:53.820 --> 00:19:55.760 align:start position:0%
directory both names say Albert but you
can't<00:19:54.030><c> have</c><00:19:54.210><c> more</c><00:19:54.419><c> than</c><00:19:54.480><c> one</c><00:19:54.659><c> file</c><00:19:54.990><c> named</c><00:19:55.260><c> Al</c>

00:19:55.760 --> 00:19:55.770 align:start position:0%
can't have more than one file named Al
 

00:19:55.770 --> 00:19:58.330 align:start position:0%
can't have more than one file named Al
or<00:19:55.950><c> more</c><00:19:56.280><c> than</c><00:19:56.310><c> one</c><00:19:56.580><c> directory</c><00:19:57.030><c> named</c><00:19:57.210><c> Albert</c>

00:19:58.330 --> 00:19:58.340 align:start position:0%
or more than one directory named Albert
 

00:19:58.340 --> 00:20:01.010 align:start position:0%
or more than one directory named Albert
when<00:19:59.340><c> a</c><00:19:59.370><c> partition</c><00:19:59.850><c> is</c><00:19:59.970><c> newly</c><00:20:00.270><c> created</c><00:20:00.600><c> it</c>

00:20:01.010 --> 00:20:01.020 align:start position:0%
when a partition is newly created it
 

00:20:01.020 --> 00:20:02.390 align:start position:0%
when a partition is newly created it
starts<00:20:01.320><c> out</c><00:20:01.410><c> with</c><00:20:01.470><c> no</c><00:20:01.740><c> files</c><00:20:02.010><c> and</c><00:20:02.280><c> no</c>

00:20:02.390 --> 00:20:02.400 align:start position:0%
starts out with no files and no
 

00:20:02.400 --> 00:20:04.190 align:start position:0%
starts out with no files and no
directories<00:20:02.850><c> except</c><00:20:03.480><c> for</c><00:20:03.630><c> one</c><00:20:03.750><c> special</c>

00:20:04.190 --> 00:20:04.200 align:start position:0%
directories except for one special
 

00:20:04.200 --> 00:20:05.330 align:start position:0%
directories except for one special
directory<00:20:04.530><c> called</c><00:20:04.800><c> the</c><00:20:04.980><c> root</c><00:20:05.190><c> directory</c>

00:20:05.330 --> 00:20:05.340 align:start position:0%
directory called the root directory
 

00:20:05.340 --> 00:20:09.880 align:start position:0%
directory called the root directory
which<00:20:05.940><c> cannot</c><00:20:06.330><c> be</c><00:20:06.510><c> deleted</c>

00:20:09.880 --> 00:20:09.890 align:start position:0%
 
 

00:20:09.890 --> 00:20:11.740 align:start position:0%
 
in<00:20:09.950><c> Windows</c><00:20:10.400><c> each</c><00:20:10.730><c> partition</c><00:20:11.060><c> is</c><00:20:11.300><c> assigned</c><00:20:11.600><c> a</c>

00:20:11.740 --> 00:20:11.750 align:start position:0%
in Windows each partition is assigned a
 

00:20:11.750 --> 00:20:13.450 align:start position:0%
in Windows each partition is assigned a
drive<00:20:11.990><c> letter</c><00:20:12.200><c> usually</c><00:20:12.770><c> denoted</c><00:20:13.190><c> with</c><00:20:13.430><c> a</c>

00:20:13.450 --> 00:20:13.460 align:start position:0%
drive letter usually denoted with a
 

00:20:13.460 --> 00:20:16.690 align:start position:0%
drive letter usually denoted with a
suffix<00:20:13.910><c> :</c><00:20:14.330><c> for</c><00:20:14.960><c> example</c><00:20:14.990><c> C</c><00:20:15.590><c> :</c><00:20:15.980><c> H</c><00:20:16.220><c> :</c>

00:20:16.690 --> 00:20:16.700 align:start position:0%
suffix : for example C : H :
 

00:20:16.700 --> 00:20:20.770 align:start position:0%
suffix : for example C : H :
D<00:20:16.970><c> :</c><00:20:17.360><c> etc</c><00:20:17.690><c> a</c><00:20:18.550><c> file</c><00:20:19.550><c> path</c><00:20:19.790><c> is</c><00:20:20.060><c> a</c><00:20:20.120><c> string</c><00:20:20.480><c> of</c><00:20:20.570><c> text</c>

00:20:20.770 --> 00:20:20.780 align:start position:0%
D : etc a file path is a string of text
 

00:20:20.780 --> 00:20:22.900 align:start position:0%
D : etc a file path is a string of text
denoting<00:20:21.260><c> the</c><00:20:21.350><c> location</c><00:20:21.800><c> on</c><00:20:21.920><c> the</c><00:20:22.010><c> system</c><00:20:22.370><c> of</c><00:20:22.580><c> a</c>

00:20:22.900 --> 00:20:22.910 align:start position:0%
denoting the location on the system of a
 

00:20:22.910 --> 00:20:25.510 align:start position:0%
denoting the location on the system of a
file<00:20:23.210><c> or</c><00:20:23.450><c> directory</c><00:20:23.510><c> in</c><00:20:24.200><c> Windows</c><00:20:25.100><c> the</c><00:20:25.130><c> root</c>

00:20:25.510 --> 00:20:25.520 align:start position:0%
file or directory in Windows the root
 

00:20:25.520 --> 00:20:26.890 align:start position:0%
file or directory in Windows the root
directory<00:20:25.640><c> on</c><00:20:26.000><c> these</c><00:20:26.120><c> drives</c><00:20:26.390><c> are</c><00:20:26.570><c> known</c><00:20:26.750><c> by</c>

00:20:26.890 --> 00:20:26.900 align:start position:0%
directory on these drives are known by
 

00:20:26.900 --> 00:20:30.520 align:start position:0%
directory on these drives are known by
the<00:20:26.960><c> paths</c><00:20:27.290><c> C</c><00:20:27.890><c> :</c><00:20:28.220><c> /</c><00:20:28.490><c> H</c><00:20:28.790><c> :</c><00:20:29.150><c> /</c><00:20:29.450><c> and</c><00:20:29.690><c> D</c><00:20:30.020><c> :</c><00:20:30.260><c> /</c>

00:20:30.520 --> 00:20:30.530 align:start position:0%
the paths C : / H : / and D : /
 

00:20:30.530 --> 00:20:34.690 align:start position:0%
the paths C : / H : / and D : /
respectively<00:20:31.300><c> the</c><00:20:32.300><c> path</c><00:20:32.540><c> C</c><00:20:32.960><c> :</c><00:20:33.320><c> /</c><00:20:33.530><c> Adam</c><00:20:33.980><c> /</c><00:20:34.220><c> Nixon</c>

00:20:34.690 --> 00:20:34.700 align:start position:0%
respectively the path C : / Adam / Nixon
 

00:20:34.700 --> 00:20:36.490 align:start position:0%
respectively the path C : / Adam / Nixon
refers<00:20:35.330><c> to</c><00:20:35.360><c> a</c><00:20:35.540><c> file</c><00:20:35.780><c> or</c><00:20:35.930><c> directory</c><00:20:35.960><c> named</c>

00:20:36.490 --> 00:20:36.500 align:start position:0%
refers to a file or directory named
 

00:20:36.500 --> 00:20:39.430 align:start position:0%
refers to a file or directory named
Nixon<00:20:36.980><c> listed</c><00:20:37.610><c> in</c><00:20:37.700><c> a</c><00:20:37.790><c> directory</c><00:20:37.820><c> Adams</c><00:20:38.660><c> itself</c>

00:20:39.430 --> 00:20:39.440 align:start position:0%
Nixon listed in a directory Adams itself
 

00:20:39.440 --> 00:20:41.470 align:start position:0%
Nixon listed in a directory Adams itself
listed<00:20:39.860><c> in</c><00:20:40.010><c> the</c><00:20:40.130><c> root</c><00:20:40.310><c> directory</c><00:20:40.430><c> on</c><00:20:40.910><c> the</c><00:20:41.300><c> C</c>

00:20:41.470 --> 00:20:41.480 align:start position:0%
listed in the root directory on the C
 

00:20:41.480 --> 00:20:45.370 align:start position:0%
listed in the root directory on the C
partition<00:20:42.080><c> the</c><00:20:42.920><c> path</c><00:20:43.160><c> H</c><00:20:43.430><c> :</c><00:20:43.910><c> /</c><00:20:44.180><c> Taylor</c><00:20:44.570><c> /</c><00:20:44.810><c> polk</c><00:20:45.110><c> /</c>

00:20:45.370 --> 00:20:45.380 align:start position:0%
partition the path H : / Taylor / polk /
 

00:20:45.380 --> 00:20:47.080 align:start position:0%
partition the path H : / Taylor / polk /
Hayes<00:20:45.710><c> refers</c><00:20:46.430><c> to</c><00:20:46.460><c> a</c><00:20:46.640><c> file</c><00:20:46.850><c> or</c><00:20:46.880><c> directory</c>

00:20:47.080 --> 00:20:47.090 align:start position:0%
Hayes refers to a file or directory
 

00:20:47.090 --> 00:20:49.600 align:start position:0%
Hayes refers to a file or directory
named<00:20:47.690><c> Hayes</c><00:20:47.960><c> listed</c><00:20:48.800><c> in</c><00:20:48.890><c> a</c><00:20:48.950><c> directory</c><00:20:48.980><c> Polk</c>

00:20:49.600 --> 00:20:49.610 align:start position:0%
named Hayes listed in a directory Polk
 

00:20:49.610 --> 00:20:52.120 align:start position:0%
named Hayes listed in a directory Polk
listed<00:20:50.420><c> in</c><00:20:50.510><c> a</c><00:20:50.570><c> directory</c><00:20:50.600><c> Taylor</c><00:20:51.350><c> listed</c><00:20:52.040><c> in</c>

00:20:52.120 --> 00:20:52.130 align:start position:0%
listed in a directory Taylor listed in
 

00:20:52.130 --> 00:20:53.890 align:start position:0%
listed in a directory Taylor listed in
the<00:20:52.220><c> root</c><00:20:52.370><c> directory</c><00:20:52.520><c> on</c><00:20:52.970><c> the</c><00:20:53.090><c> H</c><00:20:53.240><c> partition</c>

00:20:53.890 --> 00:20:53.900 align:start position:0%
the root directory on the H partition
 

00:20:53.900 --> 00:20:57.310 align:start position:0%
the root directory on the H partition
the<00:20:54.800><c> path</c><00:20:55.010><c> D</c><00:20:55.250><c> :</c><00:20:55.490><c> /</c><00:20:55.850><c> Garfield</c><00:20:56.480><c> refers</c><00:20:56.840><c> to</c><00:20:56.870><c> a</c><00:20:57.050><c> file</c>

00:20:57.310 --> 00:20:57.320 align:start position:0%
the path D : / Garfield refers to a file
 

00:20:57.320 --> 00:20:59.500 align:start position:0%
the path D : / Garfield refers to a file
or<00:20:57.500><c> directory</c><00:20:57.620><c> named</c><00:20:58.250><c> Garfield</c><00:20:58.520><c> listed</c><00:20:59.420><c> in</c>

00:20:59.500 --> 00:20:59.510 align:start position:0%
or directory named Garfield listed in
 

00:20:59.510 --> 00:21:01.380 align:start position:0%
or directory named Garfield listed in
the<00:20:59.600><c> root</c><00:20:59.750><c> directory</c><00:20:59.780><c> on</c><00:21:00.260><c> the</c><00:21:00.290><c> d</c><00:21:00.590><c> partition</c>

00:21:01.380 --> 00:21:01.390 align:start position:0%
the root directory on the d partition
 

00:21:01.390 --> 00:21:03.340 align:start position:0%
the root directory on the d partition
while<00:21:02.390><c> the</c><00:21:02.510><c> preferred</c><00:21:02.780><c> convention</c><00:21:03.230><c> in</c>

00:21:03.340 --> 00:21:03.350 align:start position:0%
while the preferred convention in
 

00:21:03.350 --> 00:21:05.530 align:start position:0%
while the preferred convention in
Windows<00:21:03.680><c> file</c><00:21:03.860><c> paths</c><00:21:04.160><c> is</c><00:21:04.430><c> to</c><00:21:04.640><c> use</c><00:21:04.760><c> backslashes</c>

00:21:05.530 --> 00:21:05.540 align:start position:0%
Windows file paths is to use backslashes
 

00:21:05.540 --> 00:21:08.230 align:start position:0%
Windows file paths is to use backslashes
for<00:21:06.050><c> slashes</c><00:21:06.500><c> work</c><00:21:06.680><c> just</c><00:21:06.890><c> as</c><00:21:07.070><c> well</c><00:21:07.280><c> and</c><00:21:07.460><c> UNIX</c>

00:21:08.230 --> 00:21:08.240 align:start position:0%
for slashes work just as well and UNIX
 

00:21:08.240 --> 00:21:10.390 align:start position:0%
for slashes work just as well and UNIX
however<00:21:08.510><c> file</c><00:21:09.050><c> paths</c><00:21:09.380><c> must</c><00:21:09.770><c> use</c><00:21:09.980><c> forward</c>

00:21:10.390 --> 00:21:10.400 align:start position:0%
however file paths must use forward
 

00:21:10.400 --> 00:21:13.510 align:start position:0%
however file paths must use forward
slashes<00:21:10.640><c> the</c><00:21:11.770><c> other</c><00:21:12.770><c> major</c><00:21:13.010><c> difference</c><00:21:13.190><c> in</c>

00:21:13.510 --> 00:21:13.520 align:start position:0%
slashes the other major difference in
 

00:21:13.520 --> 00:21:15.370 align:start position:0%
slashes the other major difference in
UNIX<00:21:13.790><c> is</c><00:21:13.940><c> that</c><00:21:14.210><c> partitions</c><00:21:14.660><c> are</c><00:21:14.840><c> not</c><00:21:14.990><c> assigned</c>

00:21:15.370 --> 00:21:15.380 align:start position:0%
UNIX is that partitions are not assigned
 

00:21:15.380 --> 00:21:17.650 align:start position:0%
UNIX is that partitions are not assigned
the<00:21:15.500><c> drive</c><00:21:15.740><c> letters</c><00:21:16.100><c> instead</c><00:21:16.850><c> one</c><00:21:17.270><c> partition</c>

00:21:17.650 --> 00:21:17.660 align:start position:0%
the drive letters instead one partition
 

00:21:17.660 --> 00:21:20.230 align:start position:0%
the drive letters instead one partition
is<00:21:17.960><c> mounted</c><00:21:18.530><c> at</c><00:21:18.680><c> root</c><00:21:19.040><c> meaning</c><00:21:19.790><c> that</c><00:21:19.940><c> the</c><00:21:20.030><c> path</c>

00:21:20.230 --> 00:21:20.240 align:start position:0%
is mounted at root meaning that the path
 

00:21:20.240 --> 00:21:22.420 align:start position:0%
is mounted at root meaning that the path
slash<00:21:20.720><c> refers</c><00:21:21.410><c> to</c><00:21:21.440><c> the</c><00:21:21.710><c> root</c><00:21:21.860><c> directory</c><00:21:21.980><c> on</c>

00:21:22.420 --> 00:21:22.430 align:start position:0%
slash refers to the root directory on
 

00:21:22.430 --> 00:21:25.000 align:start position:0%
slash refers to the root directory on
that<00:21:22.670><c> partition</c><00:21:23.120><c> each</c><00:21:24.080><c> additional</c><00:21:24.530><c> partition</c>

00:21:25.000 --> 00:21:25.010 align:start position:0%
that partition each additional partition
 

00:21:25.010 --> 00:21:26.950 align:start position:0%
that partition each additional partition
is<00:21:25.130><c> then</c><00:21:25.370><c> made</c><00:21:25.550><c> accessible</c><00:21:26.090><c> by</c><00:21:26.480><c> mounting</c><00:21:26.840><c> it</c>

00:21:26.950 --> 00:21:26.960 align:start position:0%
is then made accessible by mounting it
 

00:21:26.960 --> 00:21:28.780 align:start position:0%
is then made accessible by mounting it
to<00:21:27.050><c> some</c><00:21:27.230><c> directory</c><00:21:27.650><c> on</c><00:21:27.800><c> some</c><00:21:28.160><c> other</c><00:21:28.370><c> already</c>

00:21:28.780 --> 00:21:28.790 align:start position:0%
to some directory on some other already
 

00:21:28.790 --> 00:21:31.570 align:start position:0%
to some directory on some other already
mounted<00:21:29.060><c> partition</c><00:21:29.720><c> here</c><00:21:30.710><c> partition</c><00:21:31.310><c> 2</c><00:21:31.460><c> is</c>

00:21:31.570 --> 00:21:31.580 align:start position:0%
mounted partition here partition 2 is
 

00:21:31.580 --> 00:21:33.850 align:start position:0%
mounted partition here partition 2 is
mounted<00:21:31.910><c> to</c><00:21:31.940><c> root</c><00:21:32.240><c> and</c><00:21:32.450><c> then</c><00:21:32.810><c> partition</c><00:21:33.260><c> 1</c><00:21:33.440><c> is</c>

00:21:33.850 --> 00:21:33.860 align:start position:0%
mounted to root and then partition 1 is
 

00:21:33.860 --> 00:21:35.980 align:start position:0%
mounted to root and then partition 1 is
mounted<00:21:34.310><c> to</c><00:21:34.340><c> the</c><00:21:34.550><c> directory</c><00:21:34.970><c> /</c><00:21:35.330><c> banana</c><00:21:35.600><c> on</c>

00:21:35.980 --> 00:21:35.990 align:start position:0%
mounted to the directory / banana on
 

00:21:35.990 --> 00:21:38.830 align:start position:0%
mounted to the directory / banana on
partition<00:21:36.590><c> 2</c><00:21:36.830><c> and</c><00:21:37.100><c> in</c><00:21:37.730><c> turn</c><00:21:37.940><c> partition</c><00:21:38.510><c> 3</c><00:21:38.720><c> is</c>

00:21:38.830 --> 00:21:38.840 align:start position:0%
partition 2 and in turn partition 3 is
 

00:21:38.840 --> 00:21:40.810 align:start position:0%
partition 2 and in turn partition 3 is
mounted<00:21:39.170><c> to</c><00:21:39.200><c> the</c><00:21:39.320><c> slash</c><00:21:39.620><c> banana</c><00:21:39.980><c> /</c><00:21:40.250><c> apple</c><00:21:40.670><c> on</c>

00:21:40.810 --> 00:21:40.820 align:start position:0%
mounted to the slash banana / apple on
 

00:21:40.820 --> 00:21:43.960 align:start position:0%
mounted to the slash banana / apple on
partition<00:21:41.480><c> 1</c><00:21:41.740><c> so</c><00:21:42.740><c> be</c><00:21:43.010><c> clear</c><00:21:43.130><c> that</c><00:21:43.220><c> /</c><00:21:43.760><c> banana</c>

00:21:43.960 --> 00:21:43.970 align:start position:0%
partition 1 so be clear that / banana
 

00:21:43.970 --> 00:21:45.460 align:start position:0%
partition 1 so be clear that / banana
becomes<00:21:44.480><c> synonymous</c><00:21:44.660><c> with</c><00:21:45.140><c> the</c><00:21:45.290><c> root</c>

00:21:45.460 --> 00:21:45.470 align:start position:0%
becomes synonymous with the root
 

00:21:45.470 --> 00:21:48.280 align:start position:0%
becomes synonymous with the root
directive<00:21:45.890><c> partition</c><00:21:46.430><c> 1</c><00:21:46.640><c> such</c><00:21:47.270><c> that</c><00:21:47.300><c> /</c><00:21:47.870><c> banana</c>

00:21:48.280 --> 00:21:48.290 align:start position:0%
directive partition 1 such that / banana
 

00:21:48.290 --> 00:21:50.860 align:start position:0%
directive partition 1 such that / banana
/<00:21:48.560><c> Apple</c><00:21:49.040><c> must</c><00:21:49.550><c> refer</c><00:21:49.820><c> to</c><00:21:50.000><c> a</c><00:21:50.030><c> directory</c><00:21:50.480><c> Apple</c>

00:21:50.860 --> 00:21:50.870 align:start position:0%
/ Apple must refer to a directory Apple
 

00:21:50.870 --> 00:21:53.740 align:start position:0%
/ Apple must refer to a directory Apple
in<00:21:51.020><c> the</c><00:21:51.500><c> root</c><00:21:51.650><c> of</c><00:21:51.830><c> partition</c><00:21:52.250><c> 1</c>

00:21:53.740 --> 00:21:53.750 align:start position:0%
in the root of partition 1
 

00:21:53.750 --> 00:21:55.390 align:start position:0%
in the root of partition 1
with<00:21:54.140><c> these</c><00:21:54.260><c> partitions</c><00:21:54.560><c> mounted</c><00:21:55.040><c> like</c><00:21:55.190><c> this</c>

00:21:55.390 --> 00:21:55.400 align:start position:0%
with these partitions mounted like this
 

00:21:55.400 --> 00:21:58.630 align:start position:0%
with these partitions mounted like this
the<00:21:55.700><c> path</c><00:21:55.910><c> /</c><00:21:56.330><c> banana</c><00:21:56.570><c> /</c><00:21:57.050><c> Adam</c><00:21:57.470><c> /</c><00:21:57.680><c> Nixon</c><00:21:58.160><c> now</c>

00:21:58.630 --> 00:21:58.640 align:start position:0%
the path / banana / Adam / Nixon now
 

00:21:58.640 --> 00:22:00.130 align:start position:0%
the path / banana / Adam / Nixon now
refers<00:21:58.940><c> to</c><00:21:58.970><c> a</c><00:21:59.150><c> file</c><00:21:59.390><c> or</c><00:21:59.600><c> directory</c><00:21:59.630><c> named</c>

00:22:00.130 --> 00:22:00.140 align:start position:0%
refers to a file or directory named
 

00:22:00.140 --> 00:22:02.200 align:start position:0%
refers to a file or directory named
Nixon<00:22:00.620><c> listed</c><00:22:01.280><c> in</c><00:22:01.400><c> the</c><00:22:01.460><c> directory</c><00:22:01.580><c> Adams</c>

00:22:02.200 --> 00:22:02.210 align:start position:0%
Nixon listed in the directory Adams
 

00:22:02.210 --> 00:22:04.930 align:start position:0%
Nixon listed in the directory Adams
listed<00:22:02.900><c> in</c><00:22:03.020><c> the</c><00:22:03.110><c> route</c><00:22:03.260><c> of</c><00:22:03.410><c> partition</c><00:22:03.860><c> 1</c><00:22:04.100><c> the</c>

00:22:04.930 --> 00:22:04.940 align:start position:0%
listed in the route of partition 1 the
 

00:22:04.940 --> 00:22:07.960 align:start position:0%
listed in the route of partition 1 the
path<00:22:05.150><c> /</c><00:22:05.630><c> Taylor</c><00:22:06.080><c> /</c><00:22:06.320><c> Polk</c><00:22:06.560><c> /</c><00:22:06.860><c> Hayes</c><00:22:07.130><c> now</c><00:22:07.700><c> refers</c>

00:22:07.960 --> 00:22:07.970 align:start position:0%
path / Taylor / Polk / Hayes now refers
 

00:22:07.970 --> 00:22:09.250 align:start position:0%
path / Taylor / Polk / Hayes now refers
to<00:22:08.000><c> a</c><00:22:08.180><c> file</c><00:22:08.360><c> or</c><00:22:08.390><c> directory</c><00:22:08.540><c> named</c><00:22:09.020><c> Hayes</c>

00:22:09.250 --> 00:22:09.260 align:start position:0%
to a file or directory named Hayes
 

00:22:09.260 --> 00:22:11.320 align:start position:0%
to a file or directory named Hayes
listed<00:22:10.010><c> in</c><00:22:10.100><c> the</c><00:22:10.190><c> directory</c><00:22:10.280><c> Polk</c><00:22:10.700><c> listed</c><00:22:11.240><c> in</c>

00:22:11.320 --> 00:22:11.330 align:start position:0%
listed in the directory Polk listed in
 

00:22:11.330 --> 00:22:12.970 align:start position:0%
listed in the directory Polk listed in
the<00:22:11.420><c> directory</c><00:22:11.510><c> Taylor</c><00:22:12.020><c> listed</c><00:22:12.680><c> in</c><00:22:12.770><c> the</c><00:22:12.860><c> route</c>

00:22:12.970 --> 00:22:12.980 align:start position:0%
the directory Taylor listed in the route
 

00:22:12.980 --> 00:22:16.450 align:start position:0%
the directory Taylor listed in the route
of<00:22:13.070><c> partition</c><00:22:13.490><c> 2</c><00:22:13.730><c> the</c><00:22:14.720><c> path</c><00:22:14.930><c> /</c><00:22:15.380><c> banana</c><00:22:15.770><c> /</c><00:22:16.070><c> apple</c>

00:22:16.450 --> 00:22:16.460 align:start position:0%
of partition 2 the path / banana / apple
 

00:22:16.460 --> 00:22:18.310 align:start position:0%
of partition 2 the path / banana / apple
/<00:22:16.670><c> Garfield</c><00:22:17.150><c> refers</c><00:22:17.780><c> to</c><00:22:17.810><c> a</c><00:22:17.990><c> file</c><00:22:18.200><c> our</c>

00:22:18.310 --> 00:22:18.320 align:start position:0%
/ Garfield refers to a file our
 

00:22:18.320 --> 00:22:20.200 align:start position:0%
/ Garfield refers to a file our
directory<00:22:18.650><c> named</c><00:22:18.830><c> Garfield</c><00:22:19.070><c> listed</c><00:22:20.030><c> in</c><00:22:20.120><c> the</c>

00:22:20.200 --> 00:22:20.210 align:start position:0%
directory named Garfield listed in the
 

00:22:20.210 --> 00:22:23.080 align:start position:0%
directory named Garfield listed in the
root<00:22:20.360><c> directory</c><00:22:20.390><c> of</c><00:22:20.870><c> partition</c><00:22:21.380><c> 3</c><00:22:22.090><c> UNIX</c>

00:22:23.080 --> 00:22:23.090 align:start position:0%
root directory of partition 3 UNIX
 

00:22:23.090 --> 00:22:24.370 align:start position:0%
root directory of partition 3 UNIX
systems<00:22:23.390><c> generally</c><00:22:23.690><c> require</c><00:22:24.110><c> that</c><00:22:24.320><c> a</c>

00:22:24.370 --> 00:22:24.380 align:start position:0%
systems generally require that a
 

00:22:24.380 --> 00:22:26.230 align:start position:0%
systems generally require that a
directory<00:22:24.800><c> already</c><00:22:25.190><c> exists</c><00:22:25.670><c> before</c><00:22:25.820><c> can</c><00:22:26.150><c> be</c>

00:22:26.230 --> 00:22:26.240 align:start position:0%
directory already exists before can be
 

00:22:26.240 --> 00:22:28.300 align:start position:0%
directory already exists before can be
used<00:22:26.420><c> as</c><00:22:26.570><c> a</c><00:22:26.600><c> mount</c><00:22:26.870><c> point</c><00:22:27.170><c> if</c><00:22:27.620><c> the</c><00:22:28.070><c> mountain</c>

00:22:28.300 --> 00:22:28.310 align:start position:0%
used as a mount point if the mountain
 

00:22:28.310 --> 00:22:29.710 align:start position:0%
used as a mount point if the mountain
directory<00:22:28.640><c> lists</c><00:22:28.970><c> any</c><00:22:29.150><c> files</c><00:22:29.420><c> or</c><00:22:29.600><c> directories</c>

00:22:29.710 --> 00:22:29.720 align:start position:0%
directory lists any files or directories
 

00:22:29.720 --> 00:22:32.050 align:start position:0%
directory lists any files or directories
those<00:22:30.590><c> entries</c><00:22:30.980><c> are</c><00:22:31.130><c> effectively</c><00:22:31.550><c> obscured</c>

00:22:32.050 --> 00:22:32.060 align:start position:0%
those entries are effectively obscured
 

00:22:32.060 --> 00:22:34.030 align:start position:0%
those entries are effectively obscured
by<00:22:32.240><c> the</c><00:22:32.300><c> mounting</c><00:22:32.780><c> so</c><00:22:33.560><c> when</c><00:22:33.800><c> we</c><00:22:33.920><c> mount</c>

00:22:34.030 --> 00:22:34.040 align:start position:0%
by the mounting so when we mount
 

00:22:34.040 --> 00:22:35.830 align:start position:0%
by the mounting so when we mount
partition<00:22:34.550><c> 1</c><00:22:34.760><c> the</c><00:22:35.000><c> slash</c><00:22:35.240><c> banana</c><00:22:35.630><c> on</c>

00:22:35.830 --> 00:22:35.840 align:start position:0%
partition 1 the slash banana on
 

00:22:35.840 --> 00:22:38.230 align:start position:0%
partition 1 the slash banana on
partition<00:22:36.290><c> 2</c><00:22:36.530><c> we</c><00:22:37.100><c> can</c><00:22:37.280><c> no</c><00:22:37.400><c> longer</c><00:22:37.430><c> access</c><00:22:38.060><c> the</c>

00:22:38.230 --> 00:22:38.240 align:start position:0%
partition 2 we can no longer access the
 

00:22:38.240 --> 00:22:40.000 align:start position:0%
partition 2 we can no longer access the
content<00:22:38.630><c> of</c><00:22:38.690><c> that</c><00:22:38.840><c> directory</c><00:22:39.260><c> because</c><00:22:39.470><c> /</c>

00:22:40.000 --> 00:22:40.010 align:start position:0%
content of that directory because /
 

00:22:40.010 --> 00:22:41.530 align:start position:0%
content of that directory because /
banana<00:22:40.250><c> now</c><00:22:40.640><c> resolves</c><00:22:41.180><c> to</c><00:22:41.240><c> the</c><00:22:41.420><c> root</c>

00:22:41.530 --> 00:22:41.540 align:start position:0%
banana now resolves to the root
 

00:22:41.540 --> 00:22:44.930 align:start position:0%
banana now resolves to the root
directory<00:22:41.690><c> of</c><00:22:42.020><c> partition</c><00:22:42.560><c> 1</c>

00:22:44.930 --> 00:22:44.940 align:start position:0%
 
 

00:22:44.940 --> 00:22:48.330 align:start position:0%
 
IPC<00:22:45.940><c> inter-process</c><00:22:46.710><c> communication</c><00:22:47.710><c> is</c><00:22:48.130><c> an</c>

00:22:48.330 --> 00:22:48.340 align:start position:0%
IPC inter-process communication is an
 

00:22:48.340 --> 00:22:50.040 align:start position:0%
IPC inter-process communication is an
umbrella<00:22:48.580><c> term</c><00:22:48.700><c> for</c><00:22:49.090><c> any</c><00:22:49.210><c> mechanism</c><00:22:49.810><c> of</c><00:22:49.960><c> the</c>

00:22:50.040 --> 00:22:50.050 align:start position:0%
umbrella term for any mechanism of the
 

00:22:50.050 --> 00:22:51.420 align:start position:0%
umbrella term for any mechanism of the
CPU<00:22:50.410><c> that</c><00:22:50.560><c> facilitates</c><00:22:51.160><c> communication</c>

00:22:51.420 --> 00:22:51.430 align:start position:0%
CPU that facilitates communication
 

00:22:51.430 --> 00:22:54.360 align:start position:0%
CPU that facilitates communication
between<00:22:52.060><c> processes</c><00:22:52.690><c> the</c><00:22:53.680><c> simplest</c><00:22:54.070><c> kind</c><00:22:54.220><c> of</c>

00:22:54.360 --> 00:22:54.370 align:start position:0%
between processes the simplest kind of
 

00:22:54.370 --> 00:22:56.550 align:start position:0%
between processes the simplest kind of
IPC<00:22:54.790><c> files</c><00:22:55.210><c> can</c><00:22:55.780><c> be</c><00:22:55.900><c> read</c><00:22:56.110><c> and</c><00:22:56.230><c> written</c><00:22:56.320><c> by</c>

00:22:56.550 --> 00:22:56.560 align:start position:0%
IPC files can be read and written by
 

00:22:56.560 --> 00:22:58.620 align:start position:0%
IPC files can be read and written by
multiple<00:22:57.040><c> processes</c><00:22:57.550><c> and</c><00:22:57.790><c> those</c><00:22:58.210><c> can</c><00:22:58.420><c> service</c>

00:22:58.620 --> 00:22:58.630 align:start position:0%
multiple processes and those can service
 

00:22:58.630 --> 00:23:00.300 align:start position:0%
multiple processes and those can service
channels<00:22:59.080><c> of</c><00:22:59.200><c> communication</c><00:22:59.830><c> between</c><00:22:59.980><c> them</c>

00:23:00.300 --> 00:23:00.310 align:start position:0%
channels of communication between them
 

00:23:00.310 --> 00:23:03.030 align:start position:0%
channels of communication between them
other<00:23:01.210><c> mechanisms</c><00:23:01.840><c> include</c><00:23:02.170><c> pipes</c><00:23:02.470><c> network</c>

00:23:03.030 --> 00:23:03.040 align:start position:0%
other mechanisms include pipes network
 

00:23:03.040 --> 00:23:04.830 align:start position:0%
other mechanisms include pipes network
and<00:23:03.190><c> sockets</c><00:23:03.520><c> signals</c><00:23:04.090><c> and</c><00:23:04.300><c> shared</c><00:23:04.510><c> memory</c>

00:23:04.830 --> 00:23:04.840 align:start position:0%
and sockets signals and shared memory
 

00:23:04.840 --> 00:23:06.570 align:start position:0%
and sockets signals and shared memory
and<00:23:04.960><c> we'll</c><00:23:05.620><c> discuss</c><00:23:05.920><c> some</c><00:23:06.070><c> of</c><00:23:06.100><c> these</c><00:23:06.220><c> in</c><00:23:06.460><c> the</c>

00:23:06.570 --> 00:23:06.580 align:start position:0%
and we'll discuss some of these in the
 

00:23:06.580 --> 00:23:09.600 align:start position:0%
and we'll discuss some of these in the
unit<00:23:06.850><c> on</c><00:23:06.970><c> UNIX</c><00:23:07.390><c> system</c><00:23:07.840><c> calls</c>

00:23:09.600 --> 00:23:09.610 align:start position:0%
unit on UNIX system calls
 

00:23:09.610 --> 00:23:11.670 align:start position:0%
unit on UNIX system calls
you

