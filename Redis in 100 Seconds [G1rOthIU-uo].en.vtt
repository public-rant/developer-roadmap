WEBVTT



00:00:00.799 --> 00:00:03.350 align:start position:0%
 
redis<00:00:01.360><c> an</c><00:00:01.599><c> in-memory</c><00:00:02.159><c> multi-model</c><00:00:02.800><c> database</c>

00:00:03.350 --> 00:00:03.360 align:start position:0%
redis an in-memory multi-model database
 

00:00:03.360 --> 00:00:05.749 align:start position:0%
redis an in-memory multi-model database
famous<00:00:03.760><c> for</c><00:00:04.000><c> its</c><00:00:04.319><c> sub-millisecond</c><00:00:05.120><c> latency</c>

00:00:05.749 --> 00:00:05.759 align:start position:0%
famous for its sub-millisecond latency
 

00:00:05.759 --> 00:00:08.470 align:start position:0%
famous for its sub-millisecond latency
it<00:00:05.920><c> was</c><00:00:06.160><c> created</c><00:00:06.640><c> in</c><00:00:06.799><c> 2009</c><00:00:07.680><c> based</c><00:00:07.919><c> on</c><00:00:08.080><c> the</c><00:00:08.240><c> idea</c>

00:00:08.470 --> 00:00:08.480 align:start position:0%
it was created in 2009 based on the idea
 

00:00:08.480 --> 00:00:11.270 align:start position:0%
it was created in 2009 based on the idea
that<00:00:08.720><c> a</c><00:00:08.960><c> cache</c><00:00:09.440><c> can</c><00:00:09.679><c> also</c><00:00:10.000><c> be</c><00:00:10.240><c> a</c><00:00:10.480><c> durable</c><00:00:10.960><c> data</c>

00:00:11.270 --> 00:00:11.280 align:start position:0%
that a cache can also be a durable data
 

00:00:11.280 --> 00:00:11.669 align:start position:0%
that a cache can also be a durable data
store

00:00:11.669 --> 00:00:11.679 align:start position:0%
store
 

00:00:11.679 --> 00:00:13.350 align:start position:0%
store
around<00:00:12.000><c> this</c><00:00:12.160><c> time</c><00:00:12.480><c> apps</c><00:00:12.719><c> like</c><00:00:12.960><c> twitter</c><00:00:13.200><c> were</c>

00:00:13.350 --> 00:00:13.360 align:start position:0%
around this time apps like twitter were
 

00:00:13.360 --> 00:00:15.110 align:start position:0%
around this time apps like twitter were
growing<00:00:13.679><c> exponentially</c><00:00:14.480><c> and</c><00:00:14.639><c> needed</c><00:00:14.880><c> a</c><00:00:14.960><c> way</c>

00:00:15.110 --> 00:00:15.120 align:start position:0%
growing exponentially and needed a way
 

00:00:15.120 --> 00:00:16.870 align:start position:0%
growing exponentially and needed a way
to<00:00:15.360><c> deliver</c><00:00:15.759><c> data</c><00:00:15.920><c> to</c><00:00:16.080><c> their</c><00:00:16.240><c> end</c><00:00:16.480><c> users</c>

00:00:16.870 --> 00:00:16.880 align:start position:0%
to deliver data to their end users
 

00:00:16.880 --> 00:00:18.550 align:start position:0%
to deliver data to their end users
faster<00:00:17.199><c> than</c><00:00:17.440><c> a</c><00:00:17.600><c> relational</c><00:00:18.000><c> database</c><00:00:18.400><c> could</c>

00:00:18.550 --> 00:00:18.560 align:start position:0%
faster than a relational database could
 

00:00:18.560 --> 00:00:19.029 align:start position:0%
faster than a relational database could
handle

00:00:19.029 --> 00:00:19.039 align:start position:0%
handle
 

00:00:19.039 --> 00:00:20.870 align:start position:0%
handle
redis<00:00:19.520><c> which</c><00:00:19.680><c> means</c><00:00:19.920><c> remote</c><00:00:20.320><c> dictionary</c>

00:00:20.870 --> 00:00:20.880 align:start position:0%
redis which means remote dictionary
 

00:00:20.880 --> 00:00:22.710 align:start position:0%
redis which means remote dictionary
server<00:00:21.279><c> was</c><00:00:21.520><c> adopted</c><00:00:21.920><c> by</c><00:00:22.160><c> some</c><00:00:22.320><c> of</c><00:00:22.400><c> the</c><00:00:22.480><c> most</c>

00:00:22.710 --> 00:00:22.720 align:start position:0%
server was adopted by some of the most
 

00:00:22.720 --> 00:00:24.390 align:start position:0%
server was adopted by some of the most
heavily<00:00:23.039><c> trafficked</c><00:00:23.439><c> sites</c><00:00:23.760><c> in</c><00:00:23.840><c> the</c><00:00:23.920><c> world</c>

00:00:24.390 --> 00:00:24.400 align:start position:0%
heavily trafficked sites in the world
 

00:00:24.400 --> 00:00:26.150 align:start position:0%
heavily trafficked sites in the world
because<00:00:24.640><c> it</c><00:00:24.720><c> changed</c><00:00:25.039><c> the</c><00:00:25.119><c> database</c><00:00:25.680><c> game</c><00:00:26.000><c> by</c>

00:00:26.150 --> 00:00:26.160 align:start position:0%
because it changed the database game by
 

00:00:26.160 --> 00:00:28.390 align:start position:0%
because it changed the database game by
creating<00:00:26.560><c> a</c><00:00:26.800><c> system</c><00:00:27.359><c> where</c><00:00:27.599><c> data</c><00:00:27.920><c> is</c><00:00:28.080><c> always</c>

00:00:28.390 --> 00:00:28.400 align:start position:0%
creating a system where data is always
 

00:00:28.400 --> 00:00:30.550 align:start position:0%
creating a system where data is always
modified<00:00:28.960><c> or</c><00:00:29.199><c> read</c><00:00:29.519><c> from</c><00:00:29.760><c> the</c><00:00:29.840><c> main</c><00:00:30.080><c> computer</c>

00:00:30.550 --> 00:00:30.560 align:start position:0%
modified or read from the main computer
 

00:00:30.560 --> 00:00:31.029 align:start position:0%
modified or read from the main computer
memory

00:00:31.029 --> 00:00:31.039 align:start position:0%
memory
 

00:00:31.039 --> 00:00:33.350 align:start position:0%
memory
as<00:00:31.279><c> opposed</c><00:00:31.679><c> to</c><00:00:31.760><c> the</c><00:00:31.920><c> much</c><00:00:32.160><c> slower</c><00:00:32.640><c> disk</c><00:00:33.120><c> but</c>

00:00:33.350 --> 00:00:33.360 align:start position:0%
as opposed to the much slower disk but
 

00:00:33.360 --> 00:00:34.229 align:start position:0%
as opposed to the much slower disk but
at<00:00:33.440><c> the</c><00:00:33.520><c> same</c><00:00:33.840><c> time</c>

00:00:34.229 --> 00:00:34.239 align:start position:0%
at the same time
 

00:00:34.239 --> 00:00:36.229 align:start position:0%
at the same time
it<00:00:34.399><c> stores</c><00:00:34.719><c> its</c><00:00:34.880><c> data</c><00:00:35.280><c> on</c><00:00:35.360><c> the</c><00:00:35.520><c> disk</c><00:00:35.840><c> so</c><00:00:36.000><c> it</c><00:00:36.079><c> can</c>

00:00:36.229 --> 00:00:36.239 align:start position:0%
it stores its data on the disk so it can
 

00:00:36.239 --> 00:00:37.270 align:start position:0%
it stores its data on the disk so it can
be<00:00:36.399><c> reconstructed</c>

00:00:37.270 --> 00:00:37.280 align:start position:0%
be reconstructed
 

00:00:37.280 --> 00:00:39.110 align:start position:0%
be reconstructed
as<00:00:37.520><c> needed</c><00:00:37.840><c> which</c><00:00:38.079><c> means</c><00:00:38.239><c> the</c><00:00:38.399><c> database</c><00:00:38.879><c> is</c>

00:00:39.110 --> 00:00:39.120 align:start position:0%
as needed which means the database is
 

00:00:39.120 --> 00:00:40.869 align:start position:0%
as needed which means the database is
fully<00:00:39.440><c> durable</c><00:00:39.920><c> supporting</c><00:00:40.399><c> things</c><00:00:40.640><c> like</c>

00:00:40.869 --> 00:00:40.879 align:start position:0%
fully durable supporting things like
 

00:00:40.879 --> 00:00:43.110 align:start position:0%
fully durable supporting things like
snapshots<00:00:41.600><c> and</c><00:00:41.760><c> backups</c><00:00:42.320><c> every</c><00:00:42.559><c> data</c><00:00:42.879><c> point</c>

00:00:43.110 --> 00:00:43.120 align:start position:0%
snapshots and backups every data point
 

00:00:43.120 --> 00:00:44.630 align:start position:0%
snapshots and backups every data point
in<00:00:43.200><c> the</c><00:00:43.280><c> database</c><00:00:43.920><c> is</c><00:00:44.079><c> a</c><00:00:44.239><c> key</c>

00:00:44.630 --> 00:00:44.640 align:start position:0%
in the database is a key
 

00:00:44.640 --> 00:00:46.630 align:start position:0%
in the database is a key
followed<00:00:45.039><c> by</c><00:00:45.280><c> one</c><00:00:45.520><c> of</c><00:00:45.760><c> many</c><00:00:46.000><c> different</c><00:00:46.399><c> data</c>

00:00:46.630 --> 00:00:46.640 align:start position:0%
followed by one of many different data
 

00:00:46.640 --> 00:00:48.310 align:start position:0%
followed by one of many different data
structures<00:00:47.280><c> like</c><00:00:47.520><c> a</c><00:00:47.680><c> string</c>

00:00:48.310 --> 00:00:48.320 align:start position:0%
structures like a string
 

00:00:48.320 --> 00:00:50.470 align:start position:0%
structures like a string
list<00:00:48.800><c> hash</c><00:00:49.120><c> or</c><00:00:49.280><c> stream</c><00:00:49.840><c> so</c><00:00:50.000><c> you</c><00:00:50.160><c> can</c><00:00:50.239><c> store</c>

00:00:50.470 --> 00:00:50.480 align:start position:0%
list hash or stream so you can store
 

00:00:50.480 --> 00:00:52.229 align:start position:0%
list hash or stream so you can store
data<00:00:50.800><c> naturally</c><00:00:51.440><c> just</c><00:00:51.600><c> like</c><00:00:51.760><c> you</c><00:00:51.840><c> would</c><00:00:52.079><c> with</c>

00:00:52.229 --> 00:00:52.239 align:start position:0%
data naturally just like you would with
 

00:00:52.239 --> 00:00:53.750 align:start position:0%
data naturally just like you would with
your<00:00:52.320><c> favorite</c><00:00:52.640><c> programming</c><00:00:53.120><c> language</c><00:00:53.600><c> as</c>

00:00:53.750 --> 00:00:53.760 align:start position:0%
your favorite programming language as
 

00:00:53.760 --> 00:00:55.510 align:start position:0%
your favorite programming language as
opposed<00:00:54.079><c> to</c><00:00:54.239><c> squeezing</c><00:00:54.719><c> it</c><00:00:54.879><c> into</c><00:00:55.039><c> a</c><00:00:55.120><c> bunch</c><00:00:55.360><c> of</c>

00:00:55.510 --> 00:00:55.520 align:start position:0%
opposed to squeezing it into a bunch of
 

00:00:55.520 --> 00:00:57.270 align:start position:0%
opposed to squeezing it into a bunch of
tables<00:00:55.920><c> or</c><00:00:56.160><c> json</c><00:00:56.640><c> documents</c>

00:00:57.270 --> 00:00:57.280 align:start position:0%
tables or json documents
 

00:00:57.280 --> 00:00:59.029 align:start position:0%
tables or json documents
interacting<00:00:57.760><c> with</c><00:00:57.920><c> the</c><00:00:58.000><c> database</c><00:00:58.559><c> is</c><00:00:58.719><c> handled</c>

00:00:59.029 --> 00:00:59.039 align:start position:0%
interacting with the database is handled
 

00:00:59.039 --> 00:01:00.630 align:start position:0%
interacting with the database is handled
with<00:00:59.280><c> a</c><00:00:59.440><c> simple</c><00:00:59.760><c> set</c><00:00:59.920><c> of</c><00:01:00.000><c> commands</c>

00:01:00.630 --> 00:01:00.640 align:start position:0%
with a simple set of commands
 

00:01:00.640 --> 00:01:03.510 align:start position:0%
with a simple set of commands
like<00:01:00.879><c> set</c><00:01:01.359><c> followed</c><00:01:01.680><c> by</c><00:01:01.920><c> a</c><00:01:02.160><c> key</c><00:01:02.640><c> and</c><00:01:02.800><c> value</c><00:01:03.359><c> to</c>

00:01:03.510 --> 00:01:03.520 align:start position:0%
like set followed by a key and value to
 

00:01:03.520 --> 00:01:04.310 align:start position:0%
like set followed by a key and value to
create<00:01:03.840><c> data</c>

00:01:04.310 --> 00:01:04.320 align:start position:0%
create data
 

00:01:04.320 --> 00:01:07.270 align:start position:0%
create data
then<00:01:04.640><c> git</c><00:01:05.040><c> followed</c><00:01:05.439><c> by</c><00:01:05.680><c> a</c><00:01:05.920><c> key</c><00:01:06.320><c> to</c><00:01:06.560><c> read</c><00:01:06.799><c> data</c>

00:01:07.270 --> 00:01:07.280 align:start position:0%
then git followed by a key to read data
 

00:01:07.280 --> 00:01:07.990 align:start position:0%
then git followed by a key to read data
historically

00:01:07.990 --> 00:01:08.000 align:start position:0%
historically
 

00:01:08.000 --> 00:01:10.070 align:start position:0%
historically
redis<00:01:08.320><c> has</c><00:01:08.479><c> been</c><00:01:08.640><c> described</c><00:01:09.200><c> as</c><00:01:09.360><c> a</c><00:01:09.520><c> key</c><00:01:09.760><c> value</c>

00:01:10.070 --> 00:01:10.080 align:start position:0%
redis has been described as a key value
 

00:01:10.080 --> 00:01:12.230 align:start position:0%
redis has been described as a key value
store<00:01:10.400><c> and</c><00:01:10.560><c> is</c><00:01:10.720><c> often</c><00:01:11.040><c> used</c><00:01:11.280><c> as</c><00:01:11.520><c> a</c><00:01:11.680><c> cache</c><00:01:12.080><c> to</c>

00:01:12.230 --> 00:01:12.240 align:start position:0%
store and is often used as a cache to
 

00:01:12.240 --> 00:01:14.149 align:start position:0%
store and is often used as a cache to
make<00:01:12.479><c> relational</c><00:01:12.960><c> databases</c><00:01:13.600><c> faster</c><00:01:14.000><c> at</c>

00:01:14.149 --> 00:01:14.159 align:start position:0%
make relational databases faster at
 

00:01:14.159 --> 00:01:14.630 align:start position:0%
make relational databases faster at
scale

00:01:14.630 --> 00:01:14.640 align:start position:0%
scale
 

00:01:14.640 --> 00:01:16.230 align:start position:0%
scale
but<00:01:14.880><c> here's</c><00:01:15.200><c> where</c><00:01:15.360><c> your</c><00:01:15.520><c> mind</c><00:01:15.840><c> is</c><00:01:15.920><c> about</c><00:01:16.080><c> to</c>

00:01:16.230 --> 00:01:16.240 align:start position:0%
but here's where your mind is about to
 

00:01:16.240 --> 00:01:18.630 align:start position:0%
but here's where your mind is about to
be<00:01:16.400><c> blown</c><00:01:16.880><c> redis</c><00:01:17.360><c> is</c><00:01:17.520><c> perfectly</c><00:01:17.920><c> suitable</c><00:01:18.479><c> as</c>

00:01:18.630 --> 00:01:18.640 align:start position:0%
be blown redis is perfectly suitable as
 

00:01:18.640 --> 00:01:19.830 align:start position:0%
be blown redis is perfectly suitable as
a<00:01:18.799><c> primary</c><00:01:19.280><c> database</c>

00:01:19.830 --> 00:01:19.840 align:start position:0%
a primary database
 

00:01:19.840 --> 00:01:21.749 align:start position:0%
a primary database
and<00:01:20.000><c> can</c><00:01:20.159><c> dramatically</c><00:01:20.640><c> reduce</c><00:01:20.960><c> complexity</c>

00:01:21.749 --> 00:01:21.759 align:start position:0%
and can dramatically reduce complexity
 

00:01:21.759 --> 00:01:23.670 align:start position:0%
and can dramatically reduce complexity
because<00:01:22.000><c> making</c><00:01:22.320><c> things</c><00:01:22.560><c> go</c><00:01:22.720><c> fast</c><00:01:23.040><c> at</c><00:01:23.200><c> scale</c>

00:01:23.670 --> 00:01:23.680 align:start position:0%
because making things go fast at scale
 

00:01:23.680 --> 00:01:25.429 align:start position:0%
because making things go fast at scale
is<00:01:23.759><c> the</c><00:01:23.920><c> primary</c><00:01:24.320><c> cause</c><00:01:24.640><c> of</c><00:01:24.720><c> complexity</c><00:01:25.360><c> in</c>

00:01:25.429 --> 00:01:25.439 align:start position:0%
is the primary cause of complexity in
 

00:01:25.439 --> 00:01:27.670 align:start position:0%
is the primary cause of complexity in
the<00:01:25.520><c> first</c><00:01:25.759><c> place</c><00:01:26.159><c> with</c><00:01:26.400><c> redis</c><00:01:26.799><c> your</c><00:01:27.119><c> database</c>

00:01:27.670 --> 00:01:27.680 align:start position:0%
the first place with redis your database
 

00:01:27.680 --> 00:01:28.789 align:start position:0%
the first place with redis your database
is<00:01:27.920><c> already</c><00:01:28.320><c> fast</c>

00:01:28.789 --> 00:01:28.799 align:start position:0%
is already fast
 

00:01:28.799 --> 00:01:31.270 align:start position:0%
is already fast
no<00:01:29.040><c> need</c><00:01:29.360><c> for</c><00:01:29.600><c> a</c><00:01:29.759><c> complex</c><00:01:30.320><c> caching</c><00:01:30.720><c> layer</c><00:01:31.119><c> but</c>

00:01:31.270 --> 00:01:31.280 align:start position:0%
no need for a complex caching layer but
 

00:01:31.280 --> 00:01:32.230 align:start position:0%
no need for a complex caching layer but
you<00:01:31.360><c> might</c><00:01:31.520><c> be</c><00:01:31.680><c> wondering</c>

00:01:32.230 --> 00:01:32.240 align:start position:0%
you might be wondering
 

00:01:32.240 --> 00:01:34.230 align:start position:0%
you might be wondering
how<00:01:32.400><c> do</c><00:01:32.479><c> i</c><00:01:32.640><c> model</c><00:01:32.960><c> complex</c><00:01:33.520><c> relationships</c>

00:01:34.230 --> 00:01:34.240 align:start position:0%
how do i model complex relationships
 

00:01:34.240 --> 00:01:35.830 align:start position:0%
how do i model complex relationships
today<00:01:34.720><c> redis</c><00:01:35.040><c> is</c><00:01:35.200><c> what</c><00:01:35.280><c> you</c><00:01:35.439><c> would</c><00:01:35.520><c> call</c>

00:01:35.830 --> 00:01:35.840 align:start position:0%
today redis is what you would call
 

00:01:35.840 --> 00:01:37.990 align:start position:0%
today redis is what you would call
a<00:01:36.000><c> multi-model</c><00:01:36.640><c> database</c><00:01:37.280><c> supporting</c><00:01:37.840><c> a</c>

00:01:37.990 --> 00:01:38.000 align:start position:0%
a multi-model database supporting a
 

00:01:38.000 --> 00:01:39.749 align:start position:0%
a multi-model database supporting a
variety<00:01:38.400><c> of</c><00:01:38.479><c> different</c><00:01:38.720><c> database</c><00:01:39.200><c> paradigms</c>

00:01:39.749 --> 00:01:39.759 align:start position:0%
variety of different database paradigms
 

00:01:39.759 --> 00:01:39.990 align:start position:0%
variety of different database paradigms
with

00:01:39.990 --> 00:01:40.000 align:start position:0%
with
 

00:01:40.000 --> 00:01:42.230 align:start position:0%
with
add-on<00:01:40.400><c> modules</c><00:01:40.880><c> that</c><00:01:41.040><c> you</c><00:01:41.119><c> can</c><00:01:41.280><c> opt</c><00:01:41.600><c> into</c><00:01:42.000><c> as</c>

00:01:42.230 --> 00:01:42.240 align:start position:0%
add-on modules that you can opt into as
 

00:01:42.240 --> 00:01:43.670 align:start position:0%
add-on modules that you can opt into as
needed<00:01:42.720><c> if</c><00:01:42.799><c> your</c><00:01:42.960><c> data</c><00:01:43.200><c> contains</c>

00:01:43.670 --> 00:01:43.680 align:start position:0%
needed if your data contains
 

00:01:43.680 --> 00:01:45.590 align:start position:0%
needed if your data contains
relationships<00:01:44.479><c> bring</c><00:01:44.720><c> in</c><00:01:44.799><c> redis</c><00:01:45.200><c> graph</c>

00:01:45.590 --> 00:01:45.600 align:start position:0%
relationships bring in redis graph
 

00:01:45.600 --> 00:01:47.830 align:start position:0%
relationships bring in redis graph
and<00:01:45.840><c> query</c><00:01:46.159><c> it</c><00:01:46.240><c> with</c><00:01:46.479><c> cipher</c><00:01:46.960><c> or</c><00:01:47.119><c> use</c><00:01:47.360><c> the</c><00:01:47.439><c> json</c>

00:01:47.830 --> 00:01:47.840 align:start position:0%
and query it with cipher or use the json
 

00:01:47.840 --> 00:01:49.749 align:start position:0%
and query it with cipher or use the json
module<00:01:48.320><c> to</c><00:01:48.560><c> structure</c><00:01:48.960><c> your</c><00:01:49.119><c> data</c><00:01:49.439><c> as</c><00:01:49.600><c> a</c>

00:01:49.749 --> 00:01:49.759 align:start position:0%
module to structure your data as a
 

00:01:49.759 --> 00:01:50.630 align:start position:0%
module to structure your data as a
hierarchy

00:01:50.630 --> 00:01:50.640 align:start position:0%
hierarchy
 

00:01:50.640 --> 00:01:52.789 align:start position:0%
hierarchy
just<00:01:50.880><c> like</c><00:01:51.119><c> a</c><00:01:51.320><c> document-oriented</c><00:01:52.320><c> database</c>

00:01:52.789 --> 00:01:52.799 align:start position:0%
just like a document-oriented database
 

00:01:52.799 --> 00:01:53.990 align:start position:0%
just like a document-oriented database
then<00:01:52.960><c> use</c><00:01:53.119><c> the</c><00:01:53.200><c> search</c><00:01:53.520><c> module</c>

00:01:53.990 --> 00:01:54.000 align:start position:0%
then use the search module
 

00:01:54.000 --> 00:01:55.910 align:start position:0%
then use the search module
to<00:01:54.159><c> turn</c><00:01:54.320><c> your</c><00:01:54.479><c> database</c><00:01:55.040><c> into</c><00:01:55.280><c> a</c><00:01:55.439><c> full</c><00:01:55.680><c> text</c>

00:01:55.910 --> 00:01:55.920 align:start position:0%
to turn your database into a full text
 

00:01:55.920 --> 00:01:57.670 align:start position:0%
to turn your database into a full text
search<00:01:56.159><c> engine</c><00:01:56.560><c> and</c><00:01:56.719><c> it</c><00:01:56.799><c> even</c><00:01:57.040><c> has</c><00:01:57.200><c> modules</c>

00:01:57.670 --> 00:01:57.680 align:start position:0%
search engine and it even has modules
 

00:01:57.680 --> 00:01:59.990 align:start position:0%
search engine and it even has modules
for<00:01:57.920><c> ai</c><00:01:58.240><c> workloads</c><00:01:58.960><c> time</c><00:01:59.200><c> series</c><00:01:59.520><c> data</c>

00:01:59.990 --> 00:02:00.000 align:start position:0%
for ai workloads time series data
 

00:02:00.000 --> 00:02:01.830 align:start position:0%
for ai workloads time series data
and<00:02:00.240><c> more</c><00:02:00.560><c> the</c><00:02:00.640><c> quickest</c><00:02:00.960><c> way</c><00:02:01.119><c> to</c><00:02:01.200><c> get</c><00:02:01.360><c> started</c>

00:02:01.830 --> 00:02:01.840 align:start position:0%
and more the quickest way to get started
 

00:02:01.840 --> 00:02:03.910 align:start position:0%
and more the quickest way to get started
is<00:02:02.000><c> the</c><00:02:02.079><c> free</c><00:02:02.399><c> tier</c><00:02:02.719><c> on</c><00:02:02.960><c> redis</c><00:02:03.360><c> enterprise</c>

00:02:03.910 --> 00:02:03.920 align:start position:0%
is the free tier on redis enterprise
 

00:02:03.920 --> 00:02:05.670 align:start position:0%
is the free tier on redis enterprise
cloud<00:02:04.320><c> that'll</c><00:02:04.640><c> give</c><00:02:04.799><c> you</c><00:02:04.960><c> a</c><00:02:05.040><c> free</c><00:02:05.280><c> database</c>

00:02:05.670 --> 00:02:05.680 align:start position:0%
cloud that'll give you a free database
 

00:02:05.680 --> 00:02:07.270 align:start position:0%
cloud that'll give you a free database
to<00:02:05.840><c> play</c><00:02:06.000><c> around</c><00:02:06.240><c> with</c><00:02:06.560><c> and</c><00:02:06.719><c> you</c><00:02:06.799><c> can</c><00:02:06.960><c> attach</c>

00:02:07.270 --> 00:02:07.280 align:start position:0%
to play around with and you can attach
 

00:02:07.280 --> 00:02:09.029 align:start position:0%
to play around with and you can attach
one<00:02:07.520><c> extra</c><00:02:07.920><c> module</c><00:02:08.319><c> to</c><00:02:08.560><c> it</c><00:02:08.640><c> then</c><00:02:08.800><c> you</c><00:02:08.879><c> can</c>

00:02:09.029 --> 00:02:09.039 align:start position:0%
one extra module to it then you can
 

00:02:09.039 --> 00:02:11.190 align:start position:0%
one extra module to it then you can
connect<00:02:09.360><c> to</c><00:02:09.520><c> it</c><00:02:09.679><c> with</c><00:02:09.840><c> the</c><00:02:09.920><c> redis</c><00:02:10.239><c> cli</c><00:02:10.800><c> or</c><00:02:11.039><c> with</c>

00:02:11.190 --> 00:02:11.200 align:start position:0%
connect to it with the redis cli or with
 

00:02:11.200 --> 00:02:13.110 align:start position:0%
connect to it with the redis cli or with
the<00:02:11.280><c> redis</c><00:02:11.680><c> insight</c><00:02:12.000><c> tool</c><00:02:12.319><c> which</c><00:02:12.480><c> contains</c><00:02:12.959><c> an</c>

00:02:13.110 --> 00:02:13.120 align:start position:0%
the redis insight tool which contains an
 

00:02:13.120 --> 00:02:14.949 align:start position:0%
the redis insight tool which contains an
interactive<00:02:13.680><c> dashboard</c><00:02:14.239><c> to</c><00:02:14.560><c> manage</c><00:02:14.879><c> your</c>

00:02:14.949 --> 00:02:14.959 align:start position:0%
interactive dashboard to manage your
 

00:02:14.959 --> 00:02:17.589 align:start position:0%
interactive dashboard to manage your
data<00:02:15.360><c> this</c><00:02:15.599><c> has</c><00:02:15.680><c> been</c><00:02:15.920><c> redis</c><00:02:16.400><c> in</c><00:02:16.640><c> 100</c><00:02:17.120><c> seconds</c>

00:02:17.589 --> 00:02:17.599 align:start position:0%
data this has been redis in 100 seconds
 

00:02:17.599 --> 00:02:19.190 align:start position:0%
data this has been redis in 100 seconds
but<00:02:17.760><c> what</c><00:02:17.920><c> do</c><00:02:18.080><c> you</c><00:02:18.160><c> guys</c><00:02:18.400><c> think</c><00:02:18.720><c> would</c><00:02:18.879><c> you</c><00:02:19.040><c> use</c>

00:02:19.190 --> 00:02:19.200 align:start position:0%
but what do you guys think would you use
 

00:02:19.200 --> 00:02:21.110 align:start position:0%
but what do you guys think would you use
redis<00:02:19.599><c> as</c><00:02:19.760><c> your</c><00:02:19.920><c> primary</c><00:02:20.319><c> database</c><00:02:20.879><c> let</c><00:02:21.040><c> me</c>

00:02:21.110 --> 00:02:21.120 align:start position:0%
redis as your primary database let me
 

00:02:21.120 --> 00:02:22.070 align:start position:0%
redis as your primary database let me
know<00:02:21.280><c> why</c><00:02:21.440><c> or</c><00:02:21.599><c> why</c><00:02:21.760><c> not</c>

00:02:22.070 --> 00:02:22.080 align:start position:0%
know why or why not
 

00:02:22.080 --> 00:02:23.750 align:start position:0%
know why or why not
in<00:02:22.160><c> the</c><00:02:22.239><c> comments</c><00:02:22.640><c> thanks</c><00:02:22.879><c> for</c><00:02:23.040><c> watching</c><00:02:23.599><c> and</c>

00:02:23.750 --> 00:02:23.760 align:start position:0%
in the comments thanks for watching and
 

00:02:23.760 --> 00:02:27.680 align:start position:0%
in the comments thanks for watching and
i<00:02:23.920><c> will</c><00:02:24.160><c> see</c><00:02:24.319><c> you</c><00:02:24.560><c> in</c><00:02:24.720><c> the</c><00:02:24.800><c> next</c><00:02:25.040><c> one</c>

