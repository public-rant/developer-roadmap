WEBVTT



00:00:00.080 --> 00:00:03.350 align:start position:0%
 
nosql<00:00:00.640><c> databases</c><00:00:01.360><c> have</c><00:00:01.520><c> become</c><00:00:02.080><c> very</c><00:00:02.399><c> popular</c>

00:00:03.350 --> 00:00:03.360 align:start position:0%
nosql databases have become very popular
 

00:00:03.360 --> 00:00:05.110 align:start position:0%
nosql databases have become very popular
big<00:00:03.600><c> companies</c><00:00:04.000><c> rely</c><00:00:04.319><c> on</c><00:00:04.480><c> them</c><00:00:04.640><c> to</c><00:00:04.799><c> store</c>

00:00:05.110 --> 00:00:05.120 align:start position:0%
big companies rely on them to store
 

00:00:05.120 --> 00:00:07.269 align:start position:0%
big companies rely on them to store
hundreds<00:00:05.520><c> of</c><00:00:05.680><c> petabytes</c><00:00:06.160><c> of</c><00:00:06.319><c> data</c><00:00:06.879><c> and</c><00:00:07.040><c> run</c>

00:00:07.269 --> 00:00:07.279 align:start position:0%
hundreds of petabytes of data and run
 

00:00:07.279 --> 00:00:09.750 align:start position:0%
hundreds of petabytes of data and run
millions<00:00:07.680><c> of</c><00:00:07.759><c> queries</c><00:00:08.240><c> per</c><00:00:08.480><c> second</c><00:00:09.200><c> but</c><00:00:09.440><c> what</c>

00:00:09.750 --> 00:00:09.760 align:start position:0%
millions of queries per second but what
 

00:00:09.760 --> 00:00:12.870 align:start position:0%
millions of queries per second but what
is<00:00:10.080><c> a</c><00:00:10.240><c> nosql</c><00:00:10.880><c> database</c><00:00:11.759><c> how</c><00:00:11.920><c> does</c><00:00:12.160><c> it</c><00:00:12.240><c> work</c><00:00:12.719><c> and</c>

00:00:12.870 --> 00:00:12.880 align:start position:0%
is a nosql database how does it work and
 

00:00:12.880 --> 00:00:14.870 align:start position:0%
is a nosql database how does it work and
why<00:00:13.120><c> does</c><00:00:13.360><c> it</c><00:00:13.519><c> scale</c><00:00:13.920><c> so</c><00:00:14.080><c> much</c><00:00:14.400><c> better</c><00:00:14.719><c> than</c>

00:00:14.870 --> 00:00:14.880 align:start position:0%
why does it scale so much better than
 

00:00:14.880 --> 00:00:17.349 align:start position:0%
why does it scale so much better than
traditional<00:00:15.440><c> relational</c><00:00:16.000><c> databases</c><00:00:17.119><c> let's</c>

00:00:17.349 --> 00:00:17.359 align:start position:0%
traditional relational databases let's
 

00:00:17.359 --> 00:00:19.189 align:start position:0%
traditional relational databases let's
start<00:00:17.600><c> by</c><00:00:17.840><c> quickly</c><00:00:18.240><c> explaining</c><00:00:18.720><c> the</c><00:00:18.880><c> problem</c>

00:00:19.189 --> 00:00:19.199 align:start position:0%
start by quickly explaining the problem
 

00:00:19.199 --> 00:00:21.830 align:start position:0%
start by quickly explaining the problem
with<00:00:19.439><c> relational</c><00:00:20.000><c> databases</c><00:00:20.800><c> like</c><00:00:21.039><c> mysql</c>

00:00:21.830 --> 00:00:21.840 align:start position:0%
with relational databases like mysql
 

00:00:21.840 --> 00:00:24.950 align:start position:0%
with relational databases like mysql
mariadb<00:00:22.800><c> sql</c><00:00:23.199><c> server</c><00:00:23.680><c> and</c><00:00:23.840><c> alike</c>

00:00:24.950 --> 00:00:24.960 align:start position:0%
mariadb sql server and alike
 

00:00:24.960 --> 00:00:26.950 align:start position:0%
mariadb sql server and alike
these<00:00:25.119><c> are</c><00:00:25.279><c> built</c><00:00:25.519><c> to</c><00:00:25.680><c> store</c><00:00:26.000><c> relational</c><00:00:26.640><c> data</c>

00:00:26.950 --> 00:00:26.960 align:start position:0%
these are built to store relational data
 

00:00:26.960 --> 00:00:29.349 align:start position:0%
these are built to store relational data
as<00:00:27.119><c> efficiently</c><00:00:27.840><c> as</c><00:00:28.080><c> possible</c><00:00:28.880><c> you</c><00:00:29.039><c> can</c><00:00:29.199><c> have</c>

00:00:29.349 --> 00:00:29.359 align:start position:0%
as efficiently as possible you can have
 

00:00:29.359 --> 00:00:31.269 align:start position:0%
as efficiently as possible you can have
a<00:00:29.519><c> table</c><00:00:29.760><c> for</c><00:00:30.080><c> customers</c><00:00:30.640><c> orders</c><00:00:31.039><c> and</c>

00:00:31.269 --> 00:00:31.279 align:start position:0%
a table for customers orders and
 

00:00:31.279 --> 00:00:33.910 align:start position:0%
a table for customers orders and
products<00:00:32.000><c> linking</c><00:00:32.320><c> them</c><00:00:32.559><c> together</c><00:00:33.040><c> logically</c>

00:00:33.910 --> 00:00:33.920 align:start position:0%
products linking them together logically
 

00:00:33.920 --> 00:00:35.990 align:start position:0%
products linking them together logically
customers<00:00:34.480><c> place</c><00:00:34.800><c> orders</c><00:00:35.360><c> and</c><00:00:35.600><c> orders</c>

00:00:35.990 --> 00:00:36.000 align:start position:0%
customers place orders and orders
 

00:00:36.000 --> 00:00:37.750 align:start position:0%
customers place orders and orders
contain<00:00:36.559><c> products</c>

00:00:37.750 --> 00:00:37.760 align:start position:0%
contain products
 

00:00:37.760 --> 00:00:39.990 align:start position:0%
contain products
this<00:00:38.160><c> tight</c><00:00:38.480><c> organization</c><00:00:39.280><c> is</c><00:00:39.520><c> great</c><00:00:39.760><c> for</c>

00:00:39.990 --> 00:00:40.000 align:start position:0%
this tight organization is great for
 

00:00:40.000 --> 00:00:41.990 align:start position:0%
this tight organization is great for
managing<00:00:40.399><c> your</c><00:00:40.640><c> data</c><00:00:41.200><c> but</c><00:00:41.360><c> it</c><00:00:41.440><c> comes</c><00:00:41.760><c> at</c><00:00:41.920><c> a</c>

00:00:41.990 --> 00:00:42.000 align:start position:0%
managing your data but it comes at a
 

00:00:42.000 --> 00:00:44.869 align:start position:0%
managing your data but it comes at a
cost<00:00:42.879><c> relational</c><00:00:43.520><c> databases</c><00:00:44.320><c> have</c><00:00:44.480><c> a</c><00:00:44.559><c> hard</c>

00:00:44.869 --> 00:00:44.879 align:start position:0%
cost relational databases have a hard
 

00:00:44.879 --> 00:00:47.029 align:start position:0%
cost relational databases have a hard
time<00:00:45.200><c> scaling</c><00:00:45.920><c> they</c><00:00:46.079><c> have</c><00:00:46.239><c> to</c><00:00:46.399><c> maintain</c><00:00:46.800><c> these</c>

00:00:47.029 --> 00:00:47.039 align:start position:0%
time scaling they have to maintain these
 

00:00:47.039 --> 00:00:49.190 align:start position:0%
time scaling they have to maintain these
relationships<00:00:48.079><c> and</c><00:00:48.160><c> that's</c><00:00:48.399><c> an</c><00:00:48.559><c> intensive</c>

00:00:49.190 --> 00:00:49.200 align:start position:0%
relationships and that's an intensive
 

00:00:49.200 --> 00:00:51.750 align:start position:0%
relationships and that's an intensive
process<00:00:50.000><c> requiring</c><00:00:50.559><c> a</c><00:00:50.719><c> lot</c><00:00:50.879><c> of</c><00:00:51.039><c> memory</c><00:00:51.520><c> and</c>

00:00:51.750 --> 00:00:51.760 align:start position:0%
process requiring a lot of memory and
 

00:00:51.760 --> 00:00:54.389 align:start position:0%
process requiring a lot of memory and
compute<00:00:52.239><c> power</c><00:00:53.039><c> so</c><00:00:53.360><c> for</c><00:00:53.520><c> a</c><00:00:53.680><c> while</c><00:00:54.079><c> you</c><00:00:54.239><c> can</c>

00:00:54.389 --> 00:00:54.399 align:start position:0%
compute power so for a while you can
 

00:00:54.399 --> 00:00:56.630 align:start position:0%
compute power so for a while you can
keep<00:00:54.800><c> upgrading</c><00:00:55.280><c> your</c><00:00:55.440><c> database</c><00:00:55.920><c> server</c><00:00:56.480><c> but</c>

00:00:56.630 --> 00:00:56.640 align:start position:0%
keep upgrading your database server but
 

00:00:56.640 --> 00:00:58.869 align:start position:0%
keep upgrading your database server but
at<00:00:56.800><c> some</c><00:00:57.120><c> point</c><00:00:57.440><c> it</c><00:00:57.680><c> won't</c><00:00:57.920><c> be</c><00:00:58.079><c> able</c><00:00:58.320><c> to</c><00:00:58.559><c> handle</c>

00:00:58.869 --> 00:00:58.879 align:start position:0%
at some point it won't be able to handle
 

00:00:58.879 --> 00:00:59.990 align:start position:0%
at some point it won't be able to handle
the<00:00:59.039><c> load</c>

00:00:59.990 --> 00:01:00.000 align:start position:0%
the load
 

00:01:00.000 --> 00:01:01.670 align:start position:0%
the load
in<00:01:00.160><c> technical</c><00:01:00.640><c> terms</c><00:01:01.039><c> we</c><00:01:01.280><c> say</c><00:01:01.520><c> that</c>

00:01:01.670 --> 00:01:01.680 align:start position:0%
in technical terms we say that
 

00:01:01.680 --> 00:01:03.510 align:start position:0%
in technical terms we say that
relational<00:01:02.239><c> databases</c><00:01:02.879><c> can</c><00:01:03.120><c> scale</c>

00:01:03.510 --> 00:01:03.520 align:start position:0%
relational databases can scale
 

00:01:03.520 --> 00:01:06.230 align:start position:0%
relational databases can scale
vertically<00:01:04.239><c> but</c><00:01:04.479><c> not</c><00:01:04.720><c> horizontally</c><00:01:05.840><c> whereas</c>

00:01:06.230 --> 00:01:06.240 align:start position:0%
vertically but not horizontally whereas
 

00:01:06.240 --> 00:01:08.310 align:start position:0%
vertically but not horizontally whereas
nosql<00:01:06.880><c> databases</c><00:01:07.520><c> can</c><00:01:07.680><c> scale</c><00:01:08.000><c> both</c>

00:01:08.310 --> 00:01:08.320 align:start position:0%
nosql databases can scale both
 

00:01:08.320 --> 00:01:10.870 align:start position:0%
nosql databases can scale both
vertically<00:01:09.040><c> and</c><00:01:09.280><c> horizontally</c><00:01:10.479><c> you</c><00:01:10.640><c> can</c>

00:01:10.870 --> 00:01:10.880 align:start position:0%
vertically and horizontally you can
 

00:01:10.880 --> 00:01:13.109 align:start position:0%
vertically and horizontally you can
compare<00:01:11.280><c> this</c><00:01:11.439><c> to</c><00:01:11.680><c> a</c><00:01:11.920><c> building</c><00:01:12.720><c> vertical</c>

00:01:13.109 --> 00:01:13.119 align:start position:0%
compare this to a building vertical
 

00:01:13.119 --> 00:01:15.190 align:start position:0%
compare this to a building vertical
scaling<00:01:13.600><c> means</c><00:01:13.920><c> adding</c><00:01:14.320><c> more</c><00:01:14.560><c> floors</c><00:01:14.880><c> to</c><00:01:15.040><c> an</c>

00:01:15.190 --> 00:01:15.200 align:start position:0%
scaling means adding more floors to an
 

00:01:15.200 --> 00:01:17.749 align:start position:0%
scaling means adding more floors to an
existing<00:01:15.680><c> building</c><00:01:16.240><c> why</c><00:01:16.479><c> horizontal</c><00:01:17.200><c> scaling</c>

00:01:17.749 --> 00:01:17.759 align:start position:0%
existing building why horizontal scaling
 

00:01:17.759 --> 00:01:19.990 align:start position:0%
existing building why horizontal scaling
means<00:01:18.159><c> adding</c><00:01:18.479><c> more</c><00:01:18.799><c> buildings</c>

00:01:19.990 --> 00:01:20.000 align:start position:0%
means adding more buildings
 

00:01:20.000 --> 00:01:22.149 align:start position:0%
means adding more buildings
you<00:01:20.240><c> intuitively</c><00:01:20.880><c> understand</c><00:01:21.439><c> that</c><00:01:21.759><c> vertical</c>

00:01:22.149 --> 00:01:22.159 align:start position:0%
you intuitively understand that vertical
 

00:01:22.159 --> 00:01:24.310 align:start position:0%
you intuitively understand that vertical
scaling<00:01:22.640><c> is</c><00:01:22.799><c> only</c><00:01:23.119><c> possible</c><00:01:23.600><c> to</c><00:01:23.840><c> a</c><00:01:23.920><c> certain</c>

00:01:24.310 --> 00:01:24.320 align:start position:0%
scaling is only possible to a certain
 

00:01:24.320 --> 00:01:27.109 align:start position:0%
scaling is only possible to a certain
extent<00:01:25.119><c> while</c><00:01:25.360><c> horizontal</c><00:01:26.080><c> scaling</c><00:01:26.720><c> is</c><00:01:26.880><c> much</c>

00:01:27.109 --> 00:01:27.119 align:start position:0%
extent while horizontal scaling is much
 

00:01:27.119 --> 00:01:28.630 align:start position:0%
extent while horizontal scaling is much
more<00:01:27.360><c> powerful</c>

00:01:28.630 --> 00:01:28.640 align:start position:0%
more powerful
 

00:01:28.640 --> 00:01:31.990 align:start position:0%
more powerful
now<00:01:28.880><c> why</c><00:01:29.119><c> do</c><00:01:29.280><c> nosql</c><00:01:29.840><c> databases</c><00:01:30.400><c> scale</c><00:01:30.799><c> so</c><00:01:31.119><c> well</c>

00:01:31.990 --> 00:01:32.000 align:start position:0%
now why do nosql databases scale so well
 

00:01:32.000 --> 00:01:33.910 align:start position:0%
now why do nosql databases scale so well
first<00:01:32.240><c> of</c><00:01:32.400><c> all</c><00:01:32.640><c> they</c><00:01:32.880><c> do</c><00:01:33.119><c> away</c><00:01:33.439><c> with</c><00:01:33.600><c> these</c>

00:01:33.910 --> 00:01:33.920 align:start position:0%
first of all they do away with these
 

00:01:33.920 --> 00:01:37.270 align:start position:0%
first of all they do away with these
costly<00:01:34.400><c> relationships</c><00:01:35.600><c> in</c><00:01:35.759><c> nosql</c><00:01:36.720><c> every</c><00:01:37.040><c> item</c>

00:01:37.270 --> 00:01:37.280 align:start position:0%
costly relationships in nosql every item
 

00:01:37.280 --> 00:01:39.749 align:start position:0%
costly relationships in nosql every item
in<00:01:37.360><c> the</c><00:01:37.439><c> database</c><00:01:38.159><c> stands</c><00:01:38.560><c> on</c><00:01:38.720><c> its</c><00:01:38.960><c> own</c>

00:01:39.749 --> 00:01:39.759 align:start position:0%
in the database stands on its own
 

00:01:39.759 --> 00:01:41.910 align:start position:0%
in the database stands on its own
this<00:01:40.079><c> simple</c><00:01:40.479><c> modification</c><00:01:41.360><c> means</c><00:01:41.600><c> that</c><00:01:41.759><c> they</c>

00:01:41.910 --> 00:01:41.920 align:start position:0%
this simple modification means that they
 

00:01:41.920 --> 00:01:44.630 align:start position:0%
this simple modification means that they
are<00:01:42.079><c> essentially</c><00:01:42.720><c> key</c><00:01:42.960><c> value</c><00:01:43.360><c> stores</c><00:01:44.320><c> each</c>

00:01:44.630 --> 00:01:44.640 align:start position:0%
are essentially key value stores each
 

00:01:44.640 --> 00:01:47.350 align:start position:0%
are essentially key value stores each
item<00:01:44.880><c> in</c><00:01:45.040><c> the</c><00:01:45.119><c> database</c><00:01:45.759><c> only</c><00:01:46.079><c> has</c><00:01:46.399><c> two</c><00:01:46.640><c> fields</c>

00:01:47.350 --> 00:01:47.360 align:start position:0%
item in the database only has two fields
 

00:01:47.360 --> 00:01:50.630 align:start position:0%
item in the database only has two fields
a<00:01:47.600><c> unique</c><00:01:48.159><c> key</c><00:01:48.720><c> and</c><00:01:48.880><c> a</c><00:01:48.960><c> value</c><00:01:49.920><c> for</c><00:01:50.159><c> instance</c>

00:01:50.630 --> 00:01:50.640 align:start position:0%
a unique key and a value for instance
 

00:01:50.640 --> 00:01:51.990 align:start position:0%
a unique key and a value for instance
when<00:01:50.880><c> you</c><00:01:50.960><c> want</c><00:01:51.119><c> to</c><00:01:51.280><c> store</c><00:01:51.600><c> product</c>

00:01:51.990 --> 00:01:52.000 align:start position:0%
when you want to store product
 

00:01:52.000 --> 00:01:53.910 align:start position:0%
when you want to store product
information<00:01:52.720><c> you</c><00:01:52.880><c> can</c><00:01:53.040><c> use</c><00:01:53.200><c> the</c><00:01:53.439><c> product's</c>

00:01:53.910 --> 00:01:53.920 align:start position:0%
information you can use the product's
 

00:01:53.920 --> 00:01:56.630 align:start position:0%
information you can use the product's
barcode<00:01:54.560><c> as</c><00:01:54.799><c> the</c><00:01:54.960><c> key</c><00:01:55.520><c> and</c><00:01:55.600><c> the</c><00:01:55.759><c> product</c><00:01:56.240><c> name</c>

00:01:56.630 --> 00:01:56.640 align:start position:0%
barcode as the key and the product name
 

00:01:56.640 --> 00:01:58.069 align:start position:0%
barcode as the key and the product name
as<00:01:56.880><c> the</c><00:01:57.040><c> value</c>

00:01:58.069 --> 00:01:58.079 align:start position:0%
as the value
 

00:01:58.079 --> 00:02:00.149 align:start position:0%
as the value
this<00:01:58.320><c> seems</c><00:01:58.640><c> restrictive</c><00:01:59.280><c> but</c><00:01:59.520><c> the</c><00:01:59.680><c> value</c><00:02:00.000><c> can</c>

00:02:00.149 --> 00:02:00.159 align:start position:0%
this seems restrictive but the value can
 

00:02:00.159 --> 00:02:01.910 align:start position:0%
this seems restrictive but the value can
be<00:02:00.320><c> something</c><00:02:00.640><c> like</c><00:02:00.960><c> a</c><00:02:01.040><c> json</c><00:02:01.439><c> document</c>

00:02:01.910 --> 00:02:01.920 align:start position:0%
be something like a json document
 

00:02:01.920 --> 00:02:04.230 align:start position:0%
be something like a json document
containing<00:02:02.399><c> more</c><00:02:02.640><c> data</c><00:02:03.200><c> like</c><00:02:03.360><c> the</c><00:02:03.600><c> price</c><00:02:04.079><c> and</c>

00:02:04.230 --> 00:02:04.240 align:start position:0%
containing more data like the price and
 

00:02:04.240 --> 00:02:05.670 align:start position:0%
containing more data like the price and
description

00:02:05.670 --> 00:02:05.680 align:start position:0%
description
 

00:02:05.680 --> 00:02:07.910 align:start position:0%
description
this<00:02:05.920><c> simpler</c><00:02:06.399><c> design</c><00:02:06.880><c> is</c><00:02:07.040><c> why</c><00:02:07.280><c> nosql</c>

00:02:07.910 --> 00:02:07.920 align:start position:0%
this simpler design is why nosql
 

00:02:07.920 --> 00:02:10.550 align:start position:0%
this simpler design is why nosql
databases<00:02:08.640><c> scale</c><00:02:09.119><c> better</c><00:02:09.920><c> if</c><00:02:10.160><c> a</c><00:02:10.239><c> single</c>

00:02:10.550 --> 00:02:10.560 align:start position:0%
databases scale better if a single
 

00:02:10.560 --> 00:02:12.550 align:start position:0%
databases scale better if a single
database<00:02:10.959><c> server</c><00:02:11.440><c> is</c><00:02:11.520><c> not</c><00:02:11.760><c> enough</c><00:02:12.080><c> to</c><00:02:12.239><c> store</c>

00:02:12.550 --> 00:02:12.560 align:start position:0%
database server is not enough to store
 

00:02:12.560 --> 00:02:14.869 align:start position:0%
database server is not enough to store
all<00:02:12.720><c> your</c><00:02:12.879><c> data</c><00:02:13.280><c> or</c><00:02:13.520><c> handle</c><00:02:13.920><c> all</c><00:02:14.000><c> the</c><00:02:14.239><c> queries</c>

00:02:14.869 --> 00:02:14.879 align:start position:0%
all your data or handle all the queries
 

00:02:14.879 --> 00:02:17.110 align:start position:0%
all your data or handle all the queries
you<00:02:15.040><c> can</c><00:02:15.200><c> split</c><00:02:15.520><c> the</c><00:02:15.680><c> workload</c><00:02:16.239><c> across</c><00:02:16.720><c> two</c><00:02:16.959><c> or</c>

00:02:17.110 --> 00:02:17.120 align:start position:0%
you can split the workload across two or
 

00:02:17.120 --> 00:02:19.589 align:start position:0%
you can split the workload across two or
more<00:02:17.520><c> servers</c><00:02:18.480><c> each</c><00:02:18.800><c> server</c><00:02:19.120><c> will</c><00:02:19.280><c> then</c><00:02:19.440><c> be</c>

00:02:19.589 --> 00:02:19.599 align:start position:0%
more servers each server will then be
 

00:02:19.599 --> 00:02:21.910 align:start position:0%
more servers each server will then be
responsible<00:02:20.239><c> for</c><00:02:20.480><c> only</c><00:02:20.959><c> a</c><00:02:21.200><c> part</c><00:02:21.520><c> of</c><00:02:21.680><c> your</c>

00:02:21.910 --> 00:02:21.920 align:start position:0%
responsible for only a part of your
 

00:02:21.920 --> 00:02:25.030 align:start position:0%
responsible for only a part of your
database<00:02:22.879><c> to</c><00:02:23.040><c> give</c><00:02:23.200><c> an</c><00:02:23.360><c> example</c><00:02:24.160><c> apple</c><00:02:24.560><c> runs</c><00:02:24.879><c> a</c>

00:02:25.030 --> 00:02:25.040 align:start position:0%
database to give an example apple runs a
 

00:02:25.040 --> 00:02:28.390 align:start position:0%
database to give an example apple runs a
nosql<00:02:25.760><c> database</c><00:02:26.239><c> that</c><00:02:26.480><c> consists</c><00:02:27.040><c> out</c><00:02:27.200><c> of</c><00:02:27.440><c> 75</c>

00:02:28.390 --> 00:02:28.400 align:start position:0%
nosql database that consists out of 75
 

00:02:28.400 --> 00:02:29.990 align:start position:0%
nosql database that consists out of 75
000<00:02:28.800><c> servers</c>

00:02:29.990 --> 00:02:30.000 align:start position:0%
000 servers
 

00:02:30.000 --> 00:02:32.070 align:start position:0%
000 servers
in<00:02:30.160><c> nosql</c><00:02:30.800><c> terms</c><00:02:31.280><c> these</c><00:02:31.519><c> parts</c><00:02:31.840><c> of</c><00:02:31.920><c> your</c>

00:02:32.070 --> 00:02:32.080 align:start position:0%
in nosql terms these parts of your
 

00:02:32.080 --> 00:02:34.470 align:start position:0%
in nosql terms these parts of your
database<00:02:32.720><c> are</c><00:02:32.879><c> called</c><00:02:33.280><c> partitions</c><00:02:34.239><c> and</c><00:02:34.400><c> it</c>

00:02:34.470 --> 00:02:34.480 align:start position:0%
database are called partitions and it
 

00:02:34.480 --> 00:02:36.710 align:start position:0%
database are called partitions and it
brings<00:02:34.720><c> up</c><00:02:34.879><c> a</c><00:02:35.040><c> question</c><00:02:35.680><c> if</c><00:02:35.840><c> your</c><00:02:36.080><c> database</c><00:02:36.640><c> is</c>

00:02:36.710 --> 00:02:36.720 align:start position:0%
brings up a question if your database is
 

00:02:36.720 --> 00:02:38.790 align:start position:0%
brings up a question if your database is
split<00:02:37.120><c> across</c><00:02:37.519><c> potentially</c><00:02:38.239><c> thousands</c><00:02:38.640><c> of</c>

00:02:38.790 --> 00:02:38.800 align:start position:0%
split across potentially thousands of
 

00:02:38.800 --> 00:02:41.589 align:start position:0%
split across potentially thousands of
partitions<00:02:39.840><c> how</c><00:02:40.000><c> do</c><00:02:40.160><c> you</c><00:02:40.400><c> know</c><00:02:40.720><c> where</c><00:02:41.040><c> an</c><00:02:41.200><c> item</c>

00:02:41.589 --> 00:02:41.599 align:start position:0%
partitions how do you know where an item
 

00:02:41.599 --> 00:02:42.790 align:start position:0%
partitions how do you know where an item
is<00:02:41.760><c> stored</c>

00:02:42.790 --> 00:02:42.800 align:start position:0%
is stored
 

00:02:42.800 --> 00:02:45.190 align:start position:0%
is stored
that's<00:02:43.120><c> where</c><00:02:43.280><c> the</c><00:02:43.519><c> primary</c><00:02:44.000><c> key</c><00:02:44.239><c> comes</c><00:02:44.640><c> in</c>

00:02:45.190 --> 00:02:45.200 align:start position:0%
that's where the primary key comes in
 

00:02:45.200 --> 00:02:47.990 align:start position:0%
that's where the primary key comes in
remember<00:02:45.760><c> nosql</c><00:02:46.400><c> databases</c><00:02:47.120><c> are</c><00:02:47.360><c> key</c><00:02:47.599><c> value</c>

00:02:47.990 --> 00:02:48.000 align:start position:0%
remember nosql databases are key value
 

00:02:48.000 --> 00:02:50.150 align:start position:0%
remember nosql databases are key value
stores<00:02:48.560><c> and</c><00:02:48.640><c> the</c><00:02:48.879><c> key</c><00:02:49.200><c> determines</c><00:02:49.760><c> on</c><00:02:49.920><c> what</c>

00:02:50.150 --> 00:02:50.160 align:start position:0%
stores and the key determines on what
 

00:02:50.160 --> 00:02:52.550 align:start position:0%
stores and the key determines on what
partition<00:02:50.720><c> an</c><00:02:50.879><c> item</c><00:02:51.200><c> will</c><00:02:51.360><c> be</c><00:02:51.519><c> stored</c>

00:02:52.550 --> 00:02:52.560 align:start position:0%
partition an item will be stored
 

00:02:52.560 --> 00:02:55.509 align:start position:0%
partition an item will be stored
behind<00:02:52.879><c> the</c><00:02:53.040><c> scenes</c><00:02:53.440><c> nosql</c><00:02:54.080><c> databases</c><00:02:54.959><c> use</c><00:02:55.280><c> a</c>

00:02:55.509 --> 00:02:55.519 align:start position:0%
behind the scenes nosql databases use a
 

00:02:55.519 --> 00:02:57.830 align:start position:0%
behind the scenes nosql databases use a
hash<00:02:55.840><c> function</c><00:02:56.400><c> to</c><00:02:56.640><c> convert</c><00:02:57.120><c> each</c><00:02:57.360><c> item's</c>

00:02:57.830 --> 00:02:57.840 align:start position:0%
hash function to convert each item's
 

00:02:57.840 --> 00:03:00.390 align:start position:0%
hash function to convert each item's
primary<00:02:58.319><c> key</c><00:02:58.879><c> into</c><00:02:59.280><c> a</c><00:02:59.440><c> number</c><00:02:59.760><c> that</c><00:03:00.000><c> falls</c>

00:03:00.390 --> 00:03:00.400 align:start position:0%
primary key into a number that falls
 

00:03:00.400 --> 00:03:03.270 align:start position:0%
primary key into a number that falls
into<00:03:00.720><c> a</c><00:03:00.879><c> fixed</c><00:03:01.280><c> range</c><00:03:01.920><c> say</c><00:03:02.159><c> between</c><00:03:02.720><c> zero</c><00:03:03.120><c> and</c>

00:03:03.270 --> 00:03:03.280 align:start position:0%
into a fixed range say between zero and
 

00:03:03.280 --> 00:03:04.390 align:start position:0%
into a fixed range say between zero and
100

00:03:04.390 --> 00:03:04.400 align:start position:0%
100
 

00:03:04.400 --> 00:03:06.869 align:start position:0%
100
this<00:03:04.800><c> hash</c><00:03:05.120><c> value</c><00:03:05.599><c> and</c><00:03:05.680><c> the</c><00:03:05.840><c> range</c><00:03:06.480><c> is</c><00:03:06.640><c> then</c>

00:03:06.869 --> 00:03:06.879 align:start position:0%
this hash value and the range is then
 

00:03:06.879 --> 00:03:09.750 align:start position:0%
this hash value and the range is then
used<00:03:07.120><c> to</c><00:03:07.200><c> determine</c><00:03:07.920><c> where</c><00:03:08.159><c> to</c><00:03:08.319><c> store</c><00:03:08.640><c> an</c><00:03:08.879><c> item</c>

00:03:09.750 --> 00:03:09.760 align:start position:0%
used to determine where to store an item
 

00:03:09.760 --> 00:03:11.670 align:start position:0%
used to determine where to store an item
if<00:03:09.920><c> your</c><00:03:10.080><c> database</c><00:03:10.560><c> is</c><00:03:10.720><c> small</c><00:03:11.040><c> enough</c><00:03:11.360><c> or</c>

00:03:11.670 --> 00:03:11.680 align:start position:0%
if your database is small enough or
 

00:03:11.680 --> 00:03:13.990 align:start position:0%
if your database is small enough or
doesn't<00:03:12.000><c> get</c><00:03:12.159><c> many</c><00:03:12.480><c> requests</c><00:03:13.360><c> you</c><00:03:13.519><c> can</c><00:03:13.680><c> put</c>

00:03:13.990 --> 00:03:14.000 align:start position:0%
doesn't get many requests you can put
 

00:03:14.000 --> 00:03:16.550 align:start position:0%
doesn't get many requests you can put
everything<00:03:14.560><c> on</c><00:03:14.720><c> a</c><00:03:14.800><c> single</c><00:03:15.280><c> server</c><00:03:16.159><c> this</c><00:03:16.400><c> one</c>

00:03:16.550 --> 00:03:16.560 align:start position:0%
everything on a single server this one
 

00:03:16.560 --> 00:03:18.710 align:start position:0%
everything on a single server this one
will<00:03:16.720><c> then</c><00:03:16.959><c> be</c><00:03:17.120><c> responsible</c><00:03:17.760><c> for</c><00:03:17.920><c> the</c><00:03:18.159><c> entire</c>

00:03:18.710 --> 00:03:18.720 align:start position:0%
will then be responsible for the entire
 

00:03:18.720 --> 00:03:19.750 align:start position:0%
will then be responsible for the entire
range

00:03:19.750 --> 00:03:19.760 align:start position:0%
range
 

00:03:19.760 --> 00:03:21.750 align:start position:0%
range
if<00:03:19.920><c> that</c><00:03:20.159><c> server</c><00:03:20.480><c> becomes</c><00:03:20.879><c> overloaded</c><00:03:21.599><c> you</c>

00:03:21.750 --> 00:03:21.760 align:start position:0%
if that server becomes overloaded you
 

00:03:21.760 --> 00:03:23.830 align:start position:0%
if that server becomes overloaded you
can<00:03:22.000><c> add</c><00:03:22.239><c> a</c><00:03:22.480><c> secondary</c><00:03:23.040><c> server</c><00:03:23.440><c> which</c><00:03:23.680><c> means</c>

00:03:23.830 --> 00:03:23.840 align:start position:0%
can add a secondary server which means
 

00:03:23.840 --> 00:03:26.309 align:start position:0%
can add a secondary server which means
that<00:03:24.000><c> the</c><00:03:24.159><c> range</c><00:03:24.400><c> will</c><00:03:24.560><c> be</c><00:03:24.720><c> split</c><00:03:25.120><c> in</c><00:03:25.360><c> half</c>

00:03:26.309 --> 00:03:26.319 align:start position:0%
that the range will be split in half
 

00:03:26.319 --> 00:03:28.309 align:start position:0%
that the range will be split in half
server<00:03:26.640><c> 1</c><00:03:26.879><c> will</c><00:03:27.040><c> be</c><00:03:27.200><c> responsible</c><00:03:27.840><c> for</c><00:03:28.080><c> all</c>

00:03:28.309 --> 00:03:28.319 align:start position:0%
server 1 will be responsible for all
 

00:03:28.319 --> 00:03:31.350 align:start position:0%
server 1 will be responsible for all
items<00:03:28.720><c> with</c><00:03:28.959><c> a</c><00:03:29.120><c> hash</c><00:03:29.440><c> between</c><00:03:29.840><c> 0</c><00:03:30.239><c> and</c><00:03:30.400><c> 50</c><00:03:31.120><c> while</c>

00:03:31.350 --> 00:03:31.360 align:start position:0%
items with a hash between 0 and 50 while
 

00:03:31.360 --> 00:03:33.589 align:start position:0%
items with a hash between 0 and 50 while
server<00:03:31.760><c> 2</c><00:03:32.239><c> will</c><00:03:32.400><c> store</c><00:03:32.799><c> everything</c><00:03:33.200><c> between</c>

00:03:33.589 --> 00:03:33.599 align:start position:0%
server 2 will store everything between
 

00:03:33.599 --> 00:03:35.589 align:start position:0%
server 2 will store everything between
50<00:03:34.080><c> and</c><00:03:34.319><c> 100.</c>

00:03:35.589 --> 00:03:35.599 align:start position:0%
50 and 100.
 

00:03:35.599 --> 00:03:37.430 align:start position:0%
50 and 100.
theoretically<00:03:36.319><c> you've</c><00:03:36.560><c> now</c><00:03:36.879><c> doubled</c><00:03:37.280><c> your</c>

00:03:37.430 --> 00:03:37.440 align:start position:0%
theoretically you've now doubled your
 

00:03:37.440 --> 00:03:39.750 align:start position:0%
theoretically you've now doubled your
database<00:03:38.000><c> capacity</c><00:03:38.959><c> both</c><00:03:39.280><c> in</c><00:03:39.360><c> terms</c><00:03:39.680><c> of</c>

00:03:39.750 --> 00:03:39.760 align:start position:0%
database capacity both in terms of
 

00:03:39.760 --> 00:03:41.910 align:start position:0%
database capacity both in terms of
storage<00:03:40.400><c> and</c><00:03:40.640><c> in</c><00:03:40.720><c> the</c><00:03:40.879><c> number</c><00:03:41.120><c> of</c><00:03:41.280><c> queries</c><00:03:41.760><c> you</c>

00:03:41.910 --> 00:03:41.920 align:start position:0%
storage and in the number of queries you
 

00:03:41.920 --> 00:03:43.509 align:start position:0%
storage and in the number of queries you
can<00:03:42.159><c> execute</c>

00:03:43.509 --> 00:03:43.519 align:start position:0%
can execute
 

00:03:43.519 --> 00:03:46.229 align:start position:0%
can execute
this<00:03:43.840><c> range</c><00:03:44.239><c> is</c><00:03:44.400><c> also</c><00:03:44.720><c> called</c><00:03:45.040><c> a</c><00:03:45.280><c> key</c><00:03:45.519><c> space</c>

00:03:46.229 --> 00:03:46.239 align:start position:0%
this range is also called a key space
 

00:03:46.239 --> 00:03:48.149 align:start position:0%
this range is also called a key space
it's<00:03:46.400><c> a</c><00:03:46.560><c> simple</c><00:03:46.879><c> system</c><00:03:47.280><c> that</c><00:03:47.519><c> solves</c><00:03:47.840><c> two</c>

00:03:48.149 --> 00:03:48.159 align:start position:0%
it's a simple system that solves two
 

00:03:48.159 --> 00:03:50.550 align:start position:0%
it's a simple system that solves two
problems<00:03:48.959><c> where</c><00:03:49.200><c> to</c><00:03:49.360><c> store</c><00:03:49.680><c> new</c><00:03:49.920><c> items</c><00:03:50.400><c> and</c>

00:03:50.550 --> 00:03:50.560 align:start position:0%
problems where to store new items and
 

00:03:50.560 --> 00:03:52.789 align:start position:0%
problems where to store new items and
where<00:03:50.799><c> to</c><00:03:50.959><c> find</c><00:03:51.280><c> existing</c><00:03:51.760><c> ones</c>

00:03:52.789 --> 00:03:52.799 align:start position:0%
where to find existing ones
 

00:03:52.799 --> 00:03:55.030 align:start position:0%
where to find existing ones
all<00:03:52.959><c> you</c><00:03:53.120><c> have</c><00:03:53.280><c> to</c><00:03:53.439><c> do</c><00:03:53.680><c> is</c><00:03:53.920><c> calculate</c><00:03:54.480><c> the</c><00:03:54.720><c> hash</c>

00:03:55.030 --> 00:03:55.040 align:start position:0%
all you have to do is calculate the hash
 

00:03:55.040 --> 00:03:57.509 align:start position:0%
all you have to do is calculate the hash
of<00:03:55.200><c> an</c><00:03:55.360><c> item's</c><00:03:55.760><c> key</c><00:03:56.319><c> and</c><00:03:56.480><c> keep</c><00:03:56.720><c> track</c><00:03:57.040><c> of</c><00:03:57.280><c> which</c>

00:03:57.509 --> 00:03:57.519 align:start position:0%
of an item's key and keep track of which
 

00:03:57.519 --> 00:03:59.589 align:start position:0%
of an item's key and keep track of which
server<00:03:57.920><c> is</c><00:03:58.080><c> responsible</c><00:03:58.720><c> for</c><00:03:58.879><c> which</c><00:03:59.200><c> part</c><00:03:59.439><c> of</c>

00:03:59.589 --> 00:03:59.599 align:start position:0%
server is responsible for which part of
 

00:03:59.599 --> 00:04:00.869 align:start position:0%
server is responsible for which part of
the<00:03:59.680><c> key</c><00:03:59.920><c> space</c>

00:04:00.869 --> 00:04:00.879 align:start position:0%
the key space
 

00:04:00.879 --> 00:04:03.350 align:start position:0%
the key space
now<00:04:01.120><c> in</c><00:04:01.200><c> this</c><00:04:01.439><c> example</c><00:04:02.000><c> the</c><00:04:02.159><c> range</c><00:04:02.560><c> of</c><00:04:02.799><c> 0</c><00:04:03.120><c> to</c>

00:04:03.350 --> 00:04:03.360 align:start position:0%
now in this example the range of 0 to
 

00:04:03.360 --> 00:04:06.229 align:start position:0%
now in this example the range of 0 to
100<00:04:04.080><c> is</c><00:04:04.319><c> a</c><00:04:04.400><c> bit</c><00:04:04.640><c> small</c><00:04:05.360><c> it</c><00:04:05.519><c> would</c><00:04:05.760><c> only</c><00:04:06.000><c> allow</c>

00:04:06.229 --> 00:04:06.239 align:start position:0%
100 is a bit small it would only allow
 

00:04:06.239 --> 00:04:08.550 align:start position:0%
100 is a bit small it would only allow
you<00:04:06.400><c> to</c><00:04:06.560><c> split</c><00:04:06.879><c> up</c><00:04:06.959><c> your</c><00:04:07.120><c> database</c><00:04:07.680><c> into</c><00:04:08.000><c> 100</c>

00:04:08.550 --> 00:04:08.560 align:start position:0%
you to split up your database into 100
 

00:04:08.560 --> 00:04:10.229 align:start position:0%
you to split up your database into 100
pieces<00:04:09.040><c> at</c><00:04:09.280><c> most</c>

00:04:10.229 --> 00:04:10.239 align:start position:0%
pieces at most
 

00:04:10.239 --> 00:04:13.110 align:start position:0%
pieces at most
so<00:04:10.640><c> real</c><00:04:10.879><c> nosql</c><00:04:11.519><c> databases</c><00:04:12.239><c> have</c><00:04:12.480><c> much</c><00:04:12.799><c> bigger</c>

00:04:13.110 --> 00:04:13.120 align:start position:0%
so real nosql databases have much bigger
 

00:04:13.120 --> 00:04:15.750 align:start position:0%
so real nosql databases have much bigger
key<00:04:13.360><c> spaces</c><00:04:14.159><c> allowing</c><00:04:14.560><c> them</c><00:04:14.720><c> to</c><00:04:14.879><c> scale</c><00:04:15.360><c> almost</c>

00:04:15.750 --> 00:04:15.760 align:start position:0%
key spaces allowing them to scale almost
 

00:04:15.760 --> 00:04:18.469 align:start position:0%
key spaces allowing them to scale almost
without<00:04:16.239><c> any</c><00:04:16.479><c> restrictions</c>

00:04:18.469 --> 00:04:18.479 align:start position:0%
without any restrictions
 

00:04:18.479 --> 00:04:21.189 align:start position:0%
without any restrictions
besides<00:04:19.040><c> great</c><00:04:19.199><c> scalability</c><00:04:20.160><c> nosql</c><00:04:21.040><c> is</c>

00:04:21.189 --> 00:04:21.199 align:start position:0%
besides great scalability nosql is
 

00:04:21.199 --> 00:04:23.270 align:start position:0%
besides great scalability nosql is
schema-less<00:04:22.160><c> which</c><00:04:22.400><c> means</c><00:04:22.639><c> that</c><00:04:22.880><c> items</c><00:04:23.199><c> in</c>

00:04:23.270 --> 00:04:23.280 align:start position:0%
schema-less which means that items in
 

00:04:23.280 --> 00:04:25.430 align:start position:0%
schema-less which means that items in
the<00:04:23.440><c> database</c><00:04:24.080><c> don't</c><00:04:24.400><c> need</c><00:04:24.639><c> to</c><00:04:24.800><c> have</c><00:04:25.040><c> the</c><00:04:25.199><c> same</c>

00:04:25.430 --> 00:04:25.440 align:start position:0%
the database don't need to have the same
 

00:04:25.440 --> 00:04:26.469 align:start position:0%
the database don't need to have the same
structure

00:04:26.469 --> 00:04:26.479 align:start position:0%
structure
 

00:04:26.479 --> 00:04:29.030 align:start position:0%
structure
each<00:04:26.800><c> one</c><00:04:27.040><c> can</c><00:04:27.199><c> be</c><00:04:27.360><c> completely</c><00:04:28.000><c> different</c>

00:04:29.030 --> 00:04:29.040 align:start position:0%
each one can be completely different
 

00:04:29.040 --> 00:04:30.870 align:start position:0%
each one can be completely different
in<00:04:29.199><c> a</c><00:04:29.280><c> relational</c><00:04:29.759><c> database</c><00:04:30.400><c> you</c><00:04:30.639><c> have</c><00:04:30.800><c> to</c>

00:04:30.870 --> 00:04:30.880 align:start position:0%
in a relational database you have to
 

00:04:30.880 --> 00:04:32.870 align:start position:0%
in a relational database you have to
define<00:04:31.280><c> your</c><00:04:31.440><c> table</c><00:04:31.840><c> structure</c><00:04:32.560><c> and</c><00:04:32.639><c> then</c>

00:04:32.870 --> 00:04:32.880 align:start position:0%
define your table structure and then
 

00:04:32.880 --> 00:04:35.430 align:start position:0%
define your table structure and then
each<00:04:33.280><c> item</c><00:04:33.680><c> must</c><00:04:34.000><c> conform</c><00:04:34.400><c> to</c><00:04:34.639><c> it</c>

00:04:35.430 --> 00:04:35.440 align:start position:0%
each item must conform to it
 

00:04:35.440 --> 00:04:36.790 align:start position:0%
each item must conform to it
changing<00:04:35.759><c> the</c><00:04:35.919><c> structure</c><00:04:36.560><c> isn't</c>

00:04:36.790 --> 00:04:36.800 align:start position:0%
changing the structure isn't
 

00:04:36.800 --> 00:04:39.030 align:start position:0%
changing the structure isn't
straightforward<00:04:37.759><c> and</c><00:04:37.919><c> could</c><00:04:38.160><c> even</c><00:04:38.479><c> lead</c><00:04:38.800><c> to</c>

00:04:39.030 --> 00:04:39.040 align:start position:0%
straightforward and could even lead to
 

00:04:39.040 --> 00:04:40.310 align:start position:0%
straightforward and could even lead to
data<00:04:39.360><c> loss</c>

00:04:40.310 --> 00:04:40.320 align:start position:0%
data loss
 

00:04:40.320 --> 00:04:42.150 align:start position:0%
data loss
not<00:04:40.560><c> having</c><00:04:40.880><c> a</c><00:04:40.960><c> schema</c><00:04:41.440><c> can</c><00:04:41.600><c> be</c><00:04:41.759><c> a</c><00:04:41.919><c> big</c>

00:04:42.150 --> 00:04:42.160 align:start position:0%
not having a schema can be a big
 

00:04:42.160 --> 00:04:44.150 align:start position:0%
not having a schema can be a big
advantage<00:04:42.720><c> if</c><00:04:42.880><c> your</c><00:04:43.120><c> application</c><00:04:43.680><c> and</c><00:04:43.840><c> data</c>

00:04:44.150 --> 00:04:44.160 align:start position:0%
advantage if your application and data
 

00:04:44.160 --> 00:04:46.710 align:start position:0%
advantage if your application and data
structure<00:04:44.639><c> is</c><00:04:44.880><c> constantly</c><00:04:45.440><c> evolving</c>

00:04:46.710 --> 00:04:46.720 align:start position:0%
structure is constantly evolving
 

00:04:46.720 --> 00:04:48.870 align:start position:0%
structure is constantly evolving
now<00:04:46.960><c> at</c><00:04:47.120><c> this</c><00:04:47.280><c> point</c><00:04:47.600><c> it's</c><00:04:47.759><c> clear</c><00:04:48.080><c> that</c><00:04:48.320><c> nosql</c>

00:04:48.870 --> 00:04:48.880 align:start position:0%
now at this point it's clear that nosql
 

00:04:48.880 --> 00:04:51.189 align:start position:0%
now at this point it's clear that nosql
databases<00:04:49.600><c> have</c><00:04:49.840><c> certain</c><00:04:50.240><c> advantages</c><00:04:50.880><c> over</c>

00:04:51.189 --> 00:04:51.199 align:start position:0%
databases have certain advantages over
 

00:04:51.199 --> 00:04:53.350 align:start position:0%
databases have certain advantages over
relational<00:04:51.759><c> ones</c><00:04:52.320><c> but</c><00:04:52.479><c> that's</c><00:04:52.800><c> not</c><00:04:52.960><c> to</c><00:04:53.120><c> say</c>

00:04:53.350 --> 00:04:53.360 align:start position:0%
relational ones but that's not to say
 

00:04:53.360 --> 00:04:56.070 align:start position:0%
relational ones but that's not to say
that<00:04:53.600><c> relational</c><00:04:54.080><c> databases</c><00:04:54.800><c> are</c><00:04:54.960><c> obsolete</c>

00:04:56.070 --> 00:04:56.080 align:start position:0%
that relational databases are obsolete
 

00:04:56.080 --> 00:04:58.790 align:start position:0%
that relational databases are obsolete
far<00:04:56.320><c> from</c><00:04:56.639><c> it</c><00:04:57.199><c> nosql</c><00:04:57.919><c> is</c><00:04:58.000><c> more</c><00:04:58.240><c> limited</c><00:04:58.560><c> in</c><00:04:58.720><c> the</c>

00:04:58.790 --> 00:04:58.800 align:start position:0%
far from it nosql is more limited in the
 

00:04:58.800 --> 00:05:01.270 align:start position:0%
far from it nosql is more limited in the
way<00:04:58.960><c> you</c><00:04:59.120><c> can</c><00:04:59.360><c> retrieve</c><00:04:59.919><c> your</c><00:05:00.160><c> data</c><00:05:00.960><c> only</c>

00:05:01.270 --> 00:05:01.280 align:start position:0%
way you can retrieve your data only
 

00:05:01.280 --> 00:05:03.430 align:start position:0%
way you can retrieve your data only
allowing<00:05:01.680><c> you</c><00:05:01.840><c> to</c><00:05:02.000><c> retrieve</c><00:05:02.479><c> items</c><00:05:02.960><c> by</c><00:05:03.120><c> their</c>

00:05:03.430 --> 00:05:03.440 align:start position:0%
allowing you to retrieve items by their
 

00:05:03.440 --> 00:05:04.790 align:start position:0%
allowing you to retrieve items by their
primary<00:05:03.919><c> key</c>

00:05:04.790 --> 00:05:04.800 align:start position:0%
primary key
 

00:05:04.800 --> 00:05:07.749 align:start position:0%
primary key
finding<00:05:05.199><c> orders</c><00:05:05.680><c> by</c><00:05:05.919><c> id</c><00:05:06.400><c> is</c><00:05:06.560><c> no</c><00:05:06.880><c> problem</c><00:05:07.440><c> but</c>

00:05:07.749 --> 00:05:07.759 align:start position:0%
finding orders by id is no problem but
 

00:05:07.759 --> 00:05:09.670 align:start position:0%
finding orders by id is no problem but
finding<00:05:08.160><c> all</c><00:05:08.400><c> orders</c><00:05:08.880><c> above</c><00:05:09.199><c> a</c><00:05:09.280><c> certain</c>

00:05:09.670 --> 00:05:09.680 align:start position:0%
finding all orders above a certain
 

00:05:09.680 --> 00:05:12.150 align:start position:0%
finding all orders above a certain
amount<00:05:10.160><c> would</c><00:05:10.320><c> be</c><00:05:10.560><c> very</c><00:05:10.880><c> inefficient</c>

00:05:12.150 --> 00:05:12.160 align:start position:0%
amount would be very inefficient
 

00:05:12.160 --> 00:05:14.150 align:start position:0%
amount would be very inefficient
relational<00:05:12.720><c> databases</c><00:05:13.360><c> on</c><00:05:13.440><c> the</c><00:05:13.520><c> other</c><00:05:13.759><c> hand</c>

00:05:14.150 --> 00:05:14.160 align:start position:0%
relational databases on the other hand
 

00:05:14.160 --> 00:05:16.070 align:start position:0%
relational databases on the other hand
have<00:05:14.400><c> no</c><00:05:14.720><c> trouble</c><00:05:15.039><c> with</c><00:05:15.199><c> this</c>

00:05:16.070 --> 00:05:16.080 align:start position:0%
have no trouble with this
 

00:05:16.080 --> 00:05:18.230 align:start position:0%
have no trouble with this
now<00:05:16.240><c> there</c><00:05:16.479><c> are</c><00:05:16.639><c> workarounds</c><00:05:17.199><c> for</c><00:05:17.440><c> this</c><00:05:17.680><c> issue</c>

00:05:18.230 --> 00:05:18.240 align:start position:0%
now there are workarounds for this issue
 

00:05:18.240 --> 00:05:20.629 align:start position:0%
now there are workarounds for this issue
but<00:05:18.560><c> only</c><00:05:18.960><c> if</c><00:05:19.199><c> you</c><00:05:19.360><c> know</c><00:05:19.759><c> how</c><00:05:20.000><c> you're</c><00:05:20.240><c> going</c><00:05:20.400><c> to</c>

00:05:20.629 --> 00:05:20.639 align:start position:0%
but only if you know how you're going to
 

00:05:20.639 --> 00:05:22.790 align:start position:0%
but only if you know how you're going to
access<00:05:20.960><c> your</c><00:05:21.199><c> data</c><00:05:21.840><c> and</c><00:05:22.080><c> that</c><00:05:22.320><c> might</c><00:05:22.560><c> not</c>

00:05:22.790 --> 00:05:22.800 align:start position:0%
access your data and that might not
 

00:05:22.800 --> 00:05:24.550 align:start position:0%
access your data and that might not
always<00:05:23.120><c> be</c><00:05:23.360><c> the</c><00:05:23.520><c> case</c>

00:05:24.550 --> 00:05:24.560 align:start position:0%
always be the case
 

00:05:24.560 --> 00:05:27.110 align:start position:0%
always be the case
another<00:05:24.880><c> downside</c><00:05:25.440><c> is</c><00:05:25.600><c> that</c><00:05:25.759><c> nosql</c><00:05:26.400><c> databases</c>

00:05:27.110 --> 00:05:27.120 align:start position:0%
another downside is that nosql databases
 

00:05:27.120 --> 00:05:29.749 align:start position:0%
another downside is that nosql databases
are<00:05:27.440><c> eventually</c><00:05:28.080><c> consistent</c><00:05:29.199><c> when</c><00:05:29.360><c> you</c><00:05:29.520><c> write</c>

00:05:29.749 --> 00:05:29.759 align:start position:0%
are eventually consistent when you write
 

00:05:29.759 --> 00:05:31.670 align:start position:0%
are eventually consistent when you write
a<00:05:29.840><c> new</c><00:05:30.080><c> item</c><00:05:30.320><c> to</c><00:05:30.479><c> the</c><00:05:30.560><c> database</c><00:05:31.199><c> and</c><00:05:31.360><c> try</c><00:05:31.520><c> to</c>

00:05:31.670 --> 00:05:31.680 align:start position:0%
a new item to the database and try to
 

00:05:31.680 --> 00:05:33.830 align:start position:0%
a new item to the database and try to
read<00:05:31.919><c> it</c><00:05:32.000><c> back</c><00:05:32.320><c> straight</c><00:05:32.639><c> away</c><00:05:33.199><c> it</c><00:05:33.440><c> might</c><00:05:33.680><c> not</c>

00:05:33.830 --> 00:05:33.840 align:start position:0%
read it back straight away it might not
 

00:05:33.840 --> 00:05:35.270 align:start position:0%
read it back straight away it might not
be<00:05:34.080><c> returned</c>

00:05:35.270 --> 00:05:35.280 align:start position:0%
be returned
 

00:05:35.280 --> 00:05:37.590 align:start position:0%
be returned
as<00:05:35.520><c> i've</c><00:05:35.680><c> explained</c><00:05:36.400><c> nosql</c><00:05:37.120><c> splits</c><00:05:37.440><c> your</c>

00:05:37.590 --> 00:05:37.600 align:start position:0%
as i've explained nosql splits your
 

00:05:37.600 --> 00:05:40.070 align:start position:0%
as i've explained nosql splits your
database<00:05:38.240><c> into</c><00:05:38.560><c> partitions</c><00:05:39.520><c> but</c><00:05:39.759><c> each</c>

00:05:40.070 --> 00:05:40.080 align:start position:0%
database into partitions but each
 

00:05:40.080 --> 00:05:42.550 align:start position:0%
database into partitions but each
partition<00:05:40.720><c> is</c><00:05:41.039><c> mirrored</c><00:05:41.520><c> across</c><00:05:42.000><c> multiple</c>

00:05:42.550 --> 00:05:42.560 align:start position:0%
partition is mirrored across multiple
 

00:05:42.560 --> 00:05:43.510 align:start position:0%
partition is mirrored across multiple
servers

00:05:43.510 --> 00:05:43.520 align:start position:0%
servers
 

00:05:43.520 --> 00:05:45.590 align:start position:0%
servers
that<00:05:43.680><c> way</c><00:05:43.919><c> a</c><00:05:44.080><c> server</c><00:05:44.479><c> can</c><00:05:44.639><c> go</c><00:05:44.880><c> down</c><00:05:45.199><c> without</c>

00:05:45.590 --> 00:05:45.600 align:start position:0%
that way a server can go down without
 

00:05:45.600 --> 00:05:48.070 align:start position:0%
that way a server can go down without
much<00:05:45.919><c> impact</c><00:05:46.880><c> when</c><00:05:47.039><c> you</c><00:05:47.120><c> write</c><00:05:47.360><c> a</c><00:05:47.440><c> new</c><00:05:47.680><c> item</c><00:05:47.919><c> to</c>

00:05:48.070 --> 00:05:48.080 align:start position:0%
much impact when you write a new item to
 

00:05:48.080 --> 00:05:50.070 align:start position:0%
much impact when you write a new item to
the<00:05:48.160><c> database</c><00:05:48.960><c> one</c><00:05:49.120><c> of</c><00:05:49.199><c> these</c><00:05:49.440><c> mirrors</c><00:05:49.919><c> will</c>

00:05:50.070 --> 00:05:50.080 align:start position:0%
the database one of these mirrors will
 

00:05:50.080 --> 00:05:52.230 align:start position:0%
the database one of these mirrors will
store<00:05:50.320><c> the</c><00:05:50.479><c> new</c><00:05:50.720><c> item</c><00:05:51.280><c> and</c><00:05:51.360><c> then</c><00:05:51.680><c> copy</c><00:05:52.000><c> it</c><00:05:52.080><c> to</c>

00:05:52.230 --> 00:05:52.240 align:start position:0%
store the new item and then copy it to
 

00:05:52.240 --> 00:05:54.390 align:start position:0%
store the new item and then copy it to
the<00:05:52.400><c> others</c><00:05:52.880><c> in</c><00:05:53.039><c> the</c><00:05:53.199><c> background</c>

00:05:54.390 --> 00:05:54.400 align:start position:0%
the others in the background
 

00:05:54.400 --> 00:05:56.469 align:start position:0%
the others in the background
this<00:05:54.720><c> process</c><00:05:55.199><c> might</c><00:05:55.440><c> take</c><00:05:55.759><c> a</c><00:05:55.840><c> little</c><00:05:56.080><c> bit</c><00:05:56.240><c> of</c>

00:05:56.469 --> 00:05:56.479 align:start position:0%
this process might take a little bit of
 

00:05:56.479 --> 00:05:58.950 align:start position:0%
this process might take a little bit of
time<00:05:56.960><c> so</c><00:05:57.199><c> when</c><00:05:57.360><c> you</c><00:05:57.520><c> read</c><00:05:57.759><c> that</c><00:05:58.000><c> item</c><00:05:58.319><c> back</c><00:05:58.800><c> the</c>

00:05:58.950 --> 00:05:58.960 align:start position:0%
time so when you read that item back the
 

00:05:58.960 --> 00:06:01.270 align:start position:0%
time so when you read that item back the
nosql<00:05:59.600><c> database</c><00:06:00.160><c> might</c><00:06:00.400><c> try</c><00:06:00.639><c> to</c><00:06:00.720><c> read</c><00:06:00.960><c> it</c><00:06:01.120><c> from</c>

00:06:01.270 --> 00:06:01.280 align:start position:0%
nosql database might try to read it from
 

00:06:01.280 --> 00:06:03.749 align:start position:0%
nosql database might try to read it from
a<00:06:01.440><c> mirror</c><00:06:01.840><c> that</c><00:06:02.080><c> doesn't</c><00:06:02.560><c> have</c><00:06:02.800><c> it</c><00:06:02.880><c> yet</c>

00:06:03.749 --> 00:06:03.759 align:start position:0%
a mirror that doesn't have it yet
 

00:06:03.759 --> 00:06:05.830 align:start position:0%
a mirror that doesn't have it yet
now<00:06:03.919><c> this</c><00:06:04.160><c> is</c><00:06:04.319><c> not</c><00:06:04.479><c> a</c><00:06:04.560><c> big</c><00:06:04.800><c> issue</c><00:06:05.120><c> in</c><00:06:05.199><c> practice</c>

00:06:05.830 --> 00:06:05.840 align:start position:0%
now this is not a big issue in practice
 

00:06:05.840 --> 00:06:08.150 align:start position:0%
now this is not a big issue in practice
because<00:06:06.240><c> data</c><00:06:06.560><c> is</c><00:06:06.720><c> replicated</c><00:06:07.440><c> in</c><00:06:07.520><c> just</c><00:06:07.840><c> a</c><00:06:07.919><c> few</c>

00:06:08.150 --> 00:06:08.160 align:start position:0%
because data is replicated in just a few
 

00:06:08.160 --> 00:06:10.870 align:start position:0%
because data is replicated in just a few
milliseconds<00:06:09.120><c> and</c><00:06:09.360><c> if</c><00:06:09.520><c> you</c><00:06:09.680><c> want</c><00:06:09.919><c> consistency</c>

00:06:10.870 --> 00:06:10.880 align:start position:0%
milliseconds and if you want consistency
 

00:06:10.880 --> 00:06:14.790 align:start position:0%
milliseconds and if you want consistency
most<00:06:11.199><c> nosql</c><00:06:11.759><c> databases</c><00:06:12.639><c> do</c><00:06:12.960><c> have</c><00:06:13.199><c> that</c><00:06:13.520><c> option</c>

00:06:14.790 --> 00:06:14.800 align:start position:0%
most nosql databases do have that option
 

00:06:14.800 --> 00:06:17.590 align:start position:0%
most nosql databases do have that option
so<00:06:15.120><c> in</c><00:06:15.360><c> summary</c><00:06:15.919><c> both</c><00:06:16.160><c> nosql</c><00:06:17.039><c> and</c><00:06:17.120><c> relational</c>

00:06:17.590 --> 00:06:17.600 align:start position:0%
so in summary both nosql and relational
 

00:06:17.600 --> 00:06:19.510 align:start position:0%
so in summary both nosql and relational
databases<00:06:18.479><c> will</c><00:06:18.720><c> be</c><00:06:18.880><c> around</c><00:06:19.199><c> for</c><00:06:19.360><c> the</c>

00:06:19.510 --> 00:06:19.520 align:start position:0%
databases will be around for the
 

00:06:19.520 --> 00:06:21.830 align:start position:0%
databases will be around for the
foreseeable<00:06:20.160><c> future</c><00:06:20.960><c> each</c><00:06:21.199><c> with</c><00:06:21.440><c> their</c><00:06:21.600><c> own</c>

00:06:21.830 --> 00:06:21.840 align:start position:0%
foreseeable future each with their own
 

00:06:21.840 --> 00:06:23.909 align:start position:0%
foreseeable future each with their own
strengths<00:06:22.479><c> and</c><00:06:22.639><c> weaknesses</c>

00:06:23.909 --> 00:06:23.919 align:start position:0%
strengths and weaknesses
 

00:06:23.919 --> 00:06:26.629 align:start position:0%
strengths and weaknesses
so<00:06:24.240><c> now</c><00:06:24.479><c> you</c><00:06:24.639><c> know</c><00:06:24.880><c> how</c><00:06:25.120><c> nosql</c><00:06:25.759><c> works</c><00:06:26.400><c> let's</c>

00:06:26.629 --> 00:06:26.639 align:start position:0%
so now you know how nosql works let's
 

00:06:26.639 --> 00:06:29.029 align:start position:0%
so now you know how nosql works let's
look<00:06:26.800><c> at</c><00:06:26.880><c> a</c><00:06:26.960><c> few</c><00:06:27.199><c> examples</c><00:06:28.240><c> cloud</c><00:06:28.560><c> providers</c>

00:06:29.029 --> 00:06:29.039 align:start position:0%
look at a few examples cloud providers
 

00:06:29.039 --> 00:06:31.510 align:start position:0%
look at a few examples cloud providers
heavily<00:06:29.440><c> promote</c><00:06:29.919><c> nosql</c><00:06:30.880><c> because</c><00:06:31.120><c> they</c><00:06:31.280><c> can</c>

00:06:31.510 --> 00:06:31.520 align:start position:0%
heavily promote nosql because they can
 

00:06:31.520 --> 00:06:35.189 align:start position:0%
heavily promote nosql because they can
scale<00:06:31.840><c> it</c><00:06:32.000><c> more</c><00:06:32.240><c> easily</c><00:06:33.039><c> aws</c><00:06:33.759><c> has</c><00:06:33.919><c> dynamodb</c>

00:06:35.189 --> 00:06:35.199 align:start position:0%
scale it more easily aws has dynamodb
 

00:06:35.199 --> 00:06:37.830 align:start position:0%
scale it more easily aws has dynamodb
google<00:06:35.520><c> cloud</c><00:06:35.919><c> has</c><00:06:36.160><c> bigtable</c><00:06:36.960><c> and</c><00:06:37.199><c> azure</c><00:06:37.600><c> has</c>

00:06:37.830 --> 00:06:37.840 align:start position:0%
google cloud has bigtable and azure has
 

00:06:37.840 --> 00:06:39.270 align:start position:0%
google cloud has bigtable and azure has
cosmos<00:06:38.319><c> db</c>

00:06:39.270 --> 00:06:39.280 align:start position:0%
cosmos db
 

00:06:39.280 --> 00:06:40.950 align:start position:0%
cosmos db
and<00:06:39.440><c> to</c><00:06:39.600><c> give</c><00:06:39.759><c> you</c><00:06:39.919><c> another</c><00:06:40.240><c> example</c><00:06:40.720><c> of</c><00:06:40.800><c> their</c>

00:06:40.950 --> 00:06:40.960 align:start position:0%
and to give you another example of their
 

00:06:40.960 --> 00:06:43.749 align:start position:0%
and to give you another example of their
scalability<00:06:42.080><c> during</c><00:06:42.479><c> amazon</c><00:06:42.960><c> prime</c><00:06:43.199><c> day</c><00:06:43.520><c> in</c>

00:06:43.749 --> 00:06:43.759 align:start position:0%
scalability during amazon prime day in
 

00:06:43.759 --> 00:06:47.430 align:start position:0%
scalability during amazon prime day in
2019<00:06:44.880><c> amazon's</c><00:06:45.440><c> nosql</c><00:06:46.080><c> database</c><00:06:46.800><c> peaked</c><00:06:47.199><c> at</c>

00:06:47.430 --> 00:06:47.440 align:start position:0%
2019 amazon's nosql database peaked at
 

00:06:47.440 --> 00:06:50.670 align:start position:0%
2019 amazon's nosql database peaked at
45<00:06:48.240><c> million</c><00:06:48.639><c> requests</c><00:06:49.199><c> per</c><00:06:49.440><c> second</c><00:06:50.240><c> that's</c>

00:06:50.670 --> 00:06:50.680 align:start position:0%
45 million requests per second that's
 

00:06:50.680 --> 00:06:52.230 align:start position:0%
45 million requests per second that's
mind-boggling

00:06:52.230 --> 00:06:52.240 align:start position:0%
mind-boggling
 

00:06:52.240 --> 00:06:54.550 align:start position:0%
mind-boggling
but<00:06:52.400><c> you</c><00:06:52.560><c> can</c><00:06:52.800><c> also</c><00:06:53.120><c> run</c><00:06:53.280><c> nosql</c><00:06:53.919><c> databases</c>

00:06:54.550 --> 00:06:54.560 align:start position:0%
but you can also run nosql databases
 

00:06:54.560 --> 00:06:57.029 align:start position:0%
but you can also run nosql databases
yourself<00:06:55.280><c> with</c><00:06:55.520><c> software</c><00:06:56.000><c> like</c><00:06:56.160><c> cassandra</c>

00:06:57.029 --> 00:06:57.039 align:start position:0%
yourself with software like cassandra
 

00:06:57.039 --> 00:07:01.350 align:start position:0%
yourself with software like cassandra
cilla<00:06:57.680><c> couchdb</c><00:06:58.720><c> mongodb</c><00:06:59.759><c> and</c><00:07:00.000><c> much</c><00:07:00.319><c> more</c>

00:07:01.350 --> 00:07:01.360 align:start position:0%
cilla couchdb mongodb and much more
 

00:07:01.360 --> 00:07:03.029 align:start position:0%
cilla couchdb mongodb and much more
now<00:07:01.599><c> before</c><00:07:02.000><c> ending</c><00:07:02.319><c> this</c><00:07:02.479><c> video</c><00:07:02.800><c> let's</c>

00:07:03.029 --> 00:07:03.039 align:start position:0%
now before ending this video let's
 

00:07:03.039 --> 00:07:06.070 align:start position:0%
now before ending this video let's
quickly<00:07:03.440><c> talk</c><00:07:03.680><c> about</c><00:07:03.919><c> the</c><00:07:04.160><c> name</c><00:07:04.560><c> nosql</c><00:07:05.759><c> it's</c><00:07:06.000><c> a</c>

00:07:06.070 --> 00:07:06.080 align:start position:0%
quickly talk about the name nosql it's a
 

00:07:06.080 --> 00:07:08.070 align:start position:0%
quickly talk about the name nosql it's a
bit<00:07:06.319><c> confusing</c><00:07:06.880><c> as</c><00:07:07.039><c> it</c><00:07:07.199><c> can</c><00:07:07.360><c> have</c><00:07:07.759><c> two</c>

00:07:08.070 --> 00:07:08.080 align:start position:0%
bit confusing as it can have two
 

00:07:08.080 --> 00:07:11.270 align:start position:0%
bit confusing as it can have two
meanings<00:07:09.039><c> first</c><00:07:09.360><c> up</c><00:07:09.759><c> nosql</c><00:07:10.400><c> can</c><00:07:10.560><c> mean</c><00:07:11.039><c> not</c>

00:07:11.270 --> 00:07:11.280 align:start position:0%
meanings first up nosql can mean not
 

00:07:11.280 --> 00:07:13.830 align:start position:0%
meanings first up nosql can mean not
only<00:07:11.680><c> sql</c><00:07:12.720><c> pointing</c><00:07:13.039><c> to</c><00:07:13.199><c> the</c><00:07:13.280><c> fact</c><00:07:13.520><c> that</c><00:07:13.680><c> some</c>

00:07:13.830 --> 00:07:13.840 align:start position:0%
only sql pointing to the fact that some
 

00:07:13.840 --> 00:07:16.629 align:start position:0%
only sql pointing to the fact that some
nosql<00:07:14.479><c> databases</c><00:07:15.360><c> partially</c><00:07:15.840><c> understand</c><00:07:16.400><c> the</c>

00:07:16.629 --> 00:07:16.639 align:start position:0%
nosql databases partially understand the
 

00:07:16.639 --> 00:07:19.350 align:start position:0%
nosql databases partially understand the
sql<00:07:17.199><c> query</c><00:07:17.520><c> language</c><00:07:18.240><c> on</c><00:07:18.479><c> top</c><00:07:18.800><c> of</c><00:07:18.880><c> their</c><00:07:19.120><c> own</c>

00:07:19.350 --> 00:07:19.360 align:start position:0%
sql query language on top of their own
 

00:07:19.360 --> 00:07:21.189 align:start position:0%
sql query language on top of their own
query<00:07:19.759><c> capabilities</c>

00:07:21.189 --> 00:07:21.199 align:start position:0%
query capabilities
 

00:07:21.199 --> 00:07:24.150 align:start position:0%
query capabilities
and<00:07:21.440><c> secondly</c><00:07:22.160><c> it's</c><00:07:22.400><c> often</c><00:07:22.720><c> called</c><00:07:23.120><c> nosql</c><00:07:24.080><c> in</c>

00:07:24.150 --> 00:07:24.160 align:start position:0%
and secondly it's often called nosql in
 

00:07:24.160 --> 00:07:26.710 align:start position:0%
and secondly it's often called nosql in
the<00:07:24.319><c> sense</c><00:07:24.639><c> of</c><00:07:25.039><c> non-relational</c><00:07:26.240><c> because</c><00:07:26.560><c> it</c>

00:07:26.710 --> 00:07:26.720 align:start position:0%
the sense of non-relational because it
 

00:07:26.720 --> 00:07:29.589 align:start position:0%
the sense of non-relational because it
can't<00:07:27.199><c> easily</c><00:07:27.599><c> store</c><00:07:28.080><c> relational</c><00:07:28.720><c> data</c>

00:07:29.589 --> 00:07:29.599 align:start position:0%
can't easily store relational data
 

00:07:29.599 --> 00:07:31.589 align:start position:0%
can't easily store relational data
so<00:07:29.840><c> that</c><00:07:30.000><c> was</c><00:07:30.240><c> it</c><00:07:30.319><c> for</c><00:07:30.479><c> this</c><00:07:30.639><c> video</c><00:07:31.280><c> please</c>

00:07:31.589 --> 00:07:31.599 align:start position:0%
so that was it for this video please
 

00:07:31.599 --> 00:07:33.110 align:start position:0%
so that was it for this video please
subscribe<00:07:32.080><c> if</c><00:07:32.160><c> you</c><00:07:32.319><c> learned</c><00:07:32.560><c> something</c><00:07:32.880><c> from</c>

00:07:33.110 --> 00:07:33.120 align:start position:0%
subscribe if you learned something from
 

00:07:33.120 --> 00:07:38.039 align:start position:0%
subscribe if you learned something from
it<00:07:33.440><c> and</c><00:07:33.599><c> i</c><00:07:33.680><c> hope</c><00:07:33.919><c> to</c><00:07:34.080><c> see</c><00:07:34.240><c> you</c><00:07:34.560><c> in</c><00:07:34.639><c> the</c><00:07:34.720><c> next</c><00:07:35.039><c> one</c>

